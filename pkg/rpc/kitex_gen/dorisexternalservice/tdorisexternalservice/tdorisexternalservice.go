// Code generated by Kitex v0.8.0. DO NOT EDIT.

package tdorisexternalservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	dorisexternalservice "github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/dorisexternalservice"
)

func serviceInfo() *kitex.ServiceInfo {
	return tDorisExternalServiceServiceInfo
}

var tDorisExternalServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "TDorisExternalService"
	handlerType := (*dorisexternalservice.TDorisExternalService)(nil)
	methods := map[string]kitex.MethodInfo{
		"open_scanner":  kitex.NewMethodInfo(openScannerHandler, newTDorisExternalServiceOpenScannerArgs, newTDorisExternalServiceOpenScannerResult, false),
		"get_next":      kitex.NewMethodInfo(getNextHandler, newTDorisExternalServiceGetNextArgs, newTDorisExternalServiceGetNextResult, false),
		"close_scanner": kitex.NewMethodInfo(closeScannerHandler, newTDorisExternalServiceCloseScannerArgs, newTDorisExternalServiceCloseScannerResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "dorisexternalservice",
		"ServiceFilePath": `thrift/DorisExternalService.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func openScannerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dorisexternalservice.TDorisExternalServiceOpenScannerArgs)
	realResult := result.(*dorisexternalservice.TDorisExternalServiceOpenScannerResult)
	success, err := handler.(dorisexternalservice.TDorisExternalService).OpenScanner(ctx, realArg.Params)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTDorisExternalServiceOpenScannerArgs() interface{} {
	return dorisexternalservice.NewTDorisExternalServiceOpenScannerArgs()
}

func newTDorisExternalServiceOpenScannerResult() interface{} {
	return dorisexternalservice.NewTDorisExternalServiceOpenScannerResult()
}

func getNextHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dorisexternalservice.TDorisExternalServiceGetNextArgs)
	realResult := result.(*dorisexternalservice.TDorisExternalServiceGetNextResult)
	success, err := handler.(dorisexternalservice.TDorisExternalService).GetNext(ctx, realArg.Params)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTDorisExternalServiceGetNextArgs() interface{} {
	return dorisexternalservice.NewTDorisExternalServiceGetNextArgs()
}

func newTDorisExternalServiceGetNextResult() interface{} {
	return dorisexternalservice.NewTDorisExternalServiceGetNextResult()
}

func closeScannerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dorisexternalservice.TDorisExternalServiceCloseScannerArgs)
	realResult := result.(*dorisexternalservice.TDorisExternalServiceCloseScannerResult)
	success, err := handler.(dorisexternalservice.TDorisExternalService).CloseScanner(ctx, realArg.Params)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTDorisExternalServiceCloseScannerArgs() interface{} {
	return dorisexternalservice.NewTDorisExternalServiceCloseScannerArgs()
}

func newTDorisExternalServiceCloseScannerResult() interface{} {
	return dorisexternalservice.NewTDorisExternalServiceCloseScannerResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) OpenScanner(ctx context.Context, params *dorisexternalservice.TScanOpenParams) (r *dorisexternalservice.TScanOpenResult_, err error) {
	var _args dorisexternalservice.TDorisExternalServiceOpenScannerArgs
	_args.Params = params
	var _result dorisexternalservice.TDorisExternalServiceOpenScannerResult
	if err = p.c.Call(ctx, "open_scanner", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetNext(ctx context.Context, params *dorisexternalservice.TScanNextBatchParams) (r *dorisexternalservice.TScanBatchResult_, err error) {
	var _args dorisexternalservice.TDorisExternalServiceGetNextArgs
	_args.Params = params
	var _result dorisexternalservice.TDorisExternalServiceGetNextResult
	if err = p.c.Call(ctx, "get_next", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CloseScanner(ctx context.Context, params *dorisexternalservice.TScanCloseParams) (r *dorisexternalservice.TScanCloseResult_, err error) {
	var _args dorisexternalservice.TDorisExternalServiceCloseScannerArgs
	_args.Params = params
	var _result dorisexternalservice.TDorisExternalServiceCloseScannerResult
	if err = p.c.Call(ctx, "close_scanner", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
