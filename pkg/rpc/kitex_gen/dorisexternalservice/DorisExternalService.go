// Code generated by thriftgo (0.3.13). DO NOT EDIT.

package dorisexternalservice

import (
	"bytes"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/status"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/types"
	"strings"
)

type TScanOpenParams struct {
	Cluster          string            `thrift:"cluster,1,required" frugal:"1,required,string" json:"cluster"`
	Database         string            `thrift:"database,2,required" frugal:"2,required,string" json:"database"`
	Table            string            `thrift:"table,3,required" frugal:"3,required,string" json:"table"`
	TabletIds        []int64           `thrift:"tablet_ids,4,required" frugal:"4,required,list<i64>" json:"tablet_ids"`
	OpaquedQueryPlan string            `thrift:"opaqued_query_plan,5,required" frugal:"5,required,string" json:"opaqued_query_plan"`
	BatchSize        *int32            `thrift:"batch_size,6,optional" frugal:"6,optional,i32" json:"batch_size,omitempty"`
	Properties       map[string]string `thrift:"properties,7,optional" frugal:"7,optional,map<string:string>" json:"properties,omitempty"`
	Limit            *int64            `thrift:"limit,8,optional" frugal:"8,optional,i64" json:"limit,omitempty"`
	User             *string           `thrift:"user,9,optional" frugal:"9,optional,string" json:"user,omitempty"`
	Passwd           *string           `thrift:"passwd,10,optional" frugal:"10,optional,string" json:"passwd,omitempty"`
	KeepAliveMin     *int16            `thrift:"keep_alive_min,11,optional" frugal:"11,optional,i16" json:"keep_alive_min,omitempty"`
	ExecutionTimeout *int32            `thrift:"execution_timeout,12,optional" frugal:"12,optional,i32" json:"execution_timeout,omitempty"`
	MemLimit         *int64            `thrift:"mem_limit,13,optional" frugal:"13,optional,i64" json:"mem_limit,omitempty"`
}

func NewTScanOpenParams() *TScanOpenParams {
	return &TScanOpenParams{}
}

func (p *TScanOpenParams) InitDefault() {
}

func (p *TScanOpenParams) GetCluster() (v string) {
	return p.Cluster
}

func (p *TScanOpenParams) GetDatabase() (v string) {
	return p.Database
}

func (p *TScanOpenParams) GetTable() (v string) {
	return p.Table
}

func (p *TScanOpenParams) GetTabletIds() (v []int64) {
	return p.TabletIds
}

func (p *TScanOpenParams) GetOpaquedQueryPlan() (v string) {
	return p.OpaquedQueryPlan
}

var TScanOpenParams_BatchSize_DEFAULT int32

func (p *TScanOpenParams) GetBatchSize() (v int32) {
	if !p.IsSetBatchSize() {
		return TScanOpenParams_BatchSize_DEFAULT
	}
	return *p.BatchSize
}

var TScanOpenParams_Properties_DEFAULT map[string]string

func (p *TScanOpenParams) GetProperties() (v map[string]string) {
	if !p.IsSetProperties() {
		return TScanOpenParams_Properties_DEFAULT
	}
	return p.Properties
}

var TScanOpenParams_Limit_DEFAULT int64

func (p *TScanOpenParams) GetLimit() (v int64) {
	if !p.IsSetLimit() {
		return TScanOpenParams_Limit_DEFAULT
	}
	return *p.Limit
}

var TScanOpenParams_User_DEFAULT string

func (p *TScanOpenParams) GetUser() (v string) {
	if !p.IsSetUser() {
		return TScanOpenParams_User_DEFAULT
	}
	return *p.User
}

var TScanOpenParams_Passwd_DEFAULT string

func (p *TScanOpenParams) GetPasswd() (v string) {
	if !p.IsSetPasswd() {
		return TScanOpenParams_Passwd_DEFAULT
	}
	return *p.Passwd
}

var TScanOpenParams_KeepAliveMin_DEFAULT int16

func (p *TScanOpenParams) GetKeepAliveMin() (v int16) {
	if !p.IsSetKeepAliveMin() {
		return TScanOpenParams_KeepAliveMin_DEFAULT
	}
	return *p.KeepAliveMin
}

var TScanOpenParams_ExecutionTimeout_DEFAULT int32

func (p *TScanOpenParams) GetExecutionTimeout() (v int32) {
	if !p.IsSetExecutionTimeout() {
		return TScanOpenParams_ExecutionTimeout_DEFAULT
	}
	return *p.ExecutionTimeout
}

var TScanOpenParams_MemLimit_DEFAULT int64

func (p *TScanOpenParams) GetMemLimit() (v int64) {
	if !p.IsSetMemLimit() {
		return TScanOpenParams_MemLimit_DEFAULT
	}
	return *p.MemLimit
}
func (p *TScanOpenParams) SetCluster(val string) {
	p.Cluster = val
}
func (p *TScanOpenParams) SetDatabase(val string) {
	p.Database = val
}
func (p *TScanOpenParams) SetTable(val string) {
	p.Table = val
}
func (p *TScanOpenParams) SetTabletIds(val []int64) {
	p.TabletIds = val
}
func (p *TScanOpenParams) SetOpaquedQueryPlan(val string) {
	p.OpaquedQueryPlan = val
}
func (p *TScanOpenParams) SetBatchSize(val *int32) {
	p.BatchSize = val
}
func (p *TScanOpenParams) SetProperties(val map[string]string) {
	p.Properties = val
}
func (p *TScanOpenParams) SetLimit(val *int64) {
	p.Limit = val
}
func (p *TScanOpenParams) SetUser(val *string) {
	p.User = val
}
func (p *TScanOpenParams) SetPasswd(val *string) {
	p.Passwd = val
}
func (p *TScanOpenParams) SetKeepAliveMin(val *int16) {
	p.KeepAliveMin = val
}
func (p *TScanOpenParams) SetExecutionTimeout(val *int32) {
	p.ExecutionTimeout = val
}
func (p *TScanOpenParams) SetMemLimit(val *int64) {
	p.MemLimit = val
}

var fieldIDToName_TScanOpenParams = map[int16]string{
	1:  "cluster",
	2:  "database",
	3:  "table",
	4:  "tablet_ids",
	5:  "opaqued_query_plan",
	6:  "batch_size",
	7:  "properties",
	8:  "limit",
	9:  "user",
	10: "passwd",
	11: "keep_alive_min",
	12: "execution_timeout",
	13: "mem_limit",
}

func (p *TScanOpenParams) IsSetBatchSize() bool {
	return p.BatchSize != nil
}

func (p *TScanOpenParams) IsSetProperties() bool {
	return p.Properties != nil
}

func (p *TScanOpenParams) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *TScanOpenParams) IsSetUser() bool {
	return p.User != nil
}

func (p *TScanOpenParams) IsSetPasswd() bool {
	return p.Passwd != nil
}

func (p *TScanOpenParams) IsSetKeepAliveMin() bool {
	return p.KeepAliveMin != nil
}

func (p *TScanOpenParams) IsSetExecutionTimeout() bool {
	return p.ExecutionTimeout != nil
}

func (p *TScanOpenParams) IsSetMemLimit() bool {
	return p.MemLimit != nil
}

func (p *TScanOpenParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCluster bool = false
	var issetDatabase bool = false
	var issetTable bool = false
	var issetTabletIds bool = false
	var issetOpaquedQueryPlan bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCluster = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatabase = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetTable = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetOpaquedQueryPlan = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCluster {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetDatabase {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTable {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetTabletIds {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetOpaquedQueryPlan {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TScanOpenParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TScanOpenParams[fieldId]))
}

func (p *TScanOpenParams) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Cluster = _field
	return nil
}
func (p *TScanOpenParams) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Database = _field
	return nil
}
func (p *TScanOpenParams) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Table = _field
	return nil
}
func (p *TScanOpenParams) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TabletIds = _field
	return nil
}
func (p *TScanOpenParams) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OpaquedQueryPlan = _field
	return nil
}
func (p *TScanOpenParams) ReadField6(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BatchSize = _field
	return nil
}
func (p *TScanOpenParams) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Properties = _field
	return nil
}
func (p *TScanOpenParams) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Limit = _field
	return nil
}
func (p *TScanOpenParams) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *TScanOpenParams) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Passwd = _field
	return nil
}
func (p *TScanOpenParams) ReadField11(iprot thrift.TProtocol) error {

	var _field *int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.KeepAliveMin = _field
	return nil
}
func (p *TScanOpenParams) ReadField12(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExecutionTimeout = _field
	return nil
}
func (p *TScanOpenParams) ReadField13(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MemLimit = _field
	return nil
}

func (p *TScanOpenParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TScanOpenParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TScanOpenParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Cluster); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TScanOpenParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("database", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Database); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TScanOpenParams) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("table", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Table); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TScanOpenParams) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_ids", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.TabletIds)); err != nil {
		return err
	}
	for _, v := range p.TabletIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TScanOpenParams) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("opaqued_query_plan", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OpaquedQueryPlan); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TScanOpenParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBatchSize() {
		if err = oprot.WriteFieldBegin("batch_size", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BatchSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TScanOpenParams) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperties() {
		if err = oprot.WriteFieldBegin("properties", thrift.MAP, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
			return err
		}
		for k, v := range p.Properties {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TScanOpenParams) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err = oprot.WriteFieldBegin("limit", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Limit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TScanOpenParams) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TScanOpenParams) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetPasswd() {
		if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Passwd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TScanOpenParams) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeepAliveMin() {
		if err = oprot.WriteFieldBegin("keep_alive_min", thrift.I16, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.KeepAliveMin); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TScanOpenParams) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetExecutionTimeout() {
		if err = oprot.WriteFieldBegin("execution_timeout", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ExecutionTimeout); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TScanOpenParams) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemLimit() {
		if err = oprot.WriteFieldBegin("mem_limit", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MemLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TScanOpenParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScanOpenParams(%+v)", *p)

}

func (p *TScanOpenParams) DeepEqual(ano *TScanOpenParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field2DeepEqual(ano.Database) {
		return false
	}
	if !p.Field3DeepEqual(ano.Table) {
		return false
	}
	if !p.Field4DeepEqual(ano.TabletIds) {
		return false
	}
	if !p.Field5DeepEqual(ano.OpaquedQueryPlan) {
		return false
	}
	if !p.Field6DeepEqual(ano.BatchSize) {
		return false
	}
	if !p.Field7DeepEqual(ano.Properties) {
		return false
	}
	if !p.Field8DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field9DeepEqual(ano.User) {
		return false
	}
	if !p.Field10DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field11DeepEqual(ano.KeepAliveMin) {
		return false
	}
	if !p.Field12DeepEqual(ano.ExecutionTimeout) {
		return false
	}
	if !p.Field13DeepEqual(ano.MemLimit) {
		return false
	}
	return true
}

func (p *TScanOpenParams) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Cluster, src) != 0 {
		return false
	}
	return true
}
func (p *TScanOpenParams) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Database, src) != 0 {
		return false
	}
	return true
}
func (p *TScanOpenParams) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Table, src) != 0 {
		return false
	}
	return true
}
func (p *TScanOpenParams) Field4DeepEqual(src []int64) bool {

	if len(p.TabletIds) != len(src) {
		return false
	}
	for i, v := range p.TabletIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TScanOpenParams) Field5DeepEqual(src string) bool {

	if strings.Compare(p.OpaquedQueryPlan, src) != 0 {
		return false
	}
	return true
}
func (p *TScanOpenParams) Field6DeepEqual(src *int32) bool {

	if p.BatchSize == src {
		return true
	} else if p.BatchSize == nil || src == nil {
		return false
	}
	if *p.BatchSize != *src {
		return false
	}
	return true
}
func (p *TScanOpenParams) Field7DeepEqual(src map[string]string) bool {

	if len(p.Properties) != len(src) {
		return false
	}
	for k, v := range p.Properties {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TScanOpenParams) Field8DeepEqual(src *int64) bool {

	if p.Limit == src {
		return true
	} else if p.Limit == nil || src == nil {
		return false
	}
	if *p.Limit != *src {
		return false
	}
	return true
}
func (p *TScanOpenParams) Field9DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *TScanOpenParams) Field10DeepEqual(src *string) bool {

	if p.Passwd == src {
		return true
	} else if p.Passwd == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Passwd, *src) != 0 {
		return false
	}
	return true
}
func (p *TScanOpenParams) Field11DeepEqual(src *int16) bool {

	if p.KeepAliveMin == src {
		return true
	} else if p.KeepAliveMin == nil || src == nil {
		return false
	}
	if *p.KeepAliveMin != *src {
		return false
	}
	return true
}
func (p *TScanOpenParams) Field12DeepEqual(src *int32) bool {

	if p.ExecutionTimeout == src {
		return true
	} else if p.ExecutionTimeout == nil || src == nil {
		return false
	}
	if *p.ExecutionTimeout != *src {
		return false
	}
	return true
}
func (p *TScanOpenParams) Field13DeepEqual(src *int64) bool {

	if p.MemLimit == src {
		return true
	} else if p.MemLimit == nil || src == nil {
		return false
	}
	if *p.MemLimit != *src {
		return false
	}
	return true
}

type TScanColumnDesc struct {
	Name *string               `thrift:"name,1,optional" frugal:"1,optional,string" json:"name,omitempty"`
	Type *types.TPrimitiveType `thrift:"type,2,optional" frugal:"2,optional,TPrimitiveType" json:"type,omitempty"`
}

func NewTScanColumnDesc() *TScanColumnDesc {
	return &TScanColumnDesc{}
}

func (p *TScanColumnDesc) InitDefault() {
}

var TScanColumnDesc_Name_DEFAULT string

func (p *TScanColumnDesc) GetName() (v string) {
	if !p.IsSetName() {
		return TScanColumnDesc_Name_DEFAULT
	}
	return *p.Name
}

var TScanColumnDesc_Type_DEFAULT types.TPrimitiveType

func (p *TScanColumnDesc) GetType() (v types.TPrimitiveType) {
	if !p.IsSetType() {
		return TScanColumnDesc_Type_DEFAULT
	}
	return *p.Type
}
func (p *TScanColumnDesc) SetName(val *string) {
	p.Name = val
}
func (p *TScanColumnDesc) SetType(val *types.TPrimitiveType) {
	p.Type = val
}

var fieldIDToName_TScanColumnDesc = map[int16]string{
	1: "name",
	2: "type",
}

func (p *TScanColumnDesc) IsSetName() bool {
	return p.Name != nil
}

func (p *TScanColumnDesc) IsSetType() bool {
	return p.Type != nil
}

func (p *TScanColumnDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TScanColumnDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TScanColumnDesc) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *TScanColumnDesc) ReadField2(iprot thrift.TProtocol) error {

	var _field *types.TPrimitiveType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TPrimitiveType(v)
		_field = &tmp
	}
	p.Type = _field
	return nil
}

func (p *TScanColumnDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TScanColumnDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TScanColumnDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TScanColumnDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TScanColumnDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScanColumnDesc(%+v)", *p)

}

func (p *TScanColumnDesc) DeepEqual(ano *TScanColumnDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *TScanColumnDesc) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *TScanColumnDesc) Field2DeepEqual(src *types.TPrimitiveType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if *p.Type != *src {
		return false
	}
	return true
}

type TScanOpenResult_ struct {
	Status          *status.TStatus    `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
	ContextId       *string            `thrift:"context_id,2,optional" frugal:"2,optional,string" json:"context_id,omitempty"`
	SelectedColumns []*TScanColumnDesc `thrift:"selected_columns,3,optional" frugal:"3,optional,list<TScanColumnDesc>" json:"selected_columns,omitempty"`
}

func NewTScanOpenResult_() *TScanOpenResult_ {
	return &TScanOpenResult_{}
}

func (p *TScanOpenResult_) InitDefault() {
}

var TScanOpenResult__Status_DEFAULT *status.TStatus

func (p *TScanOpenResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TScanOpenResult__Status_DEFAULT
	}
	return p.Status
}

var TScanOpenResult__ContextId_DEFAULT string

func (p *TScanOpenResult_) GetContextId() (v string) {
	if !p.IsSetContextId() {
		return TScanOpenResult__ContextId_DEFAULT
	}
	return *p.ContextId
}

var TScanOpenResult__SelectedColumns_DEFAULT []*TScanColumnDesc

func (p *TScanOpenResult_) GetSelectedColumns() (v []*TScanColumnDesc) {
	if !p.IsSetSelectedColumns() {
		return TScanOpenResult__SelectedColumns_DEFAULT
	}
	return p.SelectedColumns
}
func (p *TScanOpenResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TScanOpenResult_) SetContextId(val *string) {
	p.ContextId = val
}
func (p *TScanOpenResult_) SetSelectedColumns(val []*TScanColumnDesc) {
	p.SelectedColumns = val
}

var fieldIDToName_TScanOpenResult_ = map[int16]string{
	1: "status",
	2: "context_id",
	3: "selected_columns",
}

func (p *TScanOpenResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TScanOpenResult_) IsSetContextId() bool {
	return p.ContextId != nil
}

func (p *TScanOpenResult_) IsSetSelectedColumns() bool {
	return p.SelectedColumns != nil
}

func (p *TScanOpenResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TScanOpenResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TScanOpenResult_[fieldId]))
}

func (p *TScanOpenResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TScanOpenResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ContextId = _field
	return nil
}
func (p *TScanOpenResult_) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TScanColumnDesc, 0, size)
	values := make([]TScanColumnDesc, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SelectedColumns = _field
	return nil
}

func (p *TScanOpenResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TScanOpenResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TScanOpenResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TScanOpenResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetContextId() {
		if err = oprot.WriteFieldBegin("context_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ContextId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TScanOpenResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSelectedColumns() {
		if err = oprot.WriteFieldBegin("selected_columns", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SelectedColumns)); err != nil {
			return err
		}
		for _, v := range p.SelectedColumns {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TScanOpenResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScanOpenResult_(%+v)", *p)

}

func (p *TScanOpenResult_) DeepEqual(ano *TScanOpenResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.ContextId) {
		return false
	}
	if !p.Field3DeepEqual(ano.SelectedColumns) {
		return false
	}
	return true
}

func (p *TScanOpenResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TScanOpenResult_) Field2DeepEqual(src *string) bool {

	if p.ContextId == src {
		return true
	} else if p.ContextId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ContextId, *src) != 0 {
		return false
	}
	return true
}
func (p *TScanOpenResult_) Field3DeepEqual(src []*TScanColumnDesc) bool {

	if len(p.SelectedColumns) != len(src) {
		return false
	}
	for i, v := range p.SelectedColumns {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TScanNextBatchParams struct {
	ContextId *string `thrift:"context_id,1,optional" frugal:"1,optional,string" json:"context_id,omitempty"`
	Offset    *int64  `thrift:"offset,2,optional" frugal:"2,optional,i64" json:"offset,omitempty"`
}

func NewTScanNextBatchParams() *TScanNextBatchParams {
	return &TScanNextBatchParams{}
}

func (p *TScanNextBatchParams) InitDefault() {
}

var TScanNextBatchParams_ContextId_DEFAULT string

func (p *TScanNextBatchParams) GetContextId() (v string) {
	if !p.IsSetContextId() {
		return TScanNextBatchParams_ContextId_DEFAULT
	}
	return *p.ContextId
}

var TScanNextBatchParams_Offset_DEFAULT int64

func (p *TScanNextBatchParams) GetOffset() (v int64) {
	if !p.IsSetOffset() {
		return TScanNextBatchParams_Offset_DEFAULT
	}
	return *p.Offset
}
func (p *TScanNextBatchParams) SetContextId(val *string) {
	p.ContextId = val
}
func (p *TScanNextBatchParams) SetOffset(val *int64) {
	p.Offset = val
}

var fieldIDToName_TScanNextBatchParams = map[int16]string{
	1: "context_id",
	2: "offset",
}

func (p *TScanNextBatchParams) IsSetContextId() bool {
	return p.ContextId != nil
}

func (p *TScanNextBatchParams) IsSetOffset() bool {
	return p.Offset != nil
}

func (p *TScanNextBatchParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TScanNextBatchParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TScanNextBatchParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ContextId = _field
	return nil
}
func (p *TScanNextBatchParams) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Offset = _field
	return nil
}

func (p *TScanNextBatchParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TScanNextBatchParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TScanNextBatchParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetContextId() {
		if err = oprot.WriteFieldBegin("context_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ContextId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TScanNextBatchParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOffset() {
		if err = oprot.WriteFieldBegin("offset", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Offset); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TScanNextBatchParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScanNextBatchParams(%+v)", *p)

}

func (p *TScanNextBatchParams) DeepEqual(ano *TScanNextBatchParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ContextId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Offset) {
		return false
	}
	return true
}

func (p *TScanNextBatchParams) Field1DeepEqual(src *string) bool {

	if p.ContextId == src {
		return true
	} else if p.ContextId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ContextId, *src) != 0 {
		return false
	}
	return true
}
func (p *TScanNextBatchParams) Field2DeepEqual(src *int64) bool {

	if p.Offset == src {
		return true
	} else if p.Offset == nil || src == nil {
		return false
	}
	if *p.Offset != *src {
		return false
	}
	return true
}

type TScanBatchResult_ struct {
	Status *status.TStatus `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
	Eos    *bool           `thrift:"eos,2,optional" frugal:"2,optional,bool" json:"eos,omitempty"`
	Rows   []byte          `thrift:"rows,3,optional" frugal:"3,optional,binary" json:"rows,omitempty"`
}

func NewTScanBatchResult_() *TScanBatchResult_ {
	return &TScanBatchResult_{}
}

func (p *TScanBatchResult_) InitDefault() {
}

var TScanBatchResult__Status_DEFAULT *status.TStatus

func (p *TScanBatchResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TScanBatchResult__Status_DEFAULT
	}
	return p.Status
}

var TScanBatchResult__Eos_DEFAULT bool

func (p *TScanBatchResult_) GetEos() (v bool) {
	if !p.IsSetEos() {
		return TScanBatchResult__Eos_DEFAULT
	}
	return *p.Eos
}

var TScanBatchResult__Rows_DEFAULT []byte

func (p *TScanBatchResult_) GetRows() (v []byte) {
	if !p.IsSetRows() {
		return TScanBatchResult__Rows_DEFAULT
	}
	return p.Rows
}
func (p *TScanBatchResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TScanBatchResult_) SetEos(val *bool) {
	p.Eos = val
}
func (p *TScanBatchResult_) SetRows(val []byte) {
	p.Rows = val
}

var fieldIDToName_TScanBatchResult_ = map[int16]string{
	1: "status",
	2: "eos",
	3: "rows",
}

func (p *TScanBatchResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TScanBatchResult_) IsSetEos() bool {
	return p.Eos != nil
}

func (p *TScanBatchResult_) IsSetRows() bool {
	return p.Rows != nil
}

func (p *TScanBatchResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TScanBatchResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TScanBatchResult_[fieldId]))
}

func (p *TScanBatchResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TScanBatchResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Eos = _field
	return nil
}
func (p *TScanBatchResult_) ReadField3(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Rows = _field
	return nil
}

func (p *TScanBatchResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TScanBatchResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TScanBatchResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TScanBatchResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEos() {
		if err = oprot.WriteFieldBegin("eos", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Eos); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TScanBatchResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRows() {
		if err = oprot.WriteFieldBegin("rows", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBinary([]byte(p.Rows)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TScanBatchResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScanBatchResult_(%+v)", *p)

}

func (p *TScanBatchResult_) DeepEqual(ano *TScanBatchResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.Eos) {
		return false
	}
	if !p.Field3DeepEqual(ano.Rows) {
		return false
	}
	return true
}

func (p *TScanBatchResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TScanBatchResult_) Field2DeepEqual(src *bool) bool {

	if p.Eos == src {
		return true
	} else if p.Eos == nil || src == nil {
		return false
	}
	if *p.Eos != *src {
		return false
	}
	return true
}
func (p *TScanBatchResult_) Field3DeepEqual(src []byte) bool {

	if bytes.Compare(p.Rows, src) != 0 {
		return false
	}
	return true
}

type TScanCloseParams struct {
	ContextId *string `thrift:"context_id,1,optional" frugal:"1,optional,string" json:"context_id,omitempty"`
}

func NewTScanCloseParams() *TScanCloseParams {
	return &TScanCloseParams{}
}

func (p *TScanCloseParams) InitDefault() {
}

var TScanCloseParams_ContextId_DEFAULT string

func (p *TScanCloseParams) GetContextId() (v string) {
	if !p.IsSetContextId() {
		return TScanCloseParams_ContextId_DEFAULT
	}
	return *p.ContextId
}
func (p *TScanCloseParams) SetContextId(val *string) {
	p.ContextId = val
}

var fieldIDToName_TScanCloseParams = map[int16]string{
	1: "context_id",
}

func (p *TScanCloseParams) IsSetContextId() bool {
	return p.ContextId != nil
}

func (p *TScanCloseParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TScanCloseParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TScanCloseParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ContextId = _field
	return nil
}

func (p *TScanCloseParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TScanCloseParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TScanCloseParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetContextId() {
		if err = oprot.WriteFieldBegin("context_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ContextId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TScanCloseParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScanCloseParams(%+v)", *p)

}

func (p *TScanCloseParams) DeepEqual(ano *TScanCloseParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ContextId) {
		return false
	}
	return true
}

func (p *TScanCloseParams) Field1DeepEqual(src *string) bool {

	if p.ContextId == src {
		return true
	} else if p.ContextId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ContextId, *src) != 0 {
		return false
	}
	return true
}

type TScanCloseResult_ struct {
	Status *status.TStatus `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
}

func NewTScanCloseResult_() *TScanCloseResult_ {
	return &TScanCloseResult_{}
}

func (p *TScanCloseResult_) InitDefault() {
}

var TScanCloseResult__Status_DEFAULT *status.TStatus

func (p *TScanCloseResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TScanCloseResult__Status_DEFAULT
	}
	return p.Status
}
func (p *TScanCloseResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}

var fieldIDToName_TScanCloseResult_ = map[int16]string{
	1: "status",
}

func (p *TScanCloseResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TScanCloseResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TScanCloseResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TScanCloseResult_[fieldId]))
}

func (p *TScanCloseResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}

func (p *TScanCloseResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TScanCloseResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TScanCloseResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TScanCloseResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScanCloseResult_(%+v)", *p)

}

func (p *TScanCloseResult_) DeepEqual(ano *TScanCloseResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *TScanCloseResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type TDorisExternalService interface {
	OpenScanner(ctx context.Context, params *TScanOpenParams) (r *TScanOpenResult_, err error)

	GetNext(ctx context.Context, params *TScanNextBatchParams) (r *TScanBatchResult_, err error)

	CloseScanner(ctx context.Context, params *TScanCloseParams) (r *TScanCloseResult_, err error)
}

type TDorisExternalServiceClient struct {
	c thrift.TClient
}

func NewTDorisExternalServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TDorisExternalServiceClient {
	return &TDorisExternalServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewTDorisExternalServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TDorisExternalServiceClient {
	return &TDorisExternalServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewTDorisExternalServiceClient(c thrift.TClient) *TDorisExternalServiceClient {
	return &TDorisExternalServiceClient{
		c: c,
	}
}

func (p *TDorisExternalServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *TDorisExternalServiceClient) OpenScanner(ctx context.Context, params *TScanOpenParams) (r *TScanOpenResult_, err error) {
	var _args TDorisExternalServiceOpenScannerArgs
	_args.Params = params
	var _result TDorisExternalServiceOpenScannerResult
	if err = p.Client_().Call(ctx, "open_scanner", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TDorisExternalServiceClient) GetNext(ctx context.Context, params *TScanNextBatchParams) (r *TScanBatchResult_, err error) {
	var _args TDorisExternalServiceGetNextArgs
	_args.Params = params
	var _result TDorisExternalServiceGetNextResult
	if err = p.Client_().Call(ctx, "get_next", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TDorisExternalServiceClient) CloseScanner(ctx context.Context, params *TScanCloseParams) (r *TScanCloseResult_, err error) {
	var _args TDorisExternalServiceCloseScannerArgs
	_args.Params = params
	var _result TDorisExternalServiceCloseScannerResult
	if err = p.Client_().Call(ctx, "close_scanner", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type TDorisExternalServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TDorisExternalService
}

func (p *TDorisExternalServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TDorisExternalServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TDorisExternalServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTDorisExternalServiceProcessor(handler TDorisExternalService) *TDorisExternalServiceProcessor {
	self := &TDorisExternalServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("open_scanner", &tDorisExternalServiceProcessorOpenScanner{handler: handler})
	self.AddToProcessorMap("get_next", &tDorisExternalServiceProcessorGetNext{handler: handler})
	self.AddToProcessorMap("close_scanner", &tDorisExternalServiceProcessorCloseScanner{handler: handler})
	return self
}
func (p *TDorisExternalServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type tDorisExternalServiceProcessorOpenScanner struct {
	handler TDorisExternalService
}

func (p *tDorisExternalServiceProcessorOpenScanner) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TDorisExternalServiceOpenScannerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("open_scanner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TDorisExternalServiceOpenScannerResult{}
	var retval *TScanOpenResult_
	if retval, err2 = p.handler.OpenScanner(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing open_scanner: "+err2.Error())
		oprot.WriteMessageBegin("open_scanner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("open_scanner", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tDorisExternalServiceProcessorGetNext struct {
	handler TDorisExternalService
}

func (p *tDorisExternalServiceProcessorGetNext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TDorisExternalServiceGetNextArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_next", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TDorisExternalServiceGetNextResult{}
	var retval *TScanBatchResult_
	if retval, err2 = p.handler.GetNext(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_next: "+err2.Error())
		oprot.WriteMessageBegin("get_next", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_next", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tDorisExternalServiceProcessorCloseScanner struct {
	handler TDorisExternalService
}

func (p *tDorisExternalServiceProcessorCloseScanner) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TDorisExternalServiceCloseScannerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("close_scanner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TDorisExternalServiceCloseScannerResult{}
	var retval *TScanCloseResult_
	if retval, err2 = p.handler.CloseScanner(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing close_scanner: "+err2.Error())
		oprot.WriteMessageBegin("close_scanner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("close_scanner", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type TDorisExternalServiceOpenScannerArgs struct {
	Params *TScanOpenParams `thrift:"params,1" frugal:"1,default,TScanOpenParams" json:"params"`
}

func NewTDorisExternalServiceOpenScannerArgs() *TDorisExternalServiceOpenScannerArgs {
	return &TDorisExternalServiceOpenScannerArgs{}
}

func (p *TDorisExternalServiceOpenScannerArgs) InitDefault() {
}

var TDorisExternalServiceOpenScannerArgs_Params_DEFAULT *TScanOpenParams

func (p *TDorisExternalServiceOpenScannerArgs) GetParams() (v *TScanOpenParams) {
	if !p.IsSetParams() {
		return TDorisExternalServiceOpenScannerArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *TDorisExternalServiceOpenScannerArgs) SetParams(val *TScanOpenParams) {
	p.Params = val
}

var fieldIDToName_TDorisExternalServiceOpenScannerArgs = map[int16]string{
	1: "params",
}

func (p *TDorisExternalServiceOpenScannerArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *TDorisExternalServiceOpenScannerArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDorisExternalServiceOpenScannerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TDorisExternalServiceOpenScannerArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTScanOpenParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}

func (p *TDorisExternalServiceOpenScannerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("open_scanner_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDorisExternalServiceOpenScannerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDorisExternalServiceOpenScannerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDorisExternalServiceOpenScannerArgs(%+v)", *p)

}

func (p *TDorisExternalServiceOpenScannerArgs) DeepEqual(ano *TDorisExternalServiceOpenScannerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *TDorisExternalServiceOpenScannerArgs) Field1DeepEqual(src *TScanOpenParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type TDorisExternalServiceOpenScannerResult struct {
	Success *TScanOpenResult_ `thrift:"success,0,optional" frugal:"0,optional,TScanOpenResult_" json:"success,omitempty"`
}

func NewTDorisExternalServiceOpenScannerResult() *TDorisExternalServiceOpenScannerResult {
	return &TDorisExternalServiceOpenScannerResult{}
}

func (p *TDorisExternalServiceOpenScannerResult) InitDefault() {
}

var TDorisExternalServiceOpenScannerResult_Success_DEFAULT *TScanOpenResult_

func (p *TDorisExternalServiceOpenScannerResult) GetSuccess() (v *TScanOpenResult_) {
	if !p.IsSetSuccess() {
		return TDorisExternalServiceOpenScannerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TDorisExternalServiceOpenScannerResult) SetSuccess(x interface{}) {
	p.Success = x.(*TScanOpenResult_)
}

var fieldIDToName_TDorisExternalServiceOpenScannerResult = map[int16]string{
	0: "success",
}

func (p *TDorisExternalServiceOpenScannerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TDorisExternalServiceOpenScannerResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDorisExternalServiceOpenScannerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TDorisExternalServiceOpenScannerResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTScanOpenResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TDorisExternalServiceOpenScannerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("open_scanner_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDorisExternalServiceOpenScannerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TDorisExternalServiceOpenScannerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDorisExternalServiceOpenScannerResult(%+v)", *p)

}

func (p *TDorisExternalServiceOpenScannerResult) DeepEqual(ano *TDorisExternalServiceOpenScannerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TDorisExternalServiceOpenScannerResult) Field0DeepEqual(src *TScanOpenResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TDorisExternalServiceGetNextArgs struct {
	Params *TScanNextBatchParams `thrift:"params,1" frugal:"1,default,TScanNextBatchParams" json:"params"`
}

func NewTDorisExternalServiceGetNextArgs() *TDorisExternalServiceGetNextArgs {
	return &TDorisExternalServiceGetNextArgs{}
}

func (p *TDorisExternalServiceGetNextArgs) InitDefault() {
}

var TDorisExternalServiceGetNextArgs_Params_DEFAULT *TScanNextBatchParams

func (p *TDorisExternalServiceGetNextArgs) GetParams() (v *TScanNextBatchParams) {
	if !p.IsSetParams() {
		return TDorisExternalServiceGetNextArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *TDorisExternalServiceGetNextArgs) SetParams(val *TScanNextBatchParams) {
	p.Params = val
}

var fieldIDToName_TDorisExternalServiceGetNextArgs = map[int16]string{
	1: "params",
}

func (p *TDorisExternalServiceGetNextArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *TDorisExternalServiceGetNextArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDorisExternalServiceGetNextArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TDorisExternalServiceGetNextArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTScanNextBatchParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}

func (p *TDorisExternalServiceGetNextArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("get_next_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDorisExternalServiceGetNextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDorisExternalServiceGetNextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDorisExternalServiceGetNextArgs(%+v)", *p)

}

func (p *TDorisExternalServiceGetNextArgs) DeepEqual(ano *TDorisExternalServiceGetNextArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *TDorisExternalServiceGetNextArgs) Field1DeepEqual(src *TScanNextBatchParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type TDorisExternalServiceGetNextResult struct {
	Success *TScanBatchResult_ `thrift:"success,0,optional" frugal:"0,optional,TScanBatchResult_" json:"success,omitempty"`
}

func NewTDorisExternalServiceGetNextResult() *TDorisExternalServiceGetNextResult {
	return &TDorisExternalServiceGetNextResult{}
}

func (p *TDorisExternalServiceGetNextResult) InitDefault() {
}

var TDorisExternalServiceGetNextResult_Success_DEFAULT *TScanBatchResult_

func (p *TDorisExternalServiceGetNextResult) GetSuccess() (v *TScanBatchResult_) {
	if !p.IsSetSuccess() {
		return TDorisExternalServiceGetNextResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TDorisExternalServiceGetNextResult) SetSuccess(x interface{}) {
	p.Success = x.(*TScanBatchResult_)
}

var fieldIDToName_TDorisExternalServiceGetNextResult = map[int16]string{
	0: "success",
}

func (p *TDorisExternalServiceGetNextResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TDorisExternalServiceGetNextResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDorisExternalServiceGetNextResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TDorisExternalServiceGetNextResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTScanBatchResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TDorisExternalServiceGetNextResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("get_next_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDorisExternalServiceGetNextResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TDorisExternalServiceGetNextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDorisExternalServiceGetNextResult(%+v)", *p)

}

func (p *TDorisExternalServiceGetNextResult) DeepEqual(ano *TDorisExternalServiceGetNextResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TDorisExternalServiceGetNextResult) Field0DeepEqual(src *TScanBatchResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TDorisExternalServiceCloseScannerArgs struct {
	Params *TScanCloseParams `thrift:"params,1" frugal:"1,default,TScanCloseParams" json:"params"`
}

func NewTDorisExternalServiceCloseScannerArgs() *TDorisExternalServiceCloseScannerArgs {
	return &TDorisExternalServiceCloseScannerArgs{}
}

func (p *TDorisExternalServiceCloseScannerArgs) InitDefault() {
}

var TDorisExternalServiceCloseScannerArgs_Params_DEFAULT *TScanCloseParams

func (p *TDorisExternalServiceCloseScannerArgs) GetParams() (v *TScanCloseParams) {
	if !p.IsSetParams() {
		return TDorisExternalServiceCloseScannerArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *TDorisExternalServiceCloseScannerArgs) SetParams(val *TScanCloseParams) {
	p.Params = val
}

var fieldIDToName_TDorisExternalServiceCloseScannerArgs = map[int16]string{
	1: "params",
}

func (p *TDorisExternalServiceCloseScannerArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *TDorisExternalServiceCloseScannerArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDorisExternalServiceCloseScannerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TDorisExternalServiceCloseScannerArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTScanCloseParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}

func (p *TDorisExternalServiceCloseScannerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("close_scanner_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDorisExternalServiceCloseScannerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDorisExternalServiceCloseScannerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDorisExternalServiceCloseScannerArgs(%+v)", *p)

}

func (p *TDorisExternalServiceCloseScannerArgs) DeepEqual(ano *TDorisExternalServiceCloseScannerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *TDorisExternalServiceCloseScannerArgs) Field1DeepEqual(src *TScanCloseParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type TDorisExternalServiceCloseScannerResult struct {
	Success *TScanCloseResult_ `thrift:"success,0,optional" frugal:"0,optional,TScanCloseResult_" json:"success,omitempty"`
}

func NewTDorisExternalServiceCloseScannerResult() *TDorisExternalServiceCloseScannerResult {
	return &TDorisExternalServiceCloseScannerResult{}
}

func (p *TDorisExternalServiceCloseScannerResult) InitDefault() {
}

var TDorisExternalServiceCloseScannerResult_Success_DEFAULT *TScanCloseResult_

func (p *TDorisExternalServiceCloseScannerResult) GetSuccess() (v *TScanCloseResult_) {
	if !p.IsSetSuccess() {
		return TDorisExternalServiceCloseScannerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TDorisExternalServiceCloseScannerResult) SetSuccess(x interface{}) {
	p.Success = x.(*TScanCloseResult_)
}

var fieldIDToName_TDorisExternalServiceCloseScannerResult = map[int16]string{
	0: "success",
}

func (p *TDorisExternalServiceCloseScannerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TDorisExternalServiceCloseScannerResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDorisExternalServiceCloseScannerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TDorisExternalServiceCloseScannerResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTScanCloseResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TDorisExternalServiceCloseScannerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("close_scanner_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDorisExternalServiceCloseScannerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TDorisExternalServiceCloseScannerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDorisExternalServiceCloseScannerResult(%+v)", *p)

}

func (p *TDorisExternalServiceCloseScannerResult) DeepEqual(ano *TDorisExternalServiceCloseScannerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TDorisExternalServiceCloseScannerResult) Field0DeepEqual(src *TScanCloseResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
