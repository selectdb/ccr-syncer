// Code generated by thriftgo (0.3.13). DO NOT EDIT.

package heartbeatservice

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/status"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/types"
	"strings"
)

const (
	IS_SET_DEFAULT_ROWSET_TO_BETA_BIT = 1
)

type TFrontendInfo struct {
	CoordinatorAddress *types.TNetworkAddress `thrift:"coordinator_address,1,optional" frugal:"1,optional,types.TNetworkAddress" json:"coordinator_address,omitempty"`
	ProcessUuid        *int64                 `thrift:"process_uuid,2,optional" frugal:"2,optional,i64" json:"process_uuid,omitempty"`
}

func NewTFrontendInfo() *TFrontendInfo {
	return &TFrontendInfo{}
}

func (p *TFrontendInfo) InitDefault() {
}

var TFrontendInfo_CoordinatorAddress_DEFAULT *types.TNetworkAddress

func (p *TFrontendInfo) GetCoordinatorAddress() (v *types.TNetworkAddress) {
	if !p.IsSetCoordinatorAddress() {
		return TFrontendInfo_CoordinatorAddress_DEFAULT
	}
	return p.CoordinatorAddress
}

var TFrontendInfo_ProcessUuid_DEFAULT int64

func (p *TFrontendInfo) GetProcessUuid() (v int64) {
	if !p.IsSetProcessUuid() {
		return TFrontendInfo_ProcessUuid_DEFAULT
	}
	return *p.ProcessUuid
}
func (p *TFrontendInfo) SetCoordinatorAddress(val *types.TNetworkAddress) {
	p.CoordinatorAddress = val
}
func (p *TFrontendInfo) SetProcessUuid(val *int64) {
	p.ProcessUuid = val
}

var fieldIDToName_TFrontendInfo = map[int16]string{
	1: "coordinator_address",
	2: "process_uuid",
}

func (p *TFrontendInfo) IsSetCoordinatorAddress() bool {
	return p.CoordinatorAddress != nil
}

func (p *TFrontendInfo) IsSetProcessUuid() bool {
	return p.ProcessUuid != nil
}

func (p *TFrontendInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFrontendInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TFrontendInfo) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CoordinatorAddress = _field
	return nil
}
func (p *TFrontendInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ProcessUuid = _field
	return nil
}

func (p *TFrontendInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFrontendInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFrontendInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCoordinatorAddress() {
		if err = oprot.WriteFieldBegin("coordinator_address", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CoordinatorAddress.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFrontendInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetProcessUuid() {
		if err = oprot.WriteFieldBegin("process_uuid", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ProcessUuid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFrontendInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFrontendInfo(%+v)", *p)

}

func (p *TFrontendInfo) DeepEqual(ano *TFrontendInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CoordinatorAddress) {
		return false
	}
	if !p.Field2DeepEqual(ano.ProcessUuid) {
		return false
	}
	return true
}

func (p *TFrontendInfo) Field1DeepEqual(src *types.TNetworkAddress) bool {

	if !p.CoordinatorAddress.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFrontendInfo) Field2DeepEqual(src *int64) bool {

	if p.ProcessUuid == src {
		return true
	} else if p.ProcessUuid == nil || src == nil {
		return false
	}
	if *p.ProcessUuid != *src {
		return false
	}
	return true
}

type TMasterInfo struct {
	NetworkAddress *types.TNetworkAddress `thrift:"network_address,1,required" frugal:"1,required,types.TNetworkAddress" json:"network_address"`
	ClusterId      types.TClusterId       `thrift:"cluster_id,2,required" frugal:"2,required,i32" json:"cluster_id"`
	Epoch          types.TEpoch           `thrift:"epoch,3,required" frugal:"3,required,i64" json:"epoch"`
	Token          *string                `thrift:"token,4,optional" frugal:"4,optional,string" json:"token,omitempty"`
	BackendIp      *string                `thrift:"backend_ip,5,optional" frugal:"5,optional,string" json:"backend_ip,omitempty"`
	HttpPort       *types.TPort           `thrift:"http_port,6,optional" frugal:"6,optional,i32" json:"http_port,omitempty"`
	HeartbeatFlags *int64                 `thrift:"heartbeat_flags,7,optional" frugal:"7,optional,i64" json:"heartbeat_flags,omitempty"`
	BackendId      *int64                 `thrift:"backend_id,8,optional" frugal:"8,optional,i64" json:"backend_id,omitempty"`
	FrontendInfos  []*TFrontendInfo       `thrift:"frontend_infos,9,optional" frugal:"9,optional,list<TFrontendInfo>" json:"frontend_infos,omitempty"`
}

func NewTMasterInfo() *TMasterInfo {
	return &TMasterInfo{}
}

func (p *TMasterInfo) InitDefault() {
}

var TMasterInfo_NetworkAddress_DEFAULT *types.TNetworkAddress

func (p *TMasterInfo) GetNetworkAddress() (v *types.TNetworkAddress) {
	if !p.IsSetNetworkAddress() {
		return TMasterInfo_NetworkAddress_DEFAULT
	}
	return p.NetworkAddress
}

func (p *TMasterInfo) GetClusterId() (v types.TClusterId) {
	return p.ClusterId
}

func (p *TMasterInfo) GetEpoch() (v types.TEpoch) {
	return p.Epoch
}

var TMasterInfo_Token_DEFAULT string

func (p *TMasterInfo) GetToken() (v string) {
	if !p.IsSetToken() {
		return TMasterInfo_Token_DEFAULT
	}
	return *p.Token
}

var TMasterInfo_BackendIp_DEFAULT string

func (p *TMasterInfo) GetBackendIp() (v string) {
	if !p.IsSetBackendIp() {
		return TMasterInfo_BackendIp_DEFAULT
	}
	return *p.BackendIp
}

var TMasterInfo_HttpPort_DEFAULT types.TPort

func (p *TMasterInfo) GetHttpPort() (v types.TPort) {
	if !p.IsSetHttpPort() {
		return TMasterInfo_HttpPort_DEFAULT
	}
	return *p.HttpPort
}

var TMasterInfo_HeartbeatFlags_DEFAULT int64

func (p *TMasterInfo) GetHeartbeatFlags() (v int64) {
	if !p.IsSetHeartbeatFlags() {
		return TMasterInfo_HeartbeatFlags_DEFAULT
	}
	return *p.HeartbeatFlags
}

var TMasterInfo_BackendId_DEFAULT int64

func (p *TMasterInfo) GetBackendId() (v int64) {
	if !p.IsSetBackendId() {
		return TMasterInfo_BackendId_DEFAULT
	}
	return *p.BackendId
}

var TMasterInfo_FrontendInfos_DEFAULT []*TFrontendInfo

func (p *TMasterInfo) GetFrontendInfos() (v []*TFrontendInfo) {
	if !p.IsSetFrontendInfos() {
		return TMasterInfo_FrontendInfos_DEFAULT
	}
	return p.FrontendInfos
}
func (p *TMasterInfo) SetNetworkAddress(val *types.TNetworkAddress) {
	p.NetworkAddress = val
}
func (p *TMasterInfo) SetClusterId(val types.TClusterId) {
	p.ClusterId = val
}
func (p *TMasterInfo) SetEpoch(val types.TEpoch) {
	p.Epoch = val
}
func (p *TMasterInfo) SetToken(val *string) {
	p.Token = val
}
func (p *TMasterInfo) SetBackendIp(val *string) {
	p.BackendIp = val
}
func (p *TMasterInfo) SetHttpPort(val *types.TPort) {
	p.HttpPort = val
}
func (p *TMasterInfo) SetHeartbeatFlags(val *int64) {
	p.HeartbeatFlags = val
}
func (p *TMasterInfo) SetBackendId(val *int64) {
	p.BackendId = val
}
func (p *TMasterInfo) SetFrontendInfos(val []*TFrontendInfo) {
	p.FrontendInfos = val
}

var fieldIDToName_TMasterInfo = map[int16]string{
	1: "network_address",
	2: "cluster_id",
	3: "epoch",
	4: "token",
	5: "backend_ip",
	6: "http_port",
	7: "heartbeat_flags",
	8: "backend_id",
	9: "frontend_infos",
}

func (p *TMasterInfo) IsSetNetworkAddress() bool {
	return p.NetworkAddress != nil
}

func (p *TMasterInfo) IsSetToken() bool {
	return p.Token != nil
}

func (p *TMasterInfo) IsSetBackendIp() bool {
	return p.BackendIp != nil
}

func (p *TMasterInfo) IsSetHttpPort() bool {
	return p.HttpPort != nil
}

func (p *TMasterInfo) IsSetHeartbeatFlags() bool {
	return p.HeartbeatFlags != nil
}

func (p *TMasterInfo) IsSetBackendId() bool {
	return p.BackendId != nil
}

func (p *TMasterInfo) IsSetFrontendInfos() bool {
	return p.FrontendInfos != nil
}

func (p *TMasterInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNetworkAddress bool = false
	var issetClusterId bool = false
	var issetEpoch bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetNetworkAddress = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetEpoch = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNetworkAddress {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetClusterId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetEpoch {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMasterInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TMasterInfo[fieldId]))
}

func (p *TMasterInfo) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.NetworkAddress = _field
	return nil
}
func (p *TMasterInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TClusterId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClusterId = _field
	return nil
}
func (p *TMasterInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field types.TEpoch
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Epoch = _field
	return nil
}
func (p *TMasterInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}
func (p *TMasterInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BackendIp = _field
	return nil
}
func (p *TMasterInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field *types.TPort
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HttpPort = _field
	return nil
}
func (p *TMasterInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HeartbeatFlags = _field
	return nil
}
func (p *TMasterInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BackendId = _field
	return nil
}
func (p *TMasterInfo) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TFrontendInfo, 0, size)
	values := make([]TFrontendInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FrontendInfos = _field
	return nil
}

func (p *TMasterInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMasterInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMasterInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("network_address", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.NetworkAddress.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMasterInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cluster_id", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TMasterInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("epoch", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Epoch); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TMasterInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TMasterInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackendIp() {
		if err = oprot.WriteFieldBegin("backend_ip", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BackendIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TMasterInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetHttpPort() {
		if err = oprot.WriteFieldBegin("http_port", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.HttpPort); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TMasterInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeartbeatFlags() {
		if err = oprot.WriteFieldBegin("heartbeat_flags", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.HeartbeatFlags); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TMasterInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackendId() {
		if err = oprot.WriteFieldBegin("backend_id", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BackendId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TMasterInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetFrontendInfos() {
		if err = oprot.WriteFieldBegin("frontend_infos", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FrontendInfos)); err != nil {
			return err
		}
		for _, v := range p.FrontendInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TMasterInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMasterInfo(%+v)", *p)

}

func (p *TMasterInfo) DeepEqual(ano *TMasterInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.NetworkAddress) {
		return false
	}
	if !p.Field2DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Epoch) {
		return false
	}
	if !p.Field4DeepEqual(ano.Token) {
		return false
	}
	if !p.Field5DeepEqual(ano.BackendIp) {
		return false
	}
	if !p.Field6DeepEqual(ano.HttpPort) {
		return false
	}
	if !p.Field7DeepEqual(ano.HeartbeatFlags) {
		return false
	}
	if !p.Field8DeepEqual(ano.BackendId) {
		return false
	}
	if !p.Field9DeepEqual(ano.FrontendInfos) {
		return false
	}
	return true
}

func (p *TMasterInfo) Field1DeepEqual(src *types.TNetworkAddress) bool {

	if !p.NetworkAddress.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMasterInfo) Field2DeepEqual(src types.TClusterId) bool {

	if p.ClusterId != src {
		return false
	}
	return true
}
func (p *TMasterInfo) Field3DeepEqual(src types.TEpoch) bool {

	if p.Epoch != src {
		return false
	}
	return true
}
func (p *TMasterInfo) Field4DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *TMasterInfo) Field5DeepEqual(src *string) bool {

	if p.BackendIp == src {
		return true
	} else if p.BackendIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BackendIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TMasterInfo) Field6DeepEqual(src *types.TPort) bool {

	if p.HttpPort == src {
		return true
	} else if p.HttpPort == nil || src == nil {
		return false
	}
	if *p.HttpPort != *src {
		return false
	}
	return true
}
func (p *TMasterInfo) Field7DeepEqual(src *int64) bool {

	if p.HeartbeatFlags == src {
		return true
	} else if p.HeartbeatFlags == nil || src == nil {
		return false
	}
	if *p.HeartbeatFlags != *src {
		return false
	}
	return true
}
func (p *TMasterInfo) Field8DeepEqual(src *int64) bool {

	if p.BackendId == src {
		return true
	} else if p.BackendId == nil || src == nil {
		return false
	}
	if *p.BackendId != *src {
		return false
	}
	return true
}
func (p *TMasterInfo) Field9DeepEqual(src []*TFrontendInfo) bool {

	if len(p.FrontendInfos) != len(src) {
		return false
	}
	for i, v := range p.FrontendInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TBackendInfo struct {
	BePort                 types.TPort  `thrift:"be_port,1,required" frugal:"1,required,i32" json:"be_port"`
	HttpPort               types.TPort  `thrift:"http_port,2,required" frugal:"2,required,i32" json:"http_port"`
	BeRpcPort              *types.TPort `thrift:"be_rpc_port,3,optional" frugal:"3,optional,i32" json:"be_rpc_port,omitempty"`
	BrpcPort               *types.TPort `thrift:"brpc_port,4,optional" frugal:"4,optional,i32" json:"brpc_port,omitempty"`
	Version                *string      `thrift:"version,5,optional" frugal:"5,optional,string" json:"version,omitempty"`
	BeStartTime            *int64       `thrift:"be_start_time,6,optional" frugal:"6,optional,i64" json:"be_start_time,omitempty"`
	BeNodeRole             *string      `thrift:"be_node_role,7,optional" frugal:"7,optional,string" json:"be_node_role,omitempty"`
	IsShutdown             *bool        `thrift:"is_shutdown,8,optional" frugal:"8,optional,bool" json:"is_shutdown,omitempty"`
	ArrowFlightSqlPort     *types.TPort `thrift:"arrow_flight_sql_port,9,optional" frugal:"9,optional,i32" json:"arrow_flight_sql_port,omitempty"`
	BeMem                  *int64       `thrift:"be_mem,10,optional" frugal:"10,optional,i64" json:"be_mem,omitempty"`
	FragmentExecutingCount *int64       `thrift:"fragment_executing_count,1000,optional" frugal:"1000,optional,i64" json:"fragment_executing_count,omitempty"`
	FragmentLastActiveTime *int64       `thrift:"fragment_last_active_time,1001,optional" frugal:"1001,optional,i64" json:"fragment_last_active_time,omitempty"`
}

func NewTBackendInfo() *TBackendInfo {
	return &TBackendInfo{}
}

func (p *TBackendInfo) InitDefault() {
}

func (p *TBackendInfo) GetBePort() (v types.TPort) {
	return p.BePort
}

func (p *TBackendInfo) GetHttpPort() (v types.TPort) {
	return p.HttpPort
}

var TBackendInfo_BeRpcPort_DEFAULT types.TPort

func (p *TBackendInfo) GetBeRpcPort() (v types.TPort) {
	if !p.IsSetBeRpcPort() {
		return TBackendInfo_BeRpcPort_DEFAULT
	}
	return *p.BeRpcPort
}

var TBackendInfo_BrpcPort_DEFAULT types.TPort

func (p *TBackendInfo) GetBrpcPort() (v types.TPort) {
	if !p.IsSetBrpcPort() {
		return TBackendInfo_BrpcPort_DEFAULT
	}
	return *p.BrpcPort
}

var TBackendInfo_Version_DEFAULT string

func (p *TBackendInfo) GetVersion() (v string) {
	if !p.IsSetVersion() {
		return TBackendInfo_Version_DEFAULT
	}
	return *p.Version
}

var TBackendInfo_BeStartTime_DEFAULT int64

func (p *TBackendInfo) GetBeStartTime() (v int64) {
	if !p.IsSetBeStartTime() {
		return TBackendInfo_BeStartTime_DEFAULT
	}
	return *p.BeStartTime
}

var TBackendInfo_BeNodeRole_DEFAULT string

func (p *TBackendInfo) GetBeNodeRole() (v string) {
	if !p.IsSetBeNodeRole() {
		return TBackendInfo_BeNodeRole_DEFAULT
	}
	return *p.BeNodeRole
}

var TBackendInfo_IsShutdown_DEFAULT bool

func (p *TBackendInfo) GetIsShutdown() (v bool) {
	if !p.IsSetIsShutdown() {
		return TBackendInfo_IsShutdown_DEFAULT
	}
	return *p.IsShutdown
}

var TBackendInfo_ArrowFlightSqlPort_DEFAULT types.TPort

func (p *TBackendInfo) GetArrowFlightSqlPort() (v types.TPort) {
	if !p.IsSetArrowFlightSqlPort() {
		return TBackendInfo_ArrowFlightSqlPort_DEFAULT
	}
	return *p.ArrowFlightSqlPort
}

var TBackendInfo_BeMem_DEFAULT int64

func (p *TBackendInfo) GetBeMem() (v int64) {
	if !p.IsSetBeMem() {
		return TBackendInfo_BeMem_DEFAULT
	}
	return *p.BeMem
}

var TBackendInfo_FragmentExecutingCount_DEFAULT int64

func (p *TBackendInfo) GetFragmentExecutingCount() (v int64) {
	if !p.IsSetFragmentExecutingCount() {
		return TBackendInfo_FragmentExecutingCount_DEFAULT
	}
	return *p.FragmentExecutingCount
}

var TBackendInfo_FragmentLastActiveTime_DEFAULT int64

func (p *TBackendInfo) GetFragmentLastActiveTime() (v int64) {
	if !p.IsSetFragmentLastActiveTime() {
		return TBackendInfo_FragmentLastActiveTime_DEFAULT
	}
	return *p.FragmentLastActiveTime
}
func (p *TBackendInfo) SetBePort(val types.TPort) {
	p.BePort = val
}
func (p *TBackendInfo) SetHttpPort(val types.TPort) {
	p.HttpPort = val
}
func (p *TBackendInfo) SetBeRpcPort(val *types.TPort) {
	p.BeRpcPort = val
}
func (p *TBackendInfo) SetBrpcPort(val *types.TPort) {
	p.BrpcPort = val
}
func (p *TBackendInfo) SetVersion(val *string) {
	p.Version = val
}
func (p *TBackendInfo) SetBeStartTime(val *int64) {
	p.BeStartTime = val
}
func (p *TBackendInfo) SetBeNodeRole(val *string) {
	p.BeNodeRole = val
}
func (p *TBackendInfo) SetIsShutdown(val *bool) {
	p.IsShutdown = val
}
func (p *TBackendInfo) SetArrowFlightSqlPort(val *types.TPort) {
	p.ArrowFlightSqlPort = val
}
func (p *TBackendInfo) SetBeMem(val *int64) {
	p.BeMem = val
}
func (p *TBackendInfo) SetFragmentExecutingCount(val *int64) {
	p.FragmentExecutingCount = val
}
func (p *TBackendInfo) SetFragmentLastActiveTime(val *int64) {
	p.FragmentLastActiveTime = val
}

var fieldIDToName_TBackendInfo = map[int16]string{
	1:    "be_port",
	2:    "http_port",
	3:    "be_rpc_port",
	4:    "brpc_port",
	5:    "version",
	6:    "be_start_time",
	7:    "be_node_role",
	8:    "is_shutdown",
	9:    "arrow_flight_sql_port",
	10:   "be_mem",
	1000: "fragment_executing_count",
	1001: "fragment_last_active_time",
}

func (p *TBackendInfo) IsSetBeRpcPort() bool {
	return p.BeRpcPort != nil
}

func (p *TBackendInfo) IsSetBrpcPort() bool {
	return p.BrpcPort != nil
}

func (p *TBackendInfo) IsSetVersion() bool {
	return p.Version != nil
}

func (p *TBackendInfo) IsSetBeStartTime() bool {
	return p.BeStartTime != nil
}

func (p *TBackendInfo) IsSetBeNodeRole() bool {
	return p.BeNodeRole != nil
}

func (p *TBackendInfo) IsSetIsShutdown() bool {
	return p.IsShutdown != nil
}

func (p *TBackendInfo) IsSetArrowFlightSqlPort() bool {
	return p.ArrowFlightSqlPort != nil
}

func (p *TBackendInfo) IsSetBeMem() bool {
	return p.BeMem != nil
}

func (p *TBackendInfo) IsSetFragmentExecutingCount() bool {
	return p.FragmentExecutingCount != nil
}

func (p *TBackendInfo) IsSetFragmentLastActiveTime() bool {
	return p.FragmentLastActiveTime != nil
}

func (p *TBackendInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBePort bool = false
	var issetHttpPort bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBePort = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetHttpPort = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1000:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1000(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1001:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1001(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBePort {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetHttpPort {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TBackendInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TBackendInfo[fieldId]))
}

func (p *TBackendInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TPort
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BePort = _field
	return nil
}
func (p *TBackendInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TPort
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HttpPort = _field
	return nil
}
func (p *TBackendInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field *types.TPort
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BeRpcPort = _field
	return nil
}
func (p *TBackendInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field *types.TPort
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BrpcPort = _field
	return nil
}
func (p *TBackendInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *TBackendInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BeStartTime = _field
	return nil
}
func (p *TBackendInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BeNodeRole = _field
	return nil
}
func (p *TBackendInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsShutdown = _field
	return nil
}
func (p *TBackendInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field *types.TPort
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ArrowFlightSqlPort = _field
	return nil
}
func (p *TBackendInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BeMem = _field
	return nil
}
func (p *TBackendInfo) ReadField1000(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FragmentExecutingCount = _field
	return nil
}
func (p *TBackendInfo) ReadField1001(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FragmentLastActiveTime = _field
	return nil
}

func (p *TBackendInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TBackendInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField1000(oprot); err != nil {
			fieldId = 1000
			goto WriteFieldError
		}
		if err = p.writeField1001(oprot); err != nil {
			fieldId = 1001
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TBackendInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("be_port", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.BePort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TBackendInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("http_port", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.HttpPort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TBackendInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBeRpcPort() {
		if err = oprot.WriteFieldBegin("be_rpc_port", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BeRpcPort); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TBackendInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBrpcPort() {
		if err = oprot.WriteFieldBegin("brpc_port", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BrpcPort); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TBackendInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TBackendInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBeStartTime() {
		if err = oprot.WriteFieldBegin("be_start_time", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BeStartTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TBackendInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetBeNodeRole() {
		if err = oprot.WriteFieldBegin("be_node_role", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BeNodeRole); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TBackendInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsShutdown() {
		if err = oprot.WriteFieldBegin("is_shutdown", thrift.BOOL, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsShutdown); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TBackendInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetArrowFlightSqlPort() {
		if err = oprot.WriteFieldBegin("arrow_flight_sql_port", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ArrowFlightSqlPort); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TBackendInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetBeMem() {
		if err = oprot.WriteFieldBegin("be_mem", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BeMem); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TBackendInfo) writeField1000(oprot thrift.TProtocol) (err error) {
	if p.IsSetFragmentExecutingCount() {
		if err = oprot.WriteFieldBegin("fragment_executing_count", thrift.I64, 1000); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.FragmentExecutingCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 end error: ", p), err)
}

func (p *TBackendInfo) writeField1001(oprot thrift.TProtocol) (err error) {
	if p.IsSetFragmentLastActiveTime() {
		if err = oprot.WriteFieldBegin("fragment_last_active_time", thrift.I64, 1001); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.FragmentLastActiveTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1001 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1001 end error: ", p), err)
}

func (p *TBackendInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBackendInfo(%+v)", *p)

}

func (p *TBackendInfo) DeepEqual(ano *TBackendInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BePort) {
		return false
	}
	if !p.Field2DeepEqual(ano.HttpPort) {
		return false
	}
	if !p.Field3DeepEqual(ano.BeRpcPort) {
		return false
	}
	if !p.Field4DeepEqual(ano.BrpcPort) {
		return false
	}
	if !p.Field5DeepEqual(ano.Version) {
		return false
	}
	if !p.Field6DeepEqual(ano.BeStartTime) {
		return false
	}
	if !p.Field7DeepEqual(ano.BeNodeRole) {
		return false
	}
	if !p.Field8DeepEqual(ano.IsShutdown) {
		return false
	}
	if !p.Field9DeepEqual(ano.ArrowFlightSqlPort) {
		return false
	}
	if !p.Field10DeepEqual(ano.BeMem) {
		return false
	}
	if !p.Field1000DeepEqual(ano.FragmentExecutingCount) {
		return false
	}
	if !p.Field1001DeepEqual(ano.FragmentLastActiveTime) {
		return false
	}
	return true
}

func (p *TBackendInfo) Field1DeepEqual(src types.TPort) bool {

	if p.BePort != src {
		return false
	}
	return true
}
func (p *TBackendInfo) Field2DeepEqual(src types.TPort) bool {

	if p.HttpPort != src {
		return false
	}
	return true
}
func (p *TBackendInfo) Field3DeepEqual(src *types.TPort) bool {

	if p.BeRpcPort == src {
		return true
	} else if p.BeRpcPort == nil || src == nil {
		return false
	}
	if *p.BeRpcPort != *src {
		return false
	}
	return true
}
func (p *TBackendInfo) Field4DeepEqual(src *types.TPort) bool {

	if p.BrpcPort == src {
		return true
	} else if p.BrpcPort == nil || src == nil {
		return false
	}
	if *p.BrpcPort != *src {
		return false
	}
	return true
}
func (p *TBackendInfo) Field5DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *TBackendInfo) Field6DeepEqual(src *int64) bool {

	if p.BeStartTime == src {
		return true
	} else if p.BeStartTime == nil || src == nil {
		return false
	}
	if *p.BeStartTime != *src {
		return false
	}
	return true
}
func (p *TBackendInfo) Field7DeepEqual(src *string) bool {

	if p.BeNodeRole == src {
		return true
	} else if p.BeNodeRole == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BeNodeRole, *src) != 0 {
		return false
	}
	return true
}
func (p *TBackendInfo) Field8DeepEqual(src *bool) bool {

	if p.IsShutdown == src {
		return true
	} else if p.IsShutdown == nil || src == nil {
		return false
	}
	if *p.IsShutdown != *src {
		return false
	}
	return true
}
func (p *TBackendInfo) Field9DeepEqual(src *types.TPort) bool {

	if p.ArrowFlightSqlPort == src {
		return true
	} else if p.ArrowFlightSqlPort == nil || src == nil {
		return false
	}
	if *p.ArrowFlightSqlPort != *src {
		return false
	}
	return true
}
func (p *TBackendInfo) Field10DeepEqual(src *int64) bool {

	if p.BeMem == src {
		return true
	} else if p.BeMem == nil || src == nil {
		return false
	}
	if *p.BeMem != *src {
		return false
	}
	return true
}
func (p *TBackendInfo) Field1000DeepEqual(src *int64) bool {

	if p.FragmentExecutingCount == src {
		return true
	} else if p.FragmentExecutingCount == nil || src == nil {
		return false
	}
	if *p.FragmentExecutingCount != *src {
		return false
	}
	return true
}
func (p *TBackendInfo) Field1001DeepEqual(src *int64) bool {

	if p.FragmentLastActiveTime == src {
		return true
	} else if p.FragmentLastActiveTime == nil || src == nil {
		return false
	}
	if *p.FragmentLastActiveTime != *src {
		return false
	}
	return true
}

type THeartbeatResult_ struct {
	Status      *status.TStatus `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
	BackendInfo *TBackendInfo   `thrift:"backend_info,2,required" frugal:"2,required,TBackendInfo" json:"backend_info"`
}

func NewTHeartbeatResult_() *THeartbeatResult_ {
	return &THeartbeatResult_{}
}

func (p *THeartbeatResult_) InitDefault() {
}

var THeartbeatResult__Status_DEFAULT *status.TStatus

func (p *THeartbeatResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return THeartbeatResult__Status_DEFAULT
	}
	return p.Status
}

var THeartbeatResult__BackendInfo_DEFAULT *TBackendInfo

func (p *THeartbeatResult_) GetBackendInfo() (v *TBackendInfo) {
	if !p.IsSetBackendInfo() {
		return THeartbeatResult__BackendInfo_DEFAULT
	}
	return p.BackendInfo
}
func (p *THeartbeatResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *THeartbeatResult_) SetBackendInfo(val *TBackendInfo) {
	p.BackendInfo = val
}

var fieldIDToName_THeartbeatResult_ = map[int16]string{
	1: "status",
	2: "backend_info",
}

func (p *THeartbeatResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *THeartbeatResult_) IsSetBackendInfo() bool {
	return p.BackendInfo != nil
}

func (p *THeartbeatResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false
	var issetBackendInfo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetBackendInfo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetBackendInfo {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_THeartbeatResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_THeartbeatResult_[fieldId]))
}

func (p *THeartbeatResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *THeartbeatResult_) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTBackendInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BackendInfo = _field
	return nil
}

func (p *THeartbeatResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("THeartbeatResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *THeartbeatResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *THeartbeatResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("backend_info", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BackendInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *THeartbeatResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("THeartbeatResult_(%+v)", *p)

}

func (p *THeartbeatResult_) DeepEqual(ano *THeartbeatResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.BackendInfo) {
		return false
	}
	return true
}

func (p *THeartbeatResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *THeartbeatResult_) Field2DeepEqual(src *TBackendInfo) bool {

	if !p.BackendInfo.DeepEqual(src) {
		return false
	}
	return true
}

type HeartbeatService interface {
	Heartbeat(ctx context.Context, masterInfo *TMasterInfo) (r *THeartbeatResult_, err error)
}

type HeartbeatServiceClient struct {
	c thrift.TClient
}

func NewHeartbeatServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HeartbeatServiceClient {
	return &HeartbeatServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewHeartbeatServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HeartbeatServiceClient {
	return &HeartbeatServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewHeartbeatServiceClient(c thrift.TClient) *HeartbeatServiceClient {
	return &HeartbeatServiceClient{
		c: c,
	}
}

func (p *HeartbeatServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *HeartbeatServiceClient) Heartbeat(ctx context.Context, masterInfo *TMasterInfo) (r *THeartbeatResult_, err error) {
	var _args HeartbeatServiceHeartbeatArgs
	_args.MasterInfo = masterInfo
	var _result HeartbeatServiceHeartbeatResult
	if err = p.Client_().Call(ctx, "heartbeat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type HeartbeatServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      HeartbeatService
}

func (p *HeartbeatServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *HeartbeatServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *HeartbeatServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewHeartbeatServiceProcessor(handler HeartbeatService) *HeartbeatServiceProcessor {
	self := &HeartbeatServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("heartbeat", &heartbeatServiceProcessorHeartbeat{handler: handler})
	return self
}
func (p *HeartbeatServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type heartbeatServiceProcessorHeartbeat struct {
	handler HeartbeatService
}

func (p *heartbeatServiceProcessorHeartbeat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HeartbeatServiceHeartbeatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("heartbeat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := HeartbeatServiceHeartbeatResult{}
	var retval *THeartbeatResult_
	if retval, err2 = p.handler.Heartbeat(ctx, args.MasterInfo); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing heartbeat: "+err2.Error())
		oprot.WriteMessageBegin("heartbeat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("heartbeat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type HeartbeatServiceHeartbeatArgs struct {
	MasterInfo *TMasterInfo `thrift:"master_info,1" frugal:"1,default,TMasterInfo" json:"master_info"`
}

func NewHeartbeatServiceHeartbeatArgs() *HeartbeatServiceHeartbeatArgs {
	return &HeartbeatServiceHeartbeatArgs{}
}

func (p *HeartbeatServiceHeartbeatArgs) InitDefault() {
}

var HeartbeatServiceHeartbeatArgs_MasterInfo_DEFAULT *TMasterInfo

func (p *HeartbeatServiceHeartbeatArgs) GetMasterInfo() (v *TMasterInfo) {
	if !p.IsSetMasterInfo() {
		return HeartbeatServiceHeartbeatArgs_MasterInfo_DEFAULT
	}
	return p.MasterInfo
}
func (p *HeartbeatServiceHeartbeatArgs) SetMasterInfo(val *TMasterInfo) {
	p.MasterInfo = val
}

var fieldIDToName_HeartbeatServiceHeartbeatArgs = map[int16]string{
	1: "master_info",
}

func (p *HeartbeatServiceHeartbeatArgs) IsSetMasterInfo() bool {
	return p.MasterInfo != nil
}

func (p *HeartbeatServiceHeartbeatArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HeartbeatServiceHeartbeatArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HeartbeatServiceHeartbeatArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTMasterInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MasterInfo = _field
	return nil
}

func (p *HeartbeatServiceHeartbeatArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("heartbeat_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HeartbeatServiceHeartbeatArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("master_info", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.MasterInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *HeartbeatServiceHeartbeatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HeartbeatServiceHeartbeatArgs(%+v)", *p)

}

func (p *HeartbeatServiceHeartbeatArgs) DeepEqual(ano *HeartbeatServiceHeartbeatArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MasterInfo) {
		return false
	}
	return true
}

func (p *HeartbeatServiceHeartbeatArgs) Field1DeepEqual(src *TMasterInfo) bool {

	if !p.MasterInfo.DeepEqual(src) {
		return false
	}
	return true
}

type HeartbeatServiceHeartbeatResult struct {
	Success *THeartbeatResult_ `thrift:"success,0,optional" frugal:"0,optional,THeartbeatResult_" json:"success,omitempty"`
}

func NewHeartbeatServiceHeartbeatResult() *HeartbeatServiceHeartbeatResult {
	return &HeartbeatServiceHeartbeatResult{}
}

func (p *HeartbeatServiceHeartbeatResult) InitDefault() {
}

var HeartbeatServiceHeartbeatResult_Success_DEFAULT *THeartbeatResult_

func (p *HeartbeatServiceHeartbeatResult) GetSuccess() (v *THeartbeatResult_) {
	if !p.IsSetSuccess() {
		return HeartbeatServiceHeartbeatResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HeartbeatServiceHeartbeatResult) SetSuccess(x interface{}) {
	p.Success = x.(*THeartbeatResult_)
}

var fieldIDToName_HeartbeatServiceHeartbeatResult = map[int16]string{
	0: "success",
}

func (p *HeartbeatServiceHeartbeatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HeartbeatServiceHeartbeatResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HeartbeatServiceHeartbeatResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HeartbeatServiceHeartbeatResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTHeartbeatResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *HeartbeatServiceHeartbeatResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("heartbeat_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HeartbeatServiceHeartbeatResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *HeartbeatServiceHeartbeatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HeartbeatServiceHeartbeatResult(%+v)", *p)

}

func (p *HeartbeatServiceHeartbeatResult) DeepEqual(ano *HeartbeatServiceHeartbeatResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *HeartbeatServiceHeartbeatResult) Field0DeepEqual(src *THeartbeatResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
