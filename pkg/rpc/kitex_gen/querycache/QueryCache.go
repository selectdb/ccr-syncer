// Code generated by thriftgo (0.3.13). DO NOT EDIT.

package querycache

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type TQueryCacheParam struct {
	NodeId                 *int32           `thrift:"node_id,1,optional" frugal:"1,optional,i32" json:"node_id,omitempty"`
	Digest                 []byte           `thrift:"digest,2,optional" frugal:"2,optional,binary" json:"digest,omitempty"`
	OutputSlotMapping      map[int32]int32  `thrift:"output_slot_mapping,3,optional" frugal:"3,optional,map<i32:i32>" json:"output_slot_mapping,omitempty"`
	TabletToRange          map[int64]string `thrift:"tablet_to_range,4,optional" frugal:"4,optional,map<i64:string>" json:"tablet_to_range,omitempty"`
	ForceRefreshQueryCache *bool            `thrift:"force_refresh_query_cache,5,optional" frugal:"5,optional,bool" json:"force_refresh_query_cache,omitempty"`
	EntryMaxBytes          *int64           `thrift:"entry_max_bytes,6,optional" frugal:"6,optional,i64" json:"entry_max_bytes,omitempty"`
	EntryMaxRows           *int64           `thrift:"entry_max_rows,7,optional" frugal:"7,optional,i64" json:"entry_max_rows,omitempty"`
}

func NewTQueryCacheParam() *TQueryCacheParam {
	return &TQueryCacheParam{}
}

func (p *TQueryCacheParam) InitDefault() {
}

var TQueryCacheParam_NodeId_DEFAULT int32

func (p *TQueryCacheParam) GetNodeId() (v int32) {
	if !p.IsSetNodeId() {
		return TQueryCacheParam_NodeId_DEFAULT
	}
	return *p.NodeId
}

var TQueryCacheParam_Digest_DEFAULT []byte

func (p *TQueryCacheParam) GetDigest() (v []byte) {
	if !p.IsSetDigest() {
		return TQueryCacheParam_Digest_DEFAULT
	}
	return p.Digest
}

var TQueryCacheParam_OutputSlotMapping_DEFAULT map[int32]int32

func (p *TQueryCacheParam) GetOutputSlotMapping() (v map[int32]int32) {
	if !p.IsSetOutputSlotMapping() {
		return TQueryCacheParam_OutputSlotMapping_DEFAULT
	}
	return p.OutputSlotMapping
}

var TQueryCacheParam_TabletToRange_DEFAULT map[int64]string

func (p *TQueryCacheParam) GetTabletToRange() (v map[int64]string) {
	if !p.IsSetTabletToRange() {
		return TQueryCacheParam_TabletToRange_DEFAULT
	}
	return p.TabletToRange
}

var TQueryCacheParam_ForceRefreshQueryCache_DEFAULT bool

func (p *TQueryCacheParam) GetForceRefreshQueryCache() (v bool) {
	if !p.IsSetForceRefreshQueryCache() {
		return TQueryCacheParam_ForceRefreshQueryCache_DEFAULT
	}
	return *p.ForceRefreshQueryCache
}

var TQueryCacheParam_EntryMaxBytes_DEFAULT int64

func (p *TQueryCacheParam) GetEntryMaxBytes() (v int64) {
	if !p.IsSetEntryMaxBytes() {
		return TQueryCacheParam_EntryMaxBytes_DEFAULT
	}
	return *p.EntryMaxBytes
}

var TQueryCacheParam_EntryMaxRows_DEFAULT int64

func (p *TQueryCacheParam) GetEntryMaxRows() (v int64) {
	if !p.IsSetEntryMaxRows() {
		return TQueryCacheParam_EntryMaxRows_DEFAULT
	}
	return *p.EntryMaxRows
}
func (p *TQueryCacheParam) SetNodeId(val *int32) {
	p.NodeId = val
}
func (p *TQueryCacheParam) SetDigest(val []byte) {
	p.Digest = val
}
func (p *TQueryCacheParam) SetOutputSlotMapping(val map[int32]int32) {
	p.OutputSlotMapping = val
}
func (p *TQueryCacheParam) SetTabletToRange(val map[int64]string) {
	p.TabletToRange = val
}
func (p *TQueryCacheParam) SetForceRefreshQueryCache(val *bool) {
	p.ForceRefreshQueryCache = val
}
func (p *TQueryCacheParam) SetEntryMaxBytes(val *int64) {
	p.EntryMaxBytes = val
}
func (p *TQueryCacheParam) SetEntryMaxRows(val *int64) {
	p.EntryMaxRows = val
}

var fieldIDToName_TQueryCacheParam = map[int16]string{
	1: "node_id",
	2: "digest",
	3: "output_slot_mapping",
	4: "tablet_to_range",
	5: "force_refresh_query_cache",
	6: "entry_max_bytes",
	7: "entry_max_rows",
}

func (p *TQueryCacheParam) IsSetNodeId() bool {
	return p.NodeId != nil
}

func (p *TQueryCacheParam) IsSetDigest() bool {
	return p.Digest != nil
}

func (p *TQueryCacheParam) IsSetOutputSlotMapping() bool {
	return p.OutputSlotMapping != nil
}

func (p *TQueryCacheParam) IsSetTabletToRange() bool {
	return p.TabletToRange != nil
}

func (p *TQueryCacheParam) IsSetForceRefreshQueryCache() bool {
	return p.ForceRefreshQueryCache != nil
}

func (p *TQueryCacheParam) IsSetEntryMaxBytes() bool {
	return p.EntryMaxBytes != nil
}

func (p *TQueryCacheParam) IsSetEntryMaxRows() bool {
	return p.EntryMaxRows != nil
}

func (p *TQueryCacheParam) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TQueryCacheParam[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TQueryCacheParam) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NodeId = _field
	return nil
}
func (p *TQueryCacheParam) ReadField2(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Digest = _field
	return nil
}
func (p *TQueryCacheParam) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int32]int32, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.OutputSlotMapping = _field
	return nil
}
func (p *TQueryCacheParam) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64]string, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.TabletToRange = _field
	return nil
}
func (p *TQueryCacheParam) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ForceRefreshQueryCache = _field
	return nil
}
func (p *TQueryCacheParam) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EntryMaxBytes = _field
	return nil
}
func (p *TQueryCacheParam) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EntryMaxRows = _field
	return nil
}

func (p *TQueryCacheParam) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TQueryCacheParam"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TQueryCacheParam) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodeId() {
		if err = oprot.WriteFieldBegin("node_id", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.NodeId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TQueryCacheParam) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDigest() {
		if err = oprot.WriteFieldBegin("digest", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBinary([]byte(p.Digest)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TQueryCacheParam) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputSlotMapping() {
		if err = oprot.WriteFieldBegin("output_slot_mapping", thrift.MAP, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.OutputSlotMapping)); err != nil {
			return err
		}
		for k, v := range p.OutputSlotMapping {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TQueryCacheParam) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletToRange() {
		if err = oprot.WriteFieldBegin("tablet_to_range", thrift.MAP, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.STRING, len(p.TabletToRange)); err != nil {
			return err
		}
		for k, v := range p.TabletToRange {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TQueryCacheParam) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetForceRefreshQueryCache() {
		if err = oprot.WriteFieldBegin("force_refresh_query_cache", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ForceRefreshQueryCache); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TQueryCacheParam) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntryMaxBytes() {
		if err = oprot.WriteFieldBegin("entry_max_bytes", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EntryMaxBytes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TQueryCacheParam) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntryMaxRows() {
		if err = oprot.WriteFieldBegin("entry_max_rows", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EntryMaxRows); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TQueryCacheParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TQueryCacheParam(%+v)", *p)

}

func (p *TQueryCacheParam) DeepEqual(ano *TQueryCacheParam) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.NodeId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Digest) {
		return false
	}
	if !p.Field3DeepEqual(ano.OutputSlotMapping) {
		return false
	}
	if !p.Field4DeepEqual(ano.TabletToRange) {
		return false
	}
	if !p.Field5DeepEqual(ano.ForceRefreshQueryCache) {
		return false
	}
	if !p.Field6DeepEqual(ano.EntryMaxBytes) {
		return false
	}
	if !p.Field7DeepEqual(ano.EntryMaxRows) {
		return false
	}
	return true
}

func (p *TQueryCacheParam) Field1DeepEqual(src *int32) bool {

	if p.NodeId == src {
		return true
	} else if p.NodeId == nil || src == nil {
		return false
	}
	if *p.NodeId != *src {
		return false
	}
	return true
}
func (p *TQueryCacheParam) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.Digest, src) != 0 {
		return false
	}
	return true
}
func (p *TQueryCacheParam) Field3DeepEqual(src map[int32]int32) bool {

	if len(p.OutputSlotMapping) != len(src) {
		return false
	}
	for k, v := range p.OutputSlotMapping {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TQueryCacheParam) Field4DeepEqual(src map[int64]string) bool {

	if len(p.TabletToRange) != len(src) {
		return false
	}
	for k, v := range p.TabletToRange {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TQueryCacheParam) Field5DeepEqual(src *bool) bool {

	if p.ForceRefreshQueryCache == src {
		return true
	} else if p.ForceRefreshQueryCache == nil || src == nil {
		return false
	}
	if *p.ForceRefreshQueryCache != *src {
		return false
	}
	return true
}
func (p *TQueryCacheParam) Field6DeepEqual(src *int64) bool {

	if p.EntryMaxBytes == src {
		return true
	} else if p.EntryMaxBytes == nil || src == nil {
		return false
	}
	if *p.EntryMaxBytes != *src {
		return false
	}
	return true
}
func (p *TQueryCacheParam) Field7DeepEqual(src *int64) bool {

	if p.EntryMaxRows == src {
		return true
	} else if p.EntryMaxRows == nil || src == nil {
		return false
	}
	if *p.EntryMaxRows != *src {
		return false
	}
	return true
}
