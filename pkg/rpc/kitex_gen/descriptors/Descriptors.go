// Code generated by thriftgo (0.3.13). DO NOT EDIT.

package descriptors

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/exprs"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/partitions"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/types"
	"strings"
)

var (
	COMPRESSION_MAP = map[string]THdfsCompression{
		"":        THdfsCompression_NONE,
		"none":    THdfsCompression_NONE,
		"deflate": THdfsCompression_DEFAULT,
		"gzip":    THdfsCompression_GZIP,
		"bzip2":   THdfsCompression_BZIP2,
		"snappy":  THdfsCompression_SNAPPY,
	}
)

type THdfsFileFormat int64

const (
	THdfsFileFormat_TEXT          THdfsFileFormat = 0
	THdfsFileFormat_LZO_TEXT      THdfsFileFormat = 1
	THdfsFileFormat_RC_FILE       THdfsFileFormat = 2
	THdfsFileFormat_SEQUENCE_FILE THdfsFileFormat = 3
	THdfsFileFormat_AVRO          THdfsFileFormat = 4
	THdfsFileFormat_PARQUET       THdfsFileFormat = 5
)

func (p THdfsFileFormat) String() string {
	switch p {
	case THdfsFileFormat_TEXT:
		return "TEXT"
	case THdfsFileFormat_LZO_TEXT:
		return "LZO_TEXT"
	case THdfsFileFormat_RC_FILE:
		return "RC_FILE"
	case THdfsFileFormat_SEQUENCE_FILE:
		return "SEQUENCE_FILE"
	case THdfsFileFormat_AVRO:
		return "AVRO"
	case THdfsFileFormat_PARQUET:
		return "PARQUET"
	}
	return "<UNSET>"
}

func THdfsFileFormatFromString(s string) (THdfsFileFormat, error) {
	switch s {
	case "TEXT":
		return THdfsFileFormat_TEXT, nil
	case "LZO_TEXT":
		return THdfsFileFormat_LZO_TEXT, nil
	case "RC_FILE":
		return THdfsFileFormat_RC_FILE, nil
	case "SEQUENCE_FILE":
		return THdfsFileFormat_SEQUENCE_FILE, nil
	case "AVRO":
		return THdfsFileFormat_AVRO, nil
	case "PARQUET":
		return THdfsFileFormat_PARQUET, nil
	}
	return THdfsFileFormat(0), fmt.Errorf("not a valid THdfsFileFormat string")
}

func THdfsFileFormatPtr(v THdfsFileFormat) *THdfsFileFormat { return &v }
func (p *THdfsFileFormat) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = THdfsFileFormat(result.Int64)
	return
}

func (p *THdfsFileFormat) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TSchemaTableType int64

const (
	TSchemaTableType_SCH_AUTHORS                               TSchemaTableType = 0
	TSchemaTableType_SCH_CHARSETS                              TSchemaTableType = 1
	TSchemaTableType_SCH_COLLATIONS                            TSchemaTableType = 2
	TSchemaTableType_SCH_COLLATION_CHARACTER_SET_APPLICABILITY TSchemaTableType = 3
	TSchemaTableType_SCH_COLUMNS                               TSchemaTableType = 4
	TSchemaTableType_SCH_COLUMN_PRIVILEGES                     TSchemaTableType = 5
	TSchemaTableType_SCH_CREATE_TABLE                          TSchemaTableType = 6
	TSchemaTableType_SCH_ENGINES                               TSchemaTableType = 7
	TSchemaTableType_SCH_EVENTS                                TSchemaTableType = 8
	TSchemaTableType_SCH_FILES                                 TSchemaTableType = 9
	TSchemaTableType_SCH_GLOBAL_STATUS                         TSchemaTableType = 10
	TSchemaTableType_SCH_GLOBAL_VARIABLES                      TSchemaTableType = 11
	TSchemaTableType_SCH_KEY_COLUMN_USAGE                      TSchemaTableType = 12
	TSchemaTableType_SCH_OPEN_TABLES                           TSchemaTableType = 13
	TSchemaTableType_SCH_PARTITIONS                            TSchemaTableType = 14
	TSchemaTableType_SCH_PLUGINS                               TSchemaTableType = 15
	TSchemaTableType_SCH_PROCESSLIST                           TSchemaTableType = 16
	TSchemaTableType_SCH_PROFILES                              TSchemaTableType = 17
	TSchemaTableType_SCH_REFERENTIAL_CONSTRAINTS               TSchemaTableType = 18
	TSchemaTableType_SCH_PROCEDURES                            TSchemaTableType = 19
	TSchemaTableType_SCH_SCHEMATA                              TSchemaTableType = 20
	TSchemaTableType_SCH_SCHEMA_PRIVILEGES                     TSchemaTableType = 21
	TSchemaTableType_SCH_SESSION_STATUS                        TSchemaTableType = 22
	TSchemaTableType_SCH_SESSION_VARIABLES                     TSchemaTableType = 23
	TSchemaTableType_SCH_STATISTICS                            TSchemaTableType = 24
	TSchemaTableType_SCH_STATUS                                TSchemaTableType = 25
	TSchemaTableType_SCH_TABLES                                TSchemaTableType = 26
	TSchemaTableType_SCH_TABLE_CONSTRAINTS                     TSchemaTableType = 27
	TSchemaTableType_SCH_TABLE_NAMES                           TSchemaTableType = 28
	TSchemaTableType_SCH_TABLE_PRIVILEGES                      TSchemaTableType = 29
	TSchemaTableType_SCH_TRIGGERS                              TSchemaTableType = 30
	TSchemaTableType_SCH_USER_PRIVILEGES                       TSchemaTableType = 31
	TSchemaTableType_SCH_VARIABLES                             TSchemaTableType = 32
	TSchemaTableType_SCH_VIEWS                                 TSchemaTableType = 33
	TSchemaTableType_SCH_INVALID                               TSchemaTableType = 34
	TSchemaTableType_SCH_ROWSETS                               TSchemaTableType = 35
	TSchemaTableType_SCH_BACKENDS                              TSchemaTableType = 36
	TSchemaTableType_SCH_COLUMN_STATISTICS                     TSchemaTableType = 37
	TSchemaTableType_SCH_PARAMETERS                            TSchemaTableType = 38
	TSchemaTableType_SCH_METADATA_NAME_IDS                     TSchemaTableType = 39
	TSchemaTableType_SCH_PROFILING                             TSchemaTableType = 40
	TSchemaTableType_SCH_BACKEND_ACTIVE_TASKS                  TSchemaTableType = 41
	TSchemaTableType_SCH_ACTIVE_QUERIES                        TSchemaTableType = 42
	TSchemaTableType_SCH_WORKLOAD_GROUPS                       TSchemaTableType = 43
	TSchemaTableType_SCH_USER                                  TSchemaTableType = 44
	TSchemaTableType_SCH_PROCS_PRIV                            TSchemaTableType = 45
	TSchemaTableType_SCH_WORKLOAD_POLICY                       TSchemaTableType = 46
	TSchemaTableType_SCH_TABLE_OPTIONS                         TSchemaTableType = 47
	TSchemaTableType_SCH_WORKLOAD_GROUP_PRIVILEGES             TSchemaTableType = 48
	TSchemaTableType_SCH_WORKLOAD_GROUP_RESOURCE_USAGE         TSchemaTableType = 49
	TSchemaTableType_SCH_TABLE_PROPERTIES                      TSchemaTableType = 50
	TSchemaTableType_SCH_FILE_CACHE_STATISTICS                 TSchemaTableType = 51
	TSchemaTableType_SCH_CATALOG_META_CACHE_STATISTICS         TSchemaTableType = 52
)

func (p TSchemaTableType) String() string {
	switch p {
	case TSchemaTableType_SCH_AUTHORS:
		return "SCH_AUTHORS"
	case TSchemaTableType_SCH_CHARSETS:
		return "SCH_CHARSETS"
	case TSchemaTableType_SCH_COLLATIONS:
		return "SCH_COLLATIONS"
	case TSchemaTableType_SCH_COLLATION_CHARACTER_SET_APPLICABILITY:
		return "SCH_COLLATION_CHARACTER_SET_APPLICABILITY"
	case TSchemaTableType_SCH_COLUMNS:
		return "SCH_COLUMNS"
	case TSchemaTableType_SCH_COLUMN_PRIVILEGES:
		return "SCH_COLUMN_PRIVILEGES"
	case TSchemaTableType_SCH_CREATE_TABLE:
		return "SCH_CREATE_TABLE"
	case TSchemaTableType_SCH_ENGINES:
		return "SCH_ENGINES"
	case TSchemaTableType_SCH_EVENTS:
		return "SCH_EVENTS"
	case TSchemaTableType_SCH_FILES:
		return "SCH_FILES"
	case TSchemaTableType_SCH_GLOBAL_STATUS:
		return "SCH_GLOBAL_STATUS"
	case TSchemaTableType_SCH_GLOBAL_VARIABLES:
		return "SCH_GLOBAL_VARIABLES"
	case TSchemaTableType_SCH_KEY_COLUMN_USAGE:
		return "SCH_KEY_COLUMN_USAGE"
	case TSchemaTableType_SCH_OPEN_TABLES:
		return "SCH_OPEN_TABLES"
	case TSchemaTableType_SCH_PARTITIONS:
		return "SCH_PARTITIONS"
	case TSchemaTableType_SCH_PLUGINS:
		return "SCH_PLUGINS"
	case TSchemaTableType_SCH_PROCESSLIST:
		return "SCH_PROCESSLIST"
	case TSchemaTableType_SCH_PROFILES:
		return "SCH_PROFILES"
	case TSchemaTableType_SCH_REFERENTIAL_CONSTRAINTS:
		return "SCH_REFERENTIAL_CONSTRAINTS"
	case TSchemaTableType_SCH_PROCEDURES:
		return "SCH_PROCEDURES"
	case TSchemaTableType_SCH_SCHEMATA:
		return "SCH_SCHEMATA"
	case TSchemaTableType_SCH_SCHEMA_PRIVILEGES:
		return "SCH_SCHEMA_PRIVILEGES"
	case TSchemaTableType_SCH_SESSION_STATUS:
		return "SCH_SESSION_STATUS"
	case TSchemaTableType_SCH_SESSION_VARIABLES:
		return "SCH_SESSION_VARIABLES"
	case TSchemaTableType_SCH_STATISTICS:
		return "SCH_STATISTICS"
	case TSchemaTableType_SCH_STATUS:
		return "SCH_STATUS"
	case TSchemaTableType_SCH_TABLES:
		return "SCH_TABLES"
	case TSchemaTableType_SCH_TABLE_CONSTRAINTS:
		return "SCH_TABLE_CONSTRAINTS"
	case TSchemaTableType_SCH_TABLE_NAMES:
		return "SCH_TABLE_NAMES"
	case TSchemaTableType_SCH_TABLE_PRIVILEGES:
		return "SCH_TABLE_PRIVILEGES"
	case TSchemaTableType_SCH_TRIGGERS:
		return "SCH_TRIGGERS"
	case TSchemaTableType_SCH_USER_PRIVILEGES:
		return "SCH_USER_PRIVILEGES"
	case TSchemaTableType_SCH_VARIABLES:
		return "SCH_VARIABLES"
	case TSchemaTableType_SCH_VIEWS:
		return "SCH_VIEWS"
	case TSchemaTableType_SCH_INVALID:
		return "SCH_INVALID"
	case TSchemaTableType_SCH_ROWSETS:
		return "SCH_ROWSETS"
	case TSchemaTableType_SCH_BACKENDS:
		return "SCH_BACKENDS"
	case TSchemaTableType_SCH_COLUMN_STATISTICS:
		return "SCH_COLUMN_STATISTICS"
	case TSchemaTableType_SCH_PARAMETERS:
		return "SCH_PARAMETERS"
	case TSchemaTableType_SCH_METADATA_NAME_IDS:
		return "SCH_METADATA_NAME_IDS"
	case TSchemaTableType_SCH_PROFILING:
		return "SCH_PROFILING"
	case TSchemaTableType_SCH_BACKEND_ACTIVE_TASKS:
		return "SCH_BACKEND_ACTIVE_TASKS"
	case TSchemaTableType_SCH_ACTIVE_QUERIES:
		return "SCH_ACTIVE_QUERIES"
	case TSchemaTableType_SCH_WORKLOAD_GROUPS:
		return "SCH_WORKLOAD_GROUPS"
	case TSchemaTableType_SCH_USER:
		return "SCH_USER"
	case TSchemaTableType_SCH_PROCS_PRIV:
		return "SCH_PROCS_PRIV"
	case TSchemaTableType_SCH_WORKLOAD_POLICY:
		return "SCH_WORKLOAD_POLICY"
	case TSchemaTableType_SCH_TABLE_OPTIONS:
		return "SCH_TABLE_OPTIONS"
	case TSchemaTableType_SCH_WORKLOAD_GROUP_PRIVILEGES:
		return "SCH_WORKLOAD_GROUP_PRIVILEGES"
	case TSchemaTableType_SCH_WORKLOAD_GROUP_RESOURCE_USAGE:
		return "SCH_WORKLOAD_GROUP_RESOURCE_USAGE"
	case TSchemaTableType_SCH_TABLE_PROPERTIES:
		return "SCH_TABLE_PROPERTIES"
	case TSchemaTableType_SCH_FILE_CACHE_STATISTICS:
		return "SCH_FILE_CACHE_STATISTICS"
	case TSchemaTableType_SCH_CATALOG_META_CACHE_STATISTICS:
		return "SCH_CATALOG_META_CACHE_STATISTICS"
	}
	return "<UNSET>"
}

func TSchemaTableTypeFromString(s string) (TSchemaTableType, error) {
	switch s {
	case "SCH_AUTHORS":
		return TSchemaTableType_SCH_AUTHORS, nil
	case "SCH_CHARSETS":
		return TSchemaTableType_SCH_CHARSETS, nil
	case "SCH_COLLATIONS":
		return TSchemaTableType_SCH_COLLATIONS, nil
	case "SCH_COLLATION_CHARACTER_SET_APPLICABILITY":
		return TSchemaTableType_SCH_COLLATION_CHARACTER_SET_APPLICABILITY, nil
	case "SCH_COLUMNS":
		return TSchemaTableType_SCH_COLUMNS, nil
	case "SCH_COLUMN_PRIVILEGES":
		return TSchemaTableType_SCH_COLUMN_PRIVILEGES, nil
	case "SCH_CREATE_TABLE":
		return TSchemaTableType_SCH_CREATE_TABLE, nil
	case "SCH_ENGINES":
		return TSchemaTableType_SCH_ENGINES, nil
	case "SCH_EVENTS":
		return TSchemaTableType_SCH_EVENTS, nil
	case "SCH_FILES":
		return TSchemaTableType_SCH_FILES, nil
	case "SCH_GLOBAL_STATUS":
		return TSchemaTableType_SCH_GLOBAL_STATUS, nil
	case "SCH_GLOBAL_VARIABLES":
		return TSchemaTableType_SCH_GLOBAL_VARIABLES, nil
	case "SCH_KEY_COLUMN_USAGE":
		return TSchemaTableType_SCH_KEY_COLUMN_USAGE, nil
	case "SCH_OPEN_TABLES":
		return TSchemaTableType_SCH_OPEN_TABLES, nil
	case "SCH_PARTITIONS":
		return TSchemaTableType_SCH_PARTITIONS, nil
	case "SCH_PLUGINS":
		return TSchemaTableType_SCH_PLUGINS, nil
	case "SCH_PROCESSLIST":
		return TSchemaTableType_SCH_PROCESSLIST, nil
	case "SCH_PROFILES":
		return TSchemaTableType_SCH_PROFILES, nil
	case "SCH_REFERENTIAL_CONSTRAINTS":
		return TSchemaTableType_SCH_REFERENTIAL_CONSTRAINTS, nil
	case "SCH_PROCEDURES":
		return TSchemaTableType_SCH_PROCEDURES, nil
	case "SCH_SCHEMATA":
		return TSchemaTableType_SCH_SCHEMATA, nil
	case "SCH_SCHEMA_PRIVILEGES":
		return TSchemaTableType_SCH_SCHEMA_PRIVILEGES, nil
	case "SCH_SESSION_STATUS":
		return TSchemaTableType_SCH_SESSION_STATUS, nil
	case "SCH_SESSION_VARIABLES":
		return TSchemaTableType_SCH_SESSION_VARIABLES, nil
	case "SCH_STATISTICS":
		return TSchemaTableType_SCH_STATISTICS, nil
	case "SCH_STATUS":
		return TSchemaTableType_SCH_STATUS, nil
	case "SCH_TABLES":
		return TSchemaTableType_SCH_TABLES, nil
	case "SCH_TABLE_CONSTRAINTS":
		return TSchemaTableType_SCH_TABLE_CONSTRAINTS, nil
	case "SCH_TABLE_NAMES":
		return TSchemaTableType_SCH_TABLE_NAMES, nil
	case "SCH_TABLE_PRIVILEGES":
		return TSchemaTableType_SCH_TABLE_PRIVILEGES, nil
	case "SCH_TRIGGERS":
		return TSchemaTableType_SCH_TRIGGERS, nil
	case "SCH_USER_PRIVILEGES":
		return TSchemaTableType_SCH_USER_PRIVILEGES, nil
	case "SCH_VARIABLES":
		return TSchemaTableType_SCH_VARIABLES, nil
	case "SCH_VIEWS":
		return TSchemaTableType_SCH_VIEWS, nil
	case "SCH_INVALID":
		return TSchemaTableType_SCH_INVALID, nil
	case "SCH_ROWSETS":
		return TSchemaTableType_SCH_ROWSETS, nil
	case "SCH_BACKENDS":
		return TSchemaTableType_SCH_BACKENDS, nil
	case "SCH_COLUMN_STATISTICS":
		return TSchemaTableType_SCH_COLUMN_STATISTICS, nil
	case "SCH_PARAMETERS":
		return TSchemaTableType_SCH_PARAMETERS, nil
	case "SCH_METADATA_NAME_IDS":
		return TSchemaTableType_SCH_METADATA_NAME_IDS, nil
	case "SCH_PROFILING":
		return TSchemaTableType_SCH_PROFILING, nil
	case "SCH_BACKEND_ACTIVE_TASKS":
		return TSchemaTableType_SCH_BACKEND_ACTIVE_TASKS, nil
	case "SCH_ACTIVE_QUERIES":
		return TSchemaTableType_SCH_ACTIVE_QUERIES, nil
	case "SCH_WORKLOAD_GROUPS":
		return TSchemaTableType_SCH_WORKLOAD_GROUPS, nil
	case "SCH_USER":
		return TSchemaTableType_SCH_USER, nil
	case "SCH_PROCS_PRIV":
		return TSchemaTableType_SCH_PROCS_PRIV, nil
	case "SCH_WORKLOAD_POLICY":
		return TSchemaTableType_SCH_WORKLOAD_POLICY, nil
	case "SCH_TABLE_OPTIONS":
		return TSchemaTableType_SCH_TABLE_OPTIONS, nil
	case "SCH_WORKLOAD_GROUP_PRIVILEGES":
		return TSchemaTableType_SCH_WORKLOAD_GROUP_PRIVILEGES, nil
	case "SCH_WORKLOAD_GROUP_RESOURCE_USAGE":
		return TSchemaTableType_SCH_WORKLOAD_GROUP_RESOURCE_USAGE, nil
	case "SCH_TABLE_PROPERTIES":
		return TSchemaTableType_SCH_TABLE_PROPERTIES, nil
	case "SCH_FILE_CACHE_STATISTICS":
		return TSchemaTableType_SCH_FILE_CACHE_STATISTICS, nil
	case "SCH_CATALOG_META_CACHE_STATISTICS":
		return TSchemaTableType_SCH_CATALOG_META_CACHE_STATISTICS, nil
	}
	return TSchemaTableType(0), fmt.Errorf("not a valid TSchemaTableType string")
}

func TSchemaTableTypePtr(v TSchemaTableType) *TSchemaTableType { return &v }
func (p *TSchemaTableType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TSchemaTableType(result.Int64)
	return
}

func (p *TSchemaTableType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type THdfsCompression int64

const (
	THdfsCompression_NONE           THdfsCompression = 0
	THdfsCompression_DEFAULT        THdfsCompression = 1
	THdfsCompression_GZIP           THdfsCompression = 2
	THdfsCompression_DEFLATE        THdfsCompression = 3
	THdfsCompression_BZIP2          THdfsCompression = 4
	THdfsCompression_SNAPPY         THdfsCompression = 5
	THdfsCompression_SNAPPY_BLOCKED THdfsCompression = 6
)

func (p THdfsCompression) String() string {
	switch p {
	case THdfsCompression_NONE:
		return "NONE"
	case THdfsCompression_DEFAULT:
		return "DEFAULT"
	case THdfsCompression_GZIP:
		return "GZIP"
	case THdfsCompression_DEFLATE:
		return "DEFLATE"
	case THdfsCompression_BZIP2:
		return "BZIP2"
	case THdfsCompression_SNAPPY:
		return "SNAPPY"
	case THdfsCompression_SNAPPY_BLOCKED:
		return "SNAPPY_BLOCKED"
	}
	return "<UNSET>"
}

func THdfsCompressionFromString(s string) (THdfsCompression, error) {
	switch s {
	case "NONE":
		return THdfsCompression_NONE, nil
	case "DEFAULT":
		return THdfsCompression_DEFAULT, nil
	case "GZIP":
		return THdfsCompression_GZIP, nil
	case "DEFLATE":
		return THdfsCompression_DEFLATE, nil
	case "BZIP2":
		return THdfsCompression_BZIP2, nil
	case "SNAPPY":
		return THdfsCompression_SNAPPY, nil
	case "SNAPPY_BLOCKED":
		return THdfsCompression_SNAPPY_BLOCKED, nil
	}
	return THdfsCompression(0), fmt.Errorf("not a valid THdfsCompression string")
}

func THdfsCompressionPtr(v THdfsCompression) *THdfsCompression { return &v }
func (p *THdfsCompression) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = THdfsCompression(result.Int64)
	return
}

func (p *THdfsCompression) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TIndexType int64

const (
	TIndexType_BITMAP      TIndexType = 0
	TIndexType_INVERTED    TIndexType = 1
	TIndexType_BLOOMFILTER TIndexType = 2
	TIndexType_NGRAM_BF    TIndexType = 3
)

func (p TIndexType) String() string {
	switch p {
	case TIndexType_BITMAP:
		return "BITMAP"
	case TIndexType_INVERTED:
		return "INVERTED"
	case TIndexType_BLOOMFILTER:
		return "BLOOMFILTER"
	case TIndexType_NGRAM_BF:
		return "NGRAM_BF"
	}
	return "<UNSET>"
}

func TIndexTypeFromString(s string) (TIndexType, error) {
	switch s {
	case "BITMAP":
		return TIndexType_BITMAP, nil
	case "INVERTED":
		return TIndexType_INVERTED, nil
	case "BLOOMFILTER":
		return TIndexType_BLOOMFILTER, nil
	case "NGRAM_BF":
		return TIndexType_NGRAM_BF, nil
	}
	return TIndexType(0), fmt.Errorf("not a valid TIndexType string")
}

func TIndexTypePtr(v TIndexType) *TIndexType { return &v }
func (p *TIndexType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TIndexType(result.Int64)
	return
}

func (p *TIndexType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TColumn struct {
	ColumnName          string                  `thrift:"column_name,1,required" frugal:"1,required,string" json:"column_name"`
	ColumnType          *types.TColumnType      `thrift:"column_type,2,required" frugal:"2,required,types.TColumnType" json:"column_type"`
	AggregationType     *types.TAggregationType `thrift:"aggregation_type,3,optional" frugal:"3,optional,TAggregationType" json:"aggregation_type,omitempty"`
	IsKey               *bool                   `thrift:"is_key,4,optional" frugal:"4,optional,bool" json:"is_key,omitempty"`
	IsAllowNull         *bool                   `thrift:"is_allow_null,5,optional" frugal:"5,optional,bool" json:"is_allow_null,omitempty"`
	DefaultValue        *string                 `thrift:"default_value,6,optional" frugal:"6,optional,string" json:"default_value,omitempty"`
	IsBloomFilterColumn *bool                   `thrift:"is_bloom_filter_column,7,optional" frugal:"7,optional,bool" json:"is_bloom_filter_column,omitempty"`
	DefineExpr          *exprs.TExpr            `thrift:"define_expr,8,optional" frugal:"8,optional,exprs.TExpr" json:"define_expr,omitempty"`
	Visible             bool                    `thrift:"visible,9,optional" frugal:"9,optional,bool" json:"visible,omitempty"`
	ChildrenColumn      []*TColumn              `thrift:"children_column,10,optional" frugal:"10,optional,list<TColumn>" json:"children_column,omitempty"`
	ColUniqueId         int32                   `thrift:"col_unique_id,11,optional" frugal:"11,optional,i32" json:"col_unique_id,omitempty"`
	HasBitmapIndex      bool                    `thrift:"has_bitmap_index,12,optional" frugal:"12,optional,bool" json:"has_bitmap_index,omitempty"`
	HasNgramBfIndex     bool                    `thrift:"has_ngram_bf_index,13,optional" frugal:"13,optional,bool" json:"has_ngram_bf_index,omitempty"`
	GramSize            *int32                  `thrift:"gram_size,14,optional" frugal:"14,optional,i32" json:"gram_size,omitempty"`
	GramBfSize          *int32                  `thrift:"gram_bf_size,15,optional" frugal:"15,optional,i32" json:"gram_bf_size,omitempty"`
	Aggregation         *string                 `thrift:"aggregation,16,optional" frugal:"16,optional,string" json:"aggregation,omitempty"`
	ResultIsNullable    *bool                   `thrift:"result_is_nullable,17,optional" frugal:"17,optional,bool" json:"result_is_nullable,omitempty"`
	IsAutoIncrement     bool                    `thrift:"is_auto_increment,18,optional" frugal:"18,optional,bool" json:"is_auto_increment,omitempty"`
	ClusterKeyId        int32                   `thrift:"cluster_key_id,19,optional" frugal:"19,optional,i32" json:"cluster_key_id,omitempty"`
	BeExecVersion       int32                   `thrift:"be_exec_version,20,optional" frugal:"20,optional,i32" json:"be_exec_version,omitempty"`
}

func NewTColumn() *TColumn {
	return &TColumn{

		Visible:         true,
		ColUniqueId:     -1,
		HasBitmapIndex:  false,
		HasNgramBfIndex: false,
		IsAutoIncrement: false,
		ClusterKeyId:    -1,
		BeExecVersion:   -1,
	}
}

func (p *TColumn) InitDefault() {
	p.Visible = true
	p.ColUniqueId = -1
	p.HasBitmapIndex = false
	p.HasNgramBfIndex = false
	p.IsAutoIncrement = false
	p.ClusterKeyId = -1
	p.BeExecVersion = -1
}

func (p *TColumn) GetColumnName() (v string) {
	return p.ColumnName
}

var TColumn_ColumnType_DEFAULT *types.TColumnType

func (p *TColumn) GetColumnType() (v *types.TColumnType) {
	if !p.IsSetColumnType() {
		return TColumn_ColumnType_DEFAULT
	}
	return p.ColumnType
}

var TColumn_AggregationType_DEFAULT types.TAggregationType

func (p *TColumn) GetAggregationType() (v types.TAggregationType) {
	if !p.IsSetAggregationType() {
		return TColumn_AggregationType_DEFAULT
	}
	return *p.AggregationType
}

var TColumn_IsKey_DEFAULT bool

func (p *TColumn) GetIsKey() (v bool) {
	if !p.IsSetIsKey() {
		return TColumn_IsKey_DEFAULT
	}
	return *p.IsKey
}

var TColumn_IsAllowNull_DEFAULT bool

func (p *TColumn) GetIsAllowNull() (v bool) {
	if !p.IsSetIsAllowNull() {
		return TColumn_IsAllowNull_DEFAULT
	}
	return *p.IsAllowNull
}

var TColumn_DefaultValue_DEFAULT string

func (p *TColumn) GetDefaultValue() (v string) {
	if !p.IsSetDefaultValue() {
		return TColumn_DefaultValue_DEFAULT
	}
	return *p.DefaultValue
}

var TColumn_IsBloomFilterColumn_DEFAULT bool

func (p *TColumn) GetIsBloomFilterColumn() (v bool) {
	if !p.IsSetIsBloomFilterColumn() {
		return TColumn_IsBloomFilterColumn_DEFAULT
	}
	return *p.IsBloomFilterColumn
}

var TColumn_DefineExpr_DEFAULT *exprs.TExpr

func (p *TColumn) GetDefineExpr() (v *exprs.TExpr) {
	if !p.IsSetDefineExpr() {
		return TColumn_DefineExpr_DEFAULT
	}
	return p.DefineExpr
}

var TColumn_Visible_DEFAULT bool = true

func (p *TColumn) GetVisible() (v bool) {
	if !p.IsSetVisible() {
		return TColumn_Visible_DEFAULT
	}
	return p.Visible
}

var TColumn_ChildrenColumn_DEFAULT []*TColumn

func (p *TColumn) GetChildrenColumn() (v []*TColumn) {
	if !p.IsSetChildrenColumn() {
		return TColumn_ChildrenColumn_DEFAULT
	}
	return p.ChildrenColumn
}

var TColumn_ColUniqueId_DEFAULT int32 = -1

func (p *TColumn) GetColUniqueId() (v int32) {
	if !p.IsSetColUniqueId() {
		return TColumn_ColUniqueId_DEFAULT
	}
	return p.ColUniqueId
}

var TColumn_HasBitmapIndex_DEFAULT bool = false

func (p *TColumn) GetHasBitmapIndex() (v bool) {
	if !p.IsSetHasBitmapIndex() {
		return TColumn_HasBitmapIndex_DEFAULT
	}
	return p.HasBitmapIndex
}

var TColumn_HasNgramBfIndex_DEFAULT bool = false

func (p *TColumn) GetHasNgramBfIndex() (v bool) {
	if !p.IsSetHasNgramBfIndex() {
		return TColumn_HasNgramBfIndex_DEFAULT
	}
	return p.HasNgramBfIndex
}

var TColumn_GramSize_DEFAULT int32

func (p *TColumn) GetGramSize() (v int32) {
	if !p.IsSetGramSize() {
		return TColumn_GramSize_DEFAULT
	}
	return *p.GramSize
}

var TColumn_GramBfSize_DEFAULT int32

func (p *TColumn) GetGramBfSize() (v int32) {
	if !p.IsSetGramBfSize() {
		return TColumn_GramBfSize_DEFAULT
	}
	return *p.GramBfSize
}

var TColumn_Aggregation_DEFAULT string

func (p *TColumn) GetAggregation() (v string) {
	if !p.IsSetAggregation() {
		return TColumn_Aggregation_DEFAULT
	}
	return *p.Aggregation
}

var TColumn_ResultIsNullable_DEFAULT bool

func (p *TColumn) GetResultIsNullable() (v bool) {
	if !p.IsSetResultIsNullable() {
		return TColumn_ResultIsNullable_DEFAULT
	}
	return *p.ResultIsNullable
}

var TColumn_IsAutoIncrement_DEFAULT bool = false

func (p *TColumn) GetIsAutoIncrement() (v bool) {
	if !p.IsSetIsAutoIncrement() {
		return TColumn_IsAutoIncrement_DEFAULT
	}
	return p.IsAutoIncrement
}

var TColumn_ClusterKeyId_DEFAULT int32 = -1

func (p *TColumn) GetClusterKeyId() (v int32) {
	if !p.IsSetClusterKeyId() {
		return TColumn_ClusterKeyId_DEFAULT
	}
	return p.ClusterKeyId
}

var TColumn_BeExecVersion_DEFAULT int32 = -1

func (p *TColumn) GetBeExecVersion() (v int32) {
	if !p.IsSetBeExecVersion() {
		return TColumn_BeExecVersion_DEFAULT
	}
	return p.BeExecVersion
}
func (p *TColumn) SetColumnName(val string) {
	p.ColumnName = val
}
func (p *TColumn) SetColumnType(val *types.TColumnType) {
	p.ColumnType = val
}
func (p *TColumn) SetAggregationType(val *types.TAggregationType) {
	p.AggregationType = val
}
func (p *TColumn) SetIsKey(val *bool) {
	p.IsKey = val
}
func (p *TColumn) SetIsAllowNull(val *bool) {
	p.IsAllowNull = val
}
func (p *TColumn) SetDefaultValue(val *string) {
	p.DefaultValue = val
}
func (p *TColumn) SetIsBloomFilterColumn(val *bool) {
	p.IsBloomFilterColumn = val
}
func (p *TColumn) SetDefineExpr(val *exprs.TExpr) {
	p.DefineExpr = val
}
func (p *TColumn) SetVisible(val bool) {
	p.Visible = val
}
func (p *TColumn) SetChildrenColumn(val []*TColumn) {
	p.ChildrenColumn = val
}
func (p *TColumn) SetColUniqueId(val int32) {
	p.ColUniqueId = val
}
func (p *TColumn) SetHasBitmapIndex(val bool) {
	p.HasBitmapIndex = val
}
func (p *TColumn) SetHasNgramBfIndex(val bool) {
	p.HasNgramBfIndex = val
}
func (p *TColumn) SetGramSize(val *int32) {
	p.GramSize = val
}
func (p *TColumn) SetGramBfSize(val *int32) {
	p.GramBfSize = val
}
func (p *TColumn) SetAggregation(val *string) {
	p.Aggregation = val
}
func (p *TColumn) SetResultIsNullable(val *bool) {
	p.ResultIsNullable = val
}
func (p *TColumn) SetIsAutoIncrement(val bool) {
	p.IsAutoIncrement = val
}
func (p *TColumn) SetClusterKeyId(val int32) {
	p.ClusterKeyId = val
}
func (p *TColumn) SetBeExecVersion(val int32) {
	p.BeExecVersion = val
}

var fieldIDToName_TColumn = map[int16]string{
	1:  "column_name",
	2:  "column_type",
	3:  "aggregation_type",
	4:  "is_key",
	5:  "is_allow_null",
	6:  "default_value",
	7:  "is_bloom_filter_column",
	8:  "define_expr",
	9:  "visible",
	10: "children_column",
	11: "col_unique_id",
	12: "has_bitmap_index",
	13: "has_ngram_bf_index",
	14: "gram_size",
	15: "gram_bf_size",
	16: "aggregation",
	17: "result_is_nullable",
	18: "is_auto_increment",
	19: "cluster_key_id",
	20: "be_exec_version",
}

func (p *TColumn) IsSetColumnType() bool {
	return p.ColumnType != nil
}

func (p *TColumn) IsSetAggregationType() bool {
	return p.AggregationType != nil
}

func (p *TColumn) IsSetIsKey() bool {
	return p.IsKey != nil
}

func (p *TColumn) IsSetIsAllowNull() bool {
	return p.IsAllowNull != nil
}

func (p *TColumn) IsSetDefaultValue() bool {
	return p.DefaultValue != nil
}

func (p *TColumn) IsSetIsBloomFilterColumn() bool {
	return p.IsBloomFilterColumn != nil
}

func (p *TColumn) IsSetDefineExpr() bool {
	return p.DefineExpr != nil
}

func (p *TColumn) IsSetVisible() bool {
	return p.Visible != TColumn_Visible_DEFAULT
}

func (p *TColumn) IsSetChildrenColumn() bool {
	return p.ChildrenColumn != nil
}

func (p *TColumn) IsSetColUniqueId() bool {
	return p.ColUniqueId != TColumn_ColUniqueId_DEFAULT
}

func (p *TColumn) IsSetHasBitmapIndex() bool {
	return p.HasBitmapIndex != TColumn_HasBitmapIndex_DEFAULT
}

func (p *TColumn) IsSetHasNgramBfIndex() bool {
	return p.HasNgramBfIndex != TColumn_HasNgramBfIndex_DEFAULT
}

func (p *TColumn) IsSetGramSize() bool {
	return p.GramSize != nil
}

func (p *TColumn) IsSetGramBfSize() bool {
	return p.GramBfSize != nil
}

func (p *TColumn) IsSetAggregation() bool {
	return p.Aggregation != nil
}

func (p *TColumn) IsSetResultIsNullable() bool {
	return p.ResultIsNullable != nil
}

func (p *TColumn) IsSetIsAutoIncrement() bool {
	return p.IsAutoIncrement != TColumn_IsAutoIncrement_DEFAULT
}

func (p *TColumn) IsSetClusterKeyId() bool {
	return p.ClusterKeyId != TColumn_ClusterKeyId_DEFAULT
}

func (p *TColumn) IsSetBeExecVersion() bool {
	return p.BeExecVersion != TColumn_BeExecVersion_DEFAULT
}

func (p *TColumn) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetColumnName bool = false
	var issetColumnType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumnName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumnType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetColumnName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetColumnType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TColumn[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TColumn[fieldId]))
}

func (p *TColumn) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ColumnName = _field
	return nil
}
func (p *TColumn) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTColumnType()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ColumnType = _field
	return nil
}
func (p *TColumn) ReadField3(iprot thrift.TProtocol) error {

	var _field *types.TAggregationType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TAggregationType(v)
		_field = &tmp
	}
	p.AggregationType = _field
	return nil
}
func (p *TColumn) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsKey = _field
	return nil
}
func (p *TColumn) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsAllowNull = _field
	return nil
}
func (p *TColumn) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DefaultValue = _field
	return nil
}
func (p *TColumn) ReadField7(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsBloomFilterColumn = _field
	return nil
}
func (p *TColumn) ReadField8(iprot thrift.TProtocol) error {
	_field := exprs.NewTExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DefineExpr = _field
	return nil
}
func (p *TColumn) ReadField9(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Visible = _field
	return nil
}
func (p *TColumn) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TColumn, 0, size)
	values := make([]TColumn, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ChildrenColumn = _field
	return nil
}
func (p *TColumn) ReadField11(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ColUniqueId = _field
	return nil
}
func (p *TColumn) ReadField12(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HasBitmapIndex = _field
	return nil
}
func (p *TColumn) ReadField13(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HasNgramBfIndex = _field
	return nil
}
func (p *TColumn) ReadField14(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.GramSize = _field
	return nil
}
func (p *TColumn) ReadField15(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.GramBfSize = _field
	return nil
}
func (p *TColumn) ReadField16(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Aggregation = _field
	return nil
}
func (p *TColumn) ReadField17(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResultIsNullable = _field
	return nil
}
func (p *TColumn) ReadField18(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsAutoIncrement = _field
	return nil
}
func (p *TColumn) ReadField19(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClusterKeyId = _field
	return nil
}
func (p *TColumn) ReadField20(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BeExecVersion = _field
	return nil
}

func (p *TColumn) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TColumn"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TColumn) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("column_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ColumnName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TColumn) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("column_type", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ColumnType.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TColumn) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAggregationType() {
		if err = oprot.WriteFieldBegin("aggregation_type", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.AggregationType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TColumn) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsKey() {
		if err = oprot.WriteFieldBegin("is_key", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TColumn) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsAllowNull() {
		if err = oprot.WriteFieldBegin("is_allow_null", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsAllowNull); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TColumn) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultValue() {
		if err = oprot.WriteFieldBegin("default_value", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DefaultValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TColumn) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsBloomFilterColumn() {
		if err = oprot.WriteFieldBegin("is_bloom_filter_column", thrift.BOOL, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsBloomFilterColumn); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TColumn) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefineExpr() {
		if err = oprot.WriteFieldBegin("define_expr", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DefineExpr.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TColumn) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetVisible() {
		if err = oprot.WriteFieldBegin("visible", thrift.BOOL, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.Visible); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TColumn) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetChildrenColumn() {
		if err = oprot.WriteFieldBegin("children_column", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ChildrenColumn)); err != nil {
			return err
		}
		for _, v := range p.ChildrenColumn {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TColumn) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetColUniqueId() {
		if err = oprot.WriteFieldBegin("col_unique_id", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.ColUniqueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TColumn) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasBitmapIndex() {
		if err = oprot.WriteFieldBegin("has_bitmap_index", thrift.BOOL, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.HasBitmapIndex); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TColumn) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasNgramBfIndex() {
		if err = oprot.WriteFieldBegin("has_ngram_bf_index", thrift.BOOL, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.HasNgramBfIndex); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TColumn) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetGramSize() {
		if err = oprot.WriteFieldBegin("gram_size", thrift.I32, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.GramSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TColumn) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetGramBfSize() {
		if err = oprot.WriteFieldBegin("gram_bf_size", thrift.I32, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.GramBfSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TColumn) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetAggregation() {
		if err = oprot.WriteFieldBegin("aggregation", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Aggregation); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TColumn) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetResultIsNullable() {
		if err = oprot.WriteFieldBegin("result_is_nullable", thrift.BOOL, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ResultIsNullable); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TColumn) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsAutoIncrement() {
		if err = oprot.WriteFieldBegin("is_auto_increment", thrift.BOOL, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsAutoIncrement); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TColumn) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetClusterKeyId() {
		if err = oprot.WriteFieldBegin("cluster_key_id", thrift.I32, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.ClusterKeyId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TColumn) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetBeExecVersion() {
		if err = oprot.WriteFieldBegin("be_exec_version", thrift.I32, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.BeExecVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *TColumn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumn(%+v)", *p)

}

func (p *TColumn) DeepEqual(ano *TColumn) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnName) {
		return false
	}
	if !p.Field2DeepEqual(ano.ColumnType) {
		return false
	}
	if !p.Field3DeepEqual(ano.AggregationType) {
		return false
	}
	if !p.Field4DeepEqual(ano.IsKey) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsAllowNull) {
		return false
	}
	if !p.Field6DeepEqual(ano.DefaultValue) {
		return false
	}
	if !p.Field7DeepEqual(ano.IsBloomFilterColumn) {
		return false
	}
	if !p.Field8DeepEqual(ano.DefineExpr) {
		return false
	}
	if !p.Field9DeepEqual(ano.Visible) {
		return false
	}
	if !p.Field10DeepEqual(ano.ChildrenColumn) {
		return false
	}
	if !p.Field11DeepEqual(ano.ColUniqueId) {
		return false
	}
	if !p.Field12DeepEqual(ano.HasBitmapIndex) {
		return false
	}
	if !p.Field13DeepEqual(ano.HasNgramBfIndex) {
		return false
	}
	if !p.Field14DeepEqual(ano.GramSize) {
		return false
	}
	if !p.Field15DeepEqual(ano.GramBfSize) {
		return false
	}
	if !p.Field16DeepEqual(ano.Aggregation) {
		return false
	}
	if !p.Field17DeepEqual(ano.ResultIsNullable) {
		return false
	}
	if !p.Field18DeepEqual(ano.IsAutoIncrement) {
		return false
	}
	if !p.Field19DeepEqual(ano.ClusterKeyId) {
		return false
	}
	if !p.Field20DeepEqual(ano.BeExecVersion) {
		return false
	}
	return true
}

func (p *TColumn) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ColumnName, src) != 0 {
		return false
	}
	return true
}
func (p *TColumn) Field2DeepEqual(src *types.TColumnType) bool {

	if !p.ColumnType.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TColumn) Field3DeepEqual(src *types.TAggregationType) bool {

	if p.AggregationType == src {
		return true
	} else if p.AggregationType == nil || src == nil {
		return false
	}
	if *p.AggregationType != *src {
		return false
	}
	return true
}
func (p *TColumn) Field4DeepEqual(src *bool) bool {

	if p.IsKey == src {
		return true
	} else if p.IsKey == nil || src == nil {
		return false
	}
	if *p.IsKey != *src {
		return false
	}
	return true
}
func (p *TColumn) Field5DeepEqual(src *bool) bool {

	if p.IsAllowNull == src {
		return true
	} else if p.IsAllowNull == nil || src == nil {
		return false
	}
	if *p.IsAllowNull != *src {
		return false
	}
	return true
}
func (p *TColumn) Field6DeepEqual(src *string) bool {

	if p.DefaultValue == src {
		return true
	} else if p.DefaultValue == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DefaultValue, *src) != 0 {
		return false
	}
	return true
}
func (p *TColumn) Field7DeepEqual(src *bool) bool {

	if p.IsBloomFilterColumn == src {
		return true
	} else if p.IsBloomFilterColumn == nil || src == nil {
		return false
	}
	if *p.IsBloomFilterColumn != *src {
		return false
	}
	return true
}
func (p *TColumn) Field8DeepEqual(src *exprs.TExpr) bool {

	if !p.DefineExpr.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TColumn) Field9DeepEqual(src bool) bool {

	if p.Visible != src {
		return false
	}
	return true
}
func (p *TColumn) Field10DeepEqual(src []*TColumn) bool {

	if len(p.ChildrenColumn) != len(src) {
		return false
	}
	for i, v := range p.ChildrenColumn {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TColumn) Field11DeepEqual(src int32) bool {

	if p.ColUniqueId != src {
		return false
	}
	return true
}
func (p *TColumn) Field12DeepEqual(src bool) bool {

	if p.HasBitmapIndex != src {
		return false
	}
	return true
}
func (p *TColumn) Field13DeepEqual(src bool) bool {

	if p.HasNgramBfIndex != src {
		return false
	}
	return true
}
func (p *TColumn) Field14DeepEqual(src *int32) bool {

	if p.GramSize == src {
		return true
	} else if p.GramSize == nil || src == nil {
		return false
	}
	if *p.GramSize != *src {
		return false
	}
	return true
}
func (p *TColumn) Field15DeepEqual(src *int32) bool {

	if p.GramBfSize == src {
		return true
	} else if p.GramBfSize == nil || src == nil {
		return false
	}
	if *p.GramBfSize != *src {
		return false
	}
	return true
}
func (p *TColumn) Field16DeepEqual(src *string) bool {

	if p.Aggregation == src {
		return true
	} else if p.Aggregation == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Aggregation, *src) != 0 {
		return false
	}
	return true
}
func (p *TColumn) Field17DeepEqual(src *bool) bool {

	if p.ResultIsNullable == src {
		return true
	} else if p.ResultIsNullable == nil || src == nil {
		return false
	}
	if *p.ResultIsNullable != *src {
		return false
	}
	return true
}
func (p *TColumn) Field18DeepEqual(src bool) bool {

	if p.IsAutoIncrement != src {
		return false
	}
	return true
}
func (p *TColumn) Field19DeepEqual(src int32) bool {

	if p.ClusterKeyId != src {
		return false
	}
	return true
}
func (p *TColumn) Field20DeepEqual(src int32) bool {

	if p.BeExecVersion != src {
		return false
	}
	return true
}

type TSlotDescriptor struct {
	Id                types.TSlotId        `thrift:"id,1,required" frugal:"1,required,i32" json:"id"`
	Parent            types.TTupleId       `thrift:"parent,2,required" frugal:"2,required,i32" json:"parent"`
	SlotType          *types.TTypeDesc     `thrift:"slotType,3,required" frugal:"3,required,types.TTypeDesc" json:"slotType"`
	ColumnPos         int32                `thrift:"columnPos,4,required" frugal:"4,required,i32" json:"columnPos"`
	ByteOffset        int32                `thrift:"byteOffset,5,required" frugal:"5,required,i32" json:"byteOffset"`
	NullIndicatorByte int32                `thrift:"nullIndicatorByte,6,required" frugal:"6,required,i32" json:"nullIndicatorByte"`
	NullIndicatorBit  int32                `thrift:"nullIndicatorBit,7,required" frugal:"7,required,i32" json:"nullIndicatorBit"`
	ColName           string               `thrift:"colName,8,required" frugal:"8,required,string" json:"colName"`
	SlotIdx           int32                `thrift:"slotIdx,9,required" frugal:"9,required,i32" json:"slotIdx"`
	IsMaterialized    bool                 `thrift:"isMaterialized,10,required" frugal:"10,required,bool" json:"isMaterialized"`
	ColUniqueId       int32                `thrift:"col_unique_id,11,optional" frugal:"11,optional,i32" json:"col_unique_id,omitempty"`
	IsKey             bool                 `thrift:"is_key,12,optional" frugal:"12,optional,bool" json:"is_key,omitempty"`
	NeedMaterialize   bool                 `thrift:"need_materialize,13,optional" frugal:"13,optional,bool" json:"need_materialize,omitempty"`
	IsAutoIncrement   bool                 `thrift:"is_auto_increment,14,optional" frugal:"14,optional,bool" json:"is_auto_increment,omitempty"`
	ColumnPaths       []string             `thrift:"column_paths,15,optional" frugal:"15,optional,list<string>" json:"column_paths,omitempty"`
	ColDefaultValue   *string              `thrift:"col_default_value,16,optional" frugal:"16,optional,string" json:"col_default_value,omitempty"`
	PrimitiveType     types.TPrimitiveType `thrift:"primitive_type,17,optional" frugal:"17,optional,TPrimitiveType" json:"primitive_type,omitempty"`
}

func NewTSlotDescriptor() *TSlotDescriptor {
	return &TSlotDescriptor{

		ColUniqueId:     -1,
		IsKey:           false,
		NeedMaterialize: true,
		IsAutoIncrement: false,
		PrimitiveType:   types.TPrimitiveType_INVALID_TYPE,
	}
}

func (p *TSlotDescriptor) InitDefault() {
	p.ColUniqueId = -1
	p.IsKey = false
	p.NeedMaterialize = true
	p.IsAutoIncrement = false
	p.PrimitiveType = types.TPrimitiveType_INVALID_TYPE
}

func (p *TSlotDescriptor) GetId() (v types.TSlotId) {
	return p.Id
}

func (p *TSlotDescriptor) GetParent() (v types.TTupleId) {
	return p.Parent
}

var TSlotDescriptor_SlotType_DEFAULT *types.TTypeDesc

func (p *TSlotDescriptor) GetSlotType() (v *types.TTypeDesc) {
	if !p.IsSetSlotType() {
		return TSlotDescriptor_SlotType_DEFAULT
	}
	return p.SlotType
}

func (p *TSlotDescriptor) GetColumnPos() (v int32) {
	return p.ColumnPos
}

func (p *TSlotDescriptor) GetByteOffset() (v int32) {
	return p.ByteOffset
}

func (p *TSlotDescriptor) GetNullIndicatorByte() (v int32) {
	return p.NullIndicatorByte
}

func (p *TSlotDescriptor) GetNullIndicatorBit() (v int32) {
	return p.NullIndicatorBit
}

func (p *TSlotDescriptor) GetColName() (v string) {
	return p.ColName
}

func (p *TSlotDescriptor) GetSlotIdx() (v int32) {
	return p.SlotIdx
}

func (p *TSlotDescriptor) GetIsMaterialized() (v bool) {
	return p.IsMaterialized
}

var TSlotDescriptor_ColUniqueId_DEFAULT int32 = -1

func (p *TSlotDescriptor) GetColUniqueId() (v int32) {
	if !p.IsSetColUniqueId() {
		return TSlotDescriptor_ColUniqueId_DEFAULT
	}
	return p.ColUniqueId
}

var TSlotDescriptor_IsKey_DEFAULT bool = false

func (p *TSlotDescriptor) GetIsKey() (v bool) {
	if !p.IsSetIsKey() {
		return TSlotDescriptor_IsKey_DEFAULT
	}
	return p.IsKey
}

var TSlotDescriptor_NeedMaterialize_DEFAULT bool = true

func (p *TSlotDescriptor) GetNeedMaterialize() (v bool) {
	if !p.IsSetNeedMaterialize() {
		return TSlotDescriptor_NeedMaterialize_DEFAULT
	}
	return p.NeedMaterialize
}

var TSlotDescriptor_IsAutoIncrement_DEFAULT bool = false

func (p *TSlotDescriptor) GetIsAutoIncrement() (v bool) {
	if !p.IsSetIsAutoIncrement() {
		return TSlotDescriptor_IsAutoIncrement_DEFAULT
	}
	return p.IsAutoIncrement
}

var TSlotDescriptor_ColumnPaths_DEFAULT []string

func (p *TSlotDescriptor) GetColumnPaths() (v []string) {
	if !p.IsSetColumnPaths() {
		return TSlotDescriptor_ColumnPaths_DEFAULT
	}
	return p.ColumnPaths
}

var TSlotDescriptor_ColDefaultValue_DEFAULT string

func (p *TSlotDescriptor) GetColDefaultValue() (v string) {
	if !p.IsSetColDefaultValue() {
		return TSlotDescriptor_ColDefaultValue_DEFAULT
	}
	return *p.ColDefaultValue
}

var TSlotDescriptor_PrimitiveType_DEFAULT types.TPrimitiveType = types.TPrimitiveType_INVALID_TYPE

func (p *TSlotDescriptor) GetPrimitiveType() (v types.TPrimitiveType) {
	if !p.IsSetPrimitiveType() {
		return TSlotDescriptor_PrimitiveType_DEFAULT
	}
	return p.PrimitiveType
}
func (p *TSlotDescriptor) SetId(val types.TSlotId) {
	p.Id = val
}
func (p *TSlotDescriptor) SetParent(val types.TTupleId) {
	p.Parent = val
}
func (p *TSlotDescriptor) SetSlotType(val *types.TTypeDesc) {
	p.SlotType = val
}
func (p *TSlotDescriptor) SetColumnPos(val int32) {
	p.ColumnPos = val
}
func (p *TSlotDescriptor) SetByteOffset(val int32) {
	p.ByteOffset = val
}
func (p *TSlotDescriptor) SetNullIndicatorByte(val int32) {
	p.NullIndicatorByte = val
}
func (p *TSlotDescriptor) SetNullIndicatorBit(val int32) {
	p.NullIndicatorBit = val
}
func (p *TSlotDescriptor) SetColName(val string) {
	p.ColName = val
}
func (p *TSlotDescriptor) SetSlotIdx(val int32) {
	p.SlotIdx = val
}
func (p *TSlotDescriptor) SetIsMaterialized(val bool) {
	p.IsMaterialized = val
}
func (p *TSlotDescriptor) SetColUniqueId(val int32) {
	p.ColUniqueId = val
}
func (p *TSlotDescriptor) SetIsKey(val bool) {
	p.IsKey = val
}
func (p *TSlotDescriptor) SetNeedMaterialize(val bool) {
	p.NeedMaterialize = val
}
func (p *TSlotDescriptor) SetIsAutoIncrement(val bool) {
	p.IsAutoIncrement = val
}
func (p *TSlotDescriptor) SetColumnPaths(val []string) {
	p.ColumnPaths = val
}
func (p *TSlotDescriptor) SetColDefaultValue(val *string) {
	p.ColDefaultValue = val
}
func (p *TSlotDescriptor) SetPrimitiveType(val types.TPrimitiveType) {
	p.PrimitiveType = val
}

var fieldIDToName_TSlotDescriptor = map[int16]string{
	1:  "id",
	2:  "parent",
	3:  "slotType",
	4:  "columnPos",
	5:  "byteOffset",
	6:  "nullIndicatorByte",
	7:  "nullIndicatorBit",
	8:  "colName",
	9:  "slotIdx",
	10: "isMaterialized",
	11: "col_unique_id",
	12: "is_key",
	13: "need_materialize",
	14: "is_auto_increment",
	15: "column_paths",
	16: "col_default_value",
	17: "primitive_type",
}

func (p *TSlotDescriptor) IsSetSlotType() bool {
	return p.SlotType != nil
}

func (p *TSlotDescriptor) IsSetColUniqueId() bool {
	return p.ColUniqueId != TSlotDescriptor_ColUniqueId_DEFAULT
}

func (p *TSlotDescriptor) IsSetIsKey() bool {
	return p.IsKey != TSlotDescriptor_IsKey_DEFAULT
}

func (p *TSlotDescriptor) IsSetNeedMaterialize() bool {
	return p.NeedMaterialize != TSlotDescriptor_NeedMaterialize_DEFAULT
}

func (p *TSlotDescriptor) IsSetIsAutoIncrement() bool {
	return p.IsAutoIncrement != TSlotDescriptor_IsAutoIncrement_DEFAULT
}

func (p *TSlotDescriptor) IsSetColumnPaths() bool {
	return p.ColumnPaths != nil
}

func (p *TSlotDescriptor) IsSetColDefaultValue() bool {
	return p.ColDefaultValue != nil
}

func (p *TSlotDescriptor) IsSetPrimitiveType() bool {
	return p.PrimitiveType != TSlotDescriptor_PrimitiveType_DEFAULT
}

func (p *TSlotDescriptor) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetParent bool = false
	var issetSlotType bool = false
	var issetColumnPos bool = false
	var issetByteOffset bool = false
	var issetNullIndicatorByte bool = false
	var issetNullIndicatorBit bool = false
	var issetColName bool = false
	var issetSlotIdx bool = false
	var issetIsMaterialized bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetParent = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSlotType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumnPos = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetByteOffset = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetNullIndicatorByte = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetNullIndicatorBit = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetColName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetSlotIdx = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsMaterialized = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetParent {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSlotType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetColumnPos {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetByteOffset {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetNullIndicatorByte {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetNullIndicatorBit {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetColName {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetSlotIdx {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetIsMaterialized {
		fieldId = 10
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TSlotDescriptor[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TSlotDescriptor[fieldId]))
}

func (p *TSlotDescriptor) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TSlotId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *TSlotDescriptor) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Parent = _field
	return nil
}
func (p *TSlotDescriptor) ReadField3(iprot thrift.TProtocol) error {
	_field := types.NewTTypeDesc()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SlotType = _field
	return nil
}
func (p *TSlotDescriptor) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ColumnPos = _field
	return nil
}
func (p *TSlotDescriptor) ReadField5(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ByteOffset = _field
	return nil
}
func (p *TSlotDescriptor) ReadField6(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NullIndicatorByte = _field
	return nil
}
func (p *TSlotDescriptor) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NullIndicatorBit = _field
	return nil
}
func (p *TSlotDescriptor) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ColName = _field
	return nil
}
func (p *TSlotDescriptor) ReadField9(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SlotIdx = _field
	return nil
}
func (p *TSlotDescriptor) ReadField10(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsMaterialized = _field
	return nil
}
func (p *TSlotDescriptor) ReadField11(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ColUniqueId = _field
	return nil
}
func (p *TSlotDescriptor) ReadField12(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsKey = _field
	return nil
}
func (p *TSlotDescriptor) ReadField13(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NeedMaterialize = _field
	return nil
}
func (p *TSlotDescriptor) ReadField14(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsAutoIncrement = _field
	return nil
}
func (p *TSlotDescriptor) ReadField15(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnPaths = _field
	return nil
}
func (p *TSlotDescriptor) ReadField16(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ColDefaultValue = _field
	return nil
}
func (p *TSlotDescriptor) ReadField17(iprot thrift.TProtocol) error {

	var _field types.TPrimitiveType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TPrimitiveType(v)
	}
	p.PrimitiveType = _field
	return nil
}

func (p *TSlotDescriptor) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TSlotDescriptor"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TSlotDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TSlotDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("parent", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Parent); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TSlotDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("slotType", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.SlotType.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TSlotDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columnPos", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ColumnPos); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TSlotDescriptor) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("byteOffset", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ByteOffset); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TSlotDescriptor) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nullIndicatorByte", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NullIndicatorByte); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TSlotDescriptor) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nullIndicatorBit", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NullIndicatorBit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TSlotDescriptor) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("colName", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ColName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TSlotDescriptor) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("slotIdx", thrift.I32, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SlotIdx); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TSlotDescriptor) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("isMaterialized", thrift.BOOL, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsMaterialized); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TSlotDescriptor) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetColUniqueId() {
		if err = oprot.WriteFieldBegin("col_unique_id", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.ColUniqueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TSlotDescriptor) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsKey() {
		if err = oprot.WriteFieldBegin("is_key", thrift.BOOL, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TSlotDescriptor) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetNeedMaterialize() {
		if err = oprot.WriteFieldBegin("need_materialize", thrift.BOOL, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.NeedMaterialize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TSlotDescriptor) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsAutoIncrement() {
		if err = oprot.WriteFieldBegin("is_auto_increment", thrift.BOOL, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsAutoIncrement); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TSlotDescriptor) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnPaths() {
		if err = oprot.WriteFieldBegin("column_paths", thrift.LIST, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ColumnPaths)); err != nil {
			return err
		}
		for _, v := range p.ColumnPaths {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TSlotDescriptor) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetColDefaultValue() {
		if err = oprot.WriteFieldBegin("col_default_value", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ColDefaultValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TSlotDescriptor) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrimitiveType() {
		if err = oprot.WriteFieldBegin("primitive_type", thrift.I32, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(p.PrimitiveType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TSlotDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSlotDescriptor(%+v)", *p)

}

func (p *TSlotDescriptor) DeepEqual(ano *TSlotDescriptor) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Parent) {
		return false
	}
	if !p.Field3DeepEqual(ano.SlotType) {
		return false
	}
	if !p.Field4DeepEqual(ano.ColumnPos) {
		return false
	}
	if !p.Field5DeepEqual(ano.ByteOffset) {
		return false
	}
	if !p.Field6DeepEqual(ano.NullIndicatorByte) {
		return false
	}
	if !p.Field7DeepEqual(ano.NullIndicatorBit) {
		return false
	}
	if !p.Field8DeepEqual(ano.ColName) {
		return false
	}
	if !p.Field9DeepEqual(ano.SlotIdx) {
		return false
	}
	if !p.Field10DeepEqual(ano.IsMaterialized) {
		return false
	}
	if !p.Field11DeepEqual(ano.ColUniqueId) {
		return false
	}
	if !p.Field12DeepEqual(ano.IsKey) {
		return false
	}
	if !p.Field13DeepEqual(ano.NeedMaterialize) {
		return false
	}
	if !p.Field14DeepEqual(ano.IsAutoIncrement) {
		return false
	}
	if !p.Field15DeepEqual(ano.ColumnPaths) {
		return false
	}
	if !p.Field16DeepEqual(ano.ColDefaultValue) {
		return false
	}
	if !p.Field17DeepEqual(ano.PrimitiveType) {
		return false
	}
	return true
}

func (p *TSlotDescriptor) Field1DeepEqual(src types.TSlotId) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *TSlotDescriptor) Field2DeepEqual(src types.TTupleId) bool {

	if p.Parent != src {
		return false
	}
	return true
}
func (p *TSlotDescriptor) Field3DeepEqual(src *types.TTypeDesc) bool {

	if !p.SlotType.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TSlotDescriptor) Field4DeepEqual(src int32) bool {

	if p.ColumnPos != src {
		return false
	}
	return true
}
func (p *TSlotDescriptor) Field5DeepEqual(src int32) bool {

	if p.ByteOffset != src {
		return false
	}
	return true
}
func (p *TSlotDescriptor) Field6DeepEqual(src int32) bool {

	if p.NullIndicatorByte != src {
		return false
	}
	return true
}
func (p *TSlotDescriptor) Field7DeepEqual(src int32) bool {

	if p.NullIndicatorBit != src {
		return false
	}
	return true
}
func (p *TSlotDescriptor) Field8DeepEqual(src string) bool {

	if strings.Compare(p.ColName, src) != 0 {
		return false
	}
	return true
}
func (p *TSlotDescriptor) Field9DeepEqual(src int32) bool {

	if p.SlotIdx != src {
		return false
	}
	return true
}
func (p *TSlotDescriptor) Field10DeepEqual(src bool) bool {

	if p.IsMaterialized != src {
		return false
	}
	return true
}
func (p *TSlotDescriptor) Field11DeepEqual(src int32) bool {

	if p.ColUniqueId != src {
		return false
	}
	return true
}
func (p *TSlotDescriptor) Field12DeepEqual(src bool) bool {

	if p.IsKey != src {
		return false
	}
	return true
}
func (p *TSlotDescriptor) Field13DeepEqual(src bool) bool {

	if p.NeedMaterialize != src {
		return false
	}
	return true
}
func (p *TSlotDescriptor) Field14DeepEqual(src bool) bool {

	if p.IsAutoIncrement != src {
		return false
	}
	return true
}
func (p *TSlotDescriptor) Field15DeepEqual(src []string) bool {

	if len(p.ColumnPaths) != len(src) {
		return false
	}
	for i, v := range p.ColumnPaths {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TSlotDescriptor) Field16DeepEqual(src *string) bool {

	if p.ColDefaultValue == src {
		return true
	} else if p.ColDefaultValue == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ColDefaultValue, *src) != 0 {
		return false
	}
	return true
}
func (p *TSlotDescriptor) Field17DeepEqual(src types.TPrimitiveType) bool {

	if p.PrimitiveType != src {
		return false
	}
	return true
}

type TTupleDescriptor struct {
	Id           types.TTupleId  `thrift:"id,1,required" frugal:"1,required,i32" json:"id"`
	ByteSize     int32           `thrift:"byteSize,2,required" frugal:"2,required,i32" json:"byteSize"`
	NumNullBytes int32           `thrift:"numNullBytes,3,required" frugal:"3,required,i32" json:"numNullBytes"`
	TableId      *types.TTableId `thrift:"tableId,4,optional" frugal:"4,optional,i64" json:"tableId,omitempty"`
	NumNullSlots *int32          `thrift:"numNullSlots,5,optional" frugal:"5,optional,i32" json:"numNullSlots,omitempty"`
}

func NewTTupleDescriptor() *TTupleDescriptor {
	return &TTupleDescriptor{}
}

func (p *TTupleDescriptor) InitDefault() {
}

func (p *TTupleDescriptor) GetId() (v types.TTupleId) {
	return p.Id
}

func (p *TTupleDescriptor) GetByteSize() (v int32) {
	return p.ByteSize
}

func (p *TTupleDescriptor) GetNumNullBytes() (v int32) {
	return p.NumNullBytes
}

var TTupleDescriptor_TableId_DEFAULT types.TTableId

func (p *TTupleDescriptor) GetTableId() (v types.TTableId) {
	if !p.IsSetTableId() {
		return TTupleDescriptor_TableId_DEFAULT
	}
	return *p.TableId
}

var TTupleDescriptor_NumNullSlots_DEFAULT int32

func (p *TTupleDescriptor) GetNumNullSlots() (v int32) {
	if !p.IsSetNumNullSlots() {
		return TTupleDescriptor_NumNullSlots_DEFAULT
	}
	return *p.NumNullSlots
}
func (p *TTupleDescriptor) SetId(val types.TTupleId) {
	p.Id = val
}
func (p *TTupleDescriptor) SetByteSize(val int32) {
	p.ByteSize = val
}
func (p *TTupleDescriptor) SetNumNullBytes(val int32) {
	p.NumNullBytes = val
}
func (p *TTupleDescriptor) SetTableId(val *types.TTableId) {
	p.TableId = val
}
func (p *TTupleDescriptor) SetNumNullSlots(val *int32) {
	p.NumNullSlots = val
}

var fieldIDToName_TTupleDescriptor = map[int16]string{
	1: "id",
	2: "byteSize",
	3: "numNullBytes",
	4: "tableId",
	5: "numNullSlots",
}

func (p *TTupleDescriptor) IsSetTableId() bool {
	return p.TableId != nil
}

func (p *TTupleDescriptor) IsSetNumNullSlots() bool {
	return p.NumNullSlots != nil
}

func (p *TTupleDescriptor) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetByteSize bool = false
	var issetNumNullBytes bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetByteSize = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetNumNullBytes = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetByteSize {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetNumNullBytes {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTupleDescriptor[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTupleDescriptor[fieldId]))
}

func (p *TTupleDescriptor) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *TTupleDescriptor) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ByteSize = _field
	return nil
}
func (p *TTupleDescriptor) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumNullBytes = _field
	return nil
}
func (p *TTupleDescriptor) ReadField4(iprot thrift.TProtocol) error {

	var _field *types.TTableId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableId = _field
	return nil
}
func (p *TTupleDescriptor) ReadField5(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NumNullSlots = _field
	return nil
}

func (p *TTupleDescriptor) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTupleDescriptor"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTupleDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTupleDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("byteSize", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ByteSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTupleDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("numNullBytes", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NumNullBytes); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTupleDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err = oprot.WriteFieldBegin("tableId", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TTupleDescriptor) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumNullSlots() {
		if err = oprot.WriteFieldBegin("numNullSlots", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.NumNullSlots); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TTupleDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTupleDescriptor(%+v)", *p)

}

func (p *TTupleDescriptor) DeepEqual(ano *TTupleDescriptor) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.ByteSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.NumNullBytes) {
		return false
	}
	if !p.Field4DeepEqual(ano.TableId) {
		return false
	}
	if !p.Field5DeepEqual(ano.NumNullSlots) {
		return false
	}
	return true
}

func (p *TTupleDescriptor) Field1DeepEqual(src types.TTupleId) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *TTupleDescriptor) Field2DeepEqual(src int32) bool {

	if p.ByteSize != src {
		return false
	}
	return true
}
func (p *TTupleDescriptor) Field3DeepEqual(src int32) bool {

	if p.NumNullBytes != src {
		return false
	}
	return true
}
func (p *TTupleDescriptor) Field4DeepEqual(src *types.TTableId) bool {

	if p.TableId == src {
		return true
	} else if p.TableId == nil || src == nil {
		return false
	}
	if *p.TableId != *src {
		return false
	}
	return true
}
func (p *TTupleDescriptor) Field5DeepEqual(src *int32) bool {

	if p.NumNullSlots == src {
		return true
	} else if p.NumNullSlots == nil || src == nil {
		return false
	}
	if *p.NumNullSlots != *src {
		return false
	}
	return true
}

type TOlapTableIndexTablets struct {
	IndexId int64   `thrift:"index_id,1,required" frugal:"1,required,i64" json:"index_id"`
	Tablets []int64 `thrift:"tablets,2,required" frugal:"2,required,list<i64>" json:"tablets"`
}

func NewTOlapTableIndexTablets() *TOlapTableIndexTablets {
	return &TOlapTableIndexTablets{}
}

func (p *TOlapTableIndexTablets) InitDefault() {
}

func (p *TOlapTableIndexTablets) GetIndexId() (v int64) {
	return p.IndexId
}

func (p *TOlapTableIndexTablets) GetTablets() (v []int64) {
	return p.Tablets
}
func (p *TOlapTableIndexTablets) SetIndexId(val int64) {
	p.IndexId = val
}
func (p *TOlapTableIndexTablets) SetTablets(val []int64) {
	p.Tablets = val
}

var fieldIDToName_TOlapTableIndexTablets = map[int16]string{
	1: "index_id",
	2: "tablets",
}

func (p *TOlapTableIndexTablets) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetIndexId bool = false
	var issetTablets bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetIndexId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTablets = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetIndexId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTablets {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TOlapTableIndexTablets[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TOlapTableIndexTablets[fieldId]))
}

func (p *TOlapTableIndexTablets) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IndexId = _field
	return nil
}
func (p *TOlapTableIndexTablets) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tablets = _field
	return nil
}

func (p *TOlapTableIndexTablets) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TOlapTableIndexTablets"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TOlapTableIndexTablets) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("index_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.IndexId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TOlapTableIndexTablets) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablets", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Tablets)); err != nil {
		return err
	}
	for _, v := range p.Tablets {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TOlapTableIndexTablets) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TOlapTableIndexTablets(%+v)", *p)

}

func (p *TOlapTableIndexTablets) DeepEqual(ano *TOlapTableIndexTablets) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IndexId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Tablets) {
		return false
	}
	return true
}

func (p *TOlapTableIndexTablets) Field1DeepEqual(src int64) bool {

	if p.IndexId != src {
		return false
	}
	return true
}
func (p *TOlapTableIndexTablets) Field2DeepEqual(src []int64) bool {

	if len(p.Tablets) != len(src) {
		return false
	}
	for i, v := range p.Tablets {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type TOlapTablePartition struct {
	Id                 int64                     `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	StartKey           *exprs.TExprNode          `thrift:"start_key,2,optional" frugal:"2,optional,exprs.TExprNode" json:"start_key,omitempty"`
	EndKey             *exprs.TExprNode          `thrift:"end_key,3,optional" frugal:"3,optional,exprs.TExprNode" json:"end_key,omitempty"`
	NumBuckets         int32                     `thrift:"num_buckets,4,required" frugal:"4,required,i32" json:"num_buckets"`
	Indexes            []*TOlapTableIndexTablets `thrift:"indexes,5,required" frugal:"5,required,list<TOlapTableIndexTablets>" json:"indexes"`
	StartKeys          []*exprs.TExprNode        `thrift:"start_keys,6,optional" frugal:"6,optional,list<exprs.TExprNode>" json:"start_keys,omitempty"`
	EndKeys            []*exprs.TExprNode        `thrift:"end_keys,7,optional" frugal:"7,optional,list<exprs.TExprNode>" json:"end_keys,omitempty"`
	InKeys             [][]*exprs.TExprNode      `thrift:"in_keys,8,optional" frugal:"8,optional,list<list<exprs.TExprNode>>" json:"in_keys,omitempty"`
	IsMutable          bool                      `thrift:"is_mutable,9,optional" frugal:"9,optional,bool" json:"is_mutable,omitempty"`
	IsDefaultPartition *bool                     `thrift:"is_default_partition,10,optional" frugal:"10,optional,bool" json:"is_default_partition,omitempty"`
	LoadTabletIdx      *int64                    `thrift:"load_tablet_idx,11,optional" frugal:"11,optional,i64" json:"load_tablet_idx,omitempty"`
}

func NewTOlapTablePartition() *TOlapTablePartition {
	return &TOlapTablePartition{

		IsMutable: true,
	}
}

func (p *TOlapTablePartition) InitDefault() {
	p.IsMutable = true
}

func (p *TOlapTablePartition) GetId() (v int64) {
	return p.Id
}

var TOlapTablePartition_StartKey_DEFAULT *exprs.TExprNode

func (p *TOlapTablePartition) GetStartKey() (v *exprs.TExprNode) {
	if !p.IsSetStartKey() {
		return TOlapTablePartition_StartKey_DEFAULT
	}
	return p.StartKey
}

var TOlapTablePartition_EndKey_DEFAULT *exprs.TExprNode

func (p *TOlapTablePartition) GetEndKey() (v *exprs.TExprNode) {
	if !p.IsSetEndKey() {
		return TOlapTablePartition_EndKey_DEFAULT
	}
	return p.EndKey
}

func (p *TOlapTablePartition) GetNumBuckets() (v int32) {
	return p.NumBuckets
}

func (p *TOlapTablePartition) GetIndexes() (v []*TOlapTableIndexTablets) {
	return p.Indexes
}

var TOlapTablePartition_StartKeys_DEFAULT []*exprs.TExprNode

func (p *TOlapTablePartition) GetStartKeys() (v []*exprs.TExprNode) {
	if !p.IsSetStartKeys() {
		return TOlapTablePartition_StartKeys_DEFAULT
	}
	return p.StartKeys
}

var TOlapTablePartition_EndKeys_DEFAULT []*exprs.TExprNode

func (p *TOlapTablePartition) GetEndKeys() (v []*exprs.TExprNode) {
	if !p.IsSetEndKeys() {
		return TOlapTablePartition_EndKeys_DEFAULT
	}
	return p.EndKeys
}

var TOlapTablePartition_InKeys_DEFAULT [][]*exprs.TExprNode

func (p *TOlapTablePartition) GetInKeys() (v [][]*exprs.TExprNode) {
	if !p.IsSetInKeys() {
		return TOlapTablePartition_InKeys_DEFAULT
	}
	return p.InKeys
}

var TOlapTablePartition_IsMutable_DEFAULT bool = true

func (p *TOlapTablePartition) GetIsMutable() (v bool) {
	if !p.IsSetIsMutable() {
		return TOlapTablePartition_IsMutable_DEFAULT
	}
	return p.IsMutable
}

var TOlapTablePartition_IsDefaultPartition_DEFAULT bool

func (p *TOlapTablePartition) GetIsDefaultPartition() (v bool) {
	if !p.IsSetIsDefaultPartition() {
		return TOlapTablePartition_IsDefaultPartition_DEFAULT
	}
	return *p.IsDefaultPartition
}

var TOlapTablePartition_LoadTabletIdx_DEFAULT int64

func (p *TOlapTablePartition) GetLoadTabletIdx() (v int64) {
	if !p.IsSetLoadTabletIdx() {
		return TOlapTablePartition_LoadTabletIdx_DEFAULT
	}
	return *p.LoadTabletIdx
}
func (p *TOlapTablePartition) SetId(val int64) {
	p.Id = val
}
func (p *TOlapTablePartition) SetStartKey(val *exprs.TExprNode) {
	p.StartKey = val
}
func (p *TOlapTablePartition) SetEndKey(val *exprs.TExprNode) {
	p.EndKey = val
}
func (p *TOlapTablePartition) SetNumBuckets(val int32) {
	p.NumBuckets = val
}
func (p *TOlapTablePartition) SetIndexes(val []*TOlapTableIndexTablets) {
	p.Indexes = val
}
func (p *TOlapTablePartition) SetStartKeys(val []*exprs.TExprNode) {
	p.StartKeys = val
}
func (p *TOlapTablePartition) SetEndKeys(val []*exprs.TExprNode) {
	p.EndKeys = val
}
func (p *TOlapTablePartition) SetInKeys(val [][]*exprs.TExprNode) {
	p.InKeys = val
}
func (p *TOlapTablePartition) SetIsMutable(val bool) {
	p.IsMutable = val
}
func (p *TOlapTablePartition) SetIsDefaultPartition(val *bool) {
	p.IsDefaultPartition = val
}
func (p *TOlapTablePartition) SetLoadTabletIdx(val *int64) {
	p.LoadTabletIdx = val
}

var fieldIDToName_TOlapTablePartition = map[int16]string{
	1:  "id",
	2:  "start_key",
	3:  "end_key",
	4:  "num_buckets",
	5:  "indexes",
	6:  "start_keys",
	7:  "end_keys",
	8:  "in_keys",
	9:  "is_mutable",
	10: "is_default_partition",
	11: "load_tablet_idx",
}

func (p *TOlapTablePartition) IsSetStartKey() bool {
	return p.StartKey != nil
}

func (p *TOlapTablePartition) IsSetEndKey() bool {
	return p.EndKey != nil
}

func (p *TOlapTablePartition) IsSetStartKeys() bool {
	return p.StartKeys != nil
}

func (p *TOlapTablePartition) IsSetEndKeys() bool {
	return p.EndKeys != nil
}

func (p *TOlapTablePartition) IsSetInKeys() bool {
	return p.InKeys != nil
}

func (p *TOlapTablePartition) IsSetIsMutable() bool {
	return p.IsMutable != TOlapTablePartition_IsMutable_DEFAULT
}

func (p *TOlapTablePartition) IsSetIsDefaultPartition() bool {
	return p.IsDefaultPartition != nil
}

func (p *TOlapTablePartition) IsSetLoadTabletIdx() bool {
	return p.LoadTabletIdx != nil
}

func (p *TOlapTablePartition) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetNumBuckets bool = false
	var issetIndexes bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetNumBuckets = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetIndexes = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNumBuckets {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetIndexes {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TOlapTablePartition[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TOlapTablePartition[fieldId]))
}

func (p *TOlapTablePartition) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *TOlapTablePartition) ReadField2(iprot thrift.TProtocol) error {
	_field := exprs.NewTExprNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.StartKey = _field
	return nil
}
func (p *TOlapTablePartition) ReadField3(iprot thrift.TProtocol) error {
	_field := exprs.NewTExprNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EndKey = _field
	return nil
}
func (p *TOlapTablePartition) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumBuckets = _field
	return nil
}
func (p *TOlapTablePartition) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TOlapTableIndexTablets, 0, size)
	values := make([]TOlapTableIndexTablets, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Indexes = _field
	return nil
}
func (p *TOlapTablePartition) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExprNode, 0, size)
	values := make([]exprs.TExprNode, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.StartKeys = _field
	return nil
}
func (p *TOlapTablePartition) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExprNode, 0, size)
	values := make([]exprs.TExprNode, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EndKeys = _field
	return nil
}
func (p *TOlapTablePartition) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]*exprs.TExprNode, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]*exprs.TExprNode, 0, size)
		values := make([]exprs.TExprNode, size)
		for i := 0; i < size; i++ {
			_elem1 := &values[i]
			_elem1.InitDefault()

			if err := _elem1.Read(iprot); err != nil {
				return err
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.InKeys = _field
	return nil
}
func (p *TOlapTablePartition) ReadField9(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsMutable = _field
	return nil
}
func (p *TOlapTablePartition) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsDefaultPartition = _field
	return nil
}
func (p *TOlapTablePartition) ReadField11(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LoadTabletIdx = _field
	return nil
}

func (p *TOlapTablePartition) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TOlapTablePartition"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TOlapTablePartition) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TOlapTablePartition) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartKey() {
		if err = oprot.WriteFieldBegin("start_key", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.StartKey.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TOlapTablePartition) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndKey() {
		if err = oprot.WriteFieldBegin("end_key", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EndKey.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TOlapTablePartition) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("num_buckets", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NumBuckets); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TOlapTablePartition) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("indexes", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Indexes)); err != nil {
		return err
	}
	for _, v := range p.Indexes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TOlapTablePartition) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartKeys() {
		if err = oprot.WriteFieldBegin("start_keys", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StartKeys)); err != nil {
			return err
		}
		for _, v := range p.StartKeys {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TOlapTablePartition) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndKeys() {
		if err = oprot.WriteFieldBegin("end_keys", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EndKeys)); err != nil {
			return err
		}
		for _, v := range p.EndKeys {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TOlapTablePartition) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetInKeys() {
		if err = oprot.WriteFieldBegin("in_keys", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.LIST, len(p.InKeys)); err != nil {
			return err
		}
		for _, v := range p.InKeys {
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TOlapTablePartition) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsMutable() {
		if err = oprot.WriteFieldBegin("is_mutable", thrift.BOOL, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsMutable); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TOlapTablePartition) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsDefaultPartition() {
		if err = oprot.WriteFieldBegin("is_default_partition", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsDefaultPartition); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TOlapTablePartition) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadTabletIdx() {
		if err = oprot.WriteFieldBegin("load_tablet_idx", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LoadTabletIdx); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TOlapTablePartition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TOlapTablePartition(%+v)", *p)

}

func (p *TOlapTablePartition) DeepEqual(ano *TOlapTablePartition) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.StartKey) {
		return false
	}
	if !p.Field3DeepEqual(ano.EndKey) {
		return false
	}
	if !p.Field4DeepEqual(ano.NumBuckets) {
		return false
	}
	if !p.Field5DeepEqual(ano.Indexes) {
		return false
	}
	if !p.Field6DeepEqual(ano.StartKeys) {
		return false
	}
	if !p.Field7DeepEqual(ano.EndKeys) {
		return false
	}
	if !p.Field8DeepEqual(ano.InKeys) {
		return false
	}
	if !p.Field9DeepEqual(ano.IsMutable) {
		return false
	}
	if !p.Field10DeepEqual(ano.IsDefaultPartition) {
		return false
	}
	if !p.Field11DeepEqual(ano.LoadTabletIdx) {
		return false
	}
	return true
}

func (p *TOlapTablePartition) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *TOlapTablePartition) Field2DeepEqual(src *exprs.TExprNode) bool {

	if !p.StartKey.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TOlapTablePartition) Field3DeepEqual(src *exprs.TExprNode) bool {

	if !p.EndKey.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TOlapTablePartition) Field4DeepEqual(src int32) bool {

	if p.NumBuckets != src {
		return false
	}
	return true
}
func (p *TOlapTablePartition) Field5DeepEqual(src []*TOlapTableIndexTablets) bool {

	if len(p.Indexes) != len(src) {
		return false
	}
	for i, v := range p.Indexes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TOlapTablePartition) Field6DeepEqual(src []*exprs.TExprNode) bool {

	if len(p.StartKeys) != len(src) {
		return false
	}
	for i, v := range p.StartKeys {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TOlapTablePartition) Field7DeepEqual(src []*exprs.TExprNode) bool {

	if len(p.EndKeys) != len(src) {
		return false
	}
	for i, v := range p.EndKeys {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TOlapTablePartition) Field8DeepEqual(src [][]*exprs.TExprNode) bool {

	if len(p.InKeys) != len(src) {
		return false
	}
	for i, v := range p.InKeys {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *TOlapTablePartition) Field9DeepEqual(src bool) bool {

	if p.IsMutable != src {
		return false
	}
	return true
}
func (p *TOlapTablePartition) Field10DeepEqual(src *bool) bool {

	if p.IsDefaultPartition == src {
		return true
	} else if p.IsDefaultPartition == nil || src == nil {
		return false
	}
	if *p.IsDefaultPartition != *src {
		return false
	}
	return true
}
func (p *TOlapTablePartition) Field11DeepEqual(src *int64) bool {

	if p.LoadTabletIdx == src {
		return true
	} else if p.LoadTabletIdx == nil || src == nil {
		return false
	}
	if *p.LoadTabletIdx != *src {
		return false
	}
	return true
}

type TOlapTablePartitionParam struct {
	DbId                      int64                      `thrift:"db_id,1,required" frugal:"1,required,i64" json:"db_id"`
	TableId                   int64                      `thrift:"table_id,2,required" frugal:"2,required,i64" json:"table_id"`
	Version                   int64                      `thrift:"version,3,required" frugal:"3,required,i64" json:"version"`
	PartitionColumn           *string                    `thrift:"partition_column,4,optional" frugal:"4,optional,string" json:"partition_column,omitempty"`
	DistributedColumns        []string                   `thrift:"distributed_columns,5,optional" frugal:"5,optional,list<string>" json:"distributed_columns,omitempty"`
	Partitions                []*TOlapTablePartition     `thrift:"partitions,6,required" frugal:"6,required,list<TOlapTablePartition>" json:"partitions"`
	PartitionColumns          []string                   `thrift:"partition_columns,7,optional" frugal:"7,optional,list<string>" json:"partition_columns,omitempty"`
	PartitionFunctionExprs    []*exprs.TExpr             `thrift:"partition_function_exprs,8,optional" frugal:"8,optional,list<exprs.TExpr>" json:"partition_function_exprs,omitempty"`
	EnableAutomaticPartition  *bool                      `thrift:"enable_automatic_partition,9,optional" frugal:"9,optional,bool" json:"enable_automatic_partition,omitempty"`
	PartitionType             *partitions.TPartitionType `thrift:"partition_type,10,optional" frugal:"10,optional,TPartitionType" json:"partition_type,omitempty"`
	EnableAutoDetectOverwrite *bool                      `thrift:"enable_auto_detect_overwrite,11,optional" frugal:"11,optional,bool" json:"enable_auto_detect_overwrite,omitempty"`
	OverwriteGroupId          *int64                     `thrift:"overwrite_group_id,12,optional" frugal:"12,optional,i64" json:"overwrite_group_id,omitempty"`
	PartitionsIsFake          bool                       `thrift:"partitions_is_fake,13,optional" frugal:"13,optional,bool" json:"partitions_is_fake,omitempty"`
}

func NewTOlapTablePartitionParam() *TOlapTablePartitionParam {
	return &TOlapTablePartitionParam{

		PartitionsIsFake: false,
	}
}

func (p *TOlapTablePartitionParam) InitDefault() {
	p.PartitionsIsFake = false
}

func (p *TOlapTablePartitionParam) GetDbId() (v int64) {
	return p.DbId
}

func (p *TOlapTablePartitionParam) GetTableId() (v int64) {
	return p.TableId
}

func (p *TOlapTablePartitionParam) GetVersion() (v int64) {
	return p.Version
}

var TOlapTablePartitionParam_PartitionColumn_DEFAULT string

func (p *TOlapTablePartitionParam) GetPartitionColumn() (v string) {
	if !p.IsSetPartitionColumn() {
		return TOlapTablePartitionParam_PartitionColumn_DEFAULT
	}
	return *p.PartitionColumn
}

var TOlapTablePartitionParam_DistributedColumns_DEFAULT []string

func (p *TOlapTablePartitionParam) GetDistributedColumns() (v []string) {
	if !p.IsSetDistributedColumns() {
		return TOlapTablePartitionParam_DistributedColumns_DEFAULT
	}
	return p.DistributedColumns
}

func (p *TOlapTablePartitionParam) GetPartitions() (v []*TOlapTablePartition) {
	return p.Partitions
}

var TOlapTablePartitionParam_PartitionColumns_DEFAULT []string

func (p *TOlapTablePartitionParam) GetPartitionColumns() (v []string) {
	if !p.IsSetPartitionColumns() {
		return TOlapTablePartitionParam_PartitionColumns_DEFAULT
	}
	return p.PartitionColumns
}

var TOlapTablePartitionParam_PartitionFunctionExprs_DEFAULT []*exprs.TExpr

func (p *TOlapTablePartitionParam) GetPartitionFunctionExprs() (v []*exprs.TExpr) {
	if !p.IsSetPartitionFunctionExprs() {
		return TOlapTablePartitionParam_PartitionFunctionExprs_DEFAULT
	}
	return p.PartitionFunctionExprs
}

var TOlapTablePartitionParam_EnableAutomaticPartition_DEFAULT bool

func (p *TOlapTablePartitionParam) GetEnableAutomaticPartition() (v bool) {
	if !p.IsSetEnableAutomaticPartition() {
		return TOlapTablePartitionParam_EnableAutomaticPartition_DEFAULT
	}
	return *p.EnableAutomaticPartition
}

var TOlapTablePartitionParam_PartitionType_DEFAULT partitions.TPartitionType

func (p *TOlapTablePartitionParam) GetPartitionType() (v partitions.TPartitionType) {
	if !p.IsSetPartitionType() {
		return TOlapTablePartitionParam_PartitionType_DEFAULT
	}
	return *p.PartitionType
}

var TOlapTablePartitionParam_EnableAutoDetectOverwrite_DEFAULT bool

func (p *TOlapTablePartitionParam) GetEnableAutoDetectOverwrite() (v bool) {
	if !p.IsSetEnableAutoDetectOverwrite() {
		return TOlapTablePartitionParam_EnableAutoDetectOverwrite_DEFAULT
	}
	return *p.EnableAutoDetectOverwrite
}

var TOlapTablePartitionParam_OverwriteGroupId_DEFAULT int64

func (p *TOlapTablePartitionParam) GetOverwriteGroupId() (v int64) {
	if !p.IsSetOverwriteGroupId() {
		return TOlapTablePartitionParam_OverwriteGroupId_DEFAULT
	}
	return *p.OverwriteGroupId
}

var TOlapTablePartitionParam_PartitionsIsFake_DEFAULT bool = false

func (p *TOlapTablePartitionParam) GetPartitionsIsFake() (v bool) {
	if !p.IsSetPartitionsIsFake() {
		return TOlapTablePartitionParam_PartitionsIsFake_DEFAULT
	}
	return p.PartitionsIsFake
}
func (p *TOlapTablePartitionParam) SetDbId(val int64) {
	p.DbId = val
}
func (p *TOlapTablePartitionParam) SetTableId(val int64) {
	p.TableId = val
}
func (p *TOlapTablePartitionParam) SetVersion(val int64) {
	p.Version = val
}
func (p *TOlapTablePartitionParam) SetPartitionColumn(val *string) {
	p.PartitionColumn = val
}
func (p *TOlapTablePartitionParam) SetDistributedColumns(val []string) {
	p.DistributedColumns = val
}
func (p *TOlapTablePartitionParam) SetPartitions(val []*TOlapTablePartition) {
	p.Partitions = val
}
func (p *TOlapTablePartitionParam) SetPartitionColumns(val []string) {
	p.PartitionColumns = val
}
func (p *TOlapTablePartitionParam) SetPartitionFunctionExprs(val []*exprs.TExpr) {
	p.PartitionFunctionExprs = val
}
func (p *TOlapTablePartitionParam) SetEnableAutomaticPartition(val *bool) {
	p.EnableAutomaticPartition = val
}
func (p *TOlapTablePartitionParam) SetPartitionType(val *partitions.TPartitionType) {
	p.PartitionType = val
}
func (p *TOlapTablePartitionParam) SetEnableAutoDetectOverwrite(val *bool) {
	p.EnableAutoDetectOverwrite = val
}
func (p *TOlapTablePartitionParam) SetOverwriteGroupId(val *int64) {
	p.OverwriteGroupId = val
}
func (p *TOlapTablePartitionParam) SetPartitionsIsFake(val bool) {
	p.PartitionsIsFake = val
}

var fieldIDToName_TOlapTablePartitionParam = map[int16]string{
	1:  "db_id",
	2:  "table_id",
	3:  "version",
	4:  "partition_column",
	5:  "distributed_columns",
	6:  "partitions",
	7:  "partition_columns",
	8:  "partition_function_exprs",
	9:  "enable_automatic_partition",
	10: "partition_type",
	11: "enable_auto_detect_overwrite",
	12: "overwrite_group_id",
	13: "partitions_is_fake",
}

func (p *TOlapTablePartitionParam) IsSetPartitionColumn() bool {
	return p.PartitionColumn != nil
}

func (p *TOlapTablePartitionParam) IsSetDistributedColumns() bool {
	return p.DistributedColumns != nil
}

func (p *TOlapTablePartitionParam) IsSetPartitionColumns() bool {
	return p.PartitionColumns != nil
}

func (p *TOlapTablePartitionParam) IsSetPartitionFunctionExprs() bool {
	return p.PartitionFunctionExprs != nil
}

func (p *TOlapTablePartitionParam) IsSetEnableAutomaticPartition() bool {
	return p.EnableAutomaticPartition != nil
}

func (p *TOlapTablePartitionParam) IsSetPartitionType() bool {
	return p.PartitionType != nil
}

func (p *TOlapTablePartitionParam) IsSetEnableAutoDetectOverwrite() bool {
	return p.EnableAutoDetectOverwrite != nil
}

func (p *TOlapTablePartitionParam) IsSetOverwriteGroupId() bool {
	return p.OverwriteGroupId != nil
}

func (p *TOlapTablePartitionParam) IsSetPartitionsIsFake() bool {
	return p.PartitionsIsFake != TOlapTablePartitionParam_PartitionsIsFake_DEFAULT
}

func (p *TOlapTablePartitionParam) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDbId bool = false
	var issetTableId bool = false
	var issetVersion bool = false
	var issetPartitions bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetDbId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTableId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetPartitions = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDbId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTableId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPartitions {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TOlapTablePartitionParam[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TOlapTablePartitionParam[fieldId]))
}

func (p *TOlapTablePartitionParam) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DbId = _field
	return nil
}
func (p *TOlapTablePartitionParam) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TableId = _field
	return nil
}
func (p *TOlapTablePartitionParam) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *TOlapTablePartitionParam) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PartitionColumn = _field
	return nil
}
func (p *TOlapTablePartitionParam) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DistributedColumns = _field
	return nil
}
func (p *TOlapTablePartitionParam) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TOlapTablePartition, 0, size)
	values := make([]TOlapTablePartition, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Partitions = _field
	return nil
}
func (p *TOlapTablePartitionParam) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PartitionColumns = _field
	return nil
}
func (p *TOlapTablePartitionParam) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PartitionFunctionExprs = _field
	return nil
}
func (p *TOlapTablePartitionParam) ReadField9(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnableAutomaticPartition = _field
	return nil
}
func (p *TOlapTablePartitionParam) ReadField10(iprot thrift.TProtocol) error {

	var _field *partitions.TPartitionType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := partitions.TPartitionType(v)
		_field = &tmp
	}
	p.PartitionType = _field
	return nil
}
func (p *TOlapTablePartitionParam) ReadField11(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnableAutoDetectOverwrite = _field
	return nil
}
func (p *TOlapTablePartitionParam) ReadField12(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OverwriteGroupId = _field
	return nil
}
func (p *TOlapTablePartitionParam) ReadField13(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PartitionsIsFake = _field
	return nil
}

func (p *TOlapTablePartitionParam) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TOlapTablePartitionParam"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TOlapTablePartitionParam) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("db_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DbId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TOlapTablePartitionParam) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("table_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TableId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TOlapTablePartitionParam) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TOlapTablePartitionParam) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionColumn() {
		if err = oprot.WriteFieldBegin("partition_column", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PartitionColumn); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TOlapTablePartitionParam) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDistributedColumns() {
		if err = oprot.WriteFieldBegin("distributed_columns", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.DistributedColumns)); err != nil {
			return err
		}
		for _, v := range p.DistributedColumns {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TOlapTablePartitionParam) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("partitions", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Partitions)); err != nil {
		return err
	}
	for _, v := range p.Partitions {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TOlapTablePartitionParam) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionColumns() {
		if err = oprot.WriteFieldBegin("partition_columns", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PartitionColumns)); err != nil {
			return err
		}
		for _, v := range p.PartitionColumns {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TOlapTablePartitionParam) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionFunctionExprs() {
		if err = oprot.WriteFieldBegin("partition_function_exprs", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PartitionFunctionExprs)); err != nil {
			return err
		}
		for _, v := range p.PartitionFunctionExprs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TOlapTablePartitionParam) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableAutomaticPartition() {
		if err = oprot.WriteFieldBegin("enable_automatic_partition", thrift.BOOL, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableAutomaticPartition); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TOlapTablePartitionParam) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionType() {
		if err = oprot.WriteFieldBegin("partition_type", thrift.I32, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.PartitionType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TOlapTablePartitionParam) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableAutoDetectOverwrite() {
		if err = oprot.WriteFieldBegin("enable_auto_detect_overwrite", thrift.BOOL, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableAutoDetectOverwrite); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TOlapTablePartitionParam) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetOverwriteGroupId() {
		if err = oprot.WriteFieldBegin("overwrite_group_id", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.OverwriteGroupId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TOlapTablePartitionParam) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionsIsFake() {
		if err = oprot.WriteFieldBegin("partitions_is_fake", thrift.BOOL, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.PartitionsIsFake); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TOlapTablePartitionParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TOlapTablePartitionParam(%+v)", *p)

}

func (p *TOlapTablePartitionParam) DeepEqual(ano *TOlapTablePartitionParam) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.PartitionColumn) {
		return false
	}
	if !p.Field5DeepEqual(ano.DistributedColumns) {
		return false
	}
	if !p.Field6DeepEqual(ano.Partitions) {
		return false
	}
	if !p.Field7DeepEqual(ano.PartitionColumns) {
		return false
	}
	if !p.Field8DeepEqual(ano.PartitionFunctionExprs) {
		return false
	}
	if !p.Field9DeepEqual(ano.EnableAutomaticPartition) {
		return false
	}
	if !p.Field10DeepEqual(ano.PartitionType) {
		return false
	}
	if !p.Field11DeepEqual(ano.EnableAutoDetectOverwrite) {
		return false
	}
	if !p.Field12DeepEqual(ano.OverwriteGroupId) {
		return false
	}
	if !p.Field13DeepEqual(ano.PartitionsIsFake) {
		return false
	}
	return true
}

func (p *TOlapTablePartitionParam) Field1DeepEqual(src int64) bool {

	if p.DbId != src {
		return false
	}
	return true
}
func (p *TOlapTablePartitionParam) Field2DeepEqual(src int64) bool {

	if p.TableId != src {
		return false
	}
	return true
}
func (p *TOlapTablePartitionParam) Field3DeepEqual(src int64) bool {

	if p.Version != src {
		return false
	}
	return true
}
func (p *TOlapTablePartitionParam) Field4DeepEqual(src *string) bool {

	if p.PartitionColumn == src {
		return true
	} else if p.PartitionColumn == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PartitionColumn, *src) != 0 {
		return false
	}
	return true
}
func (p *TOlapTablePartitionParam) Field5DeepEqual(src []string) bool {

	if len(p.DistributedColumns) != len(src) {
		return false
	}
	for i, v := range p.DistributedColumns {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TOlapTablePartitionParam) Field6DeepEqual(src []*TOlapTablePartition) bool {

	if len(p.Partitions) != len(src) {
		return false
	}
	for i, v := range p.Partitions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TOlapTablePartitionParam) Field7DeepEqual(src []string) bool {

	if len(p.PartitionColumns) != len(src) {
		return false
	}
	for i, v := range p.PartitionColumns {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TOlapTablePartitionParam) Field8DeepEqual(src []*exprs.TExpr) bool {

	if len(p.PartitionFunctionExprs) != len(src) {
		return false
	}
	for i, v := range p.PartitionFunctionExprs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TOlapTablePartitionParam) Field9DeepEqual(src *bool) bool {

	if p.EnableAutomaticPartition == src {
		return true
	} else if p.EnableAutomaticPartition == nil || src == nil {
		return false
	}
	if *p.EnableAutomaticPartition != *src {
		return false
	}
	return true
}
func (p *TOlapTablePartitionParam) Field10DeepEqual(src *partitions.TPartitionType) bool {

	if p.PartitionType == src {
		return true
	} else if p.PartitionType == nil || src == nil {
		return false
	}
	if *p.PartitionType != *src {
		return false
	}
	return true
}
func (p *TOlapTablePartitionParam) Field11DeepEqual(src *bool) bool {

	if p.EnableAutoDetectOverwrite == src {
		return true
	} else if p.EnableAutoDetectOverwrite == nil || src == nil {
		return false
	}
	if *p.EnableAutoDetectOverwrite != *src {
		return false
	}
	return true
}
func (p *TOlapTablePartitionParam) Field12DeepEqual(src *int64) bool {

	if p.OverwriteGroupId == src {
		return true
	} else if p.OverwriteGroupId == nil || src == nil {
		return false
	}
	if *p.OverwriteGroupId != *src {
		return false
	}
	return true
}
func (p *TOlapTablePartitionParam) Field13DeepEqual(src bool) bool {

	if p.PartitionsIsFake != src {
		return false
	}
	return true
}

type TOlapTableIndex struct {
	IndexName  *string           `thrift:"index_name,1,optional" frugal:"1,optional,string" json:"index_name,omitempty"`
	Columns    []string          `thrift:"columns,2,optional" frugal:"2,optional,list<string>" json:"columns,omitempty"`
	IndexType  *TIndexType       `thrift:"index_type,3,optional" frugal:"3,optional,TIndexType" json:"index_type,omitempty"`
	Comment    *string           `thrift:"comment,4,optional" frugal:"4,optional,string" json:"comment,omitempty"`
	IndexId    *int64            `thrift:"index_id,5,optional" frugal:"5,optional,i64" json:"index_id,omitempty"`
	Properties map[string]string `thrift:"properties,6,optional" frugal:"6,optional,map<string:string>" json:"properties,omitempty"`
}

func NewTOlapTableIndex() *TOlapTableIndex {
	return &TOlapTableIndex{}
}

func (p *TOlapTableIndex) InitDefault() {
}

var TOlapTableIndex_IndexName_DEFAULT string

func (p *TOlapTableIndex) GetIndexName() (v string) {
	if !p.IsSetIndexName() {
		return TOlapTableIndex_IndexName_DEFAULT
	}
	return *p.IndexName
}

var TOlapTableIndex_Columns_DEFAULT []string

func (p *TOlapTableIndex) GetColumns() (v []string) {
	if !p.IsSetColumns() {
		return TOlapTableIndex_Columns_DEFAULT
	}
	return p.Columns
}

var TOlapTableIndex_IndexType_DEFAULT TIndexType

func (p *TOlapTableIndex) GetIndexType() (v TIndexType) {
	if !p.IsSetIndexType() {
		return TOlapTableIndex_IndexType_DEFAULT
	}
	return *p.IndexType
}

var TOlapTableIndex_Comment_DEFAULT string

func (p *TOlapTableIndex) GetComment() (v string) {
	if !p.IsSetComment() {
		return TOlapTableIndex_Comment_DEFAULT
	}
	return *p.Comment
}

var TOlapTableIndex_IndexId_DEFAULT int64

func (p *TOlapTableIndex) GetIndexId() (v int64) {
	if !p.IsSetIndexId() {
		return TOlapTableIndex_IndexId_DEFAULT
	}
	return *p.IndexId
}

var TOlapTableIndex_Properties_DEFAULT map[string]string

func (p *TOlapTableIndex) GetProperties() (v map[string]string) {
	if !p.IsSetProperties() {
		return TOlapTableIndex_Properties_DEFAULT
	}
	return p.Properties
}
func (p *TOlapTableIndex) SetIndexName(val *string) {
	p.IndexName = val
}
func (p *TOlapTableIndex) SetColumns(val []string) {
	p.Columns = val
}
func (p *TOlapTableIndex) SetIndexType(val *TIndexType) {
	p.IndexType = val
}
func (p *TOlapTableIndex) SetComment(val *string) {
	p.Comment = val
}
func (p *TOlapTableIndex) SetIndexId(val *int64) {
	p.IndexId = val
}
func (p *TOlapTableIndex) SetProperties(val map[string]string) {
	p.Properties = val
}

var fieldIDToName_TOlapTableIndex = map[int16]string{
	1: "index_name",
	2: "columns",
	3: "index_type",
	4: "comment",
	5: "index_id",
	6: "properties",
}

func (p *TOlapTableIndex) IsSetIndexName() bool {
	return p.IndexName != nil
}

func (p *TOlapTableIndex) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TOlapTableIndex) IsSetIndexType() bool {
	return p.IndexType != nil
}

func (p *TOlapTableIndex) IsSetComment() bool {
	return p.Comment != nil
}

func (p *TOlapTableIndex) IsSetIndexId() bool {
	return p.IndexId != nil
}

func (p *TOlapTableIndex) IsSetProperties() bool {
	return p.Properties != nil
}

func (p *TOlapTableIndex) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TOlapTableIndex[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TOlapTableIndex) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IndexName = _field
	return nil
}
func (p *TOlapTableIndex) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Columns = _field
	return nil
}
func (p *TOlapTableIndex) ReadField3(iprot thrift.TProtocol) error {

	var _field *TIndexType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TIndexType(v)
		_field = &tmp
	}
	p.IndexType = _field
	return nil
}
func (p *TOlapTableIndex) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Comment = _field
	return nil
}
func (p *TOlapTableIndex) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IndexId = _field
	return nil
}
func (p *TOlapTableIndex) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Properties = _field
	return nil
}

func (p *TOlapTableIndex) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TOlapTableIndex"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TOlapTableIndex) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndexName() {
		if err = oprot.WriteFieldBegin("index_name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.IndexName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TOlapTableIndex) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err = oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
			return err
		}
		for _, v := range p.Columns {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TOlapTableIndex) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndexType() {
		if err = oprot.WriteFieldBegin("index_type", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.IndexType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TOlapTableIndex) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetComment() {
		if err = oprot.WriteFieldBegin("comment", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Comment); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TOlapTableIndex) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndexId() {
		if err = oprot.WriteFieldBegin("index_id", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.IndexId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TOlapTableIndex) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperties() {
		if err = oprot.WriteFieldBegin("properties", thrift.MAP, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
			return err
		}
		for k, v := range p.Properties {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TOlapTableIndex) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TOlapTableIndex(%+v)", *p)

}

func (p *TOlapTableIndex) DeepEqual(ano *TOlapTableIndex) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IndexName) {
		return false
	}
	if !p.Field2DeepEqual(ano.Columns) {
		return false
	}
	if !p.Field3DeepEqual(ano.IndexType) {
		return false
	}
	if !p.Field4DeepEqual(ano.Comment) {
		return false
	}
	if !p.Field5DeepEqual(ano.IndexId) {
		return false
	}
	if !p.Field6DeepEqual(ano.Properties) {
		return false
	}
	return true
}

func (p *TOlapTableIndex) Field1DeepEqual(src *string) bool {

	if p.IndexName == src {
		return true
	} else if p.IndexName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.IndexName, *src) != 0 {
		return false
	}
	return true
}
func (p *TOlapTableIndex) Field2DeepEqual(src []string) bool {

	if len(p.Columns) != len(src) {
		return false
	}
	for i, v := range p.Columns {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TOlapTableIndex) Field3DeepEqual(src *TIndexType) bool {

	if p.IndexType == src {
		return true
	} else if p.IndexType == nil || src == nil {
		return false
	}
	if *p.IndexType != *src {
		return false
	}
	return true
}
func (p *TOlapTableIndex) Field4DeepEqual(src *string) bool {

	if p.Comment == src {
		return true
	} else if p.Comment == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Comment, *src) != 0 {
		return false
	}
	return true
}
func (p *TOlapTableIndex) Field5DeepEqual(src *int64) bool {

	if p.IndexId == src {
		return true
	} else if p.IndexId == nil || src == nil {
		return false
	}
	if *p.IndexId != *src {
		return false
	}
	return true
}
func (p *TOlapTableIndex) Field6DeepEqual(src map[string]string) bool {

	if len(p.Properties) != len(src) {
		return false
	}
	for k, v := range p.Properties {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type TOlapTableIndexSchema struct {
	Id          int64              `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Columns     []string           `thrift:"columns,2,required" frugal:"2,required,list<string>" json:"columns"`
	SchemaHash  int32              `thrift:"schema_hash,3,required" frugal:"3,required,i32" json:"schema_hash"`
	ColumnsDesc []*TColumn         `thrift:"columns_desc,4,optional" frugal:"4,optional,list<TColumn>" json:"columns_desc,omitempty"`
	IndexesDesc []*TOlapTableIndex `thrift:"indexes_desc,5,optional" frugal:"5,optional,list<TOlapTableIndex>" json:"indexes_desc,omitempty"`
	WhereClause *exprs.TExpr       `thrift:"where_clause,6,optional" frugal:"6,optional,exprs.TExpr" json:"where_clause,omitempty"`
}

func NewTOlapTableIndexSchema() *TOlapTableIndexSchema {
	return &TOlapTableIndexSchema{}
}

func (p *TOlapTableIndexSchema) InitDefault() {
}

func (p *TOlapTableIndexSchema) GetId() (v int64) {
	return p.Id
}

func (p *TOlapTableIndexSchema) GetColumns() (v []string) {
	return p.Columns
}

func (p *TOlapTableIndexSchema) GetSchemaHash() (v int32) {
	return p.SchemaHash
}

var TOlapTableIndexSchema_ColumnsDesc_DEFAULT []*TColumn

func (p *TOlapTableIndexSchema) GetColumnsDesc() (v []*TColumn) {
	if !p.IsSetColumnsDesc() {
		return TOlapTableIndexSchema_ColumnsDesc_DEFAULT
	}
	return p.ColumnsDesc
}

var TOlapTableIndexSchema_IndexesDesc_DEFAULT []*TOlapTableIndex

func (p *TOlapTableIndexSchema) GetIndexesDesc() (v []*TOlapTableIndex) {
	if !p.IsSetIndexesDesc() {
		return TOlapTableIndexSchema_IndexesDesc_DEFAULT
	}
	return p.IndexesDesc
}

var TOlapTableIndexSchema_WhereClause_DEFAULT *exprs.TExpr

func (p *TOlapTableIndexSchema) GetWhereClause() (v *exprs.TExpr) {
	if !p.IsSetWhereClause() {
		return TOlapTableIndexSchema_WhereClause_DEFAULT
	}
	return p.WhereClause
}
func (p *TOlapTableIndexSchema) SetId(val int64) {
	p.Id = val
}
func (p *TOlapTableIndexSchema) SetColumns(val []string) {
	p.Columns = val
}
func (p *TOlapTableIndexSchema) SetSchemaHash(val int32) {
	p.SchemaHash = val
}
func (p *TOlapTableIndexSchema) SetColumnsDesc(val []*TColumn) {
	p.ColumnsDesc = val
}
func (p *TOlapTableIndexSchema) SetIndexesDesc(val []*TOlapTableIndex) {
	p.IndexesDesc = val
}
func (p *TOlapTableIndexSchema) SetWhereClause(val *exprs.TExpr) {
	p.WhereClause = val
}

var fieldIDToName_TOlapTableIndexSchema = map[int16]string{
	1: "id",
	2: "columns",
	3: "schema_hash",
	4: "columns_desc",
	5: "indexes_desc",
	6: "where_clause",
}

func (p *TOlapTableIndexSchema) IsSetColumnsDesc() bool {
	return p.ColumnsDesc != nil
}

func (p *TOlapTableIndexSchema) IsSetIndexesDesc() bool {
	return p.IndexesDesc != nil
}

func (p *TOlapTableIndexSchema) IsSetWhereClause() bool {
	return p.WhereClause != nil
}

func (p *TOlapTableIndexSchema) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetColumns bool = false
	var issetSchemaHash bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumns = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetColumns {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TOlapTableIndexSchema[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TOlapTableIndexSchema[fieldId]))
}

func (p *TOlapTableIndexSchema) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *TOlapTableIndexSchema) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Columns = _field
	return nil
}
func (p *TOlapTableIndexSchema) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SchemaHash = _field
	return nil
}
func (p *TOlapTableIndexSchema) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TColumn, 0, size)
	values := make([]TColumn, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnsDesc = _field
	return nil
}
func (p *TOlapTableIndexSchema) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TOlapTableIndex, 0, size)
	values := make([]TOlapTableIndex, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.IndexesDesc = _field
	return nil
}
func (p *TOlapTableIndexSchema) ReadField6(iprot thrift.TProtocol) error {
	_field := exprs.NewTExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.WhereClause = _field
	return nil
}

func (p *TOlapTableIndexSchema) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TOlapTableIndexSchema"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TOlapTableIndexSchema) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TOlapTableIndexSchema) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
		return err
	}
	for _, v := range p.Columns {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TOlapTableIndexSchema) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schema_hash", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SchemaHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TOlapTableIndexSchema) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnsDesc() {
		if err = oprot.WriteFieldBegin("columns_desc", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnsDesc)); err != nil {
			return err
		}
		for _, v := range p.ColumnsDesc {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TOlapTableIndexSchema) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndexesDesc() {
		if err = oprot.WriteFieldBegin("indexes_desc", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.IndexesDesc)); err != nil {
			return err
		}
		for _, v := range p.IndexesDesc {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TOlapTableIndexSchema) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetWhereClause() {
		if err = oprot.WriteFieldBegin("where_clause", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.WhereClause.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TOlapTableIndexSchema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TOlapTableIndexSchema(%+v)", *p)

}

func (p *TOlapTableIndexSchema) DeepEqual(ano *TOlapTableIndexSchema) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Columns) {
		return false
	}
	if !p.Field3DeepEqual(ano.SchemaHash) {
		return false
	}
	if !p.Field4DeepEqual(ano.ColumnsDesc) {
		return false
	}
	if !p.Field5DeepEqual(ano.IndexesDesc) {
		return false
	}
	if !p.Field6DeepEqual(ano.WhereClause) {
		return false
	}
	return true
}

func (p *TOlapTableIndexSchema) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *TOlapTableIndexSchema) Field2DeepEqual(src []string) bool {

	if len(p.Columns) != len(src) {
		return false
	}
	for i, v := range p.Columns {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TOlapTableIndexSchema) Field3DeepEqual(src int32) bool {

	if p.SchemaHash != src {
		return false
	}
	return true
}
func (p *TOlapTableIndexSchema) Field4DeepEqual(src []*TColumn) bool {

	if len(p.ColumnsDesc) != len(src) {
		return false
	}
	for i, v := range p.ColumnsDesc {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TOlapTableIndexSchema) Field5DeepEqual(src []*TOlapTableIndex) bool {

	if len(p.IndexesDesc) != len(src) {
		return false
	}
	for i, v := range p.IndexesDesc {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TOlapTableIndexSchema) Field6DeepEqual(src *exprs.TExpr) bool {

	if !p.WhereClause.DeepEqual(src) {
		return false
	}
	return true
}

type TOlapTableSchemaParam struct {
	DbId                           int64                                 `thrift:"db_id,1,required" frugal:"1,required,i64" json:"db_id"`
	TableId                        int64                                 `thrift:"table_id,2,required" frugal:"2,required,i64" json:"table_id"`
	Version                        int64                                 `thrift:"version,3,required" frugal:"3,required,i64" json:"version"`
	SlotDescs                      []*TSlotDescriptor                    `thrift:"slot_descs,4,required" frugal:"4,required,list<TSlotDescriptor>" json:"slot_descs"`
	TupleDesc                      *TTupleDescriptor                     `thrift:"tuple_desc,5,required" frugal:"5,required,TTupleDescriptor" json:"tuple_desc"`
	Indexes                        []*TOlapTableIndexSchema              `thrift:"indexes,6,required" frugal:"6,required,list<TOlapTableIndexSchema>" json:"indexes"`
	IsDynamicSchema                *bool                                 `thrift:"is_dynamic_schema,7,optional" frugal:"7,optional,bool" json:"is_dynamic_schema,omitempty"`
	IsPartialUpdate                *bool                                 `thrift:"is_partial_update,8,optional" frugal:"8,optional,bool" json:"is_partial_update,omitempty"`
	PartialUpdateInputColumns      []string                              `thrift:"partial_update_input_columns,9,optional" frugal:"9,optional,list<string>" json:"partial_update_input_columns,omitempty"`
	IsStrictMode                   bool                                  `thrift:"is_strict_mode,10,optional" frugal:"10,optional,bool" json:"is_strict_mode,omitempty"`
	AutoIncrementColumn            *string                               `thrift:"auto_increment_column,11,optional" frugal:"11,optional,string" json:"auto_increment_column,omitempty"`
	AutoIncrementColumnUniqueId    int32                                 `thrift:"auto_increment_column_unique_id,12,optional" frugal:"12,optional,i32" json:"auto_increment_column_unique_id,omitempty"`
	InvertedIndexFileStorageFormat types.TInvertedIndexFileStorageFormat `thrift:"inverted_index_file_storage_format,13,optional" frugal:"13,optional,TInvertedIndexFileStorageFormat" json:"inverted_index_file_storage_format,omitempty"`
}

func NewTOlapTableSchemaParam() *TOlapTableSchemaParam {
	return &TOlapTableSchemaParam{

		IsStrictMode:                   false,
		AutoIncrementColumnUniqueId:    -1,
		InvertedIndexFileStorageFormat: types.TInvertedIndexFileStorageFormat_V1,
	}
}

func (p *TOlapTableSchemaParam) InitDefault() {
	p.IsStrictMode = false
	p.AutoIncrementColumnUniqueId = -1
	p.InvertedIndexFileStorageFormat = types.TInvertedIndexFileStorageFormat_V1
}

func (p *TOlapTableSchemaParam) GetDbId() (v int64) {
	return p.DbId
}

func (p *TOlapTableSchemaParam) GetTableId() (v int64) {
	return p.TableId
}

func (p *TOlapTableSchemaParam) GetVersion() (v int64) {
	return p.Version
}

func (p *TOlapTableSchemaParam) GetSlotDescs() (v []*TSlotDescriptor) {
	return p.SlotDescs
}

var TOlapTableSchemaParam_TupleDesc_DEFAULT *TTupleDescriptor

func (p *TOlapTableSchemaParam) GetTupleDesc() (v *TTupleDescriptor) {
	if !p.IsSetTupleDesc() {
		return TOlapTableSchemaParam_TupleDesc_DEFAULT
	}
	return p.TupleDesc
}

func (p *TOlapTableSchemaParam) GetIndexes() (v []*TOlapTableIndexSchema) {
	return p.Indexes
}

var TOlapTableSchemaParam_IsDynamicSchema_DEFAULT bool

func (p *TOlapTableSchemaParam) GetIsDynamicSchema() (v bool) {
	if !p.IsSetIsDynamicSchema() {
		return TOlapTableSchemaParam_IsDynamicSchema_DEFAULT
	}
	return *p.IsDynamicSchema
}

var TOlapTableSchemaParam_IsPartialUpdate_DEFAULT bool

func (p *TOlapTableSchemaParam) GetIsPartialUpdate() (v bool) {
	if !p.IsSetIsPartialUpdate() {
		return TOlapTableSchemaParam_IsPartialUpdate_DEFAULT
	}
	return *p.IsPartialUpdate
}

var TOlapTableSchemaParam_PartialUpdateInputColumns_DEFAULT []string

func (p *TOlapTableSchemaParam) GetPartialUpdateInputColumns() (v []string) {
	if !p.IsSetPartialUpdateInputColumns() {
		return TOlapTableSchemaParam_PartialUpdateInputColumns_DEFAULT
	}
	return p.PartialUpdateInputColumns
}

var TOlapTableSchemaParam_IsStrictMode_DEFAULT bool = false

func (p *TOlapTableSchemaParam) GetIsStrictMode() (v bool) {
	if !p.IsSetIsStrictMode() {
		return TOlapTableSchemaParam_IsStrictMode_DEFAULT
	}
	return p.IsStrictMode
}

var TOlapTableSchemaParam_AutoIncrementColumn_DEFAULT string

func (p *TOlapTableSchemaParam) GetAutoIncrementColumn() (v string) {
	if !p.IsSetAutoIncrementColumn() {
		return TOlapTableSchemaParam_AutoIncrementColumn_DEFAULT
	}
	return *p.AutoIncrementColumn
}

var TOlapTableSchemaParam_AutoIncrementColumnUniqueId_DEFAULT int32 = -1

func (p *TOlapTableSchemaParam) GetAutoIncrementColumnUniqueId() (v int32) {
	if !p.IsSetAutoIncrementColumnUniqueId() {
		return TOlapTableSchemaParam_AutoIncrementColumnUniqueId_DEFAULT
	}
	return p.AutoIncrementColumnUniqueId
}

var TOlapTableSchemaParam_InvertedIndexFileStorageFormat_DEFAULT types.TInvertedIndexFileStorageFormat = types.TInvertedIndexFileStorageFormat_V1

func (p *TOlapTableSchemaParam) GetInvertedIndexFileStorageFormat() (v types.TInvertedIndexFileStorageFormat) {
	if !p.IsSetInvertedIndexFileStorageFormat() {
		return TOlapTableSchemaParam_InvertedIndexFileStorageFormat_DEFAULT
	}
	return p.InvertedIndexFileStorageFormat
}
func (p *TOlapTableSchemaParam) SetDbId(val int64) {
	p.DbId = val
}
func (p *TOlapTableSchemaParam) SetTableId(val int64) {
	p.TableId = val
}
func (p *TOlapTableSchemaParam) SetVersion(val int64) {
	p.Version = val
}
func (p *TOlapTableSchemaParam) SetSlotDescs(val []*TSlotDescriptor) {
	p.SlotDescs = val
}
func (p *TOlapTableSchemaParam) SetTupleDesc(val *TTupleDescriptor) {
	p.TupleDesc = val
}
func (p *TOlapTableSchemaParam) SetIndexes(val []*TOlapTableIndexSchema) {
	p.Indexes = val
}
func (p *TOlapTableSchemaParam) SetIsDynamicSchema(val *bool) {
	p.IsDynamicSchema = val
}
func (p *TOlapTableSchemaParam) SetIsPartialUpdate(val *bool) {
	p.IsPartialUpdate = val
}
func (p *TOlapTableSchemaParam) SetPartialUpdateInputColumns(val []string) {
	p.PartialUpdateInputColumns = val
}
func (p *TOlapTableSchemaParam) SetIsStrictMode(val bool) {
	p.IsStrictMode = val
}
func (p *TOlapTableSchemaParam) SetAutoIncrementColumn(val *string) {
	p.AutoIncrementColumn = val
}
func (p *TOlapTableSchemaParam) SetAutoIncrementColumnUniqueId(val int32) {
	p.AutoIncrementColumnUniqueId = val
}
func (p *TOlapTableSchemaParam) SetInvertedIndexFileStorageFormat(val types.TInvertedIndexFileStorageFormat) {
	p.InvertedIndexFileStorageFormat = val
}

var fieldIDToName_TOlapTableSchemaParam = map[int16]string{
	1:  "db_id",
	2:  "table_id",
	3:  "version",
	4:  "slot_descs",
	5:  "tuple_desc",
	6:  "indexes",
	7:  "is_dynamic_schema",
	8:  "is_partial_update",
	9:  "partial_update_input_columns",
	10: "is_strict_mode",
	11: "auto_increment_column",
	12: "auto_increment_column_unique_id",
	13: "inverted_index_file_storage_format",
}

func (p *TOlapTableSchemaParam) IsSetTupleDesc() bool {
	return p.TupleDesc != nil
}

func (p *TOlapTableSchemaParam) IsSetIsDynamicSchema() bool {
	return p.IsDynamicSchema != nil
}

func (p *TOlapTableSchemaParam) IsSetIsPartialUpdate() bool {
	return p.IsPartialUpdate != nil
}

func (p *TOlapTableSchemaParam) IsSetPartialUpdateInputColumns() bool {
	return p.PartialUpdateInputColumns != nil
}

func (p *TOlapTableSchemaParam) IsSetIsStrictMode() bool {
	return p.IsStrictMode != TOlapTableSchemaParam_IsStrictMode_DEFAULT
}

func (p *TOlapTableSchemaParam) IsSetAutoIncrementColumn() bool {
	return p.AutoIncrementColumn != nil
}

func (p *TOlapTableSchemaParam) IsSetAutoIncrementColumnUniqueId() bool {
	return p.AutoIncrementColumnUniqueId != TOlapTableSchemaParam_AutoIncrementColumnUniqueId_DEFAULT
}

func (p *TOlapTableSchemaParam) IsSetInvertedIndexFileStorageFormat() bool {
	return p.InvertedIndexFileStorageFormat != TOlapTableSchemaParam_InvertedIndexFileStorageFormat_DEFAULT
}

func (p *TOlapTableSchemaParam) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDbId bool = false
	var issetTableId bool = false
	var issetVersion bool = false
	var issetSlotDescs bool = false
	var issetTupleDesc bool = false
	var issetIndexes bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetDbId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTableId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetSlotDescs = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetTupleDesc = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetIndexes = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDbId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTableId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetSlotDescs {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTupleDesc {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetIndexes {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TOlapTableSchemaParam[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TOlapTableSchemaParam[fieldId]))
}

func (p *TOlapTableSchemaParam) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DbId = _field
	return nil
}
func (p *TOlapTableSchemaParam) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TableId = _field
	return nil
}
func (p *TOlapTableSchemaParam) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *TOlapTableSchemaParam) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TSlotDescriptor, 0, size)
	values := make([]TSlotDescriptor, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SlotDescs = _field
	return nil
}
func (p *TOlapTableSchemaParam) ReadField5(iprot thrift.TProtocol) error {
	_field := NewTTupleDescriptor()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TupleDesc = _field
	return nil
}
func (p *TOlapTableSchemaParam) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TOlapTableIndexSchema, 0, size)
	values := make([]TOlapTableIndexSchema, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Indexes = _field
	return nil
}
func (p *TOlapTableSchemaParam) ReadField7(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsDynamicSchema = _field
	return nil
}
func (p *TOlapTableSchemaParam) ReadField8(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsPartialUpdate = _field
	return nil
}
func (p *TOlapTableSchemaParam) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PartialUpdateInputColumns = _field
	return nil
}
func (p *TOlapTableSchemaParam) ReadField10(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsStrictMode = _field
	return nil
}
func (p *TOlapTableSchemaParam) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AutoIncrementColumn = _field
	return nil
}
func (p *TOlapTableSchemaParam) ReadField12(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AutoIncrementColumnUniqueId = _field
	return nil
}
func (p *TOlapTableSchemaParam) ReadField13(iprot thrift.TProtocol) error {

	var _field types.TInvertedIndexFileStorageFormat
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TInvertedIndexFileStorageFormat(v)
	}
	p.InvertedIndexFileStorageFormat = _field
	return nil
}

func (p *TOlapTableSchemaParam) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TOlapTableSchemaParam"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TOlapTableSchemaParam) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("db_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DbId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TOlapTableSchemaParam) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("table_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TableId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TOlapTableSchemaParam) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TOlapTableSchemaParam) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("slot_descs", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SlotDescs)); err != nil {
		return err
	}
	for _, v := range p.SlotDescs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TOlapTableSchemaParam) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tuple_desc", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.TupleDesc.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TOlapTableSchemaParam) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("indexes", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Indexes)); err != nil {
		return err
	}
	for _, v := range p.Indexes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TOlapTableSchemaParam) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsDynamicSchema() {
		if err = oprot.WriteFieldBegin("is_dynamic_schema", thrift.BOOL, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsDynamicSchema); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TOlapTableSchemaParam) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsPartialUpdate() {
		if err = oprot.WriteFieldBegin("is_partial_update", thrift.BOOL, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsPartialUpdate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TOlapTableSchemaParam) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartialUpdateInputColumns() {
		if err = oprot.WriteFieldBegin("partial_update_input_columns", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PartialUpdateInputColumns)); err != nil {
			return err
		}
		for _, v := range p.PartialUpdateInputColumns {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TOlapTableSchemaParam) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsStrictMode() {
		if err = oprot.WriteFieldBegin("is_strict_mode", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsStrictMode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TOlapTableSchemaParam) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetAutoIncrementColumn() {
		if err = oprot.WriteFieldBegin("auto_increment_column", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AutoIncrementColumn); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TOlapTableSchemaParam) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetAutoIncrementColumnUniqueId() {
		if err = oprot.WriteFieldBegin("auto_increment_column_unique_id", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.AutoIncrementColumnUniqueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TOlapTableSchemaParam) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvertedIndexFileStorageFormat() {
		if err = oprot.WriteFieldBegin("inverted_index_file_storage_format", thrift.I32, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(p.InvertedIndexFileStorageFormat)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TOlapTableSchemaParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TOlapTableSchemaParam(%+v)", *p)

}

func (p *TOlapTableSchemaParam) DeepEqual(ano *TOlapTableSchemaParam) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.SlotDescs) {
		return false
	}
	if !p.Field5DeepEqual(ano.TupleDesc) {
		return false
	}
	if !p.Field6DeepEqual(ano.Indexes) {
		return false
	}
	if !p.Field7DeepEqual(ano.IsDynamicSchema) {
		return false
	}
	if !p.Field8DeepEqual(ano.IsPartialUpdate) {
		return false
	}
	if !p.Field9DeepEqual(ano.PartialUpdateInputColumns) {
		return false
	}
	if !p.Field10DeepEqual(ano.IsStrictMode) {
		return false
	}
	if !p.Field11DeepEqual(ano.AutoIncrementColumn) {
		return false
	}
	if !p.Field12DeepEqual(ano.AutoIncrementColumnUniqueId) {
		return false
	}
	if !p.Field13DeepEqual(ano.InvertedIndexFileStorageFormat) {
		return false
	}
	return true
}

func (p *TOlapTableSchemaParam) Field1DeepEqual(src int64) bool {

	if p.DbId != src {
		return false
	}
	return true
}
func (p *TOlapTableSchemaParam) Field2DeepEqual(src int64) bool {

	if p.TableId != src {
		return false
	}
	return true
}
func (p *TOlapTableSchemaParam) Field3DeepEqual(src int64) bool {

	if p.Version != src {
		return false
	}
	return true
}
func (p *TOlapTableSchemaParam) Field4DeepEqual(src []*TSlotDescriptor) bool {

	if len(p.SlotDescs) != len(src) {
		return false
	}
	for i, v := range p.SlotDescs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TOlapTableSchemaParam) Field5DeepEqual(src *TTupleDescriptor) bool {

	if !p.TupleDesc.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TOlapTableSchemaParam) Field6DeepEqual(src []*TOlapTableIndexSchema) bool {

	if len(p.Indexes) != len(src) {
		return false
	}
	for i, v := range p.Indexes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TOlapTableSchemaParam) Field7DeepEqual(src *bool) bool {

	if p.IsDynamicSchema == src {
		return true
	} else if p.IsDynamicSchema == nil || src == nil {
		return false
	}
	if *p.IsDynamicSchema != *src {
		return false
	}
	return true
}
func (p *TOlapTableSchemaParam) Field8DeepEqual(src *bool) bool {

	if p.IsPartialUpdate == src {
		return true
	} else if p.IsPartialUpdate == nil || src == nil {
		return false
	}
	if *p.IsPartialUpdate != *src {
		return false
	}
	return true
}
func (p *TOlapTableSchemaParam) Field9DeepEqual(src []string) bool {

	if len(p.PartialUpdateInputColumns) != len(src) {
		return false
	}
	for i, v := range p.PartialUpdateInputColumns {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TOlapTableSchemaParam) Field10DeepEqual(src bool) bool {

	if p.IsStrictMode != src {
		return false
	}
	return true
}
func (p *TOlapTableSchemaParam) Field11DeepEqual(src *string) bool {

	if p.AutoIncrementColumn == src {
		return true
	} else if p.AutoIncrementColumn == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AutoIncrementColumn, *src) != 0 {
		return false
	}
	return true
}
func (p *TOlapTableSchemaParam) Field12DeepEqual(src int32) bool {

	if p.AutoIncrementColumnUniqueId != src {
		return false
	}
	return true
}
func (p *TOlapTableSchemaParam) Field13DeepEqual(src types.TInvertedIndexFileStorageFormat) bool {

	if p.InvertedIndexFileStorageFormat != src {
		return false
	}
	return true
}

type TTabletLocation struct {
	TabletId int64   `thrift:"tablet_id,1,required" frugal:"1,required,i64" json:"tablet_id"`
	NodeIds  []int64 `thrift:"node_ids,2,required" frugal:"2,required,list<i64>" json:"node_ids"`
}

func NewTTabletLocation() *TTabletLocation {
	return &TTabletLocation{}
}

func (p *TTabletLocation) InitDefault() {
}

func (p *TTabletLocation) GetTabletId() (v int64) {
	return p.TabletId
}

func (p *TTabletLocation) GetNodeIds() (v []int64) {
	return p.NodeIds
}
func (p *TTabletLocation) SetTabletId(val int64) {
	p.TabletId = val
}
func (p *TTabletLocation) SetNodeIds(val []int64) {
	p.NodeIds = val
}

var fieldIDToName_TTabletLocation = map[int16]string{
	1: "tablet_id",
	2: "node_ids",
}

func (p *TTabletLocation) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetNodeIds bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodeIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNodeIds {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletLocation[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletLocation[fieldId]))
}

func (p *TTabletLocation) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TabletId = _field
	return nil
}
func (p *TTabletLocation) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.NodeIds = _field
	return nil
}

func (p *TTabletLocation) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTabletLocation"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTabletLocation) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTabletLocation) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("node_ids", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.NodeIds)); err != nil {
		return err
	}
	for _, v := range p.NodeIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTabletLocation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTabletLocation(%+v)", *p)

}

func (p *TTabletLocation) DeepEqual(ano *TTabletLocation) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.NodeIds) {
		return false
	}
	return true
}

func (p *TTabletLocation) Field1DeepEqual(src int64) bool {

	if p.TabletId != src {
		return false
	}
	return true
}
func (p *TTabletLocation) Field2DeepEqual(src []int64) bool {

	if len(p.NodeIds) != len(src) {
		return false
	}
	for i, v := range p.NodeIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type TOlapTableLocationParam struct {
	DbId    int64              `thrift:"db_id,1,required" frugal:"1,required,i64" json:"db_id"`
	TableId int64              `thrift:"table_id,2,required" frugal:"2,required,i64" json:"table_id"`
	Version int64              `thrift:"version,3,required" frugal:"3,required,i64" json:"version"`
	Tablets []*TTabletLocation `thrift:"tablets,4,required" frugal:"4,required,list<TTabletLocation>" json:"tablets"`
}

func NewTOlapTableLocationParam() *TOlapTableLocationParam {
	return &TOlapTableLocationParam{}
}

func (p *TOlapTableLocationParam) InitDefault() {
}

func (p *TOlapTableLocationParam) GetDbId() (v int64) {
	return p.DbId
}

func (p *TOlapTableLocationParam) GetTableId() (v int64) {
	return p.TableId
}

func (p *TOlapTableLocationParam) GetVersion() (v int64) {
	return p.Version
}

func (p *TOlapTableLocationParam) GetTablets() (v []*TTabletLocation) {
	return p.Tablets
}
func (p *TOlapTableLocationParam) SetDbId(val int64) {
	p.DbId = val
}
func (p *TOlapTableLocationParam) SetTableId(val int64) {
	p.TableId = val
}
func (p *TOlapTableLocationParam) SetVersion(val int64) {
	p.Version = val
}
func (p *TOlapTableLocationParam) SetTablets(val []*TTabletLocation) {
	p.Tablets = val
}

var fieldIDToName_TOlapTableLocationParam = map[int16]string{
	1: "db_id",
	2: "table_id",
	3: "version",
	4: "tablets",
}

func (p *TOlapTableLocationParam) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDbId bool = false
	var issetTableId bool = false
	var issetVersion bool = false
	var issetTablets bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetDbId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTableId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetTablets = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDbId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTableId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetTablets {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TOlapTableLocationParam[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TOlapTableLocationParam[fieldId]))
}

func (p *TOlapTableLocationParam) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DbId = _field
	return nil
}
func (p *TOlapTableLocationParam) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TableId = _field
	return nil
}
func (p *TOlapTableLocationParam) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *TOlapTableLocationParam) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTabletLocation, 0, size)
	values := make([]TTabletLocation, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tablets = _field
	return nil
}

func (p *TOlapTableLocationParam) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TOlapTableLocationParam"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TOlapTableLocationParam) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("db_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DbId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TOlapTableLocationParam) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("table_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TableId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TOlapTableLocationParam) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TOlapTableLocationParam) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablets", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tablets)); err != nil {
		return err
	}
	for _, v := range p.Tablets {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TOlapTableLocationParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TOlapTableLocationParam(%+v)", *p)

}

func (p *TOlapTableLocationParam) DeepEqual(ano *TOlapTableLocationParam) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.Tablets) {
		return false
	}
	return true
}

func (p *TOlapTableLocationParam) Field1DeepEqual(src int64) bool {

	if p.DbId != src {
		return false
	}
	return true
}
func (p *TOlapTableLocationParam) Field2DeepEqual(src int64) bool {

	if p.TableId != src {
		return false
	}
	return true
}
func (p *TOlapTableLocationParam) Field3DeepEqual(src int64) bool {

	if p.Version != src {
		return false
	}
	return true
}
func (p *TOlapTableLocationParam) Field4DeepEqual(src []*TTabletLocation) bool {

	if len(p.Tablets) != len(src) {
		return false
	}
	for i, v := range p.Tablets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TNodeInfo struct {
	Id                int64  `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Option            int64  `thrift:"option,2,required" frugal:"2,required,i64" json:"option"`
	Host              string `thrift:"host,3,required" frugal:"3,required,string" json:"host"`
	AsyncInternalPort int32  `thrift:"async_internal_port,4,required" frugal:"4,required,i32" json:"async_internal_port"`
}

func NewTNodeInfo() *TNodeInfo {
	return &TNodeInfo{}
}

func (p *TNodeInfo) InitDefault() {
}

func (p *TNodeInfo) GetId() (v int64) {
	return p.Id
}

func (p *TNodeInfo) GetOption() (v int64) {
	return p.Option
}

func (p *TNodeInfo) GetHost() (v string) {
	return p.Host
}

func (p *TNodeInfo) GetAsyncInternalPort() (v int32) {
	return p.AsyncInternalPort
}
func (p *TNodeInfo) SetId(val int64) {
	p.Id = val
}
func (p *TNodeInfo) SetOption(val int64) {
	p.Option = val
}
func (p *TNodeInfo) SetHost(val string) {
	p.Host = val
}
func (p *TNodeInfo) SetAsyncInternalPort(val int32) {
	p.AsyncInternalPort = val
}

var fieldIDToName_TNodeInfo = map[int16]string{
	1: "id",
	2: "option",
	3: "host",
	4: "async_internal_port",
}

func (p *TNodeInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetOption bool = false
	var issetHost bool = false
	var issetAsyncInternalPort bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetOption = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetHost = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetAsyncInternalPort = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetOption {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetHost {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetAsyncInternalPort {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TNodeInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TNodeInfo[fieldId]))
}

func (p *TNodeInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *TNodeInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Option = _field
	return nil
}
func (p *TNodeInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Host = _field
	return nil
}
func (p *TNodeInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AsyncInternalPort = _field
	return nil
}

func (p *TNodeInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TNodeInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TNodeInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TNodeInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("option", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Option); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TNodeInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("host", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Host); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TNodeInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("async_internal_port", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AsyncInternalPort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TNodeInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TNodeInfo(%+v)", *p)

}

func (p *TNodeInfo) DeepEqual(ano *TNodeInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Option) {
		return false
	}
	if !p.Field3DeepEqual(ano.Host) {
		return false
	}
	if !p.Field4DeepEqual(ano.AsyncInternalPort) {
		return false
	}
	return true
}

func (p *TNodeInfo) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *TNodeInfo) Field2DeepEqual(src int64) bool {

	if p.Option != src {
		return false
	}
	return true
}
func (p *TNodeInfo) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Host, src) != 0 {
		return false
	}
	return true
}
func (p *TNodeInfo) Field4DeepEqual(src int32) bool {

	if p.AsyncInternalPort != src {
		return false
	}
	return true
}

type TPaloNodesInfo struct {
	Version int64        `thrift:"version,1,required" frugal:"1,required,i64" json:"version"`
	Nodes   []*TNodeInfo `thrift:"nodes,2,required" frugal:"2,required,list<TNodeInfo>" json:"nodes"`
}

func NewTPaloNodesInfo() *TPaloNodesInfo {
	return &TPaloNodesInfo{}
}

func (p *TPaloNodesInfo) InitDefault() {
}

func (p *TPaloNodesInfo) GetVersion() (v int64) {
	return p.Version
}

func (p *TPaloNodesInfo) GetNodes() (v []*TNodeInfo) {
	return p.Nodes
}
func (p *TPaloNodesInfo) SetVersion(val int64) {
	p.Version = val
}
func (p *TPaloNodesInfo) SetNodes(val []*TNodeInfo) {
	p.Nodes = val
}

var fieldIDToName_TPaloNodesInfo = map[int16]string{
	1: "version",
	2: "nodes",
}

func (p *TPaloNodesInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetVersion bool = false
	var issetNodes bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodes = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNodes {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPaloNodesInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPaloNodesInfo[fieldId]))
}

func (p *TPaloNodesInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *TPaloNodesInfo) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TNodeInfo, 0, size)
	values := make([]TNodeInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Nodes = _field
	return nil
}

func (p *TPaloNodesInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPaloNodesInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPaloNodesInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPaloNodesInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nodes", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Nodes)); err != nil {
		return err
	}
	for _, v := range p.Nodes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPaloNodesInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPaloNodesInfo(%+v)", *p)

}

func (p *TPaloNodesInfo) DeepEqual(ano *TPaloNodesInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Version) {
		return false
	}
	if !p.Field2DeepEqual(ano.Nodes) {
		return false
	}
	return true
}

func (p *TPaloNodesInfo) Field1DeepEqual(src int64) bool {

	if p.Version != src {
		return false
	}
	return true
}
func (p *TPaloNodesInfo) Field2DeepEqual(src []*TNodeInfo) bool {

	if len(p.Nodes) != len(src) {
		return false
	}
	for i, v := range p.Nodes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TOlapTable struct {
	TableName string `thrift:"tableName,1,required" frugal:"1,required,string" json:"tableName"`
}

func NewTOlapTable() *TOlapTable {
	return &TOlapTable{}
}

func (p *TOlapTable) InitDefault() {
}

func (p *TOlapTable) GetTableName() (v string) {
	return p.TableName
}
func (p *TOlapTable) SetTableName(val string) {
	p.TableName = val
}

var fieldIDToName_TOlapTable = map[int16]string{
	1: "tableName",
}

func (p *TOlapTable) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTableName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTableName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTableName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TOlapTable[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TOlapTable[fieldId]))
}

func (p *TOlapTable) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TableName = _field
	return nil
}

func (p *TOlapTable) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TOlapTable"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TOlapTable) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TableName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TOlapTable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TOlapTable(%+v)", *p)

}

func (p *TOlapTable) DeepEqual(ano *TOlapTable) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TableName) {
		return false
	}
	return true
}

func (p *TOlapTable) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TableName, src) != 0 {
		return false
	}
	return true
}

type TMySQLTable struct {
	Host    string `thrift:"host,1,required" frugal:"1,required,string" json:"host"`
	Port    string `thrift:"port,2,required" frugal:"2,required,string" json:"port"`
	User    string `thrift:"user,3,required" frugal:"3,required,string" json:"user"`
	Passwd  string `thrift:"passwd,4,required" frugal:"4,required,string" json:"passwd"`
	Db      string `thrift:"db,5,required" frugal:"5,required,string" json:"db"`
	Table   string `thrift:"table,6,required" frugal:"6,required,string" json:"table"`
	Charset string `thrift:"charset,7,required" frugal:"7,required,string" json:"charset"`
}

func NewTMySQLTable() *TMySQLTable {
	return &TMySQLTable{}
}

func (p *TMySQLTable) InitDefault() {
}

func (p *TMySQLTable) GetHost() (v string) {
	return p.Host
}

func (p *TMySQLTable) GetPort() (v string) {
	return p.Port
}

func (p *TMySQLTable) GetUser() (v string) {
	return p.User
}

func (p *TMySQLTable) GetPasswd() (v string) {
	return p.Passwd
}

func (p *TMySQLTable) GetDb() (v string) {
	return p.Db
}

func (p *TMySQLTable) GetTable() (v string) {
	return p.Table
}

func (p *TMySQLTable) GetCharset() (v string) {
	return p.Charset
}
func (p *TMySQLTable) SetHost(val string) {
	p.Host = val
}
func (p *TMySQLTable) SetPort(val string) {
	p.Port = val
}
func (p *TMySQLTable) SetUser(val string) {
	p.User = val
}
func (p *TMySQLTable) SetPasswd(val string) {
	p.Passwd = val
}
func (p *TMySQLTable) SetDb(val string) {
	p.Db = val
}
func (p *TMySQLTable) SetTable(val string) {
	p.Table = val
}
func (p *TMySQLTable) SetCharset(val string) {
	p.Charset = val
}

var fieldIDToName_TMySQLTable = map[int16]string{
	1: "host",
	2: "port",
	3: "user",
	4: "passwd",
	5: "db",
	6: "table",
	7: "charset",
}

func (p *TMySQLTable) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetHost bool = false
	var issetPort bool = false
	var issetUser bool = false
	var issetPasswd bool = false
	var issetDb bool = false
	var issetTable bool = false
	var issetCharset bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetHost = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPort = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetUser = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPasswd = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetDb = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetTable = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetCharset = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetHost {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPort {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetUser {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPasswd {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetDb {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetTable {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetCharset {
		fieldId = 7
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMySQLTable[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TMySQLTable[fieldId]))
}

func (p *TMySQLTable) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Host = _field
	return nil
}
func (p *TMySQLTable) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Port = _field
	return nil
}
func (p *TMySQLTable) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.User = _field
	return nil
}
func (p *TMySQLTable) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Passwd = _field
	return nil
}
func (p *TMySQLTable) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Db = _field
	return nil
}
func (p *TMySQLTable) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Table = _field
	return nil
}
func (p *TMySQLTable) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Charset = _field
	return nil
}

func (p *TMySQLTable) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMySQLTable"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMySQLTable) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Host); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMySQLTable) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("port", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Port); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TMySQLTable) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.User); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TMySQLTable) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Passwd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TMySQLTable) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("db", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Db); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TMySQLTable) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("table", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Table); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TMySQLTable) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("charset", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Charset); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TMySQLTable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMySQLTable(%+v)", *p)

}

func (p *TMySQLTable) DeepEqual(ano *TMySQLTable) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Host) {
		return false
	}
	if !p.Field2DeepEqual(ano.Port) {
		return false
	}
	if !p.Field3DeepEqual(ano.User) {
		return false
	}
	if !p.Field4DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field5DeepEqual(ano.Db) {
		return false
	}
	if !p.Field6DeepEqual(ano.Table) {
		return false
	}
	if !p.Field7DeepEqual(ano.Charset) {
		return false
	}
	return true
}

func (p *TMySQLTable) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Host, src) != 0 {
		return false
	}
	return true
}
func (p *TMySQLTable) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Port, src) != 0 {
		return false
	}
	return true
}
func (p *TMySQLTable) Field3DeepEqual(src string) bool {

	if strings.Compare(p.User, src) != 0 {
		return false
	}
	return true
}
func (p *TMySQLTable) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Passwd, src) != 0 {
		return false
	}
	return true
}
func (p *TMySQLTable) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Db, src) != 0 {
		return false
	}
	return true
}
func (p *TMySQLTable) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Table, src) != 0 {
		return false
	}
	return true
}
func (p *TMySQLTable) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Charset, src) != 0 {
		return false
	}
	return true
}

type TOdbcTable struct {
	Host   *string               `thrift:"host,1,optional" frugal:"1,optional,string" json:"host,omitempty"`
	Port   *string               `thrift:"port,2,optional" frugal:"2,optional,string" json:"port,omitempty"`
	User   *string               `thrift:"user,3,optional" frugal:"3,optional,string" json:"user,omitempty"`
	Passwd *string               `thrift:"passwd,4,optional" frugal:"4,optional,string" json:"passwd,omitempty"`
	Db     *string               `thrift:"db,5,optional" frugal:"5,optional,string" json:"db,omitempty"`
	Table  *string               `thrift:"table,6,optional" frugal:"6,optional,string" json:"table,omitempty"`
	Driver *string               `thrift:"driver,7,optional" frugal:"7,optional,string" json:"driver,omitempty"`
	Type   *types.TOdbcTableType `thrift:"type,8,optional" frugal:"8,optional,TOdbcTableType" json:"type,omitempty"`
}

func NewTOdbcTable() *TOdbcTable {
	return &TOdbcTable{}
}

func (p *TOdbcTable) InitDefault() {
}

var TOdbcTable_Host_DEFAULT string

func (p *TOdbcTable) GetHost() (v string) {
	if !p.IsSetHost() {
		return TOdbcTable_Host_DEFAULT
	}
	return *p.Host
}

var TOdbcTable_Port_DEFAULT string

func (p *TOdbcTable) GetPort() (v string) {
	if !p.IsSetPort() {
		return TOdbcTable_Port_DEFAULT
	}
	return *p.Port
}

var TOdbcTable_User_DEFAULT string

func (p *TOdbcTable) GetUser() (v string) {
	if !p.IsSetUser() {
		return TOdbcTable_User_DEFAULT
	}
	return *p.User
}

var TOdbcTable_Passwd_DEFAULT string

func (p *TOdbcTable) GetPasswd() (v string) {
	if !p.IsSetPasswd() {
		return TOdbcTable_Passwd_DEFAULT
	}
	return *p.Passwd
}

var TOdbcTable_Db_DEFAULT string

func (p *TOdbcTable) GetDb() (v string) {
	if !p.IsSetDb() {
		return TOdbcTable_Db_DEFAULT
	}
	return *p.Db
}

var TOdbcTable_Table_DEFAULT string

func (p *TOdbcTable) GetTable() (v string) {
	if !p.IsSetTable() {
		return TOdbcTable_Table_DEFAULT
	}
	return *p.Table
}

var TOdbcTable_Driver_DEFAULT string

func (p *TOdbcTable) GetDriver() (v string) {
	if !p.IsSetDriver() {
		return TOdbcTable_Driver_DEFAULT
	}
	return *p.Driver
}

var TOdbcTable_Type_DEFAULT types.TOdbcTableType

func (p *TOdbcTable) GetType() (v types.TOdbcTableType) {
	if !p.IsSetType() {
		return TOdbcTable_Type_DEFAULT
	}
	return *p.Type
}
func (p *TOdbcTable) SetHost(val *string) {
	p.Host = val
}
func (p *TOdbcTable) SetPort(val *string) {
	p.Port = val
}
func (p *TOdbcTable) SetUser(val *string) {
	p.User = val
}
func (p *TOdbcTable) SetPasswd(val *string) {
	p.Passwd = val
}
func (p *TOdbcTable) SetDb(val *string) {
	p.Db = val
}
func (p *TOdbcTable) SetTable(val *string) {
	p.Table = val
}
func (p *TOdbcTable) SetDriver(val *string) {
	p.Driver = val
}
func (p *TOdbcTable) SetType(val *types.TOdbcTableType) {
	p.Type = val
}

var fieldIDToName_TOdbcTable = map[int16]string{
	1: "host",
	2: "port",
	3: "user",
	4: "passwd",
	5: "db",
	6: "table",
	7: "driver",
	8: "type",
}

func (p *TOdbcTable) IsSetHost() bool {
	return p.Host != nil
}

func (p *TOdbcTable) IsSetPort() bool {
	return p.Port != nil
}

func (p *TOdbcTable) IsSetUser() bool {
	return p.User != nil
}

func (p *TOdbcTable) IsSetPasswd() bool {
	return p.Passwd != nil
}

func (p *TOdbcTable) IsSetDb() bool {
	return p.Db != nil
}

func (p *TOdbcTable) IsSetTable() bool {
	return p.Table != nil
}

func (p *TOdbcTable) IsSetDriver() bool {
	return p.Driver != nil
}

func (p *TOdbcTable) IsSetType() bool {
	return p.Type != nil
}

func (p *TOdbcTable) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TOdbcTable[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TOdbcTable) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Host = _field
	return nil
}
func (p *TOdbcTable) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Port = _field
	return nil
}
func (p *TOdbcTable) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *TOdbcTable) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Passwd = _field
	return nil
}
func (p *TOdbcTable) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Db = _field
	return nil
}
func (p *TOdbcTable) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Table = _field
	return nil
}
func (p *TOdbcTable) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Driver = _field
	return nil
}
func (p *TOdbcTable) ReadField8(iprot thrift.TProtocol) error {

	var _field *types.TOdbcTableType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TOdbcTableType(v)
		_field = &tmp
	}
	p.Type = _field
	return nil
}

func (p *TOdbcTable) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TOdbcTable"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TOdbcTable) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHost() {
		if err = oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Host); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TOdbcTable) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPort() {
		if err = oprot.WriteFieldBegin("port", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Port); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TOdbcTable) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TOdbcTable) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPasswd() {
		if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Passwd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TOdbcTable) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDb() {
		if err = oprot.WriteFieldBegin("db", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Db); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TOdbcTable) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTable() {
		if err = oprot.WriteFieldBegin("table", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Table); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TOdbcTable) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDriver() {
		if err = oprot.WriteFieldBegin("driver", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Driver); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TOdbcTable) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.I32, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TOdbcTable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TOdbcTable(%+v)", *p)

}

func (p *TOdbcTable) DeepEqual(ano *TOdbcTable) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Host) {
		return false
	}
	if !p.Field2DeepEqual(ano.Port) {
		return false
	}
	if !p.Field3DeepEqual(ano.User) {
		return false
	}
	if !p.Field4DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field5DeepEqual(ano.Db) {
		return false
	}
	if !p.Field6DeepEqual(ano.Table) {
		return false
	}
	if !p.Field7DeepEqual(ano.Driver) {
		return false
	}
	if !p.Field8DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *TOdbcTable) Field1DeepEqual(src *string) bool {

	if p.Host == src {
		return true
	} else if p.Host == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Host, *src) != 0 {
		return false
	}
	return true
}
func (p *TOdbcTable) Field2DeepEqual(src *string) bool {

	if p.Port == src {
		return true
	} else if p.Port == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Port, *src) != 0 {
		return false
	}
	return true
}
func (p *TOdbcTable) Field3DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *TOdbcTable) Field4DeepEqual(src *string) bool {

	if p.Passwd == src {
		return true
	} else if p.Passwd == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Passwd, *src) != 0 {
		return false
	}
	return true
}
func (p *TOdbcTable) Field5DeepEqual(src *string) bool {

	if p.Db == src {
		return true
	} else if p.Db == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Db, *src) != 0 {
		return false
	}
	return true
}
func (p *TOdbcTable) Field6DeepEqual(src *string) bool {

	if p.Table == src {
		return true
	} else if p.Table == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Table, *src) != 0 {
		return false
	}
	return true
}
func (p *TOdbcTable) Field7DeepEqual(src *string) bool {

	if p.Driver == src {
		return true
	} else if p.Driver == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Driver, *src) != 0 {
		return false
	}
	return true
}
func (p *TOdbcTable) Field8DeepEqual(src *types.TOdbcTableType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if *p.Type != *src {
		return false
	}
	return true
}

type TEsTable struct {
}

func NewTEsTable() *TEsTable {
	return &TEsTable{}
}

func (p *TEsTable) InitDefault() {
}

var fieldIDToName_TEsTable = map[int16]string{}

func (p *TEsTable) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TEsTable) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("TEsTable"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TEsTable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TEsTable(%+v)", *p)

}

func (p *TEsTable) DeepEqual(ano *TEsTable) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type TSchemaTable struct {
	TableType TSchemaTableType `thrift:"tableType,1,required" frugal:"1,required,TSchemaTableType" json:"tableType"`
}

func NewTSchemaTable() *TSchemaTable {
	return &TSchemaTable{}
}

func (p *TSchemaTable) InitDefault() {
}

func (p *TSchemaTable) GetTableType() (v TSchemaTableType) {
	return p.TableType
}
func (p *TSchemaTable) SetTableType(val TSchemaTableType) {
	p.TableType = val
}

var fieldIDToName_TSchemaTable = map[int16]string{
	1: "tableType",
}

func (p *TSchemaTable) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTableType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTableType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTableType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TSchemaTable[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TSchemaTable[fieldId]))
}

func (p *TSchemaTable) ReadField1(iprot thrift.TProtocol) error {

	var _field TSchemaTableType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TSchemaTableType(v)
	}
	p.TableType = _field
	return nil
}

func (p *TSchemaTable) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TSchemaTable"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TSchemaTable) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tableType", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.TableType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TSchemaTable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSchemaTable(%+v)", *p)

}

func (p *TSchemaTable) DeepEqual(ano *TSchemaTable) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TableType) {
		return false
	}
	return true
}

func (p *TSchemaTable) Field1DeepEqual(src TSchemaTableType) bool {

	if p.TableType != src {
		return false
	}
	return true
}

type TBrokerTable struct {
}

func NewTBrokerTable() *TBrokerTable {
	return &TBrokerTable{}
}

func (p *TBrokerTable) InitDefault() {
}

var fieldIDToName_TBrokerTable = map[int16]string{}

func (p *TBrokerTable) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TBrokerTable) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("TBrokerTable"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TBrokerTable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBrokerTable(%+v)", *p)

}

func (p *TBrokerTable) DeepEqual(ano *TBrokerTable) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type THiveTable struct {
	DbName     string            `thrift:"db_name,1,required" frugal:"1,required,string" json:"db_name"`
	TableName  string            `thrift:"table_name,2,required" frugal:"2,required,string" json:"table_name"`
	Properties map[string]string `thrift:"properties,3,required" frugal:"3,required,map<string:string>" json:"properties"`
}

func NewTHiveTable() *THiveTable {
	return &THiveTable{}
}

func (p *THiveTable) InitDefault() {
}

func (p *THiveTable) GetDbName() (v string) {
	return p.DbName
}

func (p *THiveTable) GetTableName() (v string) {
	return p.TableName
}

func (p *THiveTable) GetProperties() (v map[string]string) {
	return p.Properties
}
func (p *THiveTable) SetDbName(val string) {
	p.DbName = val
}
func (p *THiveTable) SetTableName(val string) {
	p.TableName = val
}
func (p *THiveTable) SetProperties(val map[string]string) {
	p.Properties = val
}

var fieldIDToName_THiveTable = map[int16]string{
	1: "db_name",
	2: "table_name",
	3: "properties",
}

func (p *THiveTable) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDbName bool = false
	var issetTableName bool = false
	var issetProperties bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetDbName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTableName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetProperties = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDbName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTableName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetProperties {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_THiveTable[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_THiveTable[fieldId]))
}

func (p *THiveTable) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DbName = _field
	return nil
}
func (p *THiveTable) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TableName = _field
	return nil
}
func (p *THiveTable) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Properties = _field
	return nil
}

func (p *THiveTable) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("THiveTable"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *THiveTable) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DbName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *THiveTable) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TableName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *THiveTable) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("properties", thrift.MAP, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
		return err
	}
	for k, v := range p.Properties {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *THiveTable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("THiveTable(%+v)", *p)

}

func (p *THiveTable) DeepEqual(ano *THiveTable) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DbName) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableName) {
		return false
	}
	if !p.Field3DeepEqual(ano.Properties) {
		return false
	}
	return true
}

func (p *THiveTable) Field1DeepEqual(src string) bool {

	if strings.Compare(p.DbName, src) != 0 {
		return false
	}
	return true
}
func (p *THiveTable) Field2DeepEqual(src string) bool {

	if strings.Compare(p.TableName, src) != 0 {
		return false
	}
	return true
}
func (p *THiveTable) Field3DeepEqual(src map[string]string) bool {

	if len(p.Properties) != len(src) {
		return false
	}
	for k, v := range p.Properties {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type TIcebergTable struct {
	DbName     string            `thrift:"db_name,1,required" frugal:"1,required,string" json:"db_name"`
	TableName  string            `thrift:"table_name,2,required" frugal:"2,required,string" json:"table_name"`
	Properties map[string]string `thrift:"properties,3,required" frugal:"3,required,map<string:string>" json:"properties"`
}

func NewTIcebergTable() *TIcebergTable {
	return &TIcebergTable{}
}

func (p *TIcebergTable) InitDefault() {
}

func (p *TIcebergTable) GetDbName() (v string) {
	return p.DbName
}

func (p *TIcebergTable) GetTableName() (v string) {
	return p.TableName
}

func (p *TIcebergTable) GetProperties() (v map[string]string) {
	return p.Properties
}
func (p *TIcebergTable) SetDbName(val string) {
	p.DbName = val
}
func (p *TIcebergTable) SetTableName(val string) {
	p.TableName = val
}
func (p *TIcebergTable) SetProperties(val map[string]string) {
	p.Properties = val
}

var fieldIDToName_TIcebergTable = map[int16]string{
	1: "db_name",
	2: "table_name",
	3: "properties",
}

func (p *TIcebergTable) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDbName bool = false
	var issetTableName bool = false
	var issetProperties bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetDbName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTableName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetProperties = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDbName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTableName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetProperties {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TIcebergTable[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TIcebergTable[fieldId]))
}

func (p *TIcebergTable) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DbName = _field
	return nil
}
func (p *TIcebergTable) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TableName = _field
	return nil
}
func (p *TIcebergTable) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Properties = _field
	return nil
}

func (p *TIcebergTable) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TIcebergTable"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TIcebergTable) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DbName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TIcebergTable) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TableName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TIcebergTable) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("properties", thrift.MAP, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
		return err
	}
	for k, v := range p.Properties {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TIcebergTable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIcebergTable(%+v)", *p)

}

func (p *TIcebergTable) DeepEqual(ano *TIcebergTable) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DbName) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableName) {
		return false
	}
	if !p.Field3DeepEqual(ano.Properties) {
		return false
	}
	return true
}

func (p *TIcebergTable) Field1DeepEqual(src string) bool {

	if strings.Compare(p.DbName, src) != 0 {
		return false
	}
	return true
}
func (p *TIcebergTable) Field2DeepEqual(src string) bool {

	if strings.Compare(p.TableName, src) != 0 {
		return false
	}
	return true
}
func (p *TIcebergTable) Field3DeepEqual(src map[string]string) bool {

	if len(p.Properties) != len(src) {
		return false
	}
	for k, v := range p.Properties {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type THudiTable struct {
	DbName     *string           `thrift:"dbName,1,optional" frugal:"1,optional,string" json:"dbName,omitempty"`
	TableName  *string           `thrift:"tableName,2,optional" frugal:"2,optional,string" json:"tableName,omitempty"`
	Properties map[string]string `thrift:"properties,3,optional" frugal:"3,optional,map<string:string>" json:"properties,omitempty"`
}

func NewTHudiTable() *THudiTable {
	return &THudiTable{}
}

func (p *THudiTable) InitDefault() {
}

var THudiTable_DbName_DEFAULT string

func (p *THudiTable) GetDbName() (v string) {
	if !p.IsSetDbName() {
		return THudiTable_DbName_DEFAULT
	}
	return *p.DbName
}

var THudiTable_TableName_DEFAULT string

func (p *THudiTable) GetTableName() (v string) {
	if !p.IsSetTableName() {
		return THudiTable_TableName_DEFAULT
	}
	return *p.TableName
}

var THudiTable_Properties_DEFAULT map[string]string

func (p *THudiTable) GetProperties() (v map[string]string) {
	if !p.IsSetProperties() {
		return THudiTable_Properties_DEFAULT
	}
	return p.Properties
}
func (p *THudiTable) SetDbName(val *string) {
	p.DbName = val
}
func (p *THudiTable) SetTableName(val *string) {
	p.TableName = val
}
func (p *THudiTable) SetProperties(val map[string]string) {
	p.Properties = val
}

var fieldIDToName_THudiTable = map[int16]string{
	1: "dbName",
	2: "tableName",
	3: "properties",
}

func (p *THudiTable) IsSetDbName() bool {
	return p.DbName != nil
}

func (p *THudiTable) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *THudiTable) IsSetProperties() bool {
	return p.Properties != nil
}

func (p *THudiTable) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_THudiTable[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *THudiTable) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbName = _field
	return nil
}
func (p *THudiTable) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableName = _field
	return nil
}
func (p *THudiTable) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Properties = _field
	return nil
}

func (p *THudiTable) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("THudiTable"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *THudiTable) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbName() {
		if err = oprot.WriteFieldBegin("dbName", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DbName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *THudiTable) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err = oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TableName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *THudiTable) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperties() {
		if err = oprot.WriteFieldBegin("properties", thrift.MAP, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
			return err
		}
		for k, v := range p.Properties {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *THudiTable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("THudiTable(%+v)", *p)

}

func (p *THudiTable) DeepEqual(ano *THudiTable) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DbName) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableName) {
		return false
	}
	if !p.Field3DeepEqual(ano.Properties) {
		return false
	}
	return true
}

func (p *THudiTable) Field1DeepEqual(src *string) bool {

	if p.DbName == src {
		return true
	} else if p.DbName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DbName, *src) != 0 {
		return false
	}
	return true
}
func (p *THudiTable) Field2DeepEqual(src *string) bool {

	if p.TableName == src {
		return true
	} else if p.TableName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TableName, *src) != 0 {
		return false
	}
	return true
}
func (p *THudiTable) Field3DeepEqual(src map[string]string) bool {

	if len(p.Properties) != len(src) {
		return false
	}
	for k, v := range p.Properties {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type TJdbcTable struct {
	JdbcUrl                   *string `thrift:"jdbc_url,1,optional" frugal:"1,optional,string" json:"jdbc_url,omitempty"`
	JdbcTableName             *string `thrift:"jdbc_table_name,2,optional" frugal:"2,optional,string" json:"jdbc_table_name,omitempty"`
	JdbcUser                  *string `thrift:"jdbc_user,3,optional" frugal:"3,optional,string" json:"jdbc_user,omitempty"`
	JdbcPassword              *string `thrift:"jdbc_password,4,optional" frugal:"4,optional,string" json:"jdbc_password,omitempty"`
	JdbcDriverUrl             *string `thrift:"jdbc_driver_url,5,optional" frugal:"5,optional,string" json:"jdbc_driver_url,omitempty"`
	JdbcResourceName          *string `thrift:"jdbc_resource_name,6,optional" frugal:"6,optional,string" json:"jdbc_resource_name,omitempty"`
	JdbcDriverClass           *string `thrift:"jdbc_driver_class,7,optional" frugal:"7,optional,string" json:"jdbc_driver_class,omitempty"`
	JdbcDriverChecksum        *string `thrift:"jdbc_driver_checksum,8,optional" frugal:"8,optional,string" json:"jdbc_driver_checksum,omitempty"`
	ConnectionPoolMinSize     *int32  `thrift:"connection_pool_min_size,9,optional" frugal:"9,optional,i32" json:"connection_pool_min_size,omitempty"`
	ConnectionPoolMaxSize     *int32  `thrift:"connection_pool_max_size,10,optional" frugal:"10,optional,i32" json:"connection_pool_max_size,omitempty"`
	ConnectionPoolMaxWaitTime *int32  `thrift:"connection_pool_max_wait_time,11,optional" frugal:"11,optional,i32" json:"connection_pool_max_wait_time,omitempty"`
	ConnectionPoolMaxLifeTime *int32  `thrift:"connection_pool_max_life_time,12,optional" frugal:"12,optional,i32" json:"connection_pool_max_life_time,omitempty"`
	ConnectionPoolKeepAlive   *bool   `thrift:"connection_pool_keep_alive,13,optional" frugal:"13,optional,bool" json:"connection_pool_keep_alive,omitempty"`
	CatalogId                 *int64  `thrift:"catalog_id,14,optional" frugal:"14,optional,i64" json:"catalog_id,omitempty"`
}

func NewTJdbcTable() *TJdbcTable {
	return &TJdbcTable{}
}

func (p *TJdbcTable) InitDefault() {
}

var TJdbcTable_JdbcUrl_DEFAULT string

func (p *TJdbcTable) GetJdbcUrl() (v string) {
	if !p.IsSetJdbcUrl() {
		return TJdbcTable_JdbcUrl_DEFAULT
	}
	return *p.JdbcUrl
}

var TJdbcTable_JdbcTableName_DEFAULT string

func (p *TJdbcTable) GetJdbcTableName() (v string) {
	if !p.IsSetJdbcTableName() {
		return TJdbcTable_JdbcTableName_DEFAULT
	}
	return *p.JdbcTableName
}

var TJdbcTable_JdbcUser_DEFAULT string

func (p *TJdbcTable) GetJdbcUser() (v string) {
	if !p.IsSetJdbcUser() {
		return TJdbcTable_JdbcUser_DEFAULT
	}
	return *p.JdbcUser
}

var TJdbcTable_JdbcPassword_DEFAULT string

func (p *TJdbcTable) GetJdbcPassword() (v string) {
	if !p.IsSetJdbcPassword() {
		return TJdbcTable_JdbcPassword_DEFAULT
	}
	return *p.JdbcPassword
}

var TJdbcTable_JdbcDriverUrl_DEFAULT string

func (p *TJdbcTable) GetJdbcDriverUrl() (v string) {
	if !p.IsSetJdbcDriverUrl() {
		return TJdbcTable_JdbcDriverUrl_DEFAULT
	}
	return *p.JdbcDriverUrl
}

var TJdbcTable_JdbcResourceName_DEFAULT string

func (p *TJdbcTable) GetJdbcResourceName() (v string) {
	if !p.IsSetJdbcResourceName() {
		return TJdbcTable_JdbcResourceName_DEFAULT
	}
	return *p.JdbcResourceName
}

var TJdbcTable_JdbcDriverClass_DEFAULT string

func (p *TJdbcTable) GetJdbcDriverClass() (v string) {
	if !p.IsSetJdbcDriverClass() {
		return TJdbcTable_JdbcDriverClass_DEFAULT
	}
	return *p.JdbcDriverClass
}

var TJdbcTable_JdbcDriverChecksum_DEFAULT string

func (p *TJdbcTable) GetJdbcDriverChecksum() (v string) {
	if !p.IsSetJdbcDriverChecksum() {
		return TJdbcTable_JdbcDriverChecksum_DEFAULT
	}
	return *p.JdbcDriverChecksum
}

var TJdbcTable_ConnectionPoolMinSize_DEFAULT int32

func (p *TJdbcTable) GetConnectionPoolMinSize() (v int32) {
	if !p.IsSetConnectionPoolMinSize() {
		return TJdbcTable_ConnectionPoolMinSize_DEFAULT
	}
	return *p.ConnectionPoolMinSize
}

var TJdbcTable_ConnectionPoolMaxSize_DEFAULT int32

func (p *TJdbcTable) GetConnectionPoolMaxSize() (v int32) {
	if !p.IsSetConnectionPoolMaxSize() {
		return TJdbcTable_ConnectionPoolMaxSize_DEFAULT
	}
	return *p.ConnectionPoolMaxSize
}

var TJdbcTable_ConnectionPoolMaxWaitTime_DEFAULT int32

func (p *TJdbcTable) GetConnectionPoolMaxWaitTime() (v int32) {
	if !p.IsSetConnectionPoolMaxWaitTime() {
		return TJdbcTable_ConnectionPoolMaxWaitTime_DEFAULT
	}
	return *p.ConnectionPoolMaxWaitTime
}

var TJdbcTable_ConnectionPoolMaxLifeTime_DEFAULT int32

func (p *TJdbcTable) GetConnectionPoolMaxLifeTime() (v int32) {
	if !p.IsSetConnectionPoolMaxLifeTime() {
		return TJdbcTable_ConnectionPoolMaxLifeTime_DEFAULT
	}
	return *p.ConnectionPoolMaxLifeTime
}

var TJdbcTable_ConnectionPoolKeepAlive_DEFAULT bool

func (p *TJdbcTable) GetConnectionPoolKeepAlive() (v bool) {
	if !p.IsSetConnectionPoolKeepAlive() {
		return TJdbcTable_ConnectionPoolKeepAlive_DEFAULT
	}
	return *p.ConnectionPoolKeepAlive
}

var TJdbcTable_CatalogId_DEFAULT int64

func (p *TJdbcTable) GetCatalogId() (v int64) {
	if !p.IsSetCatalogId() {
		return TJdbcTable_CatalogId_DEFAULT
	}
	return *p.CatalogId
}
func (p *TJdbcTable) SetJdbcUrl(val *string) {
	p.JdbcUrl = val
}
func (p *TJdbcTable) SetJdbcTableName(val *string) {
	p.JdbcTableName = val
}
func (p *TJdbcTable) SetJdbcUser(val *string) {
	p.JdbcUser = val
}
func (p *TJdbcTable) SetJdbcPassword(val *string) {
	p.JdbcPassword = val
}
func (p *TJdbcTable) SetJdbcDriverUrl(val *string) {
	p.JdbcDriverUrl = val
}
func (p *TJdbcTable) SetJdbcResourceName(val *string) {
	p.JdbcResourceName = val
}
func (p *TJdbcTable) SetJdbcDriverClass(val *string) {
	p.JdbcDriverClass = val
}
func (p *TJdbcTable) SetJdbcDriverChecksum(val *string) {
	p.JdbcDriverChecksum = val
}
func (p *TJdbcTable) SetConnectionPoolMinSize(val *int32) {
	p.ConnectionPoolMinSize = val
}
func (p *TJdbcTable) SetConnectionPoolMaxSize(val *int32) {
	p.ConnectionPoolMaxSize = val
}
func (p *TJdbcTable) SetConnectionPoolMaxWaitTime(val *int32) {
	p.ConnectionPoolMaxWaitTime = val
}
func (p *TJdbcTable) SetConnectionPoolMaxLifeTime(val *int32) {
	p.ConnectionPoolMaxLifeTime = val
}
func (p *TJdbcTable) SetConnectionPoolKeepAlive(val *bool) {
	p.ConnectionPoolKeepAlive = val
}
func (p *TJdbcTable) SetCatalogId(val *int64) {
	p.CatalogId = val
}

var fieldIDToName_TJdbcTable = map[int16]string{
	1:  "jdbc_url",
	2:  "jdbc_table_name",
	3:  "jdbc_user",
	4:  "jdbc_password",
	5:  "jdbc_driver_url",
	6:  "jdbc_resource_name",
	7:  "jdbc_driver_class",
	8:  "jdbc_driver_checksum",
	9:  "connection_pool_min_size",
	10: "connection_pool_max_size",
	11: "connection_pool_max_wait_time",
	12: "connection_pool_max_life_time",
	13: "connection_pool_keep_alive",
	14: "catalog_id",
}

func (p *TJdbcTable) IsSetJdbcUrl() bool {
	return p.JdbcUrl != nil
}

func (p *TJdbcTable) IsSetJdbcTableName() bool {
	return p.JdbcTableName != nil
}

func (p *TJdbcTable) IsSetJdbcUser() bool {
	return p.JdbcUser != nil
}

func (p *TJdbcTable) IsSetJdbcPassword() bool {
	return p.JdbcPassword != nil
}

func (p *TJdbcTable) IsSetJdbcDriverUrl() bool {
	return p.JdbcDriverUrl != nil
}

func (p *TJdbcTable) IsSetJdbcResourceName() bool {
	return p.JdbcResourceName != nil
}

func (p *TJdbcTable) IsSetJdbcDriverClass() bool {
	return p.JdbcDriverClass != nil
}

func (p *TJdbcTable) IsSetJdbcDriverChecksum() bool {
	return p.JdbcDriverChecksum != nil
}

func (p *TJdbcTable) IsSetConnectionPoolMinSize() bool {
	return p.ConnectionPoolMinSize != nil
}

func (p *TJdbcTable) IsSetConnectionPoolMaxSize() bool {
	return p.ConnectionPoolMaxSize != nil
}

func (p *TJdbcTable) IsSetConnectionPoolMaxWaitTime() bool {
	return p.ConnectionPoolMaxWaitTime != nil
}

func (p *TJdbcTable) IsSetConnectionPoolMaxLifeTime() bool {
	return p.ConnectionPoolMaxLifeTime != nil
}

func (p *TJdbcTable) IsSetConnectionPoolKeepAlive() bool {
	return p.ConnectionPoolKeepAlive != nil
}

func (p *TJdbcTable) IsSetCatalogId() bool {
	return p.CatalogId != nil
}

func (p *TJdbcTable) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TJdbcTable[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TJdbcTable) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JdbcUrl = _field
	return nil
}
func (p *TJdbcTable) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JdbcTableName = _field
	return nil
}
func (p *TJdbcTable) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JdbcUser = _field
	return nil
}
func (p *TJdbcTable) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JdbcPassword = _field
	return nil
}
func (p *TJdbcTable) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JdbcDriverUrl = _field
	return nil
}
func (p *TJdbcTable) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JdbcResourceName = _field
	return nil
}
func (p *TJdbcTable) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JdbcDriverClass = _field
	return nil
}
func (p *TJdbcTable) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JdbcDriverChecksum = _field
	return nil
}
func (p *TJdbcTable) ReadField9(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ConnectionPoolMinSize = _field
	return nil
}
func (p *TJdbcTable) ReadField10(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ConnectionPoolMaxSize = _field
	return nil
}
func (p *TJdbcTable) ReadField11(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ConnectionPoolMaxWaitTime = _field
	return nil
}
func (p *TJdbcTable) ReadField12(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ConnectionPoolMaxLifeTime = _field
	return nil
}
func (p *TJdbcTable) ReadField13(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ConnectionPoolKeepAlive = _field
	return nil
}
func (p *TJdbcTable) ReadField14(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CatalogId = _field
	return nil
}

func (p *TJdbcTable) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TJdbcTable"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TJdbcTable) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetJdbcUrl() {
		if err = oprot.WriteFieldBegin("jdbc_url", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JdbcUrl); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TJdbcTable) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetJdbcTableName() {
		if err = oprot.WriteFieldBegin("jdbc_table_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JdbcTableName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TJdbcTable) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetJdbcUser() {
		if err = oprot.WriteFieldBegin("jdbc_user", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JdbcUser); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TJdbcTable) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetJdbcPassword() {
		if err = oprot.WriteFieldBegin("jdbc_password", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JdbcPassword); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TJdbcTable) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetJdbcDriverUrl() {
		if err = oprot.WriteFieldBegin("jdbc_driver_url", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JdbcDriverUrl); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TJdbcTable) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetJdbcResourceName() {
		if err = oprot.WriteFieldBegin("jdbc_resource_name", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JdbcResourceName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TJdbcTable) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetJdbcDriverClass() {
		if err = oprot.WriteFieldBegin("jdbc_driver_class", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JdbcDriverClass); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TJdbcTable) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetJdbcDriverChecksum() {
		if err = oprot.WriteFieldBegin("jdbc_driver_checksum", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JdbcDriverChecksum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TJdbcTable) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetConnectionPoolMinSize() {
		if err = oprot.WriteFieldBegin("connection_pool_min_size", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ConnectionPoolMinSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TJdbcTable) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetConnectionPoolMaxSize() {
		if err = oprot.WriteFieldBegin("connection_pool_max_size", thrift.I32, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ConnectionPoolMaxSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TJdbcTable) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetConnectionPoolMaxWaitTime() {
		if err = oprot.WriteFieldBegin("connection_pool_max_wait_time", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ConnectionPoolMaxWaitTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TJdbcTable) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetConnectionPoolMaxLifeTime() {
		if err = oprot.WriteFieldBegin("connection_pool_max_life_time", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ConnectionPoolMaxLifeTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TJdbcTable) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetConnectionPoolKeepAlive() {
		if err = oprot.WriteFieldBegin("connection_pool_keep_alive", thrift.BOOL, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ConnectionPoolKeepAlive); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TJdbcTable) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalogId() {
		if err = oprot.WriteFieldBegin("catalog_id", thrift.I64, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CatalogId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TJdbcTable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TJdbcTable(%+v)", *p)

}

func (p *TJdbcTable) DeepEqual(ano *TJdbcTable) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.JdbcUrl) {
		return false
	}
	if !p.Field2DeepEqual(ano.JdbcTableName) {
		return false
	}
	if !p.Field3DeepEqual(ano.JdbcUser) {
		return false
	}
	if !p.Field4DeepEqual(ano.JdbcPassword) {
		return false
	}
	if !p.Field5DeepEqual(ano.JdbcDriverUrl) {
		return false
	}
	if !p.Field6DeepEqual(ano.JdbcResourceName) {
		return false
	}
	if !p.Field7DeepEqual(ano.JdbcDriverClass) {
		return false
	}
	if !p.Field8DeepEqual(ano.JdbcDriverChecksum) {
		return false
	}
	if !p.Field9DeepEqual(ano.ConnectionPoolMinSize) {
		return false
	}
	if !p.Field10DeepEqual(ano.ConnectionPoolMaxSize) {
		return false
	}
	if !p.Field11DeepEqual(ano.ConnectionPoolMaxWaitTime) {
		return false
	}
	if !p.Field12DeepEqual(ano.ConnectionPoolMaxLifeTime) {
		return false
	}
	if !p.Field13DeepEqual(ano.ConnectionPoolKeepAlive) {
		return false
	}
	if !p.Field14DeepEqual(ano.CatalogId) {
		return false
	}
	return true
}

func (p *TJdbcTable) Field1DeepEqual(src *string) bool {

	if p.JdbcUrl == src {
		return true
	} else if p.JdbcUrl == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JdbcUrl, *src) != 0 {
		return false
	}
	return true
}
func (p *TJdbcTable) Field2DeepEqual(src *string) bool {

	if p.JdbcTableName == src {
		return true
	} else if p.JdbcTableName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JdbcTableName, *src) != 0 {
		return false
	}
	return true
}
func (p *TJdbcTable) Field3DeepEqual(src *string) bool {

	if p.JdbcUser == src {
		return true
	} else if p.JdbcUser == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JdbcUser, *src) != 0 {
		return false
	}
	return true
}
func (p *TJdbcTable) Field4DeepEqual(src *string) bool {

	if p.JdbcPassword == src {
		return true
	} else if p.JdbcPassword == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JdbcPassword, *src) != 0 {
		return false
	}
	return true
}
func (p *TJdbcTable) Field5DeepEqual(src *string) bool {

	if p.JdbcDriverUrl == src {
		return true
	} else if p.JdbcDriverUrl == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JdbcDriverUrl, *src) != 0 {
		return false
	}
	return true
}
func (p *TJdbcTable) Field6DeepEqual(src *string) bool {

	if p.JdbcResourceName == src {
		return true
	} else if p.JdbcResourceName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JdbcResourceName, *src) != 0 {
		return false
	}
	return true
}
func (p *TJdbcTable) Field7DeepEqual(src *string) bool {

	if p.JdbcDriverClass == src {
		return true
	} else if p.JdbcDriverClass == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JdbcDriverClass, *src) != 0 {
		return false
	}
	return true
}
func (p *TJdbcTable) Field8DeepEqual(src *string) bool {

	if p.JdbcDriverChecksum == src {
		return true
	} else if p.JdbcDriverChecksum == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JdbcDriverChecksum, *src) != 0 {
		return false
	}
	return true
}
func (p *TJdbcTable) Field9DeepEqual(src *int32) bool {

	if p.ConnectionPoolMinSize == src {
		return true
	} else if p.ConnectionPoolMinSize == nil || src == nil {
		return false
	}
	if *p.ConnectionPoolMinSize != *src {
		return false
	}
	return true
}
func (p *TJdbcTable) Field10DeepEqual(src *int32) bool {

	if p.ConnectionPoolMaxSize == src {
		return true
	} else if p.ConnectionPoolMaxSize == nil || src == nil {
		return false
	}
	if *p.ConnectionPoolMaxSize != *src {
		return false
	}
	return true
}
func (p *TJdbcTable) Field11DeepEqual(src *int32) bool {

	if p.ConnectionPoolMaxWaitTime == src {
		return true
	} else if p.ConnectionPoolMaxWaitTime == nil || src == nil {
		return false
	}
	if *p.ConnectionPoolMaxWaitTime != *src {
		return false
	}
	return true
}
func (p *TJdbcTable) Field12DeepEqual(src *int32) bool {

	if p.ConnectionPoolMaxLifeTime == src {
		return true
	} else if p.ConnectionPoolMaxLifeTime == nil || src == nil {
		return false
	}
	if *p.ConnectionPoolMaxLifeTime != *src {
		return false
	}
	return true
}
func (p *TJdbcTable) Field13DeepEqual(src *bool) bool {

	if p.ConnectionPoolKeepAlive == src {
		return true
	} else if p.ConnectionPoolKeepAlive == nil || src == nil {
		return false
	}
	if *p.ConnectionPoolKeepAlive != *src {
		return false
	}
	return true
}
func (p *TJdbcTable) Field14DeepEqual(src *int64) bool {

	if p.CatalogId == src {
		return true
	} else if p.CatalogId == nil || src == nil {
		return false
	}
	if *p.CatalogId != *src {
		return false
	}
	return true
}

type TMCTable struct {
	Region       *string `thrift:"region,1,optional" frugal:"1,optional,string" json:"region,omitempty"`
	Project      *string `thrift:"project,2,optional" frugal:"2,optional,string" json:"project,omitempty"`
	Table        *string `thrift:"table,3,optional" frugal:"3,optional,string" json:"table,omitempty"`
	AccessKey    *string `thrift:"access_key,4,optional" frugal:"4,optional,string" json:"access_key,omitempty"`
	SecretKey    *string `thrift:"secret_key,5,optional" frugal:"5,optional,string" json:"secret_key,omitempty"`
	PublicAccess *string `thrift:"public_access,6,optional" frugal:"6,optional,string" json:"public_access,omitempty"`
	OdpsUrl      *string `thrift:"odps_url,7,optional" frugal:"7,optional,string" json:"odps_url,omitempty"`
	TunnelUrl    *string `thrift:"tunnel_url,8,optional" frugal:"8,optional,string" json:"tunnel_url,omitempty"`
}

func NewTMCTable() *TMCTable {
	return &TMCTable{}
}

func (p *TMCTable) InitDefault() {
}

var TMCTable_Region_DEFAULT string

func (p *TMCTable) GetRegion() (v string) {
	if !p.IsSetRegion() {
		return TMCTable_Region_DEFAULT
	}
	return *p.Region
}

var TMCTable_Project_DEFAULT string

func (p *TMCTable) GetProject() (v string) {
	if !p.IsSetProject() {
		return TMCTable_Project_DEFAULT
	}
	return *p.Project
}

var TMCTable_Table_DEFAULT string

func (p *TMCTable) GetTable() (v string) {
	if !p.IsSetTable() {
		return TMCTable_Table_DEFAULT
	}
	return *p.Table
}

var TMCTable_AccessKey_DEFAULT string

func (p *TMCTable) GetAccessKey() (v string) {
	if !p.IsSetAccessKey() {
		return TMCTable_AccessKey_DEFAULT
	}
	return *p.AccessKey
}

var TMCTable_SecretKey_DEFAULT string

func (p *TMCTable) GetSecretKey() (v string) {
	if !p.IsSetSecretKey() {
		return TMCTable_SecretKey_DEFAULT
	}
	return *p.SecretKey
}

var TMCTable_PublicAccess_DEFAULT string

func (p *TMCTable) GetPublicAccess() (v string) {
	if !p.IsSetPublicAccess() {
		return TMCTable_PublicAccess_DEFAULT
	}
	return *p.PublicAccess
}

var TMCTable_OdpsUrl_DEFAULT string

func (p *TMCTable) GetOdpsUrl() (v string) {
	if !p.IsSetOdpsUrl() {
		return TMCTable_OdpsUrl_DEFAULT
	}
	return *p.OdpsUrl
}

var TMCTable_TunnelUrl_DEFAULT string

func (p *TMCTable) GetTunnelUrl() (v string) {
	if !p.IsSetTunnelUrl() {
		return TMCTable_TunnelUrl_DEFAULT
	}
	return *p.TunnelUrl
}
func (p *TMCTable) SetRegion(val *string) {
	p.Region = val
}
func (p *TMCTable) SetProject(val *string) {
	p.Project = val
}
func (p *TMCTable) SetTable(val *string) {
	p.Table = val
}
func (p *TMCTable) SetAccessKey(val *string) {
	p.AccessKey = val
}
func (p *TMCTable) SetSecretKey(val *string) {
	p.SecretKey = val
}
func (p *TMCTable) SetPublicAccess(val *string) {
	p.PublicAccess = val
}
func (p *TMCTable) SetOdpsUrl(val *string) {
	p.OdpsUrl = val
}
func (p *TMCTable) SetTunnelUrl(val *string) {
	p.TunnelUrl = val
}

var fieldIDToName_TMCTable = map[int16]string{
	1: "region",
	2: "project",
	3: "table",
	4: "access_key",
	5: "secret_key",
	6: "public_access",
	7: "odps_url",
	8: "tunnel_url",
}

func (p *TMCTable) IsSetRegion() bool {
	return p.Region != nil
}

func (p *TMCTable) IsSetProject() bool {
	return p.Project != nil
}

func (p *TMCTable) IsSetTable() bool {
	return p.Table != nil
}

func (p *TMCTable) IsSetAccessKey() bool {
	return p.AccessKey != nil
}

func (p *TMCTable) IsSetSecretKey() bool {
	return p.SecretKey != nil
}

func (p *TMCTable) IsSetPublicAccess() bool {
	return p.PublicAccess != nil
}

func (p *TMCTable) IsSetOdpsUrl() bool {
	return p.OdpsUrl != nil
}

func (p *TMCTable) IsSetTunnelUrl() bool {
	return p.TunnelUrl != nil
}

func (p *TMCTable) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMCTable[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TMCTable) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Region = _field
	return nil
}
func (p *TMCTable) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Project = _field
	return nil
}
func (p *TMCTable) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Table = _field
	return nil
}
func (p *TMCTable) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AccessKey = _field
	return nil
}
func (p *TMCTable) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SecretKey = _field
	return nil
}
func (p *TMCTable) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PublicAccess = _field
	return nil
}
func (p *TMCTable) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OdpsUrl = _field
	return nil
}
func (p *TMCTable) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TunnelUrl = _field
	return nil
}

func (p *TMCTable) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMCTable"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMCTable) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegion() {
		if err = oprot.WriteFieldBegin("region", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Region); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMCTable) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetProject() {
		if err = oprot.WriteFieldBegin("project", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Project); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TMCTable) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTable() {
		if err = oprot.WriteFieldBegin("table", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Table); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TMCTable) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccessKey() {
		if err = oprot.WriteFieldBegin("access_key", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AccessKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TMCTable) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecretKey() {
		if err = oprot.WriteFieldBegin("secret_key", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SecretKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TMCTable) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPublicAccess() {
		if err = oprot.WriteFieldBegin("public_access", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PublicAccess); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TMCTable) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetOdpsUrl() {
		if err = oprot.WriteFieldBegin("odps_url", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OdpsUrl); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TMCTable) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTunnelUrl() {
		if err = oprot.WriteFieldBegin("tunnel_url", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TunnelUrl); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TMCTable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCTable(%+v)", *p)

}

func (p *TMCTable) DeepEqual(ano *TMCTable) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Region) {
		return false
	}
	if !p.Field2DeepEqual(ano.Project) {
		return false
	}
	if !p.Field3DeepEqual(ano.Table) {
		return false
	}
	if !p.Field4DeepEqual(ano.AccessKey) {
		return false
	}
	if !p.Field5DeepEqual(ano.SecretKey) {
		return false
	}
	if !p.Field6DeepEqual(ano.PublicAccess) {
		return false
	}
	if !p.Field7DeepEqual(ano.OdpsUrl) {
		return false
	}
	if !p.Field8DeepEqual(ano.TunnelUrl) {
		return false
	}
	return true
}

func (p *TMCTable) Field1DeepEqual(src *string) bool {

	if p.Region == src {
		return true
	} else if p.Region == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Region, *src) != 0 {
		return false
	}
	return true
}
func (p *TMCTable) Field2DeepEqual(src *string) bool {

	if p.Project == src {
		return true
	} else if p.Project == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Project, *src) != 0 {
		return false
	}
	return true
}
func (p *TMCTable) Field3DeepEqual(src *string) bool {

	if p.Table == src {
		return true
	} else if p.Table == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Table, *src) != 0 {
		return false
	}
	return true
}
func (p *TMCTable) Field4DeepEqual(src *string) bool {

	if p.AccessKey == src {
		return true
	} else if p.AccessKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AccessKey, *src) != 0 {
		return false
	}
	return true
}
func (p *TMCTable) Field5DeepEqual(src *string) bool {

	if p.SecretKey == src {
		return true
	} else if p.SecretKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SecretKey, *src) != 0 {
		return false
	}
	return true
}
func (p *TMCTable) Field6DeepEqual(src *string) bool {

	if p.PublicAccess == src {
		return true
	} else if p.PublicAccess == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PublicAccess, *src) != 0 {
		return false
	}
	return true
}
func (p *TMCTable) Field7DeepEqual(src *string) bool {

	if p.OdpsUrl == src {
		return true
	} else if p.OdpsUrl == nil || src == nil {
		return false
	}
	if strings.Compare(*p.OdpsUrl, *src) != 0 {
		return false
	}
	return true
}
func (p *TMCTable) Field8DeepEqual(src *string) bool {

	if p.TunnelUrl == src {
		return true
	} else if p.TunnelUrl == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TunnelUrl, *src) != 0 {
		return false
	}
	return true
}

type TTrinoConnectorTable struct {
	DbName     *string           `thrift:"db_name,1,optional" frugal:"1,optional,string" json:"db_name,omitempty"`
	TableName  *string           `thrift:"table_name,2,optional" frugal:"2,optional,string" json:"table_name,omitempty"`
	Properties map[string]string `thrift:"properties,3,optional" frugal:"3,optional,map<string:string>" json:"properties,omitempty"`
}

func NewTTrinoConnectorTable() *TTrinoConnectorTable {
	return &TTrinoConnectorTable{}
}

func (p *TTrinoConnectorTable) InitDefault() {
}

var TTrinoConnectorTable_DbName_DEFAULT string

func (p *TTrinoConnectorTable) GetDbName() (v string) {
	if !p.IsSetDbName() {
		return TTrinoConnectorTable_DbName_DEFAULT
	}
	return *p.DbName
}

var TTrinoConnectorTable_TableName_DEFAULT string

func (p *TTrinoConnectorTable) GetTableName() (v string) {
	if !p.IsSetTableName() {
		return TTrinoConnectorTable_TableName_DEFAULT
	}
	return *p.TableName
}

var TTrinoConnectorTable_Properties_DEFAULT map[string]string

func (p *TTrinoConnectorTable) GetProperties() (v map[string]string) {
	if !p.IsSetProperties() {
		return TTrinoConnectorTable_Properties_DEFAULT
	}
	return p.Properties
}
func (p *TTrinoConnectorTable) SetDbName(val *string) {
	p.DbName = val
}
func (p *TTrinoConnectorTable) SetTableName(val *string) {
	p.TableName = val
}
func (p *TTrinoConnectorTable) SetProperties(val map[string]string) {
	p.Properties = val
}

var fieldIDToName_TTrinoConnectorTable = map[int16]string{
	1: "db_name",
	2: "table_name",
	3: "properties",
}

func (p *TTrinoConnectorTable) IsSetDbName() bool {
	return p.DbName != nil
}

func (p *TTrinoConnectorTable) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *TTrinoConnectorTable) IsSetProperties() bool {
	return p.Properties != nil
}

func (p *TTrinoConnectorTable) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTrinoConnectorTable[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTrinoConnectorTable) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbName = _field
	return nil
}
func (p *TTrinoConnectorTable) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableName = _field
	return nil
}
func (p *TTrinoConnectorTable) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Properties = _field
	return nil
}

func (p *TTrinoConnectorTable) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTrinoConnectorTable"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTrinoConnectorTable) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbName() {
		if err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DbName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTrinoConnectorTable) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err = oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TableName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTrinoConnectorTable) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperties() {
		if err = oprot.WriteFieldBegin("properties", thrift.MAP, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
			return err
		}
		for k, v := range p.Properties {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTrinoConnectorTable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTrinoConnectorTable(%+v)", *p)

}

func (p *TTrinoConnectorTable) DeepEqual(ano *TTrinoConnectorTable) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DbName) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableName) {
		return false
	}
	if !p.Field3DeepEqual(ano.Properties) {
		return false
	}
	return true
}

func (p *TTrinoConnectorTable) Field1DeepEqual(src *string) bool {

	if p.DbName == src {
		return true
	} else if p.DbName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DbName, *src) != 0 {
		return false
	}
	return true
}
func (p *TTrinoConnectorTable) Field2DeepEqual(src *string) bool {

	if p.TableName == src {
		return true
	} else if p.TableName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TableName, *src) != 0 {
		return false
	}
	return true
}
func (p *TTrinoConnectorTable) Field3DeepEqual(src map[string]string) bool {

	if len(p.Properties) != len(src) {
		return false
	}
	for k, v := range p.Properties {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type TLakeSoulTable struct {
	DbName     *string           `thrift:"db_name,1,optional" frugal:"1,optional,string" json:"db_name,omitempty"`
	TableName  *string           `thrift:"table_name,2,optional" frugal:"2,optional,string" json:"table_name,omitempty"`
	Properties map[string]string `thrift:"properties,3,optional" frugal:"3,optional,map<string:string>" json:"properties,omitempty"`
}

func NewTLakeSoulTable() *TLakeSoulTable {
	return &TLakeSoulTable{}
}

func (p *TLakeSoulTable) InitDefault() {
}

var TLakeSoulTable_DbName_DEFAULT string

func (p *TLakeSoulTable) GetDbName() (v string) {
	if !p.IsSetDbName() {
		return TLakeSoulTable_DbName_DEFAULT
	}
	return *p.DbName
}

var TLakeSoulTable_TableName_DEFAULT string

func (p *TLakeSoulTable) GetTableName() (v string) {
	if !p.IsSetTableName() {
		return TLakeSoulTable_TableName_DEFAULT
	}
	return *p.TableName
}

var TLakeSoulTable_Properties_DEFAULT map[string]string

func (p *TLakeSoulTable) GetProperties() (v map[string]string) {
	if !p.IsSetProperties() {
		return TLakeSoulTable_Properties_DEFAULT
	}
	return p.Properties
}
func (p *TLakeSoulTable) SetDbName(val *string) {
	p.DbName = val
}
func (p *TLakeSoulTable) SetTableName(val *string) {
	p.TableName = val
}
func (p *TLakeSoulTable) SetProperties(val map[string]string) {
	p.Properties = val
}

var fieldIDToName_TLakeSoulTable = map[int16]string{
	1: "db_name",
	2: "table_name",
	3: "properties",
}

func (p *TLakeSoulTable) IsSetDbName() bool {
	return p.DbName != nil
}

func (p *TLakeSoulTable) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *TLakeSoulTable) IsSetProperties() bool {
	return p.Properties != nil
}

func (p *TLakeSoulTable) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TLakeSoulTable[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TLakeSoulTable) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbName = _field
	return nil
}
func (p *TLakeSoulTable) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableName = _field
	return nil
}
func (p *TLakeSoulTable) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Properties = _field
	return nil
}

func (p *TLakeSoulTable) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TLakeSoulTable"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TLakeSoulTable) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbName() {
		if err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DbName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TLakeSoulTable) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err = oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TableName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TLakeSoulTable) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperties() {
		if err = oprot.WriteFieldBegin("properties", thrift.MAP, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
			return err
		}
		for k, v := range p.Properties {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TLakeSoulTable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLakeSoulTable(%+v)", *p)

}

func (p *TLakeSoulTable) DeepEqual(ano *TLakeSoulTable) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DbName) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableName) {
		return false
	}
	if !p.Field3DeepEqual(ano.Properties) {
		return false
	}
	return true
}

func (p *TLakeSoulTable) Field1DeepEqual(src *string) bool {

	if p.DbName == src {
		return true
	} else if p.DbName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DbName, *src) != 0 {
		return false
	}
	return true
}
func (p *TLakeSoulTable) Field2DeepEqual(src *string) bool {

	if p.TableName == src {
		return true
	} else if p.TableName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TableName, *src) != 0 {
		return false
	}
	return true
}
func (p *TLakeSoulTable) Field3DeepEqual(src map[string]string) bool {

	if len(p.Properties) != len(src) {
		return false
	}
	for k, v := range p.Properties {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type TTableDescriptor struct {
	Id                  types.TTableId        `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	TableType           types.TTableType      `thrift:"tableType,2,required" frugal:"2,required,TTableType" json:"tableType"`
	NumCols             int32                 `thrift:"numCols,3,required" frugal:"3,required,i32" json:"numCols"`
	NumClusteringCols   int32                 `thrift:"numClusteringCols,4,required" frugal:"4,required,i32" json:"numClusteringCols"`
	TableName           string                `thrift:"tableName,7,required" frugal:"7,required,string" json:"tableName"`
	DbName              string                `thrift:"dbName,8,required" frugal:"8,required,string" json:"dbName"`
	MysqlTable          *TMySQLTable          `thrift:"mysqlTable,10,optional" frugal:"10,optional,TMySQLTable" json:"mysqlTable,omitempty"`
	OlapTable           *TOlapTable           `thrift:"olapTable,11,optional" frugal:"11,optional,TOlapTable" json:"olapTable,omitempty"`
	SchemaTable         *TSchemaTable         `thrift:"schemaTable,12,optional" frugal:"12,optional,TSchemaTable" json:"schemaTable,omitempty"`
	BrokerTable         *TBrokerTable         `thrift:"BrokerTable,14,optional" frugal:"14,optional,TBrokerTable" json:"BrokerTable,omitempty"`
	EsTable             *TEsTable             `thrift:"esTable,15,optional" frugal:"15,optional,TEsTable" json:"esTable,omitempty"`
	OdbcTable           *TOdbcTable           `thrift:"odbcTable,16,optional" frugal:"16,optional,TOdbcTable" json:"odbcTable,omitempty"`
	HiveTable           *THiveTable           `thrift:"hiveTable,17,optional" frugal:"17,optional,THiveTable" json:"hiveTable,omitempty"`
	IcebergTable        *TIcebergTable        `thrift:"icebergTable,18,optional" frugal:"18,optional,TIcebergTable" json:"icebergTable,omitempty"`
	HudiTable           *THudiTable           `thrift:"hudiTable,19,optional" frugal:"19,optional,THudiTable" json:"hudiTable,omitempty"`
	JdbcTable           *TJdbcTable           `thrift:"jdbcTable,20,optional" frugal:"20,optional,TJdbcTable" json:"jdbcTable,omitempty"`
	McTable             *TMCTable             `thrift:"mcTable,21,optional" frugal:"21,optional,TMCTable" json:"mcTable,omitempty"`
	TrinoConnectorTable *TTrinoConnectorTable `thrift:"trinoConnectorTable,22,optional" frugal:"22,optional,TTrinoConnectorTable" json:"trinoConnectorTable,omitempty"`
	LakesoulTable       *TLakeSoulTable       `thrift:"lakesoulTable,23,optional" frugal:"23,optional,TLakeSoulTable" json:"lakesoulTable,omitempty"`
}

func NewTTableDescriptor() *TTableDescriptor {
	return &TTableDescriptor{}
}

func (p *TTableDescriptor) InitDefault() {
}

func (p *TTableDescriptor) GetId() (v types.TTableId) {
	return p.Id
}

func (p *TTableDescriptor) GetTableType() (v types.TTableType) {
	return p.TableType
}

func (p *TTableDescriptor) GetNumCols() (v int32) {
	return p.NumCols
}

func (p *TTableDescriptor) GetNumClusteringCols() (v int32) {
	return p.NumClusteringCols
}

func (p *TTableDescriptor) GetTableName() (v string) {
	return p.TableName
}

func (p *TTableDescriptor) GetDbName() (v string) {
	return p.DbName
}

var TTableDescriptor_MysqlTable_DEFAULT *TMySQLTable

func (p *TTableDescriptor) GetMysqlTable() (v *TMySQLTable) {
	if !p.IsSetMysqlTable() {
		return TTableDescriptor_MysqlTable_DEFAULT
	}
	return p.MysqlTable
}

var TTableDescriptor_OlapTable_DEFAULT *TOlapTable

func (p *TTableDescriptor) GetOlapTable() (v *TOlapTable) {
	if !p.IsSetOlapTable() {
		return TTableDescriptor_OlapTable_DEFAULT
	}
	return p.OlapTable
}

var TTableDescriptor_SchemaTable_DEFAULT *TSchemaTable

func (p *TTableDescriptor) GetSchemaTable() (v *TSchemaTable) {
	if !p.IsSetSchemaTable() {
		return TTableDescriptor_SchemaTable_DEFAULT
	}
	return p.SchemaTable
}

var TTableDescriptor_BrokerTable_DEFAULT *TBrokerTable

func (p *TTableDescriptor) GetBrokerTable() (v *TBrokerTable) {
	if !p.IsSetBrokerTable() {
		return TTableDescriptor_BrokerTable_DEFAULT
	}
	return p.BrokerTable
}

var TTableDescriptor_EsTable_DEFAULT *TEsTable

func (p *TTableDescriptor) GetEsTable() (v *TEsTable) {
	if !p.IsSetEsTable() {
		return TTableDescriptor_EsTable_DEFAULT
	}
	return p.EsTable
}

var TTableDescriptor_OdbcTable_DEFAULT *TOdbcTable

func (p *TTableDescriptor) GetOdbcTable() (v *TOdbcTable) {
	if !p.IsSetOdbcTable() {
		return TTableDescriptor_OdbcTable_DEFAULT
	}
	return p.OdbcTable
}

var TTableDescriptor_HiveTable_DEFAULT *THiveTable

func (p *TTableDescriptor) GetHiveTable() (v *THiveTable) {
	if !p.IsSetHiveTable() {
		return TTableDescriptor_HiveTable_DEFAULT
	}
	return p.HiveTable
}

var TTableDescriptor_IcebergTable_DEFAULT *TIcebergTable

func (p *TTableDescriptor) GetIcebergTable() (v *TIcebergTable) {
	if !p.IsSetIcebergTable() {
		return TTableDescriptor_IcebergTable_DEFAULT
	}
	return p.IcebergTable
}

var TTableDescriptor_HudiTable_DEFAULT *THudiTable

func (p *TTableDescriptor) GetHudiTable() (v *THudiTable) {
	if !p.IsSetHudiTable() {
		return TTableDescriptor_HudiTable_DEFAULT
	}
	return p.HudiTable
}

var TTableDescriptor_JdbcTable_DEFAULT *TJdbcTable

func (p *TTableDescriptor) GetJdbcTable() (v *TJdbcTable) {
	if !p.IsSetJdbcTable() {
		return TTableDescriptor_JdbcTable_DEFAULT
	}
	return p.JdbcTable
}

var TTableDescriptor_McTable_DEFAULT *TMCTable

func (p *TTableDescriptor) GetMcTable() (v *TMCTable) {
	if !p.IsSetMcTable() {
		return TTableDescriptor_McTable_DEFAULT
	}
	return p.McTable
}

var TTableDescriptor_TrinoConnectorTable_DEFAULT *TTrinoConnectorTable

func (p *TTableDescriptor) GetTrinoConnectorTable() (v *TTrinoConnectorTable) {
	if !p.IsSetTrinoConnectorTable() {
		return TTableDescriptor_TrinoConnectorTable_DEFAULT
	}
	return p.TrinoConnectorTable
}

var TTableDescriptor_LakesoulTable_DEFAULT *TLakeSoulTable

func (p *TTableDescriptor) GetLakesoulTable() (v *TLakeSoulTable) {
	if !p.IsSetLakesoulTable() {
		return TTableDescriptor_LakesoulTable_DEFAULT
	}
	return p.LakesoulTable
}
func (p *TTableDescriptor) SetId(val types.TTableId) {
	p.Id = val
}
func (p *TTableDescriptor) SetTableType(val types.TTableType) {
	p.TableType = val
}
func (p *TTableDescriptor) SetNumCols(val int32) {
	p.NumCols = val
}
func (p *TTableDescriptor) SetNumClusteringCols(val int32) {
	p.NumClusteringCols = val
}
func (p *TTableDescriptor) SetTableName(val string) {
	p.TableName = val
}
func (p *TTableDescriptor) SetDbName(val string) {
	p.DbName = val
}
func (p *TTableDescriptor) SetMysqlTable(val *TMySQLTable) {
	p.MysqlTable = val
}
func (p *TTableDescriptor) SetOlapTable(val *TOlapTable) {
	p.OlapTable = val
}
func (p *TTableDescriptor) SetSchemaTable(val *TSchemaTable) {
	p.SchemaTable = val
}
func (p *TTableDescriptor) SetBrokerTable(val *TBrokerTable) {
	p.BrokerTable = val
}
func (p *TTableDescriptor) SetEsTable(val *TEsTable) {
	p.EsTable = val
}
func (p *TTableDescriptor) SetOdbcTable(val *TOdbcTable) {
	p.OdbcTable = val
}
func (p *TTableDescriptor) SetHiveTable(val *THiveTable) {
	p.HiveTable = val
}
func (p *TTableDescriptor) SetIcebergTable(val *TIcebergTable) {
	p.IcebergTable = val
}
func (p *TTableDescriptor) SetHudiTable(val *THudiTable) {
	p.HudiTable = val
}
func (p *TTableDescriptor) SetJdbcTable(val *TJdbcTable) {
	p.JdbcTable = val
}
func (p *TTableDescriptor) SetMcTable(val *TMCTable) {
	p.McTable = val
}
func (p *TTableDescriptor) SetTrinoConnectorTable(val *TTrinoConnectorTable) {
	p.TrinoConnectorTable = val
}
func (p *TTableDescriptor) SetLakesoulTable(val *TLakeSoulTable) {
	p.LakesoulTable = val
}

var fieldIDToName_TTableDescriptor = map[int16]string{
	1:  "id",
	2:  "tableType",
	3:  "numCols",
	4:  "numClusteringCols",
	7:  "tableName",
	8:  "dbName",
	10: "mysqlTable",
	11: "olapTable",
	12: "schemaTable",
	14: "BrokerTable",
	15: "esTable",
	16: "odbcTable",
	17: "hiveTable",
	18: "icebergTable",
	19: "hudiTable",
	20: "jdbcTable",
	21: "mcTable",
	22: "trinoConnectorTable",
	23: "lakesoulTable",
}

func (p *TTableDescriptor) IsSetMysqlTable() bool {
	return p.MysqlTable != nil
}

func (p *TTableDescriptor) IsSetOlapTable() bool {
	return p.OlapTable != nil
}

func (p *TTableDescriptor) IsSetSchemaTable() bool {
	return p.SchemaTable != nil
}

func (p *TTableDescriptor) IsSetBrokerTable() bool {
	return p.BrokerTable != nil
}

func (p *TTableDescriptor) IsSetEsTable() bool {
	return p.EsTable != nil
}

func (p *TTableDescriptor) IsSetOdbcTable() bool {
	return p.OdbcTable != nil
}

func (p *TTableDescriptor) IsSetHiveTable() bool {
	return p.HiveTable != nil
}

func (p *TTableDescriptor) IsSetIcebergTable() bool {
	return p.IcebergTable != nil
}

func (p *TTableDescriptor) IsSetHudiTable() bool {
	return p.HudiTable != nil
}

func (p *TTableDescriptor) IsSetJdbcTable() bool {
	return p.JdbcTable != nil
}

func (p *TTableDescriptor) IsSetMcTable() bool {
	return p.McTable != nil
}

func (p *TTableDescriptor) IsSetTrinoConnectorTable() bool {
	return p.TrinoConnectorTable != nil
}

func (p *TTableDescriptor) IsSetLakesoulTable() bool {
	return p.LakesoulTable != nil
}

func (p *TTableDescriptor) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetTableType bool = false
	var issetNumCols bool = false
	var issetNumClusteringCols bool = false
	var issetTableName bool = false
	var issetDbName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTableType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetNumCols = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetNumClusteringCols = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetTableName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetDbName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTableType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetNumCols {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetNumClusteringCols {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTableName {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetDbName {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTableDescriptor[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTableDescriptor[fieldId]))
}

func (p *TTableDescriptor) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTableId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *TTableDescriptor) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TTableType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TTableType(v)
	}
	p.TableType = _field
	return nil
}
func (p *TTableDescriptor) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumCols = _field
	return nil
}
func (p *TTableDescriptor) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumClusteringCols = _field
	return nil
}
func (p *TTableDescriptor) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TableName = _field
	return nil
}
func (p *TTableDescriptor) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DbName = _field
	return nil
}
func (p *TTableDescriptor) ReadField10(iprot thrift.TProtocol) error {
	_field := NewTMySQLTable()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MysqlTable = _field
	return nil
}
func (p *TTableDescriptor) ReadField11(iprot thrift.TProtocol) error {
	_field := NewTOlapTable()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.OlapTable = _field
	return nil
}
func (p *TTableDescriptor) ReadField12(iprot thrift.TProtocol) error {
	_field := NewTSchemaTable()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SchemaTable = _field
	return nil
}
func (p *TTableDescriptor) ReadField14(iprot thrift.TProtocol) error {
	_field := NewTBrokerTable()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BrokerTable = _field
	return nil
}
func (p *TTableDescriptor) ReadField15(iprot thrift.TProtocol) error {
	_field := NewTEsTable()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EsTable = _field
	return nil
}
func (p *TTableDescriptor) ReadField16(iprot thrift.TProtocol) error {
	_field := NewTOdbcTable()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.OdbcTable = _field
	return nil
}
func (p *TTableDescriptor) ReadField17(iprot thrift.TProtocol) error {
	_field := NewTHiveTable()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.HiveTable = _field
	return nil
}
func (p *TTableDescriptor) ReadField18(iprot thrift.TProtocol) error {
	_field := NewTIcebergTable()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.IcebergTable = _field
	return nil
}
func (p *TTableDescriptor) ReadField19(iprot thrift.TProtocol) error {
	_field := NewTHudiTable()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.HudiTable = _field
	return nil
}
func (p *TTableDescriptor) ReadField20(iprot thrift.TProtocol) error {
	_field := NewTJdbcTable()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.JdbcTable = _field
	return nil
}
func (p *TTableDescriptor) ReadField21(iprot thrift.TProtocol) error {
	_field := NewTMCTable()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.McTable = _field
	return nil
}
func (p *TTableDescriptor) ReadField22(iprot thrift.TProtocol) error {
	_field := NewTTrinoConnectorTable()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TrinoConnectorTable = _field
	return nil
}
func (p *TTableDescriptor) ReadField23(iprot thrift.TProtocol) error {
	_field := NewTLakeSoulTable()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.LakesoulTable = _field
	return nil
}

func (p *TTableDescriptor) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTableDescriptor"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTableDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTableDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tableType", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.TableType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTableDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("numCols", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NumCols); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTableDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("numClusteringCols", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NumClusteringCols); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TTableDescriptor) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tableName", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TableName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TTableDescriptor) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dbName", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DbName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TTableDescriptor) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetMysqlTable() {
		if err = oprot.WriteFieldBegin("mysqlTable", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MysqlTable.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TTableDescriptor) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetOlapTable() {
		if err = oprot.WriteFieldBegin("olapTable", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.OlapTable.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TTableDescriptor) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaTable() {
		if err = oprot.WriteFieldBegin("schemaTable", thrift.STRUCT, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.SchemaTable.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TTableDescriptor) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetBrokerTable() {
		if err = oprot.WriteFieldBegin("BrokerTable", thrift.STRUCT, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BrokerTable.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TTableDescriptor) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetEsTable() {
		if err = oprot.WriteFieldBegin("esTable", thrift.STRUCT, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EsTable.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TTableDescriptor) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetOdbcTable() {
		if err = oprot.WriteFieldBegin("odbcTable", thrift.STRUCT, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.OdbcTable.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TTableDescriptor) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetHiveTable() {
		if err = oprot.WriteFieldBegin("hiveTable", thrift.STRUCT, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.HiveTable.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TTableDescriptor) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetIcebergTable() {
		if err = oprot.WriteFieldBegin("icebergTable", thrift.STRUCT, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.IcebergTable.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TTableDescriptor) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetHudiTable() {
		if err = oprot.WriteFieldBegin("hudiTable", thrift.STRUCT, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.HudiTable.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TTableDescriptor) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetJdbcTable() {
		if err = oprot.WriteFieldBegin("jdbcTable", thrift.STRUCT, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.JdbcTable.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *TTableDescriptor) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetMcTable() {
		if err = oprot.WriteFieldBegin("mcTable", thrift.STRUCT, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.McTable.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *TTableDescriptor) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrinoConnectorTable() {
		if err = oprot.WriteFieldBegin("trinoConnectorTable", thrift.STRUCT, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TrinoConnectorTable.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *TTableDescriptor) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetLakesoulTable() {
		if err = oprot.WriteFieldBegin("lakesoulTable", thrift.STRUCT, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.LakesoulTable.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *TTableDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTableDescriptor(%+v)", *p)

}

func (p *TTableDescriptor) DeepEqual(ano *TTableDescriptor) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableType) {
		return false
	}
	if !p.Field3DeepEqual(ano.NumCols) {
		return false
	}
	if !p.Field4DeepEqual(ano.NumClusteringCols) {
		return false
	}
	if !p.Field7DeepEqual(ano.TableName) {
		return false
	}
	if !p.Field8DeepEqual(ano.DbName) {
		return false
	}
	if !p.Field10DeepEqual(ano.MysqlTable) {
		return false
	}
	if !p.Field11DeepEqual(ano.OlapTable) {
		return false
	}
	if !p.Field12DeepEqual(ano.SchemaTable) {
		return false
	}
	if !p.Field14DeepEqual(ano.BrokerTable) {
		return false
	}
	if !p.Field15DeepEqual(ano.EsTable) {
		return false
	}
	if !p.Field16DeepEqual(ano.OdbcTable) {
		return false
	}
	if !p.Field17DeepEqual(ano.HiveTable) {
		return false
	}
	if !p.Field18DeepEqual(ano.IcebergTable) {
		return false
	}
	if !p.Field19DeepEqual(ano.HudiTable) {
		return false
	}
	if !p.Field20DeepEqual(ano.JdbcTable) {
		return false
	}
	if !p.Field21DeepEqual(ano.McTable) {
		return false
	}
	if !p.Field22DeepEqual(ano.TrinoConnectorTable) {
		return false
	}
	if !p.Field23DeepEqual(ano.LakesoulTable) {
		return false
	}
	return true
}

func (p *TTableDescriptor) Field1DeepEqual(src types.TTableId) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *TTableDescriptor) Field2DeepEqual(src types.TTableType) bool {

	if p.TableType != src {
		return false
	}
	return true
}
func (p *TTableDescriptor) Field3DeepEqual(src int32) bool {

	if p.NumCols != src {
		return false
	}
	return true
}
func (p *TTableDescriptor) Field4DeepEqual(src int32) bool {

	if p.NumClusteringCols != src {
		return false
	}
	return true
}
func (p *TTableDescriptor) Field7DeepEqual(src string) bool {

	if strings.Compare(p.TableName, src) != 0 {
		return false
	}
	return true
}
func (p *TTableDescriptor) Field8DeepEqual(src string) bool {

	if strings.Compare(p.DbName, src) != 0 {
		return false
	}
	return true
}
func (p *TTableDescriptor) Field10DeepEqual(src *TMySQLTable) bool {

	if !p.MysqlTable.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTableDescriptor) Field11DeepEqual(src *TOlapTable) bool {

	if !p.OlapTable.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTableDescriptor) Field12DeepEqual(src *TSchemaTable) bool {

	if !p.SchemaTable.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTableDescriptor) Field14DeepEqual(src *TBrokerTable) bool {

	if !p.BrokerTable.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTableDescriptor) Field15DeepEqual(src *TEsTable) bool {

	if !p.EsTable.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTableDescriptor) Field16DeepEqual(src *TOdbcTable) bool {

	if !p.OdbcTable.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTableDescriptor) Field17DeepEqual(src *THiveTable) bool {

	if !p.HiveTable.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTableDescriptor) Field18DeepEqual(src *TIcebergTable) bool {

	if !p.IcebergTable.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTableDescriptor) Field19DeepEqual(src *THudiTable) bool {

	if !p.HudiTable.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTableDescriptor) Field20DeepEqual(src *TJdbcTable) bool {

	if !p.JdbcTable.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTableDescriptor) Field21DeepEqual(src *TMCTable) bool {

	if !p.McTable.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTableDescriptor) Field22DeepEqual(src *TTrinoConnectorTable) bool {

	if !p.TrinoConnectorTable.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTableDescriptor) Field23DeepEqual(src *TLakeSoulTable) bool {

	if !p.LakesoulTable.DeepEqual(src) {
		return false
	}
	return true
}

type TDescriptorTable struct {
	SlotDescriptors  []*TSlotDescriptor  `thrift:"slotDescriptors,1,optional" frugal:"1,optional,list<TSlotDescriptor>" json:"slotDescriptors,omitempty"`
	TupleDescriptors []*TTupleDescriptor `thrift:"tupleDescriptors,2,required" frugal:"2,required,list<TTupleDescriptor>" json:"tupleDescriptors"`
	TableDescriptors []*TTableDescriptor `thrift:"tableDescriptors,3,optional" frugal:"3,optional,list<TTableDescriptor>" json:"tableDescriptors,omitempty"`
}

func NewTDescriptorTable() *TDescriptorTable {
	return &TDescriptorTable{}
}

func (p *TDescriptorTable) InitDefault() {
}

var TDescriptorTable_SlotDescriptors_DEFAULT []*TSlotDescriptor

func (p *TDescriptorTable) GetSlotDescriptors() (v []*TSlotDescriptor) {
	if !p.IsSetSlotDescriptors() {
		return TDescriptorTable_SlotDescriptors_DEFAULT
	}
	return p.SlotDescriptors
}

func (p *TDescriptorTable) GetTupleDescriptors() (v []*TTupleDescriptor) {
	return p.TupleDescriptors
}

var TDescriptorTable_TableDescriptors_DEFAULT []*TTableDescriptor

func (p *TDescriptorTable) GetTableDescriptors() (v []*TTableDescriptor) {
	if !p.IsSetTableDescriptors() {
		return TDescriptorTable_TableDescriptors_DEFAULT
	}
	return p.TableDescriptors
}
func (p *TDescriptorTable) SetSlotDescriptors(val []*TSlotDescriptor) {
	p.SlotDescriptors = val
}
func (p *TDescriptorTable) SetTupleDescriptors(val []*TTupleDescriptor) {
	p.TupleDescriptors = val
}
func (p *TDescriptorTable) SetTableDescriptors(val []*TTableDescriptor) {
	p.TableDescriptors = val
}

var fieldIDToName_TDescriptorTable = map[int16]string{
	1: "slotDescriptors",
	2: "tupleDescriptors",
	3: "tableDescriptors",
}

func (p *TDescriptorTable) IsSetSlotDescriptors() bool {
	return p.SlotDescriptors != nil
}

func (p *TDescriptorTable) IsSetTableDescriptors() bool {
	return p.TableDescriptors != nil
}

func (p *TDescriptorTable) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTupleDescriptors bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTupleDescriptors = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTupleDescriptors {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDescriptorTable[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TDescriptorTable[fieldId]))
}

func (p *TDescriptorTable) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TSlotDescriptor, 0, size)
	values := make([]TSlotDescriptor, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SlotDescriptors = _field
	return nil
}
func (p *TDescriptorTable) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTupleDescriptor, 0, size)
	values := make([]TTupleDescriptor, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TupleDescriptors = _field
	return nil
}
func (p *TDescriptorTable) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTableDescriptor, 0, size)
	values := make([]TTableDescriptor, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TableDescriptors = _field
	return nil
}

func (p *TDescriptorTable) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDescriptorTable"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDescriptorTable) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSlotDescriptors() {
		if err = oprot.WriteFieldBegin("slotDescriptors", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SlotDescriptors)); err != nil {
			return err
		}
		for _, v := range p.SlotDescriptors {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDescriptorTable) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tupleDescriptors", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TupleDescriptors)); err != nil {
		return err
	}
	for _, v := range p.TupleDescriptors {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TDescriptorTable) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableDescriptors() {
		if err = oprot.WriteFieldBegin("tableDescriptors", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TableDescriptors)); err != nil {
			return err
		}
		for _, v := range p.TableDescriptors {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TDescriptorTable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDescriptorTable(%+v)", *p)

}

func (p *TDescriptorTable) DeepEqual(ano *TDescriptorTable) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SlotDescriptors) {
		return false
	}
	if !p.Field2DeepEqual(ano.TupleDescriptors) {
		return false
	}
	if !p.Field3DeepEqual(ano.TableDescriptors) {
		return false
	}
	return true
}

func (p *TDescriptorTable) Field1DeepEqual(src []*TSlotDescriptor) bool {

	if len(p.SlotDescriptors) != len(src) {
		return false
	}
	for i, v := range p.SlotDescriptors {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TDescriptorTable) Field2DeepEqual(src []*TTupleDescriptor) bool {

	if len(p.TupleDescriptors) != len(src) {
		return false
	}
	for i, v := range p.TupleDescriptors {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TDescriptorTable) Field3DeepEqual(src []*TTableDescriptor) bool {

	if len(p.TableDescriptors) != len(src) {
		return false
	}
	for i, v := range p.TableDescriptors {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
