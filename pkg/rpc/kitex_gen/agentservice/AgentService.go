// Code generated by thriftgo (0.3.13). DO NOT EDIT.

package agentservice

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/descriptors"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/exprs"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/palointernalservice"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/plannodes"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/status"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/types"
	"strings"
)

type TStorageFormat int64

const (
	TStorageFormat_DEFAULT TStorageFormat = 0
	TStorageFormat_V1      TStorageFormat = 1
	TStorageFormat_V2      TStorageFormat = 2
)

func (p TStorageFormat) String() string {
	switch p {
	case TStorageFormat_DEFAULT:
		return "DEFAULT"
	case TStorageFormat_V1:
		return "V1"
	case TStorageFormat_V2:
		return "V2"
	}
	return "<UNSET>"
}

func TStorageFormatFromString(s string) (TStorageFormat, error) {
	switch s {
	case "DEFAULT":
		return TStorageFormat_DEFAULT, nil
	case "V1":
		return TStorageFormat_V1, nil
	case "V2":
		return TStorageFormat_V2, nil
	}
	return TStorageFormat(0), fmt.Errorf("not a valid TStorageFormat string")
}

func TStorageFormatPtr(v TStorageFormat) *TStorageFormat { return &v }
func (p *TStorageFormat) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TStorageFormat(result.Int64)
	return
}

func (p *TStorageFormat) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TTabletType int64

const (
	TTabletType_TABLET_TYPE_DISK   TTabletType = 0
	TTabletType_TABLET_TYPE_MEMORY TTabletType = 1
)

func (p TTabletType) String() string {
	switch p {
	case TTabletType_TABLET_TYPE_DISK:
		return "TABLET_TYPE_DISK"
	case TTabletType_TABLET_TYPE_MEMORY:
		return "TABLET_TYPE_MEMORY"
	}
	return "<UNSET>"
}

func TTabletTypeFromString(s string) (TTabletType, error) {
	switch s {
	case "TABLET_TYPE_DISK":
		return TTabletType_TABLET_TYPE_DISK, nil
	case "TABLET_TYPE_MEMORY":
		return TTabletType_TABLET_TYPE_MEMORY, nil
	}
	return TTabletType(0), fmt.Errorf("not a valid TTabletType string")
}

func TTabletTypePtr(v TTabletType) *TTabletType { return &v }
func (p *TTabletType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TTabletType(result.Int64)
	return
}

func (p *TTabletType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TObjStorageType int64

const (
	TObjStorageType_UNKNOWN TObjStorageType = 0
	TObjStorageType_AWS     TObjStorageType = 1
	TObjStorageType_AZURE   TObjStorageType = 2
	TObjStorageType_BOS     TObjStorageType = 3
	TObjStorageType_COS     TObjStorageType = 4
	TObjStorageType_OBS     TObjStorageType = 5
	TObjStorageType_OSS     TObjStorageType = 6
	TObjStorageType_GCP     TObjStorageType = 7
)

func (p TObjStorageType) String() string {
	switch p {
	case TObjStorageType_UNKNOWN:
		return "UNKNOWN"
	case TObjStorageType_AWS:
		return "AWS"
	case TObjStorageType_AZURE:
		return "AZURE"
	case TObjStorageType_BOS:
		return "BOS"
	case TObjStorageType_COS:
		return "COS"
	case TObjStorageType_OBS:
		return "OBS"
	case TObjStorageType_OSS:
		return "OSS"
	case TObjStorageType_GCP:
		return "GCP"
	}
	return "<UNSET>"
}

func TObjStorageTypeFromString(s string) (TObjStorageType, error) {
	switch s {
	case "UNKNOWN":
		return TObjStorageType_UNKNOWN, nil
	case "AWS":
		return TObjStorageType_AWS, nil
	case "AZURE":
		return TObjStorageType_AZURE, nil
	case "BOS":
		return TObjStorageType_BOS, nil
	case "COS":
		return TObjStorageType_COS, nil
	case "OBS":
		return TObjStorageType_OBS, nil
	case "OSS":
		return TObjStorageType_OSS, nil
	case "GCP":
		return TObjStorageType_GCP, nil
	}
	return TObjStorageType(0), fmt.Errorf("not a valid TObjStorageType string")
}

func TObjStorageTypePtr(v TObjStorageType) *TObjStorageType { return &v }
func (p *TObjStorageType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TObjStorageType(result.Int64)
	return
}

func (p *TObjStorageType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TCompressionType int64

const (
	TCompressionType_UNKNOWN_COMPRESSION TCompressionType = 0
	TCompressionType_DEFAULT_COMPRESSION TCompressionType = 1
	TCompressionType_NO_COMPRESSION      TCompressionType = 2
	TCompressionType_SNAPPY              TCompressionType = 3
	TCompressionType_LZ4                 TCompressionType = 4
	TCompressionType_LZ4F                TCompressionType = 5
	TCompressionType_ZLIB                TCompressionType = 6
	TCompressionType_ZSTD                TCompressionType = 7
	TCompressionType_LZ4HC               TCompressionType = 8
)

func (p TCompressionType) String() string {
	switch p {
	case TCompressionType_UNKNOWN_COMPRESSION:
		return "UNKNOWN_COMPRESSION"
	case TCompressionType_DEFAULT_COMPRESSION:
		return "DEFAULT_COMPRESSION"
	case TCompressionType_NO_COMPRESSION:
		return "NO_COMPRESSION"
	case TCompressionType_SNAPPY:
		return "SNAPPY"
	case TCompressionType_LZ4:
		return "LZ4"
	case TCompressionType_LZ4F:
		return "LZ4F"
	case TCompressionType_ZLIB:
		return "ZLIB"
	case TCompressionType_ZSTD:
		return "ZSTD"
	case TCompressionType_LZ4HC:
		return "LZ4HC"
	}
	return "<UNSET>"
}

func TCompressionTypeFromString(s string) (TCompressionType, error) {
	switch s {
	case "UNKNOWN_COMPRESSION":
		return TCompressionType_UNKNOWN_COMPRESSION, nil
	case "DEFAULT_COMPRESSION":
		return TCompressionType_DEFAULT_COMPRESSION, nil
	case "NO_COMPRESSION":
		return TCompressionType_NO_COMPRESSION, nil
	case "SNAPPY":
		return TCompressionType_SNAPPY, nil
	case "LZ4":
		return TCompressionType_LZ4, nil
	case "LZ4F":
		return TCompressionType_LZ4F, nil
	case "ZLIB":
		return TCompressionType_ZLIB, nil
	case "ZSTD":
		return TCompressionType_ZSTD, nil
	case "LZ4HC":
		return TCompressionType_LZ4HC, nil
	}
	return TCompressionType(0), fmt.Errorf("not a valid TCompressionType string")
}

func TCompressionTypePtr(v TCompressionType) *TCompressionType { return &v }
func (p *TCompressionType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TCompressionType(result.Int64)
	return
}

func (p *TCompressionType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TInvertedIndexStorageFormat int64

const (
	TInvertedIndexStorageFormat_DEFAULT TInvertedIndexStorageFormat = 0
	TInvertedIndexStorageFormat_V1      TInvertedIndexStorageFormat = 1
	TInvertedIndexStorageFormat_V2      TInvertedIndexStorageFormat = 2
)

func (p TInvertedIndexStorageFormat) String() string {
	switch p {
	case TInvertedIndexStorageFormat_DEFAULT:
		return "DEFAULT"
	case TInvertedIndexStorageFormat_V1:
		return "V1"
	case TInvertedIndexStorageFormat_V2:
		return "V2"
	}
	return "<UNSET>"
}

func TInvertedIndexStorageFormatFromString(s string) (TInvertedIndexStorageFormat, error) {
	switch s {
	case "DEFAULT":
		return TInvertedIndexStorageFormat_DEFAULT, nil
	case "V1":
		return TInvertedIndexStorageFormat_V1, nil
	case "V2":
		return TInvertedIndexStorageFormat_V2, nil
	}
	return TInvertedIndexStorageFormat(0), fmt.Errorf("not a valid TInvertedIndexStorageFormat string")
}

func TInvertedIndexStorageFormatPtr(v TInvertedIndexStorageFormat) *TInvertedIndexStorageFormat {
	return &v
}
func (p *TInvertedIndexStorageFormat) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TInvertedIndexStorageFormat(result.Int64)
	return
}

func (p *TInvertedIndexStorageFormat) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TAlterTabletType int64

const (
	TAlterTabletType_SCHEMA_CHANGE TAlterTabletType = 1
	TAlterTabletType_ROLLUP        TAlterTabletType = 2
	TAlterTabletType_MIGRATION     TAlterTabletType = 3
)

func (p TAlterTabletType) String() string {
	switch p {
	case TAlterTabletType_SCHEMA_CHANGE:
		return "SCHEMA_CHANGE"
	case TAlterTabletType_ROLLUP:
		return "ROLLUP"
	case TAlterTabletType_MIGRATION:
		return "MIGRATION"
	}
	return "<UNSET>"
}

func TAlterTabletTypeFromString(s string) (TAlterTabletType, error) {
	switch s {
	case "SCHEMA_CHANGE":
		return TAlterTabletType_SCHEMA_CHANGE, nil
	case "ROLLUP":
		return TAlterTabletType_ROLLUP, nil
	case "MIGRATION":
		return TAlterTabletType_MIGRATION, nil
	}
	return TAlterTabletType(0), fmt.Errorf("not a valid TAlterTabletType string")
}

func TAlterTabletTypePtr(v TAlterTabletType) *TAlterTabletType { return &v }
func (p *TAlterTabletType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TAlterTabletType(result.Int64)
	return
}

func (p *TAlterTabletType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TAgentServiceVersion int64

const (
	TAgentServiceVersion_V1 TAgentServiceVersion = 0
)

func (p TAgentServiceVersion) String() string {
	switch p {
	case TAgentServiceVersion_V1:
		return "V1"
	}
	return "<UNSET>"
}

func TAgentServiceVersionFromString(s string) (TAgentServiceVersion, error) {
	switch s {
	case "V1":
		return TAgentServiceVersion_V1, nil
	}
	return TAgentServiceVersion(0), fmt.Errorf("not a valid TAgentServiceVersion string")
}

func TAgentServiceVersionPtr(v TAgentServiceVersion) *TAgentServiceVersion { return &v }
func (p *TAgentServiceVersion) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TAgentServiceVersion(result.Int64)
	return
}

func (p *TAgentServiceVersion) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TTabletMetaType int64

const (
	TTabletMetaType_PARTITIONID   TTabletMetaType = 0
	TTabletMetaType_INMEMORY      TTabletMetaType = 1
	TTabletMetaType_BINLOG_CONFIG TTabletMetaType = 2
)

func (p TTabletMetaType) String() string {
	switch p {
	case TTabletMetaType_PARTITIONID:
		return "PARTITIONID"
	case TTabletMetaType_INMEMORY:
		return "INMEMORY"
	case TTabletMetaType_BINLOG_CONFIG:
		return "BINLOG_CONFIG"
	}
	return "<UNSET>"
}

func TTabletMetaTypeFromString(s string) (TTabletMetaType, error) {
	switch s {
	case "PARTITIONID":
		return TTabletMetaType_PARTITIONID, nil
	case "INMEMORY":
		return TTabletMetaType_INMEMORY, nil
	case "BINLOG_CONFIG":
		return TTabletMetaType_BINLOG_CONFIG, nil
	}
	return TTabletMetaType(0), fmt.Errorf("not a valid TTabletMetaType string")
}

func TTabletMetaTypePtr(v TTabletMetaType) *TTabletMetaType { return &v }
func (p *TTabletMetaType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TTabletMetaType(result.Int64)
	return
}

func (p *TTabletMetaType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TTopicType int64

const (
	TTopicType_RESOURCE TTopicType = 0
)

func (p TTopicType) String() string {
	switch p {
	case TTopicType_RESOURCE:
		return "RESOURCE"
	}
	return "<UNSET>"
}

func TTopicTypeFromString(s string) (TTopicType, error) {
	switch s {
	case "RESOURCE":
		return TTopicType_RESOURCE, nil
	}
	return TTopicType(0), fmt.Errorf("not a valid TTopicType string")
}

func TTopicTypePtr(v TTopicType) *TTopicType { return &v }
func (p *TTopicType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TTopicType(result.Int64)
	return
}

func (p *TTopicType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TTabletSchema struct {
	ShortKeyColumnCount           int16                          `thrift:"short_key_column_count,1,required" frugal:"1,required,i16" json:"short_key_column_count"`
	SchemaHash                    types.TSchemaHash              `thrift:"schema_hash,2,required" frugal:"2,required,i32" json:"schema_hash"`
	KeysType                      types.TKeysType                `thrift:"keys_type,3,required" frugal:"3,required,TKeysType" json:"keys_type"`
	StorageType                   types.TStorageType             `thrift:"storage_type,4,required" frugal:"4,required,TStorageType" json:"storage_type"`
	Columns                       []*descriptors.TColumn         `thrift:"columns,5,required" frugal:"5,required,list<descriptors.TColumn>" json:"columns"`
	BloomFilterFpp                *float64                       `thrift:"bloom_filter_fpp,6,optional" frugal:"6,optional,double" json:"bloom_filter_fpp,omitempty"`
	Indexes                       []*descriptors.TOlapTableIndex `thrift:"indexes,7,optional" frugal:"7,optional,list<descriptors.TOlapTableIndex>" json:"indexes,omitempty"`
	IsInMemory                    *bool                          `thrift:"is_in_memory,8,optional" frugal:"8,optional,bool" json:"is_in_memory,omitempty"`
	DeleteSignIdx                 int32                          `thrift:"delete_sign_idx,9,optional" frugal:"9,optional,i32" json:"delete_sign_idx,omitempty"`
	SequenceColIdx                int32                          `thrift:"sequence_col_idx,10,optional" frugal:"10,optional,i32" json:"sequence_col_idx,omitempty"`
	SortType                      *types.TSortType               `thrift:"sort_type,11,optional" frugal:"11,optional,TSortType" json:"sort_type,omitempty"`
	SortColNum                    *int32                         `thrift:"sort_col_num,12,optional" frugal:"12,optional,i32" json:"sort_col_num,omitempty"`
	DisableAutoCompaction         *bool                          `thrift:"disable_auto_compaction,13,optional" frugal:"13,optional,bool" json:"disable_auto_compaction,omitempty"`
	VersionColIdx                 int32                          `thrift:"version_col_idx,14,optional" frugal:"14,optional,i32" json:"version_col_idx,omitempty"`
	IsDynamicSchema               bool                           `thrift:"is_dynamic_schema,15,optional" frugal:"15,optional,bool" json:"is_dynamic_schema,omitempty"`
	StoreRowColumn                bool                           `thrift:"store_row_column,16,optional" frugal:"16,optional,bool" json:"store_row_column,omitempty"`
	EnableSingleReplicaCompaction bool                           `thrift:"enable_single_replica_compaction,17,optional" frugal:"17,optional,bool" json:"enable_single_replica_compaction,omitempty"`
	SkipWriteIndexOnLoad          bool                           `thrift:"skip_write_index_on_load,18,optional" frugal:"18,optional,bool" json:"skip_write_index_on_load,omitempty"`
	ClusterKeyIdxes               []int32                        `thrift:"cluster_key_idxes,19,optional" frugal:"19,optional,list<i32>" json:"cluster_key_idxes,omitempty"`
	RowStoreColCids               []int32                        `thrift:"row_store_col_cids,20,optional" frugal:"20,optional,list<i32>" json:"row_store_col_cids,omitempty"`
	RowStorePageSize              int64                          `thrift:"row_store_page_size,21,optional" frugal:"21,optional,i64" json:"row_store_page_size,omitempty"`
	VariantEnableFlattenNested    bool                           `thrift:"variant_enable_flatten_nested,22,optional" frugal:"22,optional,bool" json:"variant_enable_flatten_nested,omitempty"`
}

func NewTTabletSchema() *TTabletSchema {
	return &TTabletSchema{

		DeleteSignIdx:                 -1,
		SequenceColIdx:                -1,
		VersionColIdx:                 -1,
		IsDynamicSchema:               false,
		StoreRowColumn:                false,
		EnableSingleReplicaCompaction: false,
		SkipWriteIndexOnLoad:          false,
		RowStorePageSize:              16384,
		VariantEnableFlattenNested:    false,
	}
}

func (p *TTabletSchema) InitDefault() {
	p.DeleteSignIdx = -1
	p.SequenceColIdx = -1
	p.VersionColIdx = -1
	p.IsDynamicSchema = false
	p.StoreRowColumn = false
	p.EnableSingleReplicaCompaction = false
	p.SkipWriteIndexOnLoad = false
	p.RowStorePageSize = 16384
	p.VariantEnableFlattenNested = false
}

func (p *TTabletSchema) GetShortKeyColumnCount() (v int16) {
	return p.ShortKeyColumnCount
}

func (p *TTabletSchema) GetSchemaHash() (v types.TSchemaHash) {
	return p.SchemaHash
}

func (p *TTabletSchema) GetKeysType() (v types.TKeysType) {
	return p.KeysType
}

func (p *TTabletSchema) GetStorageType() (v types.TStorageType) {
	return p.StorageType
}

func (p *TTabletSchema) GetColumns() (v []*descriptors.TColumn) {
	return p.Columns
}

var TTabletSchema_BloomFilterFpp_DEFAULT float64

func (p *TTabletSchema) GetBloomFilterFpp() (v float64) {
	if !p.IsSetBloomFilterFpp() {
		return TTabletSchema_BloomFilterFpp_DEFAULT
	}
	return *p.BloomFilterFpp
}

var TTabletSchema_Indexes_DEFAULT []*descriptors.TOlapTableIndex

func (p *TTabletSchema) GetIndexes() (v []*descriptors.TOlapTableIndex) {
	if !p.IsSetIndexes() {
		return TTabletSchema_Indexes_DEFAULT
	}
	return p.Indexes
}

var TTabletSchema_IsInMemory_DEFAULT bool

func (p *TTabletSchema) GetIsInMemory() (v bool) {
	if !p.IsSetIsInMemory() {
		return TTabletSchema_IsInMemory_DEFAULT
	}
	return *p.IsInMemory
}

var TTabletSchema_DeleteSignIdx_DEFAULT int32 = -1

func (p *TTabletSchema) GetDeleteSignIdx() (v int32) {
	if !p.IsSetDeleteSignIdx() {
		return TTabletSchema_DeleteSignIdx_DEFAULT
	}
	return p.DeleteSignIdx
}

var TTabletSchema_SequenceColIdx_DEFAULT int32 = -1

func (p *TTabletSchema) GetSequenceColIdx() (v int32) {
	if !p.IsSetSequenceColIdx() {
		return TTabletSchema_SequenceColIdx_DEFAULT
	}
	return p.SequenceColIdx
}

var TTabletSchema_SortType_DEFAULT types.TSortType

func (p *TTabletSchema) GetSortType() (v types.TSortType) {
	if !p.IsSetSortType() {
		return TTabletSchema_SortType_DEFAULT
	}
	return *p.SortType
}

var TTabletSchema_SortColNum_DEFAULT int32

func (p *TTabletSchema) GetSortColNum() (v int32) {
	if !p.IsSetSortColNum() {
		return TTabletSchema_SortColNum_DEFAULT
	}
	return *p.SortColNum
}

var TTabletSchema_DisableAutoCompaction_DEFAULT bool

func (p *TTabletSchema) GetDisableAutoCompaction() (v bool) {
	if !p.IsSetDisableAutoCompaction() {
		return TTabletSchema_DisableAutoCompaction_DEFAULT
	}
	return *p.DisableAutoCompaction
}

var TTabletSchema_VersionColIdx_DEFAULT int32 = -1

func (p *TTabletSchema) GetVersionColIdx() (v int32) {
	if !p.IsSetVersionColIdx() {
		return TTabletSchema_VersionColIdx_DEFAULT
	}
	return p.VersionColIdx
}

var TTabletSchema_IsDynamicSchema_DEFAULT bool = false

func (p *TTabletSchema) GetIsDynamicSchema() (v bool) {
	if !p.IsSetIsDynamicSchema() {
		return TTabletSchema_IsDynamicSchema_DEFAULT
	}
	return p.IsDynamicSchema
}

var TTabletSchema_StoreRowColumn_DEFAULT bool = false

func (p *TTabletSchema) GetStoreRowColumn() (v bool) {
	if !p.IsSetStoreRowColumn() {
		return TTabletSchema_StoreRowColumn_DEFAULT
	}
	return p.StoreRowColumn
}

var TTabletSchema_EnableSingleReplicaCompaction_DEFAULT bool = false

func (p *TTabletSchema) GetEnableSingleReplicaCompaction() (v bool) {
	if !p.IsSetEnableSingleReplicaCompaction() {
		return TTabletSchema_EnableSingleReplicaCompaction_DEFAULT
	}
	return p.EnableSingleReplicaCompaction
}

var TTabletSchema_SkipWriteIndexOnLoad_DEFAULT bool = false

func (p *TTabletSchema) GetSkipWriteIndexOnLoad() (v bool) {
	if !p.IsSetSkipWriteIndexOnLoad() {
		return TTabletSchema_SkipWriteIndexOnLoad_DEFAULT
	}
	return p.SkipWriteIndexOnLoad
}

var TTabletSchema_ClusterKeyIdxes_DEFAULT []int32

func (p *TTabletSchema) GetClusterKeyIdxes() (v []int32) {
	if !p.IsSetClusterKeyIdxes() {
		return TTabletSchema_ClusterKeyIdxes_DEFAULT
	}
	return p.ClusterKeyIdxes
}

var TTabletSchema_RowStoreColCids_DEFAULT []int32

func (p *TTabletSchema) GetRowStoreColCids() (v []int32) {
	if !p.IsSetRowStoreColCids() {
		return TTabletSchema_RowStoreColCids_DEFAULT
	}
	return p.RowStoreColCids
}

var TTabletSchema_RowStorePageSize_DEFAULT int64 = 16384

func (p *TTabletSchema) GetRowStorePageSize() (v int64) {
	if !p.IsSetRowStorePageSize() {
		return TTabletSchema_RowStorePageSize_DEFAULT
	}
	return p.RowStorePageSize
}

var TTabletSchema_VariantEnableFlattenNested_DEFAULT bool = false

func (p *TTabletSchema) GetVariantEnableFlattenNested() (v bool) {
	if !p.IsSetVariantEnableFlattenNested() {
		return TTabletSchema_VariantEnableFlattenNested_DEFAULT
	}
	return p.VariantEnableFlattenNested
}
func (p *TTabletSchema) SetShortKeyColumnCount(val int16) {
	p.ShortKeyColumnCount = val
}
func (p *TTabletSchema) SetSchemaHash(val types.TSchemaHash) {
	p.SchemaHash = val
}
func (p *TTabletSchema) SetKeysType(val types.TKeysType) {
	p.KeysType = val
}
func (p *TTabletSchema) SetStorageType(val types.TStorageType) {
	p.StorageType = val
}
func (p *TTabletSchema) SetColumns(val []*descriptors.TColumn) {
	p.Columns = val
}
func (p *TTabletSchema) SetBloomFilterFpp(val *float64) {
	p.BloomFilterFpp = val
}
func (p *TTabletSchema) SetIndexes(val []*descriptors.TOlapTableIndex) {
	p.Indexes = val
}
func (p *TTabletSchema) SetIsInMemory(val *bool) {
	p.IsInMemory = val
}
func (p *TTabletSchema) SetDeleteSignIdx(val int32) {
	p.DeleteSignIdx = val
}
func (p *TTabletSchema) SetSequenceColIdx(val int32) {
	p.SequenceColIdx = val
}
func (p *TTabletSchema) SetSortType(val *types.TSortType) {
	p.SortType = val
}
func (p *TTabletSchema) SetSortColNum(val *int32) {
	p.SortColNum = val
}
func (p *TTabletSchema) SetDisableAutoCompaction(val *bool) {
	p.DisableAutoCompaction = val
}
func (p *TTabletSchema) SetVersionColIdx(val int32) {
	p.VersionColIdx = val
}
func (p *TTabletSchema) SetIsDynamicSchema(val bool) {
	p.IsDynamicSchema = val
}
func (p *TTabletSchema) SetStoreRowColumn(val bool) {
	p.StoreRowColumn = val
}
func (p *TTabletSchema) SetEnableSingleReplicaCompaction(val bool) {
	p.EnableSingleReplicaCompaction = val
}
func (p *TTabletSchema) SetSkipWriteIndexOnLoad(val bool) {
	p.SkipWriteIndexOnLoad = val
}
func (p *TTabletSchema) SetClusterKeyIdxes(val []int32) {
	p.ClusterKeyIdxes = val
}
func (p *TTabletSchema) SetRowStoreColCids(val []int32) {
	p.RowStoreColCids = val
}
func (p *TTabletSchema) SetRowStorePageSize(val int64) {
	p.RowStorePageSize = val
}
func (p *TTabletSchema) SetVariantEnableFlattenNested(val bool) {
	p.VariantEnableFlattenNested = val
}

var fieldIDToName_TTabletSchema = map[int16]string{
	1:  "short_key_column_count",
	2:  "schema_hash",
	3:  "keys_type",
	4:  "storage_type",
	5:  "columns",
	6:  "bloom_filter_fpp",
	7:  "indexes",
	8:  "is_in_memory",
	9:  "delete_sign_idx",
	10: "sequence_col_idx",
	11: "sort_type",
	12: "sort_col_num",
	13: "disable_auto_compaction",
	14: "version_col_idx",
	15: "is_dynamic_schema",
	16: "store_row_column",
	17: "enable_single_replica_compaction",
	18: "skip_write_index_on_load",
	19: "cluster_key_idxes",
	20: "row_store_col_cids",
	21: "row_store_page_size",
	22: "variant_enable_flatten_nested",
}

func (p *TTabletSchema) IsSetBloomFilterFpp() bool {
	return p.BloomFilterFpp != nil
}

func (p *TTabletSchema) IsSetIndexes() bool {
	return p.Indexes != nil
}

func (p *TTabletSchema) IsSetIsInMemory() bool {
	return p.IsInMemory != nil
}

func (p *TTabletSchema) IsSetDeleteSignIdx() bool {
	return p.DeleteSignIdx != TTabletSchema_DeleteSignIdx_DEFAULT
}

func (p *TTabletSchema) IsSetSequenceColIdx() bool {
	return p.SequenceColIdx != TTabletSchema_SequenceColIdx_DEFAULT
}

func (p *TTabletSchema) IsSetSortType() bool {
	return p.SortType != nil
}

func (p *TTabletSchema) IsSetSortColNum() bool {
	return p.SortColNum != nil
}

func (p *TTabletSchema) IsSetDisableAutoCompaction() bool {
	return p.DisableAutoCompaction != nil
}

func (p *TTabletSchema) IsSetVersionColIdx() bool {
	return p.VersionColIdx != TTabletSchema_VersionColIdx_DEFAULT
}

func (p *TTabletSchema) IsSetIsDynamicSchema() bool {
	return p.IsDynamicSchema != TTabletSchema_IsDynamicSchema_DEFAULT
}

func (p *TTabletSchema) IsSetStoreRowColumn() bool {
	return p.StoreRowColumn != TTabletSchema_StoreRowColumn_DEFAULT
}

func (p *TTabletSchema) IsSetEnableSingleReplicaCompaction() bool {
	return p.EnableSingleReplicaCompaction != TTabletSchema_EnableSingleReplicaCompaction_DEFAULT
}

func (p *TTabletSchema) IsSetSkipWriteIndexOnLoad() bool {
	return p.SkipWriteIndexOnLoad != TTabletSchema_SkipWriteIndexOnLoad_DEFAULT
}

func (p *TTabletSchema) IsSetClusterKeyIdxes() bool {
	return p.ClusterKeyIdxes != nil
}

func (p *TTabletSchema) IsSetRowStoreColCids() bool {
	return p.RowStoreColCids != nil
}

func (p *TTabletSchema) IsSetRowStorePageSize() bool {
	return p.RowStorePageSize != TTabletSchema_RowStorePageSize_DEFAULT
}

func (p *TTabletSchema) IsSetVariantEnableFlattenNested() bool {
	return p.VariantEnableFlattenNested != TTabletSchema_VariantEnableFlattenNested_DEFAULT
}

func (p *TTabletSchema) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetShortKeyColumnCount bool = false
	var issetSchemaHash bool = false
	var issetKeysType bool = false
	var issetStorageType bool = false
	var issetColumns bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetShortKeyColumnCount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetKeysType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetStorageType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumns = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetShortKeyColumnCount {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetKeysType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetStorageType {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetColumns {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletSchema[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletSchema[fieldId]))
}

func (p *TTabletSchema) ReadField1(iprot thrift.TProtocol) error {

	var _field int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShortKeyColumnCount = _field
	return nil
}
func (p *TTabletSchema) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SchemaHash = _field
	return nil
}
func (p *TTabletSchema) ReadField3(iprot thrift.TProtocol) error {

	var _field types.TKeysType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TKeysType(v)
	}
	p.KeysType = _field
	return nil
}
func (p *TTabletSchema) ReadField4(iprot thrift.TProtocol) error {

	var _field types.TStorageType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TStorageType(v)
	}
	p.StorageType = _field
	return nil
}
func (p *TTabletSchema) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*descriptors.TColumn, 0, size)
	values := make([]descriptors.TColumn, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Columns = _field
	return nil
}
func (p *TTabletSchema) ReadField6(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BloomFilterFpp = _field
	return nil
}
func (p *TTabletSchema) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*descriptors.TOlapTableIndex, 0, size)
	values := make([]descriptors.TOlapTableIndex, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Indexes = _field
	return nil
}
func (p *TTabletSchema) ReadField8(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsInMemory = _field
	return nil
}
func (p *TTabletSchema) ReadField9(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DeleteSignIdx = _field
	return nil
}
func (p *TTabletSchema) ReadField10(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SequenceColIdx = _field
	return nil
}
func (p *TTabletSchema) ReadField11(iprot thrift.TProtocol) error {

	var _field *types.TSortType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TSortType(v)
		_field = &tmp
	}
	p.SortType = _field
	return nil
}
func (p *TTabletSchema) ReadField12(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SortColNum = _field
	return nil
}
func (p *TTabletSchema) ReadField13(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DisableAutoCompaction = _field
	return nil
}
func (p *TTabletSchema) ReadField14(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VersionColIdx = _field
	return nil
}
func (p *TTabletSchema) ReadField15(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsDynamicSchema = _field
	return nil
}
func (p *TTabletSchema) ReadField16(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StoreRowColumn = _field
	return nil
}
func (p *TTabletSchema) ReadField17(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableSingleReplicaCompaction = _field
	return nil
}
func (p *TTabletSchema) ReadField18(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SkipWriteIndexOnLoad = _field
	return nil
}
func (p *TTabletSchema) ReadField19(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ClusterKeyIdxes = _field
	return nil
}
func (p *TTabletSchema) ReadField20(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.RowStoreColCids = _field
	return nil
}
func (p *TTabletSchema) ReadField21(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RowStorePageSize = _field
	return nil
}
func (p *TTabletSchema) ReadField22(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VariantEnableFlattenNested = _field
	return nil
}

func (p *TTabletSchema) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTabletSchema"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTabletSchema) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("short_key_column_count", thrift.I16, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI16(p.ShortKeyColumnCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTabletSchema) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schema_hash", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SchemaHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTabletSchema) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("keys_type", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.KeysType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTabletSchema) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("storage_type", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.StorageType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TTabletSchema) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columns", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
		return err
	}
	for _, v := range p.Columns {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TTabletSchema) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBloomFilterFpp() {
		if err = oprot.WriteFieldBegin("bloom_filter_fpp", thrift.DOUBLE, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.BloomFilterFpp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TTabletSchema) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndexes() {
		if err = oprot.WriteFieldBegin("indexes", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Indexes)); err != nil {
			return err
		}
		for _, v := range p.Indexes {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TTabletSchema) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsInMemory() {
		if err = oprot.WriteFieldBegin("is_in_memory", thrift.BOOL, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsInMemory); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TTabletSchema) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleteSignIdx() {
		if err = oprot.WriteFieldBegin("delete_sign_idx", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.DeleteSignIdx); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TTabletSchema) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSequenceColIdx() {
		if err = oprot.WriteFieldBegin("sequence_col_idx", thrift.I32, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.SequenceColIdx); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TTabletSchema) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSortType() {
		if err = oprot.WriteFieldBegin("sort_type", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.SortType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TTabletSchema) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetSortColNum() {
		if err = oprot.WriteFieldBegin("sort_col_num", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SortColNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TTabletSchema) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisableAutoCompaction() {
		if err = oprot.WriteFieldBegin("disable_auto_compaction", thrift.BOOL, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.DisableAutoCompaction); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TTabletSchema) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionColIdx() {
		if err = oprot.WriteFieldBegin("version_col_idx", thrift.I32, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.VersionColIdx); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TTabletSchema) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsDynamicSchema() {
		if err = oprot.WriteFieldBegin("is_dynamic_schema", thrift.BOOL, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsDynamicSchema); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TTabletSchema) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoreRowColumn() {
		if err = oprot.WriteFieldBegin("store_row_column", thrift.BOOL, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.StoreRowColumn); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TTabletSchema) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableSingleReplicaCompaction() {
		if err = oprot.WriteFieldBegin("enable_single_replica_compaction", thrift.BOOL, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableSingleReplicaCompaction); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TTabletSchema) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipWriteIndexOnLoad() {
		if err = oprot.WriteFieldBegin("skip_write_index_on_load", thrift.BOOL, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.SkipWriteIndexOnLoad); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TTabletSchema) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetClusterKeyIdxes() {
		if err = oprot.WriteFieldBegin("cluster_key_idxes", thrift.LIST, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.ClusterKeyIdxes)); err != nil {
			return err
		}
		for _, v := range p.ClusterKeyIdxes {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TTabletSchema) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetRowStoreColCids() {
		if err = oprot.WriteFieldBegin("row_store_col_cids", thrift.LIST, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.RowStoreColCids)); err != nil {
			return err
		}
		for _, v := range p.RowStoreColCids {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *TTabletSchema) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetRowStorePageSize() {
		if err = oprot.WriteFieldBegin("row_store_page_size", thrift.I64, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.RowStorePageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *TTabletSchema) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetVariantEnableFlattenNested() {
		if err = oprot.WriteFieldBegin("variant_enable_flatten_nested", thrift.BOOL, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.VariantEnableFlattenNested); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *TTabletSchema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTabletSchema(%+v)", *p)

}

func (p *TTabletSchema) DeepEqual(ano *TTabletSchema) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ShortKeyColumnCount) {
		return false
	}
	if !p.Field2DeepEqual(ano.SchemaHash) {
		return false
	}
	if !p.Field3DeepEqual(ano.KeysType) {
		return false
	}
	if !p.Field4DeepEqual(ano.StorageType) {
		return false
	}
	if !p.Field5DeepEqual(ano.Columns) {
		return false
	}
	if !p.Field6DeepEqual(ano.BloomFilterFpp) {
		return false
	}
	if !p.Field7DeepEqual(ano.Indexes) {
		return false
	}
	if !p.Field8DeepEqual(ano.IsInMemory) {
		return false
	}
	if !p.Field9DeepEqual(ano.DeleteSignIdx) {
		return false
	}
	if !p.Field10DeepEqual(ano.SequenceColIdx) {
		return false
	}
	if !p.Field11DeepEqual(ano.SortType) {
		return false
	}
	if !p.Field12DeepEqual(ano.SortColNum) {
		return false
	}
	if !p.Field13DeepEqual(ano.DisableAutoCompaction) {
		return false
	}
	if !p.Field14DeepEqual(ano.VersionColIdx) {
		return false
	}
	if !p.Field15DeepEqual(ano.IsDynamicSchema) {
		return false
	}
	if !p.Field16DeepEqual(ano.StoreRowColumn) {
		return false
	}
	if !p.Field17DeepEqual(ano.EnableSingleReplicaCompaction) {
		return false
	}
	if !p.Field18DeepEqual(ano.SkipWriteIndexOnLoad) {
		return false
	}
	if !p.Field19DeepEqual(ano.ClusterKeyIdxes) {
		return false
	}
	if !p.Field20DeepEqual(ano.RowStoreColCids) {
		return false
	}
	if !p.Field21DeepEqual(ano.RowStorePageSize) {
		return false
	}
	if !p.Field22DeepEqual(ano.VariantEnableFlattenNested) {
		return false
	}
	return true
}

func (p *TTabletSchema) Field1DeepEqual(src int16) bool {

	if p.ShortKeyColumnCount != src {
		return false
	}
	return true
}
func (p *TTabletSchema) Field2DeepEqual(src types.TSchemaHash) bool {

	if p.SchemaHash != src {
		return false
	}
	return true
}
func (p *TTabletSchema) Field3DeepEqual(src types.TKeysType) bool {

	if p.KeysType != src {
		return false
	}
	return true
}
func (p *TTabletSchema) Field4DeepEqual(src types.TStorageType) bool {

	if p.StorageType != src {
		return false
	}
	return true
}
func (p *TTabletSchema) Field5DeepEqual(src []*descriptors.TColumn) bool {

	if len(p.Columns) != len(src) {
		return false
	}
	for i, v := range p.Columns {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TTabletSchema) Field6DeepEqual(src *float64) bool {

	if p.BloomFilterFpp == src {
		return true
	} else if p.BloomFilterFpp == nil || src == nil {
		return false
	}
	if *p.BloomFilterFpp != *src {
		return false
	}
	return true
}
func (p *TTabletSchema) Field7DeepEqual(src []*descriptors.TOlapTableIndex) bool {

	if len(p.Indexes) != len(src) {
		return false
	}
	for i, v := range p.Indexes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TTabletSchema) Field8DeepEqual(src *bool) bool {

	if p.IsInMemory == src {
		return true
	} else if p.IsInMemory == nil || src == nil {
		return false
	}
	if *p.IsInMemory != *src {
		return false
	}
	return true
}
func (p *TTabletSchema) Field9DeepEqual(src int32) bool {

	if p.DeleteSignIdx != src {
		return false
	}
	return true
}
func (p *TTabletSchema) Field10DeepEqual(src int32) bool {

	if p.SequenceColIdx != src {
		return false
	}
	return true
}
func (p *TTabletSchema) Field11DeepEqual(src *types.TSortType) bool {

	if p.SortType == src {
		return true
	} else if p.SortType == nil || src == nil {
		return false
	}
	if *p.SortType != *src {
		return false
	}
	return true
}
func (p *TTabletSchema) Field12DeepEqual(src *int32) bool {

	if p.SortColNum == src {
		return true
	} else if p.SortColNum == nil || src == nil {
		return false
	}
	if *p.SortColNum != *src {
		return false
	}
	return true
}
func (p *TTabletSchema) Field13DeepEqual(src *bool) bool {

	if p.DisableAutoCompaction == src {
		return true
	} else if p.DisableAutoCompaction == nil || src == nil {
		return false
	}
	if *p.DisableAutoCompaction != *src {
		return false
	}
	return true
}
func (p *TTabletSchema) Field14DeepEqual(src int32) bool {

	if p.VersionColIdx != src {
		return false
	}
	return true
}
func (p *TTabletSchema) Field15DeepEqual(src bool) bool {

	if p.IsDynamicSchema != src {
		return false
	}
	return true
}
func (p *TTabletSchema) Field16DeepEqual(src bool) bool {

	if p.StoreRowColumn != src {
		return false
	}
	return true
}
func (p *TTabletSchema) Field17DeepEqual(src bool) bool {

	if p.EnableSingleReplicaCompaction != src {
		return false
	}
	return true
}
func (p *TTabletSchema) Field18DeepEqual(src bool) bool {

	if p.SkipWriteIndexOnLoad != src {
		return false
	}
	return true
}
func (p *TTabletSchema) Field19DeepEqual(src []int32) bool {

	if len(p.ClusterKeyIdxes) != len(src) {
		return false
	}
	for i, v := range p.ClusterKeyIdxes {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TTabletSchema) Field20DeepEqual(src []int32) bool {

	if len(p.RowStoreColCids) != len(src) {
		return false
	}
	for i, v := range p.RowStoreColCids {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TTabletSchema) Field21DeepEqual(src int64) bool {

	if p.RowStorePageSize != src {
		return false
	}
	return true
}
func (p *TTabletSchema) Field22DeepEqual(src bool) bool {

	if p.VariantEnableFlattenNested != src {
		return false
	}
	return true
}

type TS3StorageParam struct {
	Endpoint         *string          `thrift:"endpoint,1,optional" frugal:"1,optional,string" json:"endpoint,omitempty"`
	Region           *string          `thrift:"region,2,optional" frugal:"2,optional,string" json:"region,omitempty"`
	Ak               *string          `thrift:"ak,3,optional" frugal:"3,optional,string" json:"ak,omitempty"`
	Sk               *string          `thrift:"sk,4,optional" frugal:"4,optional,string" json:"sk,omitempty"`
	MaxConn          int32            `thrift:"max_conn,5,optional" frugal:"5,optional,i32" json:"max_conn,omitempty"`
	RequestTimeoutMs int32            `thrift:"request_timeout_ms,6,optional" frugal:"6,optional,i32" json:"request_timeout_ms,omitempty"`
	ConnTimeoutMs    int32            `thrift:"conn_timeout_ms,7,optional" frugal:"7,optional,i32" json:"conn_timeout_ms,omitempty"`
	RootPath         *string          `thrift:"root_path,8,optional" frugal:"8,optional,string" json:"root_path,omitempty"`
	Bucket           *string          `thrift:"bucket,9,optional" frugal:"9,optional,string" json:"bucket,omitempty"`
	UsePathStyle     bool             `thrift:"use_path_style,10,optional" frugal:"10,optional,bool" json:"use_path_style,omitempty"`
	Token            *string          `thrift:"token,11,optional" frugal:"11,optional,string" json:"token,omitempty"`
	Provider         *TObjStorageType `thrift:"provider,12,optional" frugal:"12,optional,TObjStorageType" json:"provider,omitempty"`
}

func NewTS3StorageParam() *TS3StorageParam {
	return &TS3StorageParam{

		MaxConn:          50,
		RequestTimeoutMs: 3000,
		ConnTimeoutMs:    1000,
		UsePathStyle:     false,
	}
}

func (p *TS3StorageParam) InitDefault() {
	p.MaxConn = 50
	p.RequestTimeoutMs = 3000
	p.ConnTimeoutMs = 1000
	p.UsePathStyle = false
}

var TS3StorageParam_Endpoint_DEFAULT string

func (p *TS3StorageParam) GetEndpoint() (v string) {
	if !p.IsSetEndpoint() {
		return TS3StorageParam_Endpoint_DEFAULT
	}
	return *p.Endpoint
}

var TS3StorageParam_Region_DEFAULT string

func (p *TS3StorageParam) GetRegion() (v string) {
	if !p.IsSetRegion() {
		return TS3StorageParam_Region_DEFAULT
	}
	return *p.Region
}

var TS3StorageParam_Ak_DEFAULT string

func (p *TS3StorageParam) GetAk() (v string) {
	if !p.IsSetAk() {
		return TS3StorageParam_Ak_DEFAULT
	}
	return *p.Ak
}

var TS3StorageParam_Sk_DEFAULT string

func (p *TS3StorageParam) GetSk() (v string) {
	if !p.IsSetSk() {
		return TS3StorageParam_Sk_DEFAULT
	}
	return *p.Sk
}

var TS3StorageParam_MaxConn_DEFAULT int32 = 50

func (p *TS3StorageParam) GetMaxConn() (v int32) {
	if !p.IsSetMaxConn() {
		return TS3StorageParam_MaxConn_DEFAULT
	}
	return p.MaxConn
}

var TS3StorageParam_RequestTimeoutMs_DEFAULT int32 = 3000

func (p *TS3StorageParam) GetRequestTimeoutMs() (v int32) {
	if !p.IsSetRequestTimeoutMs() {
		return TS3StorageParam_RequestTimeoutMs_DEFAULT
	}
	return p.RequestTimeoutMs
}

var TS3StorageParam_ConnTimeoutMs_DEFAULT int32 = 1000

func (p *TS3StorageParam) GetConnTimeoutMs() (v int32) {
	if !p.IsSetConnTimeoutMs() {
		return TS3StorageParam_ConnTimeoutMs_DEFAULT
	}
	return p.ConnTimeoutMs
}

var TS3StorageParam_RootPath_DEFAULT string

func (p *TS3StorageParam) GetRootPath() (v string) {
	if !p.IsSetRootPath() {
		return TS3StorageParam_RootPath_DEFAULT
	}
	return *p.RootPath
}

var TS3StorageParam_Bucket_DEFAULT string

func (p *TS3StorageParam) GetBucket() (v string) {
	if !p.IsSetBucket() {
		return TS3StorageParam_Bucket_DEFAULT
	}
	return *p.Bucket
}

var TS3StorageParam_UsePathStyle_DEFAULT bool = false

func (p *TS3StorageParam) GetUsePathStyle() (v bool) {
	if !p.IsSetUsePathStyle() {
		return TS3StorageParam_UsePathStyle_DEFAULT
	}
	return p.UsePathStyle
}

var TS3StorageParam_Token_DEFAULT string

func (p *TS3StorageParam) GetToken() (v string) {
	if !p.IsSetToken() {
		return TS3StorageParam_Token_DEFAULT
	}
	return *p.Token
}

var TS3StorageParam_Provider_DEFAULT TObjStorageType

func (p *TS3StorageParam) GetProvider() (v TObjStorageType) {
	if !p.IsSetProvider() {
		return TS3StorageParam_Provider_DEFAULT
	}
	return *p.Provider
}
func (p *TS3StorageParam) SetEndpoint(val *string) {
	p.Endpoint = val
}
func (p *TS3StorageParam) SetRegion(val *string) {
	p.Region = val
}
func (p *TS3StorageParam) SetAk(val *string) {
	p.Ak = val
}
func (p *TS3StorageParam) SetSk(val *string) {
	p.Sk = val
}
func (p *TS3StorageParam) SetMaxConn(val int32) {
	p.MaxConn = val
}
func (p *TS3StorageParam) SetRequestTimeoutMs(val int32) {
	p.RequestTimeoutMs = val
}
func (p *TS3StorageParam) SetConnTimeoutMs(val int32) {
	p.ConnTimeoutMs = val
}
func (p *TS3StorageParam) SetRootPath(val *string) {
	p.RootPath = val
}
func (p *TS3StorageParam) SetBucket(val *string) {
	p.Bucket = val
}
func (p *TS3StorageParam) SetUsePathStyle(val bool) {
	p.UsePathStyle = val
}
func (p *TS3StorageParam) SetToken(val *string) {
	p.Token = val
}
func (p *TS3StorageParam) SetProvider(val *TObjStorageType) {
	p.Provider = val
}

var fieldIDToName_TS3StorageParam = map[int16]string{
	1:  "endpoint",
	2:  "region",
	3:  "ak",
	4:  "sk",
	5:  "max_conn",
	6:  "request_timeout_ms",
	7:  "conn_timeout_ms",
	8:  "root_path",
	9:  "bucket",
	10: "use_path_style",
	11: "token",
	12: "provider",
}

func (p *TS3StorageParam) IsSetEndpoint() bool {
	return p.Endpoint != nil
}

func (p *TS3StorageParam) IsSetRegion() bool {
	return p.Region != nil
}

func (p *TS3StorageParam) IsSetAk() bool {
	return p.Ak != nil
}

func (p *TS3StorageParam) IsSetSk() bool {
	return p.Sk != nil
}

func (p *TS3StorageParam) IsSetMaxConn() bool {
	return p.MaxConn != TS3StorageParam_MaxConn_DEFAULT
}

func (p *TS3StorageParam) IsSetRequestTimeoutMs() bool {
	return p.RequestTimeoutMs != TS3StorageParam_RequestTimeoutMs_DEFAULT
}

func (p *TS3StorageParam) IsSetConnTimeoutMs() bool {
	return p.ConnTimeoutMs != TS3StorageParam_ConnTimeoutMs_DEFAULT
}

func (p *TS3StorageParam) IsSetRootPath() bool {
	return p.RootPath != nil
}

func (p *TS3StorageParam) IsSetBucket() bool {
	return p.Bucket != nil
}

func (p *TS3StorageParam) IsSetUsePathStyle() bool {
	return p.UsePathStyle != TS3StorageParam_UsePathStyle_DEFAULT
}

func (p *TS3StorageParam) IsSetToken() bool {
	return p.Token != nil
}

func (p *TS3StorageParam) IsSetProvider() bool {
	return p.Provider != nil
}

func (p *TS3StorageParam) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TS3StorageParam[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TS3StorageParam) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Endpoint = _field
	return nil
}
func (p *TS3StorageParam) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Region = _field
	return nil
}
func (p *TS3StorageParam) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Ak = _field
	return nil
}
func (p *TS3StorageParam) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Sk = _field
	return nil
}
func (p *TS3StorageParam) ReadField5(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxConn = _field
	return nil
}
func (p *TS3StorageParam) ReadField6(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RequestTimeoutMs = _field
	return nil
}
func (p *TS3StorageParam) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ConnTimeoutMs = _field
	return nil
}
func (p *TS3StorageParam) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RootPath = _field
	return nil
}
func (p *TS3StorageParam) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Bucket = _field
	return nil
}
func (p *TS3StorageParam) ReadField10(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UsePathStyle = _field
	return nil
}
func (p *TS3StorageParam) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}
func (p *TS3StorageParam) ReadField12(iprot thrift.TProtocol) error {

	var _field *TObjStorageType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TObjStorageType(v)
		_field = &tmp
	}
	p.Provider = _field
	return nil
}

func (p *TS3StorageParam) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TS3StorageParam"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TS3StorageParam) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndpoint() {
		if err = oprot.WriteFieldBegin("endpoint", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Endpoint); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TS3StorageParam) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegion() {
		if err = oprot.WriteFieldBegin("region", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Region); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TS3StorageParam) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAk() {
		if err = oprot.WriteFieldBegin("ak", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Ak); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TS3StorageParam) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSk() {
		if err = oprot.WriteFieldBegin("sk", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Sk); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TS3StorageParam) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxConn() {
		if err = oprot.WriteFieldBegin("max_conn", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.MaxConn); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TS3StorageParam) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestTimeoutMs() {
		if err = oprot.WriteFieldBegin("request_timeout_ms", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.RequestTimeoutMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TS3StorageParam) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetConnTimeoutMs() {
		if err = oprot.WriteFieldBegin("conn_timeout_ms", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.ConnTimeoutMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TS3StorageParam) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetRootPath() {
		if err = oprot.WriteFieldBegin("root_path", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RootPath); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TS3StorageParam) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetBucket() {
		if err = oprot.WriteFieldBegin("bucket", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Bucket); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TS3StorageParam) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsePathStyle() {
		if err = oprot.WriteFieldBegin("use_path_style", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.UsePathStyle); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TS3StorageParam) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TS3StorageParam) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetProvider() {
		if err = oprot.WriteFieldBegin("provider", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Provider)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TS3StorageParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TS3StorageParam(%+v)", *p)

}

func (p *TS3StorageParam) DeepEqual(ano *TS3StorageParam) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Endpoint) {
		return false
	}
	if !p.Field2DeepEqual(ano.Region) {
		return false
	}
	if !p.Field3DeepEqual(ano.Ak) {
		return false
	}
	if !p.Field4DeepEqual(ano.Sk) {
		return false
	}
	if !p.Field5DeepEqual(ano.MaxConn) {
		return false
	}
	if !p.Field6DeepEqual(ano.RequestTimeoutMs) {
		return false
	}
	if !p.Field7DeepEqual(ano.ConnTimeoutMs) {
		return false
	}
	if !p.Field8DeepEqual(ano.RootPath) {
		return false
	}
	if !p.Field9DeepEqual(ano.Bucket) {
		return false
	}
	if !p.Field10DeepEqual(ano.UsePathStyle) {
		return false
	}
	if !p.Field11DeepEqual(ano.Token) {
		return false
	}
	if !p.Field12DeepEqual(ano.Provider) {
		return false
	}
	return true
}

func (p *TS3StorageParam) Field1DeepEqual(src *string) bool {

	if p.Endpoint == src {
		return true
	} else if p.Endpoint == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Endpoint, *src) != 0 {
		return false
	}
	return true
}
func (p *TS3StorageParam) Field2DeepEqual(src *string) bool {

	if p.Region == src {
		return true
	} else if p.Region == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Region, *src) != 0 {
		return false
	}
	return true
}
func (p *TS3StorageParam) Field3DeepEqual(src *string) bool {

	if p.Ak == src {
		return true
	} else if p.Ak == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Ak, *src) != 0 {
		return false
	}
	return true
}
func (p *TS3StorageParam) Field4DeepEqual(src *string) bool {

	if p.Sk == src {
		return true
	} else if p.Sk == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Sk, *src) != 0 {
		return false
	}
	return true
}
func (p *TS3StorageParam) Field5DeepEqual(src int32) bool {

	if p.MaxConn != src {
		return false
	}
	return true
}
func (p *TS3StorageParam) Field6DeepEqual(src int32) bool {

	if p.RequestTimeoutMs != src {
		return false
	}
	return true
}
func (p *TS3StorageParam) Field7DeepEqual(src int32) bool {

	if p.ConnTimeoutMs != src {
		return false
	}
	return true
}
func (p *TS3StorageParam) Field8DeepEqual(src *string) bool {

	if p.RootPath == src {
		return true
	} else if p.RootPath == nil || src == nil {
		return false
	}
	if strings.Compare(*p.RootPath, *src) != 0 {
		return false
	}
	return true
}
func (p *TS3StorageParam) Field9DeepEqual(src *string) bool {

	if p.Bucket == src {
		return true
	} else if p.Bucket == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Bucket, *src) != 0 {
		return false
	}
	return true
}
func (p *TS3StorageParam) Field10DeepEqual(src bool) bool {

	if p.UsePathStyle != src {
		return false
	}
	return true
}
func (p *TS3StorageParam) Field11DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *TS3StorageParam) Field12DeepEqual(src *TObjStorageType) bool {

	if p.Provider == src {
		return true
	} else if p.Provider == nil || src == nil {
		return false
	}
	if *p.Provider != *src {
		return false
	}
	return true
}

type TStoragePolicy struct {
	Id               *int64  `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name             *string `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Version          *int64  `thrift:"version,3,optional" frugal:"3,optional,i64" json:"version,omitempty"`
	CooldownDatetime *int64  `thrift:"cooldown_datetime,4,optional" frugal:"4,optional,i64" json:"cooldown_datetime,omitempty"`
	CooldownTtl      *int64  `thrift:"cooldown_ttl,5,optional" frugal:"5,optional,i64" json:"cooldown_ttl,omitempty"`
	ResourceId       *int64  `thrift:"resource_id,6,optional" frugal:"6,optional,i64" json:"resource_id,omitempty"`
}

func NewTStoragePolicy() *TStoragePolicy {
	return &TStoragePolicy{}
}

func (p *TStoragePolicy) InitDefault() {
}

var TStoragePolicy_Id_DEFAULT int64

func (p *TStoragePolicy) GetId() (v int64) {
	if !p.IsSetId() {
		return TStoragePolicy_Id_DEFAULT
	}
	return *p.Id
}

var TStoragePolicy_Name_DEFAULT string

func (p *TStoragePolicy) GetName() (v string) {
	if !p.IsSetName() {
		return TStoragePolicy_Name_DEFAULT
	}
	return *p.Name
}

var TStoragePolicy_Version_DEFAULT int64

func (p *TStoragePolicy) GetVersion() (v int64) {
	if !p.IsSetVersion() {
		return TStoragePolicy_Version_DEFAULT
	}
	return *p.Version
}

var TStoragePolicy_CooldownDatetime_DEFAULT int64

func (p *TStoragePolicy) GetCooldownDatetime() (v int64) {
	if !p.IsSetCooldownDatetime() {
		return TStoragePolicy_CooldownDatetime_DEFAULT
	}
	return *p.CooldownDatetime
}

var TStoragePolicy_CooldownTtl_DEFAULT int64

func (p *TStoragePolicy) GetCooldownTtl() (v int64) {
	if !p.IsSetCooldownTtl() {
		return TStoragePolicy_CooldownTtl_DEFAULT
	}
	return *p.CooldownTtl
}

var TStoragePolicy_ResourceId_DEFAULT int64

func (p *TStoragePolicy) GetResourceId() (v int64) {
	if !p.IsSetResourceId() {
		return TStoragePolicy_ResourceId_DEFAULT
	}
	return *p.ResourceId
}
func (p *TStoragePolicy) SetId(val *int64) {
	p.Id = val
}
func (p *TStoragePolicy) SetName(val *string) {
	p.Name = val
}
func (p *TStoragePolicy) SetVersion(val *int64) {
	p.Version = val
}
func (p *TStoragePolicy) SetCooldownDatetime(val *int64) {
	p.CooldownDatetime = val
}
func (p *TStoragePolicy) SetCooldownTtl(val *int64) {
	p.CooldownTtl = val
}
func (p *TStoragePolicy) SetResourceId(val *int64) {
	p.ResourceId = val
}

var fieldIDToName_TStoragePolicy = map[int16]string{
	1: "id",
	2: "name",
	3: "version",
	4: "cooldown_datetime",
	5: "cooldown_ttl",
	6: "resource_id",
}

func (p *TStoragePolicy) IsSetId() bool {
	return p.Id != nil
}

func (p *TStoragePolicy) IsSetName() bool {
	return p.Name != nil
}

func (p *TStoragePolicy) IsSetVersion() bool {
	return p.Version != nil
}

func (p *TStoragePolicy) IsSetCooldownDatetime() bool {
	return p.CooldownDatetime != nil
}

func (p *TStoragePolicy) IsSetCooldownTtl() bool {
	return p.CooldownTtl != nil
}

func (p *TStoragePolicy) IsSetResourceId() bool {
	return p.ResourceId != nil
}

func (p *TStoragePolicy) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TStoragePolicy[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TStoragePolicy) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *TStoragePolicy) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *TStoragePolicy) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *TStoragePolicy) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CooldownDatetime = _field
	return nil
}
func (p *TStoragePolicy) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CooldownTtl = _field
	return nil
}
func (p *TStoragePolicy) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResourceId = _field
	return nil
}

func (p *TStoragePolicy) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TStoragePolicy"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TStoragePolicy) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TStoragePolicy) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TStoragePolicy) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TStoragePolicy) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCooldownDatetime() {
		if err = oprot.WriteFieldBegin("cooldown_datetime", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CooldownDatetime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TStoragePolicy) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCooldownTtl() {
		if err = oprot.WriteFieldBegin("cooldown_ttl", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CooldownTtl); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TStoragePolicy) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetResourceId() {
		if err = oprot.WriteFieldBegin("resource_id", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ResourceId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TStoragePolicy) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStoragePolicy(%+v)", *p)

}

func (p *TStoragePolicy) DeepEqual(ano *TStoragePolicy) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.CooldownDatetime) {
		return false
	}
	if !p.Field5DeepEqual(ano.CooldownTtl) {
		return false
	}
	if !p.Field6DeepEqual(ano.ResourceId) {
		return false
	}
	return true
}

func (p *TStoragePolicy) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *TStoragePolicy) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *TStoragePolicy) Field3DeepEqual(src *int64) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if *p.Version != *src {
		return false
	}
	return true
}
func (p *TStoragePolicy) Field4DeepEqual(src *int64) bool {

	if p.CooldownDatetime == src {
		return true
	} else if p.CooldownDatetime == nil || src == nil {
		return false
	}
	if *p.CooldownDatetime != *src {
		return false
	}
	return true
}
func (p *TStoragePolicy) Field5DeepEqual(src *int64) bool {

	if p.CooldownTtl == src {
		return true
	} else if p.CooldownTtl == nil || src == nil {
		return false
	}
	if *p.CooldownTtl != *src {
		return false
	}
	return true
}
func (p *TStoragePolicy) Field6DeepEqual(src *int64) bool {

	if p.ResourceId == src {
		return true
	} else if p.ResourceId == nil || src == nil {
		return false
	}
	if *p.ResourceId != *src {
		return false
	}
	return true
}

type TStorageResource struct {
	Id               *int64                 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name             *string                `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Version          *int64                 `thrift:"version,3,optional" frugal:"3,optional,i64" json:"version,omitempty"`
	S3StorageParam   *TS3StorageParam       `thrift:"s3_storage_param,4,optional" frugal:"4,optional,TS3StorageParam" json:"s3_storage_param,omitempty"`
	HdfsStorageParam *plannodes.THdfsParams `thrift:"hdfs_storage_param,5,optional" frugal:"5,optional,plannodes.THdfsParams" json:"hdfs_storage_param,omitempty"`
}

func NewTStorageResource() *TStorageResource {
	return &TStorageResource{}
}

func (p *TStorageResource) InitDefault() {
}

var TStorageResource_Id_DEFAULT int64

func (p *TStorageResource) GetId() (v int64) {
	if !p.IsSetId() {
		return TStorageResource_Id_DEFAULT
	}
	return *p.Id
}

var TStorageResource_Name_DEFAULT string

func (p *TStorageResource) GetName() (v string) {
	if !p.IsSetName() {
		return TStorageResource_Name_DEFAULT
	}
	return *p.Name
}

var TStorageResource_Version_DEFAULT int64

func (p *TStorageResource) GetVersion() (v int64) {
	if !p.IsSetVersion() {
		return TStorageResource_Version_DEFAULT
	}
	return *p.Version
}

var TStorageResource_S3StorageParam_DEFAULT *TS3StorageParam

func (p *TStorageResource) GetS3StorageParam() (v *TS3StorageParam) {
	if !p.IsSetS3StorageParam() {
		return TStorageResource_S3StorageParam_DEFAULT
	}
	return p.S3StorageParam
}

var TStorageResource_HdfsStorageParam_DEFAULT *plannodes.THdfsParams

func (p *TStorageResource) GetHdfsStorageParam() (v *plannodes.THdfsParams) {
	if !p.IsSetHdfsStorageParam() {
		return TStorageResource_HdfsStorageParam_DEFAULT
	}
	return p.HdfsStorageParam
}
func (p *TStorageResource) SetId(val *int64) {
	p.Id = val
}
func (p *TStorageResource) SetName(val *string) {
	p.Name = val
}
func (p *TStorageResource) SetVersion(val *int64) {
	p.Version = val
}
func (p *TStorageResource) SetS3StorageParam(val *TS3StorageParam) {
	p.S3StorageParam = val
}
func (p *TStorageResource) SetHdfsStorageParam(val *plannodes.THdfsParams) {
	p.HdfsStorageParam = val
}

var fieldIDToName_TStorageResource = map[int16]string{
	1: "id",
	2: "name",
	3: "version",
	4: "s3_storage_param",
	5: "hdfs_storage_param",
}

func (p *TStorageResource) IsSetId() bool {
	return p.Id != nil
}

func (p *TStorageResource) IsSetName() bool {
	return p.Name != nil
}

func (p *TStorageResource) IsSetVersion() bool {
	return p.Version != nil
}

func (p *TStorageResource) IsSetS3StorageParam() bool {
	return p.S3StorageParam != nil
}

func (p *TStorageResource) IsSetHdfsStorageParam() bool {
	return p.HdfsStorageParam != nil
}

func (p *TStorageResource) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TStorageResource[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TStorageResource) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *TStorageResource) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *TStorageResource) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *TStorageResource) ReadField4(iprot thrift.TProtocol) error {
	_field := NewTS3StorageParam()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.S3StorageParam = _field
	return nil
}
func (p *TStorageResource) ReadField5(iprot thrift.TProtocol) error {
	_field := plannodes.NewTHdfsParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.HdfsStorageParam = _field
	return nil
}

func (p *TStorageResource) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TStorageResource"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TStorageResource) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TStorageResource) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TStorageResource) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TStorageResource) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetS3StorageParam() {
		if err = oprot.WriteFieldBegin("s3_storage_param", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.S3StorageParam.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TStorageResource) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetHdfsStorageParam() {
		if err = oprot.WriteFieldBegin("hdfs_storage_param", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.HdfsStorageParam.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TStorageResource) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStorageResource(%+v)", *p)

}

func (p *TStorageResource) DeepEqual(ano *TStorageResource) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.S3StorageParam) {
		return false
	}
	if !p.Field5DeepEqual(ano.HdfsStorageParam) {
		return false
	}
	return true
}

func (p *TStorageResource) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *TStorageResource) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *TStorageResource) Field3DeepEqual(src *int64) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if *p.Version != *src {
		return false
	}
	return true
}
func (p *TStorageResource) Field4DeepEqual(src *TS3StorageParam) bool {

	if !p.S3StorageParam.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TStorageResource) Field5DeepEqual(src *plannodes.THdfsParams) bool {

	if !p.HdfsStorageParam.DeepEqual(src) {
		return false
	}
	return true
}

type TPushStoragePolicyReq struct {
	StoragePolicy        []*TStoragePolicy   `thrift:"storage_policy,1,optional" frugal:"1,optional,list<TStoragePolicy>" json:"storage_policy,omitempty"`
	Resource             []*TStorageResource `thrift:"resource,2,optional" frugal:"2,optional,list<TStorageResource>" json:"resource,omitempty"`
	DroppedStoragePolicy []int64             `thrift:"dropped_storage_policy,3,optional" frugal:"3,optional,list<i64>" json:"dropped_storage_policy,omitempty"`
}

func NewTPushStoragePolicyReq() *TPushStoragePolicyReq {
	return &TPushStoragePolicyReq{}
}

func (p *TPushStoragePolicyReq) InitDefault() {
}

var TPushStoragePolicyReq_StoragePolicy_DEFAULT []*TStoragePolicy

func (p *TPushStoragePolicyReq) GetStoragePolicy() (v []*TStoragePolicy) {
	if !p.IsSetStoragePolicy() {
		return TPushStoragePolicyReq_StoragePolicy_DEFAULT
	}
	return p.StoragePolicy
}

var TPushStoragePolicyReq_Resource_DEFAULT []*TStorageResource

func (p *TPushStoragePolicyReq) GetResource() (v []*TStorageResource) {
	if !p.IsSetResource() {
		return TPushStoragePolicyReq_Resource_DEFAULT
	}
	return p.Resource
}

var TPushStoragePolicyReq_DroppedStoragePolicy_DEFAULT []int64

func (p *TPushStoragePolicyReq) GetDroppedStoragePolicy() (v []int64) {
	if !p.IsSetDroppedStoragePolicy() {
		return TPushStoragePolicyReq_DroppedStoragePolicy_DEFAULT
	}
	return p.DroppedStoragePolicy
}
func (p *TPushStoragePolicyReq) SetStoragePolicy(val []*TStoragePolicy) {
	p.StoragePolicy = val
}
func (p *TPushStoragePolicyReq) SetResource(val []*TStorageResource) {
	p.Resource = val
}
func (p *TPushStoragePolicyReq) SetDroppedStoragePolicy(val []int64) {
	p.DroppedStoragePolicy = val
}

var fieldIDToName_TPushStoragePolicyReq = map[int16]string{
	1: "storage_policy",
	2: "resource",
	3: "dropped_storage_policy",
}

func (p *TPushStoragePolicyReq) IsSetStoragePolicy() bool {
	return p.StoragePolicy != nil
}

func (p *TPushStoragePolicyReq) IsSetResource() bool {
	return p.Resource != nil
}

func (p *TPushStoragePolicyReq) IsSetDroppedStoragePolicy() bool {
	return p.DroppedStoragePolicy != nil
}

func (p *TPushStoragePolicyReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPushStoragePolicyReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TPushStoragePolicyReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TStoragePolicy, 0, size)
	values := make([]TStoragePolicy, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.StoragePolicy = _field
	return nil
}
func (p *TPushStoragePolicyReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TStorageResource, 0, size)
	values := make([]TStorageResource, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Resource = _field
	return nil
}
func (p *TPushStoragePolicyReq) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DroppedStoragePolicy = _field
	return nil
}

func (p *TPushStoragePolicyReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPushStoragePolicyReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPushStoragePolicyReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoragePolicy() {
		if err = oprot.WriteFieldBegin("storage_policy", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StoragePolicy)); err != nil {
			return err
		}
		for _, v := range p.StoragePolicy {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPushStoragePolicyReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetResource() {
		if err = oprot.WriteFieldBegin("resource", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Resource)); err != nil {
			return err
		}
		for _, v := range p.Resource {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPushStoragePolicyReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDroppedStoragePolicy() {
		if err = oprot.WriteFieldBegin("dropped_storage_policy", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.DroppedStoragePolicy)); err != nil {
			return err
		}
		for _, v := range p.DroppedStoragePolicy {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPushStoragePolicyReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPushStoragePolicyReq(%+v)", *p)

}

func (p *TPushStoragePolicyReq) DeepEqual(ano *TPushStoragePolicyReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.StoragePolicy) {
		return false
	}
	if !p.Field2DeepEqual(ano.Resource) {
		return false
	}
	if !p.Field3DeepEqual(ano.DroppedStoragePolicy) {
		return false
	}
	return true
}

func (p *TPushStoragePolicyReq) Field1DeepEqual(src []*TStoragePolicy) bool {

	if len(p.StoragePolicy) != len(src) {
		return false
	}
	for i, v := range p.StoragePolicy {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPushStoragePolicyReq) Field2DeepEqual(src []*TStorageResource) bool {

	if len(p.Resource) != len(src) {
		return false
	}
	for i, v := range p.Resource {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPushStoragePolicyReq) Field3DeepEqual(src []int64) bool {

	if len(p.DroppedStoragePolicy) != len(src) {
		return false
	}
	for i, v := range p.DroppedStoragePolicy {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type TCleanTrashReq struct {
}

func NewTCleanTrashReq() *TCleanTrashReq {
	return &TCleanTrashReq{}
}

func (p *TCleanTrashReq) InitDefault() {
}

var fieldIDToName_TCleanTrashReq = map[int16]string{}

func (p *TCleanTrashReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TCleanTrashReq) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("TCleanTrashReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCleanTrashReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCleanTrashReq(%+v)", *p)

}

func (p *TCleanTrashReq) DeepEqual(ano *TCleanTrashReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type TCleanUDFCacheReq struct {
	FunctionSignature *string `thrift:"function_signature,1,optional" frugal:"1,optional,string" json:"function_signature,omitempty"`
}

func NewTCleanUDFCacheReq() *TCleanUDFCacheReq {
	return &TCleanUDFCacheReq{}
}

func (p *TCleanUDFCacheReq) InitDefault() {
}

var TCleanUDFCacheReq_FunctionSignature_DEFAULT string

func (p *TCleanUDFCacheReq) GetFunctionSignature() (v string) {
	if !p.IsSetFunctionSignature() {
		return TCleanUDFCacheReq_FunctionSignature_DEFAULT
	}
	return *p.FunctionSignature
}
func (p *TCleanUDFCacheReq) SetFunctionSignature(val *string) {
	p.FunctionSignature = val
}

var fieldIDToName_TCleanUDFCacheReq = map[int16]string{
	1: "function_signature",
}

func (p *TCleanUDFCacheReq) IsSetFunctionSignature() bool {
	return p.FunctionSignature != nil
}

func (p *TCleanUDFCacheReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCleanUDFCacheReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TCleanUDFCacheReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FunctionSignature = _field
	return nil
}

func (p *TCleanUDFCacheReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCleanUDFCacheReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCleanUDFCacheReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFunctionSignature() {
		if err = oprot.WriteFieldBegin("function_signature", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FunctionSignature); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCleanUDFCacheReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCleanUDFCacheReq(%+v)", *p)

}

func (p *TCleanUDFCacheReq) DeepEqual(ano *TCleanUDFCacheReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FunctionSignature) {
		return false
	}
	return true
}

func (p *TCleanUDFCacheReq) Field1DeepEqual(src *string) bool {

	if p.FunctionSignature == src {
		return true
	} else if p.FunctionSignature == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FunctionSignature, *src) != 0 {
		return false
	}
	return true
}

type TBinlogConfig struct {
	Enable         *bool  `thrift:"enable,1,optional" frugal:"1,optional,bool" json:"enable,omitempty"`
	TtlSeconds     *int64 `thrift:"ttl_seconds,2,optional" frugal:"2,optional,i64" json:"ttl_seconds,omitempty"`
	MaxBytes       *int64 `thrift:"max_bytes,3,optional" frugal:"3,optional,i64" json:"max_bytes,omitempty"`
	MaxHistoryNums *int64 `thrift:"max_history_nums,4,optional" frugal:"4,optional,i64" json:"max_history_nums,omitempty"`
}

func NewTBinlogConfig() *TBinlogConfig {
	return &TBinlogConfig{}
}

func (p *TBinlogConfig) InitDefault() {
}

var TBinlogConfig_Enable_DEFAULT bool

func (p *TBinlogConfig) GetEnable() (v bool) {
	if !p.IsSetEnable() {
		return TBinlogConfig_Enable_DEFAULT
	}
	return *p.Enable
}

var TBinlogConfig_TtlSeconds_DEFAULT int64

func (p *TBinlogConfig) GetTtlSeconds() (v int64) {
	if !p.IsSetTtlSeconds() {
		return TBinlogConfig_TtlSeconds_DEFAULT
	}
	return *p.TtlSeconds
}

var TBinlogConfig_MaxBytes_DEFAULT int64

func (p *TBinlogConfig) GetMaxBytes() (v int64) {
	if !p.IsSetMaxBytes() {
		return TBinlogConfig_MaxBytes_DEFAULT
	}
	return *p.MaxBytes
}

var TBinlogConfig_MaxHistoryNums_DEFAULT int64

func (p *TBinlogConfig) GetMaxHistoryNums() (v int64) {
	if !p.IsSetMaxHistoryNums() {
		return TBinlogConfig_MaxHistoryNums_DEFAULT
	}
	return *p.MaxHistoryNums
}
func (p *TBinlogConfig) SetEnable(val *bool) {
	p.Enable = val
}
func (p *TBinlogConfig) SetTtlSeconds(val *int64) {
	p.TtlSeconds = val
}
func (p *TBinlogConfig) SetMaxBytes(val *int64) {
	p.MaxBytes = val
}
func (p *TBinlogConfig) SetMaxHistoryNums(val *int64) {
	p.MaxHistoryNums = val
}

var fieldIDToName_TBinlogConfig = map[int16]string{
	1: "enable",
	2: "ttl_seconds",
	3: "max_bytes",
	4: "max_history_nums",
}

func (p *TBinlogConfig) IsSetEnable() bool {
	return p.Enable != nil
}

func (p *TBinlogConfig) IsSetTtlSeconds() bool {
	return p.TtlSeconds != nil
}

func (p *TBinlogConfig) IsSetMaxBytes() bool {
	return p.MaxBytes != nil
}

func (p *TBinlogConfig) IsSetMaxHistoryNums() bool {
	return p.MaxHistoryNums != nil
}

func (p *TBinlogConfig) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TBinlogConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TBinlogConfig) ReadField1(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Enable = _field
	return nil
}
func (p *TBinlogConfig) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TtlSeconds = _field
	return nil
}
func (p *TBinlogConfig) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxBytes = _field
	return nil
}
func (p *TBinlogConfig) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxHistoryNums = _field
	return nil
}

func (p *TBinlogConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TBinlogConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TBinlogConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnable() {
		if err = oprot.WriteFieldBegin("enable", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Enable); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TBinlogConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTtlSeconds() {
		if err = oprot.WriteFieldBegin("ttl_seconds", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TtlSeconds); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TBinlogConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxBytes() {
		if err = oprot.WriteFieldBegin("max_bytes", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxBytes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TBinlogConfig) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxHistoryNums() {
		if err = oprot.WriteFieldBegin("max_history_nums", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxHistoryNums); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TBinlogConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBinlogConfig(%+v)", *p)

}

func (p *TBinlogConfig) DeepEqual(ano *TBinlogConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Enable) {
		return false
	}
	if !p.Field2DeepEqual(ano.TtlSeconds) {
		return false
	}
	if !p.Field3DeepEqual(ano.MaxBytes) {
		return false
	}
	if !p.Field4DeepEqual(ano.MaxHistoryNums) {
		return false
	}
	return true
}

func (p *TBinlogConfig) Field1DeepEqual(src *bool) bool {

	if p.Enable == src {
		return true
	} else if p.Enable == nil || src == nil {
		return false
	}
	if *p.Enable != *src {
		return false
	}
	return true
}
func (p *TBinlogConfig) Field2DeepEqual(src *int64) bool {

	if p.TtlSeconds == src {
		return true
	} else if p.TtlSeconds == nil || src == nil {
		return false
	}
	if *p.TtlSeconds != *src {
		return false
	}
	return true
}
func (p *TBinlogConfig) Field3DeepEqual(src *int64) bool {

	if p.MaxBytes == src {
		return true
	} else if p.MaxBytes == nil || src == nil {
		return false
	}
	if *p.MaxBytes != *src {
		return false
	}
	return true
}
func (p *TBinlogConfig) Field4DeepEqual(src *int64) bool {

	if p.MaxHistoryNums == src {
		return true
	} else if p.MaxHistoryNums == nil || src == nil {
		return false
	}
	if *p.MaxHistoryNums != *src {
		return false
	}
	return true
}

type TCreateTabletReq struct {
	TabletId                                  types.TTabletId                       `thrift:"tablet_id,1,required" frugal:"1,required,i64" json:"tablet_id"`
	TabletSchema                              *TTabletSchema                        `thrift:"tablet_schema,2,required" frugal:"2,required,TTabletSchema" json:"tablet_schema"`
	Version                                   *types.TVersion                       `thrift:"version,3,optional" frugal:"3,optional,i64" json:"version,omitempty"`
	VersionHash                               *types.TVersionHash                   `thrift:"version_hash,4,optional" frugal:"4,optional,i64" json:"version_hash,omitempty"`
	StorageMedium                             *types.TStorageMedium                 `thrift:"storage_medium,5,optional" frugal:"5,optional,TStorageMedium" json:"storage_medium,omitempty"`
	InRestoreMode                             *bool                                 `thrift:"in_restore_mode,6,optional" frugal:"6,optional,bool" json:"in_restore_mode,omitempty"`
	BaseTabletId                              *types.TTabletId                      `thrift:"base_tablet_id,7,optional" frugal:"7,optional,i64" json:"base_tablet_id,omitempty"`
	BaseSchemaHash                            *types.TSchemaHash                    `thrift:"base_schema_hash,8,optional" frugal:"8,optional,i32" json:"base_schema_hash,omitempty"`
	TableId                                   *int64                                `thrift:"table_id,9,optional" frugal:"9,optional,i64" json:"table_id,omitempty"`
	PartitionId                               *int64                                `thrift:"partition_id,10,optional" frugal:"10,optional,i64" json:"partition_id,omitempty"`
	AllocationTerm                            *int64                                `thrift:"allocation_term,11,optional" frugal:"11,optional,i64" json:"allocation_term,omitempty"`
	IsEcoMode                                 *bool                                 `thrift:"is_eco_mode,12,optional" frugal:"12,optional,bool" json:"is_eco_mode,omitempty"`
	StorageFormat                             *TStorageFormat                       `thrift:"storage_format,13,optional" frugal:"13,optional,TStorageFormat" json:"storage_format,omitempty"`
	TabletType                                *TTabletType                          `thrift:"tablet_type,14,optional" frugal:"14,optional,TTabletType" json:"tablet_type,omitempty"`
	CompressionType                           TCompressionType                      `thrift:"compression_type,16,optional" frugal:"16,optional,TCompressionType" json:"compression_type,omitempty"`
	ReplicaId                                 types.TReplicaId                      `thrift:"replica_id,17,optional" frugal:"17,optional,i64" json:"replica_id,omitempty"`
	EnableUniqueKeyMergeOnWrite               bool                                  `thrift:"enable_unique_key_merge_on_write,19,optional" frugal:"19,optional,bool" json:"enable_unique_key_merge_on_write,omitempty"`
	StoragePolicyId                           *int64                                `thrift:"storage_policy_id,20,optional" frugal:"20,optional,i64" json:"storage_policy_id,omitempty"`
	BinlogConfig                              *TBinlogConfig                        `thrift:"binlog_config,21,optional" frugal:"21,optional,TBinlogConfig" json:"binlog_config,omitempty"`
	CompactionPolicy                          string                                `thrift:"compaction_policy,22,optional" frugal:"22,optional,string" json:"compaction_policy,omitempty"`
	TimeSeriesCompactionGoalSizeMbytes        int64                                 `thrift:"time_series_compaction_goal_size_mbytes,23,optional" frugal:"23,optional,i64" json:"time_series_compaction_goal_size_mbytes,omitempty"`
	TimeSeriesCompactionFileCountThreshold    int64                                 `thrift:"time_series_compaction_file_count_threshold,24,optional" frugal:"24,optional,i64" json:"time_series_compaction_file_count_threshold,omitempty"`
	TimeSeriesCompactionTimeThresholdSeconds  int64                                 `thrift:"time_series_compaction_time_threshold_seconds,25,optional" frugal:"25,optional,i64" json:"time_series_compaction_time_threshold_seconds,omitempty"`
	TimeSeriesCompactionEmptyRowsetsThreshold int64                                 `thrift:"time_series_compaction_empty_rowsets_threshold,26,optional" frugal:"26,optional,i64" json:"time_series_compaction_empty_rowsets_threshold,omitempty"`
	TimeSeriesCompactionLevelThreshold        int64                                 `thrift:"time_series_compaction_level_threshold,27,optional" frugal:"27,optional,i64" json:"time_series_compaction_level_threshold,omitempty"`
	InvertedIndexStorageFormat                TInvertedIndexStorageFormat           `thrift:"inverted_index_storage_format,28,optional" frugal:"28,optional,TInvertedIndexStorageFormat" json:"inverted_index_storage_format,omitempty"`
	InvertedIndexFileStorageFormat            types.TInvertedIndexFileStorageFormat `thrift:"inverted_index_file_storage_format,29,optional" frugal:"29,optional,TInvertedIndexFileStorageFormat" json:"inverted_index_file_storage_format,omitempty"`
	IsInMemory                                bool                                  `thrift:"is_in_memory,1000,optional" frugal:"1000,optional,bool" json:"is_in_memory,omitempty"`
	IsPersistent                              bool                                  `thrift:"is_persistent,1001,optional" frugal:"1001,optional,bool" json:"is_persistent,omitempty"`
}

func NewTCreateTabletReq() *TCreateTabletReq {
	return &TCreateTabletReq{

		CompressionType:                           TCompressionType_LZ4F,
		ReplicaId:                                 0,
		EnableUniqueKeyMergeOnWrite:               false,
		CompactionPolicy:                          "size_based",
		TimeSeriesCompactionGoalSizeMbytes:        1024,
		TimeSeriesCompactionFileCountThreshold:    2000,
		TimeSeriesCompactionTimeThresholdSeconds:  3600,
		TimeSeriesCompactionEmptyRowsetsThreshold: 5,
		TimeSeriesCompactionLevelThreshold:        1,
		InvertedIndexStorageFormat:                TInvertedIndexStorageFormat_DEFAULT,
		InvertedIndexFileStorageFormat:            types.TInvertedIndexFileStorageFormat_V2,
		IsInMemory:                                false,
		IsPersistent:                              false,
	}
}

func (p *TCreateTabletReq) InitDefault() {
	p.CompressionType = TCompressionType_LZ4F
	p.ReplicaId = 0
	p.EnableUniqueKeyMergeOnWrite = false
	p.CompactionPolicy = "size_based"
	p.TimeSeriesCompactionGoalSizeMbytes = 1024
	p.TimeSeriesCompactionFileCountThreshold = 2000
	p.TimeSeriesCompactionTimeThresholdSeconds = 3600
	p.TimeSeriesCompactionEmptyRowsetsThreshold = 5
	p.TimeSeriesCompactionLevelThreshold = 1
	p.InvertedIndexStorageFormat = TInvertedIndexStorageFormat_DEFAULT
	p.InvertedIndexFileStorageFormat = types.TInvertedIndexFileStorageFormat_V2
	p.IsInMemory = false
	p.IsPersistent = false
}

func (p *TCreateTabletReq) GetTabletId() (v types.TTabletId) {
	return p.TabletId
}

var TCreateTabletReq_TabletSchema_DEFAULT *TTabletSchema

func (p *TCreateTabletReq) GetTabletSchema() (v *TTabletSchema) {
	if !p.IsSetTabletSchema() {
		return TCreateTabletReq_TabletSchema_DEFAULT
	}
	return p.TabletSchema
}

var TCreateTabletReq_Version_DEFAULT types.TVersion

func (p *TCreateTabletReq) GetVersion() (v types.TVersion) {
	if !p.IsSetVersion() {
		return TCreateTabletReq_Version_DEFAULT
	}
	return *p.Version
}

var TCreateTabletReq_VersionHash_DEFAULT types.TVersionHash

func (p *TCreateTabletReq) GetVersionHash() (v types.TVersionHash) {
	if !p.IsSetVersionHash() {
		return TCreateTabletReq_VersionHash_DEFAULT
	}
	return *p.VersionHash
}

var TCreateTabletReq_StorageMedium_DEFAULT types.TStorageMedium

func (p *TCreateTabletReq) GetStorageMedium() (v types.TStorageMedium) {
	if !p.IsSetStorageMedium() {
		return TCreateTabletReq_StorageMedium_DEFAULT
	}
	return *p.StorageMedium
}

var TCreateTabletReq_InRestoreMode_DEFAULT bool

func (p *TCreateTabletReq) GetInRestoreMode() (v bool) {
	if !p.IsSetInRestoreMode() {
		return TCreateTabletReq_InRestoreMode_DEFAULT
	}
	return *p.InRestoreMode
}

var TCreateTabletReq_BaseTabletId_DEFAULT types.TTabletId

func (p *TCreateTabletReq) GetBaseTabletId() (v types.TTabletId) {
	if !p.IsSetBaseTabletId() {
		return TCreateTabletReq_BaseTabletId_DEFAULT
	}
	return *p.BaseTabletId
}

var TCreateTabletReq_BaseSchemaHash_DEFAULT types.TSchemaHash

func (p *TCreateTabletReq) GetBaseSchemaHash() (v types.TSchemaHash) {
	if !p.IsSetBaseSchemaHash() {
		return TCreateTabletReq_BaseSchemaHash_DEFAULT
	}
	return *p.BaseSchemaHash
}

var TCreateTabletReq_TableId_DEFAULT int64

func (p *TCreateTabletReq) GetTableId() (v int64) {
	if !p.IsSetTableId() {
		return TCreateTabletReq_TableId_DEFAULT
	}
	return *p.TableId
}

var TCreateTabletReq_PartitionId_DEFAULT int64

func (p *TCreateTabletReq) GetPartitionId() (v int64) {
	if !p.IsSetPartitionId() {
		return TCreateTabletReq_PartitionId_DEFAULT
	}
	return *p.PartitionId
}

var TCreateTabletReq_AllocationTerm_DEFAULT int64

func (p *TCreateTabletReq) GetAllocationTerm() (v int64) {
	if !p.IsSetAllocationTerm() {
		return TCreateTabletReq_AllocationTerm_DEFAULT
	}
	return *p.AllocationTerm
}

var TCreateTabletReq_IsEcoMode_DEFAULT bool

func (p *TCreateTabletReq) GetIsEcoMode() (v bool) {
	if !p.IsSetIsEcoMode() {
		return TCreateTabletReq_IsEcoMode_DEFAULT
	}
	return *p.IsEcoMode
}

var TCreateTabletReq_StorageFormat_DEFAULT TStorageFormat

func (p *TCreateTabletReq) GetStorageFormat() (v TStorageFormat) {
	if !p.IsSetStorageFormat() {
		return TCreateTabletReq_StorageFormat_DEFAULT
	}
	return *p.StorageFormat
}

var TCreateTabletReq_TabletType_DEFAULT TTabletType

func (p *TCreateTabletReq) GetTabletType() (v TTabletType) {
	if !p.IsSetTabletType() {
		return TCreateTabletReq_TabletType_DEFAULT
	}
	return *p.TabletType
}

var TCreateTabletReq_CompressionType_DEFAULT TCompressionType = TCompressionType_LZ4F

func (p *TCreateTabletReq) GetCompressionType() (v TCompressionType) {
	if !p.IsSetCompressionType() {
		return TCreateTabletReq_CompressionType_DEFAULT
	}
	return p.CompressionType
}

var TCreateTabletReq_ReplicaId_DEFAULT types.TReplicaId = 0

func (p *TCreateTabletReq) GetReplicaId() (v types.TReplicaId) {
	if !p.IsSetReplicaId() {
		return TCreateTabletReq_ReplicaId_DEFAULT
	}
	return p.ReplicaId
}

var TCreateTabletReq_EnableUniqueKeyMergeOnWrite_DEFAULT bool = false

func (p *TCreateTabletReq) GetEnableUniqueKeyMergeOnWrite() (v bool) {
	if !p.IsSetEnableUniqueKeyMergeOnWrite() {
		return TCreateTabletReq_EnableUniqueKeyMergeOnWrite_DEFAULT
	}
	return p.EnableUniqueKeyMergeOnWrite
}

var TCreateTabletReq_StoragePolicyId_DEFAULT int64

func (p *TCreateTabletReq) GetStoragePolicyId() (v int64) {
	if !p.IsSetStoragePolicyId() {
		return TCreateTabletReq_StoragePolicyId_DEFAULT
	}
	return *p.StoragePolicyId
}

var TCreateTabletReq_BinlogConfig_DEFAULT *TBinlogConfig

func (p *TCreateTabletReq) GetBinlogConfig() (v *TBinlogConfig) {
	if !p.IsSetBinlogConfig() {
		return TCreateTabletReq_BinlogConfig_DEFAULT
	}
	return p.BinlogConfig
}

var TCreateTabletReq_CompactionPolicy_DEFAULT string = "size_based"

func (p *TCreateTabletReq) GetCompactionPolicy() (v string) {
	if !p.IsSetCompactionPolicy() {
		return TCreateTabletReq_CompactionPolicy_DEFAULT
	}
	return p.CompactionPolicy
}

var TCreateTabletReq_TimeSeriesCompactionGoalSizeMbytes_DEFAULT int64 = 1024

func (p *TCreateTabletReq) GetTimeSeriesCompactionGoalSizeMbytes() (v int64) {
	if !p.IsSetTimeSeriesCompactionGoalSizeMbytes() {
		return TCreateTabletReq_TimeSeriesCompactionGoalSizeMbytes_DEFAULT
	}
	return p.TimeSeriesCompactionGoalSizeMbytes
}

var TCreateTabletReq_TimeSeriesCompactionFileCountThreshold_DEFAULT int64 = 2000

func (p *TCreateTabletReq) GetTimeSeriesCompactionFileCountThreshold() (v int64) {
	if !p.IsSetTimeSeriesCompactionFileCountThreshold() {
		return TCreateTabletReq_TimeSeriesCompactionFileCountThreshold_DEFAULT
	}
	return p.TimeSeriesCompactionFileCountThreshold
}

var TCreateTabletReq_TimeSeriesCompactionTimeThresholdSeconds_DEFAULT int64 = 3600

func (p *TCreateTabletReq) GetTimeSeriesCompactionTimeThresholdSeconds() (v int64) {
	if !p.IsSetTimeSeriesCompactionTimeThresholdSeconds() {
		return TCreateTabletReq_TimeSeriesCompactionTimeThresholdSeconds_DEFAULT
	}
	return p.TimeSeriesCompactionTimeThresholdSeconds
}

var TCreateTabletReq_TimeSeriesCompactionEmptyRowsetsThreshold_DEFAULT int64 = 5

func (p *TCreateTabletReq) GetTimeSeriesCompactionEmptyRowsetsThreshold() (v int64) {
	if !p.IsSetTimeSeriesCompactionEmptyRowsetsThreshold() {
		return TCreateTabletReq_TimeSeriesCompactionEmptyRowsetsThreshold_DEFAULT
	}
	return p.TimeSeriesCompactionEmptyRowsetsThreshold
}

var TCreateTabletReq_TimeSeriesCompactionLevelThreshold_DEFAULT int64 = 1

func (p *TCreateTabletReq) GetTimeSeriesCompactionLevelThreshold() (v int64) {
	if !p.IsSetTimeSeriesCompactionLevelThreshold() {
		return TCreateTabletReq_TimeSeriesCompactionLevelThreshold_DEFAULT
	}
	return p.TimeSeriesCompactionLevelThreshold
}

var TCreateTabletReq_InvertedIndexStorageFormat_DEFAULT TInvertedIndexStorageFormat = TInvertedIndexStorageFormat_DEFAULT

func (p *TCreateTabletReq) GetInvertedIndexStorageFormat() (v TInvertedIndexStorageFormat) {
	if !p.IsSetInvertedIndexStorageFormat() {
		return TCreateTabletReq_InvertedIndexStorageFormat_DEFAULT
	}
	return p.InvertedIndexStorageFormat
}

var TCreateTabletReq_InvertedIndexFileStorageFormat_DEFAULT types.TInvertedIndexFileStorageFormat = types.TInvertedIndexFileStorageFormat_V2

func (p *TCreateTabletReq) GetInvertedIndexFileStorageFormat() (v types.TInvertedIndexFileStorageFormat) {
	if !p.IsSetInvertedIndexFileStorageFormat() {
		return TCreateTabletReq_InvertedIndexFileStorageFormat_DEFAULT
	}
	return p.InvertedIndexFileStorageFormat
}

var TCreateTabletReq_IsInMemory_DEFAULT bool = false

func (p *TCreateTabletReq) GetIsInMemory() (v bool) {
	if !p.IsSetIsInMemory() {
		return TCreateTabletReq_IsInMemory_DEFAULT
	}
	return p.IsInMemory
}

var TCreateTabletReq_IsPersistent_DEFAULT bool = false

func (p *TCreateTabletReq) GetIsPersistent() (v bool) {
	if !p.IsSetIsPersistent() {
		return TCreateTabletReq_IsPersistent_DEFAULT
	}
	return p.IsPersistent
}
func (p *TCreateTabletReq) SetTabletId(val types.TTabletId) {
	p.TabletId = val
}
func (p *TCreateTabletReq) SetTabletSchema(val *TTabletSchema) {
	p.TabletSchema = val
}
func (p *TCreateTabletReq) SetVersion(val *types.TVersion) {
	p.Version = val
}
func (p *TCreateTabletReq) SetVersionHash(val *types.TVersionHash) {
	p.VersionHash = val
}
func (p *TCreateTabletReq) SetStorageMedium(val *types.TStorageMedium) {
	p.StorageMedium = val
}
func (p *TCreateTabletReq) SetInRestoreMode(val *bool) {
	p.InRestoreMode = val
}
func (p *TCreateTabletReq) SetBaseTabletId(val *types.TTabletId) {
	p.BaseTabletId = val
}
func (p *TCreateTabletReq) SetBaseSchemaHash(val *types.TSchemaHash) {
	p.BaseSchemaHash = val
}
func (p *TCreateTabletReq) SetTableId(val *int64) {
	p.TableId = val
}
func (p *TCreateTabletReq) SetPartitionId(val *int64) {
	p.PartitionId = val
}
func (p *TCreateTabletReq) SetAllocationTerm(val *int64) {
	p.AllocationTerm = val
}
func (p *TCreateTabletReq) SetIsEcoMode(val *bool) {
	p.IsEcoMode = val
}
func (p *TCreateTabletReq) SetStorageFormat(val *TStorageFormat) {
	p.StorageFormat = val
}
func (p *TCreateTabletReq) SetTabletType(val *TTabletType) {
	p.TabletType = val
}
func (p *TCreateTabletReq) SetCompressionType(val TCompressionType) {
	p.CompressionType = val
}
func (p *TCreateTabletReq) SetReplicaId(val types.TReplicaId) {
	p.ReplicaId = val
}
func (p *TCreateTabletReq) SetEnableUniqueKeyMergeOnWrite(val bool) {
	p.EnableUniqueKeyMergeOnWrite = val
}
func (p *TCreateTabletReq) SetStoragePolicyId(val *int64) {
	p.StoragePolicyId = val
}
func (p *TCreateTabletReq) SetBinlogConfig(val *TBinlogConfig) {
	p.BinlogConfig = val
}
func (p *TCreateTabletReq) SetCompactionPolicy(val string) {
	p.CompactionPolicy = val
}
func (p *TCreateTabletReq) SetTimeSeriesCompactionGoalSizeMbytes(val int64) {
	p.TimeSeriesCompactionGoalSizeMbytes = val
}
func (p *TCreateTabletReq) SetTimeSeriesCompactionFileCountThreshold(val int64) {
	p.TimeSeriesCompactionFileCountThreshold = val
}
func (p *TCreateTabletReq) SetTimeSeriesCompactionTimeThresholdSeconds(val int64) {
	p.TimeSeriesCompactionTimeThresholdSeconds = val
}
func (p *TCreateTabletReq) SetTimeSeriesCompactionEmptyRowsetsThreshold(val int64) {
	p.TimeSeriesCompactionEmptyRowsetsThreshold = val
}
func (p *TCreateTabletReq) SetTimeSeriesCompactionLevelThreshold(val int64) {
	p.TimeSeriesCompactionLevelThreshold = val
}
func (p *TCreateTabletReq) SetInvertedIndexStorageFormat(val TInvertedIndexStorageFormat) {
	p.InvertedIndexStorageFormat = val
}
func (p *TCreateTabletReq) SetInvertedIndexFileStorageFormat(val types.TInvertedIndexFileStorageFormat) {
	p.InvertedIndexFileStorageFormat = val
}
func (p *TCreateTabletReq) SetIsInMemory(val bool) {
	p.IsInMemory = val
}
func (p *TCreateTabletReq) SetIsPersistent(val bool) {
	p.IsPersistent = val
}

var fieldIDToName_TCreateTabletReq = map[int16]string{
	1:    "tablet_id",
	2:    "tablet_schema",
	3:    "version",
	4:    "version_hash",
	5:    "storage_medium",
	6:    "in_restore_mode",
	7:    "base_tablet_id",
	8:    "base_schema_hash",
	9:    "table_id",
	10:   "partition_id",
	11:   "allocation_term",
	12:   "is_eco_mode",
	13:   "storage_format",
	14:   "tablet_type",
	16:   "compression_type",
	17:   "replica_id",
	19:   "enable_unique_key_merge_on_write",
	20:   "storage_policy_id",
	21:   "binlog_config",
	22:   "compaction_policy",
	23:   "time_series_compaction_goal_size_mbytes",
	24:   "time_series_compaction_file_count_threshold",
	25:   "time_series_compaction_time_threshold_seconds",
	26:   "time_series_compaction_empty_rowsets_threshold",
	27:   "time_series_compaction_level_threshold",
	28:   "inverted_index_storage_format",
	29:   "inverted_index_file_storage_format",
	1000: "is_in_memory",
	1001: "is_persistent",
}

func (p *TCreateTabletReq) IsSetTabletSchema() bool {
	return p.TabletSchema != nil
}

func (p *TCreateTabletReq) IsSetVersion() bool {
	return p.Version != nil
}

func (p *TCreateTabletReq) IsSetVersionHash() bool {
	return p.VersionHash != nil
}

func (p *TCreateTabletReq) IsSetStorageMedium() bool {
	return p.StorageMedium != nil
}

func (p *TCreateTabletReq) IsSetInRestoreMode() bool {
	return p.InRestoreMode != nil
}

func (p *TCreateTabletReq) IsSetBaseTabletId() bool {
	return p.BaseTabletId != nil
}

func (p *TCreateTabletReq) IsSetBaseSchemaHash() bool {
	return p.BaseSchemaHash != nil
}

func (p *TCreateTabletReq) IsSetTableId() bool {
	return p.TableId != nil
}

func (p *TCreateTabletReq) IsSetPartitionId() bool {
	return p.PartitionId != nil
}

func (p *TCreateTabletReq) IsSetAllocationTerm() bool {
	return p.AllocationTerm != nil
}

func (p *TCreateTabletReq) IsSetIsEcoMode() bool {
	return p.IsEcoMode != nil
}

func (p *TCreateTabletReq) IsSetStorageFormat() bool {
	return p.StorageFormat != nil
}

func (p *TCreateTabletReq) IsSetTabletType() bool {
	return p.TabletType != nil
}

func (p *TCreateTabletReq) IsSetCompressionType() bool {
	return p.CompressionType != TCreateTabletReq_CompressionType_DEFAULT
}

func (p *TCreateTabletReq) IsSetReplicaId() bool {
	return p.ReplicaId != TCreateTabletReq_ReplicaId_DEFAULT
}

func (p *TCreateTabletReq) IsSetEnableUniqueKeyMergeOnWrite() bool {
	return p.EnableUniqueKeyMergeOnWrite != TCreateTabletReq_EnableUniqueKeyMergeOnWrite_DEFAULT
}

func (p *TCreateTabletReq) IsSetStoragePolicyId() bool {
	return p.StoragePolicyId != nil
}

func (p *TCreateTabletReq) IsSetBinlogConfig() bool {
	return p.BinlogConfig != nil
}

func (p *TCreateTabletReq) IsSetCompactionPolicy() bool {
	return p.CompactionPolicy != TCreateTabletReq_CompactionPolicy_DEFAULT
}

func (p *TCreateTabletReq) IsSetTimeSeriesCompactionGoalSizeMbytes() bool {
	return p.TimeSeriesCompactionGoalSizeMbytes != TCreateTabletReq_TimeSeriesCompactionGoalSizeMbytes_DEFAULT
}

func (p *TCreateTabletReq) IsSetTimeSeriesCompactionFileCountThreshold() bool {
	return p.TimeSeriesCompactionFileCountThreshold != TCreateTabletReq_TimeSeriesCompactionFileCountThreshold_DEFAULT
}

func (p *TCreateTabletReq) IsSetTimeSeriesCompactionTimeThresholdSeconds() bool {
	return p.TimeSeriesCompactionTimeThresholdSeconds != TCreateTabletReq_TimeSeriesCompactionTimeThresholdSeconds_DEFAULT
}

func (p *TCreateTabletReq) IsSetTimeSeriesCompactionEmptyRowsetsThreshold() bool {
	return p.TimeSeriesCompactionEmptyRowsetsThreshold != TCreateTabletReq_TimeSeriesCompactionEmptyRowsetsThreshold_DEFAULT
}

func (p *TCreateTabletReq) IsSetTimeSeriesCompactionLevelThreshold() bool {
	return p.TimeSeriesCompactionLevelThreshold != TCreateTabletReq_TimeSeriesCompactionLevelThreshold_DEFAULT
}

func (p *TCreateTabletReq) IsSetInvertedIndexStorageFormat() bool {
	return p.InvertedIndexStorageFormat != TCreateTabletReq_InvertedIndexStorageFormat_DEFAULT
}

func (p *TCreateTabletReq) IsSetInvertedIndexFileStorageFormat() bool {
	return p.InvertedIndexFileStorageFormat != TCreateTabletReq_InvertedIndexFileStorageFormat_DEFAULT
}

func (p *TCreateTabletReq) IsSetIsInMemory() bool {
	return p.IsInMemory != TCreateTabletReq_IsInMemory_DEFAULT
}

func (p *TCreateTabletReq) IsSetIsPersistent() bool {
	return p.IsPersistent != TCreateTabletReq_IsPersistent_DEFAULT
}

func (p *TCreateTabletReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetTabletSchema bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletSchema = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 29:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1000:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1000(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1001:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1001(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTabletSchema {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCreateTabletReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCreateTabletReq[fieldId]))
}

func (p *TCreateTabletReq) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TabletId = _field
	return nil
}
func (p *TCreateTabletReq) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTTabletSchema()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TabletSchema = _field
	return nil
}
func (p *TCreateTabletReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *types.TVersion
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *TCreateTabletReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *types.TVersionHash
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionHash = _field
	return nil
}
func (p *TCreateTabletReq) ReadField5(iprot thrift.TProtocol) error {

	var _field *types.TStorageMedium
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TStorageMedium(v)
		_field = &tmp
	}
	p.StorageMedium = _field
	return nil
}
func (p *TCreateTabletReq) ReadField6(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InRestoreMode = _field
	return nil
}
func (p *TCreateTabletReq) ReadField7(iprot thrift.TProtocol) error {

	var _field *types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BaseTabletId = _field
	return nil
}
func (p *TCreateTabletReq) ReadField8(iprot thrift.TProtocol) error {

	var _field *types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BaseSchemaHash = _field
	return nil
}
func (p *TCreateTabletReq) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableId = _field
	return nil
}
func (p *TCreateTabletReq) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PartitionId = _field
	return nil
}
func (p *TCreateTabletReq) ReadField11(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AllocationTerm = _field
	return nil
}
func (p *TCreateTabletReq) ReadField12(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsEcoMode = _field
	return nil
}
func (p *TCreateTabletReq) ReadField13(iprot thrift.TProtocol) error {

	var _field *TStorageFormat
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TStorageFormat(v)
		_field = &tmp
	}
	p.StorageFormat = _field
	return nil
}
func (p *TCreateTabletReq) ReadField14(iprot thrift.TProtocol) error {

	var _field *TTabletType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TTabletType(v)
		_field = &tmp
	}
	p.TabletType = _field
	return nil
}
func (p *TCreateTabletReq) ReadField16(iprot thrift.TProtocol) error {

	var _field TCompressionType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TCompressionType(v)
	}
	p.CompressionType = _field
	return nil
}
func (p *TCreateTabletReq) ReadField17(iprot thrift.TProtocol) error {

	var _field types.TReplicaId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ReplicaId = _field
	return nil
}
func (p *TCreateTabletReq) ReadField19(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableUniqueKeyMergeOnWrite = _field
	return nil
}
func (p *TCreateTabletReq) ReadField20(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StoragePolicyId = _field
	return nil
}
func (p *TCreateTabletReq) ReadField21(iprot thrift.TProtocol) error {
	_field := NewTBinlogConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BinlogConfig = _field
	return nil
}
func (p *TCreateTabletReq) ReadField22(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompactionPolicy = _field
	return nil
}
func (p *TCreateTabletReq) ReadField23(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TimeSeriesCompactionGoalSizeMbytes = _field
	return nil
}
func (p *TCreateTabletReq) ReadField24(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TimeSeriesCompactionFileCountThreshold = _field
	return nil
}
func (p *TCreateTabletReq) ReadField25(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TimeSeriesCompactionTimeThresholdSeconds = _field
	return nil
}
func (p *TCreateTabletReq) ReadField26(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TimeSeriesCompactionEmptyRowsetsThreshold = _field
	return nil
}
func (p *TCreateTabletReq) ReadField27(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TimeSeriesCompactionLevelThreshold = _field
	return nil
}
func (p *TCreateTabletReq) ReadField28(iprot thrift.TProtocol) error {

	var _field TInvertedIndexStorageFormat
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TInvertedIndexStorageFormat(v)
	}
	p.InvertedIndexStorageFormat = _field
	return nil
}
func (p *TCreateTabletReq) ReadField29(iprot thrift.TProtocol) error {

	var _field types.TInvertedIndexFileStorageFormat
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TInvertedIndexFileStorageFormat(v)
	}
	p.InvertedIndexFileStorageFormat = _field
	return nil
}
func (p *TCreateTabletReq) ReadField1000(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsInMemory = _field
	return nil
}
func (p *TCreateTabletReq) ReadField1001(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsPersistent = _field
	return nil
}

func (p *TCreateTabletReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCreateTabletReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
		if err = p.writeField1000(oprot); err != nil {
			fieldId = 1000
			goto WriteFieldError
		}
		if err = p.writeField1001(oprot); err != nil {
			fieldId = 1001
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCreateTabletReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_schema", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.TabletSchema.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionHash() {
		if err = oprot.WriteFieldBegin("version_hash", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VersionHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageMedium() {
		if err = oprot.WriteFieldBegin("storage_medium", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.StorageMedium)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetInRestoreMode() {
		if err = oprot.WriteFieldBegin("in_restore_mode", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.InRestoreMode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseTabletId() {
		if err = oprot.WriteFieldBegin("base_tablet_id", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BaseTabletId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseSchemaHash() {
		if err = oprot.WriteFieldBegin("base_schema_hash", thrift.I32, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BaseSchemaHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err = oprot.WriteFieldBegin("table_id", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionId() {
		if err = oprot.WriteFieldBegin("partition_id", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PartitionId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllocationTerm() {
		if err = oprot.WriteFieldBegin("allocation_term", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AllocationTerm); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsEcoMode() {
		if err = oprot.WriteFieldBegin("is_eco_mode", thrift.BOOL, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsEcoMode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageFormat() {
		if err = oprot.WriteFieldBegin("storage_format", thrift.I32, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.StorageFormat)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletType() {
		if err = oprot.WriteFieldBegin("tablet_type", thrift.I32, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.TabletType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompressionType() {
		if err = oprot.WriteFieldBegin("compression_type", thrift.I32, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(p.CompressionType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicaId() {
		if err = oprot.WriteFieldBegin("replica_id", thrift.I64, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ReplicaId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableUniqueKeyMergeOnWrite() {
		if err = oprot.WriteFieldBegin("enable_unique_key_merge_on_write", thrift.BOOL, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableUniqueKeyMergeOnWrite); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoragePolicyId() {
		if err = oprot.WriteFieldBegin("storage_policy_id", thrift.I64, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.StoragePolicyId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetBinlogConfig() {
		if err = oprot.WriteFieldBegin("binlog_config", thrift.STRUCT, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BinlogConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompactionPolicy() {
		if err = oprot.WriteFieldBegin("compaction_policy", thrift.STRING, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CompactionPolicy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeSeriesCompactionGoalSizeMbytes() {
		if err = oprot.WriteFieldBegin("time_series_compaction_goal_size_mbytes", thrift.I64, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.TimeSeriesCompactionGoalSizeMbytes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeSeriesCompactionFileCountThreshold() {
		if err = oprot.WriteFieldBegin("time_series_compaction_file_count_threshold", thrift.I64, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.TimeSeriesCompactionFileCountThreshold); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeSeriesCompactionTimeThresholdSeconds() {
		if err = oprot.WriteFieldBegin("time_series_compaction_time_threshold_seconds", thrift.I64, 25); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.TimeSeriesCompactionTimeThresholdSeconds); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeSeriesCompactionEmptyRowsetsThreshold() {
		if err = oprot.WriteFieldBegin("time_series_compaction_empty_rowsets_threshold", thrift.I64, 26); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.TimeSeriesCompactionEmptyRowsetsThreshold); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeSeriesCompactionLevelThreshold() {
		if err = oprot.WriteFieldBegin("time_series_compaction_level_threshold", thrift.I64, 27); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.TimeSeriesCompactionLevelThreshold); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvertedIndexStorageFormat() {
		if err = oprot.WriteFieldBegin("inverted_index_storage_format", thrift.I32, 28); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(p.InvertedIndexStorageFormat)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvertedIndexFileStorageFormat() {
		if err = oprot.WriteFieldBegin("inverted_index_file_storage_format", thrift.I32, 29); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(p.InvertedIndexFileStorageFormat)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField1000(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsInMemory() {
		if err = oprot.WriteFieldBegin("is_in_memory", thrift.BOOL, 1000); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsInMemory); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 end error: ", p), err)
}

func (p *TCreateTabletReq) writeField1001(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsPersistent() {
		if err = oprot.WriteFieldBegin("is_persistent", thrift.BOOL, 1001); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsPersistent); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1001 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1001 end error: ", p), err)
}

func (p *TCreateTabletReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCreateTabletReq(%+v)", *p)

}

func (p *TCreateTabletReq) DeepEqual(ano *TCreateTabletReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TabletSchema) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.VersionHash) {
		return false
	}
	if !p.Field5DeepEqual(ano.StorageMedium) {
		return false
	}
	if !p.Field6DeepEqual(ano.InRestoreMode) {
		return false
	}
	if !p.Field7DeepEqual(ano.BaseTabletId) {
		return false
	}
	if !p.Field8DeepEqual(ano.BaseSchemaHash) {
		return false
	}
	if !p.Field9DeepEqual(ano.TableId) {
		return false
	}
	if !p.Field10DeepEqual(ano.PartitionId) {
		return false
	}
	if !p.Field11DeepEqual(ano.AllocationTerm) {
		return false
	}
	if !p.Field12DeepEqual(ano.IsEcoMode) {
		return false
	}
	if !p.Field13DeepEqual(ano.StorageFormat) {
		return false
	}
	if !p.Field14DeepEqual(ano.TabletType) {
		return false
	}
	if !p.Field16DeepEqual(ano.CompressionType) {
		return false
	}
	if !p.Field17DeepEqual(ano.ReplicaId) {
		return false
	}
	if !p.Field19DeepEqual(ano.EnableUniqueKeyMergeOnWrite) {
		return false
	}
	if !p.Field20DeepEqual(ano.StoragePolicyId) {
		return false
	}
	if !p.Field21DeepEqual(ano.BinlogConfig) {
		return false
	}
	if !p.Field22DeepEqual(ano.CompactionPolicy) {
		return false
	}
	if !p.Field23DeepEqual(ano.TimeSeriesCompactionGoalSizeMbytes) {
		return false
	}
	if !p.Field24DeepEqual(ano.TimeSeriesCompactionFileCountThreshold) {
		return false
	}
	if !p.Field25DeepEqual(ano.TimeSeriesCompactionTimeThresholdSeconds) {
		return false
	}
	if !p.Field26DeepEqual(ano.TimeSeriesCompactionEmptyRowsetsThreshold) {
		return false
	}
	if !p.Field27DeepEqual(ano.TimeSeriesCompactionLevelThreshold) {
		return false
	}
	if !p.Field28DeepEqual(ano.InvertedIndexStorageFormat) {
		return false
	}
	if !p.Field29DeepEqual(ano.InvertedIndexFileStorageFormat) {
		return false
	}
	if !p.Field1000DeepEqual(ano.IsInMemory) {
		return false
	}
	if !p.Field1001DeepEqual(ano.IsPersistent) {
		return false
	}
	return true
}

func (p *TCreateTabletReq) Field1DeepEqual(src types.TTabletId) bool {

	if p.TabletId != src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field2DeepEqual(src *TTabletSchema) bool {

	if !p.TabletSchema.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field3DeepEqual(src *types.TVersion) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if *p.Version != *src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field4DeepEqual(src *types.TVersionHash) bool {

	if p.VersionHash == src {
		return true
	} else if p.VersionHash == nil || src == nil {
		return false
	}
	if *p.VersionHash != *src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field5DeepEqual(src *types.TStorageMedium) bool {

	if p.StorageMedium == src {
		return true
	} else if p.StorageMedium == nil || src == nil {
		return false
	}
	if *p.StorageMedium != *src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field6DeepEqual(src *bool) bool {

	if p.InRestoreMode == src {
		return true
	} else if p.InRestoreMode == nil || src == nil {
		return false
	}
	if *p.InRestoreMode != *src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field7DeepEqual(src *types.TTabletId) bool {

	if p.BaseTabletId == src {
		return true
	} else if p.BaseTabletId == nil || src == nil {
		return false
	}
	if *p.BaseTabletId != *src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field8DeepEqual(src *types.TSchemaHash) bool {

	if p.BaseSchemaHash == src {
		return true
	} else if p.BaseSchemaHash == nil || src == nil {
		return false
	}
	if *p.BaseSchemaHash != *src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field9DeepEqual(src *int64) bool {

	if p.TableId == src {
		return true
	} else if p.TableId == nil || src == nil {
		return false
	}
	if *p.TableId != *src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field10DeepEqual(src *int64) bool {

	if p.PartitionId == src {
		return true
	} else if p.PartitionId == nil || src == nil {
		return false
	}
	if *p.PartitionId != *src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field11DeepEqual(src *int64) bool {

	if p.AllocationTerm == src {
		return true
	} else if p.AllocationTerm == nil || src == nil {
		return false
	}
	if *p.AllocationTerm != *src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field12DeepEqual(src *bool) bool {

	if p.IsEcoMode == src {
		return true
	} else if p.IsEcoMode == nil || src == nil {
		return false
	}
	if *p.IsEcoMode != *src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field13DeepEqual(src *TStorageFormat) bool {

	if p.StorageFormat == src {
		return true
	} else if p.StorageFormat == nil || src == nil {
		return false
	}
	if *p.StorageFormat != *src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field14DeepEqual(src *TTabletType) bool {

	if p.TabletType == src {
		return true
	} else if p.TabletType == nil || src == nil {
		return false
	}
	if *p.TabletType != *src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field16DeepEqual(src TCompressionType) bool {

	if p.CompressionType != src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field17DeepEqual(src types.TReplicaId) bool {

	if p.ReplicaId != src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field19DeepEqual(src bool) bool {

	if p.EnableUniqueKeyMergeOnWrite != src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field20DeepEqual(src *int64) bool {

	if p.StoragePolicyId == src {
		return true
	} else if p.StoragePolicyId == nil || src == nil {
		return false
	}
	if *p.StoragePolicyId != *src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field21DeepEqual(src *TBinlogConfig) bool {

	if !p.BinlogConfig.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field22DeepEqual(src string) bool {

	if strings.Compare(p.CompactionPolicy, src) != 0 {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field23DeepEqual(src int64) bool {

	if p.TimeSeriesCompactionGoalSizeMbytes != src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field24DeepEqual(src int64) bool {

	if p.TimeSeriesCompactionFileCountThreshold != src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field25DeepEqual(src int64) bool {

	if p.TimeSeriesCompactionTimeThresholdSeconds != src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field26DeepEqual(src int64) bool {

	if p.TimeSeriesCompactionEmptyRowsetsThreshold != src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field27DeepEqual(src int64) bool {

	if p.TimeSeriesCompactionLevelThreshold != src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field28DeepEqual(src TInvertedIndexStorageFormat) bool {

	if p.InvertedIndexStorageFormat != src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field29DeepEqual(src types.TInvertedIndexFileStorageFormat) bool {

	if p.InvertedIndexFileStorageFormat != src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field1000DeepEqual(src bool) bool {

	if p.IsInMemory != src {
		return false
	}
	return true
}
func (p *TCreateTabletReq) Field1001DeepEqual(src bool) bool {

	if p.IsPersistent != src {
		return false
	}
	return true
}

type TDropTabletReq struct {
	TabletId               types.TTabletId    `thrift:"tablet_id,1,required" frugal:"1,required,i64" json:"tablet_id"`
	SchemaHash             *types.TSchemaHash `thrift:"schema_hash,2,optional" frugal:"2,optional,i32" json:"schema_hash,omitempty"`
	ReplicaId              types.TReplicaId   `thrift:"replica_id,3,optional" frugal:"3,optional,i64" json:"replica_id,omitempty"`
	IsDropTableOrPartition bool               `thrift:"is_drop_table_or_partition,4,optional" frugal:"4,optional,bool" json:"is_drop_table_or_partition,omitempty"`
}

func NewTDropTabletReq() *TDropTabletReq {
	return &TDropTabletReq{

		ReplicaId:              0,
		IsDropTableOrPartition: false,
	}
}

func (p *TDropTabletReq) InitDefault() {
	p.ReplicaId = 0
	p.IsDropTableOrPartition = false
}

func (p *TDropTabletReq) GetTabletId() (v types.TTabletId) {
	return p.TabletId
}

var TDropTabletReq_SchemaHash_DEFAULT types.TSchemaHash

func (p *TDropTabletReq) GetSchemaHash() (v types.TSchemaHash) {
	if !p.IsSetSchemaHash() {
		return TDropTabletReq_SchemaHash_DEFAULT
	}
	return *p.SchemaHash
}

var TDropTabletReq_ReplicaId_DEFAULT types.TReplicaId = 0

func (p *TDropTabletReq) GetReplicaId() (v types.TReplicaId) {
	if !p.IsSetReplicaId() {
		return TDropTabletReq_ReplicaId_DEFAULT
	}
	return p.ReplicaId
}

var TDropTabletReq_IsDropTableOrPartition_DEFAULT bool = false

func (p *TDropTabletReq) GetIsDropTableOrPartition() (v bool) {
	if !p.IsSetIsDropTableOrPartition() {
		return TDropTabletReq_IsDropTableOrPartition_DEFAULT
	}
	return p.IsDropTableOrPartition
}
func (p *TDropTabletReq) SetTabletId(val types.TTabletId) {
	p.TabletId = val
}
func (p *TDropTabletReq) SetSchemaHash(val *types.TSchemaHash) {
	p.SchemaHash = val
}
func (p *TDropTabletReq) SetReplicaId(val types.TReplicaId) {
	p.ReplicaId = val
}
func (p *TDropTabletReq) SetIsDropTableOrPartition(val bool) {
	p.IsDropTableOrPartition = val
}

var fieldIDToName_TDropTabletReq = map[int16]string{
	1: "tablet_id",
	2: "schema_hash",
	3: "replica_id",
	4: "is_drop_table_or_partition",
}

func (p *TDropTabletReq) IsSetSchemaHash() bool {
	return p.SchemaHash != nil
}

func (p *TDropTabletReq) IsSetReplicaId() bool {
	return p.ReplicaId != TDropTabletReq_ReplicaId_DEFAULT
}

func (p *TDropTabletReq) IsSetIsDropTableOrPartition() bool {
	return p.IsDropTableOrPartition != TDropTabletReq_IsDropTableOrPartition_DEFAULT
}

func (p *TDropTabletReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDropTabletReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TDropTabletReq[fieldId]))
}

func (p *TDropTabletReq) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TabletId = _field
	return nil
}
func (p *TDropTabletReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SchemaHash = _field
	return nil
}
func (p *TDropTabletReq) ReadField3(iprot thrift.TProtocol) error {

	var _field types.TReplicaId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ReplicaId = _field
	return nil
}
func (p *TDropTabletReq) ReadField4(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsDropTableOrPartition = _field
	return nil
}

func (p *TDropTabletReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDropTabletReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDropTabletReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDropTabletReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaHash() {
		if err = oprot.WriteFieldBegin("schema_hash", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SchemaHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TDropTabletReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicaId() {
		if err = oprot.WriteFieldBegin("replica_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ReplicaId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TDropTabletReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsDropTableOrPartition() {
		if err = oprot.WriteFieldBegin("is_drop_table_or_partition", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsDropTableOrPartition); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TDropTabletReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDropTabletReq(%+v)", *p)

}

func (p *TDropTabletReq) DeepEqual(ano *TDropTabletReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SchemaHash) {
		return false
	}
	if !p.Field3DeepEqual(ano.ReplicaId) {
		return false
	}
	if !p.Field4DeepEqual(ano.IsDropTableOrPartition) {
		return false
	}
	return true
}

func (p *TDropTabletReq) Field1DeepEqual(src types.TTabletId) bool {

	if p.TabletId != src {
		return false
	}
	return true
}
func (p *TDropTabletReq) Field2DeepEqual(src *types.TSchemaHash) bool {

	if p.SchemaHash == src {
		return true
	} else if p.SchemaHash == nil || src == nil {
		return false
	}
	if *p.SchemaHash != *src {
		return false
	}
	return true
}
func (p *TDropTabletReq) Field3DeepEqual(src types.TReplicaId) bool {

	if p.ReplicaId != src {
		return false
	}
	return true
}
func (p *TDropTabletReq) Field4DeepEqual(src bool) bool {

	if p.IsDropTableOrPartition != src {
		return false
	}
	return true
}

type TAlterTabletReq struct {
	BaseTabletId   types.TTabletId   `thrift:"base_tablet_id,1,required" frugal:"1,required,i64" json:"base_tablet_id"`
	BaseSchemaHash types.TSchemaHash `thrift:"base_schema_hash,2,required" frugal:"2,required,i32" json:"base_schema_hash"`
	NewTabletReq_  *TCreateTabletReq `thrift:"new_tablet_req,3,required" frugal:"3,required,TCreateTabletReq" json:"new_tablet_req"`
}

func NewTAlterTabletReq() *TAlterTabletReq {
	return &TAlterTabletReq{}
}

func (p *TAlterTabletReq) InitDefault() {
}

func (p *TAlterTabletReq) GetBaseTabletId() (v types.TTabletId) {
	return p.BaseTabletId
}

func (p *TAlterTabletReq) GetBaseSchemaHash() (v types.TSchemaHash) {
	return p.BaseSchemaHash
}

var TAlterTabletReq_NewTabletReq__DEFAULT *TCreateTabletReq

func (p *TAlterTabletReq) GetNewTabletReq_() (v *TCreateTabletReq) {
	if !p.IsSetNewTabletReq_() {
		return TAlterTabletReq_NewTabletReq__DEFAULT
	}
	return p.NewTabletReq_
}
func (p *TAlterTabletReq) SetBaseTabletId(val types.TTabletId) {
	p.BaseTabletId = val
}
func (p *TAlterTabletReq) SetBaseSchemaHash(val types.TSchemaHash) {
	p.BaseSchemaHash = val
}
func (p *TAlterTabletReq) SetNewTabletReq_(val *TCreateTabletReq) {
	p.NewTabletReq_ = val
}

var fieldIDToName_TAlterTabletReq = map[int16]string{
	1: "base_tablet_id",
	2: "base_schema_hash",
	3: "new_tablet_req",
}

func (p *TAlterTabletReq) IsSetNewTabletReq_() bool {
	return p.NewTabletReq_ != nil
}

func (p *TAlterTabletReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBaseTabletId bool = false
	var issetBaseSchemaHash bool = false
	var issetNewTabletReq_ bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBaseTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetBaseSchemaHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetNewTabletReq_ = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBaseTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetBaseSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetNewTabletReq_ {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAlterTabletReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAlterTabletReq[fieldId]))
}

func (p *TAlterTabletReq) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BaseTabletId = _field
	return nil
}
func (p *TAlterTabletReq) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BaseSchemaHash = _field
	return nil
}
func (p *TAlterTabletReq) ReadField3(iprot thrift.TProtocol) error {
	_field := NewTCreateTabletReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.NewTabletReq_ = _field
	return nil
}

func (p *TAlterTabletReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAlterTabletReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAlterTabletReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_tablet_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.BaseTabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAlterTabletReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_schema_hash", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.BaseSchemaHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAlterTabletReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("new_tablet_req", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.NewTabletReq_.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TAlterTabletReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterTabletReq(%+v)", *p)

}

func (p *TAlterTabletReq) DeepEqual(ano *TAlterTabletReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseTabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.BaseSchemaHash) {
		return false
	}
	if !p.Field3DeepEqual(ano.NewTabletReq_) {
		return false
	}
	return true
}

func (p *TAlterTabletReq) Field1DeepEqual(src types.TTabletId) bool {

	if p.BaseTabletId != src {
		return false
	}
	return true
}
func (p *TAlterTabletReq) Field2DeepEqual(src types.TSchemaHash) bool {

	if p.BaseSchemaHash != src {
		return false
	}
	return true
}
func (p *TAlterTabletReq) Field3DeepEqual(src *TCreateTabletReq) bool {

	if !p.NewTabletReq_.DeepEqual(src) {
		return false
	}
	return true
}

type TAlterMaterializedViewParam struct {
	ColumnName       string       `thrift:"column_name,1,required" frugal:"1,required,string" json:"column_name"`
	OriginColumnName *string      `thrift:"origin_column_name,2,optional" frugal:"2,optional,string" json:"origin_column_name,omitempty"`
	MvExpr           *exprs.TExpr `thrift:"mv_expr,3,optional" frugal:"3,optional,exprs.TExpr" json:"mv_expr,omitempty"`
}

func NewTAlterMaterializedViewParam() *TAlterMaterializedViewParam {
	return &TAlterMaterializedViewParam{}
}

func (p *TAlterMaterializedViewParam) InitDefault() {
}

func (p *TAlterMaterializedViewParam) GetColumnName() (v string) {
	return p.ColumnName
}

var TAlterMaterializedViewParam_OriginColumnName_DEFAULT string

func (p *TAlterMaterializedViewParam) GetOriginColumnName() (v string) {
	if !p.IsSetOriginColumnName() {
		return TAlterMaterializedViewParam_OriginColumnName_DEFAULT
	}
	return *p.OriginColumnName
}

var TAlterMaterializedViewParam_MvExpr_DEFAULT *exprs.TExpr

func (p *TAlterMaterializedViewParam) GetMvExpr() (v *exprs.TExpr) {
	if !p.IsSetMvExpr() {
		return TAlterMaterializedViewParam_MvExpr_DEFAULT
	}
	return p.MvExpr
}
func (p *TAlterMaterializedViewParam) SetColumnName(val string) {
	p.ColumnName = val
}
func (p *TAlterMaterializedViewParam) SetOriginColumnName(val *string) {
	p.OriginColumnName = val
}
func (p *TAlterMaterializedViewParam) SetMvExpr(val *exprs.TExpr) {
	p.MvExpr = val
}

var fieldIDToName_TAlterMaterializedViewParam = map[int16]string{
	1: "column_name",
	2: "origin_column_name",
	3: "mv_expr",
}

func (p *TAlterMaterializedViewParam) IsSetOriginColumnName() bool {
	return p.OriginColumnName != nil
}

func (p *TAlterMaterializedViewParam) IsSetMvExpr() bool {
	return p.MvExpr != nil
}

func (p *TAlterMaterializedViewParam) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetColumnName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumnName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetColumnName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAlterMaterializedViewParam[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAlterMaterializedViewParam[fieldId]))
}

func (p *TAlterMaterializedViewParam) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ColumnName = _field
	return nil
}
func (p *TAlterMaterializedViewParam) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OriginColumnName = _field
	return nil
}
func (p *TAlterMaterializedViewParam) ReadField3(iprot thrift.TProtocol) error {
	_field := exprs.NewTExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MvExpr = _field
	return nil
}

func (p *TAlterMaterializedViewParam) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAlterMaterializedViewParam"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAlterMaterializedViewParam) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("column_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ColumnName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAlterMaterializedViewParam) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginColumnName() {
		if err = oprot.WriteFieldBegin("origin_column_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OriginColumnName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAlterMaterializedViewParam) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMvExpr() {
		if err = oprot.WriteFieldBegin("mv_expr", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MvExpr.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TAlterMaterializedViewParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterMaterializedViewParam(%+v)", *p)

}

func (p *TAlterMaterializedViewParam) DeepEqual(ano *TAlterMaterializedViewParam) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnName) {
		return false
	}
	if !p.Field2DeepEqual(ano.OriginColumnName) {
		return false
	}
	if !p.Field3DeepEqual(ano.MvExpr) {
		return false
	}
	return true
}

func (p *TAlterMaterializedViewParam) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ColumnName, src) != 0 {
		return false
	}
	return true
}
func (p *TAlterMaterializedViewParam) Field2DeepEqual(src *string) bool {

	if p.OriginColumnName == src {
		return true
	} else if p.OriginColumnName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.OriginColumnName, *src) != 0 {
		return false
	}
	return true
}
func (p *TAlterMaterializedViewParam) Field3DeepEqual(src *exprs.TExpr) bool {

	if !p.MvExpr.DeepEqual(src) {
		return false
	}
	return true
}

type TAlterTabletReqV2 struct {
	BaseTabletId           types.TTabletId                `thrift:"base_tablet_id,1,required" frugal:"1,required,i64" json:"base_tablet_id"`
	NewTabletId_           types.TTabletId                `thrift:"new_tablet_id,2,required" frugal:"2,required,i64" json:"new_tablet_id"`
	BaseSchemaHash         types.TSchemaHash              `thrift:"base_schema_hash,3,required" frugal:"3,required,i32" json:"base_schema_hash"`
	NewSchemaHash_         types.TSchemaHash              `thrift:"new_schema_hash,4,required" frugal:"4,required,i32" json:"new_schema_hash"`
	AlterVersion           *types.TVersion                `thrift:"alter_version,5,optional" frugal:"5,optional,i64" json:"alter_version,omitempty"`
	AlterVersionHash       *types.TVersionHash            `thrift:"alter_version_hash,6,optional" frugal:"6,optional,i64" json:"alter_version_hash,omitempty"`
	MaterializedViewParams []*TAlterMaterializedViewParam `thrift:"materialized_view_params,7,optional" frugal:"7,optional,list<TAlterMaterializedViewParam>" json:"materialized_view_params,omitempty"`
	AlterTabletType        TAlterTabletType               `thrift:"alter_tablet_type,8,optional" frugal:"8,optional,TAlterTabletType" json:"alter_tablet_type,omitempty"`
	DescTbl                *descriptors.TDescriptorTable  `thrift:"desc_tbl,9,optional" frugal:"9,optional,descriptors.TDescriptorTable" json:"desc_tbl,omitempty"`
	Columns                []*descriptors.TColumn         `thrift:"columns,10,optional" frugal:"10,optional,list<descriptors.TColumn>" json:"columns,omitempty"`
	BeExecVersion          int32                          `thrift:"be_exec_version,11,optional" frugal:"11,optional,i32" json:"be_exec_version,omitempty"`
	JobId                  *int64                         `thrift:"job_id,1000,optional" frugal:"1000,optional,i64" json:"job_id,omitempty"`
	Expiration             *int64                         `thrift:"expiration,1001,optional" frugal:"1001,optional,i64" json:"expiration,omitempty"`
	StorageVaultId         *string                        `thrift:"storage_vault_id,1002,optional" frugal:"1002,optional,string" json:"storage_vault_id,omitempty"`
}

func NewTAlterTabletReqV2() *TAlterTabletReqV2 {
	return &TAlterTabletReqV2{

		AlterTabletType: TAlterTabletType_SCHEMA_CHANGE,
		BeExecVersion:   0,
	}
}

func (p *TAlterTabletReqV2) InitDefault() {
	p.AlterTabletType = TAlterTabletType_SCHEMA_CHANGE
	p.BeExecVersion = 0
}

func (p *TAlterTabletReqV2) GetBaseTabletId() (v types.TTabletId) {
	return p.BaseTabletId
}

func (p *TAlterTabletReqV2) GetNewTabletId_() (v types.TTabletId) {
	return p.NewTabletId_
}

func (p *TAlterTabletReqV2) GetBaseSchemaHash() (v types.TSchemaHash) {
	return p.BaseSchemaHash
}

func (p *TAlterTabletReqV2) GetNewSchemaHash_() (v types.TSchemaHash) {
	return p.NewSchemaHash_
}

var TAlterTabletReqV2_AlterVersion_DEFAULT types.TVersion

func (p *TAlterTabletReqV2) GetAlterVersion() (v types.TVersion) {
	if !p.IsSetAlterVersion() {
		return TAlterTabletReqV2_AlterVersion_DEFAULT
	}
	return *p.AlterVersion
}

var TAlterTabletReqV2_AlterVersionHash_DEFAULT types.TVersionHash

func (p *TAlterTabletReqV2) GetAlterVersionHash() (v types.TVersionHash) {
	if !p.IsSetAlterVersionHash() {
		return TAlterTabletReqV2_AlterVersionHash_DEFAULT
	}
	return *p.AlterVersionHash
}

var TAlterTabletReqV2_MaterializedViewParams_DEFAULT []*TAlterMaterializedViewParam

func (p *TAlterTabletReqV2) GetMaterializedViewParams() (v []*TAlterMaterializedViewParam) {
	if !p.IsSetMaterializedViewParams() {
		return TAlterTabletReqV2_MaterializedViewParams_DEFAULT
	}
	return p.MaterializedViewParams
}

var TAlterTabletReqV2_AlterTabletType_DEFAULT TAlterTabletType = TAlterTabletType_SCHEMA_CHANGE

func (p *TAlterTabletReqV2) GetAlterTabletType() (v TAlterTabletType) {
	if !p.IsSetAlterTabletType() {
		return TAlterTabletReqV2_AlterTabletType_DEFAULT
	}
	return p.AlterTabletType
}

var TAlterTabletReqV2_DescTbl_DEFAULT *descriptors.TDescriptorTable

func (p *TAlterTabletReqV2) GetDescTbl() (v *descriptors.TDescriptorTable) {
	if !p.IsSetDescTbl() {
		return TAlterTabletReqV2_DescTbl_DEFAULT
	}
	return p.DescTbl
}

var TAlterTabletReqV2_Columns_DEFAULT []*descriptors.TColumn

func (p *TAlterTabletReqV2) GetColumns() (v []*descriptors.TColumn) {
	if !p.IsSetColumns() {
		return TAlterTabletReqV2_Columns_DEFAULT
	}
	return p.Columns
}

var TAlterTabletReqV2_BeExecVersion_DEFAULT int32 = 0

func (p *TAlterTabletReqV2) GetBeExecVersion() (v int32) {
	if !p.IsSetBeExecVersion() {
		return TAlterTabletReqV2_BeExecVersion_DEFAULT
	}
	return p.BeExecVersion
}

var TAlterTabletReqV2_JobId_DEFAULT int64

func (p *TAlterTabletReqV2) GetJobId() (v int64) {
	if !p.IsSetJobId() {
		return TAlterTabletReqV2_JobId_DEFAULT
	}
	return *p.JobId
}

var TAlterTabletReqV2_Expiration_DEFAULT int64

func (p *TAlterTabletReqV2) GetExpiration() (v int64) {
	if !p.IsSetExpiration() {
		return TAlterTabletReqV2_Expiration_DEFAULT
	}
	return *p.Expiration
}

var TAlterTabletReqV2_StorageVaultId_DEFAULT string

func (p *TAlterTabletReqV2) GetStorageVaultId() (v string) {
	if !p.IsSetStorageVaultId() {
		return TAlterTabletReqV2_StorageVaultId_DEFAULT
	}
	return *p.StorageVaultId
}
func (p *TAlterTabletReqV2) SetBaseTabletId(val types.TTabletId) {
	p.BaseTabletId = val
}
func (p *TAlterTabletReqV2) SetNewTabletId_(val types.TTabletId) {
	p.NewTabletId_ = val
}
func (p *TAlterTabletReqV2) SetBaseSchemaHash(val types.TSchemaHash) {
	p.BaseSchemaHash = val
}
func (p *TAlterTabletReqV2) SetNewSchemaHash_(val types.TSchemaHash) {
	p.NewSchemaHash_ = val
}
func (p *TAlterTabletReqV2) SetAlterVersion(val *types.TVersion) {
	p.AlterVersion = val
}
func (p *TAlterTabletReqV2) SetAlterVersionHash(val *types.TVersionHash) {
	p.AlterVersionHash = val
}
func (p *TAlterTabletReqV2) SetMaterializedViewParams(val []*TAlterMaterializedViewParam) {
	p.MaterializedViewParams = val
}
func (p *TAlterTabletReqV2) SetAlterTabletType(val TAlterTabletType) {
	p.AlterTabletType = val
}
func (p *TAlterTabletReqV2) SetDescTbl(val *descriptors.TDescriptorTable) {
	p.DescTbl = val
}
func (p *TAlterTabletReqV2) SetColumns(val []*descriptors.TColumn) {
	p.Columns = val
}
func (p *TAlterTabletReqV2) SetBeExecVersion(val int32) {
	p.BeExecVersion = val
}
func (p *TAlterTabletReqV2) SetJobId(val *int64) {
	p.JobId = val
}
func (p *TAlterTabletReqV2) SetExpiration(val *int64) {
	p.Expiration = val
}
func (p *TAlterTabletReqV2) SetStorageVaultId(val *string) {
	p.StorageVaultId = val
}

var fieldIDToName_TAlterTabletReqV2 = map[int16]string{
	1:    "base_tablet_id",
	2:    "new_tablet_id",
	3:    "base_schema_hash",
	4:    "new_schema_hash",
	5:    "alter_version",
	6:    "alter_version_hash",
	7:    "materialized_view_params",
	8:    "alter_tablet_type",
	9:    "desc_tbl",
	10:   "columns",
	11:   "be_exec_version",
	1000: "job_id",
	1001: "expiration",
	1002: "storage_vault_id",
}

func (p *TAlterTabletReqV2) IsSetAlterVersion() bool {
	return p.AlterVersion != nil
}

func (p *TAlterTabletReqV2) IsSetAlterVersionHash() bool {
	return p.AlterVersionHash != nil
}

func (p *TAlterTabletReqV2) IsSetMaterializedViewParams() bool {
	return p.MaterializedViewParams != nil
}

func (p *TAlterTabletReqV2) IsSetAlterTabletType() bool {
	return p.AlterTabletType != TAlterTabletReqV2_AlterTabletType_DEFAULT
}

func (p *TAlterTabletReqV2) IsSetDescTbl() bool {
	return p.DescTbl != nil
}

func (p *TAlterTabletReqV2) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TAlterTabletReqV2) IsSetBeExecVersion() bool {
	return p.BeExecVersion != TAlterTabletReqV2_BeExecVersion_DEFAULT
}

func (p *TAlterTabletReqV2) IsSetJobId() bool {
	return p.JobId != nil
}

func (p *TAlterTabletReqV2) IsSetExpiration() bool {
	return p.Expiration != nil
}

func (p *TAlterTabletReqV2) IsSetStorageVaultId() bool {
	return p.StorageVaultId != nil
}

func (p *TAlterTabletReqV2) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBaseTabletId bool = false
	var issetNewTabletId_ bool = false
	var issetBaseSchemaHash bool = false
	var issetNewSchemaHash_ bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBaseTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNewTabletId_ = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetBaseSchemaHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetNewSchemaHash_ = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1000:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1000(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1001:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1001(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1002:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1002(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBaseTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNewTabletId_ {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBaseSchemaHash {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetNewSchemaHash_ {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAlterTabletReqV2[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAlterTabletReqV2[fieldId]))
}

func (p *TAlterTabletReqV2) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BaseTabletId = _field
	return nil
}
func (p *TAlterTabletReqV2) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NewTabletId_ = _field
	return nil
}
func (p *TAlterTabletReqV2) ReadField3(iprot thrift.TProtocol) error {

	var _field types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BaseSchemaHash = _field
	return nil
}
func (p *TAlterTabletReqV2) ReadField4(iprot thrift.TProtocol) error {

	var _field types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NewSchemaHash_ = _field
	return nil
}
func (p *TAlterTabletReqV2) ReadField5(iprot thrift.TProtocol) error {

	var _field *types.TVersion
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AlterVersion = _field
	return nil
}
func (p *TAlterTabletReqV2) ReadField6(iprot thrift.TProtocol) error {

	var _field *types.TVersionHash
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AlterVersionHash = _field
	return nil
}
func (p *TAlterTabletReqV2) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TAlterMaterializedViewParam, 0, size)
	values := make([]TAlterMaterializedViewParam, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MaterializedViewParams = _field
	return nil
}
func (p *TAlterTabletReqV2) ReadField8(iprot thrift.TProtocol) error {

	var _field TAlterTabletType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TAlterTabletType(v)
	}
	p.AlterTabletType = _field
	return nil
}
func (p *TAlterTabletReqV2) ReadField9(iprot thrift.TProtocol) error {
	_field := descriptors.NewTDescriptorTable()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DescTbl = _field
	return nil
}
func (p *TAlterTabletReqV2) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*descriptors.TColumn, 0, size)
	values := make([]descriptors.TColumn, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Columns = _field
	return nil
}
func (p *TAlterTabletReqV2) ReadField11(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BeExecVersion = _field
	return nil
}
func (p *TAlterTabletReqV2) ReadField1000(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JobId = _field
	return nil
}
func (p *TAlterTabletReqV2) ReadField1001(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Expiration = _field
	return nil
}
func (p *TAlterTabletReqV2) ReadField1002(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StorageVaultId = _field
	return nil
}

func (p *TAlterTabletReqV2) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAlterTabletReqV2"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField1000(oprot); err != nil {
			fieldId = 1000
			goto WriteFieldError
		}
		if err = p.writeField1001(oprot); err != nil {
			fieldId = 1001
			goto WriteFieldError
		}
		if err = p.writeField1002(oprot); err != nil {
			fieldId = 1002
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAlterTabletReqV2) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_tablet_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.BaseTabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAlterTabletReqV2) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("new_tablet_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.NewTabletId_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAlterTabletReqV2) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_schema_hash", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.BaseSchemaHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TAlterTabletReqV2) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("new_schema_hash", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NewSchemaHash_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TAlterTabletReqV2) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlterVersion() {
		if err = oprot.WriteFieldBegin("alter_version", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AlterVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TAlterTabletReqV2) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlterVersionHash() {
		if err = oprot.WriteFieldBegin("alter_version_hash", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AlterVersionHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TAlterTabletReqV2) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaterializedViewParams() {
		if err = oprot.WriteFieldBegin("materialized_view_params", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MaterializedViewParams)); err != nil {
			return err
		}
		for _, v := range p.MaterializedViewParams {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TAlterTabletReqV2) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlterTabletType() {
		if err = oprot.WriteFieldBegin("alter_tablet_type", thrift.I32, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(p.AlterTabletType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TAlterTabletReqV2) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescTbl() {
		if err = oprot.WriteFieldBegin("desc_tbl", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DescTbl.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TAlterTabletReqV2) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err = oprot.WriteFieldBegin("columns", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
			return err
		}
		for _, v := range p.Columns {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TAlterTabletReqV2) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetBeExecVersion() {
		if err = oprot.WriteFieldBegin("be_exec_version", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.BeExecVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TAlterTabletReqV2) writeField1000(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobId() {
		if err = oprot.WriteFieldBegin("job_id", thrift.I64, 1000); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.JobId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 end error: ", p), err)
}

func (p *TAlterTabletReqV2) writeField1001(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpiration() {
		if err = oprot.WriteFieldBegin("expiration", thrift.I64, 1001); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Expiration); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1001 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1001 end error: ", p), err)
}

func (p *TAlterTabletReqV2) writeField1002(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageVaultId() {
		if err = oprot.WriteFieldBegin("storage_vault_id", thrift.STRING, 1002); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StorageVaultId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1002 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1002 end error: ", p), err)
}

func (p *TAlterTabletReqV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterTabletReqV2(%+v)", *p)

}

func (p *TAlterTabletReqV2) DeepEqual(ano *TAlterTabletReqV2) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseTabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.NewTabletId_) {
		return false
	}
	if !p.Field3DeepEqual(ano.BaseSchemaHash) {
		return false
	}
	if !p.Field4DeepEqual(ano.NewSchemaHash_) {
		return false
	}
	if !p.Field5DeepEqual(ano.AlterVersion) {
		return false
	}
	if !p.Field6DeepEqual(ano.AlterVersionHash) {
		return false
	}
	if !p.Field7DeepEqual(ano.MaterializedViewParams) {
		return false
	}
	if !p.Field8DeepEqual(ano.AlterTabletType) {
		return false
	}
	if !p.Field9DeepEqual(ano.DescTbl) {
		return false
	}
	if !p.Field10DeepEqual(ano.Columns) {
		return false
	}
	if !p.Field11DeepEqual(ano.BeExecVersion) {
		return false
	}
	if !p.Field1000DeepEqual(ano.JobId) {
		return false
	}
	if !p.Field1001DeepEqual(ano.Expiration) {
		return false
	}
	if !p.Field1002DeepEqual(ano.StorageVaultId) {
		return false
	}
	return true
}

func (p *TAlterTabletReqV2) Field1DeepEqual(src types.TTabletId) bool {

	if p.BaseTabletId != src {
		return false
	}
	return true
}
func (p *TAlterTabletReqV2) Field2DeepEqual(src types.TTabletId) bool {

	if p.NewTabletId_ != src {
		return false
	}
	return true
}
func (p *TAlterTabletReqV2) Field3DeepEqual(src types.TSchemaHash) bool {

	if p.BaseSchemaHash != src {
		return false
	}
	return true
}
func (p *TAlterTabletReqV2) Field4DeepEqual(src types.TSchemaHash) bool {

	if p.NewSchemaHash_ != src {
		return false
	}
	return true
}
func (p *TAlterTabletReqV2) Field5DeepEqual(src *types.TVersion) bool {

	if p.AlterVersion == src {
		return true
	} else if p.AlterVersion == nil || src == nil {
		return false
	}
	if *p.AlterVersion != *src {
		return false
	}
	return true
}
func (p *TAlterTabletReqV2) Field6DeepEqual(src *types.TVersionHash) bool {

	if p.AlterVersionHash == src {
		return true
	} else if p.AlterVersionHash == nil || src == nil {
		return false
	}
	if *p.AlterVersionHash != *src {
		return false
	}
	return true
}
func (p *TAlterTabletReqV2) Field7DeepEqual(src []*TAlterMaterializedViewParam) bool {

	if len(p.MaterializedViewParams) != len(src) {
		return false
	}
	for i, v := range p.MaterializedViewParams {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TAlterTabletReqV2) Field8DeepEqual(src TAlterTabletType) bool {

	if p.AlterTabletType != src {
		return false
	}
	return true
}
func (p *TAlterTabletReqV2) Field9DeepEqual(src *descriptors.TDescriptorTable) bool {

	if !p.DescTbl.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAlterTabletReqV2) Field10DeepEqual(src []*descriptors.TColumn) bool {

	if len(p.Columns) != len(src) {
		return false
	}
	for i, v := range p.Columns {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TAlterTabletReqV2) Field11DeepEqual(src int32) bool {

	if p.BeExecVersion != src {
		return false
	}
	return true
}
func (p *TAlterTabletReqV2) Field1000DeepEqual(src *int64) bool {

	if p.JobId == src {
		return true
	} else if p.JobId == nil || src == nil {
		return false
	}
	if *p.JobId != *src {
		return false
	}
	return true
}
func (p *TAlterTabletReqV2) Field1001DeepEqual(src *int64) bool {

	if p.Expiration == src {
		return true
	} else if p.Expiration == nil || src == nil {
		return false
	}
	if *p.Expiration != *src {
		return false
	}
	return true
}
func (p *TAlterTabletReqV2) Field1002DeepEqual(src *string) bool {

	if p.StorageVaultId == src {
		return true
	} else if p.StorageVaultId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StorageVaultId, *src) != 0 {
		return false
	}
	return true
}

type TAlterInvertedIndexReq struct {
	TabletId             types.TTabletId                `thrift:"tablet_id,1,required" frugal:"1,required,i64" json:"tablet_id"`
	SchemaHash           types.TSchemaHash              `thrift:"schema_hash,2,required" frugal:"2,required,i32" json:"schema_hash"`
	AlterVersion         *types.TVersion                `thrift:"alter_version,3,optional" frugal:"3,optional,i64" json:"alter_version,omitempty"`
	AlterTabletType      TAlterTabletType               `thrift:"alter_tablet_type,4,optional" frugal:"4,optional,TAlterTabletType" json:"alter_tablet_type,omitempty"`
	IsDropOp             bool                           `thrift:"is_drop_op,5,optional" frugal:"5,optional,bool" json:"is_drop_op,omitempty"`
	AlterInvertedIndexes []*descriptors.TOlapTableIndex `thrift:"alter_inverted_indexes,6,optional" frugal:"6,optional,list<descriptors.TOlapTableIndex>" json:"alter_inverted_indexes,omitempty"`
	IndexesDesc          []*descriptors.TOlapTableIndex `thrift:"indexes_desc,7,optional" frugal:"7,optional,list<descriptors.TOlapTableIndex>" json:"indexes_desc,omitempty"`
	Columns              []*descriptors.TColumn         `thrift:"columns,8,optional" frugal:"8,optional,list<descriptors.TColumn>" json:"columns,omitempty"`
	JobId                *int64                         `thrift:"job_id,9,optional" frugal:"9,optional,i64" json:"job_id,omitempty"`
	Expiration           *int64                         `thrift:"expiration,10,optional" frugal:"10,optional,i64" json:"expiration,omitempty"`
}

func NewTAlterInvertedIndexReq() *TAlterInvertedIndexReq {
	return &TAlterInvertedIndexReq{

		AlterTabletType: TAlterTabletType_SCHEMA_CHANGE,
		IsDropOp:        false,
	}
}

func (p *TAlterInvertedIndexReq) InitDefault() {
	p.AlterTabletType = TAlterTabletType_SCHEMA_CHANGE
	p.IsDropOp = false
}

func (p *TAlterInvertedIndexReq) GetTabletId() (v types.TTabletId) {
	return p.TabletId
}

func (p *TAlterInvertedIndexReq) GetSchemaHash() (v types.TSchemaHash) {
	return p.SchemaHash
}

var TAlterInvertedIndexReq_AlterVersion_DEFAULT types.TVersion

func (p *TAlterInvertedIndexReq) GetAlterVersion() (v types.TVersion) {
	if !p.IsSetAlterVersion() {
		return TAlterInvertedIndexReq_AlterVersion_DEFAULT
	}
	return *p.AlterVersion
}

var TAlterInvertedIndexReq_AlterTabletType_DEFAULT TAlterTabletType = TAlterTabletType_SCHEMA_CHANGE

func (p *TAlterInvertedIndexReq) GetAlterTabletType() (v TAlterTabletType) {
	if !p.IsSetAlterTabletType() {
		return TAlterInvertedIndexReq_AlterTabletType_DEFAULT
	}
	return p.AlterTabletType
}

var TAlterInvertedIndexReq_IsDropOp_DEFAULT bool = false

func (p *TAlterInvertedIndexReq) GetIsDropOp() (v bool) {
	if !p.IsSetIsDropOp() {
		return TAlterInvertedIndexReq_IsDropOp_DEFAULT
	}
	return p.IsDropOp
}

var TAlterInvertedIndexReq_AlterInvertedIndexes_DEFAULT []*descriptors.TOlapTableIndex

func (p *TAlterInvertedIndexReq) GetAlterInvertedIndexes() (v []*descriptors.TOlapTableIndex) {
	if !p.IsSetAlterInvertedIndexes() {
		return TAlterInvertedIndexReq_AlterInvertedIndexes_DEFAULT
	}
	return p.AlterInvertedIndexes
}

var TAlterInvertedIndexReq_IndexesDesc_DEFAULT []*descriptors.TOlapTableIndex

func (p *TAlterInvertedIndexReq) GetIndexesDesc() (v []*descriptors.TOlapTableIndex) {
	if !p.IsSetIndexesDesc() {
		return TAlterInvertedIndexReq_IndexesDesc_DEFAULT
	}
	return p.IndexesDesc
}

var TAlterInvertedIndexReq_Columns_DEFAULT []*descriptors.TColumn

func (p *TAlterInvertedIndexReq) GetColumns() (v []*descriptors.TColumn) {
	if !p.IsSetColumns() {
		return TAlterInvertedIndexReq_Columns_DEFAULT
	}
	return p.Columns
}

var TAlterInvertedIndexReq_JobId_DEFAULT int64

func (p *TAlterInvertedIndexReq) GetJobId() (v int64) {
	if !p.IsSetJobId() {
		return TAlterInvertedIndexReq_JobId_DEFAULT
	}
	return *p.JobId
}

var TAlterInvertedIndexReq_Expiration_DEFAULT int64

func (p *TAlterInvertedIndexReq) GetExpiration() (v int64) {
	if !p.IsSetExpiration() {
		return TAlterInvertedIndexReq_Expiration_DEFAULT
	}
	return *p.Expiration
}
func (p *TAlterInvertedIndexReq) SetTabletId(val types.TTabletId) {
	p.TabletId = val
}
func (p *TAlterInvertedIndexReq) SetSchemaHash(val types.TSchemaHash) {
	p.SchemaHash = val
}
func (p *TAlterInvertedIndexReq) SetAlterVersion(val *types.TVersion) {
	p.AlterVersion = val
}
func (p *TAlterInvertedIndexReq) SetAlterTabletType(val TAlterTabletType) {
	p.AlterTabletType = val
}
func (p *TAlterInvertedIndexReq) SetIsDropOp(val bool) {
	p.IsDropOp = val
}
func (p *TAlterInvertedIndexReq) SetAlterInvertedIndexes(val []*descriptors.TOlapTableIndex) {
	p.AlterInvertedIndexes = val
}
func (p *TAlterInvertedIndexReq) SetIndexesDesc(val []*descriptors.TOlapTableIndex) {
	p.IndexesDesc = val
}
func (p *TAlterInvertedIndexReq) SetColumns(val []*descriptors.TColumn) {
	p.Columns = val
}
func (p *TAlterInvertedIndexReq) SetJobId(val *int64) {
	p.JobId = val
}
func (p *TAlterInvertedIndexReq) SetExpiration(val *int64) {
	p.Expiration = val
}

var fieldIDToName_TAlterInvertedIndexReq = map[int16]string{
	1:  "tablet_id",
	2:  "schema_hash",
	3:  "alter_version",
	4:  "alter_tablet_type",
	5:  "is_drop_op",
	6:  "alter_inverted_indexes",
	7:  "indexes_desc",
	8:  "columns",
	9:  "job_id",
	10: "expiration",
}

func (p *TAlterInvertedIndexReq) IsSetAlterVersion() bool {
	return p.AlterVersion != nil
}

func (p *TAlterInvertedIndexReq) IsSetAlterTabletType() bool {
	return p.AlterTabletType != TAlterInvertedIndexReq_AlterTabletType_DEFAULT
}

func (p *TAlterInvertedIndexReq) IsSetIsDropOp() bool {
	return p.IsDropOp != TAlterInvertedIndexReq_IsDropOp_DEFAULT
}

func (p *TAlterInvertedIndexReq) IsSetAlterInvertedIndexes() bool {
	return p.AlterInvertedIndexes != nil
}

func (p *TAlterInvertedIndexReq) IsSetIndexesDesc() bool {
	return p.IndexesDesc != nil
}

func (p *TAlterInvertedIndexReq) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TAlterInvertedIndexReq) IsSetJobId() bool {
	return p.JobId != nil
}

func (p *TAlterInvertedIndexReq) IsSetExpiration() bool {
	return p.Expiration != nil
}

func (p *TAlterInvertedIndexReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAlterInvertedIndexReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAlterInvertedIndexReq[fieldId]))
}

func (p *TAlterInvertedIndexReq) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TabletId = _field
	return nil
}
func (p *TAlterInvertedIndexReq) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SchemaHash = _field
	return nil
}
func (p *TAlterInvertedIndexReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *types.TVersion
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AlterVersion = _field
	return nil
}
func (p *TAlterInvertedIndexReq) ReadField4(iprot thrift.TProtocol) error {

	var _field TAlterTabletType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TAlterTabletType(v)
	}
	p.AlterTabletType = _field
	return nil
}
func (p *TAlterInvertedIndexReq) ReadField5(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsDropOp = _field
	return nil
}
func (p *TAlterInvertedIndexReq) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*descriptors.TOlapTableIndex, 0, size)
	values := make([]descriptors.TOlapTableIndex, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.AlterInvertedIndexes = _field
	return nil
}
func (p *TAlterInvertedIndexReq) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*descriptors.TOlapTableIndex, 0, size)
	values := make([]descriptors.TOlapTableIndex, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.IndexesDesc = _field
	return nil
}
func (p *TAlterInvertedIndexReq) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*descriptors.TColumn, 0, size)
	values := make([]descriptors.TColumn, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Columns = _field
	return nil
}
func (p *TAlterInvertedIndexReq) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JobId = _field
	return nil
}
func (p *TAlterInvertedIndexReq) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Expiration = _field
	return nil
}

func (p *TAlterInvertedIndexReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAlterInvertedIndexReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAlterInvertedIndexReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAlterInvertedIndexReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schema_hash", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SchemaHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAlterInvertedIndexReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlterVersion() {
		if err = oprot.WriteFieldBegin("alter_version", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AlterVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TAlterInvertedIndexReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlterTabletType() {
		if err = oprot.WriteFieldBegin("alter_tablet_type", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(p.AlterTabletType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TAlterInvertedIndexReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsDropOp() {
		if err = oprot.WriteFieldBegin("is_drop_op", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsDropOp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TAlterInvertedIndexReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlterInvertedIndexes() {
		if err = oprot.WriteFieldBegin("alter_inverted_indexes", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AlterInvertedIndexes)); err != nil {
			return err
		}
		for _, v := range p.AlterInvertedIndexes {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TAlterInvertedIndexReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndexesDesc() {
		if err = oprot.WriteFieldBegin("indexes_desc", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.IndexesDesc)); err != nil {
			return err
		}
		for _, v := range p.IndexesDesc {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TAlterInvertedIndexReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err = oprot.WriteFieldBegin("columns", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
			return err
		}
		for _, v := range p.Columns {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TAlterInvertedIndexReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobId() {
		if err = oprot.WriteFieldBegin("job_id", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.JobId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TAlterInvertedIndexReq) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpiration() {
		if err = oprot.WriteFieldBegin("expiration", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Expiration); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TAlterInvertedIndexReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAlterInvertedIndexReq(%+v)", *p)

}

func (p *TAlterInvertedIndexReq) DeepEqual(ano *TAlterInvertedIndexReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SchemaHash) {
		return false
	}
	if !p.Field3DeepEqual(ano.AlterVersion) {
		return false
	}
	if !p.Field4DeepEqual(ano.AlterTabletType) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsDropOp) {
		return false
	}
	if !p.Field6DeepEqual(ano.AlterInvertedIndexes) {
		return false
	}
	if !p.Field7DeepEqual(ano.IndexesDesc) {
		return false
	}
	if !p.Field8DeepEqual(ano.Columns) {
		return false
	}
	if !p.Field9DeepEqual(ano.JobId) {
		return false
	}
	if !p.Field10DeepEqual(ano.Expiration) {
		return false
	}
	return true
}

func (p *TAlterInvertedIndexReq) Field1DeepEqual(src types.TTabletId) bool {

	if p.TabletId != src {
		return false
	}
	return true
}
func (p *TAlterInvertedIndexReq) Field2DeepEqual(src types.TSchemaHash) bool {

	if p.SchemaHash != src {
		return false
	}
	return true
}
func (p *TAlterInvertedIndexReq) Field3DeepEqual(src *types.TVersion) bool {

	if p.AlterVersion == src {
		return true
	} else if p.AlterVersion == nil || src == nil {
		return false
	}
	if *p.AlterVersion != *src {
		return false
	}
	return true
}
func (p *TAlterInvertedIndexReq) Field4DeepEqual(src TAlterTabletType) bool {

	if p.AlterTabletType != src {
		return false
	}
	return true
}
func (p *TAlterInvertedIndexReq) Field5DeepEqual(src bool) bool {

	if p.IsDropOp != src {
		return false
	}
	return true
}
func (p *TAlterInvertedIndexReq) Field6DeepEqual(src []*descriptors.TOlapTableIndex) bool {

	if len(p.AlterInvertedIndexes) != len(src) {
		return false
	}
	for i, v := range p.AlterInvertedIndexes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TAlterInvertedIndexReq) Field7DeepEqual(src []*descriptors.TOlapTableIndex) bool {

	if len(p.IndexesDesc) != len(src) {
		return false
	}
	for i, v := range p.IndexesDesc {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TAlterInvertedIndexReq) Field8DeepEqual(src []*descriptors.TColumn) bool {

	if len(p.Columns) != len(src) {
		return false
	}
	for i, v := range p.Columns {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TAlterInvertedIndexReq) Field9DeepEqual(src *int64) bool {

	if p.JobId == src {
		return true
	} else if p.JobId == nil || src == nil {
		return false
	}
	if *p.JobId != *src {
		return false
	}
	return true
}
func (p *TAlterInvertedIndexReq) Field10DeepEqual(src *int64) bool {

	if p.Expiration == src {
		return true
	} else if p.Expiration == nil || src == nil {
		return false
	}
	if *p.Expiration != *src {
		return false
	}
	return true
}

type TTabletGcBinlogInfo struct {
	TabletId *types.TTabletId `thrift:"tablet_id,1,optional" frugal:"1,optional,i64" json:"tablet_id,omitempty"`
	Version  *int64           `thrift:"version,2,optional" frugal:"2,optional,i64" json:"version,omitempty"`
}

func NewTTabletGcBinlogInfo() *TTabletGcBinlogInfo {
	return &TTabletGcBinlogInfo{}
}

func (p *TTabletGcBinlogInfo) InitDefault() {
}

var TTabletGcBinlogInfo_TabletId_DEFAULT types.TTabletId

func (p *TTabletGcBinlogInfo) GetTabletId() (v types.TTabletId) {
	if !p.IsSetTabletId() {
		return TTabletGcBinlogInfo_TabletId_DEFAULT
	}
	return *p.TabletId
}

var TTabletGcBinlogInfo_Version_DEFAULT int64

func (p *TTabletGcBinlogInfo) GetVersion() (v int64) {
	if !p.IsSetVersion() {
		return TTabletGcBinlogInfo_Version_DEFAULT
	}
	return *p.Version
}
func (p *TTabletGcBinlogInfo) SetTabletId(val *types.TTabletId) {
	p.TabletId = val
}
func (p *TTabletGcBinlogInfo) SetVersion(val *int64) {
	p.Version = val
}

var fieldIDToName_TTabletGcBinlogInfo = map[int16]string{
	1: "tablet_id",
	2: "version",
}

func (p *TTabletGcBinlogInfo) IsSetTabletId() bool {
	return p.TabletId != nil
}

func (p *TTabletGcBinlogInfo) IsSetVersion() bool {
	return p.Version != nil
}

func (p *TTabletGcBinlogInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletGcBinlogInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTabletGcBinlogInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TabletId = _field
	return nil
}
func (p *TTabletGcBinlogInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}

func (p *TTabletGcBinlogInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTabletGcBinlogInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTabletGcBinlogInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletId() {
		if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TabletId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTabletGcBinlogInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTabletGcBinlogInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTabletGcBinlogInfo(%+v)", *p)

}

func (p *TTabletGcBinlogInfo) DeepEqual(ano *TTabletGcBinlogInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Version) {
		return false
	}
	return true
}

func (p *TTabletGcBinlogInfo) Field1DeepEqual(src *types.TTabletId) bool {

	if p.TabletId == src {
		return true
	} else if p.TabletId == nil || src == nil {
		return false
	}
	if *p.TabletId != *src {
		return false
	}
	return true
}
func (p *TTabletGcBinlogInfo) Field2DeepEqual(src *int64) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if *p.Version != *src {
		return false
	}
	return true
}

type TGcBinlogReq struct {
	TabletGcBinlogInfos []*TTabletGcBinlogInfo `thrift:"tablet_gc_binlog_infos,1,optional" frugal:"1,optional,list<TTabletGcBinlogInfo>" json:"tablet_gc_binlog_infos,omitempty"`
}

func NewTGcBinlogReq() *TGcBinlogReq {
	return &TGcBinlogReq{}
}

func (p *TGcBinlogReq) InitDefault() {
}

var TGcBinlogReq_TabletGcBinlogInfos_DEFAULT []*TTabletGcBinlogInfo

func (p *TGcBinlogReq) GetTabletGcBinlogInfos() (v []*TTabletGcBinlogInfo) {
	if !p.IsSetTabletGcBinlogInfos() {
		return TGcBinlogReq_TabletGcBinlogInfos_DEFAULT
	}
	return p.TabletGcBinlogInfos
}
func (p *TGcBinlogReq) SetTabletGcBinlogInfos(val []*TTabletGcBinlogInfo) {
	p.TabletGcBinlogInfos = val
}

var fieldIDToName_TGcBinlogReq = map[int16]string{
	1: "tablet_gc_binlog_infos",
}

func (p *TGcBinlogReq) IsSetTabletGcBinlogInfos() bool {
	return p.TabletGcBinlogInfos != nil
}

func (p *TGcBinlogReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGcBinlogReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGcBinlogReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTabletGcBinlogInfo, 0, size)
	values := make([]TTabletGcBinlogInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TabletGcBinlogInfos = _field
	return nil
}

func (p *TGcBinlogReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGcBinlogReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGcBinlogReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletGcBinlogInfos() {
		if err = oprot.WriteFieldBegin("tablet_gc_binlog_infos", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TabletGcBinlogInfos)); err != nil {
			return err
		}
		for _, v := range p.TabletGcBinlogInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGcBinlogReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGcBinlogReq(%+v)", *p)

}

func (p *TGcBinlogReq) DeepEqual(ano *TGcBinlogReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletGcBinlogInfos) {
		return false
	}
	return true
}

func (p *TGcBinlogReq) Field1DeepEqual(src []*TTabletGcBinlogInfo) bool {

	if len(p.TabletGcBinlogInfos) != len(src) {
		return false
	}
	for i, v := range p.TabletGcBinlogInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TStorageMigrationReqV2 struct {
	BaseTabletId     *types.TTabletId   `thrift:"base_tablet_id,1,optional" frugal:"1,optional,i64" json:"base_tablet_id,omitempty"`
	NewTabletId_     *types.TTabletId   `thrift:"new_tablet_id,2,optional" frugal:"2,optional,i64" json:"new_tablet_id,omitempty"`
	BaseSchemaHash   *types.TSchemaHash `thrift:"base_schema_hash,3,optional" frugal:"3,optional,i32" json:"base_schema_hash,omitempty"`
	NewSchemaHash_   *types.TSchemaHash `thrift:"new_schema_hash,4,optional" frugal:"4,optional,i32" json:"new_schema_hash,omitempty"`
	MigrationVersion *types.TVersion    `thrift:"migration_version,5,optional" frugal:"5,optional,i64" json:"migration_version,omitempty"`
}

func NewTStorageMigrationReqV2() *TStorageMigrationReqV2 {
	return &TStorageMigrationReqV2{}
}

func (p *TStorageMigrationReqV2) InitDefault() {
}

var TStorageMigrationReqV2_BaseTabletId_DEFAULT types.TTabletId

func (p *TStorageMigrationReqV2) GetBaseTabletId() (v types.TTabletId) {
	if !p.IsSetBaseTabletId() {
		return TStorageMigrationReqV2_BaseTabletId_DEFAULT
	}
	return *p.BaseTabletId
}

var TStorageMigrationReqV2_NewTabletId__DEFAULT types.TTabletId

func (p *TStorageMigrationReqV2) GetNewTabletId_() (v types.TTabletId) {
	if !p.IsSetNewTabletId_() {
		return TStorageMigrationReqV2_NewTabletId__DEFAULT
	}
	return *p.NewTabletId_
}

var TStorageMigrationReqV2_BaseSchemaHash_DEFAULT types.TSchemaHash

func (p *TStorageMigrationReqV2) GetBaseSchemaHash() (v types.TSchemaHash) {
	if !p.IsSetBaseSchemaHash() {
		return TStorageMigrationReqV2_BaseSchemaHash_DEFAULT
	}
	return *p.BaseSchemaHash
}

var TStorageMigrationReqV2_NewSchemaHash__DEFAULT types.TSchemaHash

func (p *TStorageMigrationReqV2) GetNewSchemaHash_() (v types.TSchemaHash) {
	if !p.IsSetNewSchemaHash_() {
		return TStorageMigrationReqV2_NewSchemaHash__DEFAULT
	}
	return *p.NewSchemaHash_
}

var TStorageMigrationReqV2_MigrationVersion_DEFAULT types.TVersion

func (p *TStorageMigrationReqV2) GetMigrationVersion() (v types.TVersion) {
	if !p.IsSetMigrationVersion() {
		return TStorageMigrationReqV2_MigrationVersion_DEFAULT
	}
	return *p.MigrationVersion
}
func (p *TStorageMigrationReqV2) SetBaseTabletId(val *types.TTabletId) {
	p.BaseTabletId = val
}
func (p *TStorageMigrationReqV2) SetNewTabletId_(val *types.TTabletId) {
	p.NewTabletId_ = val
}
func (p *TStorageMigrationReqV2) SetBaseSchemaHash(val *types.TSchemaHash) {
	p.BaseSchemaHash = val
}
func (p *TStorageMigrationReqV2) SetNewSchemaHash_(val *types.TSchemaHash) {
	p.NewSchemaHash_ = val
}
func (p *TStorageMigrationReqV2) SetMigrationVersion(val *types.TVersion) {
	p.MigrationVersion = val
}

var fieldIDToName_TStorageMigrationReqV2 = map[int16]string{
	1: "base_tablet_id",
	2: "new_tablet_id",
	3: "base_schema_hash",
	4: "new_schema_hash",
	5: "migration_version",
}

func (p *TStorageMigrationReqV2) IsSetBaseTabletId() bool {
	return p.BaseTabletId != nil
}

func (p *TStorageMigrationReqV2) IsSetNewTabletId_() bool {
	return p.NewTabletId_ != nil
}

func (p *TStorageMigrationReqV2) IsSetBaseSchemaHash() bool {
	return p.BaseSchemaHash != nil
}

func (p *TStorageMigrationReqV2) IsSetNewSchemaHash_() bool {
	return p.NewSchemaHash_ != nil
}

func (p *TStorageMigrationReqV2) IsSetMigrationVersion() bool {
	return p.MigrationVersion != nil
}

func (p *TStorageMigrationReqV2) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TStorageMigrationReqV2[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TStorageMigrationReqV2) ReadField1(iprot thrift.TProtocol) error {

	var _field *types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BaseTabletId = _field
	return nil
}
func (p *TStorageMigrationReqV2) ReadField2(iprot thrift.TProtocol) error {

	var _field *types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NewTabletId_ = _field
	return nil
}
func (p *TStorageMigrationReqV2) ReadField3(iprot thrift.TProtocol) error {

	var _field *types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BaseSchemaHash = _field
	return nil
}
func (p *TStorageMigrationReqV2) ReadField4(iprot thrift.TProtocol) error {

	var _field *types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NewSchemaHash_ = _field
	return nil
}
func (p *TStorageMigrationReqV2) ReadField5(iprot thrift.TProtocol) error {

	var _field *types.TVersion
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MigrationVersion = _field
	return nil
}

func (p *TStorageMigrationReqV2) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TStorageMigrationReqV2"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TStorageMigrationReqV2) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseTabletId() {
		if err = oprot.WriteFieldBegin("base_tablet_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BaseTabletId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TStorageMigrationReqV2) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNewTabletId_() {
		if err = oprot.WriteFieldBegin("new_tablet_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.NewTabletId_); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TStorageMigrationReqV2) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseSchemaHash() {
		if err = oprot.WriteFieldBegin("base_schema_hash", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BaseSchemaHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TStorageMigrationReqV2) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNewSchemaHash_() {
		if err = oprot.WriteFieldBegin("new_schema_hash", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.NewSchemaHash_); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TStorageMigrationReqV2) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMigrationVersion() {
		if err = oprot.WriteFieldBegin("migration_version", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MigrationVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TStorageMigrationReqV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStorageMigrationReqV2(%+v)", *p)

}

func (p *TStorageMigrationReqV2) DeepEqual(ano *TStorageMigrationReqV2) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseTabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.NewTabletId_) {
		return false
	}
	if !p.Field3DeepEqual(ano.BaseSchemaHash) {
		return false
	}
	if !p.Field4DeepEqual(ano.NewSchemaHash_) {
		return false
	}
	if !p.Field5DeepEqual(ano.MigrationVersion) {
		return false
	}
	return true
}

func (p *TStorageMigrationReqV2) Field1DeepEqual(src *types.TTabletId) bool {

	if p.BaseTabletId == src {
		return true
	} else if p.BaseTabletId == nil || src == nil {
		return false
	}
	if *p.BaseTabletId != *src {
		return false
	}
	return true
}
func (p *TStorageMigrationReqV2) Field2DeepEqual(src *types.TTabletId) bool {

	if p.NewTabletId_ == src {
		return true
	} else if p.NewTabletId_ == nil || src == nil {
		return false
	}
	if *p.NewTabletId_ != *src {
		return false
	}
	return true
}
func (p *TStorageMigrationReqV2) Field3DeepEqual(src *types.TSchemaHash) bool {

	if p.BaseSchemaHash == src {
		return true
	} else if p.BaseSchemaHash == nil || src == nil {
		return false
	}
	if *p.BaseSchemaHash != *src {
		return false
	}
	return true
}
func (p *TStorageMigrationReqV2) Field4DeepEqual(src *types.TSchemaHash) bool {

	if p.NewSchemaHash_ == src {
		return true
	} else if p.NewSchemaHash_ == nil || src == nil {
		return false
	}
	if *p.NewSchemaHash_ != *src {
		return false
	}
	return true
}
func (p *TStorageMigrationReqV2) Field5DeepEqual(src *types.TVersion) bool {

	if p.MigrationVersion == src {
		return true
	} else if p.MigrationVersion == nil || src == nil {
		return false
	}
	if *p.MigrationVersion != *src {
		return false
	}
	return true
}

type TClusterInfo struct {
	User     string `thrift:"user,1,required" frugal:"1,required,string" json:"user"`
	Password string `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
}

func NewTClusterInfo() *TClusterInfo {
	return &TClusterInfo{}
}

func (p *TClusterInfo) InitDefault() {
}

func (p *TClusterInfo) GetUser() (v string) {
	return p.User
}

func (p *TClusterInfo) GetPassword() (v string) {
	return p.Password
}
func (p *TClusterInfo) SetUser(val string) {
	p.User = val
}
func (p *TClusterInfo) SetPassword(val string) {
	p.Password = val
}

var fieldIDToName_TClusterInfo = map[int16]string{
	1: "user",
	2: "password",
}

func (p *TClusterInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUser bool = false
	var issetPassword bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUser = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPassword = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUser {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPassword {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TClusterInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TClusterInfo[fieldId]))
}

func (p *TClusterInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.User = _field
	return nil
}
func (p *TClusterInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Password = _field
	return nil
}

func (p *TClusterInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TClusterInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TClusterInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.User); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TClusterInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Password); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TClusterInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TClusterInfo(%+v)", *p)

}

func (p *TClusterInfo) DeepEqual(ano *TClusterInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.User) {
		return false
	}
	if !p.Field2DeepEqual(ano.Password) {
		return false
	}
	return true
}

func (p *TClusterInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.User, src) != 0 {
		return false
	}
	return true
}
func (p *TClusterInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}

type TPushReq struct {
	TabletId         types.TTabletId                   `thrift:"tablet_id,1,required" frugal:"1,required,i64" json:"tablet_id"`
	SchemaHash       types.TSchemaHash                 `thrift:"schema_hash,2,required" frugal:"2,required,i32" json:"schema_hash"`
	Version          types.TVersion                    `thrift:"version,3,required" frugal:"3,required,i64" json:"version"`
	VersionHash      types.TVersionHash                `thrift:"version_hash,4,required" frugal:"4,required,i64" json:"version_hash"`
	Timeout          int64                             `thrift:"timeout,5,required" frugal:"5,required,i64" json:"timeout"`
	PushType         types.TPushType                   `thrift:"push_type,6,required" frugal:"6,required,TPushType" json:"push_type"`
	HttpFilePath     *string                           `thrift:"http_file_path,7,optional" frugal:"7,optional,string" json:"http_file_path,omitempty"`
	HttpFileSize     *int64                            `thrift:"http_file_size,8,optional" frugal:"8,optional,i64" json:"http_file_size,omitempty"`
	DeleteConditions []*palointernalservice.TCondition `thrift:"delete_conditions,9,optional" frugal:"9,optional,list<palointernalservice.TCondition>" json:"delete_conditions,omitempty"`
	NeedDecompress   *bool                             `thrift:"need_decompress,10,optional" frugal:"10,optional,bool" json:"need_decompress,omitempty"`
	TransactionId    *types.TTransactionId             `thrift:"transaction_id,11,optional" frugal:"11,optional,i64" json:"transaction_id,omitempty"`
	PartitionId      *types.TPartitionId               `thrift:"partition_id,12,optional" frugal:"12,optional,i64" json:"partition_id,omitempty"`
	IsSchemaChanging *bool                             `thrift:"is_schema_changing,13,optional" frugal:"13,optional,bool" json:"is_schema_changing,omitempty"`
	BrokerScanRange  *plannodes.TBrokerScanRange       `thrift:"broker_scan_range,14,optional" frugal:"14,optional,plannodes.TBrokerScanRange" json:"broker_scan_range,omitempty"`
	DescTbl          *descriptors.TDescriptorTable     `thrift:"desc_tbl,15,optional" frugal:"15,optional,descriptors.TDescriptorTable" json:"desc_tbl,omitempty"`
	ColumnsDesc      []*descriptors.TColumn            `thrift:"columns_desc,16,optional" frugal:"16,optional,list<descriptors.TColumn>" json:"columns_desc,omitempty"`
	StorageVaultId   *string                           `thrift:"storage_vault_id,17,optional" frugal:"17,optional,string" json:"storage_vault_id,omitempty"`
	SchemaVersion    *int32                            `thrift:"schema_version,18,optional" frugal:"18,optional,i32" json:"schema_version,omitempty"`
}

func NewTPushReq() *TPushReq {
	return &TPushReq{}
}

func (p *TPushReq) InitDefault() {
}

func (p *TPushReq) GetTabletId() (v types.TTabletId) {
	return p.TabletId
}

func (p *TPushReq) GetSchemaHash() (v types.TSchemaHash) {
	return p.SchemaHash
}

func (p *TPushReq) GetVersion() (v types.TVersion) {
	return p.Version
}

func (p *TPushReq) GetVersionHash() (v types.TVersionHash) {
	return p.VersionHash
}

func (p *TPushReq) GetTimeout() (v int64) {
	return p.Timeout
}

func (p *TPushReq) GetPushType() (v types.TPushType) {
	return p.PushType
}

var TPushReq_HttpFilePath_DEFAULT string

func (p *TPushReq) GetHttpFilePath() (v string) {
	if !p.IsSetHttpFilePath() {
		return TPushReq_HttpFilePath_DEFAULT
	}
	return *p.HttpFilePath
}

var TPushReq_HttpFileSize_DEFAULT int64

func (p *TPushReq) GetHttpFileSize() (v int64) {
	if !p.IsSetHttpFileSize() {
		return TPushReq_HttpFileSize_DEFAULT
	}
	return *p.HttpFileSize
}

var TPushReq_DeleteConditions_DEFAULT []*palointernalservice.TCondition

func (p *TPushReq) GetDeleteConditions() (v []*palointernalservice.TCondition) {
	if !p.IsSetDeleteConditions() {
		return TPushReq_DeleteConditions_DEFAULT
	}
	return p.DeleteConditions
}

var TPushReq_NeedDecompress_DEFAULT bool

func (p *TPushReq) GetNeedDecompress() (v bool) {
	if !p.IsSetNeedDecompress() {
		return TPushReq_NeedDecompress_DEFAULT
	}
	return *p.NeedDecompress
}

var TPushReq_TransactionId_DEFAULT types.TTransactionId

func (p *TPushReq) GetTransactionId() (v types.TTransactionId) {
	if !p.IsSetTransactionId() {
		return TPushReq_TransactionId_DEFAULT
	}
	return *p.TransactionId
}

var TPushReq_PartitionId_DEFAULT types.TPartitionId

func (p *TPushReq) GetPartitionId() (v types.TPartitionId) {
	if !p.IsSetPartitionId() {
		return TPushReq_PartitionId_DEFAULT
	}
	return *p.PartitionId
}

var TPushReq_IsSchemaChanging_DEFAULT bool

func (p *TPushReq) GetIsSchemaChanging() (v bool) {
	if !p.IsSetIsSchemaChanging() {
		return TPushReq_IsSchemaChanging_DEFAULT
	}
	return *p.IsSchemaChanging
}

var TPushReq_BrokerScanRange_DEFAULT *plannodes.TBrokerScanRange

func (p *TPushReq) GetBrokerScanRange() (v *plannodes.TBrokerScanRange) {
	if !p.IsSetBrokerScanRange() {
		return TPushReq_BrokerScanRange_DEFAULT
	}
	return p.BrokerScanRange
}

var TPushReq_DescTbl_DEFAULT *descriptors.TDescriptorTable

func (p *TPushReq) GetDescTbl() (v *descriptors.TDescriptorTable) {
	if !p.IsSetDescTbl() {
		return TPushReq_DescTbl_DEFAULT
	}
	return p.DescTbl
}

var TPushReq_ColumnsDesc_DEFAULT []*descriptors.TColumn

func (p *TPushReq) GetColumnsDesc() (v []*descriptors.TColumn) {
	if !p.IsSetColumnsDesc() {
		return TPushReq_ColumnsDesc_DEFAULT
	}
	return p.ColumnsDesc
}

var TPushReq_StorageVaultId_DEFAULT string

func (p *TPushReq) GetStorageVaultId() (v string) {
	if !p.IsSetStorageVaultId() {
		return TPushReq_StorageVaultId_DEFAULT
	}
	return *p.StorageVaultId
}

var TPushReq_SchemaVersion_DEFAULT int32

func (p *TPushReq) GetSchemaVersion() (v int32) {
	if !p.IsSetSchemaVersion() {
		return TPushReq_SchemaVersion_DEFAULT
	}
	return *p.SchemaVersion
}
func (p *TPushReq) SetTabletId(val types.TTabletId) {
	p.TabletId = val
}
func (p *TPushReq) SetSchemaHash(val types.TSchemaHash) {
	p.SchemaHash = val
}
func (p *TPushReq) SetVersion(val types.TVersion) {
	p.Version = val
}
func (p *TPushReq) SetVersionHash(val types.TVersionHash) {
	p.VersionHash = val
}
func (p *TPushReq) SetTimeout(val int64) {
	p.Timeout = val
}
func (p *TPushReq) SetPushType(val types.TPushType) {
	p.PushType = val
}
func (p *TPushReq) SetHttpFilePath(val *string) {
	p.HttpFilePath = val
}
func (p *TPushReq) SetHttpFileSize(val *int64) {
	p.HttpFileSize = val
}
func (p *TPushReq) SetDeleteConditions(val []*palointernalservice.TCondition) {
	p.DeleteConditions = val
}
func (p *TPushReq) SetNeedDecompress(val *bool) {
	p.NeedDecompress = val
}
func (p *TPushReq) SetTransactionId(val *types.TTransactionId) {
	p.TransactionId = val
}
func (p *TPushReq) SetPartitionId(val *types.TPartitionId) {
	p.PartitionId = val
}
func (p *TPushReq) SetIsSchemaChanging(val *bool) {
	p.IsSchemaChanging = val
}
func (p *TPushReq) SetBrokerScanRange(val *plannodes.TBrokerScanRange) {
	p.BrokerScanRange = val
}
func (p *TPushReq) SetDescTbl(val *descriptors.TDescriptorTable) {
	p.DescTbl = val
}
func (p *TPushReq) SetColumnsDesc(val []*descriptors.TColumn) {
	p.ColumnsDesc = val
}
func (p *TPushReq) SetStorageVaultId(val *string) {
	p.StorageVaultId = val
}
func (p *TPushReq) SetSchemaVersion(val *int32) {
	p.SchemaVersion = val
}

var fieldIDToName_TPushReq = map[int16]string{
	1:  "tablet_id",
	2:  "schema_hash",
	3:  "version",
	4:  "version_hash",
	5:  "timeout",
	6:  "push_type",
	7:  "http_file_path",
	8:  "http_file_size",
	9:  "delete_conditions",
	10: "need_decompress",
	11: "transaction_id",
	12: "partition_id",
	13: "is_schema_changing",
	14: "broker_scan_range",
	15: "desc_tbl",
	16: "columns_desc",
	17: "storage_vault_id",
	18: "schema_version",
}

func (p *TPushReq) IsSetHttpFilePath() bool {
	return p.HttpFilePath != nil
}

func (p *TPushReq) IsSetHttpFileSize() bool {
	return p.HttpFileSize != nil
}

func (p *TPushReq) IsSetDeleteConditions() bool {
	return p.DeleteConditions != nil
}

func (p *TPushReq) IsSetNeedDecompress() bool {
	return p.NeedDecompress != nil
}

func (p *TPushReq) IsSetTransactionId() bool {
	return p.TransactionId != nil
}

func (p *TPushReq) IsSetPartitionId() bool {
	return p.PartitionId != nil
}

func (p *TPushReq) IsSetIsSchemaChanging() bool {
	return p.IsSchemaChanging != nil
}

func (p *TPushReq) IsSetBrokerScanRange() bool {
	return p.BrokerScanRange != nil
}

func (p *TPushReq) IsSetDescTbl() bool {
	return p.DescTbl != nil
}

func (p *TPushReq) IsSetColumnsDesc() bool {
	return p.ColumnsDesc != nil
}

func (p *TPushReq) IsSetStorageVaultId() bool {
	return p.StorageVaultId != nil
}

func (p *TPushReq) IsSetSchemaVersion() bool {
	return p.SchemaVersion != nil
}

func (p *TPushReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false
	var issetVersion bool = false
	var issetVersionHash bool = false
	var issetTimeout bool = false
	var issetPushType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersionHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetTimeout = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetPushType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetVersionHash {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTimeout {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetPushType {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPushReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPushReq[fieldId]))
}

func (p *TPushReq) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TabletId = _field
	return nil
}
func (p *TPushReq) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SchemaHash = _field
	return nil
}
func (p *TPushReq) ReadField3(iprot thrift.TProtocol) error {

	var _field types.TVersion
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *TPushReq) ReadField4(iprot thrift.TProtocol) error {

	var _field types.TVersionHash
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VersionHash = _field
	return nil
}
func (p *TPushReq) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Timeout = _field
	return nil
}
func (p *TPushReq) ReadField6(iprot thrift.TProtocol) error {

	var _field types.TPushType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TPushType(v)
	}
	p.PushType = _field
	return nil
}
func (p *TPushReq) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HttpFilePath = _field
	return nil
}
func (p *TPushReq) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HttpFileSize = _field
	return nil
}
func (p *TPushReq) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*palointernalservice.TCondition, 0, size)
	values := make([]palointernalservice.TCondition, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DeleteConditions = _field
	return nil
}
func (p *TPushReq) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NeedDecompress = _field
	return nil
}
func (p *TPushReq) ReadField11(iprot thrift.TProtocol) error {

	var _field *types.TTransactionId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TransactionId = _field
	return nil
}
func (p *TPushReq) ReadField12(iprot thrift.TProtocol) error {

	var _field *types.TPartitionId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PartitionId = _field
	return nil
}
func (p *TPushReq) ReadField13(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsSchemaChanging = _field
	return nil
}
func (p *TPushReq) ReadField14(iprot thrift.TProtocol) error {
	_field := plannodes.NewTBrokerScanRange()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BrokerScanRange = _field
	return nil
}
func (p *TPushReq) ReadField15(iprot thrift.TProtocol) error {
	_field := descriptors.NewTDescriptorTable()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DescTbl = _field
	return nil
}
func (p *TPushReq) ReadField16(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*descriptors.TColumn, 0, size)
	values := make([]descriptors.TColumn, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnsDesc = _field
	return nil
}
func (p *TPushReq) ReadField17(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StorageVaultId = _field
	return nil
}
func (p *TPushReq) ReadField18(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SchemaVersion = _field
	return nil
}

func (p *TPushReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPushReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPushReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPushReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schema_hash", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SchemaHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPushReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPushReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version_hash", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VersionHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TPushReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("timeout", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Timeout); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TPushReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("push_type", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.PushType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TPushReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetHttpFilePath() {
		if err = oprot.WriteFieldBegin("http_file_path", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.HttpFilePath); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TPushReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetHttpFileSize() {
		if err = oprot.WriteFieldBegin("http_file_size", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.HttpFileSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TPushReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleteConditions() {
		if err = oprot.WriteFieldBegin("delete_conditions", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DeleteConditions)); err != nil {
			return err
		}
		for _, v := range p.DeleteConditions {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TPushReq) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetNeedDecompress() {
		if err = oprot.WriteFieldBegin("need_decompress", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.NeedDecompress); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TPushReq) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransactionId() {
		if err = oprot.WriteFieldBegin("transaction_id", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TransactionId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TPushReq) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionId() {
		if err = oprot.WriteFieldBegin("partition_id", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PartitionId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TPushReq) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsSchemaChanging() {
		if err = oprot.WriteFieldBegin("is_schema_changing", thrift.BOOL, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsSchemaChanging); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TPushReq) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetBrokerScanRange() {
		if err = oprot.WriteFieldBegin("broker_scan_range", thrift.STRUCT, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BrokerScanRange.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TPushReq) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescTbl() {
		if err = oprot.WriteFieldBegin("desc_tbl", thrift.STRUCT, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DescTbl.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TPushReq) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnsDesc() {
		if err = oprot.WriteFieldBegin("columns_desc", thrift.LIST, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnsDesc)); err != nil {
			return err
		}
		for _, v := range p.ColumnsDesc {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TPushReq) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageVaultId() {
		if err = oprot.WriteFieldBegin("storage_vault_id", thrift.STRING, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StorageVaultId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TPushReq) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaVersion() {
		if err = oprot.WriteFieldBegin("schema_version", thrift.I32, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SchemaVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TPushReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPushReq(%+v)", *p)

}

func (p *TPushReq) DeepEqual(ano *TPushReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SchemaHash) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.VersionHash) {
		return false
	}
	if !p.Field5DeepEqual(ano.Timeout) {
		return false
	}
	if !p.Field6DeepEqual(ano.PushType) {
		return false
	}
	if !p.Field7DeepEqual(ano.HttpFilePath) {
		return false
	}
	if !p.Field8DeepEqual(ano.HttpFileSize) {
		return false
	}
	if !p.Field9DeepEqual(ano.DeleteConditions) {
		return false
	}
	if !p.Field10DeepEqual(ano.NeedDecompress) {
		return false
	}
	if !p.Field11DeepEqual(ano.TransactionId) {
		return false
	}
	if !p.Field12DeepEqual(ano.PartitionId) {
		return false
	}
	if !p.Field13DeepEqual(ano.IsSchemaChanging) {
		return false
	}
	if !p.Field14DeepEqual(ano.BrokerScanRange) {
		return false
	}
	if !p.Field15DeepEqual(ano.DescTbl) {
		return false
	}
	if !p.Field16DeepEqual(ano.ColumnsDesc) {
		return false
	}
	if !p.Field17DeepEqual(ano.StorageVaultId) {
		return false
	}
	if !p.Field18DeepEqual(ano.SchemaVersion) {
		return false
	}
	return true
}

func (p *TPushReq) Field1DeepEqual(src types.TTabletId) bool {

	if p.TabletId != src {
		return false
	}
	return true
}
func (p *TPushReq) Field2DeepEqual(src types.TSchemaHash) bool {

	if p.SchemaHash != src {
		return false
	}
	return true
}
func (p *TPushReq) Field3DeepEqual(src types.TVersion) bool {

	if p.Version != src {
		return false
	}
	return true
}
func (p *TPushReq) Field4DeepEqual(src types.TVersionHash) bool {

	if p.VersionHash != src {
		return false
	}
	return true
}
func (p *TPushReq) Field5DeepEqual(src int64) bool {

	if p.Timeout != src {
		return false
	}
	return true
}
func (p *TPushReq) Field6DeepEqual(src types.TPushType) bool {

	if p.PushType != src {
		return false
	}
	return true
}
func (p *TPushReq) Field7DeepEqual(src *string) bool {

	if p.HttpFilePath == src {
		return true
	} else if p.HttpFilePath == nil || src == nil {
		return false
	}
	if strings.Compare(*p.HttpFilePath, *src) != 0 {
		return false
	}
	return true
}
func (p *TPushReq) Field8DeepEqual(src *int64) bool {

	if p.HttpFileSize == src {
		return true
	} else if p.HttpFileSize == nil || src == nil {
		return false
	}
	if *p.HttpFileSize != *src {
		return false
	}
	return true
}
func (p *TPushReq) Field9DeepEqual(src []*palointernalservice.TCondition) bool {

	if len(p.DeleteConditions) != len(src) {
		return false
	}
	for i, v := range p.DeleteConditions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPushReq) Field10DeepEqual(src *bool) bool {

	if p.NeedDecompress == src {
		return true
	} else if p.NeedDecompress == nil || src == nil {
		return false
	}
	if *p.NeedDecompress != *src {
		return false
	}
	return true
}
func (p *TPushReq) Field11DeepEqual(src *types.TTransactionId) bool {

	if p.TransactionId == src {
		return true
	} else if p.TransactionId == nil || src == nil {
		return false
	}
	if *p.TransactionId != *src {
		return false
	}
	return true
}
func (p *TPushReq) Field12DeepEqual(src *types.TPartitionId) bool {

	if p.PartitionId == src {
		return true
	} else if p.PartitionId == nil || src == nil {
		return false
	}
	if *p.PartitionId != *src {
		return false
	}
	return true
}
func (p *TPushReq) Field13DeepEqual(src *bool) bool {

	if p.IsSchemaChanging == src {
		return true
	} else if p.IsSchemaChanging == nil || src == nil {
		return false
	}
	if *p.IsSchemaChanging != *src {
		return false
	}
	return true
}
func (p *TPushReq) Field14DeepEqual(src *plannodes.TBrokerScanRange) bool {

	if !p.BrokerScanRange.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPushReq) Field15DeepEqual(src *descriptors.TDescriptorTable) bool {

	if !p.DescTbl.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPushReq) Field16DeepEqual(src []*descriptors.TColumn) bool {

	if len(p.ColumnsDesc) != len(src) {
		return false
	}
	for i, v := range p.ColumnsDesc {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPushReq) Field17DeepEqual(src *string) bool {

	if p.StorageVaultId == src {
		return true
	} else if p.StorageVaultId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StorageVaultId, *src) != 0 {
		return false
	}
	return true
}
func (p *TPushReq) Field18DeepEqual(src *int32) bool {

	if p.SchemaVersion == src {
		return true
	} else if p.SchemaVersion == nil || src == nil {
		return false
	}
	if *p.SchemaVersion != *src {
		return false
	}
	return true
}

type TCloneReq struct {
	TabletId             types.TTabletId       `thrift:"tablet_id,1,required" frugal:"1,required,i64" json:"tablet_id"`
	SchemaHash           types.TSchemaHash     `thrift:"schema_hash,2,required" frugal:"2,required,i32" json:"schema_hash"`
	SrcBackends          []*types.TBackend     `thrift:"src_backends,3,required" frugal:"3,required,list<types.TBackend>" json:"src_backends"`
	StorageMedium        *types.TStorageMedium `thrift:"storage_medium,4,optional" frugal:"4,optional,TStorageMedium" json:"storage_medium,omitempty"`
	Version              *types.TVersion       `thrift:"version,5,optional" frugal:"5,optional,i64" json:"version,omitempty"`
	CommittedVersionHash *types.TVersionHash   `thrift:"committed_version_hash,6,optional" frugal:"6,optional,i64" json:"committed_version_hash,omitempty"`
	TaskVersion          *int32                `thrift:"task_version,7,optional" frugal:"7,optional,i32" json:"task_version,omitempty"`
	SrcPathHash          *int64                `thrift:"src_path_hash,8,optional" frugal:"8,optional,i64" json:"src_path_hash,omitempty"`
	DestPathHash         *int64                `thrift:"dest_path_hash,9,optional" frugal:"9,optional,i64" json:"dest_path_hash,omitempty"`
	TimeoutS             *int32                `thrift:"timeout_s,10,optional" frugal:"10,optional,i32" json:"timeout_s,omitempty"`
	ReplicaId            types.TReplicaId      `thrift:"replica_id,11,optional" frugal:"11,optional,i64" json:"replica_id,omitempty"`
	PartitionId          *int64                `thrift:"partition_id,12,optional" frugal:"12,optional,i64" json:"partition_id,omitempty"`
	TableId              int64                 `thrift:"table_id,13,optional" frugal:"13,optional,i64" json:"table_id,omitempty"`
}

func NewTCloneReq() *TCloneReq {
	return &TCloneReq{

		ReplicaId: 0,
		TableId:   -1,
	}
}

func (p *TCloneReq) InitDefault() {
	p.ReplicaId = 0
	p.TableId = -1
}

func (p *TCloneReq) GetTabletId() (v types.TTabletId) {
	return p.TabletId
}

func (p *TCloneReq) GetSchemaHash() (v types.TSchemaHash) {
	return p.SchemaHash
}

func (p *TCloneReq) GetSrcBackends() (v []*types.TBackend) {
	return p.SrcBackends
}

var TCloneReq_StorageMedium_DEFAULT types.TStorageMedium

func (p *TCloneReq) GetStorageMedium() (v types.TStorageMedium) {
	if !p.IsSetStorageMedium() {
		return TCloneReq_StorageMedium_DEFAULT
	}
	return *p.StorageMedium
}

var TCloneReq_Version_DEFAULT types.TVersion

func (p *TCloneReq) GetVersion() (v types.TVersion) {
	if !p.IsSetVersion() {
		return TCloneReq_Version_DEFAULT
	}
	return *p.Version
}

var TCloneReq_CommittedVersionHash_DEFAULT types.TVersionHash

func (p *TCloneReq) GetCommittedVersionHash() (v types.TVersionHash) {
	if !p.IsSetCommittedVersionHash() {
		return TCloneReq_CommittedVersionHash_DEFAULT
	}
	return *p.CommittedVersionHash
}

var TCloneReq_TaskVersion_DEFAULT int32

func (p *TCloneReq) GetTaskVersion() (v int32) {
	if !p.IsSetTaskVersion() {
		return TCloneReq_TaskVersion_DEFAULT
	}
	return *p.TaskVersion
}

var TCloneReq_SrcPathHash_DEFAULT int64

func (p *TCloneReq) GetSrcPathHash() (v int64) {
	if !p.IsSetSrcPathHash() {
		return TCloneReq_SrcPathHash_DEFAULT
	}
	return *p.SrcPathHash
}

var TCloneReq_DestPathHash_DEFAULT int64

func (p *TCloneReq) GetDestPathHash() (v int64) {
	if !p.IsSetDestPathHash() {
		return TCloneReq_DestPathHash_DEFAULT
	}
	return *p.DestPathHash
}

var TCloneReq_TimeoutS_DEFAULT int32

func (p *TCloneReq) GetTimeoutS() (v int32) {
	if !p.IsSetTimeoutS() {
		return TCloneReq_TimeoutS_DEFAULT
	}
	return *p.TimeoutS
}

var TCloneReq_ReplicaId_DEFAULT types.TReplicaId = 0

func (p *TCloneReq) GetReplicaId() (v types.TReplicaId) {
	if !p.IsSetReplicaId() {
		return TCloneReq_ReplicaId_DEFAULT
	}
	return p.ReplicaId
}

var TCloneReq_PartitionId_DEFAULT int64

func (p *TCloneReq) GetPartitionId() (v int64) {
	if !p.IsSetPartitionId() {
		return TCloneReq_PartitionId_DEFAULT
	}
	return *p.PartitionId
}

var TCloneReq_TableId_DEFAULT int64 = -1

func (p *TCloneReq) GetTableId() (v int64) {
	if !p.IsSetTableId() {
		return TCloneReq_TableId_DEFAULT
	}
	return p.TableId
}
func (p *TCloneReq) SetTabletId(val types.TTabletId) {
	p.TabletId = val
}
func (p *TCloneReq) SetSchemaHash(val types.TSchemaHash) {
	p.SchemaHash = val
}
func (p *TCloneReq) SetSrcBackends(val []*types.TBackend) {
	p.SrcBackends = val
}
func (p *TCloneReq) SetStorageMedium(val *types.TStorageMedium) {
	p.StorageMedium = val
}
func (p *TCloneReq) SetVersion(val *types.TVersion) {
	p.Version = val
}
func (p *TCloneReq) SetCommittedVersionHash(val *types.TVersionHash) {
	p.CommittedVersionHash = val
}
func (p *TCloneReq) SetTaskVersion(val *int32) {
	p.TaskVersion = val
}
func (p *TCloneReq) SetSrcPathHash(val *int64) {
	p.SrcPathHash = val
}
func (p *TCloneReq) SetDestPathHash(val *int64) {
	p.DestPathHash = val
}
func (p *TCloneReq) SetTimeoutS(val *int32) {
	p.TimeoutS = val
}
func (p *TCloneReq) SetReplicaId(val types.TReplicaId) {
	p.ReplicaId = val
}
func (p *TCloneReq) SetPartitionId(val *int64) {
	p.PartitionId = val
}
func (p *TCloneReq) SetTableId(val int64) {
	p.TableId = val
}

var fieldIDToName_TCloneReq = map[int16]string{
	1:  "tablet_id",
	2:  "schema_hash",
	3:  "src_backends",
	4:  "storage_medium",
	5:  "version",
	6:  "committed_version_hash",
	7:  "task_version",
	8:  "src_path_hash",
	9:  "dest_path_hash",
	10: "timeout_s",
	11: "replica_id",
	12: "partition_id",
	13: "table_id",
}

func (p *TCloneReq) IsSetStorageMedium() bool {
	return p.StorageMedium != nil
}

func (p *TCloneReq) IsSetVersion() bool {
	return p.Version != nil
}

func (p *TCloneReq) IsSetCommittedVersionHash() bool {
	return p.CommittedVersionHash != nil
}

func (p *TCloneReq) IsSetTaskVersion() bool {
	return p.TaskVersion != nil
}

func (p *TCloneReq) IsSetSrcPathHash() bool {
	return p.SrcPathHash != nil
}

func (p *TCloneReq) IsSetDestPathHash() bool {
	return p.DestPathHash != nil
}

func (p *TCloneReq) IsSetTimeoutS() bool {
	return p.TimeoutS != nil
}

func (p *TCloneReq) IsSetReplicaId() bool {
	return p.ReplicaId != TCloneReq_ReplicaId_DEFAULT
}

func (p *TCloneReq) IsSetPartitionId() bool {
	return p.PartitionId != nil
}

func (p *TCloneReq) IsSetTableId() bool {
	return p.TableId != TCloneReq_TableId_DEFAULT
}

func (p *TCloneReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false
	var issetSrcBackends bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSrcBackends = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSrcBackends {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCloneReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCloneReq[fieldId]))
}

func (p *TCloneReq) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TabletId = _field
	return nil
}
func (p *TCloneReq) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SchemaHash = _field
	return nil
}
func (p *TCloneReq) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*types.TBackend, 0, size)
	values := make([]types.TBackend, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SrcBackends = _field
	return nil
}
func (p *TCloneReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *types.TStorageMedium
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TStorageMedium(v)
		_field = &tmp
	}
	p.StorageMedium = _field
	return nil
}
func (p *TCloneReq) ReadField5(iprot thrift.TProtocol) error {

	var _field *types.TVersion
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *TCloneReq) ReadField6(iprot thrift.TProtocol) error {

	var _field *types.TVersionHash
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CommittedVersionHash = _field
	return nil
}
func (p *TCloneReq) ReadField7(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TaskVersion = _field
	return nil
}
func (p *TCloneReq) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SrcPathHash = _field
	return nil
}
func (p *TCloneReq) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DestPathHash = _field
	return nil
}
func (p *TCloneReq) ReadField10(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TimeoutS = _field
	return nil
}
func (p *TCloneReq) ReadField11(iprot thrift.TProtocol) error {

	var _field types.TReplicaId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ReplicaId = _field
	return nil
}
func (p *TCloneReq) ReadField12(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PartitionId = _field
	return nil
}
func (p *TCloneReq) ReadField13(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TableId = _field
	return nil
}

func (p *TCloneReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCloneReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCloneReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCloneReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schema_hash", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SchemaHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCloneReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("src_backends", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SrcBackends)); err != nil {
		return err
	}
	for _, v := range p.SrcBackends {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TCloneReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageMedium() {
		if err = oprot.WriteFieldBegin("storage_medium", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.StorageMedium)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TCloneReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TCloneReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommittedVersionHash() {
		if err = oprot.WriteFieldBegin("committed_version_hash", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CommittedVersionHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TCloneReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskVersion() {
		if err = oprot.WriteFieldBegin("task_version", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TaskVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TCloneReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetSrcPathHash() {
		if err = oprot.WriteFieldBegin("src_path_hash", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SrcPathHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TCloneReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestPathHash() {
		if err = oprot.WriteFieldBegin("dest_path_hash", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DestPathHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TCloneReq) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeoutS() {
		if err = oprot.WriteFieldBegin("timeout_s", thrift.I32, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TimeoutS); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TCloneReq) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicaId() {
		if err = oprot.WriteFieldBegin("replica_id", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ReplicaId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TCloneReq) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionId() {
		if err = oprot.WriteFieldBegin("partition_id", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PartitionId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TCloneReq) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err = oprot.WriteFieldBegin("table_id", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.TableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TCloneReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCloneReq(%+v)", *p)

}

func (p *TCloneReq) DeepEqual(ano *TCloneReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SchemaHash) {
		return false
	}
	if !p.Field3DeepEqual(ano.SrcBackends) {
		return false
	}
	if !p.Field4DeepEqual(ano.StorageMedium) {
		return false
	}
	if !p.Field5DeepEqual(ano.Version) {
		return false
	}
	if !p.Field6DeepEqual(ano.CommittedVersionHash) {
		return false
	}
	if !p.Field7DeepEqual(ano.TaskVersion) {
		return false
	}
	if !p.Field8DeepEqual(ano.SrcPathHash) {
		return false
	}
	if !p.Field9DeepEqual(ano.DestPathHash) {
		return false
	}
	if !p.Field10DeepEqual(ano.TimeoutS) {
		return false
	}
	if !p.Field11DeepEqual(ano.ReplicaId) {
		return false
	}
	if !p.Field12DeepEqual(ano.PartitionId) {
		return false
	}
	if !p.Field13DeepEqual(ano.TableId) {
		return false
	}
	return true
}

func (p *TCloneReq) Field1DeepEqual(src types.TTabletId) bool {

	if p.TabletId != src {
		return false
	}
	return true
}
func (p *TCloneReq) Field2DeepEqual(src types.TSchemaHash) bool {

	if p.SchemaHash != src {
		return false
	}
	return true
}
func (p *TCloneReq) Field3DeepEqual(src []*types.TBackend) bool {

	if len(p.SrcBackends) != len(src) {
		return false
	}
	for i, v := range p.SrcBackends {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TCloneReq) Field4DeepEqual(src *types.TStorageMedium) bool {

	if p.StorageMedium == src {
		return true
	} else if p.StorageMedium == nil || src == nil {
		return false
	}
	if *p.StorageMedium != *src {
		return false
	}
	return true
}
func (p *TCloneReq) Field5DeepEqual(src *types.TVersion) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if *p.Version != *src {
		return false
	}
	return true
}
func (p *TCloneReq) Field6DeepEqual(src *types.TVersionHash) bool {

	if p.CommittedVersionHash == src {
		return true
	} else if p.CommittedVersionHash == nil || src == nil {
		return false
	}
	if *p.CommittedVersionHash != *src {
		return false
	}
	return true
}
func (p *TCloneReq) Field7DeepEqual(src *int32) bool {

	if p.TaskVersion == src {
		return true
	} else if p.TaskVersion == nil || src == nil {
		return false
	}
	if *p.TaskVersion != *src {
		return false
	}
	return true
}
func (p *TCloneReq) Field8DeepEqual(src *int64) bool {

	if p.SrcPathHash == src {
		return true
	} else if p.SrcPathHash == nil || src == nil {
		return false
	}
	if *p.SrcPathHash != *src {
		return false
	}
	return true
}
func (p *TCloneReq) Field9DeepEqual(src *int64) bool {

	if p.DestPathHash == src {
		return true
	} else if p.DestPathHash == nil || src == nil {
		return false
	}
	if *p.DestPathHash != *src {
		return false
	}
	return true
}
func (p *TCloneReq) Field10DeepEqual(src *int32) bool {

	if p.TimeoutS == src {
		return true
	} else if p.TimeoutS == nil || src == nil {
		return false
	}
	if *p.TimeoutS != *src {
		return false
	}
	return true
}
func (p *TCloneReq) Field11DeepEqual(src types.TReplicaId) bool {

	if p.ReplicaId != src {
		return false
	}
	return true
}
func (p *TCloneReq) Field12DeepEqual(src *int64) bool {

	if p.PartitionId == src {
		return true
	} else if p.PartitionId == nil || src == nil {
		return false
	}
	if *p.PartitionId != *src {
		return false
	}
	return true
}
func (p *TCloneReq) Field13DeepEqual(src int64) bool {

	if p.TableId != src {
		return false
	}
	return true
}

type TCompactionReq struct {
	TabletId   *types.TTabletId   `thrift:"tablet_id,1,optional" frugal:"1,optional,i64" json:"tablet_id,omitempty"`
	SchemaHash *types.TSchemaHash `thrift:"schema_hash,2,optional" frugal:"2,optional,i32" json:"schema_hash,omitempty"`
	Type       *string            `thrift:"type,3,optional" frugal:"3,optional,string" json:"type,omitempty"`
}

func NewTCompactionReq() *TCompactionReq {
	return &TCompactionReq{}
}

func (p *TCompactionReq) InitDefault() {
}

var TCompactionReq_TabletId_DEFAULT types.TTabletId

func (p *TCompactionReq) GetTabletId() (v types.TTabletId) {
	if !p.IsSetTabletId() {
		return TCompactionReq_TabletId_DEFAULT
	}
	return *p.TabletId
}

var TCompactionReq_SchemaHash_DEFAULT types.TSchemaHash

func (p *TCompactionReq) GetSchemaHash() (v types.TSchemaHash) {
	if !p.IsSetSchemaHash() {
		return TCompactionReq_SchemaHash_DEFAULT
	}
	return *p.SchemaHash
}

var TCompactionReq_Type_DEFAULT string

func (p *TCompactionReq) GetType() (v string) {
	if !p.IsSetType() {
		return TCompactionReq_Type_DEFAULT
	}
	return *p.Type
}
func (p *TCompactionReq) SetTabletId(val *types.TTabletId) {
	p.TabletId = val
}
func (p *TCompactionReq) SetSchemaHash(val *types.TSchemaHash) {
	p.SchemaHash = val
}
func (p *TCompactionReq) SetType(val *string) {
	p.Type = val
}

var fieldIDToName_TCompactionReq = map[int16]string{
	1: "tablet_id",
	2: "schema_hash",
	3: "type",
}

func (p *TCompactionReq) IsSetTabletId() bool {
	return p.TabletId != nil
}

func (p *TCompactionReq) IsSetSchemaHash() bool {
	return p.SchemaHash != nil
}

func (p *TCompactionReq) IsSetType() bool {
	return p.Type != nil
}

func (p *TCompactionReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCompactionReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TCompactionReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TabletId = _field
	return nil
}
func (p *TCompactionReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SchemaHash = _field
	return nil
}
func (p *TCompactionReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}

func (p *TCompactionReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCompactionReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCompactionReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletId() {
		if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TabletId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCompactionReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaHash() {
		if err = oprot.WriteFieldBegin("schema_hash", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SchemaHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCompactionReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TCompactionReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCompactionReq(%+v)", *p)

}

func (p *TCompactionReq) DeepEqual(ano *TCompactionReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SchemaHash) {
		return false
	}
	if !p.Field3DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *TCompactionReq) Field1DeepEqual(src *types.TTabletId) bool {

	if p.TabletId == src {
		return true
	} else if p.TabletId == nil || src == nil {
		return false
	}
	if *p.TabletId != *src {
		return false
	}
	return true
}
func (p *TCompactionReq) Field2DeepEqual(src *types.TSchemaHash) bool {

	if p.SchemaHash == src {
		return true
	} else if p.SchemaHash == nil || src == nil {
		return false
	}
	if *p.SchemaHash != *src {
		return false
	}
	return true
}
func (p *TCompactionReq) Field3DeepEqual(src *string) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}

type TStorageMediumMigrateReq struct {
	TabletId      types.TTabletId      `thrift:"tablet_id,1,required" frugal:"1,required,i64" json:"tablet_id"`
	SchemaHash    types.TSchemaHash    `thrift:"schema_hash,2,required" frugal:"2,required,i32" json:"schema_hash"`
	StorageMedium types.TStorageMedium `thrift:"storage_medium,3,required" frugal:"3,required,TStorageMedium" json:"storage_medium"`
	DataDir       *string              `thrift:"data_dir,4,optional" frugal:"4,optional,string" json:"data_dir,omitempty"`
}

func NewTStorageMediumMigrateReq() *TStorageMediumMigrateReq {
	return &TStorageMediumMigrateReq{}
}

func (p *TStorageMediumMigrateReq) InitDefault() {
}

func (p *TStorageMediumMigrateReq) GetTabletId() (v types.TTabletId) {
	return p.TabletId
}

func (p *TStorageMediumMigrateReq) GetSchemaHash() (v types.TSchemaHash) {
	return p.SchemaHash
}

func (p *TStorageMediumMigrateReq) GetStorageMedium() (v types.TStorageMedium) {
	return p.StorageMedium
}

var TStorageMediumMigrateReq_DataDir_DEFAULT string

func (p *TStorageMediumMigrateReq) GetDataDir() (v string) {
	if !p.IsSetDataDir() {
		return TStorageMediumMigrateReq_DataDir_DEFAULT
	}
	return *p.DataDir
}
func (p *TStorageMediumMigrateReq) SetTabletId(val types.TTabletId) {
	p.TabletId = val
}
func (p *TStorageMediumMigrateReq) SetSchemaHash(val types.TSchemaHash) {
	p.SchemaHash = val
}
func (p *TStorageMediumMigrateReq) SetStorageMedium(val types.TStorageMedium) {
	p.StorageMedium = val
}
func (p *TStorageMediumMigrateReq) SetDataDir(val *string) {
	p.DataDir = val
}

var fieldIDToName_TStorageMediumMigrateReq = map[int16]string{
	1: "tablet_id",
	2: "schema_hash",
	3: "storage_medium",
	4: "data_dir",
}

func (p *TStorageMediumMigrateReq) IsSetDataDir() bool {
	return p.DataDir != nil
}

func (p *TStorageMediumMigrateReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false
	var issetStorageMedium bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetStorageMedium = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetStorageMedium {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TStorageMediumMigrateReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TStorageMediumMigrateReq[fieldId]))
}

func (p *TStorageMediumMigrateReq) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TabletId = _field
	return nil
}
func (p *TStorageMediumMigrateReq) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SchemaHash = _field
	return nil
}
func (p *TStorageMediumMigrateReq) ReadField3(iprot thrift.TProtocol) error {

	var _field types.TStorageMedium
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TStorageMedium(v)
	}
	p.StorageMedium = _field
	return nil
}
func (p *TStorageMediumMigrateReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DataDir = _field
	return nil
}

func (p *TStorageMediumMigrateReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TStorageMediumMigrateReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TStorageMediumMigrateReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TStorageMediumMigrateReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schema_hash", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SchemaHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TStorageMediumMigrateReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("storage_medium", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.StorageMedium)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TStorageMediumMigrateReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataDir() {
		if err = oprot.WriteFieldBegin("data_dir", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DataDir); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TStorageMediumMigrateReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStorageMediumMigrateReq(%+v)", *p)

}

func (p *TStorageMediumMigrateReq) DeepEqual(ano *TStorageMediumMigrateReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SchemaHash) {
		return false
	}
	if !p.Field3DeepEqual(ano.StorageMedium) {
		return false
	}
	if !p.Field4DeepEqual(ano.DataDir) {
		return false
	}
	return true
}

func (p *TStorageMediumMigrateReq) Field1DeepEqual(src types.TTabletId) bool {

	if p.TabletId != src {
		return false
	}
	return true
}
func (p *TStorageMediumMigrateReq) Field2DeepEqual(src types.TSchemaHash) bool {

	if p.SchemaHash != src {
		return false
	}
	return true
}
func (p *TStorageMediumMigrateReq) Field3DeepEqual(src types.TStorageMedium) bool {

	if p.StorageMedium != src {
		return false
	}
	return true
}
func (p *TStorageMediumMigrateReq) Field4DeepEqual(src *string) bool {

	if p.DataDir == src {
		return true
	} else if p.DataDir == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DataDir, *src) != 0 {
		return false
	}
	return true
}

type TCancelDeleteDataReq struct {
	TabletId    types.TTabletId    `thrift:"tablet_id,1,required" frugal:"1,required,i64" json:"tablet_id"`
	SchemaHash  types.TSchemaHash  `thrift:"schema_hash,2,required" frugal:"2,required,i32" json:"schema_hash"`
	Version     types.TVersion     `thrift:"version,3,required" frugal:"3,required,i64" json:"version"`
	VersionHash types.TVersionHash `thrift:"version_hash,4,required" frugal:"4,required,i64" json:"version_hash"`
}

func NewTCancelDeleteDataReq() *TCancelDeleteDataReq {
	return &TCancelDeleteDataReq{}
}

func (p *TCancelDeleteDataReq) InitDefault() {
}

func (p *TCancelDeleteDataReq) GetTabletId() (v types.TTabletId) {
	return p.TabletId
}

func (p *TCancelDeleteDataReq) GetSchemaHash() (v types.TSchemaHash) {
	return p.SchemaHash
}

func (p *TCancelDeleteDataReq) GetVersion() (v types.TVersion) {
	return p.Version
}

func (p *TCancelDeleteDataReq) GetVersionHash() (v types.TVersionHash) {
	return p.VersionHash
}
func (p *TCancelDeleteDataReq) SetTabletId(val types.TTabletId) {
	p.TabletId = val
}
func (p *TCancelDeleteDataReq) SetSchemaHash(val types.TSchemaHash) {
	p.SchemaHash = val
}
func (p *TCancelDeleteDataReq) SetVersion(val types.TVersion) {
	p.Version = val
}
func (p *TCancelDeleteDataReq) SetVersionHash(val types.TVersionHash) {
	p.VersionHash = val
}

var fieldIDToName_TCancelDeleteDataReq = map[int16]string{
	1: "tablet_id",
	2: "schema_hash",
	3: "version",
	4: "version_hash",
}

func (p *TCancelDeleteDataReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false
	var issetVersion bool = false
	var issetVersionHash bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersionHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetVersionHash {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCancelDeleteDataReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCancelDeleteDataReq[fieldId]))
}

func (p *TCancelDeleteDataReq) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TabletId = _field
	return nil
}
func (p *TCancelDeleteDataReq) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SchemaHash = _field
	return nil
}
func (p *TCancelDeleteDataReq) ReadField3(iprot thrift.TProtocol) error {

	var _field types.TVersion
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *TCancelDeleteDataReq) ReadField4(iprot thrift.TProtocol) error {

	var _field types.TVersionHash
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VersionHash = _field
	return nil
}

func (p *TCancelDeleteDataReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCancelDeleteDataReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCancelDeleteDataReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCancelDeleteDataReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schema_hash", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SchemaHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCancelDeleteDataReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TCancelDeleteDataReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version_hash", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VersionHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TCancelDeleteDataReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCancelDeleteDataReq(%+v)", *p)

}

func (p *TCancelDeleteDataReq) DeepEqual(ano *TCancelDeleteDataReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SchemaHash) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.VersionHash) {
		return false
	}
	return true
}

func (p *TCancelDeleteDataReq) Field1DeepEqual(src types.TTabletId) bool {

	if p.TabletId != src {
		return false
	}
	return true
}
func (p *TCancelDeleteDataReq) Field2DeepEqual(src types.TSchemaHash) bool {

	if p.SchemaHash != src {
		return false
	}
	return true
}
func (p *TCancelDeleteDataReq) Field3DeepEqual(src types.TVersion) bool {

	if p.Version != src {
		return false
	}
	return true
}
func (p *TCancelDeleteDataReq) Field4DeepEqual(src types.TVersionHash) bool {

	if p.VersionHash != src {
		return false
	}
	return true
}

type TCheckConsistencyReq struct {
	TabletId    types.TTabletId    `thrift:"tablet_id,1,required" frugal:"1,required,i64" json:"tablet_id"`
	SchemaHash  types.TSchemaHash  `thrift:"schema_hash,2,required" frugal:"2,required,i32" json:"schema_hash"`
	Version     types.TVersion     `thrift:"version,3,required" frugal:"3,required,i64" json:"version"`
	VersionHash types.TVersionHash `thrift:"version_hash,4,required" frugal:"4,required,i64" json:"version_hash"`
}

func NewTCheckConsistencyReq() *TCheckConsistencyReq {
	return &TCheckConsistencyReq{}
}

func (p *TCheckConsistencyReq) InitDefault() {
}

func (p *TCheckConsistencyReq) GetTabletId() (v types.TTabletId) {
	return p.TabletId
}

func (p *TCheckConsistencyReq) GetSchemaHash() (v types.TSchemaHash) {
	return p.SchemaHash
}

func (p *TCheckConsistencyReq) GetVersion() (v types.TVersion) {
	return p.Version
}

func (p *TCheckConsistencyReq) GetVersionHash() (v types.TVersionHash) {
	return p.VersionHash
}
func (p *TCheckConsistencyReq) SetTabletId(val types.TTabletId) {
	p.TabletId = val
}
func (p *TCheckConsistencyReq) SetSchemaHash(val types.TSchemaHash) {
	p.SchemaHash = val
}
func (p *TCheckConsistencyReq) SetVersion(val types.TVersion) {
	p.Version = val
}
func (p *TCheckConsistencyReq) SetVersionHash(val types.TVersionHash) {
	p.VersionHash = val
}

var fieldIDToName_TCheckConsistencyReq = map[int16]string{
	1: "tablet_id",
	2: "schema_hash",
	3: "version",
	4: "version_hash",
}

func (p *TCheckConsistencyReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false
	var issetVersion bool = false
	var issetVersionHash bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersionHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetVersionHash {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCheckConsistencyReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCheckConsistencyReq[fieldId]))
}

func (p *TCheckConsistencyReq) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TabletId = _field
	return nil
}
func (p *TCheckConsistencyReq) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SchemaHash = _field
	return nil
}
func (p *TCheckConsistencyReq) ReadField3(iprot thrift.TProtocol) error {

	var _field types.TVersion
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *TCheckConsistencyReq) ReadField4(iprot thrift.TProtocol) error {

	var _field types.TVersionHash
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VersionHash = _field
	return nil
}

func (p *TCheckConsistencyReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCheckConsistencyReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCheckConsistencyReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCheckConsistencyReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schema_hash", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SchemaHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCheckConsistencyReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TCheckConsistencyReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version_hash", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VersionHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TCheckConsistencyReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCheckConsistencyReq(%+v)", *p)

}

func (p *TCheckConsistencyReq) DeepEqual(ano *TCheckConsistencyReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SchemaHash) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.VersionHash) {
		return false
	}
	return true
}

func (p *TCheckConsistencyReq) Field1DeepEqual(src types.TTabletId) bool {

	if p.TabletId != src {
		return false
	}
	return true
}
func (p *TCheckConsistencyReq) Field2DeepEqual(src types.TSchemaHash) bool {

	if p.SchemaHash != src {
		return false
	}
	return true
}
func (p *TCheckConsistencyReq) Field3DeepEqual(src types.TVersion) bool {

	if p.Version != src {
		return false
	}
	return true
}
func (p *TCheckConsistencyReq) Field4DeepEqual(src types.TVersionHash) bool {

	if p.VersionHash != src {
		return false
	}
	return true
}

type TUploadReq struct {
	JobId          int64                     `thrift:"job_id,1,required" frugal:"1,required,i64" json:"job_id"`
	SrcDestMap     map[string]string         `thrift:"src_dest_map,2,required" frugal:"2,required,map<string:string>" json:"src_dest_map"`
	BrokerAddr     *types.TNetworkAddress    `thrift:"broker_addr,3,required" frugal:"3,required,types.TNetworkAddress" json:"broker_addr"`
	BrokerProp     map[string]string         `thrift:"broker_prop,4,optional" frugal:"4,optional,map<string:string>" json:"broker_prop,omitempty"`
	StorageBackend types.TStorageBackendType `thrift:"storage_backend,5,optional" frugal:"5,optional,TStorageBackendType" json:"storage_backend,omitempty"`
	Location       *string                   `thrift:"location,6,optional" frugal:"6,optional,string" json:"location,omitempty"`
}

func NewTUploadReq() *TUploadReq {
	return &TUploadReq{

		StorageBackend: types.TStorageBackendType_BROKER,
	}
}

func (p *TUploadReq) InitDefault() {
	p.StorageBackend = types.TStorageBackendType_BROKER
}

func (p *TUploadReq) GetJobId() (v int64) {
	return p.JobId
}

func (p *TUploadReq) GetSrcDestMap() (v map[string]string) {
	return p.SrcDestMap
}

var TUploadReq_BrokerAddr_DEFAULT *types.TNetworkAddress

func (p *TUploadReq) GetBrokerAddr() (v *types.TNetworkAddress) {
	if !p.IsSetBrokerAddr() {
		return TUploadReq_BrokerAddr_DEFAULT
	}
	return p.BrokerAddr
}

var TUploadReq_BrokerProp_DEFAULT map[string]string

func (p *TUploadReq) GetBrokerProp() (v map[string]string) {
	if !p.IsSetBrokerProp() {
		return TUploadReq_BrokerProp_DEFAULT
	}
	return p.BrokerProp
}

var TUploadReq_StorageBackend_DEFAULT types.TStorageBackendType = types.TStorageBackendType_BROKER

func (p *TUploadReq) GetStorageBackend() (v types.TStorageBackendType) {
	if !p.IsSetStorageBackend() {
		return TUploadReq_StorageBackend_DEFAULT
	}
	return p.StorageBackend
}

var TUploadReq_Location_DEFAULT string

func (p *TUploadReq) GetLocation() (v string) {
	if !p.IsSetLocation() {
		return TUploadReq_Location_DEFAULT
	}
	return *p.Location
}
func (p *TUploadReq) SetJobId(val int64) {
	p.JobId = val
}
func (p *TUploadReq) SetSrcDestMap(val map[string]string) {
	p.SrcDestMap = val
}
func (p *TUploadReq) SetBrokerAddr(val *types.TNetworkAddress) {
	p.BrokerAddr = val
}
func (p *TUploadReq) SetBrokerProp(val map[string]string) {
	p.BrokerProp = val
}
func (p *TUploadReq) SetStorageBackend(val types.TStorageBackendType) {
	p.StorageBackend = val
}
func (p *TUploadReq) SetLocation(val *string) {
	p.Location = val
}

var fieldIDToName_TUploadReq = map[int16]string{
	1: "job_id",
	2: "src_dest_map",
	3: "broker_addr",
	4: "broker_prop",
	5: "storage_backend",
	6: "location",
}

func (p *TUploadReq) IsSetBrokerAddr() bool {
	return p.BrokerAddr != nil
}

func (p *TUploadReq) IsSetBrokerProp() bool {
	return p.BrokerProp != nil
}

func (p *TUploadReq) IsSetStorageBackend() bool {
	return p.StorageBackend != TUploadReq_StorageBackend_DEFAULT
}

func (p *TUploadReq) IsSetLocation() bool {
	return p.Location != nil
}

func (p *TUploadReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetJobId bool = false
	var issetSrcDestMap bool = false
	var issetBrokerAddr bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetJobId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSrcDestMap = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetBrokerAddr = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetJobId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSrcDestMap {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBrokerAddr {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TUploadReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TUploadReq[fieldId]))
}

func (p *TUploadReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.JobId = _field
	return nil
}
func (p *TUploadReq) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.SrcDestMap = _field
	return nil
}
func (p *TUploadReq) ReadField3(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BrokerAddr = _field
	return nil
}
func (p *TUploadReq) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.BrokerProp = _field
	return nil
}
func (p *TUploadReq) ReadField5(iprot thrift.TProtocol) error {

	var _field types.TStorageBackendType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TStorageBackendType(v)
	}
	p.StorageBackend = _field
	return nil
}
func (p *TUploadReq) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Location = _field
	return nil
}

func (p *TUploadReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TUploadReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TUploadReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("job_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.JobId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TUploadReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("src_dest_map", thrift.MAP, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.SrcDestMap)); err != nil {
		return err
	}
	for k, v := range p.SrcDestMap {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TUploadReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("broker_addr", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BrokerAddr.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TUploadReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBrokerProp() {
		if err = oprot.WriteFieldBegin("broker_prop", thrift.MAP, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.BrokerProp)); err != nil {
			return err
		}
		for k, v := range p.BrokerProp {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TUploadReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageBackend() {
		if err = oprot.WriteFieldBegin("storage_backend", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(p.StorageBackend)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TUploadReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocation() {
		if err = oprot.WriteFieldBegin("location", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Location); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TUploadReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TUploadReq(%+v)", *p)

}

func (p *TUploadReq) DeepEqual(ano *TUploadReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.JobId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SrcDestMap) {
		return false
	}
	if !p.Field3DeepEqual(ano.BrokerAddr) {
		return false
	}
	if !p.Field4DeepEqual(ano.BrokerProp) {
		return false
	}
	if !p.Field5DeepEqual(ano.StorageBackend) {
		return false
	}
	if !p.Field6DeepEqual(ano.Location) {
		return false
	}
	return true
}

func (p *TUploadReq) Field1DeepEqual(src int64) bool {

	if p.JobId != src {
		return false
	}
	return true
}
func (p *TUploadReq) Field2DeepEqual(src map[string]string) bool {

	if len(p.SrcDestMap) != len(src) {
		return false
	}
	for k, v := range p.SrcDestMap {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TUploadReq) Field3DeepEqual(src *types.TNetworkAddress) bool {

	if !p.BrokerAddr.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TUploadReq) Field4DeepEqual(src map[string]string) bool {

	if len(p.BrokerProp) != len(src) {
		return false
	}
	for k, v := range p.BrokerProp {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TUploadReq) Field5DeepEqual(src types.TStorageBackendType) bool {

	if p.StorageBackend != src {
		return false
	}
	return true
}
func (p *TUploadReq) Field6DeepEqual(src *string) bool {

	if p.Location == src {
		return true
	} else if p.Location == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Location, *src) != 0 {
		return false
	}
	return true
}

type TRemoteTabletSnapshot struct {
	LocalTabletId      *int64                 `thrift:"local_tablet_id,1,optional" frugal:"1,optional,i64" json:"local_tablet_id,omitempty"`
	LocalSnapshotPath  *string                `thrift:"local_snapshot_path,2,optional" frugal:"2,optional,string" json:"local_snapshot_path,omitempty"`
	RemoteTabletId     *int64                 `thrift:"remote_tablet_id,3,optional" frugal:"3,optional,i64" json:"remote_tablet_id,omitempty"`
	RemoteBeId         *int64                 `thrift:"remote_be_id,4,optional" frugal:"4,optional,i64" json:"remote_be_id,omitempty"`
	RemoteBeAddr       *types.TNetworkAddress `thrift:"remote_be_addr,5,optional" frugal:"5,optional,types.TNetworkAddress" json:"remote_be_addr,omitempty"`
	RemoteSnapshotPath *string                `thrift:"remote_snapshot_path,6,optional" frugal:"6,optional,string" json:"remote_snapshot_path,omitempty"`
	RemoteToken        *string                `thrift:"remote_token,7,optional" frugal:"7,optional,string" json:"remote_token,omitempty"`
}

func NewTRemoteTabletSnapshot() *TRemoteTabletSnapshot {
	return &TRemoteTabletSnapshot{}
}

func (p *TRemoteTabletSnapshot) InitDefault() {
}

var TRemoteTabletSnapshot_LocalTabletId_DEFAULT int64

func (p *TRemoteTabletSnapshot) GetLocalTabletId() (v int64) {
	if !p.IsSetLocalTabletId() {
		return TRemoteTabletSnapshot_LocalTabletId_DEFAULT
	}
	return *p.LocalTabletId
}

var TRemoteTabletSnapshot_LocalSnapshotPath_DEFAULT string

func (p *TRemoteTabletSnapshot) GetLocalSnapshotPath() (v string) {
	if !p.IsSetLocalSnapshotPath() {
		return TRemoteTabletSnapshot_LocalSnapshotPath_DEFAULT
	}
	return *p.LocalSnapshotPath
}

var TRemoteTabletSnapshot_RemoteTabletId_DEFAULT int64

func (p *TRemoteTabletSnapshot) GetRemoteTabletId() (v int64) {
	if !p.IsSetRemoteTabletId() {
		return TRemoteTabletSnapshot_RemoteTabletId_DEFAULT
	}
	return *p.RemoteTabletId
}

var TRemoteTabletSnapshot_RemoteBeId_DEFAULT int64

func (p *TRemoteTabletSnapshot) GetRemoteBeId() (v int64) {
	if !p.IsSetRemoteBeId() {
		return TRemoteTabletSnapshot_RemoteBeId_DEFAULT
	}
	return *p.RemoteBeId
}

var TRemoteTabletSnapshot_RemoteBeAddr_DEFAULT *types.TNetworkAddress

func (p *TRemoteTabletSnapshot) GetRemoteBeAddr() (v *types.TNetworkAddress) {
	if !p.IsSetRemoteBeAddr() {
		return TRemoteTabletSnapshot_RemoteBeAddr_DEFAULT
	}
	return p.RemoteBeAddr
}

var TRemoteTabletSnapshot_RemoteSnapshotPath_DEFAULT string

func (p *TRemoteTabletSnapshot) GetRemoteSnapshotPath() (v string) {
	if !p.IsSetRemoteSnapshotPath() {
		return TRemoteTabletSnapshot_RemoteSnapshotPath_DEFAULT
	}
	return *p.RemoteSnapshotPath
}

var TRemoteTabletSnapshot_RemoteToken_DEFAULT string

func (p *TRemoteTabletSnapshot) GetRemoteToken() (v string) {
	if !p.IsSetRemoteToken() {
		return TRemoteTabletSnapshot_RemoteToken_DEFAULT
	}
	return *p.RemoteToken
}
func (p *TRemoteTabletSnapshot) SetLocalTabletId(val *int64) {
	p.LocalTabletId = val
}
func (p *TRemoteTabletSnapshot) SetLocalSnapshotPath(val *string) {
	p.LocalSnapshotPath = val
}
func (p *TRemoteTabletSnapshot) SetRemoteTabletId(val *int64) {
	p.RemoteTabletId = val
}
func (p *TRemoteTabletSnapshot) SetRemoteBeId(val *int64) {
	p.RemoteBeId = val
}
func (p *TRemoteTabletSnapshot) SetRemoteBeAddr(val *types.TNetworkAddress) {
	p.RemoteBeAddr = val
}
func (p *TRemoteTabletSnapshot) SetRemoteSnapshotPath(val *string) {
	p.RemoteSnapshotPath = val
}
func (p *TRemoteTabletSnapshot) SetRemoteToken(val *string) {
	p.RemoteToken = val
}

var fieldIDToName_TRemoteTabletSnapshot = map[int16]string{
	1: "local_tablet_id",
	2: "local_snapshot_path",
	3: "remote_tablet_id",
	4: "remote_be_id",
	5: "remote_be_addr",
	6: "remote_snapshot_path",
	7: "remote_token",
}

func (p *TRemoteTabletSnapshot) IsSetLocalTabletId() bool {
	return p.LocalTabletId != nil
}

func (p *TRemoteTabletSnapshot) IsSetLocalSnapshotPath() bool {
	return p.LocalSnapshotPath != nil
}

func (p *TRemoteTabletSnapshot) IsSetRemoteTabletId() bool {
	return p.RemoteTabletId != nil
}

func (p *TRemoteTabletSnapshot) IsSetRemoteBeId() bool {
	return p.RemoteBeId != nil
}

func (p *TRemoteTabletSnapshot) IsSetRemoteBeAddr() bool {
	return p.RemoteBeAddr != nil
}

func (p *TRemoteTabletSnapshot) IsSetRemoteSnapshotPath() bool {
	return p.RemoteSnapshotPath != nil
}

func (p *TRemoteTabletSnapshot) IsSetRemoteToken() bool {
	return p.RemoteToken != nil
}

func (p *TRemoteTabletSnapshot) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRemoteTabletSnapshot[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TRemoteTabletSnapshot) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LocalTabletId = _field
	return nil
}
func (p *TRemoteTabletSnapshot) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LocalSnapshotPath = _field
	return nil
}
func (p *TRemoteTabletSnapshot) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RemoteTabletId = _field
	return nil
}
func (p *TRemoteTabletSnapshot) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RemoteBeId = _field
	return nil
}
func (p *TRemoteTabletSnapshot) ReadField5(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.RemoteBeAddr = _field
	return nil
}
func (p *TRemoteTabletSnapshot) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RemoteSnapshotPath = _field
	return nil
}
func (p *TRemoteTabletSnapshot) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RemoteToken = _field
	return nil
}

func (p *TRemoteTabletSnapshot) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TRemoteTabletSnapshot"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TRemoteTabletSnapshot) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocalTabletId() {
		if err = oprot.WriteFieldBegin("local_tablet_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LocalTabletId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TRemoteTabletSnapshot) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocalSnapshotPath() {
		if err = oprot.WriteFieldBegin("local_snapshot_path", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LocalSnapshotPath); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TRemoteTabletSnapshot) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteTabletId() {
		if err = oprot.WriteFieldBegin("remote_tablet_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.RemoteTabletId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TRemoteTabletSnapshot) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteBeId() {
		if err = oprot.WriteFieldBegin("remote_be_id", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.RemoteBeId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TRemoteTabletSnapshot) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteBeAddr() {
		if err = oprot.WriteFieldBegin("remote_be_addr", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.RemoteBeAddr.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TRemoteTabletSnapshot) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteSnapshotPath() {
		if err = oprot.WriteFieldBegin("remote_snapshot_path", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RemoteSnapshotPath); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TRemoteTabletSnapshot) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteToken() {
		if err = oprot.WriteFieldBegin("remote_token", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RemoteToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TRemoteTabletSnapshot) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRemoteTabletSnapshot(%+v)", *p)

}

func (p *TRemoteTabletSnapshot) DeepEqual(ano *TRemoteTabletSnapshot) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LocalTabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.LocalSnapshotPath) {
		return false
	}
	if !p.Field3DeepEqual(ano.RemoteTabletId) {
		return false
	}
	if !p.Field4DeepEqual(ano.RemoteBeId) {
		return false
	}
	if !p.Field5DeepEqual(ano.RemoteBeAddr) {
		return false
	}
	if !p.Field6DeepEqual(ano.RemoteSnapshotPath) {
		return false
	}
	if !p.Field7DeepEqual(ano.RemoteToken) {
		return false
	}
	return true
}

func (p *TRemoteTabletSnapshot) Field1DeepEqual(src *int64) bool {

	if p.LocalTabletId == src {
		return true
	} else if p.LocalTabletId == nil || src == nil {
		return false
	}
	if *p.LocalTabletId != *src {
		return false
	}
	return true
}
func (p *TRemoteTabletSnapshot) Field2DeepEqual(src *string) bool {

	if p.LocalSnapshotPath == src {
		return true
	} else if p.LocalSnapshotPath == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LocalSnapshotPath, *src) != 0 {
		return false
	}
	return true
}
func (p *TRemoteTabletSnapshot) Field3DeepEqual(src *int64) bool {

	if p.RemoteTabletId == src {
		return true
	} else if p.RemoteTabletId == nil || src == nil {
		return false
	}
	if *p.RemoteTabletId != *src {
		return false
	}
	return true
}
func (p *TRemoteTabletSnapshot) Field4DeepEqual(src *int64) bool {

	if p.RemoteBeId == src {
		return true
	} else if p.RemoteBeId == nil || src == nil {
		return false
	}
	if *p.RemoteBeId != *src {
		return false
	}
	return true
}
func (p *TRemoteTabletSnapshot) Field5DeepEqual(src *types.TNetworkAddress) bool {

	if !p.RemoteBeAddr.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TRemoteTabletSnapshot) Field6DeepEqual(src *string) bool {

	if p.RemoteSnapshotPath == src {
		return true
	} else if p.RemoteSnapshotPath == nil || src == nil {
		return false
	}
	if strings.Compare(*p.RemoteSnapshotPath, *src) != 0 {
		return false
	}
	return true
}
func (p *TRemoteTabletSnapshot) Field7DeepEqual(src *string) bool {

	if p.RemoteToken == src {
		return true
	} else if p.RemoteToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.RemoteToken, *src) != 0 {
		return false
	}
	return true
}

type TDownloadReq struct {
	JobId                 int64                     `thrift:"job_id,1,required" frugal:"1,required,i64" json:"job_id"`
	SrcDestMap            map[string]string         `thrift:"src_dest_map,2,required" frugal:"2,required,map<string:string>" json:"src_dest_map"`
	BrokerAddr            *types.TNetworkAddress    `thrift:"broker_addr,3,required" frugal:"3,required,types.TNetworkAddress" json:"broker_addr"`
	BrokerProp            map[string]string         `thrift:"broker_prop,4,optional" frugal:"4,optional,map<string:string>" json:"broker_prop,omitempty"`
	StorageBackend        types.TStorageBackendType `thrift:"storage_backend,5,optional" frugal:"5,optional,TStorageBackendType" json:"storage_backend,omitempty"`
	Location              *string                   `thrift:"location,6,optional" frugal:"6,optional,string" json:"location,omitempty"`
	RemoteTabletSnapshots []*TRemoteTabletSnapshot  `thrift:"remote_tablet_snapshots,7,optional" frugal:"7,optional,list<TRemoteTabletSnapshot>" json:"remote_tablet_snapshots,omitempty"`
}

func NewTDownloadReq() *TDownloadReq {
	return &TDownloadReq{

		StorageBackend: types.TStorageBackendType_BROKER,
	}
}

func (p *TDownloadReq) InitDefault() {
	p.StorageBackend = types.TStorageBackendType_BROKER
}

func (p *TDownloadReq) GetJobId() (v int64) {
	return p.JobId
}

func (p *TDownloadReq) GetSrcDestMap() (v map[string]string) {
	return p.SrcDestMap
}

var TDownloadReq_BrokerAddr_DEFAULT *types.TNetworkAddress

func (p *TDownloadReq) GetBrokerAddr() (v *types.TNetworkAddress) {
	if !p.IsSetBrokerAddr() {
		return TDownloadReq_BrokerAddr_DEFAULT
	}
	return p.BrokerAddr
}

var TDownloadReq_BrokerProp_DEFAULT map[string]string

func (p *TDownloadReq) GetBrokerProp() (v map[string]string) {
	if !p.IsSetBrokerProp() {
		return TDownloadReq_BrokerProp_DEFAULT
	}
	return p.BrokerProp
}

var TDownloadReq_StorageBackend_DEFAULT types.TStorageBackendType = types.TStorageBackendType_BROKER

func (p *TDownloadReq) GetStorageBackend() (v types.TStorageBackendType) {
	if !p.IsSetStorageBackend() {
		return TDownloadReq_StorageBackend_DEFAULT
	}
	return p.StorageBackend
}

var TDownloadReq_Location_DEFAULT string

func (p *TDownloadReq) GetLocation() (v string) {
	if !p.IsSetLocation() {
		return TDownloadReq_Location_DEFAULT
	}
	return *p.Location
}

var TDownloadReq_RemoteTabletSnapshots_DEFAULT []*TRemoteTabletSnapshot

func (p *TDownloadReq) GetRemoteTabletSnapshots() (v []*TRemoteTabletSnapshot) {
	if !p.IsSetRemoteTabletSnapshots() {
		return TDownloadReq_RemoteTabletSnapshots_DEFAULT
	}
	return p.RemoteTabletSnapshots
}
func (p *TDownloadReq) SetJobId(val int64) {
	p.JobId = val
}
func (p *TDownloadReq) SetSrcDestMap(val map[string]string) {
	p.SrcDestMap = val
}
func (p *TDownloadReq) SetBrokerAddr(val *types.TNetworkAddress) {
	p.BrokerAddr = val
}
func (p *TDownloadReq) SetBrokerProp(val map[string]string) {
	p.BrokerProp = val
}
func (p *TDownloadReq) SetStorageBackend(val types.TStorageBackendType) {
	p.StorageBackend = val
}
func (p *TDownloadReq) SetLocation(val *string) {
	p.Location = val
}
func (p *TDownloadReq) SetRemoteTabletSnapshots(val []*TRemoteTabletSnapshot) {
	p.RemoteTabletSnapshots = val
}

var fieldIDToName_TDownloadReq = map[int16]string{
	1: "job_id",
	2: "src_dest_map",
	3: "broker_addr",
	4: "broker_prop",
	5: "storage_backend",
	6: "location",
	7: "remote_tablet_snapshots",
}

func (p *TDownloadReq) IsSetBrokerAddr() bool {
	return p.BrokerAddr != nil
}

func (p *TDownloadReq) IsSetBrokerProp() bool {
	return p.BrokerProp != nil
}

func (p *TDownloadReq) IsSetStorageBackend() bool {
	return p.StorageBackend != TDownloadReq_StorageBackend_DEFAULT
}

func (p *TDownloadReq) IsSetLocation() bool {
	return p.Location != nil
}

func (p *TDownloadReq) IsSetRemoteTabletSnapshots() bool {
	return p.RemoteTabletSnapshots != nil
}

func (p *TDownloadReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetJobId bool = false
	var issetSrcDestMap bool = false
	var issetBrokerAddr bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetJobId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSrcDestMap = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetBrokerAddr = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetJobId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSrcDestMap {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBrokerAddr {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDownloadReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TDownloadReq[fieldId]))
}

func (p *TDownloadReq) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.JobId = _field
	return nil
}
func (p *TDownloadReq) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.SrcDestMap = _field
	return nil
}
func (p *TDownloadReq) ReadField3(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BrokerAddr = _field
	return nil
}
func (p *TDownloadReq) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.BrokerProp = _field
	return nil
}
func (p *TDownloadReq) ReadField5(iprot thrift.TProtocol) error {

	var _field types.TStorageBackendType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TStorageBackendType(v)
	}
	p.StorageBackend = _field
	return nil
}
func (p *TDownloadReq) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Location = _field
	return nil
}
func (p *TDownloadReq) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TRemoteTabletSnapshot, 0, size)
	values := make([]TRemoteTabletSnapshot, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.RemoteTabletSnapshots = _field
	return nil
}

func (p *TDownloadReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDownloadReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDownloadReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("job_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.JobId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDownloadReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("src_dest_map", thrift.MAP, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.SrcDestMap)); err != nil {
		return err
	}
	for k, v := range p.SrcDestMap {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TDownloadReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("broker_addr", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BrokerAddr.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TDownloadReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBrokerProp() {
		if err = oprot.WriteFieldBegin("broker_prop", thrift.MAP, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.BrokerProp)); err != nil {
			return err
		}
		for k, v := range p.BrokerProp {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TDownloadReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageBackend() {
		if err = oprot.WriteFieldBegin("storage_backend", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(p.StorageBackend)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TDownloadReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocation() {
		if err = oprot.WriteFieldBegin("location", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Location); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TDownloadReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteTabletSnapshots() {
		if err = oprot.WriteFieldBegin("remote_tablet_snapshots", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RemoteTabletSnapshots)); err != nil {
			return err
		}
		for _, v := range p.RemoteTabletSnapshots {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TDownloadReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDownloadReq(%+v)", *p)

}

func (p *TDownloadReq) DeepEqual(ano *TDownloadReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.JobId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SrcDestMap) {
		return false
	}
	if !p.Field3DeepEqual(ano.BrokerAddr) {
		return false
	}
	if !p.Field4DeepEqual(ano.BrokerProp) {
		return false
	}
	if !p.Field5DeepEqual(ano.StorageBackend) {
		return false
	}
	if !p.Field6DeepEqual(ano.Location) {
		return false
	}
	if !p.Field7DeepEqual(ano.RemoteTabletSnapshots) {
		return false
	}
	return true
}

func (p *TDownloadReq) Field1DeepEqual(src int64) bool {

	if p.JobId != src {
		return false
	}
	return true
}
func (p *TDownloadReq) Field2DeepEqual(src map[string]string) bool {

	if len(p.SrcDestMap) != len(src) {
		return false
	}
	for k, v := range p.SrcDestMap {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TDownloadReq) Field3DeepEqual(src *types.TNetworkAddress) bool {

	if !p.BrokerAddr.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TDownloadReq) Field4DeepEqual(src map[string]string) bool {

	if len(p.BrokerProp) != len(src) {
		return false
	}
	for k, v := range p.BrokerProp {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TDownloadReq) Field5DeepEqual(src types.TStorageBackendType) bool {

	if p.StorageBackend != src {
		return false
	}
	return true
}
func (p *TDownloadReq) Field6DeepEqual(src *string) bool {

	if p.Location == src {
		return true
	} else if p.Location == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Location, *src) != 0 {
		return false
	}
	return true
}
func (p *TDownloadReq) Field7DeepEqual(src []*TRemoteTabletSnapshot) bool {

	if len(p.RemoteTabletSnapshots) != len(src) {
		return false
	}
	for i, v := range p.RemoteTabletSnapshots {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TSnapshotRequest struct {
	TabletId                 types.TTabletId     `thrift:"tablet_id,1,required" frugal:"1,required,i64" json:"tablet_id"`
	SchemaHash               types.TSchemaHash   `thrift:"schema_hash,2,required" frugal:"2,required,i32" json:"schema_hash"`
	Version                  *types.TVersion     `thrift:"version,3,optional" frugal:"3,optional,i64" json:"version,omitempty"`
	VersionHash              *types.TVersionHash `thrift:"version_hash,4,optional" frugal:"4,optional,i64" json:"version_hash,omitempty"`
	Timeout                  *int64              `thrift:"timeout,5,optional" frugal:"5,optional,i64" json:"timeout,omitempty"`
	MissingVersion           []types.TVersion    `thrift:"missing_version,6,optional" frugal:"6,optional,list<i64>" json:"missing_version,omitempty"`
	ListFiles                *bool               `thrift:"list_files,7,optional" frugal:"7,optional,bool" json:"list_files,omitempty"`
	AllowIncrementalClone    *bool               `thrift:"allow_incremental_clone,8,optional" frugal:"8,optional,bool" json:"allow_incremental_clone,omitempty"`
	PreferredSnapshotVersion int32               `thrift:"preferred_snapshot_version,9,optional" frugal:"9,optional,i32" json:"preferred_snapshot_version,omitempty"`
	IsCopyTabletTask         *bool               `thrift:"is_copy_tablet_task,10,optional" frugal:"10,optional,bool" json:"is_copy_tablet_task,omitempty"`
	StartVersion             *types.TVersion     `thrift:"start_version,11,optional" frugal:"11,optional,i64" json:"start_version,omitempty"`
	EndVersion               *types.TVersion     `thrift:"end_version,12,optional" frugal:"12,optional,i64" json:"end_version,omitempty"`
	IsCopyBinlog             *bool               `thrift:"is_copy_binlog,13,optional" frugal:"13,optional,bool" json:"is_copy_binlog,omitempty"`
	RefTabletId              *types.TTabletId    `thrift:"ref_tablet_id,14,optional" frugal:"14,optional,i64" json:"ref_tablet_id,omitempty"`
}

func NewTSnapshotRequest() *TSnapshotRequest {
	return &TSnapshotRequest{

		PreferredSnapshotVersion: int32(types.TPREFER_SNAPSHOT_REQ_VERSION),
	}
}

func (p *TSnapshotRequest) InitDefault() {
	p.PreferredSnapshotVersion = int32(types.TPREFER_SNAPSHOT_REQ_VERSION)
}

func (p *TSnapshotRequest) GetTabletId() (v types.TTabletId) {
	return p.TabletId
}

func (p *TSnapshotRequest) GetSchemaHash() (v types.TSchemaHash) {
	return p.SchemaHash
}

var TSnapshotRequest_Version_DEFAULT types.TVersion

func (p *TSnapshotRequest) GetVersion() (v types.TVersion) {
	if !p.IsSetVersion() {
		return TSnapshotRequest_Version_DEFAULT
	}
	return *p.Version
}

var TSnapshotRequest_VersionHash_DEFAULT types.TVersionHash

func (p *TSnapshotRequest) GetVersionHash() (v types.TVersionHash) {
	if !p.IsSetVersionHash() {
		return TSnapshotRequest_VersionHash_DEFAULT
	}
	return *p.VersionHash
}

var TSnapshotRequest_Timeout_DEFAULT int64

func (p *TSnapshotRequest) GetTimeout() (v int64) {
	if !p.IsSetTimeout() {
		return TSnapshotRequest_Timeout_DEFAULT
	}
	return *p.Timeout
}

var TSnapshotRequest_MissingVersion_DEFAULT []types.TVersion

func (p *TSnapshotRequest) GetMissingVersion() (v []types.TVersion) {
	if !p.IsSetMissingVersion() {
		return TSnapshotRequest_MissingVersion_DEFAULT
	}
	return p.MissingVersion
}

var TSnapshotRequest_ListFiles_DEFAULT bool

func (p *TSnapshotRequest) GetListFiles() (v bool) {
	if !p.IsSetListFiles() {
		return TSnapshotRequest_ListFiles_DEFAULT
	}
	return *p.ListFiles
}

var TSnapshotRequest_AllowIncrementalClone_DEFAULT bool

func (p *TSnapshotRequest) GetAllowIncrementalClone() (v bool) {
	if !p.IsSetAllowIncrementalClone() {
		return TSnapshotRequest_AllowIncrementalClone_DEFAULT
	}
	return *p.AllowIncrementalClone
}

var TSnapshotRequest_PreferredSnapshotVersion_DEFAULT int32 = int32(types.TPREFER_SNAPSHOT_REQ_VERSION)

func (p *TSnapshotRequest) GetPreferredSnapshotVersion() (v int32) {
	if !p.IsSetPreferredSnapshotVersion() {
		return TSnapshotRequest_PreferredSnapshotVersion_DEFAULT
	}
	return p.PreferredSnapshotVersion
}

var TSnapshotRequest_IsCopyTabletTask_DEFAULT bool

func (p *TSnapshotRequest) GetIsCopyTabletTask() (v bool) {
	if !p.IsSetIsCopyTabletTask() {
		return TSnapshotRequest_IsCopyTabletTask_DEFAULT
	}
	return *p.IsCopyTabletTask
}

var TSnapshotRequest_StartVersion_DEFAULT types.TVersion

func (p *TSnapshotRequest) GetStartVersion() (v types.TVersion) {
	if !p.IsSetStartVersion() {
		return TSnapshotRequest_StartVersion_DEFAULT
	}
	return *p.StartVersion
}

var TSnapshotRequest_EndVersion_DEFAULT types.TVersion

func (p *TSnapshotRequest) GetEndVersion() (v types.TVersion) {
	if !p.IsSetEndVersion() {
		return TSnapshotRequest_EndVersion_DEFAULT
	}
	return *p.EndVersion
}

var TSnapshotRequest_IsCopyBinlog_DEFAULT bool

func (p *TSnapshotRequest) GetIsCopyBinlog() (v bool) {
	if !p.IsSetIsCopyBinlog() {
		return TSnapshotRequest_IsCopyBinlog_DEFAULT
	}
	return *p.IsCopyBinlog
}

var TSnapshotRequest_RefTabletId_DEFAULT types.TTabletId

func (p *TSnapshotRequest) GetRefTabletId() (v types.TTabletId) {
	if !p.IsSetRefTabletId() {
		return TSnapshotRequest_RefTabletId_DEFAULT
	}
	return *p.RefTabletId
}
func (p *TSnapshotRequest) SetTabletId(val types.TTabletId) {
	p.TabletId = val
}
func (p *TSnapshotRequest) SetSchemaHash(val types.TSchemaHash) {
	p.SchemaHash = val
}
func (p *TSnapshotRequest) SetVersion(val *types.TVersion) {
	p.Version = val
}
func (p *TSnapshotRequest) SetVersionHash(val *types.TVersionHash) {
	p.VersionHash = val
}
func (p *TSnapshotRequest) SetTimeout(val *int64) {
	p.Timeout = val
}
func (p *TSnapshotRequest) SetMissingVersion(val []types.TVersion) {
	p.MissingVersion = val
}
func (p *TSnapshotRequest) SetListFiles(val *bool) {
	p.ListFiles = val
}
func (p *TSnapshotRequest) SetAllowIncrementalClone(val *bool) {
	p.AllowIncrementalClone = val
}
func (p *TSnapshotRequest) SetPreferredSnapshotVersion(val int32) {
	p.PreferredSnapshotVersion = val
}
func (p *TSnapshotRequest) SetIsCopyTabletTask(val *bool) {
	p.IsCopyTabletTask = val
}
func (p *TSnapshotRequest) SetStartVersion(val *types.TVersion) {
	p.StartVersion = val
}
func (p *TSnapshotRequest) SetEndVersion(val *types.TVersion) {
	p.EndVersion = val
}
func (p *TSnapshotRequest) SetIsCopyBinlog(val *bool) {
	p.IsCopyBinlog = val
}
func (p *TSnapshotRequest) SetRefTabletId(val *types.TTabletId) {
	p.RefTabletId = val
}

var fieldIDToName_TSnapshotRequest = map[int16]string{
	1:  "tablet_id",
	2:  "schema_hash",
	3:  "version",
	4:  "version_hash",
	5:  "timeout",
	6:  "missing_version",
	7:  "list_files",
	8:  "allow_incremental_clone",
	9:  "preferred_snapshot_version",
	10: "is_copy_tablet_task",
	11: "start_version",
	12: "end_version",
	13: "is_copy_binlog",
	14: "ref_tablet_id",
}

func (p *TSnapshotRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *TSnapshotRequest) IsSetVersionHash() bool {
	return p.VersionHash != nil
}

func (p *TSnapshotRequest) IsSetTimeout() bool {
	return p.Timeout != nil
}

func (p *TSnapshotRequest) IsSetMissingVersion() bool {
	return p.MissingVersion != nil
}

func (p *TSnapshotRequest) IsSetListFiles() bool {
	return p.ListFiles != nil
}

func (p *TSnapshotRequest) IsSetAllowIncrementalClone() bool {
	return p.AllowIncrementalClone != nil
}

func (p *TSnapshotRequest) IsSetPreferredSnapshotVersion() bool {
	return p.PreferredSnapshotVersion != TSnapshotRequest_PreferredSnapshotVersion_DEFAULT
}

func (p *TSnapshotRequest) IsSetIsCopyTabletTask() bool {
	return p.IsCopyTabletTask != nil
}

func (p *TSnapshotRequest) IsSetStartVersion() bool {
	return p.StartVersion != nil
}

func (p *TSnapshotRequest) IsSetEndVersion() bool {
	return p.EndVersion != nil
}

func (p *TSnapshotRequest) IsSetIsCopyBinlog() bool {
	return p.IsCopyBinlog != nil
}

func (p *TSnapshotRequest) IsSetRefTabletId() bool {
	return p.RefTabletId != nil
}

func (p *TSnapshotRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TSnapshotRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TSnapshotRequest[fieldId]))
}

func (p *TSnapshotRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TabletId = _field
	return nil
}
func (p *TSnapshotRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SchemaHash = _field
	return nil
}
func (p *TSnapshotRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *types.TVersion
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *TSnapshotRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *types.TVersionHash
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionHash = _field
	return nil
}
func (p *TSnapshotRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Timeout = _field
	return nil
}
func (p *TSnapshotRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TVersion, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TVersion
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MissingVersion = _field
	return nil
}
func (p *TSnapshotRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ListFiles = _field
	return nil
}
func (p *TSnapshotRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AllowIncrementalClone = _field
	return nil
}
func (p *TSnapshotRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PreferredSnapshotVersion = _field
	return nil
}
func (p *TSnapshotRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsCopyTabletTask = _field
	return nil
}
func (p *TSnapshotRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *types.TVersion
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StartVersion = _field
	return nil
}
func (p *TSnapshotRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field *types.TVersion
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EndVersion = _field
	return nil
}
func (p *TSnapshotRequest) ReadField13(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsCopyBinlog = _field
	return nil
}
func (p *TSnapshotRequest) ReadField14(iprot thrift.TProtocol) error {

	var _field *types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RefTabletId = _field
	return nil
}

func (p *TSnapshotRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TSnapshotRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TSnapshotRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TSnapshotRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schema_hash", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SchemaHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TSnapshotRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TSnapshotRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionHash() {
		if err = oprot.WriteFieldBegin("version_hash", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VersionHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TSnapshotRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeout() {
		if err = oprot.WriteFieldBegin("timeout", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Timeout); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TSnapshotRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMissingVersion() {
		if err = oprot.WriteFieldBegin("missing_version", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.MissingVersion)); err != nil {
			return err
		}
		for _, v := range p.MissingVersion {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TSnapshotRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetListFiles() {
		if err = oprot.WriteFieldBegin("list_files", thrift.BOOL, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ListFiles); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TSnapshotRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllowIncrementalClone() {
		if err = oprot.WriteFieldBegin("allow_incremental_clone", thrift.BOOL, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.AllowIncrementalClone); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TSnapshotRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreferredSnapshotVersion() {
		if err = oprot.WriteFieldBegin("preferred_snapshot_version", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.PreferredSnapshotVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TSnapshotRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsCopyTabletTask() {
		if err = oprot.WriteFieldBegin("is_copy_tablet_task", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsCopyTabletTask); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TSnapshotRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartVersion() {
		if err = oprot.WriteFieldBegin("start_version", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.StartVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TSnapshotRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndVersion() {
		if err = oprot.WriteFieldBegin("end_version", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EndVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TSnapshotRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsCopyBinlog() {
		if err = oprot.WriteFieldBegin("is_copy_binlog", thrift.BOOL, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsCopyBinlog); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TSnapshotRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetRefTabletId() {
		if err = oprot.WriteFieldBegin("ref_tablet_id", thrift.I64, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.RefTabletId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TSnapshotRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSnapshotRequest(%+v)", *p)

}

func (p *TSnapshotRequest) DeepEqual(ano *TSnapshotRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SchemaHash) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.VersionHash) {
		return false
	}
	if !p.Field5DeepEqual(ano.Timeout) {
		return false
	}
	if !p.Field6DeepEqual(ano.MissingVersion) {
		return false
	}
	if !p.Field7DeepEqual(ano.ListFiles) {
		return false
	}
	if !p.Field8DeepEqual(ano.AllowIncrementalClone) {
		return false
	}
	if !p.Field9DeepEqual(ano.PreferredSnapshotVersion) {
		return false
	}
	if !p.Field10DeepEqual(ano.IsCopyTabletTask) {
		return false
	}
	if !p.Field11DeepEqual(ano.StartVersion) {
		return false
	}
	if !p.Field12DeepEqual(ano.EndVersion) {
		return false
	}
	if !p.Field13DeepEqual(ano.IsCopyBinlog) {
		return false
	}
	if !p.Field14DeepEqual(ano.RefTabletId) {
		return false
	}
	return true
}

func (p *TSnapshotRequest) Field1DeepEqual(src types.TTabletId) bool {

	if p.TabletId != src {
		return false
	}
	return true
}
func (p *TSnapshotRequest) Field2DeepEqual(src types.TSchemaHash) bool {

	if p.SchemaHash != src {
		return false
	}
	return true
}
func (p *TSnapshotRequest) Field3DeepEqual(src *types.TVersion) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if *p.Version != *src {
		return false
	}
	return true
}
func (p *TSnapshotRequest) Field4DeepEqual(src *types.TVersionHash) bool {

	if p.VersionHash == src {
		return true
	} else if p.VersionHash == nil || src == nil {
		return false
	}
	if *p.VersionHash != *src {
		return false
	}
	return true
}
func (p *TSnapshotRequest) Field5DeepEqual(src *int64) bool {

	if p.Timeout == src {
		return true
	} else if p.Timeout == nil || src == nil {
		return false
	}
	if *p.Timeout != *src {
		return false
	}
	return true
}
func (p *TSnapshotRequest) Field6DeepEqual(src []types.TVersion) bool {

	if len(p.MissingVersion) != len(src) {
		return false
	}
	for i, v := range p.MissingVersion {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TSnapshotRequest) Field7DeepEqual(src *bool) bool {

	if p.ListFiles == src {
		return true
	} else if p.ListFiles == nil || src == nil {
		return false
	}
	if *p.ListFiles != *src {
		return false
	}
	return true
}
func (p *TSnapshotRequest) Field8DeepEqual(src *bool) bool {

	if p.AllowIncrementalClone == src {
		return true
	} else if p.AllowIncrementalClone == nil || src == nil {
		return false
	}
	if *p.AllowIncrementalClone != *src {
		return false
	}
	return true
}
func (p *TSnapshotRequest) Field9DeepEqual(src int32) bool {

	if p.PreferredSnapshotVersion != src {
		return false
	}
	return true
}
func (p *TSnapshotRequest) Field10DeepEqual(src *bool) bool {

	if p.IsCopyTabletTask == src {
		return true
	} else if p.IsCopyTabletTask == nil || src == nil {
		return false
	}
	if *p.IsCopyTabletTask != *src {
		return false
	}
	return true
}
func (p *TSnapshotRequest) Field11DeepEqual(src *types.TVersion) bool {

	if p.StartVersion == src {
		return true
	} else if p.StartVersion == nil || src == nil {
		return false
	}
	if *p.StartVersion != *src {
		return false
	}
	return true
}
func (p *TSnapshotRequest) Field12DeepEqual(src *types.TVersion) bool {

	if p.EndVersion == src {
		return true
	} else if p.EndVersion == nil || src == nil {
		return false
	}
	if *p.EndVersion != *src {
		return false
	}
	return true
}
func (p *TSnapshotRequest) Field13DeepEqual(src *bool) bool {

	if p.IsCopyBinlog == src {
		return true
	} else if p.IsCopyBinlog == nil || src == nil {
		return false
	}
	if *p.IsCopyBinlog != *src {
		return false
	}
	return true
}
func (p *TSnapshotRequest) Field14DeepEqual(src *types.TTabletId) bool {

	if p.RefTabletId == src {
		return true
	} else if p.RefTabletId == nil || src == nil {
		return false
	}
	if *p.RefTabletId != *src {
		return false
	}
	return true
}

type TReleaseSnapshotRequest struct {
	SnapshotPath string `thrift:"snapshot_path,1,required" frugal:"1,required,string" json:"snapshot_path"`
}

func NewTReleaseSnapshotRequest() *TReleaseSnapshotRequest {
	return &TReleaseSnapshotRequest{}
}

func (p *TReleaseSnapshotRequest) InitDefault() {
}

func (p *TReleaseSnapshotRequest) GetSnapshotPath() (v string) {
	return p.SnapshotPath
}
func (p *TReleaseSnapshotRequest) SetSnapshotPath(val string) {
	p.SnapshotPath = val
}

var fieldIDToName_TReleaseSnapshotRequest = map[int16]string{
	1: "snapshot_path",
}

func (p *TReleaseSnapshotRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSnapshotPath bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetSnapshotPath = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSnapshotPath {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TReleaseSnapshotRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TReleaseSnapshotRequest[fieldId]))
}

func (p *TReleaseSnapshotRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SnapshotPath = _field
	return nil
}

func (p *TReleaseSnapshotRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TReleaseSnapshotRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TReleaseSnapshotRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("snapshot_path", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SnapshotPath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TReleaseSnapshotRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TReleaseSnapshotRequest(%+v)", *p)

}

func (p *TReleaseSnapshotRequest) DeepEqual(ano *TReleaseSnapshotRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SnapshotPath) {
		return false
	}
	return true
}

func (p *TReleaseSnapshotRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.SnapshotPath, src) != 0 {
		return false
	}
	return true
}

type TClearRemoteFileReq struct {
	RemoteFilePath         string            `thrift:"remote_file_path,1,required" frugal:"1,required,string" json:"remote_file_path"`
	RemoteSourceProperties map[string]string `thrift:"remote_source_properties,2,required" frugal:"2,required,map<string:string>" json:"remote_source_properties"`
}

func NewTClearRemoteFileReq() *TClearRemoteFileReq {
	return &TClearRemoteFileReq{}
}

func (p *TClearRemoteFileReq) InitDefault() {
}

func (p *TClearRemoteFileReq) GetRemoteFilePath() (v string) {
	return p.RemoteFilePath
}

func (p *TClearRemoteFileReq) GetRemoteSourceProperties() (v map[string]string) {
	return p.RemoteSourceProperties
}
func (p *TClearRemoteFileReq) SetRemoteFilePath(val string) {
	p.RemoteFilePath = val
}
func (p *TClearRemoteFileReq) SetRemoteSourceProperties(val map[string]string) {
	p.RemoteSourceProperties = val
}

var fieldIDToName_TClearRemoteFileReq = map[int16]string{
	1: "remote_file_path",
	2: "remote_source_properties",
}

func (p *TClearRemoteFileReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRemoteFilePath bool = false
	var issetRemoteSourceProperties bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRemoteFilePath = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetRemoteSourceProperties = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRemoteFilePath {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetRemoteSourceProperties {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TClearRemoteFileReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TClearRemoteFileReq[fieldId]))
}

func (p *TClearRemoteFileReq) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RemoteFilePath = _field
	return nil
}
func (p *TClearRemoteFileReq) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.RemoteSourceProperties = _field
	return nil
}

func (p *TClearRemoteFileReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TClearRemoteFileReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TClearRemoteFileReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remote_file_path", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RemoteFilePath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TClearRemoteFileReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remote_source_properties", thrift.MAP, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.RemoteSourceProperties)); err != nil {
		return err
	}
	for k, v := range p.RemoteSourceProperties {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TClearRemoteFileReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TClearRemoteFileReq(%+v)", *p)

}

func (p *TClearRemoteFileReq) DeepEqual(ano *TClearRemoteFileReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RemoteFilePath) {
		return false
	}
	if !p.Field2DeepEqual(ano.RemoteSourceProperties) {
		return false
	}
	return true
}

func (p *TClearRemoteFileReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.RemoteFilePath, src) != 0 {
		return false
	}
	return true
}
func (p *TClearRemoteFileReq) Field2DeepEqual(src map[string]string) bool {

	if len(p.RemoteSourceProperties) != len(src) {
		return false
	}
	for k, v := range p.RemoteSourceProperties {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type TPartitionVersionInfo struct {
	PartitionId types.TPartitionId `thrift:"partition_id,1,required" frugal:"1,required,i64" json:"partition_id"`
	Version     types.TVersion     `thrift:"version,2,required" frugal:"2,required,i64" json:"version"`
	VersionHash types.TVersionHash `thrift:"version_hash,3,required" frugal:"3,required,i64" json:"version_hash"`
}

func NewTPartitionVersionInfo() *TPartitionVersionInfo {
	return &TPartitionVersionInfo{}
}

func (p *TPartitionVersionInfo) InitDefault() {
}

func (p *TPartitionVersionInfo) GetPartitionId() (v types.TPartitionId) {
	return p.PartitionId
}

func (p *TPartitionVersionInfo) GetVersion() (v types.TVersion) {
	return p.Version
}

func (p *TPartitionVersionInfo) GetVersionHash() (v types.TVersionHash) {
	return p.VersionHash
}
func (p *TPartitionVersionInfo) SetPartitionId(val types.TPartitionId) {
	p.PartitionId = val
}
func (p *TPartitionVersionInfo) SetVersion(val types.TVersion) {
	p.Version = val
}
func (p *TPartitionVersionInfo) SetVersionHash(val types.TVersionHash) {
	p.VersionHash = val
}

var fieldIDToName_TPartitionVersionInfo = map[int16]string{
	1: "partition_id",
	2: "version",
	3: "version_hash",
}

func (p *TPartitionVersionInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPartitionId bool = false
	var issetVersion bool = false
	var issetVersionHash bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPartitionId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersionHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPartitionId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersionHash {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPartitionVersionInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPartitionVersionInfo[fieldId]))
}

func (p *TPartitionVersionInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TPartitionId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PartitionId = _field
	return nil
}
func (p *TPartitionVersionInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TVersion
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *TPartitionVersionInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field types.TVersionHash
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VersionHash = _field
	return nil
}

func (p *TPartitionVersionInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPartitionVersionInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPartitionVersionInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("partition_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PartitionId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPartitionVersionInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPartitionVersionInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version_hash", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VersionHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPartitionVersionInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPartitionVersionInfo(%+v)", *p)

}

func (p *TPartitionVersionInfo) DeepEqual(ano *TPartitionVersionInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PartitionId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Version) {
		return false
	}
	if !p.Field3DeepEqual(ano.VersionHash) {
		return false
	}
	return true
}

func (p *TPartitionVersionInfo) Field1DeepEqual(src types.TPartitionId) bool {

	if p.PartitionId != src {
		return false
	}
	return true
}
func (p *TPartitionVersionInfo) Field2DeepEqual(src types.TVersion) bool {

	if p.Version != src {
		return false
	}
	return true
}
func (p *TPartitionVersionInfo) Field3DeepEqual(src types.TVersionHash) bool {

	if p.VersionHash != src {
		return false
	}
	return true
}

type TMoveDirReq struct {
	TabletId   types.TTabletId   `thrift:"tablet_id,1,required" frugal:"1,required,i64" json:"tablet_id"`
	SchemaHash types.TSchemaHash `thrift:"schema_hash,2,required" frugal:"2,required,i32" json:"schema_hash"`
	Src        string            `thrift:"src,3,required" frugal:"3,required,string" json:"src"`
	JobId      int64             `thrift:"job_id,4,required" frugal:"4,required,i64" json:"job_id"`
	Overwrite  bool              `thrift:"overwrite,5,required" frugal:"5,required,bool" json:"overwrite"`
}

func NewTMoveDirReq() *TMoveDirReq {
	return &TMoveDirReq{}
}

func (p *TMoveDirReq) InitDefault() {
}

func (p *TMoveDirReq) GetTabletId() (v types.TTabletId) {
	return p.TabletId
}

func (p *TMoveDirReq) GetSchemaHash() (v types.TSchemaHash) {
	return p.SchemaHash
}

func (p *TMoveDirReq) GetSrc() (v string) {
	return p.Src
}

func (p *TMoveDirReq) GetJobId() (v int64) {
	return p.JobId
}

func (p *TMoveDirReq) GetOverwrite() (v bool) {
	return p.Overwrite
}
func (p *TMoveDirReq) SetTabletId(val types.TTabletId) {
	p.TabletId = val
}
func (p *TMoveDirReq) SetSchemaHash(val types.TSchemaHash) {
	p.SchemaHash = val
}
func (p *TMoveDirReq) SetSrc(val string) {
	p.Src = val
}
func (p *TMoveDirReq) SetJobId(val int64) {
	p.JobId = val
}
func (p *TMoveDirReq) SetOverwrite(val bool) {
	p.Overwrite = val
}

var fieldIDToName_TMoveDirReq = map[int16]string{
	1: "tablet_id",
	2: "schema_hash",
	3: "src",
	4: "job_id",
	5: "overwrite",
}

func (p *TMoveDirReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false
	var issetSrc bool = false
	var issetJobId bool = false
	var issetOverwrite bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSrc = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetJobId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetOverwrite = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSrc {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetJobId {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetOverwrite {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMoveDirReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TMoveDirReq[fieldId]))
}

func (p *TMoveDirReq) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TabletId = _field
	return nil
}
func (p *TMoveDirReq) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SchemaHash = _field
	return nil
}
func (p *TMoveDirReq) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Src = _field
	return nil
}
func (p *TMoveDirReq) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.JobId = _field
	return nil
}
func (p *TMoveDirReq) ReadField5(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Overwrite = _field
	return nil
}

func (p *TMoveDirReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMoveDirReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMoveDirReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMoveDirReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schema_hash", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SchemaHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TMoveDirReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("src", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Src); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TMoveDirReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("job_id", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.JobId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TMoveDirReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("overwrite", thrift.BOOL, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Overwrite); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TMoveDirReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMoveDirReq(%+v)", *p)

}

func (p *TMoveDirReq) DeepEqual(ano *TMoveDirReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SchemaHash) {
		return false
	}
	if !p.Field3DeepEqual(ano.Src) {
		return false
	}
	if !p.Field4DeepEqual(ano.JobId) {
		return false
	}
	if !p.Field5DeepEqual(ano.Overwrite) {
		return false
	}
	return true
}

func (p *TMoveDirReq) Field1DeepEqual(src types.TTabletId) bool {

	if p.TabletId != src {
		return false
	}
	return true
}
func (p *TMoveDirReq) Field2DeepEqual(src types.TSchemaHash) bool {

	if p.SchemaHash != src {
		return false
	}
	return true
}
func (p *TMoveDirReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Src, src) != 0 {
		return false
	}
	return true
}
func (p *TMoveDirReq) Field4DeepEqual(src int64) bool {

	if p.JobId != src {
		return false
	}
	return true
}
func (p *TMoveDirReq) Field5DeepEqual(src bool) bool {

	if p.Overwrite != src {
		return false
	}
	return true
}

type TPublishVersionRequest struct {
	TransactionId         types.TTransactionId     `thrift:"transaction_id,1,required" frugal:"1,required,i64" json:"transaction_id"`
	PartitionVersionInfos []*TPartitionVersionInfo `thrift:"partition_version_infos,2,required" frugal:"2,required,list<TPartitionVersionInfo>" json:"partition_version_infos"`
	StrictMode            bool                     `thrift:"strict_mode,3,optional" frugal:"3,optional,bool" json:"strict_mode,omitempty"`
	BaseTabletIds         []types.TTabletId        `thrift:"base_tablet_ids,4,optional" frugal:"4,optional,set<i64>" json:"base_tablet_ids,omitempty"`
}

func NewTPublishVersionRequest() *TPublishVersionRequest {
	return &TPublishVersionRequest{

		StrictMode: false,
	}
}

func (p *TPublishVersionRequest) InitDefault() {
	p.StrictMode = false
}

func (p *TPublishVersionRequest) GetTransactionId() (v types.TTransactionId) {
	return p.TransactionId
}

func (p *TPublishVersionRequest) GetPartitionVersionInfos() (v []*TPartitionVersionInfo) {
	return p.PartitionVersionInfos
}

var TPublishVersionRequest_StrictMode_DEFAULT bool = false

func (p *TPublishVersionRequest) GetStrictMode() (v bool) {
	if !p.IsSetStrictMode() {
		return TPublishVersionRequest_StrictMode_DEFAULT
	}
	return p.StrictMode
}

var TPublishVersionRequest_BaseTabletIds_DEFAULT []types.TTabletId

func (p *TPublishVersionRequest) GetBaseTabletIds() (v []types.TTabletId) {
	if !p.IsSetBaseTabletIds() {
		return TPublishVersionRequest_BaseTabletIds_DEFAULT
	}
	return p.BaseTabletIds
}
func (p *TPublishVersionRequest) SetTransactionId(val types.TTransactionId) {
	p.TransactionId = val
}
func (p *TPublishVersionRequest) SetPartitionVersionInfos(val []*TPartitionVersionInfo) {
	p.PartitionVersionInfos = val
}
func (p *TPublishVersionRequest) SetStrictMode(val bool) {
	p.StrictMode = val
}
func (p *TPublishVersionRequest) SetBaseTabletIds(val []types.TTabletId) {
	p.BaseTabletIds = val
}

var fieldIDToName_TPublishVersionRequest = map[int16]string{
	1: "transaction_id",
	2: "partition_version_infos",
	3: "strict_mode",
	4: "base_tablet_ids",
}

func (p *TPublishVersionRequest) IsSetStrictMode() bool {
	return p.StrictMode != TPublishVersionRequest_StrictMode_DEFAULT
}

func (p *TPublishVersionRequest) IsSetBaseTabletIds() bool {
	return p.BaseTabletIds != nil
}

func (p *TPublishVersionRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTransactionId bool = false
	var issetPartitionVersionInfos bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTransactionId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPartitionVersionInfos = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTransactionId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPartitionVersionInfos {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPublishVersionRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPublishVersionRequest[fieldId]))
}

func (p *TPublishVersionRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTransactionId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TransactionId = _field
	return nil
}
func (p *TPublishVersionRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TPartitionVersionInfo, 0, size)
	values := make([]TPartitionVersionInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PartitionVersionInfos = _field
	return nil
}
func (p *TPublishVersionRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StrictMode = _field
	return nil
}
func (p *TPublishVersionRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TTabletId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TTabletId
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	p.BaseTabletIds = _field
	return nil
}

func (p *TPublishVersionRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPublishVersionRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPublishVersionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transaction_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TransactionId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPublishVersionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("partition_version_infos", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PartitionVersionInfos)); err != nil {
		return err
	}
	for _, v := range p.PartitionVersionInfos {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPublishVersionRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStrictMode() {
		if err = oprot.WriteFieldBegin("strict_mode", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.StrictMode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPublishVersionRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseTabletIds() {
		if err = oprot.WriteFieldBegin("base_tablet_ids", thrift.SET, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteSetBegin(thrift.I64, len(p.BaseTabletIds)); err != nil {
			return err
		}
		for i := 0; i < len(p.BaseTabletIds); i++ {
			for j := i + 1; j < len(p.BaseTabletIds); j++ {
				if func(tgt, src types.TTabletId) bool {
					if tgt != src {
						return false
					}
					return true
				}(p.BaseTabletIds[i], p.BaseTabletIds[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.BaseTabletIds[i]))
				}
			}
		}
		for _, v := range p.BaseTabletIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TPublishVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPublishVersionRequest(%+v)", *p)

}

func (p *TPublishVersionRequest) DeepEqual(ano *TPublishVersionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TransactionId) {
		return false
	}
	if !p.Field2DeepEqual(ano.PartitionVersionInfos) {
		return false
	}
	if !p.Field3DeepEqual(ano.StrictMode) {
		return false
	}
	if !p.Field4DeepEqual(ano.BaseTabletIds) {
		return false
	}
	return true
}

func (p *TPublishVersionRequest) Field1DeepEqual(src types.TTransactionId) bool {

	if p.TransactionId != src {
		return false
	}
	return true
}
func (p *TPublishVersionRequest) Field2DeepEqual(src []*TPartitionVersionInfo) bool {

	if len(p.PartitionVersionInfos) != len(src) {
		return false
	}
	for i, v := range p.PartitionVersionInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPublishVersionRequest) Field3DeepEqual(src bool) bool {

	if p.StrictMode != src {
		return false
	}
	return true
}
func (p *TPublishVersionRequest) Field4DeepEqual(src []types.TTabletId) bool {

	if len(p.BaseTabletIds) != len(src) {
		return false
	}
	for i, v := range p.BaseTabletIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type TVisibleVersionReq struct {
	PartitionVersion map[types.TPartitionId]types.TVersion `thrift:"partition_version,1,required" frugal:"1,required,map<i64:i64>" json:"partition_version"`
}

func NewTVisibleVersionReq() *TVisibleVersionReq {
	return &TVisibleVersionReq{}
}

func (p *TVisibleVersionReq) InitDefault() {
}

func (p *TVisibleVersionReq) GetPartitionVersion() (v map[types.TPartitionId]types.TVersion) {
	return p.PartitionVersion
}
func (p *TVisibleVersionReq) SetPartitionVersion(val map[types.TPartitionId]types.TVersion) {
	p.PartitionVersion = val
}

var fieldIDToName_TVisibleVersionReq = map[int16]string{
	1: "partition_version",
}

func (p *TVisibleVersionReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPartitionVersion bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPartitionVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPartitionVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TVisibleVersionReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TVisibleVersionReq[fieldId]))
}

func (p *TVisibleVersionReq) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TPartitionId]types.TVersion, size)
	for i := 0; i < size; i++ {
		var _key types.TPartitionId
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val types.TVersion
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.PartitionVersion = _field
	return nil
}

func (p *TVisibleVersionReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TVisibleVersionReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TVisibleVersionReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("partition_version", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I64, thrift.I64, len(p.PartitionVersion)); err != nil {
		return err
	}
	for k, v := range p.PartitionVersion {
		if err := oprot.WriteI64(k); err != nil {
			return err
		}
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TVisibleVersionReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TVisibleVersionReq(%+v)", *p)

}

func (p *TVisibleVersionReq) DeepEqual(ano *TVisibleVersionReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PartitionVersion) {
		return false
	}
	return true
}

func (p *TVisibleVersionReq) Field1DeepEqual(src map[types.TPartitionId]types.TVersion) bool {

	if len(p.PartitionVersion) != len(src) {
		return false
	}
	for k, v := range p.PartitionVersion {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}

type TCalcDeleteBitmapPartitionInfo struct {
	PartitionId              types.TPartitionId `thrift:"partition_id,1,required" frugal:"1,required,i64" json:"partition_id"`
	Version                  types.TVersion     `thrift:"version,2,required" frugal:"2,required,i64" json:"version"`
	TabletIds                []types.TTabletId  `thrift:"tablet_ids,3,required" frugal:"3,required,list<i64>" json:"tablet_ids"`
	BaseCompactionCnts       []int64            `thrift:"base_compaction_cnts,4,optional" frugal:"4,optional,list<i64>" json:"base_compaction_cnts,omitempty"`
	CumulativeCompactionCnts []int64            `thrift:"cumulative_compaction_cnts,5,optional" frugal:"5,optional,list<i64>" json:"cumulative_compaction_cnts,omitempty"`
	CumulativePoints         []int64            `thrift:"cumulative_points,6,optional" frugal:"6,optional,list<i64>" json:"cumulative_points,omitempty"`
}

func NewTCalcDeleteBitmapPartitionInfo() *TCalcDeleteBitmapPartitionInfo {
	return &TCalcDeleteBitmapPartitionInfo{}
}

func (p *TCalcDeleteBitmapPartitionInfo) InitDefault() {
}

func (p *TCalcDeleteBitmapPartitionInfo) GetPartitionId() (v types.TPartitionId) {
	return p.PartitionId
}

func (p *TCalcDeleteBitmapPartitionInfo) GetVersion() (v types.TVersion) {
	return p.Version
}

func (p *TCalcDeleteBitmapPartitionInfo) GetTabletIds() (v []types.TTabletId) {
	return p.TabletIds
}

var TCalcDeleteBitmapPartitionInfo_BaseCompactionCnts_DEFAULT []int64

func (p *TCalcDeleteBitmapPartitionInfo) GetBaseCompactionCnts() (v []int64) {
	if !p.IsSetBaseCompactionCnts() {
		return TCalcDeleteBitmapPartitionInfo_BaseCompactionCnts_DEFAULT
	}
	return p.BaseCompactionCnts
}

var TCalcDeleteBitmapPartitionInfo_CumulativeCompactionCnts_DEFAULT []int64

func (p *TCalcDeleteBitmapPartitionInfo) GetCumulativeCompactionCnts() (v []int64) {
	if !p.IsSetCumulativeCompactionCnts() {
		return TCalcDeleteBitmapPartitionInfo_CumulativeCompactionCnts_DEFAULT
	}
	return p.CumulativeCompactionCnts
}

var TCalcDeleteBitmapPartitionInfo_CumulativePoints_DEFAULT []int64

func (p *TCalcDeleteBitmapPartitionInfo) GetCumulativePoints() (v []int64) {
	if !p.IsSetCumulativePoints() {
		return TCalcDeleteBitmapPartitionInfo_CumulativePoints_DEFAULT
	}
	return p.CumulativePoints
}
func (p *TCalcDeleteBitmapPartitionInfo) SetPartitionId(val types.TPartitionId) {
	p.PartitionId = val
}
func (p *TCalcDeleteBitmapPartitionInfo) SetVersion(val types.TVersion) {
	p.Version = val
}
func (p *TCalcDeleteBitmapPartitionInfo) SetTabletIds(val []types.TTabletId) {
	p.TabletIds = val
}
func (p *TCalcDeleteBitmapPartitionInfo) SetBaseCompactionCnts(val []int64) {
	p.BaseCompactionCnts = val
}
func (p *TCalcDeleteBitmapPartitionInfo) SetCumulativeCompactionCnts(val []int64) {
	p.CumulativeCompactionCnts = val
}
func (p *TCalcDeleteBitmapPartitionInfo) SetCumulativePoints(val []int64) {
	p.CumulativePoints = val
}

var fieldIDToName_TCalcDeleteBitmapPartitionInfo = map[int16]string{
	1: "partition_id",
	2: "version",
	3: "tablet_ids",
	4: "base_compaction_cnts",
	5: "cumulative_compaction_cnts",
	6: "cumulative_points",
}

func (p *TCalcDeleteBitmapPartitionInfo) IsSetBaseCompactionCnts() bool {
	return p.BaseCompactionCnts != nil
}

func (p *TCalcDeleteBitmapPartitionInfo) IsSetCumulativeCompactionCnts() bool {
	return p.CumulativeCompactionCnts != nil
}

func (p *TCalcDeleteBitmapPartitionInfo) IsSetCumulativePoints() bool {
	return p.CumulativePoints != nil
}

func (p *TCalcDeleteBitmapPartitionInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPartitionId bool = false
	var issetVersion bool = false
	var issetTabletIds bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPartitionId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPartitionId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTabletIds {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCalcDeleteBitmapPartitionInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCalcDeleteBitmapPartitionInfo[fieldId]))
}

func (p *TCalcDeleteBitmapPartitionInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TPartitionId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PartitionId = _field
	return nil
}
func (p *TCalcDeleteBitmapPartitionInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TVersion
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *TCalcDeleteBitmapPartitionInfo) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TTabletId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TTabletId
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TabletIds = _field
	return nil
}
func (p *TCalcDeleteBitmapPartitionInfo) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.BaseCompactionCnts = _field
	return nil
}
func (p *TCalcDeleteBitmapPartitionInfo) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.CumulativeCompactionCnts = _field
	return nil
}
func (p *TCalcDeleteBitmapPartitionInfo) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.CumulativePoints = _field
	return nil
}

func (p *TCalcDeleteBitmapPartitionInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCalcDeleteBitmapPartitionInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCalcDeleteBitmapPartitionInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("partition_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PartitionId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCalcDeleteBitmapPartitionInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCalcDeleteBitmapPartitionInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_ids", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.TabletIds)); err != nil {
		return err
	}
	for _, v := range p.TabletIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TCalcDeleteBitmapPartitionInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseCompactionCnts() {
		if err = oprot.WriteFieldBegin("base_compaction_cnts", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.BaseCompactionCnts)); err != nil {
			return err
		}
		for _, v := range p.BaseCompactionCnts {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TCalcDeleteBitmapPartitionInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCumulativeCompactionCnts() {
		if err = oprot.WriteFieldBegin("cumulative_compaction_cnts", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.CumulativeCompactionCnts)); err != nil {
			return err
		}
		for _, v := range p.CumulativeCompactionCnts {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TCalcDeleteBitmapPartitionInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCumulativePoints() {
		if err = oprot.WriteFieldBegin("cumulative_points", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.CumulativePoints)); err != nil {
			return err
		}
		for _, v := range p.CumulativePoints {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TCalcDeleteBitmapPartitionInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCalcDeleteBitmapPartitionInfo(%+v)", *p)

}

func (p *TCalcDeleteBitmapPartitionInfo) DeepEqual(ano *TCalcDeleteBitmapPartitionInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PartitionId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Version) {
		return false
	}
	if !p.Field3DeepEqual(ano.TabletIds) {
		return false
	}
	if !p.Field4DeepEqual(ano.BaseCompactionCnts) {
		return false
	}
	if !p.Field5DeepEqual(ano.CumulativeCompactionCnts) {
		return false
	}
	if !p.Field6DeepEqual(ano.CumulativePoints) {
		return false
	}
	return true
}

func (p *TCalcDeleteBitmapPartitionInfo) Field1DeepEqual(src types.TPartitionId) bool {

	if p.PartitionId != src {
		return false
	}
	return true
}
func (p *TCalcDeleteBitmapPartitionInfo) Field2DeepEqual(src types.TVersion) bool {

	if p.Version != src {
		return false
	}
	return true
}
func (p *TCalcDeleteBitmapPartitionInfo) Field3DeepEqual(src []types.TTabletId) bool {

	if len(p.TabletIds) != len(src) {
		return false
	}
	for i, v := range p.TabletIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TCalcDeleteBitmapPartitionInfo) Field4DeepEqual(src []int64) bool {

	if len(p.BaseCompactionCnts) != len(src) {
		return false
	}
	for i, v := range p.BaseCompactionCnts {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TCalcDeleteBitmapPartitionInfo) Field5DeepEqual(src []int64) bool {

	if len(p.CumulativeCompactionCnts) != len(src) {
		return false
	}
	for i, v := range p.CumulativeCompactionCnts {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TCalcDeleteBitmapPartitionInfo) Field6DeepEqual(src []int64) bool {

	if len(p.CumulativePoints) != len(src) {
		return false
	}
	for i, v := range p.CumulativePoints {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type TCalcDeleteBitmapRequest struct {
	TransactionId types.TTransactionId              `thrift:"transaction_id,1,required" frugal:"1,required,i64" json:"transaction_id"`
	Partitions    []*TCalcDeleteBitmapPartitionInfo `thrift:"partitions,2,required" frugal:"2,required,list<TCalcDeleteBitmapPartitionInfo>" json:"partitions"`
}

func NewTCalcDeleteBitmapRequest() *TCalcDeleteBitmapRequest {
	return &TCalcDeleteBitmapRequest{}
}

func (p *TCalcDeleteBitmapRequest) InitDefault() {
}

func (p *TCalcDeleteBitmapRequest) GetTransactionId() (v types.TTransactionId) {
	return p.TransactionId
}

func (p *TCalcDeleteBitmapRequest) GetPartitions() (v []*TCalcDeleteBitmapPartitionInfo) {
	return p.Partitions
}
func (p *TCalcDeleteBitmapRequest) SetTransactionId(val types.TTransactionId) {
	p.TransactionId = val
}
func (p *TCalcDeleteBitmapRequest) SetPartitions(val []*TCalcDeleteBitmapPartitionInfo) {
	p.Partitions = val
}

var fieldIDToName_TCalcDeleteBitmapRequest = map[int16]string{
	1: "transaction_id",
	2: "partitions",
}

func (p *TCalcDeleteBitmapRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTransactionId bool = false
	var issetPartitions bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTransactionId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPartitions = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTransactionId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPartitions {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCalcDeleteBitmapRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCalcDeleteBitmapRequest[fieldId]))
}

func (p *TCalcDeleteBitmapRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTransactionId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TransactionId = _field
	return nil
}
func (p *TCalcDeleteBitmapRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TCalcDeleteBitmapPartitionInfo, 0, size)
	values := make([]TCalcDeleteBitmapPartitionInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Partitions = _field
	return nil
}

func (p *TCalcDeleteBitmapRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCalcDeleteBitmapRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCalcDeleteBitmapRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transaction_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TransactionId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCalcDeleteBitmapRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("partitions", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Partitions)); err != nil {
		return err
	}
	for _, v := range p.Partitions {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCalcDeleteBitmapRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCalcDeleteBitmapRequest(%+v)", *p)

}

func (p *TCalcDeleteBitmapRequest) DeepEqual(ano *TCalcDeleteBitmapRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TransactionId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Partitions) {
		return false
	}
	return true
}

func (p *TCalcDeleteBitmapRequest) Field1DeepEqual(src types.TTransactionId) bool {

	if p.TransactionId != src {
		return false
	}
	return true
}
func (p *TCalcDeleteBitmapRequest) Field2DeepEqual(src []*TCalcDeleteBitmapPartitionInfo) bool {

	if len(p.Partitions) != len(src) {
		return false
	}
	for i, v := range p.Partitions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TClearAlterTaskRequest struct {
	TabletId   types.TTabletId   `thrift:"tablet_id,1,required" frugal:"1,required,i64" json:"tablet_id"`
	SchemaHash types.TSchemaHash `thrift:"schema_hash,2,required" frugal:"2,required,i32" json:"schema_hash"`
}

func NewTClearAlterTaskRequest() *TClearAlterTaskRequest {
	return &TClearAlterTaskRequest{}
}

func (p *TClearAlterTaskRequest) InitDefault() {
}

func (p *TClearAlterTaskRequest) GetTabletId() (v types.TTabletId) {
	return p.TabletId
}

func (p *TClearAlterTaskRequest) GetSchemaHash() (v types.TSchemaHash) {
	return p.SchemaHash
}
func (p *TClearAlterTaskRequest) SetTabletId(val types.TTabletId) {
	p.TabletId = val
}
func (p *TClearAlterTaskRequest) SetSchemaHash(val types.TSchemaHash) {
	p.SchemaHash = val
}

var fieldIDToName_TClearAlterTaskRequest = map[int16]string{
	1: "tablet_id",
	2: "schema_hash",
}

func (p *TClearAlterTaskRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TClearAlterTaskRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TClearAlterTaskRequest[fieldId]))
}

func (p *TClearAlterTaskRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TabletId = _field
	return nil
}
func (p *TClearAlterTaskRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SchemaHash = _field
	return nil
}

func (p *TClearAlterTaskRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TClearAlterTaskRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TClearAlterTaskRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TClearAlterTaskRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schema_hash", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SchemaHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TClearAlterTaskRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TClearAlterTaskRequest(%+v)", *p)

}

func (p *TClearAlterTaskRequest) DeepEqual(ano *TClearAlterTaskRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SchemaHash) {
		return false
	}
	return true
}

func (p *TClearAlterTaskRequest) Field1DeepEqual(src types.TTabletId) bool {

	if p.TabletId != src {
		return false
	}
	return true
}
func (p *TClearAlterTaskRequest) Field2DeepEqual(src types.TSchemaHash) bool {

	if p.SchemaHash != src {
		return false
	}
	return true
}

type TClearTransactionTaskRequest struct {
	TransactionId types.TTransactionId `thrift:"transaction_id,1,required" frugal:"1,required,i64" json:"transaction_id"`
	PartitionId   []types.TPartitionId `thrift:"partition_id,2,required" frugal:"2,required,list<i64>" json:"partition_id"`
}

func NewTClearTransactionTaskRequest() *TClearTransactionTaskRequest {
	return &TClearTransactionTaskRequest{}
}

func (p *TClearTransactionTaskRequest) InitDefault() {
}

func (p *TClearTransactionTaskRequest) GetTransactionId() (v types.TTransactionId) {
	return p.TransactionId
}

func (p *TClearTransactionTaskRequest) GetPartitionId() (v []types.TPartitionId) {
	return p.PartitionId
}
func (p *TClearTransactionTaskRequest) SetTransactionId(val types.TTransactionId) {
	p.TransactionId = val
}
func (p *TClearTransactionTaskRequest) SetPartitionId(val []types.TPartitionId) {
	p.PartitionId = val
}

var fieldIDToName_TClearTransactionTaskRequest = map[int16]string{
	1: "transaction_id",
	2: "partition_id",
}

func (p *TClearTransactionTaskRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTransactionId bool = false
	var issetPartitionId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTransactionId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPartitionId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTransactionId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPartitionId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TClearTransactionTaskRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TClearTransactionTaskRequest[fieldId]))
}

func (p *TClearTransactionTaskRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTransactionId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TransactionId = _field
	return nil
}
func (p *TClearTransactionTaskRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TPartitionId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TPartitionId
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PartitionId = _field
	return nil
}

func (p *TClearTransactionTaskRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TClearTransactionTaskRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TClearTransactionTaskRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transaction_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TransactionId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TClearTransactionTaskRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("partition_id", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.PartitionId)); err != nil {
		return err
	}
	for _, v := range p.PartitionId {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TClearTransactionTaskRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TClearTransactionTaskRequest(%+v)", *p)

}

func (p *TClearTransactionTaskRequest) DeepEqual(ano *TClearTransactionTaskRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TransactionId) {
		return false
	}
	if !p.Field2DeepEqual(ano.PartitionId) {
		return false
	}
	return true
}

func (p *TClearTransactionTaskRequest) Field1DeepEqual(src types.TTransactionId) bool {

	if p.TransactionId != src {
		return false
	}
	return true
}
func (p *TClearTransactionTaskRequest) Field2DeepEqual(src []types.TPartitionId) bool {

	if len(p.PartitionId) != len(src) {
		return false
	}
	for i, v := range p.PartitionId {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type TRecoverTabletReq struct {
	TabletId    *types.TTabletId    `thrift:"tablet_id,1,optional" frugal:"1,optional,i64" json:"tablet_id,omitempty"`
	SchemaHash  *types.TSchemaHash  `thrift:"schema_hash,2,optional" frugal:"2,optional,i32" json:"schema_hash,omitempty"`
	Version     *types.TVersion     `thrift:"version,3,optional" frugal:"3,optional,i64" json:"version,omitempty"`
	VersionHash *types.TVersionHash `thrift:"version_hash,4,optional" frugal:"4,optional,i64" json:"version_hash,omitempty"`
}

func NewTRecoverTabletReq() *TRecoverTabletReq {
	return &TRecoverTabletReq{}
}

func (p *TRecoverTabletReq) InitDefault() {
}

var TRecoverTabletReq_TabletId_DEFAULT types.TTabletId

func (p *TRecoverTabletReq) GetTabletId() (v types.TTabletId) {
	if !p.IsSetTabletId() {
		return TRecoverTabletReq_TabletId_DEFAULT
	}
	return *p.TabletId
}

var TRecoverTabletReq_SchemaHash_DEFAULT types.TSchemaHash

func (p *TRecoverTabletReq) GetSchemaHash() (v types.TSchemaHash) {
	if !p.IsSetSchemaHash() {
		return TRecoverTabletReq_SchemaHash_DEFAULT
	}
	return *p.SchemaHash
}

var TRecoverTabletReq_Version_DEFAULT types.TVersion

func (p *TRecoverTabletReq) GetVersion() (v types.TVersion) {
	if !p.IsSetVersion() {
		return TRecoverTabletReq_Version_DEFAULT
	}
	return *p.Version
}

var TRecoverTabletReq_VersionHash_DEFAULT types.TVersionHash

func (p *TRecoverTabletReq) GetVersionHash() (v types.TVersionHash) {
	if !p.IsSetVersionHash() {
		return TRecoverTabletReq_VersionHash_DEFAULT
	}
	return *p.VersionHash
}
func (p *TRecoverTabletReq) SetTabletId(val *types.TTabletId) {
	p.TabletId = val
}
func (p *TRecoverTabletReq) SetSchemaHash(val *types.TSchemaHash) {
	p.SchemaHash = val
}
func (p *TRecoverTabletReq) SetVersion(val *types.TVersion) {
	p.Version = val
}
func (p *TRecoverTabletReq) SetVersionHash(val *types.TVersionHash) {
	p.VersionHash = val
}

var fieldIDToName_TRecoverTabletReq = map[int16]string{
	1: "tablet_id",
	2: "schema_hash",
	3: "version",
	4: "version_hash",
}

func (p *TRecoverTabletReq) IsSetTabletId() bool {
	return p.TabletId != nil
}

func (p *TRecoverTabletReq) IsSetSchemaHash() bool {
	return p.SchemaHash != nil
}

func (p *TRecoverTabletReq) IsSetVersion() bool {
	return p.Version != nil
}

func (p *TRecoverTabletReq) IsSetVersionHash() bool {
	return p.VersionHash != nil
}

func (p *TRecoverTabletReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRecoverTabletReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TRecoverTabletReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TabletId = _field
	return nil
}
func (p *TRecoverTabletReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SchemaHash = _field
	return nil
}
func (p *TRecoverTabletReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *types.TVersion
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *TRecoverTabletReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *types.TVersionHash
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionHash = _field
	return nil
}

func (p *TRecoverTabletReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TRecoverTabletReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TRecoverTabletReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletId() {
		if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TabletId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TRecoverTabletReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaHash() {
		if err = oprot.WriteFieldBegin("schema_hash", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SchemaHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TRecoverTabletReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TRecoverTabletReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionHash() {
		if err = oprot.WriteFieldBegin("version_hash", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VersionHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TRecoverTabletReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRecoverTabletReq(%+v)", *p)

}

func (p *TRecoverTabletReq) DeepEqual(ano *TRecoverTabletReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SchemaHash) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.VersionHash) {
		return false
	}
	return true
}

func (p *TRecoverTabletReq) Field1DeepEqual(src *types.TTabletId) bool {

	if p.TabletId == src {
		return true
	} else if p.TabletId == nil || src == nil {
		return false
	}
	if *p.TabletId != *src {
		return false
	}
	return true
}
func (p *TRecoverTabletReq) Field2DeepEqual(src *types.TSchemaHash) bool {

	if p.SchemaHash == src {
		return true
	} else if p.SchemaHash == nil || src == nil {
		return false
	}
	if *p.SchemaHash != *src {
		return false
	}
	return true
}
func (p *TRecoverTabletReq) Field3DeepEqual(src *types.TVersion) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if *p.Version != *src {
		return false
	}
	return true
}
func (p *TRecoverTabletReq) Field4DeepEqual(src *types.TVersionHash) bool {

	if p.VersionHash == src {
		return true
	} else if p.VersionHash == nil || src == nil {
		return false
	}
	if *p.VersionHash != *src {
		return false
	}
	return true
}

type TTabletMetaInfo struct {
	TabletId                                  *types.TTabletId    `thrift:"tablet_id,1,optional" frugal:"1,optional,i64" json:"tablet_id,omitempty"`
	SchemaHash                                *types.TSchemaHash  `thrift:"schema_hash,2,optional" frugal:"2,optional,i32" json:"schema_hash,omitempty"`
	PartitionId                               *types.TPartitionId `thrift:"partition_id,3,optional" frugal:"3,optional,i64" json:"partition_id,omitempty"`
	IsInMemory                                *bool               `thrift:"is_in_memory,5,optional" frugal:"5,optional,bool" json:"is_in_memory,omitempty"`
	StoragePolicyId                           *int64              `thrift:"storage_policy_id,7,optional" frugal:"7,optional,i64" json:"storage_policy_id,omitempty"`
	ReplicaId                                 *types.TReplicaId   `thrift:"replica_id,8,optional" frugal:"8,optional,i64" json:"replica_id,omitempty"`
	BinlogConfig                              *TBinlogConfig      `thrift:"binlog_config,9,optional" frugal:"9,optional,TBinlogConfig" json:"binlog_config,omitempty"`
	CompactionPolicy                          *string             `thrift:"compaction_policy,10,optional" frugal:"10,optional,string" json:"compaction_policy,omitempty"`
	TimeSeriesCompactionGoalSizeMbytes        *int64              `thrift:"time_series_compaction_goal_size_mbytes,11,optional" frugal:"11,optional,i64" json:"time_series_compaction_goal_size_mbytes,omitempty"`
	TimeSeriesCompactionFileCountThreshold    *int64              `thrift:"time_series_compaction_file_count_threshold,12,optional" frugal:"12,optional,i64" json:"time_series_compaction_file_count_threshold,omitempty"`
	TimeSeriesCompactionTimeThresholdSeconds  *int64              `thrift:"time_series_compaction_time_threshold_seconds,13,optional" frugal:"13,optional,i64" json:"time_series_compaction_time_threshold_seconds,omitempty"`
	EnableSingleReplicaCompaction             *bool               `thrift:"enable_single_replica_compaction,14,optional" frugal:"14,optional,bool" json:"enable_single_replica_compaction,omitempty"`
	SkipWriteIndexOnLoad                      *bool               `thrift:"skip_write_index_on_load,15,optional" frugal:"15,optional,bool" json:"skip_write_index_on_load,omitempty"`
	DisableAutoCompaction                     *bool               `thrift:"disable_auto_compaction,16,optional" frugal:"16,optional,bool" json:"disable_auto_compaction,omitempty"`
	TimeSeriesCompactionEmptyRowsetsThreshold *int64              `thrift:"time_series_compaction_empty_rowsets_threshold,17,optional" frugal:"17,optional,i64" json:"time_series_compaction_empty_rowsets_threshold,omitempty"`
	TimeSeriesCompactionLevelThreshold        *int64              `thrift:"time_series_compaction_level_threshold,18,optional" frugal:"18,optional,i64" json:"time_series_compaction_level_threshold,omitempty"`
}

func NewTTabletMetaInfo() *TTabletMetaInfo {
	return &TTabletMetaInfo{}
}

func (p *TTabletMetaInfo) InitDefault() {
}

var TTabletMetaInfo_TabletId_DEFAULT types.TTabletId

func (p *TTabletMetaInfo) GetTabletId() (v types.TTabletId) {
	if !p.IsSetTabletId() {
		return TTabletMetaInfo_TabletId_DEFAULT
	}
	return *p.TabletId
}

var TTabletMetaInfo_SchemaHash_DEFAULT types.TSchemaHash

func (p *TTabletMetaInfo) GetSchemaHash() (v types.TSchemaHash) {
	if !p.IsSetSchemaHash() {
		return TTabletMetaInfo_SchemaHash_DEFAULT
	}
	return *p.SchemaHash
}

var TTabletMetaInfo_PartitionId_DEFAULT types.TPartitionId

func (p *TTabletMetaInfo) GetPartitionId() (v types.TPartitionId) {
	if !p.IsSetPartitionId() {
		return TTabletMetaInfo_PartitionId_DEFAULT
	}
	return *p.PartitionId
}

var TTabletMetaInfo_IsInMemory_DEFAULT bool

func (p *TTabletMetaInfo) GetIsInMemory() (v bool) {
	if !p.IsSetIsInMemory() {
		return TTabletMetaInfo_IsInMemory_DEFAULT
	}
	return *p.IsInMemory
}

var TTabletMetaInfo_StoragePolicyId_DEFAULT int64

func (p *TTabletMetaInfo) GetStoragePolicyId() (v int64) {
	if !p.IsSetStoragePolicyId() {
		return TTabletMetaInfo_StoragePolicyId_DEFAULT
	}
	return *p.StoragePolicyId
}

var TTabletMetaInfo_ReplicaId_DEFAULT types.TReplicaId

func (p *TTabletMetaInfo) GetReplicaId() (v types.TReplicaId) {
	if !p.IsSetReplicaId() {
		return TTabletMetaInfo_ReplicaId_DEFAULT
	}
	return *p.ReplicaId
}

var TTabletMetaInfo_BinlogConfig_DEFAULT *TBinlogConfig

func (p *TTabletMetaInfo) GetBinlogConfig() (v *TBinlogConfig) {
	if !p.IsSetBinlogConfig() {
		return TTabletMetaInfo_BinlogConfig_DEFAULT
	}
	return p.BinlogConfig
}

var TTabletMetaInfo_CompactionPolicy_DEFAULT string

func (p *TTabletMetaInfo) GetCompactionPolicy() (v string) {
	if !p.IsSetCompactionPolicy() {
		return TTabletMetaInfo_CompactionPolicy_DEFAULT
	}
	return *p.CompactionPolicy
}

var TTabletMetaInfo_TimeSeriesCompactionGoalSizeMbytes_DEFAULT int64

func (p *TTabletMetaInfo) GetTimeSeriesCompactionGoalSizeMbytes() (v int64) {
	if !p.IsSetTimeSeriesCompactionGoalSizeMbytes() {
		return TTabletMetaInfo_TimeSeriesCompactionGoalSizeMbytes_DEFAULT
	}
	return *p.TimeSeriesCompactionGoalSizeMbytes
}

var TTabletMetaInfo_TimeSeriesCompactionFileCountThreshold_DEFAULT int64

func (p *TTabletMetaInfo) GetTimeSeriesCompactionFileCountThreshold() (v int64) {
	if !p.IsSetTimeSeriesCompactionFileCountThreshold() {
		return TTabletMetaInfo_TimeSeriesCompactionFileCountThreshold_DEFAULT
	}
	return *p.TimeSeriesCompactionFileCountThreshold
}

var TTabletMetaInfo_TimeSeriesCompactionTimeThresholdSeconds_DEFAULT int64

func (p *TTabletMetaInfo) GetTimeSeriesCompactionTimeThresholdSeconds() (v int64) {
	if !p.IsSetTimeSeriesCompactionTimeThresholdSeconds() {
		return TTabletMetaInfo_TimeSeriesCompactionTimeThresholdSeconds_DEFAULT
	}
	return *p.TimeSeriesCompactionTimeThresholdSeconds
}

var TTabletMetaInfo_EnableSingleReplicaCompaction_DEFAULT bool

func (p *TTabletMetaInfo) GetEnableSingleReplicaCompaction() (v bool) {
	if !p.IsSetEnableSingleReplicaCompaction() {
		return TTabletMetaInfo_EnableSingleReplicaCompaction_DEFAULT
	}
	return *p.EnableSingleReplicaCompaction
}

var TTabletMetaInfo_SkipWriteIndexOnLoad_DEFAULT bool

func (p *TTabletMetaInfo) GetSkipWriteIndexOnLoad() (v bool) {
	if !p.IsSetSkipWriteIndexOnLoad() {
		return TTabletMetaInfo_SkipWriteIndexOnLoad_DEFAULT
	}
	return *p.SkipWriteIndexOnLoad
}

var TTabletMetaInfo_DisableAutoCompaction_DEFAULT bool

func (p *TTabletMetaInfo) GetDisableAutoCompaction() (v bool) {
	if !p.IsSetDisableAutoCompaction() {
		return TTabletMetaInfo_DisableAutoCompaction_DEFAULT
	}
	return *p.DisableAutoCompaction
}

var TTabletMetaInfo_TimeSeriesCompactionEmptyRowsetsThreshold_DEFAULT int64

func (p *TTabletMetaInfo) GetTimeSeriesCompactionEmptyRowsetsThreshold() (v int64) {
	if !p.IsSetTimeSeriesCompactionEmptyRowsetsThreshold() {
		return TTabletMetaInfo_TimeSeriesCompactionEmptyRowsetsThreshold_DEFAULT
	}
	return *p.TimeSeriesCompactionEmptyRowsetsThreshold
}

var TTabletMetaInfo_TimeSeriesCompactionLevelThreshold_DEFAULT int64

func (p *TTabletMetaInfo) GetTimeSeriesCompactionLevelThreshold() (v int64) {
	if !p.IsSetTimeSeriesCompactionLevelThreshold() {
		return TTabletMetaInfo_TimeSeriesCompactionLevelThreshold_DEFAULT
	}
	return *p.TimeSeriesCompactionLevelThreshold
}
func (p *TTabletMetaInfo) SetTabletId(val *types.TTabletId) {
	p.TabletId = val
}
func (p *TTabletMetaInfo) SetSchemaHash(val *types.TSchemaHash) {
	p.SchemaHash = val
}
func (p *TTabletMetaInfo) SetPartitionId(val *types.TPartitionId) {
	p.PartitionId = val
}
func (p *TTabletMetaInfo) SetIsInMemory(val *bool) {
	p.IsInMemory = val
}
func (p *TTabletMetaInfo) SetStoragePolicyId(val *int64) {
	p.StoragePolicyId = val
}
func (p *TTabletMetaInfo) SetReplicaId(val *types.TReplicaId) {
	p.ReplicaId = val
}
func (p *TTabletMetaInfo) SetBinlogConfig(val *TBinlogConfig) {
	p.BinlogConfig = val
}
func (p *TTabletMetaInfo) SetCompactionPolicy(val *string) {
	p.CompactionPolicy = val
}
func (p *TTabletMetaInfo) SetTimeSeriesCompactionGoalSizeMbytes(val *int64) {
	p.TimeSeriesCompactionGoalSizeMbytes = val
}
func (p *TTabletMetaInfo) SetTimeSeriesCompactionFileCountThreshold(val *int64) {
	p.TimeSeriesCompactionFileCountThreshold = val
}
func (p *TTabletMetaInfo) SetTimeSeriesCompactionTimeThresholdSeconds(val *int64) {
	p.TimeSeriesCompactionTimeThresholdSeconds = val
}
func (p *TTabletMetaInfo) SetEnableSingleReplicaCompaction(val *bool) {
	p.EnableSingleReplicaCompaction = val
}
func (p *TTabletMetaInfo) SetSkipWriteIndexOnLoad(val *bool) {
	p.SkipWriteIndexOnLoad = val
}
func (p *TTabletMetaInfo) SetDisableAutoCompaction(val *bool) {
	p.DisableAutoCompaction = val
}
func (p *TTabletMetaInfo) SetTimeSeriesCompactionEmptyRowsetsThreshold(val *int64) {
	p.TimeSeriesCompactionEmptyRowsetsThreshold = val
}
func (p *TTabletMetaInfo) SetTimeSeriesCompactionLevelThreshold(val *int64) {
	p.TimeSeriesCompactionLevelThreshold = val
}

var fieldIDToName_TTabletMetaInfo = map[int16]string{
	1:  "tablet_id",
	2:  "schema_hash",
	3:  "partition_id",
	5:  "is_in_memory",
	7:  "storage_policy_id",
	8:  "replica_id",
	9:  "binlog_config",
	10: "compaction_policy",
	11: "time_series_compaction_goal_size_mbytes",
	12: "time_series_compaction_file_count_threshold",
	13: "time_series_compaction_time_threshold_seconds",
	14: "enable_single_replica_compaction",
	15: "skip_write_index_on_load",
	16: "disable_auto_compaction",
	17: "time_series_compaction_empty_rowsets_threshold",
	18: "time_series_compaction_level_threshold",
}

func (p *TTabletMetaInfo) IsSetTabletId() bool {
	return p.TabletId != nil
}

func (p *TTabletMetaInfo) IsSetSchemaHash() bool {
	return p.SchemaHash != nil
}

func (p *TTabletMetaInfo) IsSetPartitionId() bool {
	return p.PartitionId != nil
}

func (p *TTabletMetaInfo) IsSetIsInMemory() bool {
	return p.IsInMemory != nil
}

func (p *TTabletMetaInfo) IsSetStoragePolicyId() bool {
	return p.StoragePolicyId != nil
}

func (p *TTabletMetaInfo) IsSetReplicaId() bool {
	return p.ReplicaId != nil
}

func (p *TTabletMetaInfo) IsSetBinlogConfig() bool {
	return p.BinlogConfig != nil
}

func (p *TTabletMetaInfo) IsSetCompactionPolicy() bool {
	return p.CompactionPolicy != nil
}

func (p *TTabletMetaInfo) IsSetTimeSeriesCompactionGoalSizeMbytes() bool {
	return p.TimeSeriesCompactionGoalSizeMbytes != nil
}

func (p *TTabletMetaInfo) IsSetTimeSeriesCompactionFileCountThreshold() bool {
	return p.TimeSeriesCompactionFileCountThreshold != nil
}

func (p *TTabletMetaInfo) IsSetTimeSeriesCompactionTimeThresholdSeconds() bool {
	return p.TimeSeriesCompactionTimeThresholdSeconds != nil
}

func (p *TTabletMetaInfo) IsSetEnableSingleReplicaCompaction() bool {
	return p.EnableSingleReplicaCompaction != nil
}

func (p *TTabletMetaInfo) IsSetSkipWriteIndexOnLoad() bool {
	return p.SkipWriteIndexOnLoad != nil
}

func (p *TTabletMetaInfo) IsSetDisableAutoCompaction() bool {
	return p.DisableAutoCompaction != nil
}

func (p *TTabletMetaInfo) IsSetTimeSeriesCompactionEmptyRowsetsThreshold() bool {
	return p.TimeSeriesCompactionEmptyRowsetsThreshold != nil
}

func (p *TTabletMetaInfo) IsSetTimeSeriesCompactionLevelThreshold() bool {
	return p.TimeSeriesCompactionLevelThreshold != nil
}

func (p *TTabletMetaInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletMetaInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTabletMetaInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TabletId = _field
	return nil
}
func (p *TTabletMetaInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SchemaHash = _field
	return nil
}
func (p *TTabletMetaInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field *types.TPartitionId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PartitionId = _field
	return nil
}
func (p *TTabletMetaInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsInMemory = _field
	return nil
}
func (p *TTabletMetaInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StoragePolicyId = _field
	return nil
}
func (p *TTabletMetaInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field *types.TReplicaId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReplicaId = _field
	return nil
}
func (p *TTabletMetaInfo) ReadField9(iprot thrift.TProtocol) error {
	_field := NewTBinlogConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BinlogConfig = _field
	return nil
}
func (p *TTabletMetaInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CompactionPolicy = _field
	return nil
}
func (p *TTabletMetaInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TimeSeriesCompactionGoalSizeMbytes = _field
	return nil
}
func (p *TTabletMetaInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TimeSeriesCompactionFileCountThreshold = _field
	return nil
}
func (p *TTabletMetaInfo) ReadField13(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TimeSeriesCompactionTimeThresholdSeconds = _field
	return nil
}
func (p *TTabletMetaInfo) ReadField14(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnableSingleReplicaCompaction = _field
	return nil
}
func (p *TTabletMetaInfo) ReadField15(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SkipWriteIndexOnLoad = _field
	return nil
}
func (p *TTabletMetaInfo) ReadField16(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DisableAutoCompaction = _field
	return nil
}
func (p *TTabletMetaInfo) ReadField17(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TimeSeriesCompactionEmptyRowsetsThreshold = _field
	return nil
}
func (p *TTabletMetaInfo) ReadField18(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TimeSeriesCompactionLevelThreshold = _field
	return nil
}

func (p *TTabletMetaInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTabletMetaInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTabletMetaInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletId() {
		if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TabletId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTabletMetaInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaHash() {
		if err = oprot.WriteFieldBegin("schema_hash", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SchemaHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTabletMetaInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionId() {
		if err = oprot.WriteFieldBegin("partition_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PartitionId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTabletMetaInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsInMemory() {
		if err = oprot.WriteFieldBegin("is_in_memory", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsInMemory); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TTabletMetaInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoragePolicyId() {
		if err = oprot.WriteFieldBegin("storage_policy_id", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.StoragePolicyId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TTabletMetaInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicaId() {
		if err = oprot.WriteFieldBegin("replica_id", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ReplicaId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TTabletMetaInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetBinlogConfig() {
		if err = oprot.WriteFieldBegin("binlog_config", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BinlogConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TTabletMetaInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompactionPolicy() {
		if err = oprot.WriteFieldBegin("compaction_policy", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CompactionPolicy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TTabletMetaInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeSeriesCompactionGoalSizeMbytes() {
		if err = oprot.WriteFieldBegin("time_series_compaction_goal_size_mbytes", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TimeSeriesCompactionGoalSizeMbytes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TTabletMetaInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeSeriesCompactionFileCountThreshold() {
		if err = oprot.WriteFieldBegin("time_series_compaction_file_count_threshold", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TimeSeriesCompactionFileCountThreshold); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TTabletMetaInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeSeriesCompactionTimeThresholdSeconds() {
		if err = oprot.WriteFieldBegin("time_series_compaction_time_threshold_seconds", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TimeSeriesCompactionTimeThresholdSeconds); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TTabletMetaInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableSingleReplicaCompaction() {
		if err = oprot.WriteFieldBegin("enable_single_replica_compaction", thrift.BOOL, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableSingleReplicaCompaction); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TTabletMetaInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipWriteIndexOnLoad() {
		if err = oprot.WriteFieldBegin("skip_write_index_on_load", thrift.BOOL, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.SkipWriteIndexOnLoad); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TTabletMetaInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisableAutoCompaction() {
		if err = oprot.WriteFieldBegin("disable_auto_compaction", thrift.BOOL, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.DisableAutoCompaction); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TTabletMetaInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeSeriesCompactionEmptyRowsetsThreshold() {
		if err = oprot.WriteFieldBegin("time_series_compaction_empty_rowsets_threshold", thrift.I64, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TimeSeriesCompactionEmptyRowsetsThreshold); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TTabletMetaInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeSeriesCompactionLevelThreshold() {
		if err = oprot.WriteFieldBegin("time_series_compaction_level_threshold", thrift.I64, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TimeSeriesCompactionLevelThreshold); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TTabletMetaInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTabletMetaInfo(%+v)", *p)

}

func (p *TTabletMetaInfo) DeepEqual(ano *TTabletMetaInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SchemaHash) {
		return false
	}
	if !p.Field3DeepEqual(ano.PartitionId) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsInMemory) {
		return false
	}
	if !p.Field7DeepEqual(ano.StoragePolicyId) {
		return false
	}
	if !p.Field8DeepEqual(ano.ReplicaId) {
		return false
	}
	if !p.Field9DeepEqual(ano.BinlogConfig) {
		return false
	}
	if !p.Field10DeepEqual(ano.CompactionPolicy) {
		return false
	}
	if !p.Field11DeepEqual(ano.TimeSeriesCompactionGoalSizeMbytes) {
		return false
	}
	if !p.Field12DeepEqual(ano.TimeSeriesCompactionFileCountThreshold) {
		return false
	}
	if !p.Field13DeepEqual(ano.TimeSeriesCompactionTimeThresholdSeconds) {
		return false
	}
	if !p.Field14DeepEqual(ano.EnableSingleReplicaCompaction) {
		return false
	}
	if !p.Field15DeepEqual(ano.SkipWriteIndexOnLoad) {
		return false
	}
	if !p.Field16DeepEqual(ano.DisableAutoCompaction) {
		return false
	}
	if !p.Field17DeepEqual(ano.TimeSeriesCompactionEmptyRowsetsThreshold) {
		return false
	}
	if !p.Field18DeepEqual(ano.TimeSeriesCompactionLevelThreshold) {
		return false
	}
	return true
}

func (p *TTabletMetaInfo) Field1DeepEqual(src *types.TTabletId) bool {

	if p.TabletId == src {
		return true
	} else if p.TabletId == nil || src == nil {
		return false
	}
	if *p.TabletId != *src {
		return false
	}
	return true
}
func (p *TTabletMetaInfo) Field2DeepEqual(src *types.TSchemaHash) bool {

	if p.SchemaHash == src {
		return true
	} else if p.SchemaHash == nil || src == nil {
		return false
	}
	if *p.SchemaHash != *src {
		return false
	}
	return true
}
func (p *TTabletMetaInfo) Field3DeepEqual(src *types.TPartitionId) bool {

	if p.PartitionId == src {
		return true
	} else if p.PartitionId == nil || src == nil {
		return false
	}
	if *p.PartitionId != *src {
		return false
	}
	return true
}
func (p *TTabletMetaInfo) Field5DeepEqual(src *bool) bool {

	if p.IsInMemory == src {
		return true
	} else if p.IsInMemory == nil || src == nil {
		return false
	}
	if *p.IsInMemory != *src {
		return false
	}
	return true
}
func (p *TTabletMetaInfo) Field7DeepEqual(src *int64) bool {

	if p.StoragePolicyId == src {
		return true
	} else if p.StoragePolicyId == nil || src == nil {
		return false
	}
	if *p.StoragePolicyId != *src {
		return false
	}
	return true
}
func (p *TTabletMetaInfo) Field8DeepEqual(src *types.TReplicaId) bool {

	if p.ReplicaId == src {
		return true
	} else if p.ReplicaId == nil || src == nil {
		return false
	}
	if *p.ReplicaId != *src {
		return false
	}
	return true
}
func (p *TTabletMetaInfo) Field9DeepEqual(src *TBinlogConfig) bool {

	if !p.BinlogConfig.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTabletMetaInfo) Field10DeepEqual(src *string) bool {

	if p.CompactionPolicy == src {
		return true
	} else if p.CompactionPolicy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CompactionPolicy, *src) != 0 {
		return false
	}
	return true
}
func (p *TTabletMetaInfo) Field11DeepEqual(src *int64) bool {

	if p.TimeSeriesCompactionGoalSizeMbytes == src {
		return true
	} else if p.TimeSeriesCompactionGoalSizeMbytes == nil || src == nil {
		return false
	}
	if *p.TimeSeriesCompactionGoalSizeMbytes != *src {
		return false
	}
	return true
}
func (p *TTabletMetaInfo) Field12DeepEqual(src *int64) bool {

	if p.TimeSeriesCompactionFileCountThreshold == src {
		return true
	} else if p.TimeSeriesCompactionFileCountThreshold == nil || src == nil {
		return false
	}
	if *p.TimeSeriesCompactionFileCountThreshold != *src {
		return false
	}
	return true
}
func (p *TTabletMetaInfo) Field13DeepEqual(src *int64) bool {

	if p.TimeSeriesCompactionTimeThresholdSeconds == src {
		return true
	} else if p.TimeSeriesCompactionTimeThresholdSeconds == nil || src == nil {
		return false
	}
	if *p.TimeSeriesCompactionTimeThresholdSeconds != *src {
		return false
	}
	return true
}
func (p *TTabletMetaInfo) Field14DeepEqual(src *bool) bool {

	if p.EnableSingleReplicaCompaction == src {
		return true
	} else if p.EnableSingleReplicaCompaction == nil || src == nil {
		return false
	}
	if *p.EnableSingleReplicaCompaction != *src {
		return false
	}
	return true
}
func (p *TTabletMetaInfo) Field15DeepEqual(src *bool) bool {

	if p.SkipWriteIndexOnLoad == src {
		return true
	} else if p.SkipWriteIndexOnLoad == nil || src == nil {
		return false
	}
	if *p.SkipWriteIndexOnLoad != *src {
		return false
	}
	return true
}
func (p *TTabletMetaInfo) Field16DeepEqual(src *bool) bool {

	if p.DisableAutoCompaction == src {
		return true
	} else if p.DisableAutoCompaction == nil || src == nil {
		return false
	}
	if *p.DisableAutoCompaction != *src {
		return false
	}
	return true
}
func (p *TTabletMetaInfo) Field17DeepEqual(src *int64) bool {

	if p.TimeSeriesCompactionEmptyRowsetsThreshold == src {
		return true
	} else if p.TimeSeriesCompactionEmptyRowsetsThreshold == nil || src == nil {
		return false
	}
	if *p.TimeSeriesCompactionEmptyRowsetsThreshold != *src {
		return false
	}
	return true
}
func (p *TTabletMetaInfo) Field18DeepEqual(src *int64) bool {

	if p.TimeSeriesCompactionLevelThreshold == src {
		return true
	} else if p.TimeSeriesCompactionLevelThreshold == nil || src == nil {
		return false
	}
	if *p.TimeSeriesCompactionLevelThreshold != *src {
		return false
	}
	return true
}

type TUpdateTabletMetaInfoReq struct {
	TabletMetaInfos []*TTabletMetaInfo `thrift:"tabletMetaInfos,1,optional" frugal:"1,optional,list<TTabletMetaInfo>" json:"tabletMetaInfos,omitempty"`
}

func NewTUpdateTabletMetaInfoReq() *TUpdateTabletMetaInfoReq {
	return &TUpdateTabletMetaInfoReq{}
}

func (p *TUpdateTabletMetaInfoReq) InitDefault() {
}

var TUpdateTabletMetaInfoReq_TabletMetaInfos_DEFAULT []*TTabletMetaInfo

func (p *TUpdateTabletMetaInfoReq) GetTabletMetaInfos() (v []*TTabletMetaInfo) {
	if !p.IsSetTabletMetaInfos() {
		return TUpdateTabletMetaInfoReq_TabletMetaInfos_DEFAULT
	}
	return p.TabletMetaInfos
}
func (p *TUpdateTabletMetaInfoReq) SetTabletMetaInfos(val []*TTabletMetaInfo) {
	p.TabletMetaInfos = val
}

var fieldIDToName_TUpdateTabletMetaInfoReq = map[int16]string{
	1: "tabletMetaInfos",
}

func (p *TUpdateTabletMetaInfoReq) IsSetTabletMetaInfos() bool {
	return p.TabletMetaInfos != nil
}

func (p *TUpdateTabletMetaInfoReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TUpdateTabletMetaInfoReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TUpdateTabletMetaInfoReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTabletMetaInfo, 0, size)
	values := make([]TTabletMetaInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TabletMetaInfos = _field
	return nil
}

func (p *TUpdateTabletMetaInfoReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TUpdateTabletMetaInfoReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TUpdateTabletMetaInfoReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletMetaInfos() {
		if err = oprot.WriteFieldBegin("tabletMetaInfos", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TabletMetaInfos)); err != nil {
			return err
		}
		for _, v := range p.TabletMetaInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TUpdateTabletMetaInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TUpdateTabletMetaInfoReq(%+v)", *p)

}

func (p *TUpdateTabletMetaInfoReq) DeepEqual(ano *TUpdateTabletMetaInfoReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletMetaInfos) {
		return false
	}
	return true
}

func (p *TUpdateTabletMetaInfoReq) Field1DeepEqual(src []*TTabletMetaInfo) bool {

	if len(p.TabletMetaInfos) != len(src) {
		return false
	}
	for i, v := range p.TabletMetaInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TPluginMetaInfo struct {
	Name   string  `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	Type   int32   `thrift:"type,2,required" frugal:"2,required,i32" json:"type"`
	SoName *string `thrift:"so_name,3,optional" frugal:"3,optional,string" json:"so_name,omitempty"`
	Source *string `thrift:"source,4,optional" frugal:"4,optional,string" json:"source,omitempty"`
}

func NewTPluginMetaInfo() *TPluginMetaInfo {
	return &TPluginMetaInfo{}
}

func (p *TPluginMetaInfo) InitDefault() {
}

func (p *TPluginMetaInfo) GetName() (v string) {
	return p.Name
}

func (p *TPluginMetaInfo) GetType() (v int32) {
	return p.Type
}

var TPluginMetaInfo_SoName_DEFAULT string

func (p *TPluginMetaInfo) GetSoName() (v string) {
	if !p.IsSetSoName() {
		return TPluginMetaInfo_SoName_DEFAULT
	}
	return *p.SoName
}

var TPluginMetaInfo_Source_DEFAULT string

func (p *TPluginMetaInfo) GetSource() (v string) {
	if !p.IsSetSource() {
		return TPluginMetaInfo_Source_DEFAULT
	}
	return *p.Source
}
func (p *TPluginMetaInfo) SetName(val string) {
	p.Name = val
}
func (p *TPluginMetaInfo) SetType(val int32) {
	p.Type = val
}
func (p *TPluginMetaInfo) SetSoName(val *string) {
	p.SoName = val
}
func (p *TPluginMetaInfo) SetSource(val *string) {
	p.Source = val
}

var fieldIDToName_TPluginMetaInfo = map[int16]string{
	1: "name",
	2: "type",
	3: "so_name",
	4: "source",
}

func (p *TPluginMetaInfo) IsSetSoName() bool {
	return p.SoName != nil
}

func (p *TPluginMetaInfo) IsSetSource() bool {
	return p.Source != nil
}

func (p *TPluginMetaInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPluginMetaInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPluginMetaInfo[fieldId]))
}

func (p *TPluginMetaInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *TPluginMetaInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *TPluginMetaInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SoName = _field
	return nil
}
func (p *TPluginMetaInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Source = _field
	return nil
}

func (p *TPluginMetaInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPluginMetaInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPluginMetaInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPluginMetaInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPluginMetaInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSoName() {
		if err = oprot.WriteFieldBegin("so_name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SoName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPluginMetaInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err = oprot.WriteFieldBegin("source", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Source); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TPluginMetaInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPluginMetaInfo(%+v)", *p)

}

func (p *TPluginMetaInfo) DeepEqual(ano *TPluginMetaInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	if !p.Field3DeepEqual(ano.SoName) {
		return false
	}
	if !p.Field4DeepEqual(ano.Source) {
		return false
	}
	return true
}

func (p *TPluginMetaInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *TPluginMetaInfo) Field2DeepEqual(src int32) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *TPluginMetaInfo) Field3DeepEqual(src *string) bool {

	if p.SoName == src {
		return true
	} else if p.SoName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SoName, *src) != 0 {
		return false
	}
	return true
}
func (p *TPluginMetaInfo) Field4DeepEqual(src *string) bool {

	if p.Source == src {
		return true
	} else if p.Source == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Source, *src) != 0 {
		return false
	}
	return true
}

type TCooldownConf struct {
	TabletId          types.TTabletId   `thrift:"tablet_id,1,required" frugal:"1,required,i64" json:"tablet_id"`
	CooldownReplicaId *types.TReplicaId `thrift:"cooldown_replica_id,2,optional" frugal:"2,optional,i64" json:"cooldown_replica_id,omitempty"`
	CooldownTerm      *int64            `thrift:"cooldown_term,3,optional" frugal:"3,optional,i64" json:"cooldown_term,omitempty"`
}

func NewTCooldownConf() *TCooldownConf {
	return &TCooldownConf{}
}

func (p *TCooldownConf) InitDefault() {
}

func (p *TCooldownConf) GetTabletId() (v types.TTabletId) {
	return p.TabletId
}

var TCooldownConf_CooldownReplicaId_DEFAULT types.TReplicaId

func (p *TCooldownConf) GetCooldownReplicaId() (v types.TReplicaId) {
	if !p.IsSetCooldownReplicaId() {
		return TCooldownConf_CooldownReplicaId_DEFAULT
	}
	return *p.CooldownReplicaId
}

var TCooldownConf_CooldownTerm_DEFAULT int64

func (p *TCooldownConf) GetCooldownTerm() (v int64) {
	if !p.IsSetCooldownTerm() {
		return TCooldownConf_CooldownTerm_DEFAULT
	}
	return *p.CooldownTerm
}
func (p *TCooldownConf) SetTabletId(val types.TTabletId) {
	p.TabletId = val
}
func (p *TCooldownConf) SetCooldownReplicaId(val *types.TReplicaId) {
	p.CooldownReplicaId = val
}
func (p *TCooldownConf) SetCooldownTerm(val *int64) {
	p.CooldownTerm = val
}

var fieldIDToName_TCooldownConf = map[int16]string{
	1: "tablet_id",
	2: "cooldown_replica_id",
	3: "cooldown_term",
}

func (p *TCooldownConf) IsSetCooldownReplicaId() bool {
	return p.CooldownReplicaId != nil
}

func (p *TCooldownConf) IsSetCooldownTerm() bool {
	return p.CooldownTerm != nil
}

func (p *TCooldownConf) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCooldownConf[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCooldownConf[fieldId]))
}

func (p *TCooldownConf) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TabletId = _field
	return nil
}
func (p *TCooldownConf) ReadField2(iprot thrift.TProtocol) error {

	var _field *types.TReplicaId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CooldownReplicaId = _field
	return nil
}
func (p *TCooldownConf) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CooldownTerm = _field
	return nil
}

func (p *TCooldownConf) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCooldownConf"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCooldownConf) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCooldownConf) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCooldownReplicaId() {
		if err = oprot.WriteFieldBegin("cooldown_replica_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CooldownReplicaId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCooldownConf) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCooldownTerm() {
		if err = oprot.WriteFieldBegin("cooldown_term", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CooldownTerm); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TCooldownConf) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCooldownConf(%+v)", *p)

}

func (p *TCooldownConf) DeepEqual(ano *TCooldownConf) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.CooldownReplicaId) {
		return false
	}
	if !p.Field3DeepEqual(ano.CooldownTerm) {
		return false
	}
	return true
}

func (p *TCooldownConf) Field1DeepEqual(src types.TTabletId) bool {

	if p.TabletId != src {
		return false
	}
	return true
}
func (p *TCooldownConf) Field2DeepEqual(src *types.TReplicaId) bool {

	if p.CooldownReplicaId == src {
		return true
	} else if p.CooldownReplicaId == nil || src == nil {
		return false
	}
	if *p.CooldownReplicaId != *src {
		return false
	}
	return true
}
func (p *TCooldownConf) Field3DeepEqual(src *int64) bool {

	if p.CooldownTerm == src {
		return true
	} else if p.CooldownTerm == nil || src == nil {
		return false
	}
	if *p.CooldownTerm != *src {
		return false
	}
	return true
}

type TPushCooldownConfReq struct {
	CooldownConfs []*TCooldownConf `thrift:"cooldown_confs,1,required" frugal:"1,required,list<TCooldownConf>" json:"cooldown_confs"`
}

func NewTPushCooldownConfReq() *TPushCooldownConfReq {
	return &TPushCooldownConfReq{}
}

func (p *TPushCooldownConfReq) InitDefault() {
}

func (p *TPushCooldownConfReq) GetCooldownConfs() (v []*TCooldownConf) {
	return p.CooldownConfs
}
func (p *TPushCooldownConfReq) SetCooldownConfs(val []*TCooldownConf) {
	p.CooldownConfs = val
}

var fieldIDToName_TPushCooldownConfReq = map[int16]string{
	1: "cooldown_confs",
}

func (p *TPushCooldownConfReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCooldownConfs bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCooldownConfs = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCooldownConfs {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPushCooldownConfReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPushCooldownConfReq[fieldId]))
}

func (p *TPushCooldownConfReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TCooldownConf, 0, size)
	values := make([]TCooldownConf, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.CooldownConfs = _field
	return nil
}

func (p *TPushCooldownConfReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPushCooldownConfReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPushCooldownConfReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cooldown_confs", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CooldownConfs)); err != nil {
		return err
	}
	for _, v := range p.CooldownConfs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPushCooldownConfReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPushCooldownConfReq(%+v)", *p)

}

func (p *TPushCooldownConfReq) DeepEqual(ano *TPushCooldownConfReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CooldownConfs) {
		return false
	}
	return true
}

func (p *TPushCooldownConfReq) Field1DeepEqual(src []*TCooldownConf) bool {

	if len(p.CooldownConfs) != len(src) {
		return false
	}
	for i, v := range p.CooldownConfs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TAgentTaskRequest struct {
	ProtocolVersion         TAgentServiceVersion          `thrift:"protocol_version,1,required" frugal:"1,required,TAgentServiceVersion" json:"protocol_version"`
	TaskType                types.TTaskType               `thrift:"task_type,2,required" frugal:"2,required,TTaskType" json:"task_type"`
	Signature               int64                         `thrift:"signature,3,required" frugal:"3,required,i64" json:"signature"`
	Priority                *types.TPriority              `thrift:"priority,4,optional" frugal:"4,optional,TPriority" json:"priority,omitempty"`
	CreateTabletReq         *TCreateTabletReq             `thrift:"create_tablet_req,5,optional" frugal:"5,optional,TCreateTabletReq" json:"create_tablet_req,omitempty"`
	DropTabletReq           *TDropTabletReq               `thrift:"drop_tablet_req,6,optional" frugal:"6,optional,TDropTabletReq" json:"drop_tablet_req,omitempty"`
	AlterTabletReq          *TAlterTabletReq              `thrift:"alter_tablet_req,7,optional" frugal:"7,optional,TAlterTabletReq" json:"alter_tablet_req,omitempty"`
	CloneReq                *TCloneReq                    `thrift:"clone_req,8,optional" frugal:"8,optional,TCloneReq" json:"clone_req,omitempty"`
	PushReq                 *TPushReq                     `thrift:"push_req,9,optional" frugal:"9,optional,TPushReq" json:"push_req,omitempty"`
	CancelDeleteDataReq     *TCancelDeleteDataReq         `thrift:"cancel_delete_data_req,10,optional" frugal:"10,optional,TCancelDeleteDataReq" json:"cancel_delete_data_req,omitempty"`
	ResourceInfo            *types.TResourceInfo          `thrift:"resource_info,11,optional" frugal:"11,optional,types.TResourceInfo" json:"resource_info,omitempty"`
	StorageMediumMigrateReq *TStorageMediumMigrateReq     `thrift:"storage_medium_migrate_req,12,optional" frugal:"12,optional,TStorageMediumMigrateReq" json:"storage_medium_migrate_req,omitempty"`
	CheckConsistencyReq     *TCheckConsistencyReq         `thrift:"check_consistency_req,13,optional" frugal:"13,optional,TCheckConsistencyReq" json:"check_consistency_req,omitempty"`
	UploadReq               *TUploadReq                   `thrift:"upload_req,14,optional" frugal:"14,optional,TUploadReq" json:"upload_req,omitempty"`
	DownloadReq             *TDownloadReq                 `thrift:"download_req,15,optional" frugal:"15,optional,TDownloadReq" json:"download_req,omitempty"`
	SnapshotReq             *TSnapshotRequest             `thrift:"snapshot_req,16,optional" frugal:"16,optional,TSnapshotRequest" json:"snapshot_req,omitempty"`
	ReleaseSnapshotReq      *TReleaseSnapshotRequest      `thrift:"release_snapshot_req,17,optional" frugal:"17,optional,TReleaseSnapshotRequest" json:"release_snapshot_req,omitempty"`
	ClearRemoteFileReq      *TClearRemoteFileReq          `thrift:"clear_remote_file_req,18,optional" frugal:"18,optional,TClearRemoteFileReq" json:"clear_remote_file_req,omitempty"`
	PublishVersionReq       *TPublishVersionRequest       `thrift:"publish_version_req,19,optional" frugal:"19,optional,TPublishVersionRequest" json:"publish_version_req,omitempty"`
	ClearAlterTaskReq       *TClearAlterTaskRequest       `thrift:"clear_alter_task_req,20,optional" frugal:"20,optional,TClearAlterTaskRequest" json:"clear_alter_task_req,omitempty"`
	ClearTransactionTaskReq *TClearTransactionTaskRequest `thrift:"clear_transaction_task_req,21,optional" frugal:"21,optional,TClearTransactionTaskRequest" json:"clear_transaction_task_req,omitempty"`
	MoveDirReq              *TMoveDirReq                  `thrift:"move_dir_req,22,optional" frugal:"22,optional,TMoveDirReq" json:"move_dir_req,omitempty"`
	RecoverTabletReq        *TRecoverTabletReq            `thrift:"recover_tablet_req,23,optional" frugal:"23,optional,TRecoverTabletReq" json:"recover_tablet_req,omitempty"`
	AlterTabletReqV2        *TAlterTabletReqV2            `thrift:"alter_tablet_req_v2,24,optional" frugal:"24,optional,TAlterTabletReqV2" json:"alter_tablet_req_v2,omitempty"`
	RecvTime                *int64                        `thrift:"recv_time,25,optional" frugal:"25,optional,i64" json:"recv_time,omitempty"`
	UpdateTabletMetaInfoReq *TUpdateTabletMetaInfoReq     `thrift:"update_tablet_meta_info_req,26,optional" frugal:"26,optional,TUpdateTabletMetaInfoReq" json:"update_tablet_meta_info_req,omitempty"`
	CompactionReq           *TCompactionReq               `thrift:"compaction_req,27,optional" frugal:"27,optional,TCompactionReq" json:"compaction_req,omitempty"`
	StorageMigrationReqV2   *TStorageMigrationReqV2       `thrift:"storage_migration_req_v2,28,optional" frugal:"28,optional,TStorageMigrationReqV2" json:"storage_migration_req_v2,omitempty"`
	PushCooldownConf        *TPushCooldownConfReq         `thrift:"push_cooldown_conf,30,optional" frugal:"30,optional,TPushCooldownConfReq" json:"push_cooldown_conf,omitempty"`
	PushStoragePolicyReq    *TPushStoragePolicyReq        `thrift:"push_storage_policy_req,31,optional" frugal:"31,optional,TPushStoragePolicyReq" json:"push_storage_policy_req,omitempty"`
	AlterInvertedIndexReq   *TAlterInvertedIndexReq       `thrift:"alter_inverted_index_req,32,optional" frugal:"32,optional,TAlterInvertedIndexReq" json:"alter_inverted_index_req,omitempty"`
	GcBinlogReq             *TGcBinlogReq                 `thrift:"gc_binlog_req,33,optional" frugal:"33,optional,TGcBinlogReq" json:"gc_binlog_req,omitempty"`
	CleanTrashReq           *TCleanTrashReq               `thrift:"clean_trash_req,34,optional" frugal:"34,optional,TCleanTrashReq" json:"clean_trash_req,omitempty"`
	VisibleVersionReq       *TVisibleVersionReq           `thrift:"visible_version_req,35,optional" frugal:"35,optional,TVisibleVersionReq" json:"visible_version_req,omitempty"`
	CleanUdfCacheReq        *TCleanUDFCacheReq            `thrift:"clean_udf_cache_req,36,optional" frugal:"36,optional,TCleanUDFCacheReq" json:"clean_udf_cache_req,omitempty"`
	CalcDeleteBitmapReq     *TCalcDeleteBitmapRequest     `thrift:"calc_delete_bitmap_req,1000,optional" frugal:"1000,optional,TCalcDeleteBitmapRequest" json:"calc_delete_bitmap_req,omitempty"`
}

func NewTAgentTaskRequest() *TAgentTaskRequest {
	return &TAgentTaskRequest{}
}

func (p *TAgentTaskRequest) InitDefault() {
}

func (p *TAgentTaskRequest) GetProtocolVersion() (v TAgentServiceVersion) {
	return p.ProtocolVersion
}

func (p *TAgentTaskRequest) GetTaskType() (v types.TTaskType) {
	return p.TaskType
}

func (p *TAgentTaskRequest) GetSignature() (v int64) {
	return p.Signature
}

var TAgentTaskRequest_Priority_DEFAULT types.TPriority

func (p *TAgentTaskRequest) GetPriority() (v types.TPriority) {
	if !p.IsSetPriority() {
		return TAgentTaskRequest_Priority_DEFAULT
	}
	return *p.Priority
}

var TAgentTaskRequest_CreateTabletReq_DEFAULT *TCreateTabletReq

func (p *TAgentTaskRequest) GetCreateTabletReq() (v *TCreateTabletReq) {
	if !p.IsSetCreateTabletReq() {
		return TAgentTaskRequest_CreateTabletReq_DEFAULT
	}
	return p.CreateTabletReq
}

var TAgentTaskRequest_DropTabletReq_DEFAULT *TDropTabletReq

func (p *TAgentTaskRequest) GetDropTabletReq() (v *TDropTabletReq) {
	if !p.IsSetDropTabletReq() {
		return TAgentTaskRequest_DropTabletReq_DEFAULT
	}
	return p.DropTabletReq
}

var TAgentTaskRequest_AlterTabletReq_DEFAULT *TAlterTabletReq

func (p *TAgentTaskRequest) GetAlterTabletReq() (v *TAlterTabletReq) {
	if !p.IsSetAlterTabletReq() {
		return TAgentTaskRequest_AlterTabletReq_DEFAULT
	}
	return p.AlterTabletReq
}

var TAgentTaskRequest_CloneReq_DEFAULT *TCloneReq

func (p *TAgentTaskRequest) GetCloneReq() (v *TCloneReq) {
	if !p.IsSetCloneReq() {
		return TAgentTaskRequest_CloneReq_DEFAULT
	}
	return p.CloneReq
}

var TAgentTaskRequest_PushReq_DEFAULT *TPushReq

func (p *TAgentTaskRequest) GetPushReq() (v *TPushReq) {
	if !p.IsSetPushReq() {
		return TAgentTaskRequest_PushReq_DEFAULT
	}
	return p.PushReq
}

var TAgentTaskRequest_CancelDeleteDataReq_DEFAULT *TCancelDeleteDataReq

func (p *TAgentTaskRequest) GetCancelDeleteDataReq() (v *TCancelDeleteDataReq) {
	if !p.IsSetCancelDeleteDataReq() {
		return TAgentTaskRequest_CancelDeleteDataReq_DEFAULT
	}
	return p.CancelDeleteDataReq
}

var TAgentTaskRequest_ResourceInfo_DEFAULT *types.TResourceInfo

func (p *TAgentTaskRequest) GetResourceInfo() (v *types.TResourceInfo) {
	if !p.IsSetResourceInfo() {
		return TAgentTaskRequest_ResourceInfo_DEFAULT
	}
	return p.ResourceInfo
}

var TAgentTaskRequest_StorageMediumMigrateReq_DEFAULT *TStorageMediumMigrateReq

func (p *TAgentTaskRequest) GetStorageMediumMigrateReq() (v *TStorageMediumMigrateReq) {
	if !p.IsSetStorageMediumMigrateReq() {
		return TAgentTaskRequest_StorageMediumMigrateReq_DEFAULT
	}
	return p.StorageMediumMigrateReq
}

var TAgentTaskRequest_CheckConsistencyReq_DEFAULT *TCheckConsistencyReq

func (p *TAgentTaskRequest) GetCheckConsistencyReq() (v *TCheckConsistencyReq) {
	if !p.IsSetCheckConsistencyReq() {
		return TAgentTaskRequest_CheckConsistencyReq_DEFAULT
	}
	return p.CheckConsistencyReq
}

var TAgentTaskRequest_UploadReq_DEFAULT *TUploadReq

func (p *TAgentTaskRequest) GetUploadReq() (v *TUploadReq) {
	if !p.IsSetUploadReq() {
		return TAgentTaskRequest_UploadReq_DEFAULT
	}
	return p.UploadReq
}

var TAgentTaskRequest_DownloadReq_DEFAULT *TDownloadReq

func (p *TAgentTaskRequest) GetDownloadReq() (v *TDownloadReq) {
	if !p.IsSetDownloadReq() {
		return TAgentTaskRequest_DownloadReq_DEFAULT
	}
	return p.DownloadReq
}

var TAgentTaskRequest_SnapshotReq_DEFAULT *TSnapshotRequest

func (p *TAgentTaskRequest) GetSnapshotReq() (v *TSnapshotRequest) {
	if !p.IsSetSnapshotReq() {
		return TAgentTaskRequest_SnapshotReq_DEFAULT
	}
	return p.SnapshotReq
}

var TAgentTaskRequest_ReleaseSnapshotReq_DEFAULT *TReleaseSnapshotRequest

func (p *TAgentTaskRequest) GetReleaseSnapshotReq() (v *TReleaseSnapshotRequest) {
	if !p.IsSetReleaseSnapshotReq() {
		return TAgentTaskRequest_ReleaseSnapshotReq_DEFAULT
	}
	return p.ReleaseSnapshotReq
}

var TAgentTaskRequest_ClearRemoteFileReq_DEFAULT *TClearRemoteFileReq

func (p *TAgentTaskRequest) GetClearRemoteFileReq() (v *TClearRemoteFileReq) {
	if !p.IsSetClearRemoteFileReq() {
		return TAgentTaskRequest_ClearRemoteFileReq_DEFAULT
	}
	return p.ClearRemoteFileReq
}

var TAgentTaskRequest_PublishVersionReq_DEFAULT *TPublishVersionRequest

func (p *TAgentTaskRequest) GetPublishVersionReq() (v *TPublishVersionRequest) {
	if !p.IsSetPublishVersionReq() {
		return TAgentTaskRequest_PublishVersionReq_DEFAULT
	}
	return p.PublishVersionReq
}

var TAgentTaskRequest_ClearAlterTaskReq_DEFAULT *TClearAlterTaskRequest

func (p *TAgentTaskRequest) GetClearAlterTaskReq() (v *TClearAlterTaskRequest) {
	if !p.IsSetClearAlterTaskReq() {
		return TAgentTaskRequest_ClearAlterTaskReq_DEFAULT
	}
	return p.ClearAlterTaskReq
}

var TAgentTaskRequest_ClearTransactionTaskReq_DEFAULT *TClearTransactionTaskRequest

func (p *TAgentTaskRequest) GetClearTransactionTaskReq() (v *TClearTransactionTaskRequest) {
	if !p.IsSetClearTransactionTaskReq() {
		return TAgentTaskRequest_ClearTransactionTaskReq_DEFAULT
	}
	return p.ClearTransactionTaskReq
}

var TAgentTaskRequest_MoveDirReq_DEFAULT *TMoveDirReq

func (p *TAgentTaskRequest) GetMoveDirReq() (v *TMoveDirReq) {
	if !p.IsSetMoveDirReq() {
		return TAgentTaskRequest_MoveDirReq_DEFAULT
	}
	return p.MoveDirReq
}

var TAgentTaskRequest_RecoverTabletReq_DEFAULT *TRecoverTabletReq

func (p *TAgentTaskRequest) GetRecoverTabletReq() (v *TRecoverTabletReq) {
	if !p.IsSetRecoverTabletReq() {
		return TAgentTaskRequest_RecoverTabletReq_DEFAULT
	}
	return p.RecoverTabletReq
}

var TAgentTaskRequest_AlterTabletReqV2_DEFAULT *TAlterTabletReqV2

func (p *TAgentTaskRequest) GetAlterTabletReqV2() (v *TAlterTabletReqV2) {
	if !p.IsSetAlterTabletReqV2() {
		return TAgentTaskRequest_AlterTabletReqV2_DEFAULT
	}
	return p.AlterTabletReqV2
}

var TAgentTaskRequest_RecvTime_DEFAULT int64

func (p *TAgentTaskRequest) GetRecvTime() (v int64) {
	if !p.IsSetRecvTime() {
		return TAgentTaskRequest_RecvTime_DEFAULT
	}
	return *p.RecvTime
}

var TAgentTaskRequest_UpdateTabletMetaInfoReq_DEFAULT *TUpdateTabletMetaInfoReq

func (p *TAgentTaskRequest) GetUpdateTabletMetaInfoReq() (v *TUpdateTabletMetaInfoReq) {
	if !p.IsSetUpdateTabletMetaInfoReq() {
		return TAgentTaskRequest_UpdateTabletMetaInfoReq_DEFAULT
	}
	return p.UpdateTabletMetaInfoReq
}

var TAgentTaskRequest_CompactionReq_DEFAULT *TCompactionReq

func (p *TAgentTaskRequest) GetCompactionReq() (v *TCompactionReq) {
	if !p.IsSetCompactionReq() {
		return TAgentTaskRequest_CompactionReq_DEFAULT
	}
	return p.CompactionReq
}

var TAgentTaskRequest_StorageMigrationReqV2_DEFAULT *TStorageMigrationReqV2

func (p *TAgentTaskRequest) GetStorageMigrationReqV2() (v *TStorageMigrationReqV2) {
	if !p.IsSetStorageMigrationReqV2() {
		return TAgentTaskRequest_StorageMigrationReqV2_DEFAULT
	}
	return p.StorageMigrationReqV2
}

var TAgentTaskRequest_PushCooldownConf_DEFAULT *TPushCooldownConfReq

func (p *TAgentTaskRequest) GetPushCooldownConf() (v *TPushCooldownConfReq) {
	if !p.IsSetPushCooldownConf() {
		return TAgentTaskRequest_PushCooldownConf_DEFAULT
	}
	return p.PushCooldownConf
}

var TAgentTaskRequest_PushStoragePolicyReq_DEFAULT *TPushStoragePolicyReq

func (p *TAgentTaskRequest) GetPushStoragePolicyReq() (v *TPushStoragePolicyReq) {
	if !p.IsSetPushStoragePolicyReq() {
		return TAgentTaskRequest_PushStoragePolicyReq_DEFAULT
	}
	return p.PushStoragePolicyReq
}

var TAgentTaskRequest_AlterInvertedIndexReq_DEFAULT *TAlterInvertedIndexReq

func (p *TAgentTaskRequest) GetAlterInvertedIndexReq() (v *TAlterInvertedIndexReq) {
	if !p.IsSetAlterInvertedIndexReq() {
		return TAgentTaskRequest_AlterInvertedIndexReq_DEFAULT
	}
	return p.AlterInvertedIndexReq
}

var TAgentTaskRequest_GcBinlogReq_DEFAULT *TGcBinlogReq

func (p *TAgentTaskRequest) GetGcBinlogReq() (v *TGcBinlogReq) {
	if !p.IsSetGcBinlogReq() {
		return TAgentTaskRequest_GcBinlogReq_DEFAULT
	}
	return p.GcBinlogReq
}

var TAgentTaskRequest_CleanTrashReq_DEFAULT *TCleanTrashReq

func (p *TAgentTaskRequest) GetCleanTrashReq() (v *TCleanTrashReq) {
	if !p.IsSetCleanTrashReq() {
		return TAgentTaskRequest_CleanTrashReq_DEFAULT
	}
	return p.CleanTrashReq
}

var TAgentTaskRequest_VisibleVersionReq_DEFAULT *TVisibleVersionReq

func (p *TAgentTaskRequest) GetVisibleVersionReq() (v *TVisibleVersionReq) {
	if !p.IsSetVisibleVersionReq() {
		return TAgentTaskRequest_VisibleVersionReq_DEFAULT
	}
	return p.VisibleVersionReq
}

var TAgentTaskRequest_CleanUdfCacheReq_DEFAULT *TCleanUDFCacheReq

func (p *TAgentTaskRequest) GetCleanUdfCacheReq() (v *TCleanUDFCacheReq) {
	if !p.IsSetCleanUdfCacheReq() {
		return TAgentTaskRequest_CleanUdfCacheReq_DEFAULT
	}
	return p.CleanUdfCacheReq
}

var TAgentTaskRequest_CalcDeleteBitmapReq_DEFAULT *TCalcDeleteBitmapRequest

func (p *TAgentTaskRequest) GetCalcDeleteBitmapReq() (v *TCalcDeleteBitmapRequest) {
	if !p.IsSetCalcDeleteBitmapReq() {
		return TAgentTaskRequest_CalcDeleteBitmapReq_DEFAULT
	}
	return p.CalcDeleteBitmapReq
}
func (p *TAgentTaskRequest) SetProtocolVersion(val TAgentServiceVersion) {
	p.ProtocolVersion = val
}
func (p *TAgentTaskRequest) SetTaskType(val types.TTaskType) {
	p.TaskType = val
}
func (p *TAgentTaskRequest) SetSignature(val int64) {
	p.Signature = val
}
func (p *TAgentTaskRequest) SetPriority(val *types.TPriority) {
	p.Priority = val
}
func (p *TAgentTaskRequest) SetCreateTabletReq(val *TCreateTabletReq) {
	p.CreateTabletReq = val
}
func (p *TAgentTaskRequest) SetDropTabletReq(val *TDropTabletReq) {
	p.DropTabletReq = val
}
func (p *TAgentTaskRequest) SetAlterTabletReq(val *TAlterTabletReq) {
	p.AlterTabletReq = val
}
func (p *TAgentTaskRequest) SetCloneReq(val *TCloneReq) {
	p.CloneReq = val
}
func (p *TAgentTaskRequest) SetPushReq(val *TPushReq) {
	p.PushReq = val
}
func (p *TAgentTaskRequest) SetCancelDeleteDataReq(val *TCancelDeleteDataReq) {
	p.CancelDeleteDataReq = val
}
func (p *TAgentTaskRequest) SetResourceInfo(val *types.TResourceInfo) {
	p.ResourceInfo = val
}
func (p *TAgentTaskRequest) SetStorageMediumMigrateReq(val *TStorageMediumMigrateReq) {
	p.StorageMediumMigrateReq = val
}
func (p *TAgentTaskRequest) SetCheckConsistencyReq(val *TCheckConsistencyReq) {
	p.CheckConsistencyReq = val
}
func (p *TAgentTaskRequest) SetUploadReq(val *TUploadReq) {
	p.UploadReq = val
}
func (p *TAgentTaskRequest) SetDownloadReq(val *TDownloadReq) {
	p.DownloadReq = val
}
func (p *TAgentTaskRequest) SetSnapshotReq(val *TSnapshotRequest) {
	p.SnapshotReq = val
}
func (p *TAgentTaskRequest) SetReleaseSnapshotReq(val *TReleaseSnapshotRequest) {
	p.ReleaseSnapshotReq = val
}
func (p *TAgentTaskRequest) SetClearRemoteFileReq(val *TClearRemoteFileReq) {
	p.ClearRemoteFileReq = val
}
func (p *TAgentTaskRequest) SetPublishVersionReq(val *TPublishVersionRequest) {
	p.PublishVersionReq = val
}
func (p *TAgentTaskRequest) SetClearAlterTaskReq(val *TClearAlterTaskRequest) {
	p.ClearAlterTaskReq = val
}
func (p *TAgentTaskRequest) SetClearTransactionTaskReq(val *TClearTransactionTaskRequest) {
	p.ClearTransactionTaskReq = val
}
func (p *TAgentTaskRequest) SetMoveDirReq(val *TMoveDirReq) {
	p.MoveDirReq = val
}
func (p *TAgentTaskRequest) SetRecoverTabletReq(val *TRecoverTabletReq) {
	p.RecoverTabletReq = val
}
func (p *TAgentTaskRequest) SetAlterTabletReqV2(val *TAlterTabletReqV2) {
	p.AlterTabletReqV2 = val
}
func (p *TAgentTaskRequest) SetRecvTime(val *int64) {
	p.RecvTime = val
}
func (p *TAgentTaskRequest) SetUpdateTabletMetaInfoReq(val *TUpdateTabletMetaInfoReq) {
	p.UpdateTabletMetaInfoReq = val
}
func (p *TAgentTaskRequest) SetCompactionReq(val *TCompactionReq) {
	p.CompactionReq = val
}
func (p *TAgentTaskRequest) SetStorageMigrationReqV2(val *TStorageMigrationReqV2) {
	p.StorageMigrationReqV2 = val
}
func (p *TAgentTaskRequest) SetPushCooldownConf(val *TPushCooldownConfReq) {
	p.PushCooldownConf = val
}
func (p *TAgentTaskRequest) SetPushStoragePolicyReq(val *TPushStoragePolicyReq) {
	p.PushStoragePolicyReq = val
}
func (p *TAgentTaskRequest) SetAlterInvertedIndexReq(val *TAlterInvertedIndexReq) {
	p.AlterInvertedIndexReq = val
}
func (p *TAgentTaskRequest) SetGcBinlogReq(val *TGcBinlogReq) {
	p.GcBinlogReq = val
}
func (p *TAgentTaskRequest) SetCleanTrashReq(val *TCleanTrashReq) {
	p.CleanTrashReq = val
}
func (p *TAgentTaskRequest) SetVisibleVersionReq(val *TVisibleVersionReq) {
	p.VisibleVersionReq = val
}
func (p *TAgentTaskRequest) SetCleanUdfCacheReq(val *TCleanUDFCacheReq) {
	p.CleanUdfCacheReq = val
}
func (p *TAgentTaskRequest) SetCalcDeleteBitmapReq(val *TCalcDeleteBitmapRequest) {
	p.CalcDeleteBitmapReq = val
}

var fieldIDToName_TAgentTaskRequest = map[int16]string{
	1:    "protocol_version",
	2:    "task_type",
	3:    "signature",
	4:    "priority",
	5:    "create_tablet_req",
	6:    "drop_tablet_req",
	7:    "alter_tablet_req",
	8:    "clone_req",
	9:    "push_req",
	10:   "cancel_delete_data_req",
	11:   "resource_info",
	12:   "storage_medium_migrate_req",
	13:   "check_consistency_req",
	14:   "upload_req",
	15:   "download_req",
	16:   "snapshot_req",
	17:   "release_snapshot_req",
	18:   "clear_remote_file_req",
	19:   "publish_version_req",
	20:   "clear_alter_task_req",
	21:   "clear_transaction_task_req",
	22:   "move_dir_req",
	23:   "recover_tablet_req",
	24:   "alter_tablet_req_v2",
	25:   "recv_time",
	26:   "update_tablet_meta_info_req",
	27:   "compaction_req",
	28:   "storage_migration_req_v2",
	30:   "push_cooldown_conf",
	31:   "push_storage_policy_req",
	32:   "alter_inverted_index_req",
	33:   "gc_binlog_req",
	34:   "clean_trash_req",
	35:   "visible_version_req",
	36:   "clean_udf_cache_req",
	1000: "calc_delete_bitmap_req",
}

func (p *TAgentTaskRequest) IsSetPriority() bool {
	return p.Priority != nil
}

func (p *TAgentTaskRequest) IsSetCreateTabletReq() bool {
	return p.CreateTabletReq != nil
}

func (p *TAgentTaskRequest) IsSetDropTabletReq() bool {
	return p.DropTabletReq != nil
}

func (p *TAgentTaskRequest) IsSetAlterTabletReq() bool {
	return p.AlterTabletReq != nil
}

func (p *TAgentTaskRequest) IsSetCloneReq() bool {
	return p.CloneReq != nil
}

func (p *TAgentTaskRequest) IsSetPushReq() bool {
	return p.PushReq != nil
}

func (p *TAgentTaskRequest) IsSetCancelDeleteDataReq() bool {
	return p.CancelDeleteDataReq != nil
}

func (p *TAgentTaskRequest) IsSetResourceInfo() bool {
	return p.ResourceInfo != nil
}

func (p *TAgentTaskRequest) IsSetStorageMediumMigrateReq() bool {
	return p.StorageMediumMigrateReq != nil
}

func (p *TAgentTaskRequest) IsSetCheckConsistencyReq() bool {
	return p.CheckConsistencyReq != nil
}

func (p *TAgentTaskRequest) IsSetUploadReq() bool {
	return p.UploadReq != nil
}

func (p *TAgentTaskRequest) IsSetDownloadReq() bool {
	return p.DownloadReq != nil
}

func (p *TAgentTaskRequest) IsSetSnapshotReq() bool {
	return p.SnapshotReq != nil
}

func (p *TAgentTaskRequest) IsSetReleaseSnapshotReq() bool {
	return p.ReleaseSnapshotReq != nil
}

func (p *TAgentTaskRequest) IsSetClearRemoteFileReq() bool {
	return p.ClearRemoteFileReq != nil
}

func (p *TAgentTaskRequest) IsSetPublishVersionReq() bool {
	return p.PublishVersionReq != nil
}

func (p *TAgentTaskRequest) IsSetClearAlterTaskReq() bool {
	return p.ClearAlterTaskReq != nil
}

func (p *TAgentTaskRequest) IsSetClearTransactionTaskReq() bool {
	return p.ClearTransactionTaskReq != nil
}

func (p *TAgentTaskRequest) IsSetMoveDirReq() bool {
	return p.MoveDirReq != nil
}

func (p *TAgentTaskRequest) IsSetRecoverTabletReq() bool {
	return p.RecoverTabletReq != nil
}

func (p *TAgentTaskRequest) IsSetAlterTabletReqV2() bool {
	return p.AlterTabletReqV2 != nil
}

func (p *TAgentTaskRequest) IsSetRecvTime() bool {
	return p.RecvTime != nil
}

func (p *TAgentTaskRequest) IsSetUpdateTabletMetaInfoReq() bool {
	return p.UpdateTabletMetaInfoReq != nil
}

func (p *TAgentTaskRequest) IsSetCompactionReq() bool {
	return p.CompactionReq != nil
}

func (p *TAgentTaskRequest) IsSetStorageMigrationReqV2() bool {
	return p.StorageMigrationReqV2 != nil
}

func (p *TAgentTaskRequest) IsSetPushCooldownConf() bool {
	return p.PushCooldownConf != nil
}

func (p *TAgentTaskRequest) IsSetPushStoragePolicyReq() bool {
	return p.PushStoragePolicyReq != nil
}

func (p *TAgentTaskRequest) IsSetAlterInvertedIndexReq() bool {
	return p.AlterInvertedIndexReq != nil
}

func (p *TAgentTaskRequest) IsSetGcBinlogReq() bool {
	return p.GcBinlogReq != nil
}

func (p *TAgentTaskRequest) IsSetCleanTrashReq() bool {
	return p.CleanTrashReq != nil
}

func (p *TAgentTaskRequest) IsSetVisibleVersionReq() bool {
	return p.VisibleVersionReq != nil
}

func (p *TAgentTaskRequest) IsSetCleanUdfCacheReq() bool {
	return p.CleanUdfCacheReq != nil
}

func (p *TAgentTaskRequest) IsSetCalcDeleteBitmapReq() bool {
	return p.CalcDeleteBitmapReq != nil
}

func (p *TAgentTaskRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false
	var issetTaskType bool = false
	var issetSignature bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTaskType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSignature = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 30:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 32:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 33:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField33(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 34:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField34(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 35:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField35(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 36:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField36(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1000:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1000(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTaskType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSignature {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAgentTaskRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAgentTaskRequest[fieldId]))
}

func (p *TAgentTaskRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field TAgentServiceVersion
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TAgentServiceVersion(v)
	}
	p.ProtocolVersion = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TTaskType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TTaskType(v)
	}
	p.TaskType = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Signature = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *types.TPriority
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TPriority(v)
		_field = &tmp
	}
	p.Priority = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField5(iprot thrift.TProtocol) error {
	_field := NewTCreateTabletReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CreateTabletReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField6(iprot thrift.TProtocol) error {
	_field := NewTDropTabletReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DropTabletReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField7(iprot thrift.TProtocol) error {
	_field := NewTAlterTabletReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AlterTabletReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField8(iprot thrift.TProtocol) error {
	_field := NewTCloneReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CloneReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField9(iprot thrift.TProtocol) error {
	_field := NewTPushReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PushReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField10(iprot thrift.TProtocol) error {
	_field := NewTCancelDeleteDataReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CancelDeleteDataReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField11(iprot thrift.TProtocol) error {
	_field := types.NewTResourceInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ResourceInfo = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField12(iprot thrift.TProtocol) error {
	_field := NewTStorageMediumMigrateReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.StorageMediumMigrateReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField13(iprot thrift.TProtocol) error {
	_field := NewTCheckConsistencyReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CheckConsistencyReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField14(iprot thrift.TProtocol) error {
	_field := NewTUploadReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.UploadReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField15(iprot thrift.TProtocol) error {
	_field := NewTDownloadReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DownloadReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField16(iprot thrift.TProtocol) error {
	_field := NewTSnapshotRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SnapshotReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField17(iprot thrift.TProtocol) error {
	_field := NewTReleaseSnapshotRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ReleaseSnapshotReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField18(iprot thrift.TProtocol) error {
	_field := NewTClearRemoteFileReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ClearRemoteFileReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField19(iprot thrift.TProtocol) error {
	_field := NewTPublishVersionRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PublishVersionReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField20(iprot thrift.TProtocol) error {
	_field := NewTClearAlterTaskRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ClearAlterTaskReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField21(iprot thrift.TProtocol) error {
	_field := NewTClearTransactionTaskRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ClearTransactionTaskReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField22(iprot thrift.TProtocol) error {
	_field := NewTMoveDirReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MoveDirReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField23(iprot thrift.TProtocol) error {
	_field := NewTRecoverTabletReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.RecoverTabletReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField24(iprot thrift.TProtocol) error {
	_field := NewTAlterTabletReqV2()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AlterTabletReqV2 = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField25(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RecvTime = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField26(iprot thrift.TProtocol) error {
	_field := NewTUpdateTabletMetaInfoReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.UpdateTabletMetaInfoReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField27(iprot thrift.TProtocol) error {
	_field := NewTCompactionReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CompactionReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField28(iprot thrift.TProtocol) error {
	_field := NewTStorageMigrationReqV2()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.StorageMigrationReqV2 = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField30(iprot thrift.TProtocol) error {
	_field := NewTPushCooldownConfReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PushCooldownConf = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField31(iprot thrift.TProtocol) error {
	_field := NewTPushStoragePolicyReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PushStoragePolicyReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField32(iprot thrift.TProtocol) error {
	_field := NewTAlterInvertedIndexReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AlterInvertedIndexReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField33(iprot thrift.TProtocol) error {
	_field := NewTGcBinlogReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.GcBinlogReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField34(iprot thrift.TProtocol) error {
	_field := NewTCleanTrashReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CleanTrashReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField35(iprot thrift.TProtocol) error {
	_field := NewTVisibleVersionReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.VisibleVersionReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField36(iprot thrift.TProtocol) error {
	_field := NewTCleanUDFCacheReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CleanUdfCacheReq = _field
	return nil
}
func (p *TAgentTaskRequest) ReadField1000(iprot thrift.TProtocol) error {
	_field := NewTCalcDeleteBitmapRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CalcDeleteBitmapReq = _field
	return nil
}

func (p *TAgentTaskRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAgentTaskRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField33(oprot); err != nil {
			fieldId = 33
			goto WriteFieldError
		}
		if err = p.writeField34(oprot); err != nil {
			fieldId = 34
			goto WriteFieldError
		}
		if err = p.writeField35(oprot); err != nil {
			fieldId = 35
			goto WriteFieldError
		}
		if err = p.writeField36(oprot); err != nil {
			fieldId = 36
			goto WriteFieldError
		}
		if err = p.writeField1000(oprot); err != nil {
			fieldId = 1000
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.TaskType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("signature", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Signature); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPriority() {
		if err = oprot.WriteFieldBegin("priority", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Priority)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTabletReq() {
		if err = oprot.WriteFieldBegin("create_tablet_req", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CreateTabletReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDropTabletReq() {
		if err = oprot.WriteFieldBegin("drop_tablet_req", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DropTabletReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlterTabletReq() {
		if err = oprot.WriteFieldBegin("alter_tablet_req", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.AlterTabletReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCloneReq() {
		if err = oprot.WriteFieldBegin("clone_req", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CloneReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPushReq() {
		if err = oprot.WriteFieldBegin("push_req", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PushReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCancelDeleteDataReq() {
		if err = oprot.WriteFieldBegin("cancel_delete_data_req", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CancelDeleteDataReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetResourceInfo() {
		if err = oprot.WriteFieldBegin("resource_info", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ResourceInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageMediumMigrateReq() {
		if err = oprot.WriteFieldBegin("storage_medium_migrate_req", thrift.STRUCT, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.StorageMediumMigrateReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetCheckConsistencyReq() {
		if err = oprot.WriteFieldBegin("check_consistency_req", thrift.STRUCT, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CheckConsistencyReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetUploadReq() {
		if err = oprot.WriteFieldBegin("upload_req", thrift.STRUCT, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.UploadReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetDownloadReq() {
		if err = oprot.WriteFieldBegin("download_req", thrift.STRUCT, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DownloadReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotReq() {
		if err = oprot.WriteFieldBegin("snapshot_req", thrift.STRUCT, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.SnapshotReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetReleaseSnapshotReq() {
		if err = oprot.WriteFieldBegin("release_snapshot_req", thrift.STRUCT, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ReleaseSnapshotReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetClearRemoteFileReq() {
		if err = oprot.WriteFieldBegin("clear_remote_file_req", thrift.STRUCT, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ClearRemoteFileReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetPublishVersionReq() {
		if err = oprot.WriteFieldBegin("publish_version_req", thrift.STRUCT, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PublishVersionReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetClearAlterTaskReq() {
		if err = oprot.WriteFieldBegin("clear_alter_task_req", thrift.STRUCT, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ClearAlterTaskReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetClearTransactionTaskReq() {
		if err = oprot.WriteFieldBegin("clear_transaction_task_req", thrift.STRUCT, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ClearTransactionTaskReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetMoveDirReq() {
		if err = oprot.WriteFieldBegin("move_dir_req", thrift.STRUCT, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MoveDirReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecoverTabletReq() {
		if err = oprot.WriteFieldBegin("recover_tablet_req", thrift.STRUCT, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.RecoverTabletReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlterTabletReqV2() {
		if err = oprot.WriteFieldBegin("alter_tablet_req_v2", thrift.STRUCT, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.AlterTabletReqV2.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecvTime() {
		if err = oprot.WriteFieldBegin("recv_time", thrift.I64, 25); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.RecvTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateTabletMetaInfoReq() {
		if err = oprot.WriteFieldBegin("update_tablet_meta_info_req", thrift.STRUCT, 26); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.UpdateTabletMetaInfoReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompactionReq() {
		if err = oprot.WriteFieldBegin("compaction_req", thrift.STRUCT, 27); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CompactionReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageMigrationReqV2() {
		if err = oprot.WriteFieldBegin("storage_migration_req_v2", thrift.STRUCT, 28); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.StorageMigrationReqV2.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetPushCooldownConf() {
		if err = oprot.WriteFieldBegin("push_cooldown_conf", thrift.STRUCT, 30); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PushCooldownConf.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetPushStoragePolicyReq() {
		if err = oprot.WriteFieldBegin("push_storage_policy_req", thrift.STRUCT, 31); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PushStoragePolicyReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlterInvertedIndexReq() {
		if err = oprot.WriteFieldBegin("alter_inverted_index_req", thrift.STRUCT, 32); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.AlterInvertedIndexReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField33(oprot thrift.TProtocol) (err error) {
	if p.IsSetGcBinlogReq() {
		if err = oprot.WriteFieldBegin("gc_binlog_req", thrift.STRUCT, 33); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.GcBinlogReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField34(oprot thrift.TProtocol) (err error) {
	if p.IsSetCleanTrashReq() {
		if err = oprot.WriteFieldBegin("clean_trash_req", thrift.STRUCT, 34); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CleanTrashReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField35(oprot thrift.TProtocol) (err error) {
	if p.IsSetVisibleVersionReq() {
		if err = oprot.WriteFieldBegin("visible_version_req", thrift.STRUCT, 35); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.VisibleVersionReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField36(oprot thrift.TProtocol) (err error) {
	if p.IsSetCleanUdfCacheReq() {
		if err = oprot.WriteFieldBegin("clean_udf_cache_req", thrift.STRUCT, 36); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CleanUdfCacheReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 end error: ", p), err)
}

func (p *TAgentTaskRequest) writeField1000(oprot thrift.TProtocol) (err error) {
	if p.IsSetCalcDeleteBitmapReq() {
		if err = oprot.WriteFieldBegin("calc_delete_bitmap_req", thrift.STRUCT, 1000); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CalcDeleteBitmapReq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 end error: ", p), err)
}

func (p *TAgentTaskRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAgentTaskRequest(%+v)", *p)

}

func (p *TAgentTaskRequest) DeepEqual(ano *TAgentTaskRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ProtocolVersion) {
		return false
	}
	if !p.Field2DeepEqual(ano.TaskType) {
		return false
	}
	if !p.Field3DeepEqual(ano.Signature) {
		return false
	}
	if !p.Field4DeepEqual(ano.Priority) {
		return false
	}
	if !p.Field5DeepEqual(ano.CreateTabletReq) {
		return false
	}
	if !p.Field6DeepEqual(ano.DropTabletReq) {
		return false
	}
	if !p.Field7DeepEqual(ano.AlterTabletReq) {
		return false
	}
	if !p.Field8DeepEqual(ano.CloneReq) {
		return false
	}
	if !p.Field9DeepEqual(ano.PushReq) {
		return false
	}
	if !p.Field10DeepEqual(ano.CancelDeleteDataReq) {
		return false
	}
	if !p.Field11DeepEqual(ano.ResourceInfo) {
		return false
	}
	if !p.Field12DeepEqual(ano.StorageMediumMigrateReq) {
		return false
	}
	if !p.Field13DeepEqual(ano.CheckConsistencyReq) {
		return false
	}
	if !p.Field14DeepEqual(ano.UploadReq) {
		return false
	}
	if !p.Field15DeepEqual(ano.DownloadReq) {
		return false
	}
	if !p.Field16DeepEqual(ano.SnapshotReq) {
		return false
	}
	if !p.Field17DeepEqual(ano.ReleaseSnapshotReq) {
		return false
	}
	if !p.Field18DeepEqual(ano.ClearRemoteFileReq) {
		return false
	}
	if !p.Field19DeepEqual(ano.PublishVersionReq) {
		return false
	}
	if !p.Field20DeepEqual(ano.ClearAlterTaskReq) {
		return false
	}
	if !p.Field21DeepEqual(ano.ClearTransactionTaskReq) {
		return false
	}
	if !p.Field22DeepEqual(ano.MoveDirReq) {
		return false
	}
	if !p.Field23DeepEqual(ano.RecoverTabletReq) {
		return false
	}
	if !p.Field24DeepEqual(ano.AlterTabletReqV2) {
		return false
	}
	if !p.Field25DeepEqual(ano.RecvTime) {
		return false
	}
	if !p.Field26DeepEqual(ano.UpdateTabletMetaInfoReq) {
		return false
	}
	if !p.Field27DeepEqual(ano.CompactionReq) {
		return false
	}
	if !p.Field28DeepEqual(ano.StorageMigrationReqV2) {
		return false
	}
	if !p.Field30DeepEqual(ano.PushCooldownConf) {
		return false
	}
	if !p.Field31DeepEqual(ano.PushStoragePolicyReq) {
		return false
	}
	if !p.Field32DeepEqual(ano.AlterInvertedIndexReq) {
		return false
	}
	if !p.Field33DeepEqual(ano.GcBinlogReq) {
		return false
	}
	if !p.Field34DeepEqual(ano.CleanTrashReq) {
		return false
	}
	if !p.Field35DeepEqual(ano.VisibleVersionReq) {
		return false
	}
	if !p.Field36DeepEqual(ano.CleanUdfCacheReq) {
		return false
	}
	if !p.Field1000DeepEqual(ano.CalcDeleteBitmapReq) {
		return false
	}
	return true
}

func (p *TAgentTaskRequest) Field1DeepEqual(src TAgentServiceVersion) bool {

	if p.ProtocolVersion != src {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field2DeepEqual(src types.TTaskType) bool {

	if p.TaskType != src {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field3DeepEqual(src int64) bool {

	if p.Signature != src {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field4DeepEqual(src *types.TPriority) bool {

	if p.Priority == src {
		return true
	} else if p.Priority == nil || src == nil {
		return false
	}
	if *p.Priority != *src {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field5DeepEqual(src *TCreateTabletReq) bool {

	if !p.CreateTabletReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field6DeepEqual(src *TDropTabletReq) bool {

	if !p.DropTabletReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field7DeepEqual(src *TAlterTabletReq) bool {

	if !p.AlterTabletReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field8DeepEqual(src *TCloneReq) bool {

	if !p.CloneReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field9DeepEqual(src *TPushReq) bool {

	if !p.PushReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field10DeepEqual(src *TCancelDeleteDataReq) bool {

	if !p.CancelDeleteDataReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field11DeepEqual(src *types.TResourceInfo) bool {

	if !p.ResourceInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field12DeepEqual(src *TStorageMediumMigrateReq) bool {

	if !p.StorageMediumMigrateReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field13DeepEqual(src *TCheckConsistencyReq) bool {

	if !p.CheckConsistencyReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field14DeepEqual(src *TUploadReq) bool {

	if !p.UploadReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field15DeepEqual(src *TDownloadReq) bool {

	if !p.DownloadReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field16DeepEqual(src *TSnapshotRequest) bool {

	if !p.SnapshotReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field17DeepEqual(src *TReleaseSnapshotRequest) bool {

	if !p.ReleaseSnapshotReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field18DeepEqual(src *TClearRemoteFileReq) bool {

	if !p.ClearRemoteFileReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field19DeepEqual(src *TPublishVersionRequest) bool {

	if !p.PublishVersionReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field20DeepEqual(src *TClearAlterTaskRequest) bool {

	if !p.ClearAlterTaskReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field21DeepEqual(src *TClearTransactionTaskRequest) bool {

	if !p.ClearTransactionTaskReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field22DeepEqual(src *TMoveDirReq) bool {

	if !p.MoveDirReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field23DeepEqual(src *TRecoverTabletReq) bool {

	if !p.RecoverTabletReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field24DeepEqual(src *TAlterTabletReqV2) bool {

	if !p.AlterTabletReqV2.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field25DeepEqual(src *int64) bool {

	if p.RecvTime == src {
		return true
	} else if p.RecvTime == nil || src == nil {
		return false
	}
	if *p.RecvTime != *src {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field26DeepEqual(src *TUpdateTabletMetaInfoReq) bool {

	if !p.UpdateTabletMetaInfoReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field27DeepEqual(src *TCompactionReq) bool {

	if !p.CompactionReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field28DeepEqual(src *TStorageMigrationReqV2) bool {

	if !p.StorageMigrationReqV2.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field30DeepEqual(src *TPushCooldownConfReq) bool {

	if !p.PushCooldownConf.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field31DeepEqual(src *TPushStoragePolicyReq) bool {

	if !p.PushStoragePolicyReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field32DeepEqual(src *TAlterInvertedIndexReq) bool {

	if !p.AlterInvertedIndexReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field33DeepEqual(src *TGcBinlogReq) bool {

	if !p.GcBinlogReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field34DeepEqual(src *TCleanTrashReq) bool {

	if !p.CleanTrashReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field35DeepEqual(src *TVisibleVersionReq) bool {

	if !p.VisibleVersionReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field36DeepEqual(src *TCleanUDFCacheReq) bool {

	if !p.CleanUdfCacheReq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentTaskRequest) Field1000DeepEqual(src *TCalcDeleteBitmapRequest) bool {

	if !p.CalcDeleteBitmapReq.DeepEqual(src) {
		return false
	}
	return true
}

type TAgentResult_ struct {
	Status                *status.TStatus `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
	SnapshotPath          *string         `thrift:"snapshot_path,2,optional" frugal:"2,optional,string" json:"snapshot_path,omitempty"`
	AllowIncrementalClone *bool           `thrift:"allow_incremental_clone,3,optional" frugal:"3,optional,bool" json:"allow_incremental_clone,omitempty"`
	SnapshotVersion       int32           `thrift:"snapshot_version,4,optional" frugal:"4,optional,i32" json:"snapshot_version,omitempty"`
}

func NewTAgentResult_() *TAgentResult_ {
	return &TAgentResult_{

		SnapshotVersion: 1,
	}
}

func (p *TAgentResult_) InitDefault() {
	p.SnapshotVersion = 1
}

var TAgentResult__Status_DEFAULT *status.TStatus

func (p *TAgentResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TAgentResult__Status_DEFAULT
	}
	return p.Status
}

var TAgentResult__SnapshotPath_DEFAULT string

func (p *TAgentResult_) GetSnapshotPath() (v string) {
	if !p.IsSetSnapshotPath() {
		return TAgentResult__SnapshotPath_DEFAULT
	}
	return *p.SnapshotPath
}

var TAgentResult__AllowIncrementalClone_DEFAULT bool

func (p *TAgentResult_) GetAllowIncrementalClone() (v bool) {
	if !p.IsSetAllowIncrementalClone() {
		return TAgentResult__AllowIncrementalClone_DEFAULT
	}
	return *p.AllowIncrementalClone
}

var TAgentResult__SnapshotVersion_DEFAULT int32 = 1

func (p *TAgentResult_) GetSnapshotVersion() (v int32) {
	if !p.IsSetSnapshotVersion() {
		return TAgentResult__SnapshotVersion_DEFAULT
	}
	return p.SnapshotVersion
}
func (p *TAgentResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TAgentResult_) SetSnapshotPath(val *string) {
	p.SnapshotPath = val
}
func (p *TAgentResult_) SetAllowIncrementalClone(val *bool) {
	p.AllowIncrementalClone = val
}
func (p *TAgentResult_) SetSnapshotVersion(val int32) {
	p.SnapshotVersion = val
}

var fieldIDToName_TAgentResult_ = map[int16]string{
	1: "status",
	2: "snapshot_path",
	3: "allow_incremental_clone",
	4: "snapshot_version",
}

func (p *TAgentResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TAgentResult_) IsSetSnapshotPath() bool {
	return p.SnapshotPath != nil
}

func (p *TAgentResult_) IsSetAllowIncrementalClone() bool {
	return p.AllowIncrementalClone != nil
}

func (p *TAgentResult_) IsSetSnapshotVersion() bool {
	return p.SnapshotVersion != TAgentResult__SnapshotVersion_DEFAULT
}

func (p *TAgentResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAgentResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAgentResult_[fieldId]))
}

func (p *TAgentResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TAgentResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SnapshotPath = _field
	return nil
}
func (p *TAgentResult_) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AllowIncrementalClone = _field
	return nil
}
func (p *TAgentResult_) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SnapshotVersion = _field
	return nil
}

func (p *TAgentResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAgentResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAgentResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAgentResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotPath() {
		if err = oprot.WriteFieldBegin("snapshot_path", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SnapshotPath); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAgentResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllowIncrementalClone() {
		if err = oprot.WriteFieldBegin("allow_incremental_clone", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.AllowIncrementalClone); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TAgentResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotVersion() {
		if err = oprot.WriteFieldBegin("snapshot_version", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.SnapshotVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TAgentResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAgentResult_(%+v)", *p)

}

func (p *TAgentResult_) DeepEqual(ano *TAgentResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.SnapshotPath) {
		return false
	}
	if !p.Field3DeepEqual(ano.AllowIncrementalClone) {
		return false
	}
	if !p.Field4DeepEqual(ano.SnapshotVersion) {
		return false
	}
	return true
}

func (p *TAgentResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAgentResult_) Field2DeepEqual(src *string) bool {

	if p.SnapshotPath == src {
		return true
	} else if p.SnapshotPath == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SnapshotPath, *src) != 0 {
		return false
	}
	return true
}
func (p *TAgentResult_) Field3DeepEqual(src *bool) bool {

	if p.AllowIncrementalClone == src {
		return true
	} else if p.AllowIncrementalClone == nil || src == nil {
		return false
	}
	if *p.AllowIncrementalClone != *src {
		return false
	}
	return true
}
func (p *TAgentResult_) Field4DeepEqual(src int32) bool {

	if p.SnapshotVersion != src {
		return false
	}
	return true
}

type TTopicItem struct {
	Key         string   `thrift:"key,1,required" frugal:"1,required,string" json:"key"`
	IntValue    *int64   `thrift:"int_value,2,optional" frugal:"2,optional,i64" json:"int_value,omitempty"`
	DoubleValue *float64 `thrift:"double_value,3,optional" frugal:"3,optional,double" json:"double_value,omitempty"`
	StringValue *string  `thrift:"string_value,4,optional" frugal:"4,optional,string" json:"string_value,omitempty"`
}

func NewTTopicItem() *TTopicItem {
	return &TTopicItem{}
}

func (p *TTopicItem) InitDefault() {
}

func (p *TTopicItem) GetKey() (v string) {
	return p.Key
}

var TTopicItem_IntValue_DEFAULT int64

func (p *TTopicItem) GetIntValue() (v int64) {
	if !p.IsSetIntValue() {
		return TTopicItem_IntValue_DEFAULT
	}
	return *p.IntValue
}

var TTopicItem_DoubleValue_DEFAULT float64

func (p *TTopicItem) GetDoubleValue() (v float64) {
	if !p.IsSetDoubleValue() {
		return TTopicItem_DoubleValue_DEFAULT
	}
	return *p.DoubleValue
}

var TTopicItem_StringValue_DEFAULT string

func (p *TTopicItem) GetStringValue() (v string) {
	if !p.IsSetStringValue() {
		return TTopicItem_StringValue_DEFAULT
	}
	return *p.StringValue
}
func (p *TTopicItem) SetKey(val string) {
	p.Key = val
}
func (p *TTopicItem) SetIntValue(val *int64) {
	p.IntValue = val
}
func (p *TTopicItem) SetDoubleValue(val *float64) {
	p.DoubleValue = val
}
func (p *TTopicItem) SetStringValue(val *string) {
	p.StringValue = val
}

var fieldIDToName_TTopicItem = map[int16]string{
	1: "key",
	2: "int_value",
	3: "double_value",
	4: "string_value",
}

func (p *TTopicItem) IsSetIntValue() bool {
	return p.IntValue != nil
}

func (p *TTopicItem) IsSetDoubleValue() bool {
	return p.DoubleValue != nil
}

func (p *TTopicItem) IsSetStringValue() bool {
	return p.StringValue != nil
}

func (p *TTopicItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetKey bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetKey = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetKey {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTopicItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTopicItem[fieldId]))
}

func (p *TTopicItem) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Key = _field
	return nil
}
func (p *TTopicItem) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IntValue = _field
	return nil
}
func (p *TTopicItem) ReadField3(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DoubleValue = _field
	return nil
}
func (p *TTopicItem) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StringValue = _field
	return nil
}

func (p *TTopicItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTopicItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTopicItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Key); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTopicItem) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntValue() {
		if err = oprot.WriteFieldBegin("int_value", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.IntValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTopicItem) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDoubleValue() {
		if err = oprot.WriteFieldBegin("double_value", thrift.DOUBLE, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.DoubleValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTopicItem) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringValue() {
		if err = oprot.WriteFieldBegin("string_value", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StringValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TTopicItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTopicItem(%+v)", *p)

}

func (p *TTopicItem) DeepEqual(ano *TTopicItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.IntValue) {
		return false
	}
	if !p.Field3DeepEqual(ano.DoubleValue) {
		return false
	}
	if !p.Field4DeepEqual(ano.StringValue) {
		return false
	}
	return true
}

func (p *TTopicItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Key, src) != 0 {
		return false
	}
	return true
}
func (p *TTopicItem) Field2DeepEqual(src *int64) bool {

	if p.IntValue == src {
		return true
	} else if p.IntValue == nil || src == nil {
		return false
	}
	if *p.IntValue != *src {
		return false
	}
	return true
}
func (p *TTopicItem) Field3DeepEqual(src *float64) bool {

	if p.DoubleValue == src {
		return true
	} else if p.DoubleValue == nil || src == nil {
		return false
	}
	if *p.DoubleValue != *src {
		return false
	}
	return true
}
func (p *TTopicItem) Field4DeepEqual(src *string) bool {

	if p.StringValue == src {
		return true
	} else if p.StringValue == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StringValue, *src) != 0 {
		return false
	}
	return true
}

type TTopicUpdate struct {
	Type    TTopicType    `thrift:"type,1,required" frugal:"1,required,TTopicType" json:"type"`
	Updates []*TTopicItem `thrift:"updates,2,optional" frugal:"2,optional,list<TTopicItem>" json:"updates,omitempty"`
	Deletes []string      `thrift:"deletes,3,optional" frugal:"3,optional,list<string>" json:"deletes,omitempty"`
}

func NewTTopicUpdate() *TTopicUpdate {
	return &TTopicUpdate{}
}

func (p *TTopicUpdate) InitDefault() {
}

func (p *TTopicUpdate) GetType() (v TTopicType) {
	return p.Type
}

var TTopicUpdate_Updates_DEFAULT []*TTopicItem

func (p *TTopicUpdate) GetUpdates() (v []*TTopicItem) {
	if !p.IsSetUpdates() {
		return TTopicUpdate_Updates_DEFAULT
	}
	return p.Updates
}

var TTopicUpdate_Deletes_DEFAULT []string

func (p *TTopicUpdate) GetDeletes() (v []string) {
	if !p.IsSetDeletes() {
		return TTopicUpdate_Deletes_DEFAULT
	}
	return p.Deletes
}
func (p *TTopicUpdate) SetType(val TTopicType) {
	p.Type = val
}
func (p *TTopicUpdate) SetUpdates(val []*TTopicItem) {
	p.Updates = val
}
func (p *TTopicUpdate) SetDeletes(val []string) {
	p.Deletes = val
}

var fieldIDToName_TTopicUpdate = map[int16]string{
	1: "type",
	2: "updates",
	3: "deletes",
}

func (p *TTopicUpdate) IsSetUpdates() bool {
	return p.Updates != nil
}

func (p *TTopicUpdate) IsSetDeletes() bool {
	return p.Deletes != nil
}

func (p *TTopicUpdate) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTopicUpdate[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTopicUpdate[fieldId]))
}

func (p *TTopicUpdate) ReadField1(iprot thrift.TProtocol) error {

	var _field TTopicType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TTopicType(v)
	}
	p.Type = _field
	return nil
}
func (p *TTopicUpdate) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTopicItem, 0, size)
	values := make([]TTopicItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Updates = _field
	return nil
}
func (p *TTopicUpdate) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Deletes = _field
	return nil
}

func (p *TTopicUpdate) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTopicUpdate"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTopicUpdate) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTopicUpdate) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdates() {
		if err = oprot.WriteFieldBegin("updates", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Updates)); err != nil {
			return err
		}
		for _, v := range p.Updates {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTopicUpdate) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeletes() {
		if err = oprot.WriteFieldBegin("deletes", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Deletes)); err != nil {
			return err
		}
		for _, v := range p.Deletes {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTopicUpdate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTopicUpdate(%+v)", *p)

}

func (p *TTopicUpdate) DeepEqual(ano *TTopicUpdate) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.Updates) {
		return false
	}
	if !p.Field3DeepEqual(ano.Deletes) {
		return false
	}
	return true
}

func (p *TTopicUpdate) Field1DeepEqual(src TTopicType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *TTopicUpdate) Field2DeepEqual(src []*TTopicItem) bool {

	if len(p.Updates) != len(src) {
		return false
	}
	for i, v := range p.Updates {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TTopicUpdate) Field3DeepEqual(src []string) bool {

	if len(p.Deletes) != len(src) {
		return false
	}
	for i, v := range p.Deletes {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type TAgentPublishRequest struct {
	ProtocolVersion TAgentServiceVersion `thrift:"protocol_version,1,required" frugal:"1,required,TAgentServiceVersion" json:"protocol_version"`
	Updates         []*TTopicUpdate      `thrift:"updates,2,required" frugal:"2,required,list<TTopicUpdate>" json:"updates"`
}

func NewTAgentPublishRequest() *TAgentPublishRequest {
	return &TAgentPublishRequest{}
}

func (p *TAgentPublishRequest) InitDefault() {
}

func (p *TAgentPublishRequest) GetProtocolVersion() (v TAgentServiceVersion) {
	return p.ProtocolVersion
}

func (p *TAgentPublishRequest) GetUpdates() (v []*TTopicUpdate) {
	return p.Updates
}
func (p *TAgentPublishRequest) SetProtocolVersion(val TAgentServiceVersion) {
	p.ProtocolVersion = val
}
func (p *TAgentPublishRequest) SetUpdates(val []*TTopicUpdate) {
	p.Updates = val
}

var fieldIDToName_TAgentPublishRequest = map[int16]string{
	1: "protocol_version",
	2: "updates",
}

func (p *TAgentPublishRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false
	var issetUpdates bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUpdates = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUpdates {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAgentPublishRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAgentPublishRequest[fieldId]))
}

func (p *TAgentPublishRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field TAgentServiceVersion
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TAgentServiceVersion(v)
	}
	p.ProtocolVersion = _field
	return nil
}
func (p *TAgentPublishRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTopicUpdate, 0, size)
	values := make([]TTopicUpdate, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Updates = _field
	return nil
}

func (p *TAgentPublishRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAgentPublishRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAgentPublishRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAgentPublishRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updates", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Updates)); err != nil {
		return err
	}
	for _, v := range p.Updates {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAgentPublishRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAgentPublishRequest(%+v)", *p)

}

func (p *TAgentPublishRequest) DeepEqual(ano *TAgentPublishRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ProtocolVersion) {
		return false
	}
	if !p.Field2DeepEqual(ano.Updates) {
		return false
	}
	return true
}

func (p *TAgentPublishRequest) Field1DeepEqual(src TAgentServiceVersion) bool {

	if p.ProtocolVersion != src {
		return false
	}
	return true
}
func (p *TAgentPublishRequest) Field2DeepEqual(src []*TTopicUpdate) bool {

	if len(p.Updates) != len(src) {
		return false
	}
	for i, v := range p.Updates {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
