// Code generated by Kitex v0.8.0. DO NOT EDIT.

package agentservice

import (
	"bytes"
	"fmt"
	"reflect"
	"strings"

	"github.com/apache/thrift/lib/go/thrift"

	"github.com/cloudwego/kitex/pkg/protocol/bthrift"

	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/descriptors"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/exprs"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/palointernalservice"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/plannodes"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/status"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/types"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = thrift.TProtocol(nil)
	_ = bthrift.BinaryWriter(nil)
	_ = descriptors.KitexUnusedProtection
	_ = exprs.KitexUnusedProtection
	_ = palointernalservice.KitexUnusedProtection
	_ = plannodes.KitexUnusedProtection
	_ = status.KitexUnusedProtection
	_ = types.KitexUnusedProtection
)

func (p *TTabletSchema) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetShortKeyColumnCount bool = false
	var issetSchemaHash bool = false
	var issetKeysType bool = false
	var issetStorageType bool = false
	var issetColumns bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetShortKeyColumnCount = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetKeysType = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetStorageType = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetColumns = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.DOUBLE {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField15(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField16(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField17(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField18(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField19(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField20(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField21(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetShortKeyColumnCount {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetKeysType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetStorageType {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetColumns {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletSchema[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletSchema[fieldId]))
}

func (p *TTabletSchema) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI16(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ShortKeyColumnCount = v

	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SchemaHash = v

	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.KeysType = types.TKeysType(v)

	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.StorageType = types.TStorageType(v)

	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField5(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Columns = make([]*descriptors.TColumn, 0, size)
	for i := 0; i < size; i++ {
		_elem := descriptors.NewTColumn()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Columns = append(p.Columns, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadDouble(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.BloomFilterFpp = &v

	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField7(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Indexes = make([]*descriptors.TOlapTableIndex, 0, size)
	for i := 0; i < size; i++ {
		_elem := descriptors.NewTOlapTableIndex()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Indexes = append(p.Indexes, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.IsInMemory = &v

	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.DeleteSignIdx = v

	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField10(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SequenceColIdx = v

	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField11(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		tmp := types.TSortType(v)
		p.SortType = &tmp

	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField12(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.SortColNum = &v

	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField13(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.DisableAutoCompaction = &v

	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField14(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.VersionColIdx = v

	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField15(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.IsDynamicSchema = v

	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField16(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.StoreRowColumn = v

	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField17(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableSingleReplicaCompaction = v

	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField18(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SkipWriteIndexOnLoad = v

	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField19(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.ClusterKeyIdxes = make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.ClusterKeyIdxes = append(p.ClusterKeyIdxes, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField20(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.RowStoreColCids = make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.RowStoreColCids = append(p.RowStoreColCids, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TTabletSchema) FastReadField21(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.RowStorePageSize = v

	}
	return offset, nil
}

// for compatibility
func (p *TTabletSchema) FastWrite(buf []byte) int {
	return 0
}

func (p *TTabletSchema) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTabletSchema")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
		offset += p.fastWriteField15(buf[offset:], binaryWriter)
		offset += p.fastWriteField16(buf[offset:], binaryWriter)
		offset += p.fastWriteField17(buf[offset:], binaryWriter)
		offset += p.fastWriteField18(buf[offset:], binaryWriter)
		offset += p.fastWriteField21(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField19(buf[offset:], binaryWriter)
		offset += p.fastWriteField20(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTabletSchema) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTabletSchema")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
		l += p.field15Length()
		l += p.field16Length()
		l += p.field17Length()
		l += p.field18Length()
		l += p.field19Length()
		l += p.field20Length()
		l += p.field21Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTabletSchema) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "short_key_column_count", thrift.I16, 1)
	offset += bthrift.Binary.WriteI16(buf[offset:], p.ShortKeyColumnCount)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletSchema) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "schema_hash", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.SchemaHash)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletSchema) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "keys_type", thrift.I32, 3)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.KeysType))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletSchema) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "storage_type", thrift.I32, 4)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.StorageType))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletSchema) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "columns", thrift.LIST, 5)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.Columns {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletSchema) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBloomFilterFpp() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "bloom_filter_fpp", thrift.DOUBLE, 6)
		offset += bthrift.Binary.WriteDouble(buf[offset:], *p.BloomFilterFpp)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletSchema) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIndexes() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "indexes", thrift.LIST, 7)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.Indexes {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletSchema) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsInMemory() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_in_memory", thrift.BOOL, 8)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.IsInMemory)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletSchema) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDeleteSignIdx() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "delete_sign_idx", thrift.I32, 9)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.DeleteSignIdx)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletSchema) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSequenceColIdx() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "sequence_col_idx", thrift.I32, 10)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.SequenceColIdx)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletSchema) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSortType() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "sort_type", thrift.I32, 11)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(*p.SortType))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletSchema) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSortColNum() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "sort_col_num", thrift.I32, 12)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.SortColNum)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletSchema) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDisableAutoCompaction() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "disable_auto_compaction", thrift.BOOL, 13)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.DisableAutoCompaction)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletSchema) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetVersionColIdx() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version_col_idx", thrift.I32, 14)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.VersionColIdx)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletSchema) fastWriteField15(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsDynamicSchema() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_dynamic_schema", thrift.BOOL, 15)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.IsDynamicSchema)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletSchema) fastWriteField16(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStoreRowColumn() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "store_row_column", thrift.BOOL, 16)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.StoreRowColumn)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletSchema) fastWriteField17(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableSingleReplicaCompaction() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_single_replica_compaction", thrift.BOOL, 17)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableSingleReplicaCompaction)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletSchema) fastWriteField18(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSkipWriteIndexOnLoad() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "skip_write_index_on_load", thrift.BOOL, 18)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.SkipWriteIndexOnLoad)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletSchema) fastWriteField19(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetClusterKeyIdxes() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "cluster_key_idxes", thrift.LIST, 19)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.I32, 0)
		var length int
		for _, v := range p.ClusterKeyIdxes {
			length++
			offset += bthrift.Binary.WriteI32(buf[offset:], v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I32, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletSchema) fastWriteField20(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRowStoreColCids() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "row_store_col_cids", thrift.LIST, 20)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.I32, 0)
		var length int
		for _, v := range p.RowStoreColCids {
			length++
			offset += bthrift.Binary.WriteI32(buf[offset:], v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I32, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletSchema) fastWriteField21(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRowStorePageSize() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "row_store_page_size", thrift.I64, 21)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.RowStorePageSize)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletSchema) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("short_key_column_count", thrift.I16, 1)
	l += bthrift.Binary.I16Length(p.ShortKeyColumnCount)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletSchema) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("schema_hash", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.SchemaHash)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletSchema) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("keys_type", thrift.I32, 3)
	l += bthrift.Binary.I32Length(int32(p.KeysType))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletSchema) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("storage_type", thrift.I32, 4)
	l += bthrift.Binary.I32Length(int32(p.StorageType))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletSchema) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("columns", thrift.LIST, 5)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.Columns))
	for _, v := range p.Columns {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletSchema) field6Length() int {
	l := 0
	if p.IsSetBloomFilterFpp() {
		l += bthrift.Binary.FieldBeginLength("bloom_filter_fpp", thrift.DOUBLE, 6)
		l += bthrift.Binary.DoubleLength(*p.BloomFilterFpp)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletSchema) field7Length() int {
	l := 0
	if p.IsSetIndexes() {
		l += bthrift.Binary.FieldBeginLength("indexes", thrift.LIST, 7)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.Indexes))
		for _, v := range p.Indexes {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletSchema) field8Length() int {
	l := 0
	if p.IsSetIsInMemory() {
		l += bthrift.Binary.FieldBeginLength("is_in_memory", thrift.BOOL, 8)
		l += bthrift.Binary.BoolLength(*p.IsInMemory)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletSchema) field9Length() int {
	l := 0
	if p.IsSetDeleteSignIdx() {
		l += bthrift.Binary.FieldBeginLength("delete_sign_idx", thrift.I32, 9)
		l += bthrift.Binary.I32Length(p.DeleteSignIdx)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletSchema) field10Length() int {
	l := 0
	if p.IsSetSequenceColIdx() {
		l += bthrift.Binary.FieldBeginLength("sequence_col_idx", thrift.I32, 10)
		l += bthrift.Binary.I32Length(p.SequenceColIdx)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletSchema) field11Length() int {
	l := 0
	if p.IsSetSortType() {
		l += bthrift.Binary.FieldBeginLength("sort_type", thrift.I32, 11)
		l += bthrift.Binary.I32Length(int32(*p.SortType))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletSchema) field12Length() int {
	l := 0
	if p.IsSetSortColNum() {
		l += bthrift.Binary.FieldBeginLength("sort_col_num", thrift.I32, 12)
		l += bthrift.Binary.I32Length(*p.SortColNum)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletSchema) field13Length() int {
	l := 0
	if p.IsSetDisableAutoCompaction() {
		l += bthrift.Binary.FieldBeginLength("disable_auto_compaction", thrift.BOOL, 13)
		l += bthrift.Binary.BoolLength(*p.DisableAutoCompaction)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletSchema) field14Length() int {
	l := 0
	if p.IsSetVersionColIdx() {
		l += bthrift.Binary.FieldBeginLength("version_col_idx", thrift.I32, 14)
		l += bthrift.Binary.I32Length(p.VersionColIdx)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletSchema) field15Length() int {
	l := 0
	if p.IsSetIsDynamicSchema() {
		l += bthrift.Binary.FieldBeginLength("is_dynamic_schema", thrift.BOOL, 15)
		l += bthrift.Binary.BoolLength(p.IsDynamicSchema)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletSchema) field16Length() int {
	l := 0
	if p.IsSetStoreRowColumn() {
		l += bthrift.Binary.FieldBeginLength("store_row_column", thrift.BOOL, 16)
		l += bthrift.Binary.BoolLength(p.StoreRowColumn)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletSchema) field17Length() int {
	l := 0
	if p.IsSetEnableSingleReplicaCompaction() {
		l += bthrift.Binary.FieldBeginLength("enable_single_replica_compaction", thrift.BOOL, 17)
		l += bthrift.Binary.BoolLength(p.EnableSingleReplicaCompaction)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletSchema) field18Length() int {
	l := 0
	if p.IsSetSkipWriteIndexOnLoad() {
		l += bthrift.Binary.FieldBeginLength("skip_write_index_on_load", thrift.BOOL, 18)
		l += bthrift.Binary.BoolLength(p.SkipWriteIndexOnLoad)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletSchema) field19Length() int {
	l := 0
	if p.IsSetClusterKeyIdxes() {
		l += bthrift.Binary.FieldBeginLength("cluster_key_idxes", thrift.LIST, 19)
		l += bthrift.Binary.ListBeginLength(thrift.I32, len(p.ClusterKeyIdxes))
		var tmpV int32
		l += bthrift.Binary.I32Length(int32(tmpV)) * len(p.ClusterKeyIdxes)
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletSchema) field20Length() int {
	l := 0
	if p.IsSetRowStoreColCids() {
		l += bthrift.Binary.FieldBeginLength("row_store_col_cids", thrift.LIST, 20)
		l += bthrift.Binary.ListBeginLength(thrift.I32, len(p.RowStoreColCids))
		var tmpV int32
		l += bthrift.Binary.I32Length(int32(tmpV)) * len(p.RowStoreColCids)
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletSchema) field21Length() int {
	l := 0
	if p.IsSetRowStorePageSize() {
		l += bthrift.Binary.FieldBeginLength("row_store_page_size", thrift.I64, 21)
		l += bthrift.Binary.I64Length(p.RowStorePageSize)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TS3StorageParam) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TS3StorageParam[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TS3StorageParam) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Endpoint = &v

	}
	return offset, nil
}

func (p *TS3StorageParam) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Region = &v

	}
	return offset, nil
}

func (p *TS3StorageParam) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Ak = &v

	}
	return offset, nil
}

func (p *TS3StorageParam) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Sk = &v

	}
	return offset, nil
}

func (p *TS3StorageParam) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.MaxConn = v

	}
	return offset, nil
}

func (p *TS3StorageParam) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.RequestTimeoutMs = v

	}
	return offset, nil
}

func (p *TS3StorageParam) FastReadField7(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ConnTimeoutMs = v

	}
	return offset, nil
}

func (p *TS3StorageParam) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.RootPath = &v

	}
	return offset, nil
}

func (p *TS3StorageParam) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Bucket = &v

	}
	return offset, nil
}

func (p *TS3StorageParam) FastReadField10(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.UsePathStyle = v

	}
	return offset, nil
}

func (p *TS3StorageParam) FastReadField11(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Token = &v

	}
	return offset, nil
}

func (p *TS3StorageParam) FastReadField12(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		tmp := TObjStorageType(v)
		p.Provider = &tmp

	}
	return offset, nil
}

// for compatibility
func (p *TS3StorageParam) FastWrite(buf []byte) int {
	return 0
}

func (p *TS3StorageParam) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TS3StorageParam")
	if p != nil {
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TS3StorageParam) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TS3StorageParam")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TS3StorageParam) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEndpoint() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "endpoint", thrift.STRING, 1)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Endpoint)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TS3StorageParam) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRegion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "region", thrift.STRING, 2)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Region)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TS3StorageParam) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetAk() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "ak", thrift.STRING, 3)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Ak)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TS3StorageParam) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSk() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "sk", thrift.STRING, 4)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Sk)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TS3StorageParam) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMaxConn() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "max_conn", thrift.I32, 5)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.MaxConn)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TS3StorageParam) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRequestTimeoutMs() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "request_timeout_ms", thrift.I32, 6)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.RequestTimeoutMs)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TS3StorageParam) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetConnTimeoutMs() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "conn_timeout_ms", thrift.I32, 7)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.ConnTimeoutMs)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TS3StorageParam) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRootPath() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "root_path", thrift.STRING, 8)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.RootPath)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TS3StorageParam) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBucket() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "bucket", thrift.STRING, 9)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Bucket)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TS3StorageParam) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetUsePathStyle() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "use_path_style", thrift.BOOL, 10)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.UsePathStyle)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TS3StorageParam) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetToken() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "token", thrift.STRING, 11)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Token)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TS3StorageParam) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetProvider() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "provider", thrift.I32, 12)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(*p.Provider))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TS3StorageParam) field1Length() int {
	l := 0
	if p.IsSetEndpoint() {
		l += bthrift.Binary.FieldBeginLength("endpoint", thrift.STRING, 1)
		l += bthrift.Binary.StringLengthNocopy(*p.Endpoint)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TS3StorageParam) field2Length() int {
	l := 0
	if p.IsSetRegion() {
		l += bthrift.Binary.FieldBeginLength("region", thrift.STRING, 2)
		l += bthrift.Binary.StringLengthNocopy(*p.Region)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TS3StorageParam) field3Length() int {
	l := 0
	if p.IsSetAk() {
		l += bthrift.Binary.FieldBeginLength("ak", thrift.STRING, 3)
		l += bthrift.Binary.StringLengthNocopy(*p.Ak)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TS3StorageParam) field4Length() int {
	l := 0
	if p.IsSetSk() {
		l += bthrift.Binary.FieldBeginLength("sk", thrift.STRING, 4)
		l += bthrift.Binary.StringLengthNocopy(*p.Sk)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TS3StorageParam) field5Length() int {
	l := 0
	if p.IsSetMaxConn() {
		l += bthrift.Binary.FieldBeginLength("max_conn", thrift.I32, 5)
		l += bthrift.Binary.I32Length(p.MaxConn)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TS3StorageParam) field6Length() int {
	l := 0
	if p.IsSetRequestTimeoutMs() {
		l += bthrift.Binary.FieldBeginLength("request_timeout_ms", thrift.I32, 6)
		l += bthrift.Binary.I32Length(p.RequestTimeoutMs)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TS3StorageParam) field7Length() int {
	l := 0
	if p.IsSetConnTimeoutMs() {
		l += bthrift.Binary.FieldBeginLength("conn_timeout_ms", thrift.I32, 7)
		l += bthrift.Binary.I32Length(p.ConnTimeoutMs)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TS3StorageParam) field8Length() int {
	l := 0
	if p.IsSetRootPath() {
		l += bthrift.Binary.FieldBeginLength("root_path", thrift.STRING, 8)
		l += bthrift.Binary.StringLengthNocopy(*p.RootPath)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TS3StorageParam) field9Length() int {
	l := 0
	if p.IsSetBucket() {
		l += bthrift.Binary.FieldBeginLength("bucket", thrift.STRING, 9)
		l += bthrift.Binary.StringLengthNocopy(*p.Bucket)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TS3StorageParam) field10Length() int {
	l := 0
	if p.IsSetUsePathStyle() {
		l += bthrift.Binary.FieldBeginLength("use_path_style", thrift.BOOL, 10)
		l += bthrift.Binary.BoolLength(p.UsePathStyle)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TS3StorageParam) field11Length() int {
	l := 0
	if p.IsSetToken() {
		l += bthrift.Binary.FieldBeginLength("token", thrift.STRING, 11)
		l += bthrift.Binary.StringLengthNocopy(*p.Token)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TS3StorageParam) field12Length() int {
	l := 0
	if p.IsSetProvider() {
		l += bthrift.Binary.FieldBeginLength("provider", thrift.I32, 12)
		l += bthrift.Binary.I32Length(int32(*p.Provider))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStoragePolicy) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TStoragePolicy[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TStoragePolicy) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Id = &v

	}
	return offset, nil
}

func (p *TStoragePolicy) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Name = &v

	}
	return offset, nil
}

func (p *TStoragePolicy) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Version = &v

	}
	return offset, nil
}

func (p *TStoragePolicy) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.CooldownDatetime = &v

	}
	return offset, nil
}

func (p *TStoragePolicy) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.CooldownTtl = &v

	}
	return offset, nil
}

func (p *TStoragePolicy) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ResourceId = &v

	}
	return offset, nil
}

// for compatibility
func (p *TStoragePolicy) FastWrite(buf []byte) int {
	return 0
}

func (p *TStoragePolicy) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TStoragePolicy")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TStoragePolicy) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TStoragePolicy")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TStoragePolicy) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "id", thrift.I64, 1)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.Id)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStoragePolicy) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetName() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "name", thrift.STRING, 2)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Name)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStoragePolicy) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version", thrift.I64, 3)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.Version)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStoragePolicy) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCooldownDatetime() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "cooldown_datetime", thrift.I64, 4)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.CooldownDatetime)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStoragePolicy) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCooldownTtl() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "cooldown_ttl", thrift.I64, 5)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.CooldownTtl)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStoragePolicy) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetResourceId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "resource_id", thrift.I64, 6)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.ResourceId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStoragePolicy) field1Length() int {
	l := 0
	if p.IsSetId() {
		l += bthrift.Binary.FieldBeginLength("id", thrift.I64, 1)
		l += bthrift.Binary.I64Length(*p.Id)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStoragePolicy) field2Length() int {
	l := 0
	if p.IsSetName() {
		l += bthrift.Binary.FieldBeginLength("name", thrift.STRING, 2)
		l += bthrift.Binary.StringLengthNocopy(*p.Name)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStoragePolicy) field3Length() int {
	l := 0
	if p.IsSetVersion() {
		l += bthrift.Binary.FieldBeginLength("version", thrift.I64, 3)
		l += bthrift.Binary.I64Length(*p.Version)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStoragePolicy) field4Length() int {
	l := 0
	if p.IsSetCooldownDatetime() {
		l += bthrift.Binary.FieldBeginLength("cooldown_datetime", thrift.I64, 4)
		l += bthrift.Binary.I64Length(*p.CooldownDatetime)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStoragePolicy) field5Length() int {
	l := 0
	if p.IsSetCooldownTtl() {
		l += bthrift.Binary.FieldBeginLength("cooldown_ttl", thrift.I64, 5)
		l += bthrift.Binary.I64Length(*p.CooldownTtl)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStoragePolicy) field6Length() int {
	l := 0
	if p.IsSetResourceId() {
		l += bthrift.Binary.FieldBeginLength("resource_id", thrift.I64, 6)
		l += bthrift.Binary.I64Length(*p.ResourceId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStorageResource) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TStorageResource[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TStorageResource) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Id = &v

	}
	return offset, nil
}

func (p *TStorageResource) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Name = &v

	}
	return offset, nil
}

func (p *TStorageResource) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Version = &v

	}
	return offset, nil
}

func (p *TStorageResource) FastReadField4(buf []byte) (int, error) {
	offset := 0

	tmp := NewTS3StorageParam()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.S3StorageParam = tmp
	return offset, nil
}

func (p *TStorageResource) FastReadField5(buf []byte) (int, error) {
	offset := 0

	tmp := plannodes.NewTHdfsParams()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.HdfsStorageParam = tmp
	return offset, nil
}

// for compatibility
func (p *TStorageResource) FastWrite(buf []byte) int {
	return 0
}

func (p *TStorageResource) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TStorageResource")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TStorageResource) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TStorageResource")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TStorageResource) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "id", thrift.I64, 1)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.Id)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStorageResource) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetName() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "name", thrift.STRING, 2)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Name)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStorageResource) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version", thrift.I64, 3)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.Version)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStorageResource) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetS3StorageParam() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "s3_storage_param", thrift.STRUCT, 4)
		offset += p.S3StorageParam.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStorageResource) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetHdfsStorageParam() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "hdfs_storage_param", thrift.STRUCT, 5)
		offset += p.HdfsStorageParam.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStorageResource) field1Length() int {
	l := 0
	if p.IsSetId() {
		l += bthrift.Binary.FieldBeginLength("id", thrift.I64, 1)
		l += bthrift.Binary.I64Length(*p.Id)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStorageResource) field2Length() int {
	l := 0
	if p.IsSetName() {
		l += bthrift.Binary.FieldBeginLength("name", thrift.STRING, 2)
		l += bthrift.Binary.StringLengthNocopy(*p.Name)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStorageResource) field3Length() int {
	l := 0
	if p.IsSetVersion() {
		l += bthrift.Binary.FieldBeginLength("version", thrift.I64, 3)
		l += bthrift.Binary.I64Length(*p.Version)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStorageResource) field4Length() int {
	l := 0
	if p.IsSetS3StorageParam() {
		l += bthrift.Binary.FieldBeginLength("s3_storage_param", thrift.STRUCT, 4)
		l += p.S3StorageParam.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStorageResource) field5Length() int {
	l := 0
	if p.IsSetHdfsStorageParam() {
		l += bthrift.Binary.FieldBeginLength("hdfs_storage_param", thrift.STRUCT, 5)
		l += p.HdfsStorageParam.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPushStoragePolicyReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPushStoragePolicyReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TPushStoragePolicyReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.StoragePolicy = make([]*TStoragePolicy, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTStoragePolicy()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.StoragePolicy = append(p.StoragePolicy, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPushStoragePolicyReq) FastReadField2(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Resource = make([]*TStorageResource, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTStorageResource()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Resource = append(p.Resource, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPushStoragePolicyReq) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.DroppedStoragePolicy = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.DroppedStoragePolicy = append(p.DroppedStoragePolicy, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TPushStoragePolicyReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TPushStoragePolicyReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TPushStoragePolicyReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TPushStoragePolicyReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TPushStoragePolicyReq")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TPushStoragePolicyReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStoragePolicy() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "storage_policy", thrift.LIST, 1)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.StoragePolicy {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPushStoragePolicyReq) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetResource() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "resource", thrift.LIST, 2)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.Resource {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPushStoragePolicyReq) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDroppedStoragePolicy() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "dropped_storage_policy", thrift.LIST, 3)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.I64, 0)
		var length int
		for _, v := range p.DroppedStoragePolicy {
			length++
			offset += bthrift.Binary.WriteI64(buf[offset:], v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I64, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPushStoragePolicyReq) field1Length() int {
	l := 0
	if p.IsSetStoragePolicy() {
		l += bthrift.Binary.FieldBeginLength("storage_policy", thrift.LIST, 1)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.StoragePolicy))
		for _, v := range p.StoragePolicy {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPushStoragePolicyReq) field2Length() int {
	l := 0
	if p.IsSetResource() {
		l += bthrift.Binary.FieldBeginLength("resource", thrift.LIST, 2)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.Resource))
		for _, v := range p.Resource {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPushStoragePolicyReq) field3Length() int {
	l := 0
	if p.IsSetDroppedStoragePolicy() {
		l += bthrift.Binary.FieldBeginLength("dropped_storage_policy", thrift.LIST, 3)
		l += bthrift.Binary.ListBeginLength(thrift.I64, len(p.DroppedStoragePolicy))
		var tmpV int64
		l += bthrift.Binary.I64Length(int64(tmpV)) * len(p.DroppedStoragePolicy)
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCleanTrashReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
		offset += l
		if err != nil {
			goto SkipFieldError
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

// for compatibility
func (p *TCleanTrashReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TCleanTrashReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TCleanTrashReq")
	if p != nil {
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TCleanTrashReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TCleanTrashReq")
	if p != nil {
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TCleanUDFCacheReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCleanUDFCacheReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TCleanUDFCacheReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.FunctionSignature = &v

	}
	return offset, nil
}

// for compatibility
func (p *TCleanUDFCacheReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TCleanUDFCacheReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TCleanUDFCacheReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TCleanUDFCacheReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TCleanUDFCacheReq")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TCleanUDFCacheReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFunctionSignature() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "function_signature", thrift.STRING, 1)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.FunctionSignature)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCleanUDFCacheReq) field1Length() int {
	l := 0
	if p.IsSetFunctionSignature() {
		l += bthrift.Binary.FieldBeginLength("function_signature", thrift.STRING, 1)
		l += bthrift.Binary.StringLengthNocopy(*p.FunctionSignature)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TBinlogConfig) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TBinlogConfig[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TBinlogConfig) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Enable = &v

	}
	return offset, nil
}

func (p *TBinlogConfig) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TtlSeconds = &v

	}
	return offset, nil
}

func (p *TBinlogConfig) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.MaxBytes = &v

	}
	return offset, nil
}

func (p *TBinlogConfig) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.MaxHistoryNums = &v

	}
	return offset, nil
}

// for compatibility
func (p *TBinlogConfig) FastWrite(buf []byte) int {
	return 0
}

func (p *TBinlogConfig) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TBinlogConfig")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TBinlogConfig) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TBinlogConfig")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TBinlogConfig) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnable() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable", thrift.BOOL, 1)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.Enable)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TBinlogConfig) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTtlSeconds() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "ttl_seconds", thrift.I64, 2)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TtlSeconds)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TBinlogConfig) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMaxBytes() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "max_bytes", thrift.I64, 3)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.MaxBytes)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TBinlogConfig) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMaxHistoryNums() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "max_history_nums", thrift.I64, 4)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.MaxHistoryNums)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TBinlogConfig) field1Length() int {
	l := 0
	if p.IsSetEnable() {
		l += bthrift.Binary.FieldBeginLength("enable", thrift.BOOL, 1)
		l += bthrift.Binary.BoolLength(*p.Enable)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TBinlogConfig) field2Length() int {
	l := 0
	if p.IsSetTtlSeconds() {
		l += bthrift.Binary.FieldBeginLength("ttl_seconds", thrift.I64, 2)
		l += bthrift.Binary.I64Length(*p.TtlSeconds)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TBinlogConfig) field3Length() int {
	l := 0
	if p.IsSetMaxBytes() {
		l += bthrift.Binary.FieldBeginLength("max_bytes", thrift.I64, 3)
		l += bthrift.Binary.I64Length(*p.MaxBytes)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TBinlogConfig) field4Length() int {
	l := 0
	if p.IsSetMaxHistoryNums() {
		l += bthrift.Binary.FieldBeginLength("max_history_nums", thrift.I64, 4)
		l += bthrift.Binary.I64Length(*p.MaxHistoryNums)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetTabletSchema bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletSchema = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField16(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField17(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField19(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField20(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField21(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField22(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 23:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField23(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 24:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField24(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 25:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField25(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 26:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField26(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 27:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField27(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 28:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField28(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 29:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField29(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 1000:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField1000(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 1001:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField1001(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTabletSchema {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCreateTabletReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCreateTabletReq[fieldId]))
}

func (p *TCreateTabletReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TabletId = v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField2(buf []byte) (int, error) {
	offset := 0

	tmp := NewTTabletSchema()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.TabletSchema = tmp
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Version = &v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.VersionHash = &v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		tmp := types.TStorageMedium(v)
		p.StorageMedium = &tmp

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.InRestoreMode = &v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField7(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.BaseTabletId = &v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.BaseSchemaHash = &v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TableId = &v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField10(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.PartitionId = &v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField11(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.AllocationTerm = &v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField12(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.IsEcoMode = &v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField13(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		tmp := TStorageFormat(v)
		p.StorageFormat = &tmp

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField14(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		tmp := TTabletType(v)
		p.TabletType = &tmp

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField16(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.CompressionType = TCompressionType(v)

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField17(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ReplicaId = v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField19(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableUniqueKeyMergeOnWrite = v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField20(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.StoragePolicyId = &v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField21(buf []byte) (int, error) {
	offset := 0

	tmp := NewTBinlogConfig()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.BinlogConfig = tmp
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField22(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.CompactionPolicy = v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField23(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TimeSeriesCompactionGoalSizeMbytes = v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField24(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TimeSeriesCompactionFileCountThreshold = v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField25(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TimeSeriesCompactionTimeThresholdSeconds = v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField26(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TimeSeriesCompactionEmptyRowsetsThreshold = v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField27(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TimeSeriesCompactionLevelThreshold = v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField28(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.InvertedIndexStorageFormat = TInvertedIndexStorageFormat(v)

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField29(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.InvertedIndexFileStorageFormat = types.TInvertedIndexFileStorageFormat(v)

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField1000(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.IsInMemory = v

	}
	return offset, nil
}

func (p *TCreateTabletReq) FastReadField1001(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.IsPersistent = v

	}
	return offset, nil
}

// for compatibility
func (p *TCreateTabletReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TCreateTabletReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TCreateTabletReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField17(buf[offset:], binaryWriter)
		offset += p.fastWriteField19(buf[offset:], binaryWriter)
		offset += p.fastWriteField20(buf[offset:], binaryWriter)
		offset += p.fastWriteField23(buf[offset:], binaryWriter)
		offset += p.fastWriteField24(buf[offset:], binaryWriter)
		offset += p.fastWriteField25(buf[offset:], binaryWriter)
		offset += p.fastWriteField26(buf[offset:], binaryWriter)
		offset += p.fastWriteField27(buf[offset:], binaryWriter)
		offset += p.fastWriteField1000(buf[offset:], binaryWriter)
		offset += p.fastWriteField1001(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
		offset += p.fastWriteField16(buf[offset:], binaryWriter)
		offset += p.fastWriteField21(buf[offset:], binaryWriter)
		offset += p.fastWriteField22(buf[offset:], binaryWriter)
		offset += p.fastWriteField28(buf[offset:], binaryWriter)
		offset += p.fastWriteField29(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TCreateTabletReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TCreateTabletReq")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
		l += p.field16Length()
		l += p.field17Length()
		l += p.field19Length()
		l += p.field20Length()
		l += p.field21Length()
		l += p.field22Length()
		l += p.field23Length()
		l += p.field24Length()
		l += p.field25Length()
		l += p.field26Length()
		l += p.field27Length()
		l += p.field28Length()
		l += p.field29Length()
		l += p.field1000Length()
		l += p.field1001Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TCreateTabletReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TabletId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCreateTabletReq) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_schema", thrift.STRUCT, 2)
	offset += p.TabletSchema.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCreateTabletReq) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version", thrift.I64, 3)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.Version)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetVersionHash() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version_hash", thrift.I64, 4)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.VersionHash)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStorageMedium() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "storage_medium", thrift.I32, 5)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(*p.StorageMedium))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetInRestoreMode() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "in_restore_mode", thrift.BOOL, 6)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.InRestoreMode)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBaseTabletId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "base_tablet_id", thrift.I64, 7)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.BaseTabletId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBaseSchemaHash() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "base_schema_hash", thrift.I32, 8)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.BaseSchemaHash)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTableId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "table_id", thrift.I64, 9)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TableId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPartitionId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "partition_id", thrift.I64, 10)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.PartitionId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetAllocationTerm() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "allocation_term", thrift.I64, 11)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.AllocationTerm)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsEcoMode() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_eco_mode", thrift.BOOL, 12)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.IsEcoMode)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStorageFormat() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "storage_format", thrift.I32, 13)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(*p.StorageFormat))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTabletType() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_type", thrift.I32, 14)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(*p.TabletType))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField16(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCompressionType() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "compression_type", thrift.I32, 16)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.CompressionType))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField17(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetReplicaId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "replica_id", thrift.I64, 17)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.ReplicaId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField19(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableUniqueKeyMergeOnWrite() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_unique_key_merge_on_write", thrift.BOOL, 19)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableUniqueKeyMergeOnWrite)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField20(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStoragePolicyId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "storage_policy_id", thrift.I64, 20)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.StoragePolicyId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField21(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBinlogConfig() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "binlog_config", thrift.STRUCT, 21)
		offset += p.BinlogConfig.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField22(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCompactionPolicy() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "compaction_policy", thrift.STRING, 22)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.CompactionPolicy)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField23(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTimeSeriesCompactionGoalSizeMbytes() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "time_series_compaction_goal_size_mbytes", thrift.I64, 23)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.TimeSeriesCompactionGoalSizeMbytes)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField24(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTimeSeriesCompactionFileCountThreshold() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "time_series_compaction_file_count_threshold", thrift.I64, 24)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.TimeSeriesCompactionFileCountThreshold)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField25(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTimeSeriesCompactionTimeThresholdSeconds() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "time_series_compaction_time_threshold_seconds", thrift.I64, 25)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.TimeSeriesCompactionTimeThresholdSeconds)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField26(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTimeSeriesCompactionEmptyRowsetsThreshold() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "time_series_compaction_empty_rowsets_threshold", thrift.I64, 26)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.TimeSeriesCompactionEmptyRowsetsThreshold)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField27(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTimeSeriesCompactionLevelThreshold() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "time_series_compaction_level_threshold", thrift.I64, 27)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.TimeSeriesCompactionLevelThreshold)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField28(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetInvertedIndexStorageFormat() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "inverted_index_storage_format", thrift.I32, 28)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.InvertedIndexStorageFormat))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField29(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetInvertedIndexFileStorageFormat() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "inverted_index_file_storage_format", thrift.I32, 29)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.InvertedIndexFileStorageFormat))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField1000(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsInMemory() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_in_memory", thrift.BOOL, 1000)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.IsInMemory)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) fastWriteField1001(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsPersistent() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_persistent", thrift.BOOL, 1001)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.IsPersistent)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCreateTabletReq) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablet_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.TabletId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCreateTabletReq) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablet_schema", thrift.STRUCT, 2)
	l += p.TabletSchema.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCreateTabletReq) field3Length() int {
	l := 0
	if p.IsSetVersion() {
		l += bthrift.Binary.FieldBeginLength("version", thrift.I64, 3)
		l += bthrift.Binary.I64Length(*p.Version)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field4Length() int {
	l := 0
	if p.IsSetVersionHash() {
		l += bthrift.Binary.FieldBeginLength("version_hash", thrift.I64, 4)
		l += bthrift.Binary.I64Length(*p.VersionHash)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field5Length() int {
	l := 0
	if p.IsSetStorageMedium() {
		l += bthrift.Binary.FieldBeginLength("storage_medium", thrift.I32, 5)
		l += bthrift.Binary.I32Length(int32(*p.StorageMedium))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field6Length() int {
	l := 0
	if p.IsSetInRestoreMode() {
		l += bthrift.Binary.FieldBeginLength("in_restore_mode", thrift.BOOL, 6)
		l += bthrift.Binary.BoolLength(*p.InRestoreMode)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field7Length() int {
	l := 0
	if p.IsSetBaseTabletId() {
		l += bthrift.Binary.FieldBeginLength("base_tablet_id", thrift.I64, 7)
		l += bthrift.Binary.I64Length(*p.BaseTabletId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field8Length() int {
	l := 0
	if p.IsSetBaseSchemaHash() {
		l += bthrift.Binary.FieldBeginLength("base_schema_hash", thrift.I32, 8)
		l += bthrift.Binary.I32Length(*p.BaseSchemaHash)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field9Length() int {
	l := 0
	if p.IsSetTableId() {
		l += bthrift.Binary.FieldBeginLength("table_id", thrift.I64, 9)
		l += bthrift.Binary.I64Length(*p.TableId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field10Length() int {
	l := 0
	if p.IsSetPartitionId() {
		l += bthrift.Binary.FieldBeginLength("partition_id", thrift.I64, 10)
		l += bthrift.Binary.I64Length(*p.PartitionId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field11Length() int {
	l := 0
	if p.IsSetAllocationTerm() {
		l += bthrift.Binary.FieldBeginLength("allocation_term", thrift.I64, 11)
		l += bthrift.Binary.I64Length(*p.AllocationTerm)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field12Length() int {
	l := 0
	if p.IsSetIsEcoMode() {
		l += bthrift.Binary.FieldBeginLength("is_eco_mode", thrift.BOOL, 12)
		l += bthrift.Binary.BoolLength(*p.IsEcoMode)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field13Length() int {
	l := 0
	if p.IsSetStorageFormat() {
		l += bthrift.Binary.FieldBeginLength("storage_format", thrift.I32, 13)
		l += bthrift.Binary.I32Length(int32(*p.StorageFormat))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field14Length() int {
	l := 0
	if p.IsSetTabletType() {
		l += bthrift.Binary.FieldBeginLength("tablet_type", thrift.I32, 14)
		l += bthrift.Binary.I32Length(int32(*p.TabletType))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field16Length() int {
	l := 0
	if p.IsSetCompressionType() {
		l += bthrift.Binary.FieldBeginLength("compression_type", thrift.I32, 16)
		l += bthrift.Binary.I32Length(int32(p.CompressionType))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field17Length() int {
	l := 0
	if p.IsSetReplicaId() {
		l += bthrift.Binary.FieldBeginLength("replica_id", thrift.I64, 17)
		l += bthrift.Binary.I64Length(p.ReplicaId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field19Length() int {
	l := 0
	if p.IsSetEnableUniqueKeyMergeOnWrite() {
		l += bthrift.Binary.FieldBeginLength("enable_unique_key_merge_on_write", thrift.BOOL, 19)
		l += bthrift.Binary.BoolLength(p.EnableUniqueKeyMergeOnWrite)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field20Length() int {
	l := 0
	if p.IsSetStoragePolicyId() {
		l += bthrift.Binary.FieldBeginLength("storage_policy_id", thrift.I64, 20)
		l += bthrift.Binary.I64Length(*p.StoragePolicyId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field21Length() int {
	l := 0
	if p.IsSetBinlogConfig() {
		l += bthrift.Binary.FieldBeginLength("binlog_config", thrift.STRUCT, 21)
		l += p.BinlogConfig.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field22Length() int {
	l := 0
	if p.IsSetCompactionPolicy() {
		l += bthrift.Binary.FieldBeginLength("compaction_policy", thrift.STRING, 22)
		l += bthrift.Binary.StringLengthNocopy(p.CompactionPolicy)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field23Length() int {
	l := 0
	if p.IsSetTimeSeriesCompactionGoalSizeMbytes() {
		l += bthrift.Binary.FieldBeginLength("time_series_compaction_goal_size_mbytes", thrift.I64, 23)
		l += bthrift.Binary.I64Length(p.TimeSeriesCompactionGoalSizeMbytes)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field24Length() int {
	l := 0
	if p.IsSetTimeSeriesCompactionFileCountThreshold() {
		l += bthrift.Binary.FieldBeginLength("time_series_compaction_file_count_threshold", thrift.I64, 24)
		l += bthrift.Binary.I64Length(p.TimeSeriesCompactionFileCountThreshold)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field25Length() int {
	l := 0
	if p.IsSetTimeSeriesCompactionTimeThresholdSeconds() {
		l += bthrift.Binary.FieldBeginLength("time_series_compaction_time_threshold_seconds", thrift.I64, 25)
		l += bthrift.Binary.I64Length(p.TimeSeriesCompactionTimeThresholdSeconds)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field26Length() int {
	l := 0
	if p.IsSetTimeSeriesCompactionEmptyRowsetsThreshold() {
		l += bthrift.Binary.FieldBeginLength("time_series_compaction_empty_rowsets_threshold", thrift.I64, 26)
		l += bthrift.Binary.I64Length(p.TimeSeriesCompactionEmptyRowsetsThreshold)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field27Length() int {
	l := 0
	if p.IsSetTimeSeriesCompactionLevelThreshold() {
		l += bthrift.Binary.FieldBeginLength("time_series_compaction_level_threshold", thrift.I64, 27)
		l += bthrift.Binary.I64Length(p.TimeSeriesCompactionLevelThreshold)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field28Length() int {
	l := 0
	if p.IsSetInvertedIndexStorageFormat() {
		l += bthrift.Binary.FieldBeginLength("inverted_index_storage_format", thrift.I32, 28)
		l += bthrift.Binary.I32Length(int32(p.InvertedIndexStorageFormat))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field29Length() int {
	l := 0
	if p.IsSetInvertedIndexFileStorageFormat() {
		l += bthrift.Binary.FieldBeginLength("inverted_index_file_storage_format", thrift.I32, 29)
		l += bthrift.Binary.I32Length(int32(p.InvertedIndexFileStorageFormat))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field1000Length() int {
	l := 0
	if p.IsSetIsInMemory() {
		l += bthrift.Binary.FieldBeginLength("is_in_memory", thrift.BOOL, 1000)
		l += bthrift.Binary.BoolLength(p.IsInMemory)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCreateTabletReq) field1001Length() int {
	l := 0
	if p.IsSetIsPersistent() {
		l += bthrift.Binary.FieldBeginLength("is_persistent", thrift.BOOL, 1001)
		l += bthrift.Binary.BoolLength(p.IsPersistent)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TDropTabletReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDropTabletReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TDropTabletReq[fieldId]))
}

func (p *TDropTabletReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TabletId = v

	}
	return offset, nil
}

func (p *TDropTabletReq) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.SchemaHash = &v

	}
	return offset, nil
}

func (p *TDropTabletReq) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ReplicaId = v

	}
	return offset, nil
}

func (p *TDropTabletReq) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.IsDropTableOrPartition = v

	}
	return offset, nil
}

// for compatibility
func (p *TDropTabletReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TDropTabletReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TDropTabletReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TDropTabletReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TDropTabletReq")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TDropTabletReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TabletId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TDropTabletReq) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSchemaHash() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "schema_hash", thrift.I32, 2)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.SchemaHash)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TDropTabletReq) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetReplicaId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "replica_id", thrift.I64, 3)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.ReplicaId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TDropTabletReq) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsDropTableOrPartition() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_drop_table_or_partition", thrift.BOOL, 4)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.IsDropTableOrPartition)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TDropTabletReq) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablet_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.TabletId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TDropTabletReq) field2Length() int {
	l := 0
	if p.IsSetSchemaHash() {
		l += bthrift.Binary.FieldBeginLength("schema_hash", thrift.I32, 2)
		l += bthrift.Binary.I32Length(*p.SchemaHash)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TDropTabletReq) field3Length() int {
	l := 0
	if p.IsSetReplicaId() {
		l += bthrift.Binary.FieldBeginLength("replica_id", thrift.I64, 3)
		l += bthrift.Binary.I64Length(p.ReplicaId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TDropTabletReq) field4Length() int {
	l := 0
	if p.IsSetIsDropTableOrPartition() {
		l += bthrift.Binary.FieldBeginLength("is_drop_table_or_partition", thrift.BOOL, 4)
		l += bthrift.Binary.BoolLength(p.IsDropTableOrPartition)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterTabletReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBaseTabletId bool = false
	var issetBaseSchemaHash bool = false
	var issetNewTabletReq_ bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetBaseTabletId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetBaseSchemaHash = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetNewTabletReq_ = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetBaseTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetBaseSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetNewTabletReq_ {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAlterTabletReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAlterTabletReq[fieldId]))
}

func (p *TAlterTabletReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.BaseTabletId = v

	}
	return offset, nil
}

func (p *TAlterTabletReq) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.BaseSchemaHash = v

	}
	return offset, nil
}

func (p *TAlterTabletReq) FastReadField3(buf []byte) (int, error) {
	offset := 0

	tmp := NewTCreateTabletReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.NewTabletReq_ = tmp
	return offset, nil
}

// for compatibility
func (p *TAlterTabletReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TAlterTabletReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TAlterTabletReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TAlterTabletReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TAlterTabletReq")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TAlterTabletReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "base_tablet_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.BaseTabletId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TAlterTabletReq) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "base_schema_hash", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.BaseSchemaHash)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TAlterTabletReq) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "new_tablet_req", thrift.STRUCT, 3)
	offset += p.NewTabletReq_.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TAlterTabletReq) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("base_tablet_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.BaseTabletId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TAlterTabletReq) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("base_schema_hash", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.BaseSchemaHash)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TAlterTabletReq) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("new_tablet_req", thrift.STRUCT, 3)
	l += p.NewTabletReq_.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TAlterMaterializedViewParam) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetColumnName bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetColumnName = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetColumnName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAlterMaterializedViewParam[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAlterMaterializedViewParam[fieldId]))
}

func (p *TAlterMaterializedViewParam) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ColumnName = v

	}
	return offset, nil
}

func (p *TAlterMaterializedViewParam) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.OriginColumnName = &v

	}
	return offset, nil
}

func (p *TAlterMaterializedViewParam) FastReadField3(buf []byte) (int, error) {
	offset := 0

	tmp := exprs.NewTExpr()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.MvExpr = tmp
	return offset, nil
}

// for compatibility
func (p *TAlterMaterializedViewParam) FastWrite(buf []byte) int {
	return 0
}

func (p *TAlterMaterializedViewParam) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TAlterMaterializedViewParam")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TAlterMaterializedViewParam) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TAlterMaterializedViewParam")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TAlterMaterializedViewParam) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "column_name", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.ColumnName)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TAlterMaterializedViewParam) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetOriginColumnName() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "origin_column_name", thrift.STRING, 2)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.OriginColumnName)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterMaterializedViewParam) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMvExpr() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "mv_expr", thrift.STRUCT, 3)
		offset += p.MvExpr.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterMaterializedViewParam) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("column_name", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.ColumnName)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TAlterMaterializedViewParam) field2Length() int {
	l := 0
	if p.IsSetOriginColumnName() {
		l += bthrift.Binary.FieldBeginLength("origin_column_name", thrift.STRING, 2)
		l += bthrift.Binary.StringLengthNocopy(*p.OriginColumnName)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterMaterializedViewParam) field3Length() int {
	l := 0
	if p.IsSetMvExpr() {
		l += bthrift.Binary.FieldBeginLength("mv_expr", thrift.STRUCT, 3)
		l += p.MvExpr.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterTabletReqV2) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBaseTabletId bool = false
	var issetNewTabletId_ bool = false
	var issetBaseSchemaHash bool = false
	var issetNewSchemaHash_ bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetBaseTabletId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetNewTabletId_ = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetBaseSchemaHash = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetNewSchemaHash_ = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 1000:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1000(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 1001:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1001(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 1002:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1002(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetBaseTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNewTabletId_ {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBaseSchemaHash {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetNewSchemaHash_ {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAlterTabletReqV2[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAlterTabletReqV2[fieldId]))
}

func (p *TAlterTabletReqV2) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.BaseTabletId = v

	}
	return offset, nil
}

func (p *TAlterTabletReqV2) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.NewTabletId_ = v

	}
	return offset, nil
}

func (p *TAlterTabletReqV2) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.BaseSchemaHash = v

	}
	return offset, nil
}

func (p *TAlterTabletReqV2) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.NewSchemaHash_ = v

	}
	return offset, nil
}

func (p *TAlterTabletReqV2) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.AlterVersion = &v

	}
	return offset, nil
}

func (p *TAlterTabletReqV2) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.AlterVersionHash = &v

	}
	return offset, nil
}

func (p *TAlterTabletReqV2) FastReadField7(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.MaterializedViewParams = make([]*TAlterMaterializedViewParam, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTAlterMaterializedViewParam()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.MaterializedViewParams = append(p.MaterializedViewParams, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TAlterTabletReqV2) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.AlterTabletType = TAlterTabletType(v)

	}
	return offset, nil
}

func (p *TAlterTabletReqV2) FastReadField9(buf []byte) (int, error) {
	offset := 0

	tmp := descriptors.NewTDescriptorTable()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.DescTbl = tmp
	return offset, nil
}

func (p *TAlterTabletReqV2) FastReadField10(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Columns = make([]*descriptors.TColumn, 0, size)
	for i := 0; i < size; i++ {
		_elem := descriptors.NewTColumn()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Columns = append(p.Columns, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TAlterTabletReqV2) FastReadField11(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.BeExecVersion = v

	}
	return offset, nil
}

func (p *TAlterTabletReqV2) FastReadField1000(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.JobId = &v

	}
	return offset, nil
}

func (p *TAlterTabletReqV2) FastReadField1001(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Expiration = &v

	}
	return offset, nil
}

func (p *TAlterTabletReqV2) FastReadField1002(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.StorageVaultId = &v

	}
	return offset, nil
}

// for compatibility
func (p *TAlterTabletReqV2) FastWrite(buf []byte) int {
	return 0
}

func (p *TAlterTabletReqV2) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TAlterTabletReqV2")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField1000(buf[offset:], binaryWriter)
		offset += p.fastWriteField1001(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField1002(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TAlterTabletReqV2) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TAlterTabletReqV2")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field1000Length()
		l += p.field1001Length()
		l += p.field1002Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TAlterTabletReqV2) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "base_tablet_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.BaseTabletId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TAlterTabletReqV2) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "new_tablet_id", thrift.I64, 2)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.NewTabletId_)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TAlterTabletReqV2) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "base_schema_hash", thrift.I32, 3)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.BaseSchemaHash)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TAlterTabletReqV2) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "new_schema_hash", thrift.I32, 4)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.NewSchemaHash_)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TAlterTabletReqV2) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetAlterVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "alter_version", thrift.I64, 5)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.AlterVersion)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterTabletReqV2) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetAlterVersionHash() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "alter_version_hash", thrift.I64, 6)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.AlterVersionHash)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterTabletReqV2) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMaterializedViewParams() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "materialized_view_params", thrift.LIST, 7)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.MaterializedViewParams {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterTabletReqV2) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetAlterTabletType() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "alter_tablet_type", thrift.I32, 8)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.AlterTabletType))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterTabletReqV2) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDescTbl() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "desc_tbl", thrift.STRUCT, 9)
		offset += p.DescTbl.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterTabletReqV2) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetColumns() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "columns", thrift.LIST, 10)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.Columns {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterTabletReqV2) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBeExecVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "be_exec_version", thrift.I32, 11)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.BeExecVersion)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterTabletReqV2) fastWriteField1000(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetJobId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "job_id", thrift.I64, 1000)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.JobId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterTabletReqV2) fastWriteField1001(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetExpiration() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "expiration", thrift.I64, 1001)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.Expiration)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterTabletReqV2) fastWriteField1002(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStorageVaultId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "storage_vault_id", thrift.STRING, 1002)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.StorageVaultId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterTabletReqV2) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("base_tablet_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.BaseTabletId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TAlterTabletReqV2) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("new_tablet_id", thrift.I64, 2)
	l += bthrift.Binary.I64Length(p.NewTabletId_)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TAlterTabletReqV2) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("base_schema_hash", thrift.I32, 3)
	l += bthrift.Binary.I32Length(p.BaseSchemaHash)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TAlterTabletReqV2) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("new_schema_hash", thrift.I32, 4)
	l += bthrift.Binary.I32Length(p.NewSchemaHash_)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TAlterTabletReqV2) field5Length() int {
	l := 0
	if p.IsSetAlterVersion() {
		l += bthrift.Binary.FieldBeginLength("alter_version", thrift.I64, 5)
		l += bthrift.Binary.I64Length(*p.AlterVersion)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterTabletReqV2) field6Length() int {
	l := 0
	if p.IsSetAlterVersionHash() {
		l += bthrift.Binary.FieldBeginLength("alter_version_hash", thrift.I64, 6)
		l += bthrift.Binary.I64Length(*p.AlterVersionHash)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterTabletReqV2) field7Length() int {
	l := 0
	if p.IsSetMaterializedViewParams() {
		l += bthrift.Binary.FieldBeginLength("materialized_view_params", thrift.LIST, 7)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.MaterializedViewParams))
		for _, v := range p.MaterializedViewParams {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterTabletReqV2) field8Length() int {
	l := 0
	if p.IsSetAlterTabletType() {
		l += bthrift.Binary.FieldBeginLength("alter_tablet_type", thrift.I32, 8)
		l += bthrift.Binary.I32Length(int32(p.AlterTabletType))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterTabletReqV2) field9Length() int {
	l := 0
	if p.IsSetDescTbl() {
		l += bthrift.Binary.FieldBeginLength("desc_tbl", thrift.STRUCT, 9)
		l += p.DescTbl.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterTabletReqV2) field10Length() int {
	l := 0
	if p.IsSetColumns() {
		l += bthrift.Binary.FieldBeginLength("columns", thrift.LIST, 10)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.Columns))
		for _, v := range p.Columns {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterTabletReqV2) field11Length() int {
	l := 0
	if p.IsSetBeExecVersion() {
		l += bthrift.Binary.FieldBeginLength("be_exec_version", thrift.I32, 11)
		l += bthrift.Binary.I32Length(p.BeExecVersion)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterTabletReqV2) field1000Length() int {
	l := 0
	if p.IsSetJobId() {
		l += bthrift.Binary.FieldBeginLength("job_id", thrift.I64, 1000)
		l += bthrift.Binary.I64Length(*p.JobId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterTabletReqV2) field1001Length() int {
	l := 0
	if p.IsSetExpiration() {
		l += bthrift.Binary.FieldBeginLength("expiration", thrift.I64, 1001)
		l += bthrift.Binary.I64Length(*p.Expiration)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterTabletReqV2) field1002Length() int {
	l := 0
	if p.IsSetStorageVaultId() {
		l += bthrift.Binary.FieldBeginLength("storage_vault_id", thrift.STRING, 1002)
		l += bthrift.Binary.StringLengthNocopy(*p.StorageVaultId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterInvertedIndexReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAlterInvertedIndexReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAlterInvertedIndexReq[fieldId]))
}

func (p *TAlterInvertedIndexReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TabletId = v

	}
	return offset, nil
}

func (p *TAlterInvertedIndexReq) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SchemaHash = v

	}
	return offset, nil
}

func (p *TAlterInvertedIndexReq) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.AlterVersion = &v

	}
	return offset, nil
}

func (p *TAlterInvertedIndexReq) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.AlterTabletType = TAlterTabletType(v)

	}
	return offset, nil
}

func (p *TAlterInvertedIndexReq) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.IsDropOp = v

	}
	return offset, nil
}

func (p *TAlterInvertedIndexReq) FastReadField6(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.AlterInvertedIndexes = make([]*descriptors.TOlapTableIndex, 0, size)
	for i := 0; i < size; i++ {
		_elem := descriptors.NewTOlapTableIndex()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.AlterInvertedIndexes = append(p.AlterInvertedIndexes, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TAlterInvertedIndexReq) FastReadField7(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.IndexesDesc = make([]*descriptors.TOlapTableIndex, 0, size)
	for i := 0; i < size; i++ {
		_elem := descriptors.NewTOlapTableIndex()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.IndexesDesc = append(p.IndexesDesc, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TAlterInvertedIndexReq) FastReadField8(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Columns = make([]*descriptors.TColumn, 0, size)
	for i := 0; i < size; i++ {
		_elem := descriptors.NewTColumn()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Columns = append(p.Columns, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TAlterInvertedIndexReq) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.JobId = &v

	}
	return offset, nil
}

func (p *TAlterInvertedIndexReq) FastReadField10(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Expiration = &v

	}
	return offset, nil
}

// for compatibility
func (p *TAlterInvertedIndexReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TAlterInvertedIndexReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TAlterInvertedIndexReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TAlterInvertedIndexReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TAlterInvertedIndexReq")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TAlterInvertedIndexReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TabletId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TAlterInvertedIndexReq) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "schema_hash", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.SchemaHash)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TAlterInvertedIndexReq) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetAlterVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "alter_version", thrift.I64, 3)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.AlterVersion)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterInvertedIndexReq) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetAlterTabletType() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "alter_tablet_type", thrift.I32, 4)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.AlterTabletType))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterInvertedIndexReq) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsDropOp() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_drop_op", thrift.BOOL, 5)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.IsDropOp)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterInvertedIndexReq) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetAlterInvertedIndexes() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "alter_inverted_indexes", thrift.LIST, 6)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.AlterInvertedIndexes {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterInvertedIndexReq) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIndexesDesc() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "indexes_desc", thrift.LIST, 7)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.IndexesDesc {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterInvertedIndexReq) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetColumns() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "columns", thrift.LIST, 8)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.Columns {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterInvertedIndexReq) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetJobId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "job_id", thrift.I64, 9)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.JobId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterInvertedIndexReq) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetExpiration() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "expiration", thrift.I64, 10)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.Expiration)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAlterInvertedIndexReq) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablet_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.TabletId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TAlterInvertedIndexReq) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("schema_hash", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.SchemaHash)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TAlterInvertedIndexReq) field3Length() int {
	l := 0
	if p.IsSetAlterVersion() {
		l += bthrift.Binary.FieldBeginLength("alter_version", thrift.I64, 3)
		l += bthrift.Binary.I64Length(*p.AlterVersion)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterInvertedIndexReq) field4Length() int {
	l := 0
	if p.IsSetAlterTabletType() {
		l += bthrift.Binary.FieldBeginLength("alter_tablet_type", thrift.I32, 4)
		l += bthrift.Binary.I32Length(int32(p.AlterTabletType))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterInvertedIndexReq) field5Length() int {
	l := 0
	if p.IsSetIsDropOp() {
		l += bthrift.Binary.FieldBeginLength("is_drop_op", thrift.BOOL, 5)
		l += bthrift.Binary.BoolLength(p.IsDropOp)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterInvertedIndexReq) field6Length() int {
	l := 0
	if p.IsSetAlterInvertedIndexes() {
		l += bthrift.Binary.FieldBeginLength("alter_inverted_indexes", thrift.LIST, 6)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.AlterInvertedIndexes))
		for _, v := range p.AlterInvertedIndexes {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterInvertedIndexReq) field7Length() int {
	l := 0
	if p.IsSetIndexesDesc() {
		l += bthrift.Binary.FieldBeginLength("indexes_desc", thrift.LIST, 7)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.IndexesDesc))
		for _, v := range p.IndexesDesc {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterInvertedIndexReq) field8Length() int {
	l := 0
	if p.IsSetColumns() {
		l += bthrift.Binary.FieldBeginLength("columns", thrift.LIST, 8)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.Columns))
		for _, v := range p.Columns {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterInvertedIndexReq) field9Length() int {
	l := 0
	if p.IsSetJobId() {
		l += bthrift.Binary.FieldBeginLength("job_id", thrift.I64, 9)
		l += bthrift.Binary.I64Length(*p.JobId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAlterInvertedIndexReq) field10Length() int {
	l := 0
	if p.IsSetExpiration() {
		l += bthrift.Binary.FieldBeginLength("expiration", thrift.I64, 10)
		l += bthrift.Binary.I64Length(*p.Expiration)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletGcBinlogInfo) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletGcBinlogInfo[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTabletGcBinlogInfo) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TabletId = &v

	}
	return offset, nil
}

func (p *TTabletGcBinlogInfo) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Version = &v

	}
	return offset, nil
}

// for compatibility
func (p *TTabletGcBinlogInfo) FastWrite(buf []byte) int {
	return 0
}

func (p *TTabletGcBinlogInfo) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTabletGcBinlogInfo")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTabletGcBinlogInfo) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTabletGcBinlogInfo")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTabletGcBinlogInfo) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTabletId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_id", thrift.I64, 1)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TabletId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletGcBinlogInfo) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version", thrift.I64, 2)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.Version)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletGcBinlogInfo) field1Length() int {
	l := 0
	if p.IsSetTabletId() {
		l += bthrift.Binary.FieldBeginLength("tablet_id", thrift.I64, 1)
		l += bthrift.Binary.I64Length(*p.TabletId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletGcBinlogInfo) field2Length() int {
	l := 0
	if p.IsSetVersion() {
		l += bthrift.Binary.FieldBeginLength("version", thrift.I64, 2)
		l += bthrift.Binary.I64Length(*p.Version)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TGcBinlogReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGcBinlogReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGcBinlogReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.TabletGcBinlogInfos = make([]*TTabletGcBinlogInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTTabletGcBinlogInfo()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.TabletGcBinlogInfos = append(p.TabletGcBinlogInfos, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TGcBinlogReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TGcBinlogReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TGcBinlogReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TGcBinlogReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TGcBinlogReq")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TGcBinlogReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTabletGcBinlogInfos() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_gc_binlog_infos", thrift.LIST, 1)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.TabletGcBinlogInfos {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TGcBinlogReq) field1Length() int {
	l := 0
	if p.IsSetTabletGcBinlogInfos() {
		l += bthrift.Binary.FieldBeginLength("tablet_gc_binlog_infos", thrift.LIST, 1)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.TabletGcBinlogInfos))
		for _, v := range p.TabletGcBinlogInfos {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStorageMigrationReqV2) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TStorageMigrationReqV2[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TStorageMigrationReqV2) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.BaseTabletId = &v

	}
	return offset, nil
}

func (p *TStorageMigrationReqV2) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.NewTabletId_ = &v

	}
	return offset, nil
}

func (p *TStorageMigrationReqV2) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.BaseSchemaHash = &v

	}
	return offset, nil
}

func (p *TStorageMigrationReqV2) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.NewSchemaHash_ = &v

	}
	return offset, nil
}

func (p *TStorageMigrationReqV2) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.MigrationVersion = &v

	}
	return offset, nil
}

// for compatibility
func (p *TStorageMigrationReqV2) FastWrite(buf []byte) int {
	return 0
}

func (p *TStorageMigrationReqV2) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TStorageMigrationReqV2")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TStorageMigrationReqV2) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TStorageMigrationReqV2")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TStorageMigrationReqV2) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBaseTabletId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "base_tablet_id", thrift.I64, 1)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.BaseTabletId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStorageMigrationReqV2) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetNewTabletId_() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "new_tablet_id", thrift.I64, 2)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.NewTabletId_)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStorageMigrationReqV2) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBaseSchemaHash() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "base_schema_hash", thrift.I32, 3)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.BaseSchemaHash)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStorageMigrationReqV2) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetNewSchemaHash_() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "new_schema_hash", thrift.I32, 4)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.NewSchemaHash_)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStorageMigrationReqV2) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMigrationVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "migration_version", thrift.I64, 5)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.MigrationVersion)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStorageMigrationReqV2) field1Length() int {
	l := 0
	if p.IsSetBaseTabletId() {
		l += bthrift.Binary.FieldBeginLength("base_tablet_id", thrift.I64, 1)
		l += bthrift.Binary.I64Length(*p.BaseTabletId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStorageMigrationReqV2) field2Length() int {
	l := 0
	if p.IsSetNewTabletId_() {
		l += bthrift.Binary.FieldBeginLength("new_tablet_id", thrift.I64, 2)
		l += bthrift.Binary.I64Length(*p.NewTabletId_)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStorageMigrationReqV2) field3Length() int {
	l := 0
	if p.IsSetBaseSchemaHash() {
		l += bthrift.Binary.FieldBeginLength("base_schema_hash", thrift.I32, 3)
		l += bthrift.Binary.I32Length(*p.BaseSchemaHash)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStorageMigrationReqV2) field4Length() int {
	l := 0
	if p.IsSetNewSchemaHash_() {
		l += bthrift.Binary.FieldBeginLength("new_schema_hash", thrift.I32, 4)
		l += bthrift.Binary.I32Length(*p.NewSchemaHash_)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStorageMigrationReqV2) field5Length() int {
	l := 0
	if p.IsSetMigrationVersion() {
		l += bthrift.Binary.FieldBeginLength("migration_version", thrift.I64, 5)
		l += bthrift.Binary.I64Length(*p.MigrationVersion)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TClusterInfo) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUser bool = false
	var issetPassword bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetUser = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPassword = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetUser {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPassword {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TClusterInfo[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TClusterInfo[fieldId]))
}

func (p *TClusterInfo) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.User = v

	}
	return offset, nil
}

func (p *TClusterInfo) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Password = v

	}
	return offset, nil
}

// for compatibility
func (p *TClusterInfo) FastWrite(buf []byte) int {
	return 0
}

func (p *TClusterInfo) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TClusterInfo")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TClusterInfo) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TClusterInfo")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TClusterInfo) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "user", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.User)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TClusterInfo) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "password", thrift.STRING, 2)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Password)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TClusterInfo) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("user", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.User)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TClusterInfo) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("password", thrift.STRING, 2)
	l += bthrift.Binary.StringLengthNocopy(p.Password)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPushReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false
	var issetVersion bool = false
	var issetVersionHash bool = false
	var issetTimeout bool = false
	var issetPushType bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetVersionHash = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTimeout = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPushType = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField15(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField16(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField17(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField18(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetVersionHash {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTimeout {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetPushType {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPushReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPushReq[fieldId]))
}

func (p *TPushReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TabletId = v

	}
	return offset, nil
}

func (p *TPushReq) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SchemaHash = v

	}
	return offset, nil
}

func (p *TPushReq) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Version = v

	}
	return offset, nil
}

func (p *TPushReq) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.VersionHash = v

	}
	return offset, nil
}

func (p *TPushReq) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Timeout = v

	}
	return offset, nil
}

func (p *TPushReq) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.PushType = types.TPushType(v)

	}
	return offset, nil
}

func (p *TPushReq) FastReadField7(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.HttpFilePath = &v

	}
	return offset, nil
}

func (p *TPushReq) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.HttpFileSize = &v

	}
	return offset, nil
}

func (p *TPushReq) FastReadField9(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.DeleteConditions = make([]*palointernalservice.TCondition, 0, size)
	for i := 0; i < size; i++ {
		_elem := palointernalservice.NewTCondition()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.DeleteConditions = append(p.DeleteConditions, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPushReq) FastReadField10(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.NeedDecompress = &v

	}
	return offset, nil
}

func (p *TPushReq) FastReadField11(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TransactionId = &v

	}
	return offset, nil
}

func (p *TPushReq) FastReadField12(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.PartitionId = &v

	}
	return offset, nil
}

func (p *TPushReq) FastReadField13(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.IsSchemaChanging = &v

	}
	return offset, nil
}

func (p *TPushReq) FastReadField14(buf []byte) (int, error) {
	offset := 0

	tmp := plannodes.NewTBrokerScanRange()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.BrokerScanRange = tmp
	return offset, nil
}

func (p *TPushReq) FastReadField15(buf []byte) (int, error) {
	offset := 0

	tmp := descriptors.NewTDescriptorTable()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.DescTbl = tmp
	return offset, nil
}

func (p *TPushReq) FastReadField16(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.ColumnsDesc = make([]*descriptors.TColumn, 0, size)
	for i := 0; i < size; i++ {
		_elem := descriptors.NewTColumn()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.ColumnsDesc = append(p.ColumnsDesc, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPushReq) FastReadField17(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.StorageVaultId = &v

	}
	return offset, nil
}

func (p *TPushReq) FastReadField18(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.SchemaVersion = &v

	}
	return offset, nil
}

// for compatibility
func (p *TPushReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TPushReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TPushReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField18(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
		offset += p.fastWriteField15(buf[offset:], binaryWriter)
		offset += p.fastWriteField16(buf[offset:], binaryWriter)
		offset += p.fastWriteField17(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TPushReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TPushReq")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
		l += p.field15Length()
		l += p.field16Length()
		l += p.field17Length()
		l += p.field18Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TPushReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TabletId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPushReq) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "schema_hash", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.SchemaHash)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPushReq) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version", thrift.I64, 3)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.Version)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPushReq) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version_hash", thrift.I64, 4)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.VersionHash)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPushReq) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "timeout", thrift.I64, 5)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.Timeout)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPushReq) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "push_type", thrift.I32, 6)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.PushType))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPushReq) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetHttpFilePath() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "http_file_path", thrift.STRING, 7)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.HttpFilePath)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPushReq) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetHttpFileSize() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "http_file_size", thrift.I64, 8)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.HttpFileSize)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPushReq) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDeleteConditions() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "delete_conditions", thrift.LIST, 9)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.DeleteConditions {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPushReq) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetNeedDecompress() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "need_decompress", thrift.BOOL, 10)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.NeedDecompress)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPushReq) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTransactionId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "transaction_id", thrift.I64, 11)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TransactionId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPushReq) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPartitionId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "partition_id", thrift.I64, 12)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.PartitionId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPushReq) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsSchemaChanging() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_schema_changing", thrift.BOOL, 13)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.IsSchemaChanging)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPushReq) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBrokerScanRange() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "broker_scan_range", thrift.STRUCT, 14)
		offset += p.BrokerScanRange.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPushReq) fastWriteField15(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDescTbl() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "desc_tbl", thrift.STRUCT, 15)
		offset += p.DescTbl.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPushReq) fastWriteField16(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetColumnsDesc() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "columns_desc", thrift.LIST, 16)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.ColumnsDesc {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPushReq) fastWriteField17(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStorageVaultId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "storage_vault_id", thrift.STRING, 17)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.StorageVaultId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPushReq) fastWriteField18(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSchemaVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "schema_version", thrift.I32, 18)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.SchemaVersion)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPushReq) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablet_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.TabletId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPushReq) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("schema_hash", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.SchemaHash)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPushReq) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("version", thrift.I64, 3)
	l += bthrift.Binary.I64Length(p.Version)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPushReq) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("version_hash", thrift.I64, 4)
	l += bthrift.Binary.I64Length(p.VersionHash)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPushReq) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("timeout", thrift.I64, 5)
	l += bthrift.Binary.I64Length(p.Timeout)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPushReq) field6Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("push_type", thrift.I32, 6)
	l += bthrift.Binary.I32Length(int32(p.PushType))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPushReq) field7Length() int {
	l := 0
	if p.IsSetHttpFilePath() {
		l += bthrift.Binary.FieldBeginLength("http_file_path", thrift.STRING, 7)
		l += bthrift.Binary.StringLengthNocopy(*p.HttpFilePath)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPushReq) field8Length() int {
	l := 0
	if p.IsSetHttpFileSize() {
		l += bthrift.Binary.FieldBeginLength("http_file_size", thrift.I64, 8)
		l += bthrift.Binary.I64Length(*p.HttpFileSize)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPushReq) field9Length() int {
	l := 0
	if p.IsSetDeleteConditions() {
		l += bthrift.Binary.FieldBeginLength("delete_conditions", thrift.LIST, 9)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.DeleteConditions))
		for _, v := range p.DeleteConditions {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPushReq) field10Length() int {
	l := 0
	if p.IsSetNeedDecompress() {
		l += bthrift.Binary.FieldBeginLength("need_decompress", thrift.BOOL, 10)
		l += bthrift.Binary.BoolLength(*p.NeedDecompress)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPushReq) field11Length() int {
	l := 0
	if p.IsSetTransactionId() {
		l += bthrift.Binary.FieldBeginLength("transaction_id", thrift.I64, 11)
		l += bthrift.Binary.I64Length(*p.TransactionId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPushReq) field12Length() int {
	l := 0
	if p.IsSetPartitionId() {
		l += bthrift.Binary.FieldBeginLength("partition_id", thrift.I64, 12)
		l += bthrift.Binary.I64Length(*p.PartitionId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPushReq) field13Length() int {
	l := 0
	if p.IsSetIsSchemaChanging() {
		l += bthrift.Binary.FieldBeginLength("is_schema_changing", thrift.BOOL, 13)
		l += bthrift.Binary.BoolLength(*p.IsSchemaChanging)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPushReq) field14Length() int {
	l := 0
	if p.IsSetBrokerScanRange() {
		l += bthrift.Binary.FieldBeginLength("broker_scan_range", thrift.STRUCT, 14)
		l += p.BrokerScanRange.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPushReq) field15Length() int {
	l := 0
	if p.IsSetDescTbl() {
		l += bthrift.Binary.FieldBeginLength("desc_tbl", thrift.STRUCT, 15)
		l += p.DescTbl.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPushReq) field16Length() int {
	l := 0
	if p.IsSetColumnsDesc() {
		l += bthrift.Binary.FieldBeginLength("columns_desc", thrift.LIST, 16)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.ColumnsDesc))
		for _, v := range p.ColumnsDesc {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPushReq) field17Length() int {
	l := 0
	if p.IsSetStorageVaultId() {
		l += bthrift.Binary.FieldBeginLength("storage_vault_id", thrift.STRING, 17)
		l += bthrift.Binary.StringLengthNocopy(*p.StorageVaultId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPushReq) field18Length() int {
	l := 0
	if p.IsSetSchemaVersion() {
		l += bthrift.Binary.FieldBeginLength("schema_version", thrift.I32, 18)
		l += bthrift.Binary.I32Length(*p.SchemaVersion)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCloneReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false
	var issetSrcBackends bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSrcBackends = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSrcBackends {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCloneReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCloneReq[fieldId]))
}

func (p *TCloneReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TabletId = v

	}
	return offset, nil
}

func (p *TCloneReq) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SchemaHash = v

	}
	return offset, nil
}

func (p *TCloneReq) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.SrcBackends = make([]*types.TBackend, 0, size)
	for i := 0; i < size; i++ {
		_elem := types.NewTBackend()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.SrcBackends = append(p.SrcBackends, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TCloneReq) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		tmp := types.TStorageMedium(v)
		p.StorageMedium = &tmp

	}
	return offset, nil
}

func (p *TCloneReq) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Version = &v

	}
	return offset, nil
}

func (p *TCloneReq) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.CommittedVersionHash = &v

	}
	return offset, nil
}

func (p *TCloneReq) FastReadField7(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TaskVersion = &v

	}
	return offset, nil
}

func (p *TCloneReq) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.SrcPathHash = &v

	}
	return offset, nil
}

func (p *TCloneReq) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.DestPathHash = &v

	}
	return offset, nil
}

func (p *TCloneReq) FastReadField10(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TimeoutS = &v

	}
	return offset, nil
}

func (p *TCloneReq) FastReadField11(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ReplicaId = v

	}
	return offset, nil
}

func (p *TCloneReq) FastReadField12(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.PartitionId = &v

	}
	return offset, nil
}

func (p *TCloneReq) FastReadField13(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TableId = v

	}
	return offset, nil
}

// for compatibility
func (p *TCloneReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TCloneReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TCloneReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TCloneReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TCloneReq")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TCloneReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TabletId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCloneReq) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "schema_hash", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.SchemaHash)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCloneReq) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "src_backends", thrift.LIST, 3)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.SrcBackends {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCloneReq) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStorageMedium() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "storage_medium", thrift.I32, 4)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(*p.StorageMedium))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCloneReq) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version", thrift.I64, 5)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.Version)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCloneReq) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCommittedVersionHash() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "committed_version_hash", thrift.I64, 6)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.CommittedVersionHash)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCloneReq) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTaskVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "task_version", thrift.I32, 7)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.TaskVersion)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCloneReq) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSrcPathHash() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "src_path_hash", thrift.I64, 8)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.SrcPathHash)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCloneReq) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDestPathHash() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "dest_path_hash", thrift.I64, 9)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.DestPathHash)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCloneReq) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTimeoutS() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "timeout_s", thrift.I32, 10)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.TimeoutS)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCloneReq) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetReplicaId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "replica_id", thrift.I64, 11)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.ReplicaId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCloneReq) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPartitionId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "partition_id", thrift.I64, 12)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.PartitionId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCloneReq) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTableId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "table_id", thrift.I64, 13)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.TableId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCloneReq) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablet_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.TabletId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCloneReq) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("schema_hash", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.SchemaHash)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCloneReq) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("src_backends", thrift.LIST, 3)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.SrcBackends))
	for _, v := range p.SrcBackends {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCloneReq) field4Length() int {
	l := 0
	if p.IsSetStorageMedium() {
		l += bthrift.Binary.FieldBeginLength("storage_medium", thrift.I32, 4)
		l += bthrift.Binary.I32Length(int32(*p.StorageMedium))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCloneReq) field5Length() int {
	l := 0
	if p.IsSetVersion() {
		l += bthrift.Binary.FieldBeginLength("version", thrift.I64, 5)
		l += bthrift.Binary.I64Length(*p.Version)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCloneReq) field6Length() int {
	l := 0
	if p.IsSetCommittedVersionHash() {
		l += bthrift.Binary.FieldBeginLength("committed_version_hash", thrift.I64, 6)
		l += bthrift.Binary.I64Length(*p.CommittedVersionHash)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCloneReq) field7Length() int {
	l := 0
	if p.IsSetTaskVersion() {
		l += bthrift.Binary.FieldBeginLength("task_version", thrift.I32, 7)
		l += bthrift.Binary.I32Length(*p.TaskVersion)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCloneReq) field8Length() int {
	l := 0
	if p.IsSetSrcPathHash() {
		l += bthrift.Binary.FieldBeginLength("src_path_hash", thrift.I64, 8)
		l += bthrift.Binary.I64Length(*p.SrcPathHash)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCloneReq) field9Length() int {
	l := 0
	if p.IsSetDestPathHash() {
		l += bthrift.Binary.FieldBeginLength("dest_path_hash", thrift.I64, 9)
		l += bthrift.Binary.I64Length(*p.DestPathHash)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCloneReq) field10Length() int {
	l := 0
	if p.IsSetTimeoutS() {
		l += bthrift.Binary.FieldBeginLength("timeout_s", thrift.I32, 10)
		l += bthrift.Binary.I32Length(*p.TimeoutS)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCloneReq) field11Length() int {
	l := 0
	if p.IsSetReplicaId() {
		l += bthrift.Binary.FieldBeginLength("replica_id", thrift.I64, 11)
		l += bthrift.Binary.I64Length(p.ReplicaId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCloneReq) field12Length() int {
	l := 0
	if p.IsSetPartitionId() {
		l += bthrift.Binary.FieldBeginLength("partition_id", thrift.I64, 12)
		l += bthrift.Binary.I64Length(*p.PartitionId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCloneReq) field13Length() int {
	l := 0
	if p.IsSetTableId() {
		l += bthrift.Binary.FieldBeginLength("table_id", thrift.I64, 13)
		l += bthrift.Binary.I64Length(p.TableId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCompactionReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCompactionReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TCompactionReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TabletId = &v

	}
	return offset, nil
}

func (p *TCompactionReq) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.SchemaHash = &v

	}
	return offset, nil
}

func (p *TCompactionReq) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Type = &v

	}
	return offset, nil
}

// for compatibility
func (p *TCompactionReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TCompactionReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TCompactionReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TCompactionReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TCompactionReq")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TCompactionReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTabletId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_id", thrift.I64, 1)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TabletId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCompactionReq) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSchemaHash() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "schema_hash", thrift.I32, 2)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.SchemaHash)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCompactionReq) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetType() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "type", thrift.STRING, 3)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Type)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCompactionReq) field1Length() int {
	l := 0
	if p.IsSetTabletId() {
		l += bthrift.Binary.FieldBeginLength("tablet_id", thrift.I64, 1)
		l += bthrift.Binary.I64Length(*p.TabletId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCompactionReq) field2Length() int {
	l := 0
	if p.IsSetSchemaHash() {
		l += bthrift.Binary.FieldBeginLength("schema_hash", thrift.I32, 2)
		l += bthrift.Binary.I32Length(*p.SchemaHash)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCompactionReq) field3Length() int {
	l := 0
	if p.IsSetType() {
		l += bthrift.Binary.FieldBeginLength("type", thrift.STRING, 3)
		l += bthrift.Binary.StringLengthNocopy(*p.Type)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStorageMediumMigrateReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false
	var issetStorageMedium bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetStorageMedium = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetStorageMedium {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TStorageMediumMigrateReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TStorageMediumMigrateReq[fieldId]))
}

func (p *TStorageMediumMigrateReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TabletId = v

	}
	return offset, nil
}

func (p *TStorageMediumMigrateReq) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SchemaHash = v

	}
	return offset, nil
}

func (p *TStorageMediumMigrateReq) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.StorageMedium = types.TStorageMedium(v)

	}
	return offset, nil
}

func (p *TStorageMediumMigrateReq) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.DataDir = &v

	}
	return offset, nil
}

// for compatibility
func (p *TStorageMediumMigrateReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TStorageMediumMigrateReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TStorageMediumMigrateReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TStorageMediumMigrateReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TStorageMediumMigrateReq")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TStorageMediumMigrateReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TabletId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TStorageMediumMigrateReq) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "schema_hash", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.SchemaHash)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TStorageMediumMigrateReq) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "storage_medium", thrift.I32, 3)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.StorageMedium))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TStorageMediumMigrateReq) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDataDir() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "data_dir", thrift.STRING, 4)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.DataDir)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStorageMediumMigrateReq) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablet_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.TabletId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TStorageMediumMigrateReq) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("schema_hash", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.SchemaHash)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TStorageMediumMigrateReq) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("storage_medium", thrift.I32, 3)
	l += bthrift.Binary.I32Length(int32(p.StorageMedium))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TStorageMediumMigrateReq) field4Length() int {
	l := 0
	if p.IsSetDataDir() {
		l += bthrift.Binary.FieldBeginLength("data_dir", thrift.STRING, 4)
		l += bthrift.Binary.StringLengthNocopy(*p.DataDir)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCancelDeleteDataReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false
	var issetVersion bool = false
	var issetVersionHash bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetVersionHash = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetVersionHash {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCancelDeleteDataReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCancelDeleteDataReq[fieldId]))
}

func (p *TCancelDeleteDataReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TabletId = v

	}
	return offset, nil
}

func (p *TCancelDeleteDataReq) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SchemaHash = v

	}
	return offset, nil
}

func (p *TCancelDeleteDataReq) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Version = v

	}
	return offset, nil
}

func (p *TCancelDeleteDataReq) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.VersionHash = v

	}
	return offset, nil
}

// for compatibility
func (p *TCancelDeleteDataReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TCancelDeleteDataReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TCancelDeleteDataReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TCancelDeleteDataReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TCancelDeleteDataReq")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TCancelDeleteDataReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TabletId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCancelDeleteDataReq) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "schema_hash", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.SchemaHash)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCancelDeleteDataReq) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version", thrift.I64, 3)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.Version)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCancelDeleteDataReq) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version_hash", thrift.I64, 4)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.VersionHash)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCancelDeleteDataReq) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablet_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.TabletId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCancelDeleteDataReq) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("schema_hash", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.SchemaHash)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCancelDeleteDataReq) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("version", thrift.I64, 3)
	l += bthrift.Binary.I64Length(p.Version)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCancelDeleteDataReq) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("version_hash", thrift.I64, 4)
	l += bthrift.Binary.I64Length(p.VersionHash)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCheckConsistencyReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false
	var issetVersion bool = false
	var issetVersionHash bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetVersionHash = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetVersionHash {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCheckConsistencyReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCheckConsistencyReq[fieldId]))
}

func (p *TCheckConsistencyReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TabletId = v

	}
	return offset, nil
}

func (p *TCheckConsistencyReq) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SchemaHash = v

	}
	return offset, nil
}

func (p *TCheckConsistencyReq) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Version = v

	}
	return offset, nil
}

func (p *TCheckConsistencyReq) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.VersionHash = v

	}
	return offset, nil
}

// for compatibility
func (p *TCheckConsistencyReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TCheckConsistencyReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TCheckConsistencyReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TCheckConsistencyReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TCheckConsistencyReq")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TCheckConsistencyReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TabletId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCheckConsistencyReq) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "schema_hash", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.SchemaHash)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCheckConsistencyReq) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version", thrift.I64, 3)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.Version)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCheckConsistencyReq) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version_hash", thrift.I64, 4)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.VersionHash)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCheckConsistencyReq) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablet_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.TabletId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCheckConsistencyReq) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("schema_hash", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.SchemaHash)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCheckConsistencyReq) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("version", thrift.I64, 3)
	l += bthrift.Binary.I64Length(p.Version)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCheckConsistencyReq) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("version_hash", thrift.I64, 4)
	l += bthrift.Binary.I64Length(p.VersionHash)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TUploadReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetJobId bool = false
	var issetSrcDestMap bool = false
	var issetBrokerAddr bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetJobId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSrcDestMap = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetBrokerAddr = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetJobId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSrcDestMap {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBrokerAddr {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TUploadReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TUploadReq[fieldId]))
}

func (p *TUploadReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.JobId = v

	}
	return offset, nil
}

func (p *TUploadReq) FastReadField2(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.SrcDestMap = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.SrcDestMap[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TUploadReq) FastReadField3(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTNetworkAddress()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.BrokerAddr = tmp
	return offset, nil
}

func (p *TUploadReq) FastReadField4(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.BrokerProp = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.BrokerProp[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TUploadReq) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.StorageBackend = types.TStorageBackendType(v)

	}
	return offset, nil
}

func (p *TUploadReq) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Location = &v

	}
	return offset, nil
}

// for compatibility
func (p *TUploadReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TUploadReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TUploadReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TUploadReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TUploadReq")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TUploadReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "job_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.JobId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TUploadReq) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "src_dest_map", thrift.MAP, 2)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, 0)
	var length int
	for k, v := range p.SrcDestMap {
		length++

		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)

		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRING, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TUploadReq) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "broker_addr", thrift.STRUCT, 3)
	offset += p.BrokerAddr.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TUploadReq) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBrokerProp() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "broker_prop", thrift.MAP, 4)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, 0)
		var length int
		for k, v := range p.BrokerProp {
			length++

			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)

			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRING, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TUploadReq) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStorageBackend() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "storage_backend", thrift.I32, 5)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.StorageBackend))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TUploadReq) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetLocation() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "location", thrift.STRING, 6)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Location)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TUploadReq) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("job_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.JobId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TUploadReq) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("src_dest_map", thrift.MAP, 2)
	l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, len(p.SrcDestMap))
	for k, v := range p.SrcDestMap {

		l += bthrift.Binary.StringLengthNocopy(k)

		l += bthrift.Binary.StringLengthNocopy(v)

	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TUploadReq) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("broker_addr", thrift.STRUCT, 3)
	l += p.BrokerAddr.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TUploadReq) field4Length() int {
	l := 0
	if p.IsSetBrokerProp() {
		l += bthrift.Binary.FieldBeginLength("broker_prop", thrift.MAP, 4)
		l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, len(p.BrokerProp))
		for k, v := range p.BrokerProp {

			l += bthrift.Binary.StringLengthNocopy(k)

			l += bthrift.Binary.StringLengthNocopy(v)

		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TUploadReq) field5Length() int {
	l := 0
	if p.IsSetStorageBackend() {
		l += bthrift.Binary.FieldBeginLength("storage_backend", thrift.I32, 5)
		l += bthrift.Binary.I32Length(int32(p.StorageBackend))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TUploadReq) field6Length() int {
	l := 0
	if p.IsSetLocation() {
		l += bthrift.Binary.FieldBeginLength("location", thrift.STRING, 6)
		l += bthrift.Binary.StringLengthNocopy(*p.Location)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TRemoteTabletSnapshot) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRemoteTabletSnapshot[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TRemoteTabletSnapshot) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.LocalTabletId = &v

	}
	return offset, nil
}

func (p *TRemoteTabletSnapshot) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.LocalSnapshotPath = &v

	}
	return offset, nil
}

func (p *TRemoteTabletSnapshot) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.RemoteTabletId = &v

	}
	return offset, nil
}

func (p *TRemoteTabletSnapshot) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.RemoteBeId = &v

	}
	return offset, nil
}

func (p *TRemoteTabletSnapshot) FastReadField5(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTNetworkAddress()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.RemoteBeAddr = tmp
	return offset, nil
}

func (p *TRemoteTabletSnapshot) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.RemoteSnapshotPath = &v

	}
	return offset, nil
}

func (p *TRemoteTabletSnapshot) FastReadField7(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.RemoteToken = &v

	}
	return offset, nil
}

// for compatibility
func (p *TRemoteTabletSnapshot) FastWrite(buf []byte) int {
	return 0
}

func (p *TRemoteTabletSnapshot) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TRemoteTabletSnapshot")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TRemoteTabletSnapshot) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TRemoteTabletSnapshot")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TRemoteTabletSnapshot) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetLocalTabletId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "local_tablet_id", thrift.I64, 1)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.LocalTabletId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TRemoteTabletSnapshot) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetLocalSnapshotPath() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "local_snapshot_path", thrift.STRING, 2)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.LocalSnapshotPath)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TRemoteTabletSnapshot) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRemoteTabletId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "remote_tablet_id", thrift.I64, 3)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.RemoteTabletId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TRemoteTabletSnapshot) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRemoteBeId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "remote_be_id", thrift.I64, 4)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.RemoteBeId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TRemoteTabletSnapshot) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRemoteBeAddr() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "remote_be_addr", thrift.STRUCT, 5)
		offset += p.RemoteBeAddr.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TRemoteTabletSnapshot) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRemoteSnapshotPath() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "remote_snapshot_path", thrift.STRING, 6)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.RemoteSnapshotPath)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TRemoteTabletSnapshot) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRemoteToken() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "remote_token", thrift.STRING, 7)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.RemoteToken)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TRemoteTabletSnapshot) field1Length() int {
	l := 0
	if p.IsSetLocalTabletId() {
		l += bthrift.Binary.FieldBeginLength("local_tablet_id", thrift.I64, 1)
		l += bthrift.Binary.I64Length(*p.LocalTabletId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TRemoteTabletSnapshot) field2Length() int {
	l := 0
	if p.IsSetLocalSnapshotPath() {
		l += bthrift.Binary.FieldBeginLength("local_snapshot_path", thrift.STRING, 2)
		l += bthrift.Binary.StringLengthNocopy(*p.LocalSnapshotPath)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TRemoteTabletSnapshot) field3Length() int {
	l := 0
	if p.IsSetRemoteTabletId() {
		l += bthrift.Binary.FieldBeginLength("remote_tablet_id", thrift.I64, 3)
		l += bthrift.Binary.I64Length(*p.RemoteTabletId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TRemoteTabletSnapshot) field4Length() int {
	l := 0
	if p.IsSetRemoteBeId() {
		l += bthrift.Binary.FieldBeginLength("remote_be_id", thrift.I64, 4)
		l += bthrift.Binary.I64Length(*p.RemoteBeId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TRemoteTabletSnapshot) field5Length() int {
	l := 0
	if p.IsSetRemoteBeAddr() {
		l += bthrift.Binary.FieldBeginLength("remote_be_addr", thrift.STRUCT, 5)
		l += p.RemoteBeAddr.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TRemoteTabletSnapshot) field6Length() int {
	l := 0
	if p.IsSetRemoteSnapshotPath() {
		l += bthrift.Binary.FieldBeginLength("remote_snapshot_path", thrift.STRING, 6)
		l += bthrift.Binary.StringLengthNocopy(*p.RemoteSnapshotPath)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TRemoteTabletSnapshot) field7Length() int {
	l := 0
	if p.IsSetRemoteToken() {
		l += bthrift.Binary.FieldBeginLength("remote_token", thrift.STRING, 7)
		l += bthrift.Binary.StringLengthNocopy(*p.RemoteToken)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TDownloadReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetJobId bool = false
	var issetSrcDestMap bool = false
	var issetBrokerAddr bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetJobId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSrcDestMap = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetBrokerAddr = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetJobId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSrcDestMap {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBrokerAddr {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDownloadReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TDownloadReq[fieldId]))
}

func (p *TDownloadReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.JobId = v

	}
	return offset, nil
}

func (p *TDownloadReq) FastReadField2(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.SrcDestMap = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.SrcDestMap[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TDownloadReq) FastReadField3(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTNetworkAddress()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.BrokerAddr = tmp
	return offset, nil
}

func (p *TDownloadReq) FastReadField4(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.BrokerProp = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.BrokerProp[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TDownloadReq) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.StorageBackend = types.TStorageBackendType(v)

	}
	return offset, nil
}

func (p *TDownloadReq) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Location = &v

	}
	return offset, nil
}

func (p *TDownloadReq) FastReadField7(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.RemoteTabletSnapshots = make([]*TRemoteTabletSnapshot, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTRemoteTabletSnapshot()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.RemoteTabletSnapshots = append(p.RemoteTabletSnapshots, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TDownloadReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TDownloadReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TDownloadReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TDownloadReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TDownloadReq")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TDownloadReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "job_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.JobId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TDownloadReq) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "src_dest_map", thrift.MAP, 2)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, 0)
	var length int
	for k, v := range p.SrcDestMap {
		length++

		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)

		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRING, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TDownloadReq) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "broker_addr", thrift.STRUCT, 3)
	offset += p.BrokerAddr.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TDownloadReq) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBrokerProp() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "broker_prop", thrift.MAP, 4)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, 0)
		var length int
		for k, v := range p.BrokerProp {
			length++

			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)

			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRING, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TDownloadReq) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStorageBackend() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "storage_backend", thrift.I32, 5)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.StorageBackend))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TDownloadReq) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetLocation() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "location", thrift.STRING, 6)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Location)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TDownloadReq) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRemoteTabletSnapshots() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "remote_tablet_snapshots", thrift.LIST, 7)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.RemoteTabletSnapshots {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TDownloadReq) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("job_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.JobId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TDownloadReq) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("src_dest_map", thrift.MAP, 2)
	l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, len(p.SrcDestMap))
	for k, v := range p.SrcDestMap {

		l += bthrift.Binary.StringLengthNocopy(k)

		l += bthrift.Binary.StringLengthNocopy(v)

	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TDownloadReq) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("broker_addr", thrift.STRUCT, 3)
	l += p.BrokerAddr.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TDownloadReq) field4Length() int {
	l := 0
	if p.IsSetBrokerProp() {
		l += bthrift.Binary.FieldBeginLength("broker_prop", thrift.MAP, 4)
		l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, len(p.BrokerProp))
		for k, v := range p.BrokerProp {

			l += bthrift.Binary.StringLengthNocopy(k)

			l += bthrift.Binary.StringLengthNocopy(v)

		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TDownloadReq) field5Length() int {
	l := 0
	if p.IsSetStorageBackend() {
		l += bthrift.Binary.FieldBeginLength("storage_backend", thrift.I32, 5)
		l += bthrift.Binary.I32Length(int32(p.StorageBackend))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TDownloadReq) field6Length() int {
	l := 0
	if p.IsSetLocation() {
		l += bthrift.Binary.FieldBeginLength("location", thrift.STRING, 6)
		l += bthrift.Binary.StringLengthNocopy(*p.Location)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TDownloadReq) field7Length() int {
	l := 0
	if p.IsSetRemoteTabletSnapshots() {
		l += bthrift.Binary.FieldBeginLength("remote_tablet_snapshots", thrift.LIST, 7)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.RemoteTabletSnapshots))
		for _, v := range p.RemoteTabletSnapshots {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TSnapshotRequest) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TSnapshotRequest[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TSnapshotRequest[fieldId]))
}

func (p *TSnapshotRequest) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TabletId = v

	}
	return offset, nil
}

func (p *TSnapshotRequest) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SchemaHash = v

	}
	return offset, nil
}

func (p *TSnapshotRequest) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Version = &v

	}
	return offset, nil
}

func (p *TSnapshotRequest) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.VersionHash = &v

	}
	return offset, nil
}

func (p *TSnapshotRequest) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Timeout = &v

	}
	return offset, nil
}

func (p *TSnapshotRequest) FastReadField6(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.MissingVersion = make([]types.TVersion, 0, size)
	for i := 0; i < size; i++ {
		var _elem types.TVersion
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.MissingVersion = append(p.MissingVersion, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TSnapshotRequest) FastReadField7(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ListFiles = &v

	}
	return offset, nil
}

func (p *TSnapshotRequest) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.AllowIncrementalClone = &v

	}
	return offset, nil
}

func (p *TSnapshotRequest) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.PreferredSnapshotVersion = v

	}
	return offset, nil
}

func (p *TSnapshotRequest) FastReadField10(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.IsCopyTabletTask = &v

	}
	return offset, nil
}

func (p *TSnapshotRequest) FastReadField11(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.StartVersion = &v

	}
	return offset, nil
}

func (p *TSnapshotRequest) FastReadField12(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.EndVersion = &v

	}
	return offset, nil
}

func (p *TSnapshotRequest) FastReadField13(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.IsCopyBinlog = &v

	}
	return offset, nil
}

// for compatibility
func (p *TSnapshotRequest) FastWrite(buf []byte) int {
	return 0
}

func (p *TSnapshotRequest) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TSnapshotRequest")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TSnapshotRequest) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TSnapshotRequest")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TSnapshotRequest) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TabletId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TSnapshotRequest) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "schema_hash", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.SchemaHash)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TSnapshotRequest) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version", thrift.I64, 3)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.Version)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TSnapshotRequest) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetVersionHash() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version_hash", thrift.I64, 4)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.VersionHash)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TSnapshotRequest) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTimeout() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "timeout", thrift.I64, 5)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.Timeout)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TSnapshotRequest) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMissingVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "missing_version", thrift.LIST, 6)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.I64, 0)
		var length int
		for _, v := range p.MissingVersion {
			length++
			offset += bthrift.Binary.WriteI64(buf[offset:], v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I64, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TSnapshotRequest) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetListFiles() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "list_files", thrift.BOOL, 7)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.ListFiles)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TSnapshotRequest) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetAllowIncrementalClone() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "allow_incremental_clone", thrift.BOOL, 8)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.AllowIncrementalClone)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TSnapshotRequest) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPreferredSnapshotVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "preferred_snapshot_version", thrift.I32, 9)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.PreferredSnapshotVersion)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TSnapshotRequest) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsCopyTabletTask() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_copy_tablet_task", thrift.BOOL, 10)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.IsCopyTabletTask)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TSnapshotRequest) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStartVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "start_version", thrift.I64, 11)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.StartVersion)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TSnapshotRequest) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEndVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "end_version", thrift.I64, 12)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.EndVersion)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TSnapshotRequest) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsCopyBinlog() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_copy_binlog", thrift.BOOL, 13)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.IsCopyBinlog)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TSnapshotRequest) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablet_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.TabletId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TSnapshotRequest) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("schema_hash", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.SchemaHash)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TSnapshotRequest) field3Length() int {
	l := 0
	if p.IsSetVersion() {
		l += bthrift.Binary.FieldBeginLength("version", thrift.I64, 3)
		l += bthrift.Binary.I64Length(*p.Version)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TSnapshotRequest) field4Length() int {
	l := 0
	if p.IsSetVersionHash() {
		l += bthrift.Binary.FieldBeginLength("version_hash", thrift.I64, 4)
		l += bthrift.Binary.I64Length(*p.VersionHash)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TSnapshotRequest) field5Length() int {
	l := 0
	if p.IsSetTimeout() {
		l += bthrift.Binary.FieldBeginLength("timeout", thrift.I64, 5)
		l += bthrift.Binary.I64Length(*p.Timeout)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TSnapshotRequest) field6Length() int {
	l := 0
	if p.IsSetMissingVersion() {
		l += bthrift.Binary.FieldBeginLength("missing_version", thrift.LIST, 6)
		l += bthrift.Binary.ListBeginLength(thrift.I64, len(p.MissingVersion))
		var tmpV types.TVersion
		l += bthrift.Binary.I64Length(int64(tmpV)) * len(p.MissingVersion)
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TSnapshotRequest) field7Length() int {
	l := 0
	if p.IsSetListFiles() {
		l += bthrift.Binary.FieldBeginLength("list_files", thrift.BOOL, 7)
		l += bthrift.Binary.BoolLength(*p.ListFiles)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TSnapshotRequest) field8Length() int {
	l := 0
	if p.IsSetAllowIncrementalClone() {
		l += bthrift.Binary.FieldBeginLength("allow_incremental_clone", thrift.BOOL, 8)
		l += bthrift.Binary.BoolLength(*p.AllowIncrementalClone)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TSnapshotRequest) field9Length() int {
	l := 0
	if p.IsSetPreferredSnapshotVersion() {
		l += bthrift.Binary.FieldBeginLength("preferred_snapshot_version", thrift.I32, 9)
		l += bthrift.Binary.I32Length(p.PreferredSnapshotVersion)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TSnapshotRequest) field10Length() int {
	l := 0
	if p.IsSetIsCopyTabletTask() {
		l += bthrift.Binary.FieldBeginLength("is_copy_tablet_task", thrift.BOOL, 10)
		l += bthrift.Binary.BoolLength(*p.IsCopyTabletTask)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TSnapshotRequest) field11Length() int {
	l := 0
	if p.IsSetStartVersion() {
		l += bthrift.Binary.FieldBeginLength("start_version", thrift.I64, 11)
		l += bthrift.Binary.I64Length(*p.StartVersion)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TSnapshotRequest) field12Length() int {
	l := 0
	if p.IsSetEndVersion() {
		l += bthrift.Binary.FieldBeginLength("end_version", thrift.I64, 12)
		l += bthrift.Binary.I64Length(*p.EndVersion)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TSnapshotRequest) field13Length() int {
	l := 0
	if p.IsSetIsCopyBinlog() {
		l += bthrift.Binary.FieldBeginLength("is_copy_binlog", thrift.BOOL, 13)
		l += bthrift.Binary.BoolLength(*p.IsCopyBinlog)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TReleaseSnapshotRequest) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSnapshotPath bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSnapshotPath = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetSnapshotPath {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TReleaseSnapshotRequest[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TReleaseSnapshotRequest[fieldId]))
}

func (p *TReleaseSnapshotRequest) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SnapshotPath = v

	}
	return offset, nil
}

// for compatibility
func (p *TReleaseSnapshotRequest) FastWrite(buf []byte) int {
	return 0
}

func (p *TReleaseSnapshotRequest) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TReleaseSnapshotRequest")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TReleaseSnapshotRequest) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TReleaseSnapshotRequest")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TReleaseSnapshotRequest) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "snapshot_path", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.SnapshotPath)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TReleaseSnapshotRequest) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("snapshot_path", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.SnapshotPath)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TClearRemoteFileReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRemoteFilePath bool = false
	var issetRemoteSourceProperties bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetRemoteFilePath = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetRemoteSourceProperties = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetRemoteFilePath {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetRemoteSourceProperties {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TClearRemoteFileReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TClearRemoteFileReq[fieldId]))
}

func (p *TClearRemoteFileReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.RemoteFilePath = v

	}
	return offset, nil
}

func (p *TClearRemoteFileReq) FastReadField2(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.RemoteSourceProperties = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.RemoteSourceProperties[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TClearRemoteFileReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TClearRemoteFileReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TClearRemoteFileReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TClearRemoteFileReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TClearRemoteFileReq")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TClearRemoteFileReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "remote_file_path", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.RemoteFilePath)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TClearRemoteFileReq) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "remote_source_properties", thrift.MAP, 2)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, 0)
	var length int
	for k, v := range p.RemoteSourceProperties {
		length++

		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)

		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRING, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TClearRemoteFileReq) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("remote_file_path", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.RemoteFilePath)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TClearRemoteFileReq) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("remote_source_properties", thrift.MAP, 2)
	l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, len(p.RemoteSourceProperties))
	for k, v := range p.RemoteSourceProperties {

		l += bthrift.Binary.StringLengthNocopy(k)

		l += bthrift.Binary.StringLengthNocopy(v)

	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPartitionVersionInfo) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPartitionId bool = false
	var issetVersion bool = false
	var issetVersionHash bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPartitionId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetVersionHash = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetPartitionId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersionHash {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPartitionVersionInfo[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPartitionVersionInfo[fieldId]))
}

func (p *TPartitionVersionInfo) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.PartitionId = v

	}
	return offset, nil
}

func (p *TPartitionVersionInfo) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Version = v

	}
	return offset, nil
}

func (p *TPartitionVersionInfo) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.VersionHash = v

	}
	return offset, nil
}

// for compatibility
func (p *TPartitionVersionInfo) FastWrite(buf []byte) int {
	return 0
}

func (p *TPartitionVersionInfo) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TPartitionVersionInfo")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TPartitionVersionInfo) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TPartitionVersionInfo")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TPartitionVersionInfo) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "partition_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.PartitionId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPartitionVersionInfo) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version", thrift.I64, 2)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.Version)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPartitionVersionInfo) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version_hash", thrift.I64, 3)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.VersionHash)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPartitionVersionInfo) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("partition_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.PartitionId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPartitionVersionInfo) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("version", thrift.I64, 2)
	l += bthrift.Binary.I64Length(p.Version)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPartitionVersionInfo) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("version_hash", thrift.I64, 3)
	l += bthrift.Binary.I64Length(p.VersionHash)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TMoveDirReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false
	var issetSrc bool = false
	var issetJobId bool = false
	var issetOverwrite bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSrc = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetJobId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetOverwrite = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSrc {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetJobId {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetOverwrite {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMoveDirReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TMoveDirReq[fieldId]))
}

func (p *TMoveDirReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TabletId = v

	}
	return offset, nil
}

func (p *TMoveDirReq) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SchemaHash = v

	}
	return offset, nil
}

func (p *TMoveDirReq) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Src = v

	}
	return offset, nil
}

func (p *TMoveDirReq) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.JobId = v

	}
	return offset, nil
}

func (p *TMoveDirReq) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Overwrite = v

	}
	return offset, nil
}

// for compatibility
func (p *TMoveDirReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TMoveDirReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TMoveDirReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TMoveDirReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TMoveDirReq")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TMoveDirReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TabletId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TMoveDirReq) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "schema_hash", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.SchemaHash)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TMoveDirReq) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "src", thrift.STRING, 3)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Src)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TMoveDirReq) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "job_id", thrift.I64, 4)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.JobId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TMoveDirReq) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "overwrite", thrift.BOOL, 5)
	offset += bthrift.Binary.WriteBool(buf[offset:], p.Overwrite)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TMoveDirReq) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablet_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.TabletId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TMoveDirReq) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("schema_hash", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.SchemaHash)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TMoveDirReq) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("src", thrift.STRING, 3)
	l += bthrift.Binary.StringLengthNocopy(p.Src)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TMoveDirReq) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("job_id", thrift.I64, 4)
	l += bthrift.Binary.I64Length(p.JobId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TMoveDirReq) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("overwrite", thrift.BOOL, 5)
	l += bthrift.Binary.BoolLength(p.Overwrite)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPublishVersionRequest) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTransactionId bool = false
	var issetPartitionVersionInfos bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTransactionId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPartitionVersionInfos = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.SET {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTransactionId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPartitionVersionInfos {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPublishVersionRequest[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPublishVersionRequest[fieldId]))
}

func (p *TPublishVersionRequest) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TransactionId = v

	}
	return offset, nil
}

func (p *TPublishVersionRequest) FastReadField2(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.PartitionVersionInfos = make([]*TPartitionVersionInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTPartitionVersionInfo()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.PartitionVersionInfos = append(p.PartitionVersionInfos, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPublishVersionRequest) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.StrictMode = v

	}
	return offset, nil
}

func (p *TPublishVersionRequest) FastReadField4(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadSetBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.BaseTabletIds = make([]types.TTabletId, 0, size)
	for i := 0; i < size; i++ {
		var _elem types.TTabletId
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.BaseTabletIds = append(p.BaseTabletIds, _elem)
	}
	if l, err := bthrift.Binary.ReadSetEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TPublishVersionRequest) FastWrite(buf []byte) int {
	return 0
}

func (p *TPublishVersionRequest) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TPublishVersionRequest")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TPublishVersionRequest) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TPublishVersionRequest")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TPublishVersionRequest) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "transaction_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TransactionId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPublishVersionRequest) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "partition_version_infos", thrift.LIST, 2)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.PartitionVersionInfos {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPublishVersionRequest) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStrictMode() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "strict_mode", thrift.BOOL, 3)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.StrictMode)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPublishVersionRequest) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBaseTabletIds() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "base_tablet_ids", thrift.SET, 4)
		setBeginOffset := offset
		offset += bthrift.Binary.SetBeginLength(thrift.I64, 0)

		for i := 0; i < len(p.BaseTabletIds); i++ {
			for j := i + 1; j < len(p.BaseTabletIds); j++ {
				if func(tgt, src types.TTabletId) bool {
					if tgt != src {
						return false
					}
					return true
				}(p.BaseTabletIds[i], p.BaseTabletIds[j]) {
					panic(fmt.Errorf("%T error writing set field: slice is not unique", p.BaseTabletIds[i]))
				}
			}
		}
		var length int
		for _, v := range p.BaseTabletIds {
			length++
			offset += bthrift.Binary.WriteI64(buf[offset:], v)

		}
		bthrift.Binary.WriteSetBegin(buf[setBeginOffset:], thrift.I64, length)
		offset += bthrift.Binary.WriteSetEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPublishVersionRequest) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("transaction_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.TransactionId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPublishVersionRequest) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("partition_version_infos", thrift.LIST, 2)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.PartitionVersionInfos))
	for _, v := range p.PartitionVersionInfos {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPublishVersionRequest) field3Length() int {
	l := 0
	if p.IsSetStrictMode() {
		l += bthrift.Binary.FieldBeginLength("strict_mode", thrift.BOOL, 3)
		l += bthrift.Binary.BoolLength(p.StrictMode)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPublishVersionRequest) field4Length() int {
	l := 0
	if p.IsSetBaseTabletIds() {
		l += bthrift.Binary.FieldBeginLength("base_tablet_ids", thrift.SET, 4)
		l += bthrift.Binary.SetBeginLength(thrift.I64, len(p.BaseTabletIds))

		for i := 0; i < len(p.BaseTabletIds); i++ {
			for j := i + 1; j < len(p.BaseTabletIds); j++ {
				if func(tgt, src types.TTabletId) bool {
					if tgt != src {
						return false
					}
					return true
				}(p.BaseTabletIds[i], p.BaseTabletIds[j]) {
					panic(fmt.Errorf("%T error writing set field: slice is not unique", p.BaseTabletIds[i]))
				}
			}
		}
		var tmpV types.TTabletId
		l += bthrift.Binary.I64Length(int64(tmpV)) * len(p.BaseTabletIds)
		l += bthrift.Binary.SetEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TVisibleVersionReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPartitionVersion bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPartitionVersion = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetPartitionVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TVisibleVersionReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TVisibleVersionReq[fieldId]))
}

func (p *TVisibleVersionReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.PartitionVersion = make(map[types.TPartitionId]types.TVersion, size)
	for i := 0; i < size; i++ {
		var _key types.TPartitionId
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val types.TVersion
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.PartitionVersion[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TVisibleVersionReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TVisibleVersionReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TVisibleVersionReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TVisibleVersionReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TVisibleVersionReq")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TVisibleVersionReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "partition_version", thrift.MAP, 1)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.I64, thrift.I64, 0)
	var length int
	for k, v := range p.PartitionVersion {
		length++

		offset += bthrift.Binary.WriteI64(buf[offset:], k)

		offset += bthrift.Binary.WriteI64(buf[offset:], v)

	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I64, thrift.I64, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TVisibleVersionReq) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("partition_version", thrift.MAP, 1)
	l += bthrift.Binary.MapBeginLength(thrift.I64, thrift.I64, len(p.PartitionVersion))
	var tmpK types.TPartitionId
	var tmpV types.TVersion
	l += (bthrift.Binary.I64Length(int64(tmpK)) + bthrift.Binary.I64Length(int64(tmpV))) * len(p.PartitionVersion)
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCalcDeleteBitmapPartitionInfo) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPartitionId bool = false
	var issetVersion bool = false
	var issetTabletIds bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPartitionId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletIds = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetPartitionId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTabletIds {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCalcDeleteBitmapPartitionInfo[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCalcDeleteBitmapPartitionInfo[fieldId]))
}

func (p *TCalcDeleteBitmapPartitionInfo) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.PartitionId = v

	}
	return offset, nil
}

func (p *TCalcDeleteBitmapPartitionInfo) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Version = v

	}
	return offset, nil
}

func (p *TCalcDeleteBitmapPartitionInfo) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.TabletIds = make([]types.TTabletId, 0, size)
	for i := 0; i < size; i++ {
		var _elem types.TTabletId
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.TabletIds = append(p.TabletIds, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TCalcDeleteBitmapPartitionInfo) FastReadField4(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.BaseCompactionCnts = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.BaseCompactionCnts = append(p.BaseCompactionCnts, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TCalcDeleteBitmapPartitionInfo) FastReadField5(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.CumulativeCompactionCnts = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.CumulativeCompactionCnts = append(p.CumulativeCompactionCnts, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TCalcDeleteBitmapPartitionInfo) FastReadField6(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.CumulativePoints = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.CumulativePoints = append(p.CumulativePoints, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TCalcDeleteBitmapPartitionInfo) FastWrite(buf []byte) int {
	return 0
}

func (p *TCalcDeleteBitmapPartitionInfo) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TCalcDeleteBitmapPartitionInfo")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TCalcDeleteBitmapPartitionInfo) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TCalcDeleteBitmapPartitionInfo")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TCalcDeleteBitmapPartitionInfo) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "partition_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.PartitionId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCalcDeleteBitmapPartitionInfo) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version", thrift.I64, 2)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.Version)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCalcDeleteBitmapPartitionInfo) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_ids", thrift.LIST, 3)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.I64, 0)
	var length int
	for _, v := range p.TabletIds {
		length++
		offset += bthrift.Binary.WriteI64(buf[offset:], v)

	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I64, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCalcDeleteBitmapPartitionInfo) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBaseCompactionCnts() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "base_compaction_cnts", thrift.LIST, 4)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.I64, 0)
		var length int
		for _, v := range p.BaseCompactionCnts {
			length++
			offset += bthrift.Binary.WriteI64(buf[offset:], v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I64, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCalcDeleteBitmapPartitionInfo) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCumulativeCompactionCnts() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "cumulative_compaction_cnts", thrift.LIST, 5)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.I64, 0)
		var length int
		for _, v := range p.CumulativeCompactionCnts {
			length++
			offset += bthrift.Binary.WriteI64(buf[offset:], v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I64, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCalcDeleteBitmapPartitionInfo) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCumulativePoints() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "cumulative_points", thrift.LIST, 6)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.I64, 0)
		var length int
		for _, v := range p.CumulativePoints {
			length++
			offset += bthrift.Binary.WriteI64(buf[offset:], v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I64, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCalcDeleteBitmapPartitionInfo) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("partition_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.PartitionId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCalcDeleteBitmapPartitionInfo) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("version", thrift.I64, 2)
	l += bthrift.Binary.I64Length(p.Version)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCalcDeleteBitmapPartitionInfo) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablet_ids", thrift.LIST, 3)
	l += bthrift.Binary.ListBeginLength(thrift.I64, len(p.TabletIds))
	var tmpV types.TTabletId
	l += bthrift.Binary.I64Length(int64(tmpV)) * len(p.TabletIds)
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCalcDeleteBitmapPartitionInfo) field4Length() int {
	l := 0
	if p.IsSetBaseCompactionCnts() {
		l += bthrift.Binary.FieldBeginLength("base_compaction_cnts", thrift.LIST, 4)
		l += bthrift.Binary.ListBeginLength(thrift.I64, len(p.BaseCompactionCnts))
		var tmpV int64
		l += bthrift.Binary.I64Length(int64(tmpV)) * len(p.BaseCompactionCnts)
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCalcDeleteBitmapPartitionInfo) field5Length() int {
	l := 0
	if p.IsSetCumulativeCompactionCnts() {
		l += bthrift.Binary.FieldBeginLength("cumulative_compaction_cnts", thrift.LIST, 5)
		l += bthrift.Binary.ListBeginLength(thrift.I64, len(p.CumulativeCompactionCnts))
		var tmpV int64
		l += bthrift.Binary.I64Length(int64(tmpV)) * len(p.CumulativeCompactionCnts)
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCalcDeleteBitmapPartitionInfo) field6Length() int {
	l := 0
	if p.IsSetCumulativePoints() {
		l += bthrift.Binary.FieldBeginLength("cumulative_points", thrift.LIST, 6)
		l += bthrift.Binary.ListBeginLength(thrift.I64, len(p.CumulativePoints))
		var tmpV int64
		l += bthrift.Binary.I64Length(int64(tmpV)) * len(p.CumulativePoints)
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCalcDeleteBitmapRequest) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTransactionId bool = false
	var issetPartitions bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTransactionId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPartitions = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTransactionId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPartitions {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCalcDeleteBitmapRequest[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCalcDeleteBitmapRequest[fieldId]))
}

func (p *TCalcDeleteBitmapRequest) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TransactionId = v

	}
	return offset, nil
}

func (p *TCalcDeleteBitmapRequest) FastReadField2(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Partitions = make([]*TCalcDeleteBitmapPartitionInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTCalcDeleteBitmapPartitionInfo()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Partitions = append(p.Partitions, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TCalcDeleteBitmapRequest) FastWrite(buf []byte) int {
	return 0
}

func (p *TCalcDeleteBitmapRequest) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TCalcDeleteBitmapRequest")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TCalcDeleteBitmapRequest) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TCalcDeleteBitmapRequest")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TCalcDeleteBitmapRequest) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "transaction_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TransactionId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCalcDeleteBitmapRequest) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "partitions", thrift.LIST, 2)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.Partitions {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCalcDeleteBitmapRequest) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("transaction_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.TransactionId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCalcDeleteBitmapRequest) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("partitions", thrift.LIST, 2)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.Partitions))
	for _, v := range p.Partitions {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TClearAlterTaskRequest) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TClearAlterTaskRequest[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TClearAlterTaskRequest[fieldId]))
}

func (p *TClearAlterTaskRequest) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TabletId = v

	}
	return offset, nil
}

func (p *TClearAlterTaskRequest) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SchemaHash = v

	}
	return offset, nil
}

// for compatibility
func (p *TClearAlterTaskRequest) FastWrite(buf []byte) int {
	return 0
}

func (p *TClearAlterTaskRequest) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TClearAlterTaskRequest")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TClearAlterTaskRequest) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TClearAlterTaskRequest")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TClearAlterTaskRequest) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TabletId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TClearAlterTaskRequest) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "schema_hash", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.SchemaHash)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TClearAlterTaskRequest) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablet_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.TabletId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TClearAlterTaskRequest) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("schema_hash", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.SchemaHash)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TClearTransactionTaskRequest) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTransactionId bool = false
	var issetPartitionId bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTransactionId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPartitionId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTransactionId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPartitionId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TClearTransactionTaskRequest[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TClearTransactionTaskRequest[fieldId]))
}

func (p *TClearTransactionTaskRequest) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TransactionId = v

	}
	return offset, nil
}

func (p *TClearTransactionTaskRequest) FastReadField2(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.PartitionId = make([]types.TPartitionId, 0, size)
	for i := 0; i < size; i++ {
		var _elem types.TPartitionId
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.PartitionId = append(p.PartitionId, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TClearTransactionTaskRequest) FastWrite(buf []byte) int {
	return 0
}

func (p *TClearTransactionTaskRequest) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TClearTransactionTaskRequest")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TClearTransactionTaskRequest) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TClearTransactionTaskRequest")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TClearTransactionTaskRequest) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "transaction_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TransactionId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TClearTransactionTaskRequest) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "partition_id", thrift.LIST, 2)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.I64, 0)
	var length int
	for _, v := range p.PartitionId {
		length++
		offset += bthrift.Binary.WriteI64(buf[offset:], v)

	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I64, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TClearTransactionTaskRequest) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("transaction_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.TransactionId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TClearTransactionTaskRequest) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("partition_id", thrift.LIST, 2)
	l += bthrift.Binary.ListBeginLength(thrift.I64, len(p.PartitionId))
	var tmpV types.TPartitionId
	l += bthrift.Binary.I64Length(int64(tmpV)) * len(p.PartitionId)
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TRecoverTabletReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRecoverTabletReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TRecoverTabletReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TabletId = &v

	}
	return offset, nil
}

func (p *TRecoverTabletReq) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.SchemaHash = &v

	}
	return offset, nil
}

func (p *TRecoverTabletReq) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Version = &v

	}
	return offset, nil
}

func (p *TRecoverTabletReq) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.VersionHash = &v

	}
	return offset, nil
}

// for compatibility
func (p *TRecoverTabletReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TRecoverTabletReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TRecoverTabletReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TRecoverTabletReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TRecoverTabletReq")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TRecoverTabletReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTabletId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_id", thrift.I64, 1)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TabletId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TRecoverTabletReq) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSchemaHash() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "schema_hash", thrift.I32, 2)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.SchemaHash)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TRecoverTabletReq) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version", thrift.I64, 3)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.Version)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TRecoverTabletReq) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetVersionHash() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version_hash", thrift.I64, 4)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.VersionHash)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TRecoverTabletReq) field1Length() int {
	l := 0
	if p.IsSetTabletId() {
		l += bthrift.Binary.FieldBeginLength("tablet_id", thrift.I64, 1)
		l += bthrift.Binary.I64Length(*p.TabletId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TRecoverTabletReq) field2Length() int {
	l := 0
	if p.IsSetSchemaHash() {
		l += bthrift.Binary.FieldBeginLength("schema_hash", thrift.I32, 2)
		l += bthrift.Binary.I32Length(*p.SchemaHash)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TRecoverTabletReq) field3Length() int {
	l := 0
	if p.IsSetVersion() {
		l += bthrift.Binary.FieldBeginLength("version", thrift.I64, 3)
		l += bthrift.Binary.I64Length(*p.Version)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TRecoverTabletReq) field4Length() int {
	l := 0
	if p.IsSetVersionHash() {
		l += bthrift.Binary.FieldBeginLength("version_hash", thrift.I64, 4)
		l += bthrift.Binary.I64Length(*p.VersionHash)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletMetaInfo) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField15(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField16(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField17(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField18(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletMetaInfo[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTabletMetaInfo) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TabletId = &v

	}
	return offset, nil
}

func (p *TTabletMetaInfo) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.SchemaHash = &v

	}
	return offset, nil
}

func (p *TTabletMetaInfo) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.PartitionId = &v

	}
	return offset, nil
}

func (p *TTabletMetaInfo) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.IsInMemory = &v

	}
	return offset, nil
}

func (p *TTabletMetaInfo) FastReadField7(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.StoragePolicyId = &v

	}
	return offset, nil
}

func (p *TTabletMetaInfo) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ReplicaId = &v

	}
	return offset, nil
}

func (p *TTabletMetaInfo) FastReadField9(buf []byte) (int, error) {
	offset := 0

	tmp := NewTBinlogConfig()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.BinlogConfig = tmp
	return offset, nil
}

func (p *TTabletMetaInfo) FastReadField10(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.CompactionPolicy = &v

	}
	return offset, nil
}

func (p *TTabletMetaInfo) FastReadField11(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TimeSeriesCompactionGoalSizeMbytes = &v

	}
	return offset, nil
}

func (p *TTabletMetaInfo) FastReadField12(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TimeSeriesCompactionFileCountThreshold = &v

	}
	return offset, nil
}

func (p *TTabletMetaInfo) FastReadField13(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TimeSeriesCompactionTimeThresholdSeconds = &v

	}
	return offset, nil
}

func (p *TTabletMetaInfo) FastReadField14(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.EnableSingleReplicaCompaction = &v

	}
	return offset, nil
}

func (p *TTabletMetaInfo) FastReadField15(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.SkipWriteIndexOnLoad = &v

	}
	return offset, nil
}

func (p *TTabletMetaInfo) FastReadField16(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.DisableAutoCompaction = &v

	}
	return offset, nil
}

func (p *TTabletMetaInfo) FastReadField17(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TimeSeriesCompactionEmptyRowsetsThreshold = &v

	}
	return offset, nil
}

func (p *TTabletMetaInfo) FastReadField18(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TimeSeriesCompactionLevelThreshold = &v

	}
	return offset, nil
}

// for compatibility
func (p *TTabletMetaInfo) FastWrite(buf []byte) int {
	return 0
}

func (p *TTabletMetaInfo) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTabletMetaInfo")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
		offset += p.fastWriteField15(buf[offset:], binaryWriter)
		offset += p.fastWriteField16(buf[offset:], binaryWriter)
		offset += p.fastWriteField17(buf[offset:], binaryWriter)
		offset += p.fastWriteField18(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTabletMetaInfo) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTabletMetaInfo")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field5Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
		l += p.field15Length()
		l += p.field16Length()
		l += p.field17Length()
		l += p.field18Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTabletMetaInfo) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTabletId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_id", thrift.I64, 1)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TabletId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletMetaInfo) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSchemaHash() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "schema_hash", thrift.I32, 2)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.SchemaHash)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletMetaInfo) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPartitionId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "partition_id", thrift.I64, 3)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.PartitionId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletMetaInfo) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsInMemory() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_in_memory", thrift.BOOL, 5)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.IsInMemory)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletMetaInfo) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStoragePolicyId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "storage_policy_id", thrift.I64, 7)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.StoragePolicyId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletMetaInfo) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetReplicaId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "replica_id", thrift.I64, 8)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.ReplicaId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletMetaInfo) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBinlogConfig() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "binlog_config", thrift.STRUCT, 9)
		offset += p.BinlogConfig.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletMetaInfo) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCompactionPolicy() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "compaction_policy", thrift.STRING, 10)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.CompactionPolicy)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletMetaInfo) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTimeSeriesCompactionGoalSizeMbytes() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "time_series_compaction_goal_size_mbytes", thrift.I64, 11)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TimeSeriesCompactionGoalSizeMbytes)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletMetaInfo) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTimeSeriesCompactionFileCountThreshold() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "time_series_compaction_file_count_threshold", thrift.I64, 12)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TimeSeriesCompactionFileCountThreshold)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletMetaInfo) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTimeSeriesCompactionTimeThresholdSeconds() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "time_series_compaction_time_threshold_seconds", thrift.I64, 13)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TimeSeriesCompactionTimeThresholdSeconds)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletMetaInfo) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableSingleReplicaCompaction() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_single_replica_compaction", thrift.BOOL, 14)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.EnableSingleReplicaCompaction)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletMetaInfo) fastWriteField15(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSkipWriteIndexOnLoad() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "skip_write_index_on_load", thrift.BOOL, 15)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.SkipWriteIndexOnLoad)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletMetaInfo) fastWriteField16(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDisableAutoCompaction() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "disable_auto_compaction", thrift.BOOL, 16)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.DisableAutoCompaction)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletMetaInfo) fastWriteField17(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTimeSeriesCompactionEmptyRowsetsThreshold() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "time_series_compaction_empty_rowsets_threshold", thrift.I64, 17)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TimeSeriesCompactionEmptyRowsetsThreshold)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletMetaInfo) fastWriteField18(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTimeSeriesCompactionLevelThreshold() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "time_series_compaction_level_threshold", thrift.I64, 18)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TimeSeriesCompactionLevelThreshold)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletMetaInfo) field1Length() int {
	l := 0
	if p.IsSetTabletId() {
		l += bthrift.Binary.FieldBeginLength("tablet_id", thrift.I64, 1)
		l += bthrift.Binary.I64Length(*p.TabletId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletMetaInfo) field2Length() int {
	l := 0
	if p.IsSetSchemaHash() {
		l += bthrift.Binary.FieldBeginLength("schema_hash", thrift.I32, 2)
		l += bthrift.Binary.I32Length(*p.SchemaHash)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletMetaInfo) field3Length() int {
	l := 0
	if p.IsSetPartitionId() {
		l += bthrift.Binary.FieldBeginLength("partition_id", thrift.I64, 3)
		l += bthrift.Binary.I64Length(*p.PartitionId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletMetaInfo) field5Length() int {
	l := 0
	if p.IsSetIsInMemory() {
		l += bthrift.Binary.FieldBeginLength("is_in_memory", thrift.BOOL, 5)
		l += bthrift.Binary.BoolLength(*p.IsInMemory)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletMetaInfo) field7Length() int {
	l := 0
	if p.IsSetStoragePolicyId() {
		l += bthrift.Binary.FieldBeginLength("storage_policy_id", thrift.I64, 7)
		l += bthrift.Binary.I64Length(*p.StoragePolicyId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletMetaInfo) field8Length() int {
	l := 0
	if p.IsSetReplicaId() {
		l += bthrift.Binary.FieldBeginLength("replica_id", thrift.I64, 8)
		l += bthrift.Binary.I64Length(*p.ReplicaId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletMetaInfo) field9Length() int {
	l := 0
	if p.IsSetBinlogConfig() {
		l += bthrift.Binary.FieldBeginLength("binlog_config", thrift.STRUCT, 9)
		l += p.BinlogConfig.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletMetaInfo) field10Length() int {
	l := 0
	if p.IsSetCompactionPolicy() {
		l += bthrift.Binary.FieldBeginLength("compaction_policy", thrift.STRING, 10)
		l += bthrift.Binary.StringLengthNocopy(*p.CompactionPolicy)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletMetaInfo) field11Length() int {
	l := 0
	if p.IsSetTimeSeriesCompactionGoalSizeMbytes() {
		l += bthrift.Binary.FieldBeginLength("time_series_compaction_goal_size_mbytes", thrift.I64, 11)
		l += bthrift.Binary.I64Length(*p.TimeSeriesCompactionGoalSizeMbytes)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletMetaInfo) field12Length() int {
	l := 0
	if p.IsSetTimeSeriesCompactionFileCountThreshold() {
		l += bthrift.Binary.FieldBeginLength("time_series_compaction_file_count_threshold", thrift.I64, 12)
		l += bthrift.Binary.I64Length(*p.TimeSeriesCompactionFileCountThreshold)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletMetaInfo) field13Length() int {
	l := 0
	if p.IsSetTimeSeriesCompactionTimeThresholdSeconds() {
		l += bthrift.Binary.FieldBeginLength("time_series_compaction_time_threshold_seconds", thrift.I64, 13)
		l += bthrift.Binary.I64Length(*p.TimeSeriesCompactionTimeThresholdSeconds)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletMetaInfo) field14Length() int {
	l := 0
	if p.IsSetEnableSingleReplicaCompaction() {
		l += bthrift.Binary.FieldBeginLength("enable_single_replica_compaction", thrift.BOOL, 14)
		l += bthrift.Binary.BoolLength(*p.EnableSingleReplicaCompaction)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletMetaInfo) field15Length() int {
	l := 0
	if p.IsSetSkipWriteIndexOnLoad() {
		l += bthrift.Binary.FieldBeginLength("skip_write_index_on_load", thrift.BOOL, 15)
		l += bthrift.Binary.BoolLength(*p.SkipWriteIndexOnLoad)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletMetaInfo) field16Length() int {
	l := 0
	if p.IsSetDisableAutoCompaction() {
		l += bthrift.Binary.FieldBeginLength("disable_auto_compaction", thrift.BOOL, 16)
		l += bthrift.Binary.BoolLength(*p.DisableAutoCompaction)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletMetaInfo) field17Length() int {
	l := 0
	if p.IsSetTimeSeriesCompactionEmptyRowsetsThreshold() {
		l += bthrift.Binary.FieldBeginLength("time_series_compaction_empty_rowsets_threshold", thrift.I64, 17)
		l += bthrift.Binary.I64Length(*p.TimeSeriesCompactionEmptyRowsetsThreshold)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletMetaInfo) field18Length() int {
	l := 0
	if p.IsSetTimeSeriesCompactionLevelThreshold() {
		l += bthrift.Binary.FieldBeginLength("time_series_compaction_level_threshold", thrift.I64, 18)
		l += bthrift.Binary.I64Length(*p.TimeSeriesCompactionLevelThreshold)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TUpdateTabletMetaInfoReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TUpdateTabletMetaInfoReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TUpdateTabletMetaInfoReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.TabletMetaInfos = make([]*TTabletMetaInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTTabletMetaInfo()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.TabletMetaInfos = append(p.TabletMetaInfos, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TUpdateTabletMetaInfoReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TUpdateTabletMetaInfoReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TUpdateTabletMetaInfoReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TUpdateTabletMetaInfoReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TUpdateTabletMetaInfoReq")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TUpdateTabletMetaInfoReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTabletMetaInfos() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tabletMetaInfos", thrift.LIST, 1)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.TabletMetaInfos {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TUpdateTabletMetaInfoReq) field1Length() int {
	l := 0
	if p.IsSetTabletMetaInfos() {
		l += bthrift.Binary.FieldBeginLength("tabletMetaInfos", thrift.LIST, 1)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.TabletMetaInfos))
		for _, v := range p.TabletMetaInfos {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPluginMetaInfo) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetType bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPluginMetaInfo[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPluginMetaInfo[fieldId]))
}

func (p *TPluginMetaInfo) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Name = v

	}
	return offset, nil
}

func (p *TPluginMetaInfo) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Type = v

	}
	return offset, nil
}

func (p *TPluginMetaInfo) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.SoName = &v

	}
	return offset, nil
}

func (p *TPluginMetaInfo) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Source = &v

	}
	return offset, nil
}

// for compatibility
func (p *TPluginMetaInfo) FastWrite(buf []byte) int {
	return 0
}

func (p *TPluginMetaInfo) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TPluginMetaInfo")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TPluginMetaInfo) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TPluginMetaInfo")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TPluginMetaInfo) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "name", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Name)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPluginMetaInfo) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "type", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.Type)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPluginMetaInfo) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSoName() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "so_name", thrift.STRING, 3)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.SoName)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPluginMetaInfo) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSource() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "source", thrift.STRING, 4)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Source)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPluginMetaInfo) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("name", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.Name)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPluginMetaInfo) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("type", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.Type)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPluginMetaInfo) field3Length() int {
	l := 0
	if p.IsSetSoName() {
		l += bthrift.Binary.FieldBeginLength("so_name", thrift.STRING, 3)
		l += bthrift.Binary.StringLengthNocopy(*p.SoName)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPluginMetaInfo) field4Length() int {
	l := 0
	if p.IsSetSource() {
		l += bthrift.Binary.FieldBeginLength("source", thrift.STRING, 4)
		l += bthrift.Binary.StringLengthNocopy(*p.Source)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCooldownConf) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCooldownConf[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCooldownConf[fieldId]))
}

func (p *TCooldownConf) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TabletId = v

	}
	return offset, nil
}

func (p *TCooldownConf) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.CooldownReplicaId = &v

	}
	return offset, nil
}

func (p *TCooldownConf) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.CooldownTerm = &v

	}
	return offset, nil
}

// for compatibility
func (p *TCooldownConf) FastWrite(buf []byte) int {
	return 0
}

func (p *TCooldownConf) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TCooldownConf")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TCooldownConf) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TCooldownConf")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TCooldownConf) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TabletId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCooldownConf) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCooldownReplicaId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "cooldown_replica_id", thrift.I64, 2)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.CooldownReplicaId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCooldownConf) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCooldownTerm() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "cooldown_term", thrift.I64, 3)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.CooldownTerm)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCooldownConf) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablet_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.TabletId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCooldownConf) field2Length() int {
	l := 0
	if p.IsSetCooldownReplicaId() {
		l += bthrift.Binary.FieldBeginLength("cooldown_replica_id", thrift.I64, 2)
		l += bthrift.Binary.I64Length(*p.CooldownReplicaId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCooldownConf) field3Length() int {
	l := 0
	if p.IsSetCooldownTerm() {
		l += bthrift.Binary.FieldBeginLength("cooldown_term", thrift.I64, 3)
		l += bthrift.Binary.I64Length(*p.CooldownTerm)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPushCooldownConfReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCooldownConfs bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetCooldownConfs = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetCooldownConfs {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPushCooldownConfReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPushCooldownConfReq[fieldId]))
}

func (p *TPushCooldownConfReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.CooldownConfs = make([]*TCooldownConf, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTCooldownConf()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.CooldownConfs = append(p.CooldownConfs, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TPushCooldownConfReq) FastWrite(buf []byte) int {
	return 0
}

func (p *TPushCooldownConfReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TPushCooldownConfReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TPushCooldownConfReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TPushCooldownConfReq")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TPushCooldownConfReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "cooldown_confs", thrift.LIST, 1)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.CooldownConfs {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPushCooldownConfReq) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("cooldown_confs", thrift.LIST, 1)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.CooldownConfs))
	for _, v := range p.CooldownConfs {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TAgentTaskRequest) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false
	var issetTaskType bool = false
	var issetSignature bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTaskType = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSignature = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField15(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField16(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField17(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField18(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField19(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField20(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField21(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField22(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 23:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField23(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 24:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField24(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 25:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField25(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 26:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField26(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 27:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField27(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 28:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField28(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 30:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField30(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 31:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField31(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 32:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField32(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 33:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField33(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 34:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField34(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 35:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField35(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 36:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField36(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 1000:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1000(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTaskType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSignature {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAgentTaskRequest[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAgentTaskRequest[fieldId]))
}

func (p *TAgentTaskRequest) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ProtocolVersion = TAgentServiceVersion(v)

	}
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TaskType = types.TTaskType(v)

	}
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Signature = v

	}
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		tmp := types.TPriority(v)
		p.Priority = &tmp

	}
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField5(buf []byte) (int, error) {
	offset := 0

	tmp := NewTCreateTabletReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.CreateTabletReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField6(buf []byte) (int, error) {
	offset := 0

	tmp := NewTDropTabletReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.DropTabletReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField7(buf []byte) (int, error) {
	offset := 0

	tmp := NewTAlterTabletReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.AlterTabletReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField8(buf []byte) (int, error) {
	offset := 0

	tmp := NewTCloneReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.CloneReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField9(buf []byte) (int, error) {
	offset := 0

	tmp := NewTPushReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.PushReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField10(buf []byte) (int, error) {
	offset := 0

	tmp := NewTCancelDeleteDataReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.CancelDeleteDataReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField11(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTResourceInfo()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ResourceInfo = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField12(buf []byte) (int, error) {
	offset := 0

	tmp := NewTStorageMediumMigrateReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.StorageMediumMigrateReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField13(buf []byte) (int, error) {
	offset := 0

	tmp := NewTCheckConsistencyReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.CheckConsistencyReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField14(buf []byte) (int, error) {
	offset := 0

	tmp := NewTUploadReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.UploadReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField15(buf []byte) (int, error) {
	offset := 0

	tmp := NewTDownloadReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.DownloadReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField16(buf []byte) (int, error) {
	offset := 0

	tmp := NewTSnapshotRequest()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.SnapshotReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField17(buf []byte) (int, error) {
	offset := 0

	tmp := NewTReleaseSnapshotRequest()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ReleaseSnapshotReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField18(buf []byte) (int, error) {
	offset := 0

	tmp := NewTClearRemoteFileReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ClearRemoteFileReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField19(buf []byte) (int, error) {
	offset := 0

	tmp := NewTPublishVersionRequest()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.PublishVersionReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField20(buf []byte) (int, error) {
	offset := 0

	tmp := NewTClearAlterTaskRequest()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ClearAlterTaskReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField21(buf []byte) (int, error) {
	offset := 0

	tmp := NewTClearTransactionTaskRequest()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ClearTransactionTaskReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField22(buf []byte) (int, error) {
	offset := 0

	tmp := NewTMoveDirReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.MoveDirReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField23(buf []byte) (int, error) {
	offset := 0

	tmp := NewTRecoverTabletReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.RecoverTabletReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField24(buf []byte) (int, error) {
	offset := 0

	tmp := NewTAlterTabletReqV2()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.AlterTabletReqV2 = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField25(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.RecvTime = &v

	}
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField26(buf []byte) (int, error) {
	offset := 0

	tmp := NewTUpdateTabletMetaInfoReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.UpdateTabletMetaInfoReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField27(buf []byte) (int, error) {
	offset := 0

	tmp := NewTCompactionReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.CompactionReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField28(buf []byte) (int, error) {
	offset := 0

	tmp := NewTStorageMigrationReqV2()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.StorageMigrationReqV2 = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField30(buf []byte) (int, error) {
	offset := 0

	tmp := NewTPushCooldownConfReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.PushCooldownConf = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField31(buf []byte) (int, error) {
	offset := 0

	tmp := NewTPushStoragePolicyReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.PushStoragePolicyReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField32(buf []byte) (int, error) {
	offset := 0

	tmp := NewTAlterInvertedIndexReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.AlterInvertedIndexReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField33(buf []byte) (int, error) {
	offset := 0

	tmp := NewTGcBinlogReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.GcBinlogReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField34(buf []byte) (int, error) {
	offset := 0

	tmp := NewTCleanTrashReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.CleanTrashReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField35(buf []byte) (int, error) {
	offset := 0

	tmp := NewTVisibleVersionReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.VisibleVersionReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField36(buf []byte) (int, error) {
	offset := 0

	tmp := NewTCleanUDFCacheReq()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.CleanUdfCacheReq = tmp
	return offset, nil
}

func (p *TAgentTaskRequest) FastReadField1000(buf []byte) (int, error) {
	offset := 0

	tmp := NewTCalcDeleteBitmapRequest()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.CalcDeleteBitmapReq = tmp
	return offset, nil
}

// for compatibility
func (p *TAgentTaskRequest) FastWrite(buf []byte) int {
	return 0
}

func (p *TAgentTaskRequest) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TAgentTaskRequest")
	if p != nil {
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField25(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
		offset += p.fastWriteField15(buf[offset:], binaryWriter)
		offset += p.fastWriteField16(buf[offset:], binaryWriter)
		offset += p.fastWriteField17(buf[offset:], binaryWriter)
		offset += p.fastWriteField18(buf[offset:], binaryWriter)
		offset += p.fastWriteField19(buf[offset:], binaryWriter)
		offset += p.fastWriteField20(buf[offset:], binaryWriter)
		offset += p.fastWriteField21(buf[offset:], binaryWriter)
		offset += p.fastWriteField22(buf[offset:], binaryWriter)
		offset += p.fastWriteField23(buf[offset:], binaryWriter)
		offset += p.fastWriteField24(buf[offset:], binaryWriter)
		offset += p.fastWriteField26(buf[offset:], binaryWriter)
		offset += p.fastWriteField27(buf[offset:], binaryWriter)
		offset += p.fastWriteField28(buf[offset:], binaryWriter)
		offset += p.fastWriteField30(buf[offset:], binaryWriter)
		offset += p.fastWriteField31(buf[offset:], binaryWriter)
		offset += p.fastWriteField32(buf[offset:], binaryWriter)
		offset += p.fastWriteField33(buf[offset:], binaryWriter)
		offset += p.fastWriteField34(buf[offset:], binaryWriter)
		offset += p.fastWriteField35(buf[offset:], binaryWriter)
		offset += p.fastWriteField36(buf[offset:], binaryWriter)
		offset += p.fastWriteField1000(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TAgentTaskRequest) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TAgentTaskRequest")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
		l += p.field15Length()
		l += p.field16Length()
		l += p.field17Length()
		l += p.field18Length()
		l += p.field19Length()
		l += p.field20Length()
		l += p.field21Length()
		l += p.field22Length()
		l += p.field23Length()
		l += p.field24Length()
		l += p.field25Length()
		l += p.field26Length()
		l += p.field27Length()
		l += p.field28Length()
		l += p.field30Length()
		l += p.field31Length()
		l += p.field32Length()
		l += p.field33Length()
		l += p.field34Length()
		l += p.field35Length()
		l += p.field36Length()
		l += p.field1000Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TAgentTaskRequest) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "protocol_version", thrift.I32, 1)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.ProtocolVersion))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TAgentTaskRequest) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "task_type", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.TaskType))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TAgentTaskRequest) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "signature", thrift.I64, 3)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.Signature)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TAgentTaskRequest) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPriority() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "priority", thrift.I32, 4)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(*p.Priority))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCreateTabletReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "create_tablet_req", thrift.STRUCT, 5)
		offset += p.CreateTabletReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDropTabletReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "drop_tablet_req", thrift.STRUCT, 6)
		offset += p.DropTabletReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetAlterTabletReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "alter_tablet_req", thrift.STRUCT, 7)
		offset += p.AlterTabletReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCloneReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "clone_req", thrift.STRUCT, 8)
		offset += p.CloneReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPushReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "push_req", thrift.STRUCT, 9)
		offset += p.PushReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCancelDeleteDataReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "cancel_delete_data_req", thrift.STRUCT, 10)
		offset += p.CancelDeleteDataReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetResourceInfo() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "resource_info", thrift.STRUCT, 11)
		offset += p.ResourceInfo.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStorageMediumMigrateReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "storage_medium_migrate_req", thrift.STRUCT, 12)
		offset += p.StorageMediumMigrateReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCheckConsistencyReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "check_consistency_req", thrift.STRUCT, 13)
		offset += p.CheckConsistencyReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetUploadReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "upload_req", thrift.STRUCT, 14)
		offset += p.UploadReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField15(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDownloadReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "download_req", thrift.STRUCT, 15)
		offset += p.DownloadReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField16(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSnapshotReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "snapshot_req", thrift.STRUCT, 16)
		offset += p.SnapshotReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField17(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetReleaseSnapshotReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "release_snapshot_req", thrift.STRUCT, 17)
		offset += p.ReleaseSnapshotReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField18(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetClearRemoteFileReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "clear_remote_file_req", thrift.STRUCT, 18)
		offset += p.ClearRemoteFileReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField19(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPublishVersionReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "publish_version_req", thrift.STRUCT, 19)
		offset += p.PublishVersionReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField20(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetClearAlterTaskReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "clear_alter_task_req", thrift.STRUCT, 20)
		offset += p.ClearAlterTaskReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField21(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetClearTransactionTaskReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "clear_transaction_task_req", thrift.STRUCT, 21)
		offset += p.ClearTransactionTaskReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField22(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMoveDirReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "move_dir_req", thrift.STRUCT, 22)
		offset += p.MoveDirReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField23(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRecoverTabletReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "recover_tablet_req", thrift.STRUCT, 23)
		offset += p.RecoverTabletReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField24(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetAlterTabletReqV2() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "alter_tablet_req_v2", thrift.STRUCT, 24)
		offset += p.AlterTabletReqV2.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField25(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRecvTime() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "recv_time", thrift.I64, 25)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.RecvTime)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField26(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetUpdateTabletMetaInfoReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "update_tablet_meta_info_req", thrift.STRUCT, 26)
		offset += p.UpdateTabletMetaInfoReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField27(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCompactionReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "compaction_req", thrift.STRUCT, 27)
		offset += p.CompactionReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField28(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStorageMigrationReqV2() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "storage_migration_req_v2", thrift.STRUCT, 28)
		offset += p.StorageMigrationReqV2.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField30(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPushCooldownConf() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "push_cooldown_conf", thrift.STRUCT, 30)
		offset += p.PushCooldownConf.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField31(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPushStoragePolicyReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "push_storage_policy_req", thrift.STRUCT, 31)
		offset += p.PushStoragePolicyReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField32(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetAlterInvertedIndexReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "alter_inverted_index_req", thrift.STRUCT, 32)
		offset += p.AlterInvertedIndexReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField33(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetGcBinlogReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "gc_binlog_req", thrift.STRUCT, 33)
		offset += p.GcBinlogReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField34(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCleanTrashReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "clean_trash_req", thrift.STRUCT, 34)
		offset += p.CleanTrashReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField35(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetVisibleVersionReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "visible_version_req", thrift.STRUCT, 35)
		offset += p.VisibleVersionReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField36(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCleanUdfCacheReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "clean_udf_cache_req", thrift.STRUCT, 36)
		offset += p.CleanUdfCacheReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) fastWriteField1000(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCalcDeleteBitmapReq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "calc_delete_bitmap_req", thrift.STRUCT, 1000)
		offset += p.CalcDeleteBitmapReq.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentTaskRequest) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("protocol_version", thrift.I32, 1)
	l += bthrift.Binary.I32Length(int32(p.ProtocolVersion))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TAgentTaskRequest) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("task_type", thrift.I32, 2)
	l += bthrift.Binary.I32Length(int32(p.TaskType))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TAgentTaskRequest) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("signature", thrift.I64, 3)
	l += bthrift.Binary.I64Length(p.Signature)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TAgentTaskRequest) field4Length() int {
	l := 0
	if p.IsSetPriority() {
		l += bthrift.Binary.FieldBeginLength("priority", thrift.I32, 4)
		l += bthrift.Binary.I32Length(int32(*p.Priority))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field5Length() int {
	l := 0
	if p.IsSetCreateTabletReq() {
		l += bthrift.Binary.FieldBeginLength("create_tablet_req", thrift.STRUCT, 5)
		l += p.CreateTabletReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field6Length() int {
	l := 0
	if p.IsSetDropTabletReq() {
		l += bthrift.Binary.FieldBeginLength("drop_tablet_req", thrift.STRUCT, 6)
		l += p.DropTabletReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field7Length() int {
	l := 0
	if p.IsSetAlterTabletReq() {
		l += bthrift.Binary.FieldBeginLength("alter_tablet_req", thrift.STRUCT, 7)
		l += p.AlterTabletReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field8Length() int {
	l := 0
	if p.IsSetCloneReq() {
		l += bthrift.Binary.FieldBeginLength("clone_req", thrift.STRUCT, 8)
		l += p.CloneReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field9Length() int {
	l := 0
	if p.IsSetPushReq() {
		l += bthrift.Binary.FieldBeginLength("push_req", thrift.STRUCT, 9)
		l += p.PushReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field10Length() int {
	l := 0
	if p.IsSetCancelDeleteDataReq() {
		l += bthrift.Binary.FieldBeginLength("cancel_delete_data_req", thrift.STRUCT, 10)
		l += p.CancelDeleteDataReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field11Length() int {
	l := 0
	if p.IsSetResourceInfo() {
		l += bthrift.Binary.FieldBeginLength("resource_info", thrift.STRUCT, 11)
		l += p.ResourceInfo.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field12Length() int {
	l := 0
	if p.IsSetStorageMediumMigrateReq() {
		l += bthrift.Binary.FieldBeginLength("storage_medium_migrate_req", thrift.STRUCT, 12)
		l += p.StorageMediumMigrateReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field13Length() int {
	l := 0
	if p.IsSetCheckConsistencyReq() {
		l += bthrift.Binary.FieldBeginLength("check_consistency_req", thrift.STRUCT, 13)
		l += p.CheckConsistencyReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field14Length() int {
	l := 0
	if p.IsSetUploadReq() {
		l += bthrift.Binary.FieldBeginLength("upload_req", thrift.STRUCT, 14)
		l += p.UploadReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field15Length() int {
	l := 0
	if p.IsSetDownloadReq() {
		l += bthrift.Binary.FieldBeginLength("download_req", thrift.STRUCT, 15)
		l += p.DownloadReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field16Length() int {
	l := 0
	if p.IsSetSnapshotReq() {
		l += bthrift.Binary.FieldBeginLength("snapshot_req", thrift.STRUCT, 16)
		l += p.SnapshotReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field17Length() int {
	l := 0
	if p.IsSetReleaseSnapshotReq() {
		l += bthrift.Binary.FieldBeginLength("release_snapshot_req", thrift.STRUCT, 17)
		l += p.ReleaseSnapshotReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field18Length() int {
	l := 0
	if p.IsSetClearRemoteFileReq() {
		l += bthrift.Binary.FieldBeginLength("clear_remote_file_req", thrift.STRUCT, 18)
		l += p.ClearRemoteFileReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field19Length() int {
	l := 0
	if p.IsSetPublishVersionReq() {
		l += bthrift.Binary.FieldBeginLength("publish_version_req", thrift.STRUCT, 19)
		l += p.PublishVersionReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field20Length() int {
	l := 0
	if p.IsSetClearAlterTaskReq() {
		l += bthrift.Binary.FieldBeginLength("clear_alter_task_req", thrift.STRUCT, 20)
		l += p.ClearAlterTaskReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field21Length() int {
	l := 0
	if p.IsSetClearTransactionTaskReq() {
		l += bthrift.Binary.FieldBeginLength("clear_transaction_task_req", thrift.STRUCT, 21)
		l += p.ClearTransactionTaskReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field22Length() int {
	l := 0
	if p.IsSetMoveDirReq() {
		l += bthrift.Binary.FieldBeginLength("move_dir_req", thrift.STRUCT, 22)
		l += p.MoveDirReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field23Length() int {
	l := 0
	if p.IsSetRecoverTabletReq() {
		l += bthrift.Binary.FieldBeginLength("recover_tablet_req", thrift.STRUCT, 23)
		l += p.RecoverTabletReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field24Length() int {
	l := 0
	if p.IsSetAlterTabletReqV2() {
		l += bthrift.Binary.FieldBeginLength("alter_tablet_req_v2", thrift.STRUCT, 24)
		l += p.AlterTabletReqV2.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field25Length() int {
	l := 0
	if p.IsSetRecvTime() {
		l += bthrift.Binary.FieldBeginLength("recv_time", thrift.I64, 25)
		l += bthrift.Binary.I64Length(*p.RecvTime)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field26Length() int {
	l := 0
	if p.IsSetUpdateTabletMetaInfoReq() {
		l += bthrift.Binary.FieldBeginLength("update_tablet_meta_info_req", thrift.STRUCT, 26)
		l += p.UpdateTabletMetaInfoReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field27Length() int {
	l := 0
	if p.IsSetCompactionReq() {
		l += bthrift.Binary.FieldBeginLength("compaction_req", thrift.STRUCT, 27)
		l += p.CompactionReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field28Length() int {
	l := 0
	if p.IsSetStorageMigrationReqV2() {
		l += bthrift.Binary.FieldBeginLength("storage_migration_req_v2", thrift.STRUCT, 28)
		l += p.StorageMigrationReqV2.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field30Length() int {
	l := 0
	if p.IsSetPushCooldownConf() {
		l += bthrift.Binary.FieldBeginLength("push_cooldown_conf", thrift.STRUCT, 30)
		l += p.PushCooldownConf.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field31Length() int {
	l := 0
	if p.IsSetPushStoragePolicyReq() {
		l += bthrift.Binary.FieldBeginLength("push_storage_policy_req", thrift.STRUCT, 31)
		l += p.PushStoragePolicyReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field32Length() int {
	l := 0
	if p.IsSetAlterInvertedIndexReq() {
		l += bthrift.Binary.FieldBeginLength("alter_inverted_index_req", thrift.STRUCT, 32)
		l += p.AlterInvertedIndexReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field33Length() int {
	l := 0
	if p.IsSetGcBinlogReq() {
		l += bthrift.Binary.FieldBeginLength("gc_binlog_req", thrift.STRUCT, 33)
		l += p.GcBinlogReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field34Length() int {
	l := 0
	if p.IsSetCleanTrashReq() {
		l += bthrift.Binary.FieldBeginLength("clean_trash_req", thrift.STRUCT, 34)
		l += p.CleanTrashReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field35Length() int {
	l := 0
	if p.IsSetVisibleVersionReq() {
		l += bthrift.Binary.FieldBeginLength("visible_version_req", thrift.STRUCT, 35)
		l += p.VisibleVersionReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field36Length() int {
	l := 0
	if p.IsSetCleanUdfCacheReq() {
		l += bthrift.Binary.FieldBeginLength("clean_udf_cache_req", thrift.STRUCT, 36)
		l += p.CleanUdfCacheReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentTaskRequest) field1000Length() int {
	l := 0
	if p.IsSetCalcDeleteBitmapReq() {
		l += bthrift.Binary.FieldBeginLength("calc_delete_bitmap_req", thrift.STRUCT, 1000)
		l += p.CalcDeleteBitmapReq.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentResult_) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAgentResult_[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAgentResult_[fieldId]))
}

func (p *TAgentResult_) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := status.NewTStatus()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Status = tmp
	return offset, nil
}

func (p *TAgentResult_) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.SnapshotPath = &v

	}
	return offset, nil
}

func (p *TAgentResult_) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.AllowIncrementalClone = &v

	}
	return offset, nil
}

func (p *TAgentResult_) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SnapshotVersion = v

	}
	return offset, nil
}

// for compatibility
func (p *TAgentResult_) FastWrite(buf []byte) int {
	return 0
}

func (p *TAgentResult_) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TAgentResult")
	if p != nil {
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TAgentResult_) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TAgentResult")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TAgentResult_) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "status", thrift.STRUCT, 1)
	offset += p.Status.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TAgentResult_) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSnapshotPath() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "snapshot_path", thrift.STRING, 2)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.SnapshotPath)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentResult_) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetAllowIncrementalClone() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "allow_incremental_clone", thrift.BOOL, 3)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.AllowIncrementalClone)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentResult_) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSnapshotVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "snapshot_version", thrift.I32, 4)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.SnapshotVersion)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAgentResult_) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("status", thrift.STRUCT, 1)
	l += p.Status.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TAgentResult_) field2Length() int {
	l := 0
	if p.IsSetSnapshotPath() {
		l += bthrift.Binary.FieldBeginLength("snapshot_path", thrift.STRING, 2)
		l += bthrift.Binary.StringLengthNocopy(*p.SnapshotPath)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentResult_) field3Length() int {
	l := 0
	if p.IsSetAllowIncrementalClone() {
		l += bthrift.Binary.FieldBeginLength("allow_incremental_clone", thrift.BOOL, 3)
		l += bthrift.Binary.BoolLength(*p.AllowIncrementalClone)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentResult_) field4Length() int {
	l := 0
	if p.IsSetSnapshotVersion() {
		l += bthrift.Binary.FieldBeginLength("snapshot_version", thrift.I32, 4)
		l += bthrift.Binary.I32Length(p.SnapshotVersion)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTopicItem) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetKey bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetKey = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetKey {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTopicItem[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTopicItem[fieldId]))
}

func (p *TTopicItem) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Key = v

	}
	return offset, nil
}

func (p *TTopicItem) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.IntValue = &v

	}
	return offset, nil
}

func (p *TTopicItem) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadDouble(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.DoubleValue = &v

	}
	return offset, nil
}

func (p *TTopicItem) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.StringValue = &v

	}
	return offset, nil
}

// for compatibility
func (p *TTopicItem) FastWrite(buf []byte) int {
	return 0
}

func (p *TTopicItem) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTopicItem")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTopicItem) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTopicItem")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTopicItem) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "key", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Key)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTopicItem) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIntValue() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "int_value", thrift.I64, 2)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.IntValue)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTopicItem) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDoubleValue() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "double_value", thrift.DOUBLE, 3)
		offset += bthrift.Binary.WriteDouble(buf[offset:], *p.DoubleValue)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTopicItem) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStringValue() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "string_value", thrift.STRING, 4)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.StringValue)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTopicItem) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("key", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.Key)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTopicItem) field2Length() int {
	l := 0
	if p.IsSetIntValue() {
		l += bthrift.Binary.FieldBeginLength("int_value", thrift.I64, 2)
		l += bthrift.Binary.I64Length(*p.IntValue)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTopicItem) field3Length() int {
	l := 0
	if p.IsSetDoubleValue() {
		l += bthrift.Binary.FieldBeginLength("double_value", thrift.DOUBLE, 3)
		l += bthrift.Binary.DoubleLength(*p.DoubleValue)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTopicItem) field4Length() int {
	l := 0
	if p.IsSetStringValue() {
		l += bthrift.Binary.FieldBeginLength("string_value", thrift.STRING, 4)
		l += bthrift.Binary.StringLengthNocopy(*p.StringValue)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTopicUpdate) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTopicUpdate[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTopicUpdate[fieldId]))
}

func (p *TTopicUpdate) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Type = TTopicType(v)

	}
	return offset, nil
}

func (p *TTopicUpdate) FastReadField2(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Updates = make([]*TTopicItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTTopicItem()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Updates = append(p.Updates, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TTopicUpdate) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Deletes = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.Deletes = append(p.Deletes, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TTopicUpdate) FastWrite(buf []byte) int {
	return 0
}

func (p *TTopicUpdate) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTopicUpdate")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTopicUpdate) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTopicUpdate")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTopicUpdate) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "type", thrift.I32, 1)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.Type))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTopicUpdate) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetUpdates() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "updates", thrift.LIST, 2)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.Updates {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTopicUpdate) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDeletes() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "deletes", thrift.LIST, 3)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRING, 0)
		var length int
		for _, v := range p.Deletes {
			length++
			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRING, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTopicUpdate) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("type", thrift.I32, 1)
	l += bthrift.Binary.I32Length(int32(p.Type))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTopicUpdate) field2Length() int {
	l := 0
	if p.IsSetUpdates() {
		l += bthrift.Binary.FieldBeginLength("updates", thrift.LIST, 2)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.Updates))
		for _, v := range p.Updates {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTopicUpdate) field3Length() int {
	l := 0
	if p.IsSetDeletes() {
		l += bthrift.Binary.FieldBeginLength("deletes", thrift.LIST, 3)
		l += bthrift.Binary.ListBeginLength(thrift.STRING, len(p.Deletes))
		for _, v := range p.Deletes {
			l += bthrift.Binary.StringLengthNocopy(v)

		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAgentPublishRequest) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false
	var issetUpdates bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetUpdates = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUpdates {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAgentPublishRequest[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAgentPublishRequest[fieldId]))
}

func (p *TAgentPublishRequest) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ProtocolVersion = TAgentServiceVersion(v)

	}
	return offset, nil
}

func (p *TAgentPublishRequest) FastReadField2(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Updates = make([]*TTopicUpdate, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTTopicUpdate()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Updates = append(p.Updates, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TAgentPublishRequest) FastWrite(buf []byte) int {
	return 0
}

func (p *TAgentPublishRequest) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TAgentPublishRequest")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TAgentPublishRequest) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TAgentPublishRequest")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TAgentPublishRequest) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "protocol_version", thrift.I32, 1)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.ProtocolVersion))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TAgentPublishRequest) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "updates", thrift.LIST, 2)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.Updates {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TAgentPublishRequest) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("protocol_version", thrift.I32, 1)
	l += bthrift.Binary.I32Length(int32(p.ProtocolVersion))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TAgentPublishRequest) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("updates", thrift.LIST, 2)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.Updates))
	for _, v := range p.Updates {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}
