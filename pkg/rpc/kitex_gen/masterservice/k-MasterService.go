// Code generated by Kitex v0.8.0. DO NOT EDIT.

package masterservice

import (
	"bytes"
	"fmt"
	"reflect"
	"strings"

	"github.com/apache/thrift/lib/go/thrift"

	"github.com/cloudwego/kitex/pkg/protocol/bthrift"

	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/agentservice"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/palointernalservice"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/status"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/types"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = thrift.TProtocol(nil)
	_ = bthrift.BinaryWriter(nil)
	_ = agentservice.KitexUnusedProtection
	_ = palointernalservice.KitexUnusedProtection
	_ = status.KitexUnusedProtection
	_ = types.KitexUnusedProtection
)

func (p *TTabletInfo) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false
	var issetVersion bool = false
	var issetVersionHash bool = false
	var issetRowCount bool = false
	var issetDataSize bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetVersionHash = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetRowCount = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetDataSize = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField15(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField16(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField19(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField20(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField21(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 1000:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField1000(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetVersionHash {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetRowCount {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetDataSize {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletInfo[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletInfo[fieldId]))
}

func (p *TTabletInfo) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TabletId = v

	}
	return offset, nil
}

func (p *TTabletInfo) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SchemaHash = v

	}
	return offset, nil
}

func (p *TTabletInfo) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Version = v

	}
	return offset, nil
}

func (p *TTabletInfo) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.VersionHash = v

	}
	return offset, nil
}

func (p *TTabletInfo) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.RowCount = v

	}
	return offset, nil
}

func (p *TTabletInfo) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.DataSize = v

	}
	return offset, nil
}

func (p *TTabletInfo) FastReadField7(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		tmp := types.TStorageMedium(v)
		p.StorageMedium = &tmp

	}
	return offset, nil
}

func (p *TTabletInfo) FastReadField8(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.TransactionIds = make([]types.TTransactionId, 0, size)
	for i := 0; i < size; i++ {
		var _elem types.TTransactionId
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.TransactionIds = append(p.TransactionIds, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TTabletInfo) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TotalVersionCount = &v

	}
	return offset, nil
}

func (p *TTabletInfo) FastReadField10(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.PathHash = &v

	}
	return offset, nil
}

func (p *TTabletInfo) FastReadField11(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.VersionMiss = &v

	}
	return offset, nil
}

func (p *TTabletInfo) FastReadField12(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Used = &v

	}
	return offset, nil
}

func (p *TTabletInfo) FastReadField13(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.PartitionId = &v

	}
	return offset, nil
}

func (p *TTabletInfo) FastReadField14(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.IsInMemory = &v

	}
	return offset, nil
}

func (p *TTabletInfo) FastReadField15(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ReplicaId = &v

	}
	return offset, nil
}

func (p *TTabletInfo) FastReadField16(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.RemoteDataSize = &v

	}
	return offset, nil
}

func (p *TTabletInfo) FastReadField19(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.CooldownTerm = &v

	}
	return offset, nil
}

func (p *TTabletInfo) FastReadField20(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTUniqueId()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.CooldownMetaId = tmp
	return offset, nil
}

func (p *TTabletInfo) FastReadField21(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.VisibleVersionCount = &v

	}
	return offset, nil
}

func (p *TTabletInfo) FastReadField1000(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.IsPersistent = &v

	}
	return offset, nil
}

// for compatibility
func (p *TTabletInfo) FastWrite(buf []byte) int {
	return 0
}

func (p *TTabletInfo) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTabletInfo")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
		offset += p.fastWriteField15(buf[offset:], binaryWriter)
		offset += p.fastWriteField16(buf[offset:], binaryWriter)
		offset += p.fastWriteField19(buf[offset:], binaryWriter)
		offset += p.fastWriteField21(buf[offset:], binaryWriter)
		offset += p.fastWriteField1000(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField20(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTabletInfo) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTabletInfo")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
		l += p.field15Length()
		l += p.field16Length()
		l += p.field19Length()
		l += p.field20Length()
		l += p.field21Length()
		l += p.field1000Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTabletInfo) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TabletId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletInfo) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "schema_hash", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.SchemaHash)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletInfo) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version", thrift.I64, 3)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.Version)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletInfo) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version_hash", thrift.I64, 4)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.VersionHash)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletInfo) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "row_count", thrift.I64, 5)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.RowCount)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletInfo) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "data_size", thrift.I64, 6)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.DataSize)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletInfo) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStorageMedium() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "storage_medium", thrift.I32, 7)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(*p.StorageMedium))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletInfo) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTransactionIds() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "transaction_ids", thrift.LIST, 8)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.I64, 0)
		var length int
		for _, v := range p.TransactionIds {
			length++
			offset += bthrift.Binary.WriteI64(buf[offset:], v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I64, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletInfo) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTotalVersionCount() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "total_version_count", thrift.I64, 9)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TotalVersionCount)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletInfo) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPathHash() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "path_hash", thrift.I64, 10)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.PathHash)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletInfo) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetVersionMiss() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version_miss", thrift.BOOL, 11)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.VersionMiss)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletInfo) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetUsed() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "used", thrift.BOOL, 12)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.Used)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletInfo) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPartitionId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "partition_id", thrift.I64, 13)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.PartitionId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletInfo) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsInMemory() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_in_memory", thrift.BOOL, 14)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.IsInMemory)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletInfo) fastWriteField15(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetReplicaId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "replica_id", thrift.I64, 15)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.ReplicaId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletInfo) fastWriteField16(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRemoteDataSize() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "remote_data_size", thrift.I64, 16)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.RemoteDataSize)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletInfo) fastWriteField19(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCooldownTerm() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "cooldown_term", thrift.I64, 19)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.CooldownTerm)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletInfo) fastWriteField20(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCooldownMetaId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "cooldown_meta_id", thrift.STRUCT, 20)
		offset += p.CooldownMetaId.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletInfo) fastWriteField21(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetVisibleVersionCount() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "visible_version_count", thrift.I64, 21)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.VisibleVersionCount)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletInfo) fastWriteField1000(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsPersistent() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_persistent", thrift.BOOL, 1000)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.IsPersistent)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletInfo) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablet_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.TabletId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletInfo) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("schema_hash", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.SchemaHash)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletInfo) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("version", thrift.I64, 3)
	l += bthrift.Binary.I64Length(p.Version)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletInfo) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("version_hash", thrift.I64, 4)
	l += bthrift.Binary.I64Length(p.VersionHash)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletInfo) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("row_count", thrift.I64, 5)
	l += bthrift.Binary.I64Length(p.RowCount)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletInfo) field6Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("data_size", thrift.I64, 6)
	l += bthrift.Binary.I64Length(p.DataSize)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletInfo) field7Length() int {
	l := 0
	if p.IsSetStorageMedium() {
		l += bthrift.Binary.FieldBeginLength("storage_medium", thrift.I32, 7)
		l += bthrift.Binary.I32Length(int32(*p.StorageMedium))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletInfo) field8Length() int {
	l := 0
	if p.IsSetTransactionIds() {
		l += bthrift.Binary.FieldBeginLength("transaction_ids", thrift.LIST, 8)
		l += bthrift.Binary.ListBeginLength(thrift.I64, len(p.TransactionIds))
		var tmpV types.TTransactionId
		l += bthrift.Binary.I64Length(int64(tmpV)) * len(p.TransactionIds)
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletInfo) field9Length() int {
	l := 0
	if p.IsSetTotalVersionCount() {
		l += bthrift.Binary.FieldBeginLength("total_version_count", thrift.I64, 9)
		l += bthrift.Binary.I64Length(*p.TotalVersionCount)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletInfo) field10Length() int {
	l := 0
	if p.IsSetPathHash() {
		l += bthrift.Binary.FieldBeginLength("path_hash", thrift.I64, 10)
		l += bthrift.Binary.I64Length(*p.PathHash)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletInfo) field11Length() int {
	l := 0
	if p.IsSetVersionMiss() {
		l += bthrift.Binary.FieldBeginLength("version_miss", thrift.BOOL, 11)
		l += bthrift.Binary.BoolLength(*p.VersionMiss)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletInfo) field12Length() int {
	l := 0
	if p.IsSetUsed() {
		l += bthrift.Binary.FieldBeginLength("used", thrift.BOOL, 12)
		l += bthrift.Binary.BoolLength(*p.Used)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletInfo) field13Length() int {
	l := 0
	if p.IsSetPartitionId() {
		l += bthrift.Binary.FieldBeginLength("partition_id", thrift.I64, 13)
		l += bthrift.Binary.I64Length(*p.PartitionId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletInfo) field14Length() int {
	l := 0
	if p.IsSetIsInMemory() {
		l += bthrift.Binary.FieldBeginLength("is_in_memory", thrift.BOOL, 14)
		l += bthrift.Binary.BoolLength(*p.IsInMemory)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletInfo) field15Length() int {
	l := 0
	if p.IsSetReplicaId() {
		l += bthrift.Binary.FieldBeginLength("replica_id", thrift.I64, 15)
		l += bthrift.Binary.I64Length(*p.ReplicaId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletInfo) field16Length() int {
	l := 0
	if p.IsSetRemoteDataSize() {
		l += bthrift.Binary.FieldBeginLength("remote_data_size", thrift.I64, 16)
		l += bthrift.Binary.I64Length(*p.RemoteDataSize)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletInfo) field19Length() int {
	l := 0
	if p.IsSetCooldownTerm() {
		l += bthrift.Binary.FieldBeginLength("cooldown_term", thrift.I64, 19)
		l += bthrift.Binary.I64Length(*p.CooldownTerm)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletInfo) field20Length() int {
	l := 0
	if p.IsSetCooldownMetaId() {
		l += bthrift.Binary.FieldBeginLength("cooldown_meta_id", thrift.STRUCT, 20)
		l += p.CooldownMetaId.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletInfo) field21Length() int {
	l := 0
	if p.IsSetVisibleVersionCount() {
		l += bthrift.Binary.FieldBeginLength("visible_version_count", thrift.I64, 21)
		l += bthrift.Binary.I64Length(*p.VisibleVersionCount)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletInfo) field1000Length() int {
	l := 0
	if p.IsSetIsPersistent() {
		l += bthrift.Binary.FieldBeginLength("is_persistent", thrift.BOOL, 1000)
		l += bthrift.Binary.BoolLength(*p.IsPersistent)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFinishTaskRequest) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBackend bool = false
	var issetTaskType bool = false
	var issetSignature bool = false
	var issetTaskStatus bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetBackend = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTaskType = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSignature = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTaskStatus = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField15(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField16(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField17(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField18(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField19(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField20(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetBackend {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTaskType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSignature {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetTaskStatus {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFinishTaskRequest[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFinishTaskRequest[fieldId]))
}

func (p *TFinishTaskRequest) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTBackend()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Backend = tmp
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TaskType = types.TTaskType(v)

	}
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Signature = v

	}
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField4(buf []byte) (int, error) {
	offset := 0

	tmp := status.NewTStatus()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.TaskStatus = tmp
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ReportVersion = &v

	}
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField6(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.FinishTabletInfos = make([]*TTabletInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTTabletInfo()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.FinishTabletInfos = append(p.FinishTabletInfos, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField7(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TabletChecksum = &v

	}
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.RequestVersion = &v

	}
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.RequestVersionHash = &v

	}
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField10(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.SnapshotPath = &v

	}
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField11(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.ErrorTabletIds = make([]types.TTabletId, 0, size)
	for i := 0; i < size; i++ {
		var _elem types.TTabletId
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.ErrorTabletIds = append(p.ErrorTabletIds, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField12(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.SnapshotFiles = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.SnapshotFiles = append(p.SnapshotFiles, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField13(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.TabletFiles = make(map[types.TTabletId][]string, size)
	for i := 0; i < size; i++ {
		var _key types.TTabletId
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
		offset += l
		if err != nil {
			return offset, err
		}
		_val := make([]string, 0, size)
		for i := 0; i < size; i++ {
			var _elem string
			if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
				return offset, err
			} else {
				offset += l

				_elem = v

			}

			_val = append(_val, _elem)
		}
		if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.TabletFiles[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField14(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.DownloadedTabletIds = make([]types.TTabletId, 0, size)
	for i := 0; i < size; i++ {
		var _elem types.TTabletId
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.DownloadedTabletIds = append(p.DownloadedTabletIds, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField15(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.CopySize = &v

	}
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField16(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.CopyTimeMs = &v

	}
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField17(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.SuccTablets = make(map[types.TTabletId]types.TVersion, size)
	for i := 0; i < size; i++ {
		var _key types.TTabletId
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val types.TVersion
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.SuccTablets[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField18(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.TableIdToDeltaNumRows = make(map[int64]int64, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val int64
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.TableIdToDeltaNumRows[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField19(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.TableIdToTabletIdToDeltaNumRows = make(map[int64]map[int64]int64, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
		offset += l
		if err != nil {
			return offset, err
		}
		_val := make(map[int64]int64, size)
		for i := 0; i < size; i++ {
			var _key1 int64
			if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
				return offset, err
			} else {
				offset += l

				_key1 = v

			}

			var _val1 int64
			if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
				return offset, err
			} else {
				offset += l

				_val1 = v

			}

			_val[_key1] = _val1
		}
		if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.TableIdToTabletIdToDeltaNumRows[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TFinishTaskRequest) FastReadField20(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.RespPartitions = make([]*agentservice.TCalcDeleteBitmapPartitionInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := agentservice.NewTCalcDeleteBitmapPartitionInfo()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.RespPartitions = append(p.RespPartitions, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TFinishTaskRequest) FastWrite(buf []byte) int {
	return 0
}

func (p *TFinishTaskRequest) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TFinishTaskRequest")
	if p != nil {
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField15(buf[offset:], binaryWriter)
		offset += p.fastWriteField16(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
		offset += p.fastWriteField17(buf[offset:], binaryWriter)
		offset += p.fastWriteField18(buf[offset:], binaryWriter)
		offset += p.fastWriteField19(buf[offset:], binaryWriter)
		offset += p.fastWriteField20(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TFinishTaskRequest) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TFinishTaskRequest")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
		l += p.field15Length()
		l += p.field16Length()
		l += p.field17Length()
		l += p.field18Length()
		l += p.field19Length()
		l += p.field20Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TFinishTaskRequest) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "backend", thrift.STRUCT, 1)
	offset += p.Backend.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFinishTaskRequest) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "task_type", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.TaskType))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFinishTaskRequest) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "signature", thrift.I64, 3)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.Signature)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFinishTaskRequest) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "task_status", thrift.STRUCT, 4)
	offset += p.TaskStatus.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFinishTaskRequest) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetReportVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "report_version", thrift.I64, 5)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.ReportVersion)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFinishTaskRequest) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFinishTabletInfos() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "finish_tablet_infos", thrift.LIST, 6)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.FinishTabletInfos {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFinishTaskRequest) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTabletChecksum() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_checksum", thrift.I64, 7)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TabletChecksum)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFinishTaskRequest) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRequestVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "request_version", thrift.I64, 8)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.RequestVersion)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFinishTaskRequest) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRequestVersionHash() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "request_version_hash", thrift.I64, 9)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.RequestVersionHash)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFinishTaskRequest) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSnapshotPath() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "snapshot_path", thrift.STRING, 10)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.SnapshotPath)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFinishTaskRequest) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetErrorTabletIds() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "error_tablet_ids", thrift.LIST, 11)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.I64, 0)
		var length int
		for _, v := range p.ErrorTabletIds {
			length++
			offset += bthrift.Binary.WriteI64(buf[offset:], v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I64, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFinishTaskRequest) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSnapshotFiles() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "snapshot_files", thrift.LIST, 12)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRING, 0)
		var length int
		for _, v := range p.SnapshotFiles {
			length++
			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRING, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFinishTaskRequest) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTabletFiles() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_files", thrift.MAP, 13)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I64, thrift.LIST, 0)
		var length int
		for k, v := range p.TabletFiles {
			length++

			offset += bthrift.Binary.WriteI64(buf[offset:], k)

			listBeginOffset := offset
			offset += bthrift.Binary.ListBeginLength(thrift.STRING, 0)
			var length int
			for _, v := range v {
				length++
				offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

			}
			bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRING, length)
			offset += bthrift.Binary.WriteListEnd(buf[offset:])
		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I64, thrift.LIST, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFinishTaskRequest) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDownloadedTabletIds() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "downloaded_tablet_ids", thrift.LIST, 14)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.I64, 0)
		var length int
		for _, v := range p.DownloadedTabletIds {
			length++
			offset += bthrift.Binary.WriteI64(buf[offset:], v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I64, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFinishTaskRequest) fastWriteField15(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCopySize() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "copy_size", thrift.I64, 15)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.CopySize)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFinishTaskRequest) fastWriteField16(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCopyTimeMs() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "copy_time_ms", thrift.I64, 16)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.CopyTimeMs)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFinishTaskRequest) fastWriteField17(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSuccTablets() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "succ_tablets", thrift.MAP, 17)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I64, thrift.I64, 0)
		var length int
		for k, v := range p.SuccTablets {
			length++

			offset += bthrift.Binary.WriteI64(buf[offset:], k)

			offset += bthrift.Binary.WriteI64(buf[offset:], v)

		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I64, thrift.I64, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFinishTaskRequest) fastWriteField18(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTableIdToDeltaNumRows() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "table_id_to_delta_num_rows", thrift.MAP, 18)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I64, thrift.I64, 0)
		var length int
		for k, v := range p.TableIdToDeltaNumRows {
			length++

			offset += bthrift.Binary.WriteI64(buf[offset:], k)

			offset += bthrift.Binary.WriteI64(buf[offset:], v)

		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I64, thrift.I64, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFinishTaskRequest) fastWriteField19(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTableIdToTabletIdToDeltaNumRows() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "table_id_to_tablet_id_to_delta_num_rows", thrift.MAP, 19)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I64, thrift.MAP, 0)
		var length int
		for k, v := range p.TableIdToTabletIdToDeltaNumRows {
			length++

			offset += bthrift.Binary.WriteI64(buf[offset:], k)

			mapBeginOffset := offset
			offset += bthrift.Binary.MapBeginLength(thrift.I64, thrift.I64, 0)
			var length int
			for k, v := range v {
				length++

				offset += bthrift.Binary.WriteI64(buf[offset:], k)

				offset += bthrift.Binary.WriteI64(buf[offset:], v)

			}
			bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I64, thrift.I64, length)
			offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I64, thrift.MAP, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFinishTaskRequest) fastWriteField20(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRespPartitions() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "resp_partitions", thrift.LIST, 20)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.RespPartitions {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFinishTaskRequest) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("backend", thrift.STRUCT, 1)
	l += p.Backend.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFinishTaskRequest) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("task_type", thrift.I32, 2)
	l += bthrift.Binary.I32Length(int32(p.TaskType))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFinishTaskRequest) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("signature", thrift.I64, 3)
	l += bthrift.Binary.I64Length(p.Signature)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFinishTaskRequest) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("task_status", thrift.STRUCT, 4)
	l += p.TaskStatus.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFinishTaskRequest) field5Length() int {
	l := 0
	if p.IsSetReportVersion() {
		l += bthrift.Binary.FieldBeginLength("report_version", thrift.I64, 5)
		l += bthrift.Binary.I64Length(*p.ReportVersion)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFinishTaskRequest) field6Length() int {
	l := 0
	if p.IsSetFinishTabletInfos() {
		l += bthrift.Binary.FieldBeginLength("finish_tablet_infos", thrift.LIST, 6)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.FinishTabletInfos))
		for _, v := range p.FinishTabletInfos {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFinishTaskRequest) field7Length() int {
	l := 0
	if p.IsSetTabletChecksum() {
		l += bthrift.Binary.FieldBeginLength("tablet_checksum", thrift.I64, 7)
		l += bthrift.Binary.I64Length(*p.TabletChecksum)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFinishTaskRequest) field8Length() int {
	l := 0
	if p.IsSetRequestVersion() {
		l += bthrift.Binary.FieldBeginLength("request_version", thrift.I64, 8)
		l += bthrift.Binary.I64Length(*p.RequestVersion)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFinishTaskRequest) field9Length() int {
	l := 0
	if p.IsSetRequestVersionHash() {
		l += bthrift.Binary.FieldBeginLength("request_version_hash", thrift.I64, 9)
		l += bthrift.Binary.I64Length(*p.RequestVersionHash)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFinishTaskRequest) field10Length() int {
	l := 0
	if p.IsSetSnapshotPath() {
		l += bthrift.Binary.FieldBeginLength("snapshot_path", thrift.STRING, 10)
		l += bthrift.Binary.StringLengthNocopy(*p.SnapshotPath)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFinishTaskRequest) field11Length() int {
	l := 0
	if p.IsSetErrorTabletIds() {
		l += bthrift.Binary.FieldBeginLength("error_tablet_ids", thrift.LIST, 11)
		l += bthrift.Binary.ListBeginLength(thrift.I64, len(p.ErrorTabletIds))
		var tmpV types.TTabletId
		l += bthrift.Binary.I64Length(int64(tmpV)) * len(p.ErrorTabletIds)
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFinishTaskRequest) field12Length() int {
	l := 0
	if p.IsSetSnapshotFiles() {
		l += bthrift.Binary.FieldBeginLength("snapshot_files", thrift.LIST, 12)
		l += bthrift.Binary.ListBeginLength(thrift.STRING, len(p.SnapshotFiles))
		for _, v := range p.SnapshotFiles {
			l += bthrift.Binary.StringLengthNocopy(v)

		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFinishTaskRequest) field13Length() int {
	l := 0
	if p.IsSetTabletFiles() {
		l += bthrift.Binary.FieldBeginLength("tablet_files", thrift.MAP, 13)
		l += bthrift.Binary.MapBeginLength(thrift.I64, thrift.LIST, len(p.TabletFiles))
		for k, v := range p.TabletFiles {

			l += bthrift.Binary.I64Length(k)

			l += bthrift.Binary.ListBeginLength(thrift.STRING, len(v))
			for _, v := range v {
				l += bthrift.Binary.StringLengthNocopy(v)

			}
			l += bthrift.Binary.ListEndLength()
		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFinishTaskRequest) field14Length() int {
	l := 0
	if p.IsSetDownloadedTabletIds() {
		l += bthrift.Binary.FieldBeginLength("downloaded_tablet_ids", thrift.LIST, 14)
		l += bthrift.Binary.ListBeginLength(thrift.I64, len(p.DownloadedTabletIds))
		var tmpV types.TTabletId
		l += bthrift.Binary.I64Length(int64(tmpV)) * len(p.DownloadedTabletIds)
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFinishTaskRequest) field15Length() int {
	l := 0
	if p.IsSetCopySize() {
		l += bthrift.Binary.FieldBeginLength("copy_size", thrift.I64, 15)
		l += bthrift.Binary.I64Length(*p.CopySize)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFinishTaskRequest) field16Length() int {
	l := 0
	if p.IsSetCopyTimeMs() {
		l += bthrift.Binary.FieldBeginLength("copy_time_ms", thrift.I64, 16)
		l += bthrift.Binary.I64Length(*p.CopyTimeMs)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFinishTaskRequest) field17Length() int {
	l := 0
	if p.IsSetSuccTablets() {
		l += bthrift.Binary.FieldBeginLength("succ_tablets", thrift.MAP, 17)
		l += bthrift.Binary.MapBeginLength(thrift.I64, thrift.I64, len(p.SuccTablets))
		var tmpK types.TTabletId
		var tmpV types.TVersion
		l += (bthrift.Binary.I64Length(int64(tmpK)) + bthrift.Binary.I64Length(int64(tmpV))) * len(p.SuccTablets)
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFinishTaskRequest) field18Length() int {
	l := 0
	if p.IsSetTableIdToDeltaNumRows() {
		l += bthrift.Binary.FieldBeginLength("table_id_to_delta_num_rows", thrift.MAP, 18)
		l += bthrift.Binary.MapBeginLength(thrift.I64, thrift.I64, len(p.TableIdToDeltaNumRows))
		var tmpK int64
		var tmpV int64
		l += (bthrift.Binary.I64Length(int64(tmpK)) + bthrift.Binary.I64Length(int64(tmpV))) * len(p.TableIdToDeltaNumRows)
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFinishTaskRequest) field19Length() int {
	l := 0
	if p.IsSetTableIdToTabletIdToDeltaNumRows() {
		l += bthrift.Binary.FieldBeginLength("table_id_to_tablet_id_to_delta_num_rows", thrift.MAP, 19)
		l += bthrift.Binary.MapBeginLength(thrift.I64, thrift.MAP, len(p.TableIdToTabletIdToDeltaNumRows))
		for k, v := range p.TableIdToTabletIdToDeltaNumRows {

			l += bthrift.Binary.I64Length(k)

			l += bthrift.Binary.MapBeginLength(thrift.I64, thrift.I64, len(v))
			var tmpK int64
			var tmpV int64
			l += (bthrift.Binary.I64Length(int64(tmpK)) + bthrift.Binary.I64Length(int64(tmpV))) * len(v)
			l += bthrift.Binary.MapEndLength()
		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFinishTaskRequest) field20Length() int {
	l := 0
	if p.IsSetRespPartitions() {
		l += bthrift.Binary.FieldBeginLength("resp_partitions", thrift.LIST, 20)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.RespPartitions))
		for _, v := range p.RespPartitions {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTablet) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletInfos bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletInfos = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTabletInfos {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTablet[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTablet[fieldId]))
}

func (p *TTablet) FastReadField1(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.TabletInfos = make([]*TTabletInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTTabletInfo()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.TabletInfos = append(p.TabletInfos, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TTablet) FastWrite(buf []byte) int {
	return 0
}

func (p *TTablet) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTablet")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTablet) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTablet")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTablet) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_infos", thrift.LIST, 1)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.TabletInfos {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTablet) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablet_infos", thrift.LIST, 1)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.TabletInfos))
	for _, v := range p.TabletInfos {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TDisk) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRootPath bool = false
	var issetDiskTotalCapacity bool = false
	var issetDataUsedCapacity bool = false
	var issetUsed bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetRootPath = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetDiskTotalCapacity = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetDataUsedCapacity = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetUsed = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetRootPath {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetDiskTotalCapacity {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetDataUsedCapacity {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetUsed {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDisk[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TDisk[fieldId]))
}

func (p *TDisk) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.RootPath = v

	}
	return offset, nil
}

func (p *TDisk) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.DiskTotalCapacity = v

	}
	return offset, nil
}

func (p *TDisk) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.DataUsedCapacity = v

	}
	return offset, nil
}

func (p *TDisk) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Used = v

	}
	return offset, nil
}

func (p *TDisk) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.DiskAvailableCapacity = &v

	}
	return offset, nil
}

func (p *TDisk) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.PathHash = &v

	}
	return offset, nil
}

func (p *TDisk) FastReadField7(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		tmp := types.TStorageMedium(v)
		p.StorageMedium = &tmp

	}
	return offset, nil
}

func (p *TDisk) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.RemoteUsedCapacity = &v

	}
	return offset, nil
}

func (p *TDisk) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TrashUsedCapacity = &v

	}
	return offset, nil
}

// for compatibility
func (p *TDisk) FastWrite(buf []byte) int {
	return 0
}

func (p *TDisk) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TDisk")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TDisk) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TDisk")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TDisk) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "root_path", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.RootPath)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TDisk) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "disk_total_capacity", thrift.I64, 2)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.DiskTotalCapacity)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TDisk) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "data_used_capacity", thrift.I64, 3)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.DataUsedCapacity)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TDisk) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "used", thrift.BOOL, 4)
	offset += bthrift.Binary.WriteBool(buf[offset:], p.Used)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TDisk) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDiskAvailableCapacity() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "disk_available_capacity", thrift.I64, 5)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.DiskAvailableCapacity)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TDisk) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPathHash() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "path_hash", thrift.I64, 6)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.PathHash)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TDisk) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStorageMedium() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "storage_medium", thrift.I32, 7)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(*p.StorageMedium))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TDisk) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRemoteUsedCapacity() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "remote_used_capacity", thrift.I64, 8)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.RemoteUsedCapacity)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TDisk) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTrashUsedCapacity() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "trash_used_capacity", thrift.I64, 9)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TrashUsedCapacity)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TDisk) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("root_path", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.RootPath)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TDisk) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("disk_total_capacity", thrift.I64, 2)
	l += bthrift.Binary.I64Length(p.DiskTotalCapacity)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TDisk) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("data_used_capacity", thrift.I64, 3)
	l += bthrift.Binary.I64Length(p.DataUsedCapacity)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TDisk) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("used", thrift.BOOL, 4)
	l += bthrift.Binary.BoolLength(p.Used)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TDisk) field5Length() int {
	l := 0
	if p.IsSetDiskAvailableCapacity() {
		l += bthrift.Binary.FieldBeginLength("disk_available_capacity", thrift.I64, 5)
		l += bthrift.Binary.I64Length(*p.DiskAvailableCapacity)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TDisk) field6Length() int {
	l := 0
	if p.IsSetPathHash() {
		l += bthrift.Binary.FieldBeginLength("path_hash", thrift.I64, 6)
		l += bthrift.Binary.I64Length(*p.PathHash)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TDisk) field7Length() int {
	l := 0
	if p.IsSetStorageMedium() {
		l += bthrift.Binary.FieldBeginLength("storage_medium", thrift.I32, 7)
		l += bthrift.Binary.I32Length(int32(*p.StorageMedium))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TDisk) field8Length() int {
	l := 0
	if p.IsSetRemoteUsedCapacity() {
		l += bthrift.Binary.FieldBeginLength("remote_used_capacity", thrift.I64, 8)
		l += bthrift.Binary.I64Length(*p.RemoteUsedCapacity)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TDisk) field9Length() int {
	l := 0
	if p.IsSetTrashUsedCapacity() {
		l += bthrift.Binary.FieldBeginLength("trash_used_capacity", thrift.I64, 9)
		l += bthrift.Binary.I64Length(*p.TrashUsedCapacity)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPluginInfo) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPluginName bool = false
	var issetType bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPluginName = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetPluginName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPluginInfo[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPluginInfo[fieldId]))
}

func (p *TPluginInfo) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.PluginName = v

	}
	return offset, nil
}

func (p *TPluginInfo) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Type = v

	}
	return offset, nil
}

// for compatibility
func (p *TPluginInfo) FastWrite(buf []byte) int {
	return 0
}

func (p *TPluginInfo) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TPluginInfo")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TPluginInfo) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TPluginInfo")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TPluginInfo) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "plugin_name", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.PluginName)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPluginInfo) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "type", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.Type)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPluginInfo) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("plugin_name", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.PluginName)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPluginInfo) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("type", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.Type)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TReportRequest) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBackend bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetBackend = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetBackend {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TReportRequest[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TReportRequest[fieldId]))
}

func (p *TReportRequest) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTBackend()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Backend = tmp
	return offset, nil
}

func (p *TReportRequest) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ReportVersion = &v

	}
	return offset, nil
}

func (p *TReportRequest) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Tasks = make(map[types.TTaskType][]int64, size)
	for i := 0; i < size; i++ {
		var _key types.TTaskType
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = types.TTaskType(v)

		}

		_, size, l, err := bthrift.Binary.ReadSetBegin(buf[offset:])
		offset += l
		if err != nil {
			return offset, err
		}
		_val := make([]int64, 0, size)
		for i := 0; i < size; i++ {
			var _elem int64
			if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
				return offset, err
			} else {
				offset += l

				_elem = v

			}

			_val = append(_val, _elem)
		}
		if l, err := bthrift.Binary.ReadSetEnd(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Tasks[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TReportRequest) FastReadField4(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Tablets = make(map[types.TTabletId]*TTablet, size)
	for i := 0; i < size; i++ {
		var _key types.TTabletId
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}
		_val := NewTTablet()
		if l, err := _val.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Tablets[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TReportRequest) FastReadField5(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Disks = make(map[string]*TDisk, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}
		_val := NewTDisk()
		if l, err := _val.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Disks[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TReportRequest) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ForceRecovery = &v

	}
	return offset, nil
}

func (p *TReportRequest) FastReadField7(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.TabletList = make([]*TTablet, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTTablet()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.TabletList = append(p.TabletList, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TReportRequest) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TabletMaxCompactionScore = &v

	}
	return offset, nil
}

func (p *TReportRequest) FastReadField9(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.StoragePolicy = make([]*agentservice.TStoragePolicy, 0, size)
	for i := 0; i < size; i++ {
		_elem := agentservice.NewTStoragePolicy()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.StoragePolicy = append(p.StoragePolicy, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TReportRequest) FastReadField10(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Resource = make([]*agentservice.TStorageResource, 0, size)
	for i := 0; i < size; i++ {
		_elem := agentservice.NewTStorageResource()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Resource = append(p.Resource, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TReportRequest) FastReadField11(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.NumCores = v

	}
	return offset, nil
}

func (p *TReportRequest) FastReadField12(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.PipelineExecutorSize = v

	}
	return offset, nil
}

func (p *TReportRequest) FastReadField13(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.PartitionsVersion = make(map[types.TPartitionId]types.TVersion, size)
	for i := 0; i < size; i++ {
		var _key types.TPartitionId
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val types.TVersion
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.PartitionsVersion[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TReportRequest) FastWrite(buf []byte) int {
	return 0
}

func (p *TReportRequest) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TReportRequest")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TReportRequest) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TReportRequest")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TReportRequest) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "backend", thrift.STRUCT, 1)
	offset += p.Backend.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TReportRequest) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetReportVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "report_version", thrift.I64, 2)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.ReportVersion)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TReportRequest) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTasks() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tasks", thrift.MAP, 3)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.SET, 0)
		var length int
		for k, v := range p.Tasks {
			length++

			offset += bthrift.Binary.WriteI32(buf[offset:], int32(k))

			setBeginOffset := offset
			offset += bthrift.Binary.SetBeginLength(thrift.I64, 0)

			for i := 0; i < len(v); i++ {
				for j := i + 1; j < len(v); j++ {
					if func(tgt, src int64) bool {
						if tgt != src {
							return false
						}
						return true
					}(v[i], v[j]) {
						panic(fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
					}
				}
			}
			var length int
			for _, v := range v {
				length++
				offset += bthrift.Binary.WriteI64(buf[offset:], v)

			}
			bthrift.Binary.WriteSetBegin(buf[setBeginOffset:], thrift.I64, length)
			offset += bthrift.Binary.WriteSetEnd(buf[offset:])
		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.SET, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TReportRequest) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTablets() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablets", thrift.MAP, 4)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I64, thrift.STRUCT, 0)
		var length int
		for k, v := range p.Tablets {
			length++

			offset += bthrift.Binary.WriteI64(buf[offset:], k)

			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I64, thrift.STRUCT, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TReportRequest) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDisks() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "disks", thrift.MAP, 5)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, 0)
		var length int
		for k, v := range p.Disks {
			length++

			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)

			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRUCT, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TReportRequest) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetForceRecovery() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "force_recovery", thrift.BOOL, 6)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.ForceRecovery)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TReportRequest) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTabletList() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_list", thrift.LIST, 7)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.TabletList {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TReportRequest) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTabletMaxCompactionScore() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_max_compaction_score", thrift.I64, 8)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TabletMaxCompactionScore)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TReportRequest) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStoragePolicy() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "storage_policy", thrift.LIST, 9)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.StoragePolicy {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TReportRequest) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetResource() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "resource", thrift.LIST, 10)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.Resource {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TReportRequest) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "num_cores", thrift.I32, 11)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.NumCores)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TReportRequest) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "pipeline_executor_size", thrift.I32, 12)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.PipelineExecutorSize)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TReportRequest) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPartitionsVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "partitions_version", thrift.MAP, 13)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I64, thrift.I64, 0)
		var length int
		for k, v := range p.PartitionsVersion {
			length++

			offset += bthrift.Binary.WriteI64(buf[offset:], k)

			offset += bthrift.Binary.WriteI64(buf[offset:], v)

		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I64, thrift.I64, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TReportRequest) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("backend", thrift.STRUCT, 1)
	l += p.Backend.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TReportRequest) field2Length() int {
	l := 0
	if p.IsSetReportVersion() {
		l += bthrift.Binary.FieldBeginLength("report_version", thrift.I64, 2)
		l += bthrift.Binary.I64Length(*p.ReportVersion)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TReportRequest) field3Length() int {
	l := 0
	if p.IsSetTasks() {
		l += bthrift.Binary.FieldBeginLength("tasks", thrift.MAP, 3)
		l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.SET, len(p.Tasks))
		for k, v := range p.Tasks {

			l += bthrift.Binary.I32Length(int32(k))

			l += bthrift.Binary.SetBeginLength(thrift.I64, len(v))

			for i := 0; i < len(v); i++ {
				for j := i + 1; j < len(v); j++ {
					if func(tgt, src int64) bool {
						if tgt != src {
							return false
						}
						return true
					}(v[i], v[j]) {
						panic(fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
					}
				}
			}
			var tmpV int64
			l += bthrift.Binary.I64Length(int64(tmpV)) * len(v)
			l += bthrift.Binary.SetEndLength()
		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TReportRequest) field4Length() int {
	l := 0
	if p.IsSetTablets() {
		l += bthrift.Binary.FieldBeginLength("tablets", thrift.MAP, 4)
		l += bthrift.Binary.MapBeginLength(thrift.I64, thrift.STRUCT, len(p.Tablets))
		for k, v := range p.Tablets {

			l += bthrift.Binary.I64Length(k)

			l += v.BLength()
		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TReportRequest) field5Length() int {
	l := 0
	if p.IsSetDisks() {
		l += bthrift.Binary.FieldBeginLength("disks", thrift.MAP, 5)
		l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, len(p.Disks))
		for k, v := range p.Disks {

			l += bthrift.Binary.StringLengthNocopy(k)

			l += v.BLength()
		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TReportRequest) field6Length() int {
	l := 0
	if p.IsSetForceRecovery() {
		l += bthrift.Binary.FieldBeginLength("force_recovery", thrift.BOOL, 6)
		l += bthrift.Binary.BoolLength(*p.ForceRecovery)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TReportRequest) field7Length() int {
	l := 0
	if p.IsSetTabletList() {
		l += bthrift.Binary.FieldBeginLength("tablet_list", thrift.LIST, 7)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.TabletList))
		for _, v := range p.TabletList {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TReportRequest) field8Length() int {
	l := 0
	if p.IsSetTabletMaxCompactionScore() {
		l += bthrift.Binary.FieldBeginLength("tablet_max_compaction_score", thrift.I64, 8)
		l += bthrift.Binary.I64Length(*p.TabletMaxCompactionScore)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TReportRequest) field9Length() int {
	l := 0
	if p.IsSetStoragePolicy() {
		l += bthrift.Binary.FieldBeginLength("storage_policy", thrift.LIST, 9)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.StoragePolicy))
		for _, v := range p.StoragePolicy {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TReportRequest) field10Length() int {
	l := 0
	if p.IsSetResource() {
		l += bthrift.Binary.FieldBeginLength("resource", thrift.LIST, 10)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.Resource))
		for _, v := range p.Resource {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TReportRequest) field11Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("num_cores", thrift.I32, 11)
	l += bthrift.Binary.I32Length(p.NumCores)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TReportRequest) field12Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("pipeline_executor_size", thrift.I32, 12)
	l += bthrift.Binary.I32Length(p.PipelineExecutorSize)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TReportRequest) field13Length() int {
	l := 0
	if p.IsSetPartitionsVersion() {
		l += bthrift.Binary.FieldBeginLength("partitions_version", thrift.MAP, 13)
		l += bthrift.Binary.MapBeginLength(thrift.I64, thrift.I64, len(p.PartitionsVersion))
		var tmpK types.TPartitionId
		var tmpV types.TVersion
		l += (bthrift.Binary.I64Length(int64(tmpK)) + bthrift.Binary.I64Length(int64(tmpV))) * len(p.PartitionsVersion)
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TMasterResult_) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMasterResult_[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TMasterResult_[fieldId]))
}

func (p *TMasterResult_) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := status.NewTStatus()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Status = tmp
	return offset, nil
}

// for compatibility
func (p *TMasterResult_) FastWrite(buf []byte) int {
	return 0
}

func (p *TMasterResult_) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TMasterResult")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TMasterResult_) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TMasterResult")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TMasterResult_) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "status", thrift.STRUCT, 1)
	offset += p.Status.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TMasterResult_) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("status", thrift.STRUCT, 1)
	l += p.Status.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TResourceGroup) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetResourceByType bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetResourceByType = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetResourceByType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TResourceGroup[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TResourceGroup[fieldId]))
}

func (p *TResourceGroup) FastReadField1(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.ResourceByType = make(map[TResourceType]int32, size)
	for i := 0; i < size; i++ {
		var _key TResourceType
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = TResourceType(v)

		}

		var _val int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.ResourceByType[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TResourceGroup) FastWrite(buf []byte) int {
	return 0
}

func (p *TResourceGroup) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TResourceGroup")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TResourceGroup) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TResourceGroup")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TResourceGroup) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "resourceByType", thrift.MAP, 1)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I32, 0)
	var length int
	for k, v := range p.ResourceByType {
		length++

		offset += bthrift.Binary.WriteI32(buf[offset:], int32(k))

		offset += bthrift.Binary.WriteI32(buf[offset:], v)

	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.I32, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TResourceGroup) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("resourceByType", thrift.MAP, 1)
	l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I32, len(p.ResourceByType))
	for k, v := range p.ResourceByType {

		l += bthrift.Binary.I32Length(int32(k))

		l += bthrift.Binary.I32Length(v)

	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TUserResource) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetResource bool = false
	var issetShareByGroup bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetResource = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetShareByGroup = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetResource {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetShareByGroup {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TUserResource[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TUserResource[fieldId]))
}

func (p *TUserResource) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := NewTResourceGroup()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Resource = tmp
	return offset, nil
}

func (p *TUserResource) FastReadField2(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.ShareByGroup = make(map[string]int32, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.ShareByGroup[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TUserResource) FastWrite(buf []byte) int {
	return 0
}

func (p *TUserResource) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TUserResource")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TUserResource) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TUserResource")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TUserResource) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "resource", thrift.STRUCT, 1)
	offset += p.Resource.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TUserResource) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "shareByGroup", thrift.MAP, 2)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.I32, 0)
	var length int
	for k, v := range p.ShareByGroup {
		length++

		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)

		offset += bthrift.Binary.WriteI32(buf[offset:], v)

	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.I32, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TUserResource) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("resource", thrift.STRUCT, 1)
	l += p.Resource.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TUserResource) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("shareByGroup", thrift.MAP, 2)
	l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.I32, len(p.ShareByGroup))
	for k, v := range p.ShareByGroup {

		l += bthrift.Binary.StringLengthNocopy(k)

		l += bthrift.Binary.I32Length(v)

	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFetchResourceResult_) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false
	var issetResourceVersion bool = false
	var issetResourceByUser bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetResourceVersion = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetResourceByUser = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetResourceVersion {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetResourceByUser {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFetchResourceResult_[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFetchResourceResult_[fieldId]))
}

func (p *TFetchResourceResult_) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ProtocolVersion = agentservice.TAgentServiceVersion(v)

	}
	return offset, nil
}

func (p *TFetchResourceResult_) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ResourceVersion = v

	}
	return offset, nil
}

func (p *TFetchResourceResult_) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.ResourceByUser = make(map[string]*TUserResource, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}
		_val := NewTUserResource()
		if l, err := _val.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.ResourceByUser[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TFetchResourceResult_) FastWrite(buf []byte) int {
	return 0
}

func (p *TFetchResourceResult_) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TFetchResourceResult")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TFetchResourceResult_) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TFetchResourceResult")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TFetchResourceResult_) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "protocolVersion", thrift.I32, 1)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.ProtocolVersion))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFetchResourceResult_) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "resourceVersion", thrift.I64, 2)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.ResourceVersion)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFetchResourceResult_) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "resourceByUser", thrift.MAP, 3)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, 0)
	var length int
	for k, v := range p.ResourceByUser {
		length++

		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)

		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRUCT, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFetchResourceResult_) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("protocolVersion", thrift.I32, 1)
	l += bthrift.Binary.I32Length(int32(p.ProtocolVersion))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFetchResourceResult_) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("resourceVersion", thrift.I64, 2)
	l += bthrift.Binary.I64Length(p.ResourceVersion)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFetchResourceResult_) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("resourceByUser", thrift.MAP, 3)
	l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, len(p.ResourceByUser))
	for k, v := range p.ResourceByUser {

		l += bthrift.Binary.StringLengthNocopy(k)

		l += v.BLength()
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}
