// Code generated by thriftgo (0.3.13). DO NOT EDIT.

package masterservice

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/agentservice"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/status"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/types"
	"strings"
)

type TResourceType int64

const (
	TResourceType_TRESOURCE_CPU_SHARE      TResourceType = 0
	TResourceType_TRESOURCE_IO_SHARE       TResourceType = 1
	TResourceType_TRESOURCE_SSD_READ_IOPS  TResourceType = 2
	TResourceType_TRESOURCE_SSD_WRITE_IOPS TResourceType = 3
	TResourceType_TRESOURCE_SSD_READ_MBPS  TResourceType = 4
	TResourceType_TRESOURCE_SSD_WRITE_MBPS TResourceType = 5
	TResourceType_TRESOURCE_HDD_READ_IOPS  TResourceType = 6
	TResourceType_TRESOURCE_HDD_WRITE_IOPS TResourceType = 7
	TResourceType_TRESOURCE_HDD_READ_MBPS  TResourceType = 8
	TResourceType_TRESOURCE_HDD_WRITE_MBPS TResourceType = 9
)

func (p TResourceType) String() string {
	switch p {
	case TResourceType_TRESOURCE_CPU_SHARE:
		return "TRESOURCE_CPU_SHARE"
	case TResourceType_TRESOURCE_IO_SHARE:
		return "TRESOURCE_IO_SHARE"
	case TResourceType_TRESOURCE_SSD_READ_IOPS:
		return "TRESOURCE_SSD_READ_IOPS"
	case TResourceType_TRESOURCE_SSD_WRITE_IOPS:
		return "TRESOURCE_SSD_WRITE_IOPS"
	case TResourceType_TRESOURCE_SSD_READ_MBPS:
		return "TRESOURCE_SSD_READ_MBPS"
	case TResourceType_TRESOURCE_SSD_WRITE_MBPS:
		return "TRESOURCE_SSD_WRITE_MBPS"
	case TResourceType_TRESOURCE_HDD_READ_IOPS:
		return "TRESOURCE_HDD_READ_IOPS"
	case TResourceType_TRESOURCE_HDD_WRITE_IOPS:
		return "TRESOURCE_HDD_WRITE_IOPS"
	case TResourceType_TRESOURCE_HDD_READ_MBPS:
		return "TRESOURCE_HDD_READ_MBPS"
	case TResourceType_TRESOURCE_HDD_WRITE_MBPS:
		return "TRESOURCE_HDD_WRITE_MBPS"
	}
	return "<UNSET>"
}

func TResourceTypeFromString(s string) (TResourceType, error) {
	switch s {
	case "TRESOURCE_CPU_SHARE":
		return TResourceType_TRESOURCE_CPU_SHARE, nil
	case "TRESOURCE_IO_SHARE":
		return TResourceType_TRESOURCE_IO_SHARE, nil
	case "TRESOURCE_SSD_READ_IOPS":
		return TResourceType_TRESOURCE_SSD_READ_IOPS, nil
	case "TRESOURCE_SSD_WRITE_IOPS":
		return TResourceType_TRESOURCE_SSD_WRITE_IOPS, nil
	case "TRESOURCE_SSD_READ_MBPS":
		return TResourceType_TRESOURCE_SSD_READ_MBPS, nil
	case "TRESOURCE_SSD_WRITE_MBPS":
		return TResourceType_TRESOURCE_SSD_WRITE_MBPS, nil
	case "TRESOURCE_HDD_READ_IOPS":
		return TResourceType_TRESOURCE_HDD_READ_IOPS, nil
	case "TRESOURCE_HDD_WRITE_IOPS":
		return TResourceType_TRESOURCE_HDD_WRITE_IOPS, nil
	case "TRESOURCE_HDD_READ_MBPS":
		return TResourceType_TRESOURCE_HDD_READ_MBPS, nil
	case "TRESOURCE_HDD_WRITE_MBPS":
		return TResourceType_TRESOURCE_HDD_WRITE_MBPS, nil
	}
	return TResourceType(0), fmt.Errorf("not a valid TResourceType string")
}

func TResourceTypePtr(v TResourceType) *TResourceType { return &v }
func (p *TResourceType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TResourceType(result.Int64)
	return
}

func (p *TResourceType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TTabletInfo struct {
	TabletId            types.TTabletId        `thrift:"tablet_id,1,required" frugal:"1,required,i64" json:"tablet_id"`
	SchemaHash          types.TSchemaHash      `thrift:"schema_hash,2,required" frugal:"2,required,i32" json:"schema_hash"`
	Version             types.TVersion         `thrift:"version,3,required" frugal:"3,required,i64" json:"version"`
	VersionHash         types.TVersionHash     `thrift:"version_hash,4,required" frugal:"4,required,i64" json:"version_hash"`
	RowCount            types.TCount           `thrift:"row_count,5,required" frugal:"5,required,i64" json:"row_count"`
	DataSize            types.TSize            `thrift:"data_size,6,required" frugal:"6,required,i64" json:"data_size"`
	StorageMedium       *types.TStorageMedium  `thrift:"storage_medium,7,optional" frugal:"7,optional,TStorageMedium" json:"storage_medium,omitempty"`
	TransactionIds      []types.TTransactionId `thrift:"transaction_ids,8,optional" frugal:"8,optional,list<i64>" json:"transaction_ids,omitempty"`
	TotalVersionCount   *int64                 `thrift:"total_version_count,9,optional" frugal:"9,optional,i64" json:"total_version_count,omitempty"`
	PathHash            *int64                 `thrift:"path_hash,10,optional" frugal:"10,optional,i64" json:"path_hash,omitempty"`
	VersionMiss         *bool                  `thrift:"version_miss,11,optional" frugal:"11,optional,bool" json:"version_miss,omitempty"`
	Used                *bool                  `thrift:"used,12,optional" frugal:"12,optional,bool" json:"used,omitempty"`
	PartitionId         *types.TPartitionId    `thrift:"partition_id,13,optional" frugal:"13,optional,i64" json:"partition_id,omitempty"`
	IsInMemory          *bool                  `thrift:"is_in_memory,14,optional" frugal:"14,optional,bool" json:"is_in_memory,omitempty"`
	ReplicaId           *types.TReplicaId      `thrift:"replica_id,15,optional" frugal:"15,optional,i64" json:"replica_id,omitempty"`
	RemoteDataSize      *types.TSize           `thrift:"remote_data_size,16,optional" frugal:"16,optional,i64" json:"remote_data_size,omitempty"`
	CooldownTerm        *int64                 `thrift:"cooldown_term,19,optional" frugal:"19,optional,i64" json:"cooldown_term,omitempty"`
	CooldownMetaId      *types.TUniqueId       `thrift:"cooldown_meta_id,20,optional" frugal:"20,optional,types.TUniqueId" json:"cooldown_meta_id,omitempty"`
	VisibleVersionCount *int64                 `thrift:"visible_version_count,21,optional" frugal:"21,optional,i64" json:"visible_version_count,omitempty"`
	IsPersistent        *bool                  `thrift:"is_persistent,1000,optional" frugal:"1000,optional,bool" json:"is_persistent,omitempty"`
}

func NewTTabletInfo() *TTabletInfo {
	return &TTabletInfo{}
}

func (p *TTabletInfo) InitDefault() {
}

func (p *TTabletInfo) GetTabletId() (v types.TTabletId) {
	return p.TabletId
}

func (p *TTabletInfo) GetSchemaHash() (v types.TSchemaHash) {
	return p.SchemaHash
}

func (p *TTabletInfo) GetVersion() (v types.TVersion) {
	return p.Version
}

func (p *TTabletInfo) GetVersionHash() (v types.TVersionHash) {
	return p.VersionHash
}

func (p *TTabletInfo) GetRowCount() (v types.TCount) {
	return p.RowCount
}

func (p *TTabletInfo) GetDataSize() (v types.TSize) {
	return p.DataSize
}

var TTabletInfo_StorageMedium_DEFAULT types.TStorageMedium

func (p *TTabletInfo) GetStorageMedium() (v types.TStorageMedium) {
	if !p.IsSetStorageMedium() {
		return TTabletInfo_StorageMedium_DEFAULT
	}
	return *p.StorageMedium
}

var TTabletInfo_TransactionIds_DEFAULT []types.TTransactionId

func (p *TTabletInfo) GetTransactionIds() (v []types.TTransactionId) {
	if !p.IsSetTransactionIds() {
		return TTabletInfo_TransactionIds_DEFAULT
	}
	return p.TransactionIds
}

var TTabletInfo_TotalVersionCount_DEFAULT int64

func (p *TTabletInfo) GetTotalVersionCount() (v int64) {
	if !p.IsSetTotalVersionCount() {
		return TTabletInfo_TotalVersionCount_DEFAULT
	}
	return *p.TotalVersionCount
}

var TTabletInfo_PathHash_DEFAULT int64

func (p *TTabletInfo) GetPathHash() (v int64) {
	if !p.IsSetPathHash() {
		return TTabletInfo_PathHash_DEFAULT
	}
	return *p.PathHash
}

var TTabletInfo_VersionMiss_DEFAULT bool

func (p *TTabletInfo) GetVersionMiss() (v bool) {
	if !p.IsSetVersionMiss() {
		return TTabletInfo_VersionMiss_DEFAULT
	}
	return *p.VersionMiss
}

var TTabletInfo_Used_DEFAULT bool

func (p *TTabletInfo) GetUsed() (v bool) {
	if !p.IsSetUsed() {
		return TTabletInfo_Used_DEFAULT
	}
	return *p.Used
}

var TTabletInfo_PartitionId_DEFAULT types.TPartitionId

func (p *TTabletInfo) GetPartitionId() (v types.TPartitionId) {
	if !p.IsSetPartitionId() {
		return TTabletInfo_PartitionId_DEFAULT
	}
	return *p.PartitionId
}

var TTabletInfo_IsInMemory_DEFAULT bool

func (p *TTabletInfo) GetIsInMemory() (v bool) {
	if !p.IsSetIsInMemory() {
		return TTabletInfo_IsInMemory_DEFAULT
	}
	return *p.IsInMemory
}

var TTabletInfo_ReplicaId_DEFAULT types.TReplicaId

func (p *TTabletInfo) GetReplicaId() (v types.TReplicaId) {
	if !p.IsSetReplicaId() {
		return TTabletInfo_ReplicaId_DEFAULT
	}
	return *p.ReplicaId
}

var TTabletInfo_RemoteDataSize_DEFAULT types.TSize

func (p *TTabletInfo) GetRemoteDataSize() (v types.TSize) {
	if !p.IsSetRemoteDataSize() {
		return TTabletInfo_RemoteDataSize_DEFAULT
	}
	return *p.RemoteDataSize
}

var TTabletInfo_CooldownTerm_DEFAULT int64

func (p *TTabletInfo) GetCooldownTerm() (v int64) {
	if !p.IsSetCooldownTerm() {
		return TTabletInfo_CooldownTerm_DEFAULT
	}
	return *p.CooldownTerm
}

var TTabletInfo_CooldownMetaId_DEFAULT *types.TUniqueId

func (p *TTabletInfo) GetCooldownMetaId() (v *types.TUniqueId) {
	if !p.IsSetCooldownMetaId() {
		return TTabletInfo_CooldownMetaId_DEFAULT
	}
	return p.CooldownMetaId
}

var TTabletInfo_VisibleVersionCount_DEFAULT int64

func (p *TTabletInfo) GetVisibleVersionCount() (v int64) {
	if !p.IsSetVisibleVersionCount() {
		return TTabletInfo_VisibleVersionCount_DEFAULT
	}
	return *p.VisibleVersionCount
}

var TTabletInfo_IsPersistent_DEFAULT bool

func (p *TTabletInfo) GetIsPersistent() (v bool) {
	if !p.IsSetIsPersistent() {
		return TTabletInfo_IsPersistent_DEFAULT
	}
	return *p.IsPersistent
}
func (p *TTabletInfo) SetTabletId(val types.TTabletId) {
	p.TabletId = val
}
func (p *TTabletInfo) SetSchemaHash(val types.TSchemaHash) {
	p.SchemaHash = val
}
func (p *TTabletInfo) SetVersion(val types.TVersion) {
	p.Version = val
}
func (p *TTabletInfo) SetVersionHash(val types.TVersionHash) {
	p.VersionHash = val
}
func (p *TTabletInfo) SetRowCount(val types.TCount) {
	p.RowCount = val
}
func (p *TTabletInfo) SetDataSize(val types.TSize) {
	p.DataSize = val
}
func (p *TTabletInfo) SetStorageMedium(val *types.TStorageMedium) {
	p.StorageMedium = val
}
func (p *TTabletInfo) SetTransactionIds(val []types.TTransactionId) {
	p.TransactionIds = val
}
func (p *TTabletInfo) SetTotalVersionCount(val *int64) {
	p.TotalVersionCount = val
}
func (p *TTabletInfo) SetPathHash(val *int64) {
	p.PathHash = val
}
func (p *TTabletInfo) SetVersionMiss(val *bool) {
	p.VersionMiss = val
}
func (p *TTabletInfo) SetUsed(val *bool) {
	p.Used = val
}
func (p *TTabletInfo) SetPartitionId(val *types.TPartitionId) {
	p.PartitionId = val
}
func (p *TTabletInfo) SetIsInMemory(val *bool) {
	p.IsInMemory = val
}
func (p *TTabletInfo) SetReplicaId(val *types.TReplicaId) {
	p.ReplicaId = val
}
func (p *TTabletInfo) SetRemoteDataSize(val *types.TSize) {
	p.RemoteDataSize = val
}
func (p *TTabletInfo) SetCooldownTerm(val *int64) {
	p.CooldownTerm = val
}
func (p *TTabletInfo) SetCooldownMetaId(val *types.TUniqueId) {
	p.CooldownMetaId = val
}
func (p *TTabletInfo) SetVisibleVersionCount(val *int64) {
	p.VisibleVersionCount = val
}
func (p *TTabletInfo) SetIsPersistent(val *bool) {
	p.IsPersistent = val
}

var fieldIDToName_TTabletInfo = map[int16]string{
	1:    "tablet_id",
	2:    "schema_hash",
	3:    "version",
	4:    "version_hash",
	5:    "row_count",
	6:    "data_size",
	7:    "storage_medium",
	8:    "transaction_ids",
	9:    "total_version_count",
	10:   "path_hash",
	11:   "version_miss",
	12:   "used",
	13:   "partition_id",
	14:   "is_in_memory",
	15:   "replica_id",
	16:   "remote_data_size",
	19:   "cooldown_term",
	20:   "cooldown_meta_id",
	21:   "visible_version_count",
	1000: "is_persistent",
}

func (p *TTabletInfo) IsSetStorageMedium() bool {
	return p.StorageMedium != nil
}

func (p *TTabletInfo) IsSetTransactionIds() bool {
	return p.TransactionIds != nil
}

func (p *TTabletInfo) IsSetTotalVersionCount() bool {
	return p.TotalVersionCount != nil
}

func (p *TTabletInfo) IsSetPathHash() bool {
	return p.PathHash != nil
}

func (p *TTabletInfo) IsSetVersionMiss() bool {
	return p.VersionMiss != nil
}

func (p *TTabletInfo) IsSetUsed() bool {
	return p.Used != nil
}

func (p *TTabletInfo) IsSetPartitionId() bool {
	return p.PartitionId != nil
}

func (p *TTabletInfo) IsSetIsInMemory() bool {
	return p.IsInMemory != nil
}

func (p *TTabletInfo) IsSetReplicaId() bool {
	return p.ReplicaId != nil
}

func (p *TTabletInfo) IsSetRemoteDataSize() bool {
	return p.RemoteDataSize != nil
}

func (p *TTabletInfo) IsSetCooldownTerm() bool {
	return p.CooldownTerm != nil
}

func (p *TTabletInfo) IsSetCooldownMetaId() bool {
	return p.CooldownMetaId != nil
}

func (p *TTabletInfo) IsSetVisibleVersionCount() bool {
	return p.VisibleVersionCount != nil
}

func (p *TTabletInfo) IsSetIsPersistent() bool {
	return p.IsPersistent != nil
}

func (p *TTabletInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetSchemaHash bool = false
	var issetVersion bool = false
	var issetVersionHash bool = false
	var issetRowCount bool = false
	var issetDataSize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersionHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetRowCount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetDataSize = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1000:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1000(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetVersionHash {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetRowCount {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetDataSize {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletInfo[fieldId]))
}

func (p *TTabletInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TabletId = _field
	return nil
}
func (p *TTabletInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TSchemaHash
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SchemaHash = _field
	return nil
}
func (p *TTabletInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field types.TVersion
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *TTabletInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field types.TVersionHash
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VersionHash = _field
	return nil
}
func (p *TTabletInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field types.TCount
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RowCount = _field
	return nil
}
func (p *TTabletInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field types.TSize
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DataSize = _field
	return nil
}
func (p *TTabletInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field *types.TStorageMedium
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TStorageMedium(v)
		_field = &tmp
	}
	p.StorageMedium = _field
	return nil
}
func (p *TTabletInfo) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TTransactionId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TTransactionId
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TransactionIds = _field
	return nil
}
func (p *TTabletInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TotalVersionCount = _field
	return nil
}
func (p *TTabletInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PathHash = _field
	return nil
}
func (p *TTabletInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionMiss = _field
	return nil
}
func (p *TTabletInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Used = _field
	return nil
}
func (p *TTabletInfo) ReadField13(iprot thrift.TProtocol) error {

	var _field *types.TPartitionId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PartitionId = _field
	return nil
}
func (p *TTabletInfo) ReadField14(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsInMemory = _field
	return nil
}
func (p *TTabletInfo) ReadField15(iprot thrift.TProtocol) error {

	var _field *types.TReplicaId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReplicaId = _field
	return nil
}
func (p *TTabletInfo) ReadField16(iprot thrift.TProtocol) error {

	var _field *types.TSize
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RemoteDataSize = _field
	return nil
}
func (p *TTabletInfo) ReadField19(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CooldownTerm = _field
	return nil
}
func (p *TTabletInfo) ReadField20(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CooldownMetaId = _field
	return nil
}
func (p *TTabletInfo) ReadField21(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VisibleVersionCount = _field
	return nil
}
func (p *TTabletInfo) ReadField1000(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsPersistent = _field
	return nil
}

func (p *TTabletInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTabletInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField1000(oprot); err != nil {
			fieldId = 1000
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTabletInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTabletInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schema_hash", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SchemaHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTabletInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTabletInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version_hash", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VersionHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TTabletInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("row_count", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.RowCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TTabletInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data_size", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DataSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TTabletInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageMedium() {
		if err = oprot.WriteFieldBegin("storage_medium", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.StorageMedium)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TTabletInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransactionIds() {
		if err = oprot.WriteFieldBegin("transaction_ids", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.TransactionIds)); err != nil {
			return err
		}
		for _, v := range p.TransactionIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TTabletInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalVersionCount() {
		if err = oprot.WriteFieldBegin("total_version_count", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TotalVersionCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TTabletInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetPathHash() {
		if err = oprot.WriteFieldBegin("path_hash", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PathHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TTabletInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionMiss() {
		if err = oprot.WriteFieldBegin("version_miss", thrift.BOOL, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.VersionMiss); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TTabletInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsed() {
		if err = oprot.WriteFieldBegin("used", thrift.BOOL, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Used); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TTabletInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionId() {
		if err = oprot.WriteFieldBegin("partition_id", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PartitionId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TTabletInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsInMemory() {
		if err = oprot.WriteFieldBegin("is_in_memory", thrift.BOOL, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsInMemory); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TTabletInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicaId() {
		if err = oprot.WriteFieldBegin("replica_id", thrift.I64, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ReplicaId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TTabletInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteDataSize() {
		if err = oprot.WriteFieldBegin("remote_data_size", thrift.I64, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.RemoteDataSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TTabletInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetCooldownTerm() {
		if err = oprot.WriteFieldBegin("cooldown_term", thrift.I64, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CooldownTerm); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TTabletInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetCooldownMetaId() {
		if err = oprot.WriteFieldBegin("cooldown_meta_id", thrift.STRUCT, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CooldownMetaId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *TTabletInfo) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetVisibleVersionCount() {
		if err = oprot.WriteFieldBegin("visible_version_count", thrift.I64, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VisibleVersionCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *TTabletInfo) writeField1000(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsPersistent() {
		if err = oprot.WriteFieldBegin("is_persistent", thrift.BOOL, 1000); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsPersistent); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 end error: ", p), err)
}

func (p *TTabletInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTabletInfo(%+v)", *p)

}

func (p *TTabletInfo) DeepEqual(ano *TTabletInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SchemaHash) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.VersionHash) {
		return false
	}
	if !p.Field5DeepEqual(ano.RowCount) {
		return false
	}
	if !p.Field6DeepEqual(ano.DataSize) {
		return false
	}
	if !p.Field7DeepEqual(ano.StorageMedium) {
		return false
	}
	if !p.Field8DeepEqual(ano.TransactionIds) {
		return false
	}
	if !p.Field9DeepEqual(ano.TotalVersionCount) {
		return false
	}
	if !p.Field10DeepEqual(ano.PathHash) {
		return false
	}
	if !p.Field11DeepEqual(ano.VersionMiss) {
		return false
	}
	if !p.Field12DeepEqual(ano.Used) {
		return false
	}
	if !p.Field13DeepEqual(ano.PartitionId) {
		return false
	}
	if !p.Field14DeepEqual(ano.IsInMemory) {
		return false
	}
	if !p.Field15DeepEqual(ano.ReplicaId) {
		return false
	}
	if !p.Field16DeepEqual(ano.RemoteDataSize) {
		return false
	}
	if !p.Field19DeepEqual(ano.CooldownTerm) {
		return false
	}
	if !p.Field20DeepEqual(ano.CooldownMetaId) {
		return false
	}
	if !p.Field21DeepEqual(ano.VisibleVersionCount) {
		return false
	}
	if !p.Field1000DeepEqual(ano.IsPersistent) {
		return false
	}
	return true
}

func (p *TTabletInfo) Field1DeepEqual(src types.TTabletId) bool {

	if p.TabletId != src {
		return false
	}
	return true
}
func (p *TTabletInfo) Field2DeepEqual(src types.TSchemaHash) bool {

	if p.SchemaHash != src {
		return false
	}
	return true
}
func (p *TTabletInfo) Field3DeepEqual(src types.TVersion) bool {

	if p.Version != src {
		return false
	}
	return true
}
func (p *TTabletInfo) Field4DeepEqual(src types.TVersionHash) bool {

	if p.VersionHash != src {
		return false
	}
	return true
}
func (p *TTabletInfo) Field5DeepEqual(src types.TCount) bool {

	if p.RowCount != src {
		return false
	}
	return true
}
func (p *TTabletInfo) Field6DeepEqual(src types.TSize) bool {

	if p.DataSize != src {
		return false
	}
	return true
}
func (p *TTabletInfo) Field7DeepEqual(src *types.TStorageMedium) bool {

	if p.StorageMedium == src {
		return true
	} else if p.StorageMedium == nil || src == nil {
		return false
	}
	if *p.StorageMedium != *src {
		return false
	}
	return true
}
func (p *TTabletInfo) Field8DeepEqual(src []types.TTransactionId) bool {

	if len(p.TransactionIds) != len(src) {
		return false
	}
	for i, v := range p.TransactionIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TTabletInfo) Field9DeepEqual(src *int64) bool {

	if p.TotalVersionCount == src {
		return true
	} else if p.TotalVersionCount == nil || src == nil {
		return false
	}
	if *p.TotalVersionCount != *src {
		return false
	}
	return true
}
func (p *TTabletInfo) Field10DeepEqual(src *int64) bool {

	if p.PathHash == src {
		return true
	} else if p.PathHash == nil || src == nil {
		return false
	}
	if *p.PathHash != *src {
		return false
	}
	return true
}
func (p *TTabletInfo) Field11DeepEqual(src *bool) bool {

	if p.VersionMiss == src {
		return true
	} else if p.VersionMiss == nil || src == nil {
		return false
	}
	if *p.VersionMiss != *src {
		return false
	}
	return true
}
func (p *TTabletInfo) Field12DeepEqual(src *bool) bool {

	if p.Used == src {
		return true
	} else if p.Used == nil || src == nil {
		return false
	}
	if *p.Used != *src {
		return false
	}
	return true
}
func (p *TTabletInfo) Field13DeepEqual(src *types.TPartitionId) bool {

	if p.PartitionId == src {
		return true
	} else if p.PartitionId == nil || src == nil {
		return false
	}
	if *p.PartitionId != *src {
		return false
	}
	return true
}
func (p *TTabletInfo) Field14DeepEqual(src *bool) bool {

	if p.IsInMemory == src {
		return true
	} else if p.IsInMemory == nil || src == nil {
		return false
	}
	if *p.IsInMemory != *src {
		return false
	}
	return true
}
func (p *TTabletInfo) Field15DeepEqual(src *types.TReplicaId) bool {

	if p.ReplicaId == src {
		return true
	} else if p.ReplicaId == nil || src == nil {
		return false
	}
	if *p.ReplicaId != *src {
		return false
	}
	return true
}
func (p *TTabletInfo) Field16DeepEqual(src *types.TSize) bool {

	if p.RemoteDataSize == src {
		return true
	} else if p.RemoteDataSize == nil || src == nil {
		return false
	}
	if *p.RemoteDataSize != *src {
		return false
	}
	return true
}
func (p *TTabletInfo) Field19DeepEqual(src *int64) bool {

	if p.CooldownTerm == src {
		return true
	} else if p.CooldownTerm == nil || src == nil {
		return false
	}
	if *p.CooldownTerm != *src {
		return false
	}
	return true
}
func (p *TTabletInfo) Field20DeepEqual(src *types.TUniqueId) bool {

	if !p.CooldownMetaId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTabletInfo) Field21DeepEqual(src *int64) bool {

	if p.VisibleVersionCount == src {
		return true
	} else if p.VisibleVersionCount == nil || src == nil {
		return false
	}
	if *p.VisibleVersionCount != *src {
		return false
	}
	return true
}
func (p *TTabletInfo) Field1000DeepEqual(src *bool) bool {

	if p.IsPersistent == src {
		return true
	} else if p.IsPersistent == nil || src == nil {
		return false
	}
	if *p.IsPersistent != *src {
		return false
	}
	return true
}

type TFinishTaskRequest struct {
	Backend                         *types.TBackend                    `thrift:"backend,1,required" frugal:"1,required,types.TBackend" json:"backend"`
	TaskType                        types.TTaskType                    `thrift:"task_type,2,required" frugal:"2,required,TTaskType" json:"task_type"`
	Signature                       int64                              `thrift:"signature,3,required" frugal:"3,required,i64" json:"signature"`
	TaskStatus                      *status.TStatus                    `thrift:"task_status,4,required" frugal:"4,required,status.TStatus" json:"task_status"`
	ReportVersion                   *int64                             `thrift:"report_version,5,optional" frugal:"5,optional,i64" json:"report_version,omitempty"`
	FinishTabletInfos               []*TTabletInfo                     `thrift:"finish_tablet_infos,6,optional" frugal:"6,optional,list<TTabletInfo>" json:"finish_tablet_infos,omitempty"`
	TabletChecksum                  *int64                             `thrift:"tablet_checksum,7,optional" frugal:"7,optional,i64" json:"tablet_checksum,omitempty"`
	RequestVersion                  *int64                             `thrift:"request_version,8,optional" frugal:"8,optional,i64" json:"request_version,omitempty"`
	RequestVersionHash              *int64                             `thrift:"request_version_hash,9,optional" frugal:"9,optional,i64" json:"request_version_hash,omitempty"`
	SnapshotPath                    *string                            `thrift:"snapshot_path,10,optional" frugal:"10,optional,string" json:"snapshot_path,omitempty"`
	ErrorTabletIds                  []types.TTabletId                  `thrift:"error_tablet_ids,11,optional" frugal:"11,optional,list<i64>" json:"error_tablet_ids,omitempty"`
	SnapshotFiles                   []string                           `thrift:"snapshot_files,12,optional" frugal:"12,optional,list<string>" json:"snapshot_files,omitempty"`
	TabletFiles                     map[types.TTabletId][]string       `thrift:"tablet_files,13,optional" frugal:"13,optional,map<i64:list<string>>" json:"tablet_files,omitempty"`
	DownloadedTabletIds             []types.TTabletId                  `thrift:"downloaded_tablet_ids,14,optional" frugal:"14,optional,list<i64>" json:"downloaded_tablet_ids,omitempty"`
	CopySize                        *int64                             `thrift:"copy_size,15,optional" frugal:"15,optional,i64" json:"copy_size,omitempty"`
	CopyTimeMs                      *int64                             `thrift:"copy_time_ms,16,optional" frugal:"16,optional,i64" json:"copy_time_ms,omitempty"`
	SuccTablets                     map[types.TTabletId]types.TVersion `thrift:"succ_tablets,17,optional" frugal:"17,optional,map<i64:i64>" json:"succ_tablets,omitempty"`
	TableIdToDeltaNumRows           map[int64]int64                    `thrift:"table_id_to_delta_num_rows,18,optional" frugal:"18,optional,map<i64:i64>" json:"table_id_to_delta_num_rows,omitempty"`
	TableIdToTabletIdToDeltaNumRows map[int64]map[int64]int64          `thrift:"table_id_to_tablet_id_to_delta_num_rows,19,optional" frugal:"19,optional,map<i64:map<i64:i64>>" json:"table_id_to_tablet_id_to_delta_num_rows,omitempty"`
}

func NewTFinishTaskRequest() *TFinishTaskRequest {
	return &TFinishTaskRequest{}
}

func (p *TFinishTaskRequest) InitDefault() {
}

var TFinishTaskRequest_Backend_DEFAULT *types.TBackend

func (p *TFinishTaskRequest) GetBackend() (v *types.TBackend) {
	if !p.IsSetBackend() {
		return TFinishTaskRequest_Backend_DEFAULT
	}
	return p.Backend
}

func (p *TFinishTaskRequest) GetTaskType() (v types.TTaskType) {
	return p.TaskType
}

func (p *TFinishTaskRequest) GetSignature() (v int64) {
	return p.Signature
}

var TFinishTaskRequest_TaskStatus_DEFAULT *status.TStatus

func (p *TFinishTaskRequest) GetTaskStatus() (v *status.TStatus) {
	if !p.IsSetTaskStatus() {
		return TFinishTaskRequest_TaskStatus_DEFAULT
	}
	return p.TaskStatus
}

var TFinishTaskRequest_ReportVersion_DEFAULT int64

func (p *TFinishTaskRequest) GetReportVersion() (v int64) {
	if !p.IsSetReportVersion() {
		return TFinishTaskRequest_ReportVersion_DEFAULT
	}
	return *p.ReportVersion
}

var TFinishTaskRequest_FinishTabletInfos_DEFAULT []*TTabletInfo

func (p *TFinishTaskRequest) GetFinishTabletInfos() (v []*TTabletInfo) {
	if !p.IsSetFinishTabletInfos() {
		return TFinishTaskRequest_FinishTabletInfos_DEFAULT
	}
	return p.FinishTabletInfos
}

var TFinishTaskRequest_TabletChecksum_DEFAULT int64

func (p *TFinishTaskRequest) GetTabletChecksum() (v int64) {
	if !p.IsSetTabletChecksum() {
		return TFinishTaskRequest_TabletChecksum_DEFAULT
	}
	return *p.TabletChecksum
}

var TFinishTaskRequest_RequestVersion_DEFAULT int64

func (p *TFinishTaskRequest) GetRequestVersion() (v int64) {
	if !p.IsSetRequestVersion() {
		return TFinishTaskRequest_RequestVersion_DEFAULT
	}
	return *p.RequestVersion
}

var TFinishTaskRequest_RequestVersionHash_DEFAULT int64

func (p *TFinishTaskRequest) GetRequestVersionHash() (v int64) {
	if !p.IsSetRequestVersionHash() {
		return TFinishTaskRequest_RequestVersionHash_DEFAULT
	}
	return *p.RequestVersionHash
}

var TFinishTaskRequest_SnapshotPath_DEFAULT string

func (p *TFinishTaskRequest) GetSnapshotPath() (v string) {
	if !p.IsSetSnapshotPath() {
		return TFinishTaskRequest_SnapshotPath_DEFAULT
	}
	return *p.SnapshotPath
}

var TFinishTaskRequest_ErrorTabletIds_DEFAULT []types.TTabletId

func (p *TFinishTaskRequest) GetErrorTabletIds() (v []types.TTabletId) {
	if !p.IsSetErrorTabletIds() {
		return TFinishTaskRequest_ErrorTabletIds_DEFAULT
	}
	return p.ErrorTabletIds
}

var TFinishTaskRequest_SnapshotFiles_DEFAULT []string

func (p *TFinishTaskRequest) GetSnapshotFiles() (v []string) {
	if !p.IsSetSnapshotFiles() {
		return TFinishTaskRequest_SnapshotFiles_DEFAULT
	}
	return p.SnapshotFiles
}

var TFinishTaskRequest_TabletFiles_DEFAULT map[types.TTabletId][]string

func (p *TFinishTaskRequest) GetTabletFiles() (v map[types.TTabletId][]string) {
	if !p.IsSetTabletFiles() {
		return TFinishTaskRequest_TabletFiles_DEFAULT
	}
	return p.TabletFiles
}

var TFinishTaskRequest_DownloadedTabletIds_DEFAULT []types.TTabletId

func (p *TFinishTaskRequest) GetDownloadedTabletIds() (v []types.TTabletId) {
	if !p.IsSetDownloadedTabletIds() {
		return TFinishTaskRequest_DownloadedTabletIds_DEFAULT
	}
	return p.DownloadedTabletIds
}

var TFinishTaskRequest_CopySize_DEFAULT int64

func (p *TFinishTaskRequest) GetCopySize() (v int64) {
	if !p.IsSetCopySize() {
		return TFinishTaskRequest_CopySize_DEFAULT
	}
	return *p.CopySize
}

var TFinishTaskRequest_CopyTimeMs_DEFAULT int64

func (p *TFinishTaskRequest) GetCopyTimeMs() (v int64) {
	if !p.IsSetCopyTimeMs() {
		return TFinishTaskRequest_CopyTimeMs_DEFAULT
	}
	return *p.CopyTimeMs
}

var TFinishTaskRequest_SuccTablets_DEFAULT map[types.TTabletId]types.TVersion

func (p *TFinishTaskRequest) GetSuccTablets() (v map[types.TTabletId]types.TVersion) {
	if !p.IsSetSuccTablets() {
		return TFinishTaskRequest_SuccTablets_DEFAULT
	}
	return p.SuccTablets
}

var TFinishTaskRequest_TableIdToDeltaNumRows_DEFAULT map[int64]int64

func (p *TFinishTaskRequest) GetTableIdToDeltaNumRows() (v map[int64]int64) {
	if !p.IsSetTableIdToDeltaNumRows() {
		return TFinishTaskRequest_TableIdToDeltaNumRows_DEFAULT
	}
	return p.TableIdToDeltaNumRows
}

var TFinishTaskRequest_TableIdToTabletIdToDeltaNumRows_DEFAULT map[int64]map[int64]int64

func (p *TFinishTaskRequest) GetTableIdToTabletIdToDeltaNumRows() (v map[int64]map[int64]int64) {
	if !p.IsSetTableIdToTabletIdToDeltaNumRows() {
		return TFinishTaskRequest_TableIdToTabletIdToDeltaNumRows_DEFAULT
	}
	return p.TableIdToTabletIdToDeltaNumRows
}
func (p *TFinishTaskRequest) SetBackend(val *types.TBackend) {
	p.Backend = val
}
func (p *TFinishTaskRequest) SetTaskType(val types.TTaskType) {
	p.TaskType = val
}
func (p *TFinishTaskRequest) SetSignature(val int64) {
	p.Signature = val
}
func (p *TFinishTaskRequest) SetTaskStatus(val *status.TStatus) {
	p.TaskStatus = val
}
func (p *TFinishTaskRequest) SetReportVersion(val *int64) {
	p.ReportVersion = val
}
func (p *TFinishTaskRequest) SetFinishTabletInfos(val []*TTabletInfo) {
	p.FinishTabletInfos = val
}
func (p *TFinishTaskRequest) SetTabletChecksum(val *int64) {
	p.TabletChecksum = val
}
func (p *TFinishTaskRequest) SetRequestVersion(val *int64) {
	p.RequestVersion = val
}
func (p *TFinishTaskRequest) SetRequestVersionHash(val *int64) {
	p.RequestVersionHash = val
}
func (p *TFinishTaskRequest) SetSnapshotPath(val *string) {
	p.SnapshotPath = val
}
func (p *TFinishTaskRequest) SetErrorTabletIds(val []types.TTabletId) {
	p.ErrorTabletIds = val
}
func (p *TFinishTaskRequest) SetSnapshotFiles(val []string) {
	p.SnapshotFiles = val
}
func (p *TFinishTaskRequest) SetTabletFiles(val map[types.TTabletId][]string) {
	p.TabletFiles = val
}
func (p *TFinishTaskRequest) SetDownloadedTabletIds(val []types.TTabletId) {
	p.DownloadedTabletIds = val
}
func (p *TFinishTaskRequest) SetCopySize(val *int64) {
	p.CopySize = val
}
func (p *TFinishTaskRequest) SetCopyTimeMs(val *int64) {
	p.CopyTimeMs = val
}
func (p *TFinishTaskRequest) SetSuccTablets(val map[types.TTabletId]types.TVersion) {
	p.SuccTablets = val
}
func (p *TFinishTaskRequest) SetTableIdToDeltaNumRows(val map[int64]int64) {
	p.TableIdToDeltaNumRows = val
}
func (p *TFinishTaskRequest) SetTableIdToTabletIdToDeltaNumRows(val map[int64]map[int64]int64) {
	p.TableIdToTabletIdToDeltaNumRows = val
}

var fieldIDToName_TFinishTaskRequest = map[int16]string{
	1:  "backend",
	2:  "task_type",
	3:  "signature",
	4:  "task_status",
	5:  "report_version",
	6:  "finish_tablet_infos",
	7:  "tablet_checksum",
	8:  "request_version",
	9:  "request_version_hash",
	10: "snapshot_path",
	11: "error_tablet_ids",
	12: "snapshot_files",
	13: "tablet_files",
	14: "downloaded_tablet_ids",
	15: "copy_size",
	16: "copy_time_ms",
	17: "succ_tablets",
	18: "table_id_to_delta_num_rows",
	19: "table_id_to_tablet_id_to_delta_num_rows",
}

func (p *TFinishTaskRequest) IsSetBackend() bool {
	return p.Backend != nil
}

func (p *TFinishTaskRequest) IsSetTaskStatus() bool {
	return p.TaskStatus != nil
}

func (p *TFinishTaskRequest) IsSetReportVersion() bool {
	return p.ReportVersion != nil
}

func (p *TFinishTaskRequest) IsSetFinishTabletInfos() bool {
	return p.FinishTabletInfos != nil
}

func (p *TFinishTaskRequest) IsSetTabletChecksum() bool {
	return p.TabletChecksum != nil
}

func (p *TFinishTaskRequest) IsSetRequestVersion() bool {
	return p.RequestVersion != nil
}

func (p *TFinishTaskRequest) IsSetRequestVersionHash() bool {
	return p.RequestVersionHash != nil
}

func (p *TFinishTaskRequest) IsSetSnapshotPath() bool {
	return p.SnapshotPath != nil
}

func (p *TFinishTaskRequest) IsSetErrorTabletIds() bool {
	return p.ErrorTabletIds != nil
}

func (p *TFinishTaskRequest) IsSetSnapshotFiles() bool {
	return p.SnapshotFiles != nil
}

func (p *TFinishTaskRequest) IsSetTabletFiles() bool {
	return p.TabletFiles != nil
}

func (p *TFinishTaskRequest) IsSetDownloadedTabletIds() bool {
	return p.DownloadedTabletIds != nil
}

func (p *TFinishTaskRequest) IsSetCopySize() bool {
	return p.CopySize != nil
}

func (p *TFinishTaskRequest) IsSetCopyTimeMs() bool {
	return p.CopyTimeMs != nil
}

func (p *TFinishTaskRequest) IsSetSuccTablets() bool {
	return p.SuccTablets != nil
}

func (p *TFinishTaskRequest) IsSetTableIdToDeltaNumRows() bool {
	return p.TableIdToDeltaNumRows != nil
}

func (p *TFinishTaskRequest) IsSetTableIdToTabletIdToDeltaNumRows() bool {
	return p.TableIdToTabletIdToDeltaNumRows != nil
}

func (p *TFinishTaskRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBackend bool = false
	var issetTaskType bool = false
	var issetSignature bool = false
	var issetTaskStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBackend = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTaskType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSignature = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetTaskStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBackend {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTaskType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSignature {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetTaskStatus {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFinishTaskRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFinishTaskRequest[fieldId]))
}

func (p *TFinishTaskRequest) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTBackend()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Backend = _field
	return nil
}
func (p *TFinishTaskRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TTaskType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TTaskType(v)
	}
	p.TaskType = _field
	return nil
}
func (p *TFinishTaskRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Signature = _field
	return nil
}
func (p *TFinishTaskRequest) ReadField4(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TaskStatus = _field
	return nil
}
func (p *TFinishTaskRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReportVersion = _field
	return nil
}
func (p *TFinishTaskRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTabletInfo, 0, size)
	values := make([]TTabletInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FinishTabletInfos = _field
	return nil
}
func (p *TFinishTaskRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TabletChecksum = _field
	return nil
}
func (p *TFinishTaskRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RequestVersion = _field
	return nil
}
func (p *TFinishTaskRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RequestVersionHash = _field
	return nil
}
func (p *TFinishTaskRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SnapshotPath = _field
	return nil
}
func (p *TFinishTaskRequest) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TTabletId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TTabletId
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ErrorTabletIds = _field
	return nil
}
func (p *TFinishTaskRequest) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SnapshotFiles = _field
	return nil
}
func (p *TFinishTaskRequest) ReadField13(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TTabletId][]string, size)
	for i := 0; i < size; i++ {
		var _key types.TTabletId
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]string, 0, size)
		for i := 0; i < size; i++ {

			var _elem string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.TabletFiles = _field
	return nil
}
func (p *TFinishTaskRequest) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TTabletId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TTabletId
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DownloadedTabletIds = _field
	return nil
}
func (p *TFinishTaskRequest) ReadField15(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CopySize = _field
	return nil
}
func (p *TFinishTaskRequest) ReadField16(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CopyTimeMs = _field
	return nil
}
func (p *TFinishTaskRequest) ReadField17(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TTabletId]types.TVersion, size)
	for i := 0; i < size; i++ {
		var _key types.TTabletId
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val types.TVersion
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.SuccTablets = _field
	return nil
}
func (p *TFinishTaskRequest) ReadField18(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64]int64, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.TableIdToDeltaNumRows = _field
	return nil
}
func (p *TFinishTaskRequest) ReadField19(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64]map[int64]int64, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[int64]int64, size)
		for i := 0; i < size; i++ {
			var _key1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_key1 = v
			}

			var _val1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.TableIdToTabletIdToDeltaNumRows = _field
	return nil
}

func (p *TFinishTaskRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFinishTaskRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("backend", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Backend.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.TaskType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("signature", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Signature); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_status", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.TaskStatus.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetReportVersion() {
		if err = oprot.WriteFieldBegin("report_version", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ReportVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFinishTabletInfos() {
		if err = oprot.WriteFieldBegin("finish_tablet_infos", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FinishTabletInfos)); err != nil {
			return err
		}
		for _, v := range p.FinishTabletInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletChecksum() {
		if err = oprot.WriteFieldBegin("tablet_checksum", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TabletChecksum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestVersion() {
		if err = oprot.WriteFieldBegin("request_version", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.RequestVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestVersionHash() {
		if err = oprot.WriteFieldBegin("request_version_hash", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.RequestVersionHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotPath() {
		if err = oprot.WriteFieldBegin("snapshot_path", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SnapshotPath); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorTabletIds() {
		if err = oprot.WriteFieldBegin("error_tablet_ids", thrift.LIST, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ErrorTabletIds)); err != nil {
			return err
		}
		for _, v := range p.ErrorTabletIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotFiles() {
		if err = oprot.WriteFieldBegin("snapshot_files", thrift.LIST, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.SnapshotFiles)); err != nil {
			return err
		}
		for _, v := range p.SnapshotFiles {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletFiles() {
		if err = oprot.WriteFieldBegin("tablet_files", thrift.MAP, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.LIST, len(p.TabletFiles)); err != nil {
			return err
		}
		for k, v := range p.TabletFiles {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := oprot.WriteString(v); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetDownloadedTabletIds() {
		if err = oprot.WriteFieldBegin("downloaded_tablet_ids", thrift.LIST, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.DownloadedTabletIds)); err != nil {
			return err
		}
		for _, v := range p.DownloadedTabletIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetCopySize() {
		if err = oprot.WriteFieldBegin("copy_size", thrift.I64, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CopySize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetCopyTimeMs() {
		if err = oprot.WriteFieldBegin("copy_time_ms", thrift.I64, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CopyTimeMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccTablets() {
		if err = oprot.WriteFieldBegin("succ_tablets", thrift.MAP, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.I64, len(p.SuccTablets)); err != nil {
			return err
		}
		for k, v := range p.SuccTablets {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableIdToDeltaNumRows() {
		if err = oprot.WriteFieldBegin("table_id_to_delta_num_rows", thrift.MAP, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.I64, len(p.TableIdToDeltaNumRows)); err != nil {
			return err
		}
		for k, v := range p.TableIdToDeltaNumRows {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TFinishTaskRequest) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableIdToTabletIdToDeltaNumRows() {
		if err = oprot.WriteFieldBegin("table_id_to_tablet_id_to_delta_num_rows", thrift.MAP, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.MAP, len(p.TableIdToTabletIdToDeltaNumRows)); err != nil {
			return err
		}
		for k, v := range p.TableIdToTabletIdToDeltaNumRows {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteMapBegin(thrift.I64, thrift.I64, len(v)); err != nil {
				return err
			}
			for k, v := range v {
				if err := oprot.WriteI64(k); err != nil {
					return err
				}
				if err := oprot.WriteI64(v); err != nil {
					return err
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TFinishTaskRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFinishTaskRequest(%+v)", *p)

}

func (p *TFinishTaskRequest) DeepEqual(ano *TFinishTaskRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Backend) {
		return false
	}
	if !p.Field2DeepEqual(ano.TaskType) {
		return false
	}
	if !p.Field3DeepEqual(ano.Signature) {
		return false
	}
	if !p.Field4DeepEqual(ano.TaskStatus) {
		return false
	}
	if !p.Field5DeepEqual(ano.ReportVersion) {
		return false
	}
	if !p.Field6DeepEqual(ano.FinishTabletInfos) {
		return false
	}
	if !p.Field7DeepEqual(ano.TabletChecksum) {
		return false
	}
	if !p.Field8DeepEqual(ano.RequestVersion) {
		return false
	}
	if !p.Field9DeepEqual(ano.RequestVersionHash) {
		return false
	}
	if !p.Field10DeepEqual(ano.SnapshotPath) {
		return false
	}
	if !p.Field11DeepEqual(ano.ErrorTabletIds) {
		return false
	}
	if !p.Field12DeepEqual(ano.SnapshotFiles) {
		return false
	}
	if !p.Field13DeepEqual(ano.TabletFiles) {
		return false
	}
	if !p.Field14DeepEqual(ano.DownloadedTabletIds) {
		return false
	}
	if !p.Field15DeepEqual(ano.CopySize) {
		return false
	}
	if !p.Field16DeepEqual(ano.CopyTimeMs) {
		return false
	}
	if !p.Field17DeepEqual(ano.SuccTablets) {
		return false
	}
	if !p.Field18DeepEqual(ano.TableIdToDeltaNumRows) {
		return false
	}
	if !p.Field19DeepEqual(ano.TableIdToTabletIdToDeltaNumRows) {
		return false
	}
	return true
}

func (p *TFinishTaskRequest) Field1DeepEqual(src *types.TBackend) bool {

	if !p.Backend.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFinishTaskRequest) Field2DeepEqual(src types.TTaskType) bool {

	if p.TaskType != src {
		return false
	}
	return true
}
func (p *TFinishTaskRequest) Field3DeepEqual(src int64) bool {

	if p.Signature != src {
		return false
	}
	return true
}
func (p *TFinishTaskRequest) Field4DeepEqual(src *status.TStatus) bool {

	if !p.TaskStatus.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFinishTaskRequest) Field5DeepEqual(src *int64) bool {

	if p.ReportVersion == src {
		return true
	} else if p.ReportVersion == nil || src == nil {
		return false
	}
	if *p.ReportVersion != *src {
		return false
	}
	return true
}
func (p *TFinishTaskRequest) Field6DeepEqual(src []*TTabletInfo) bool {

	if len(p.FinishTabletInfos) != len(src) {
		return false
	}
	for i, v := range p.FinishTabletInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TFinishTaskRequest) Field7DeepEqual(src *int64) bool {

	if p.TabletChecksum == src {
		return true
	} else if p.TabletChecksum == nil || src == nil {
		return false
	}
	if *p.TabletChecksum != *src {
		return false
	}
	return true
}
func (p *TFinishTaskRequest) Field8DeepEqual(src *int64) bool {

	if p.RequestVersion == src {
		return true
	} else if p.RequestVersion == nil || src == nil {
		return false
	}
	if *p.RequestVersion != *src {
		return false
	}
	return true
}
func (p *TFinishTaskRequest) Field9DeepEqual(src *int64) bool {

	if p.RequestVersionHash == src {
		return true
	} else if p.RequestVersionHash == nil || src == nil {
		return false
	}
	if *p.RequestVersionHash != *src {
		return false
	}
	return true
}
func (p *TFinishTaskRequest) Field10DeepEqual(src *string) bool {

	if p.SnapshotPath == src {
		return true
	} else if p.SnapshotPath == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SnapshotPath, *src) != 0 {
		return false
	}
	return true
}
func (p *TFinishTaskRequest) Field11DeepEqual(src []types.TTabletId) bool {

	if len(p.ErrorTabletIds) != len(src) {
		return false
	}
	for i, v := range p.ErrorTabletIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TFinishTaskRequest) Field12DeepEqual(src []string) bool {

	if len(p.SnapshotFiles) != len(src) {
		return false
	}
	for i, v := range p.SnapshotFiles {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TFinishTaskRequest) Field13DeepEqual(src map[types.TTabletId][]string) bool {

	if len(p.TabletFiles) != len(src) {
		return false
	}
	for k, v := range p.TabletFiles {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if strings.Compare(v, _src1) != 0 {
				return false
			}
		}
	}
	return true
}
func (p *TFinishTaskRequest) Field14DeepEqual(src []types.TTabletId) bool {

	if len(p.DownloadedTabletIds) != len(src) {
		return false
	}
	for i, v := range p.DownloadedTabletIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TFinishTaskRequest) Field15DeepEqual(src *int64) bool {

	if p.CopySize == src {
		return true
	} else if p.CopySize == nil || src == nil {
		return false
	}
	if *p.CopySize != *src {
		return false
	}
	return true
}
func (p *TFinishTaskRequest) Field16DeepEqual(src *int64) bool {

	if p.CopyTimeMs == src {
		return true
	} else if p.CopyTimeMs == nil || src == nil {
		return false
	}
	if *p.CopyTimeMs != *src {
		return false
	}
	return true
}
func (p *TFinishTaskRequest) Field17DeepEqual(src map[types.TTabletId]types.TVersion) bool {

	if len(p.SuccTablets) != len(src) {
		return false
	}
	for k, v := range p.SuccTablets {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TFinishTaskRequest) Field18DeepEqual(src map[int64]int64) bool {

	if len(p.TableIdToDeltaNumRows) != len(src) {
		return false
	}
	for k, v := range p.TableIdToDeltaNumRows {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TFinishTaskRequest) Field19DeepEqual(src map[int64]map[int64]int64) bool {

	if len(p.TableIdToTabletIdToDeltaNumRows) != len(src) {
		return false
	}
	for k, v := range p.TableIdToTabletIdToDeltaNumRows {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for k, v := range v {
			_src1 := _src[k]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}

type TTablet struct {
	TabletInfos []*TTabletInfo `thrift:"tablet_infos,1,required" frugal:"1,required,list<TTabletInfo>" json:"tablet_infos"`
}

func NewTTablet() *TTablet {
	return &TTablet{}
}

func (p *TTablet) InitDefault() {
}

func (p *TTablet) GetTabletInfos() (v []*TTabletInfo) {
	return p.TabletInfos
}
func (p *TTablet) SetTabletInfos(val []*TTabletInfo) {
	p.TabletInfos = val
}

var fieldIDToName_TTablet = map[int16]string{
	1: "tablet_infos",
}

func (p *TTablet) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletInfos bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletInfos = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletInfos {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTablet[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTablet[fieldId]))
}

func (p *TTablet) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTabletInfo, 0, size)
	values := make([]TTabletInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TabletInfos = _field
	return nil
}

func (p *TTablet) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTablet"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTablet) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_infos", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TabletInfos)); err != nil {
		return err
	}
	for _, v := range p.TabletInfos {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTablet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTablet(%+v)", *p)

}

func (p *TTablet) DeepEqual(ano *TTablet) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletInfos) {
		return false
	}
	return true
}

func (p *TTablet) Field1DeepEqual(src []*TTabletInfo) bool {

	if len(p.TabletInfos) != len(src) {
		return false
	}
	for i, v := range p.TabletInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TDisk struct {
	RootPath              string                `thrift:"root_path,1,required" frugal:"1,required,string" json:"root_path"`
	DiskTotalCapacity     types.TSize           `thrift:"disk_total_capacity,2,required" frugal:"2,required,i64" json:"disk_total_capacity"`
	DataUsedCapacity      types.TSize           `thrift:"data_used_capacity,3,required" frugal:"3,required,i64" json:"data_used_capacity"`
	Used                  bool                  `thrift:"used,4,required" frugal:"4,required,bool" json:"used"`
	DiskAvailableCapacity *types.TSize          `thrift:"disk_available_capacity,5,optional" frugal:"5,optional,i64" json:"disk_available_capacity,omitempty"`
	PathHash              *int64                `thrift:"path_hash,6,optional" frugal:"6,optional,i64" json:"path_hash,omitempty"`
	StorageMedium         *types.TStorageMedium `thrift:"storage_medium,7,optional" frugal:"7,optional,TStorageMedium" json:"storage_medium,omitempty"`
	RemoteUsedCapacity    *types.TSize          `thrift:"remote_used_capacity,8,optional" frugal:"8,optional,i64" json:"remote_used_capacity,omitempty"`
	TrashUsedCapacity     *types.TSize          `thrift:"trash_used_capacity,9,optional" frugal:"9,optional,i64" json:"trash_used_capacity,omitempty"`
}

func NewTDisk() *TDisk {
	return &TDisk{}
}

func (p *TDisk) InitDefault() {
}

func (p *TDisk) GetRootPath() (v string) {
	return p.RootPath
}

func (p *TDisk) GetDiskTotalCapacity() (v types.TSize) {
	return p.DiskTotalCapacity
}

func (p *TDisk) GetDataUsedCapacity() (v types.TSize) {
	return p.DataUsedCapacity
}

func (p *TDisk) GetUsed() (v bool) {
	return p.Used
}

var TDisk_DiskAvailableCapacity_DEFAULT types.TSize

func (p *TDisk) GetDiskAvailableCapacity() (v types.TSize) {
	if !p.IsSetDiskAvailableCapacity() {
		return TDisk_DiskAvailableCapacity_DEFAULT
	}
	return *p.DiskAvailableCapacity
}

var TDisk_PathHash_DEFAULT int64

func (p *TDisk) GetPathHash() (v int64) {
	if !p.IsSetPathHash() {
		return TDisk_PathHash_DEFAULT
	}
	return *p.PathHash
}

var TDisk_StorageMedium_DEFAULT types.TStorageMedium

func (p *TDisk) GetStorageMedium() (v types.TStorageMedium) {
	if !p.IsSetStorageMedium() {
		return TDisk_StorageMedium_DEFAULT
	}
	return *p.StorageMedium
}

var TDisk_RemoteUsedCapacity_DEFAULT types.TSize

func (p *TDisk) GetRemoteUsedCapacity() (v types.TSize) {
	if !p.IsSetRemoteUsedCapacity() {
		return TDisk_RemoteUsedCapacity_DEFAULT
	}
	return *p.RemoteUsedCapacity
}

var TDisk_TrashUsedCapacity_DEFAULT types.TSize

func (p *TDisk) GetTrashUsedCapacity() (v types.TSize) {
	if !p.IsSetTrashUsedCapacity() {
		return TDisk_TrashUsedCapacity_DEFAULT
	}
	return *p.TrashUsedCapacity
}
func (p *TDisk) SetRootPath(val string) {
	p.RootPath = val
}
func (p *TDisk) SetDiskTotalCapacity(val types.TSize) {
	p.DiskTotalCapacity = val
}
func (p *TDisk) SetDataUsedCapacity(val types.TSize) {
	p.DataUsedCapacity = val
}
func (p *TDisk) SetUsed(val bool) {
	p.Used = val
}
func (p *TDisk) SetDiskAvailableCapacity(val *types.TSize) {
	p.DiskAvailableCapacity = val
}
func (p *TDisk) SetPathHash(val *int64) {
	p.PathHash = val
}
func (p *TDisk) SetStorageMedium(val *types.TStorageMedium) {
	p.StorageMedium = val
}
func (p *TDisk) SetRemoteUsedCapacity(val *types.TSize) {
	p.RemoteUsedCapacity = val
}
func (p *TDisk) SetTrashUsedCapacity(val *types.TSize) {
	p.TrashUsedCapacity = val
}

var fieldIDToName_TDisk = map[int16]string{
	1: "root_path",
	2: "disk_total_capacity",
	3: "data_used_capacity",
	4: "used",
	5: "disk_available_capacity",
	6: "path_hash",
	7: "storage_medium",
	8: "remote_used_capacity",
	9: "trash_used_capacity",
}

func (p *TDisk) IsSetDiskAvailableCapacity() bool {
	return p.DiskAvailableCapacity != nil
}

func (p *TDisk) IsSetPathHash() bool {
	return p.PathHash != nil
}

func (p *TDisk) IsSetStorageMedium() bool {
	return p.StorageMedium != nil
}

func (p *TDisk) IsSetRemoteUsedCapacity() bool {
	return p.RemoteUsedCapacity != nil
}

func (p *TDisk) IsSetTrashUsedCapacity() bool {
	return p.TrashUsedCapacity != nil
}

func (p *TDisk) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRootPath bool = false
	var issetDiskTotalCapacity bool = false
	var issetDataUsedCapacity bool = false
	var issetUsed bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRootPath = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDiskTotalCapacity = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetDataUsedCapacity = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsed = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRootPath {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetDiskTotalCapacity {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetDataUsedCapacity {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetUsed {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDisk[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TDisk[fieldId]))
}

func (p *TDisk) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RootPath = _field
	return nil
}
func (p *TDisk) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TSize
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DiskTotalCapacity = _field
	return nil
}
func (p *TDisk) ReadField3(iprot thrift.TProtocol) error {

	var _field types.TSize
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DataUsedCapacity = _field
	return nil
}
func (p *TDisk) ReadField4(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Used = _field
	return nil
}
func (p *TDisk) ReadField5(iprot thrift.TProtocol) error {

	var _field *types.TSize
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DiskAvailableCapacity = _field
	return nil
}
func (p *TDisk) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PathHash = _field
	return nil
}
func (p *TDisk) ReadField7(iprot thrift.TProtocol) error {

	var _field *types.TStorageMedium
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TStorageMedium(v)
		_field = &tmp
	}
	p.StorageMedium = _field
	return nil
}
func (p *TDisk) ReadField8(iprot thrift.TProtocol) error {

	var _field *types.TSize
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RemoteUsedCapacity = _field
	return nil
}
func (p *TDisk) ReadField9(iprot thrift.TProtocol) error {

	var _field *types.TSize
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TrashUsedCapacity = _field
	return nil
}

func (p *TDisk) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDisk"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDisk) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("root_path", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RootPath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDisk) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("disk_total_capacity", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DiskTotalCapacity); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TDisk) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data_used_capacity", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DataUsedCapacity); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TDisk) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("used", thrift.BOOL, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Used); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TDisk) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDiskAvailableCapacity() {
		if err = oprot.WriteFieldBegin("disk_available_capacity", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DiskAvailableCapacity); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TDisk) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPathHash() {
		if err = oprot.WriteFieldBegin("path_hash", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PathHash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TDisk) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageMedium() {
		if err = oprot.WriteFieldBegin("storage_medium", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.StorageMedium)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TDisk) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteUsedCapacity() {
		if err = oprot.WriteFieldBegin("remote_used_capacity", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.RemoteUsedCapacity); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TDisk) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrashUsedCapacity() {
		if err = oprot.WriteFieldBegin("trash_used_capacity", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TrashUsedCapacity); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TDisk) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDisk(%+v)", *p)

}

func (p *TDisk) DeepEqual(ano *TDisk) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RootPath) {
		return false
	}
	if !p.Field2DeepEqual(ano.DiskTotalCapacity) {
		return false
	}
	if !p.Field3DeepEqual(ano.DataUsedCapacity) {
		return false
	}
	if !p.Field4DeepEqual(ano.Used) {
		return false
	}
	if !p.Field5DeepEqual(ano.DiskAvailableCapacity) {
		return false
	}
	if !p.Field6DeepEqual(ano.PathHash) {
		return false
	}
	if !p.Field7DeepEqual(ano.StorageMedium) {
		return false
	}
	if !p.Field8DeepEqual(ano.RemoteUsedCapacity) {
		return false
	}
	if !p.Field9DeepEqual(ano.TrashUsedCapacity) {
		return false
	}
	return true
}

func (p *TDisk) Field1DeepEqual(src string) bool {

	if strings.Compare(p.RootPath, src) != 0 {
		return false
	}
	return true
}
func (p *TDisk) Field2DeepEqual(src types.TSize) bool {

	if p.DiskTotalCapacity != src {
		return false
	}
	return true
}
func (p *TDisk) Field3DeepEqual(src types.TSize) bool {

	if p.DataUsedCapacity != src {
		return false
	}
	return true
}
func (p *TDisk) Field4DeepEqual(src bool) bool {

	if p.Used != src {
		return false
	}
	return true
}
func (p *TDisk) Field5DeepEqual(src *types.TSize) bool {

	if p.DiskAvailableCapacity == src {
		return true
	} else if p.DiskAvailableCapacity == nil || src == nil {
		return false
	}
	if *p.DiskAvailableCapacity != *src {
		return false
	}
	return true
}
func (p *TDisk) Field6DeepEqual(src *int64) bool {

	if p.PathHash == src {
		return true
	} else if p.PathHash == nil || src == nil {
		return false
	}
	if *p.PathHash != *src {
		return false
	}
	return true
}
func (p *TDisk) Field7DeepEqual(src *types.TStorageMedium) bool {

	if p.StorageMedium == src {
		return true
	} else if p.StorageMedium == nil || src == nil {
		return false
	}
	if *p.StorageMedium != *src {
		return false
	}
	return true
}
func (p *TDisk) Field8DeepEqual(src *types.TSize) bool {

	if p.RemoteUsedCapacity == src {
		return true
	} else if p.RemoteUsedCapacity == nil || src == nil {
		return false
	}
	if *p.RemoteUsedCapacity != *src {
		return false
	}
	return true
}
func (p *TDisk) Field9DeepEqual(src *types.TSize) bool {

	if p.TrashUsedCapacity == src {
		return true
	} else if p.TrashUsedCapacity == nil || src == nil {
		return false
	}
	if *p.TrashUsedCapacity != *src {
		return false
	}
	return true
}

type TPluginInfo struct {
	PluginName string `thrift:"plugin_name,1,required" frugal:"1,required,string" json:"plugin_name"`
	Type       int32  `thrift:"type,2,required" frugal:"2,required,i32" json:"type"`
}

func NewTPluginInfo() *TPluginInfo {
	return &TPluginInfo{}
}

func (p *TPluginInfo) InitDefault() {
}

func (p *TPluginInfo) GetPluginName() (v string) {
	return p.PluginName
}

func (p *TPluginInfo) GetType() (v int32) {
	return p.Type
}
func (p *TPluginInfo) SetPluginName(val string) {
	p.PluginName = val
}
func (p *TPluginInfo) SetType(val int32) {
	p.Type = val
}

var fieldIDToName_TPluginInfo = map[int16]string{
	1: "plugin_name",
	2: "type",
}

func (p *TPluginInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPluginName bool = false
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPluginName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPluginName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPluginInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPluginInfo[fieldId]))
}

func (p *TPluginInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PluginName = _field
	return nil
}
func (p *TPluginInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}

func (p *TPluginInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPluginInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPluginInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("plugin_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PluginName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPluginInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPluginInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPluginInfo(%+v)", *p)

}

func (p *TPluginInfo) DeepEqual(ano *TPluginInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PluginName) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *TPluginInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.PluginName, src) != 0 {
		return false
	}
	return true
}
func (p *TPluginInfo) Field2DeepEqual(src int32) bool {

	if p.Type != src {
		return false
	}
	return true
}

type TReportRequest struct {
	Backend                  *types.TBackend                       `thrift:"backend,1,required" frugal:"1,required,types.TBackend" json:"backend"`
	ReportVersion            *int64                                `thrift:"report_version,2,optional" frugal:"2,optional,i64" json:"report_version,omitempty"`
	Tasks                    map[types.TTaskType][]int64           `thrift:"tasks,3,optional" frugal:"3,optional,map<TTaskType:set<i64>>" json:"tasks,omitempty"`
	Tablets                  map[types.TTabletId]*TTablet          `thrift:"tablets,4,optional" frugal:"4,optional,map<i64:TTablet>" json:"tablets,omitempty"`
	Disks                    map[string]*TDisk                     `thrift:"disks,5,optional" frugal:"5,optional,map<string:TDisk>" json:"disks,omitempty"`
	ForceRecovery            *bool                                 `thrift:"force_recovery,6,optional" frugal:"6,optional,bool" json:"force_recovery,omitempty"`
	TabletList               []*TTablet                            `thrift:"tablet_list,7,optional" frugal:"7,optional,list<TTablet>" json:"tablet_list,omitempty"`
	TabletMaxCompactionScore *int64                                `thrift:"tablet_max_compaction_score,8,optional" frugal:"8,optional,i64" json:"tablet_max_compaction_score,omitempty"`
	StoragePolicy            []*agentservice.TStoragePolicy        `thrift:"storage_policy,9,optional" frugal:"9,optional,list<agentservice.TStoragePolicy>" json:"storage_policy,omitempty"`
	Resource                 []*agentservice.TStorageResource      `thrift:"resource,10,optional" frugal:"10,optional,list<agentservice.TStorageResource>" json:"resource,omitempty"`
	NumCores                 int32                                 `thrift:"num_cores,11" frugal:"11,default,i32" json:"num_cores"`
	PipelineExecutorSize     int32                                 `thrift:"pipeline_executor_size,12" frugal:"12,default,i32" json:"pipeline_executor_size"`
	PartitionsVersion        map[types.TPartitionId]types.TVersion `thrift:"partitions_version,13,optional" frugal:"13,optional,map<i64:i64>" json:"partitions_version,omitempty"`
}

func NewTReportRequest() *TReportRequest {
	return &TReportRequest{}
}

func (p *TReportRequest) InitDefault() {
}

var TReportRequest_Backend_DEFAULT *types.TBackend

func (p *TReportRequest) GetBackend() (v *types.TBackend) {
	if !p.IsSetBackend() {
		return TReportRequest_Backend_DEFAULT
	}
	return p.Backend
}

var TReportRequest_ReportVersion_DEFAULT int64

func (p *TReportRequest) GetReportVersion() (v int64) {
	if !p.IsSetReportVersion() {
		return TReportRequest_ReportVersion_DEFAULT
	}
	return *p.ReportVersion
}

var TReportRequest_Tasks_DEFAULT map[types.TTaskType][]int64

func (p *TReportRequest) GetTasks() (v map[types.TTaskType][]int64) {
	if !p.IsSetTasks() {
		return TReportRequest_Tasks_DEFAULT
	}
	return p.Tasks
}

var TReportRequest_Tablets_DEFAULT map[types.TTabletId]*TTablet

func (p *TReportRequest) GetTablets() (v map[types.TTabletId]*TTablet) {
	if !p.IsSetTablets() {
		return TReportRequest_Tablets_DEFAULT
	}
	return p.Tablets
}

var TReportRequest_Disks_DEFAULT map[string]*TDisk

func (p *TReportRequest) GetDisks() (v map[string]*TDisk) {
	if !p.IsSetDisks() {
		return TReportRequest_Disks_DEFAULT
	}
	return p.Disks
}

var TReportRequest_ForceRecovery_DEFAULT bool

func (p *TReportRequest) GetForceRecovery() (v bool) {
	if !p.IsSetForceRecovery() {
		return TReportRequest_ForceRecovery_DEFAULT
	}
	return *p.ForceRecovery
}

var TReportRequest_TabletList_DEFAULT []*TTablet

func (p *TReportRequest) GetTabletList() (v []*TTablet) {
	if !p.IsSetTabletList() {
		return TReportRequest_TabletList_DEFAULT
	}
	return p.TabletList
}

var TReportRequest_TabletMaxCompactionScore_DEFAULT int64

func (p *TReportRequest) GetTabletMaxCompactionScore() (v int64) {
	if !p.IsSetTabletMaxCompactionScore() {
		return TReportRequest_TabletMaxCompactionScore_DEFAULT
	}
	return *p.TabletMaxCompactionScore
}

var TReportRequest_StoragePolicy_DEFAULT []*agentservice.TStoragePolicy

func (p *TReportRequest) GetStoragePolicy() (v []*agentservice.TStoragePolicy) {
	if !p.IsSetStoragePolicy() {
		return TReportRequest_StoragePolicy_DEFAULT
	}
	return p.StoragePolicy
}

var TReportRequest_Resource_DEFAULT []*agentservice.TStorageResource

func (p *TReportRequest) GetResource() (v []*agentservice.TStorageResource) {
	if !p.IsSetResource() {
		return TReportRequest_Resource_DEFAULT
	}
	return p.Resource
}

func (p *TReportRequest) GetNumCores() (v int32) {
	return p.NumCores
}

func (p *TReportRequest) GetPipelineExecutorSize() (v int32) {
	return p.PipelineExecutorSize
}

var TReportRequest_PartitionsVersion_DEFAULT map[types.TPartitionId]types.TVersion

func (p *TReportRequest) GetPartitionsVersion() (v map[types.TPartitionId]types.TVersion) {
	if !p.IsSetPartitionsVersion() {
		return TReportRequest_PartitionsVersion_DEFAULT
	}
	return p.PartitionsVersion
}
func (p *TReportRequest) SetBackend(val *types.TBackend) {
	p.Backend = val
}
func (p *TReportRequest) SetReportVersion(val *int64) {
	p.ReportVersion = val
}
func (p *TReportRequest) SetTasks(val map[types.TTaskType][]int64) {
	p.Tasks = val
}
func (p *TReportRequest) SetTablets(val map[types.TTabletId]*TTablet) {
	p.Tablets = val
}
func (p *TReportRequest) SetDisks(val map[string]*TDisk) {
	p.Disks = val
}
func (p *TReportRequest) SetForceRecovery(val *bool) {
	p.ForceRecovery = val
}
func (p *TReportRequest) SetTabletList(val []*TTablet) {
	p.TabletList = val
}
func (p *TReportRequest) SetTabletMaxCompactionScore(val *int64) {
	p.TabletMaxCompactionScore = val
}
func (p *TReportRequest) SetStoragePolicy(val []*agentservice.TStoragePolicy) {
	p.StoragePolicy = val
}
func (p *TReportRequest) SetResource(val []*agentservice.TStorageResource) {
	p.Resource = val
}
func (p *TReportRequest) SetNumCores(val int32) {
	p.NumCores = val
}
func (p *TReportRequest) SetPipelineExecutorSize(val int32) {
	p.PipelineExecutorSize = val
}
func (p *TReportRequest) SetPartitionsVersion(val map[types.TPartitionId]types.TVersion) {
	p.PartitionsVersion = val
}

var fieldIDToName_TReportRequest = map[int16]string{
	1:  "backend",
	2:  "report_version",
	3:  "tasks",
	4:  "tablets",
	5:  "disks",
	6:  "force_recovery",
	7:  "tablet_list",
	8:  "tablet_max_compaction_score",
	9:  "storage_policy",
	10: "resource",
	11: "num_cores",
	12: "pipeline_executor_size",
	13: "partitions_version",
}

func (p *TReportRequest) IsSetBackend() bool {
	return p.Backend != nil
}

func (p *TReportRequest) IsSetReportVersion() bool {
	return p.ReportVersion != nil
}

func (p *TReportRequest) IsSetTasks() bool {
	return p.Tasks != nil
}

func (p *TReportRequest) IsSetTablets() bool {
	return p.Tablets != nil
}

func (p *TReportRequest) IsSetDisks() bool {
	return p.Disks != nil
}

func (p *TReportRequest) IsSetForceRecovery() bool {
	return p.ForceRecovery != nil
}

func (p *TReportRequest) IsSetTabletList() bool {
	return p.TabletList != nil
}

func (p *TReportRequest) IsSetTabletMaxCompactionScore() bool {
	return p.TabletMaxCompactionScore != nil
}

func (p *TReportRequest) IsSetStoragePolicy() bool {
	return p.StoragePolicy != nil
}

func (p *TReportRequest) IsSetResource() bool {
	return p.Resource != nil
}

func (p *TReportRequest) IsSetPartitionsVersion() bool {
	return p.PartitionsVersion != nil
}

func (p *TReportRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBackend bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBackend = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBackend {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TReportRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TReportRequest[fieldId]))
}

func (p *TReportRequest) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTBackend()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Backend = _field
	return nil
}
func (p *TReportRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReportVersion = _field
	return nil
}
func (p *TReportRequest) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TTaskType][]int64, size)
	for i := 0; i < size; i++ {
		var _key types.TTaskType
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = types.TTaskType(v)
		}
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return err
		}
		_val := make([]int64, 0, size)
		for i := 0; i < size; i++ {

			var _elem int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Tasks = _field
	return nil
}
func (p *TReportRequest) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TTabletId]*TTablet, size)
	values := make([]TTablet, size)
	for i := 0; i < size; i++ {
		var _key types.TTabletId
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Tablets = _field
	return nil
}
func (p *TReportRequest) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]*TDisk, size)
	values := make([]TDisk, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Disks = _field
	return nil
}
func (p *TReportRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ForceRecovery = _field
	return nil
}
func (p *TReportRequest) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTablet, 0, size)
	values := make([]TTablet, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TabletList = _field
	return nil
}
func (p *TReportRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TabletMaxCompactionScore = _field
	return nil
}
func (p *TReportRequest) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*agentservice.TStoragePolicy, 0, size)
	values := make([]agentservice.TStoragePolicy, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.StoragePolicy = _field
	return nil
}
func (p *TReportRequest) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*agentservice.TStorageResource, 0, size)
	values := make([]agentservice.TStorageResource, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Resource = _field
	return nil
}
func (p *TReportRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumCores = _field
	return nil
}
func (p *TReportRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PipelineExecutorSize = _field
	return nil
}
func (p *TReportRequest) ReadField13(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TPartitionId]types.TVersion, size)
	for i := 0; i < size; i++ {
		var _key types.TPartitionId
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val types.TVersion
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.PartitionsVersion = _field
	return nil
}

func (p *TReportRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TReportRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TReportRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("backend", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Backend.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TReportRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetReportVersion() {
		if err = oprot.WriteFieldBegin("report_version", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ReportVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TReportRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTasks() {
		if err = oprot.WriteFieldBegin("tasks", thrift.MAP, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.SET, len(p.Tasks)); err != nil {
			return err
		}
		for k, v := range p.Tasks {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return err
			}
			if err := oprot.WriteSetBegin(thrift.I64, len(v)); err != nil {
				return err
			}
			for i := 0; i < len(v); i++ {
				for j := i + 1; j < len(v); j++ {
					if func(tgt, src int64) bool {
						if tgt != src {
							return false
						}
						return true
					}(v[i], v[j]) {
						return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
					}
				}
			}
			for _, v := range v {
				if err := oprot.WriteI64(v); err != nil {
					return err
				}
			}
			if err := oprot.WriteSetEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TReportRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTablets() {
		if err = oprot.WriteFieldBegin("tablets", thrift.MAP, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(p.Tablets)); err != nil {
			return err
		}
		for k, v := range p.Tablets {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TReportRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisks() {
		if err = oprot.WriteFieldBegin("disks", thrift.MAP, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Disks)); err != nil {
			return err
		}
		for k, v := range p.Disks {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TReportRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetForceRecovery() {
		if err = oprot.WriteFieldBegin("force_recovery", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ForceRecovery); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TReportRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletList() {
		if err = oprot.WriteFieldBegin("tablet_list", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TabletList)); err != nil {
			return err
		}
		for _, v := range p.TabletList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TReportRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletMaxCompactionScore() {
		if err = oprot.WriteFieldBegin("tablet_max_compaction_score", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TabletMaxCompactionScore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TReportRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoragePolicy() {
		if err = oprot.WriteFieldBegin("storage_policy", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StoragePolicy)); err != nil {
			return err
		}
		for _, v := range p.StoragePolicy {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TReportRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetResource() {
		if err = oprot.WriteFieldBegin("resource", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Resource)); err != nil {
			return err
		}
		for _, v := range p.Resource {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TReportRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("num_cores", thrift.I32, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NumCores); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TReportRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pipeline_executor_size", thrift.I32, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PipelineExecutorSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TReportRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionsVersion() {
		if err = oprot.WriteFieldBegin("partitions_version", thrift.MAP, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.I64, len(p.PartitionsVersion)); err != nil {
			return err
		}
		for k, v := range p.PartitionsVersion {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TReportRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TReportRequest(%+v)", *p)

}

func (p *TReportRequest) DeepEqual(ano *TReportRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Backend) {
		return false
	}
	if !p.Field2DeepEqual(ano.ReportVersion) {
		return false
	}
	if !p.Field3DeepEqual(ano.Tasks) {
		return false
	}
	if !p.Field4DeepEqual(ano.Tablets) {
		return false
	}
	if !p.Field5DeepEqual(ano.Disks) {
		return false
	}
	if !p.Field6DeepEqual(ano.ForceRecovery) {
		return false
	}
	if !p.Field7DeepEqual(ano.TabletList) {
		return false
	}
	if !p.Field8DeepEqual(ano.TabletMaxCompactionScore) {
		return false
	}
	if !p.Field9DeepEqual(ano.StoragePolicy) {
		return false
	}
	if !p.Field10DeepEqual(ano.Resource) {
		return false
	}
	if !p.Field11DeepEqual(ano.NumCores) {
		return false
	}
	if !p.Field12DeepEqual(ano.PipelineExecutorSize) {
		return false
	}
	if !p.Field13DeepEqual(ano.PartitionsVersion) {
		return false
	}
	return true
}

func (p *TReportRequest) Field1DeepEqual(src *types.TBackend) bool {

	if !p.Backend.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TReportRequest) Field2DeepEqual(src *int64) bool {

	if p.ReportVersion == src {
		return true
	} else if p.ReportVersion == nil || src == nil {
		return false
	}
	if *p.ReportVersion != *src {
		return false
	}
	return true
}
func (p *TReportRequest) Field3DeepEqual(src map[types.TTaskType][]int64) bool {

	if len(p.Tasks) != len(src) {
		return false
	}
	for k, v := range p.Tasks {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}
func (p *TReportRequest) Field4DeepEqual(src map[types.TTabletId]*TTablet) bool {

	if len(p.Tablets) != len(src) {
		return false
	}
	for k, v := range p.Tablets {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TReportRequest) Field5DeepEqual(src map[string]*TDisk) bool {

	if len(p.Disks) != len(src) {
		return false
	}
	for k, v := range p.Disks {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TReportRequest) Field6DeepEqual(src *bool) bool {

	if p.ForceRecovery == src {
		return true
	} else if p.ForceRecovery == nil || src == nil {
		return false
	}
	if *p.ForceRecovery != *src {
		return false
	}
	return true
}
func (p *TReportRequest) Field7DeepEqual(src []*TTablet) bool {

	if len(p.TabletList) != len(src) {
		return false
	}
	for i, v := range p.TabletList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TReportRequest) Field8DeepEqual(src *int64) bool {

	if p.TabletMaxCompactionScore == src {
		return true
	} else if p.TabletMaxCompactionScore == nil || src == nil {
		return false
	}
	if *p.TabletMaxCompactionScore != *src {
		return false
	}
	return true
}
func (p *TReportRequest) Field9DeepEqual(src []*agentservice.TStoragePolicy) bool {

	if len(p.StoragePolicy) != len(src) {
		return false
	}
	for i, v := range p.StoragePolicy {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TReportRequest) Field10DeepEqual(src []*agentservice.TStorageResource) bool {

	if len(p.Resource) != len(src) {
		return false
	}
	for i, v := range p.Resource {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TReportRequest) Field11DeepEqual(src int32) bool {

	if p.NumCores != src {
		return false
	}
	return true
}
func (p *TReportRequest) Field12DeepEqual(src int32) bool {

	if p.PipelineExecutorSize != src {
		return false
	}
	return true
}
func (p *TReportRequest) Field13DeepEqual(src map[types.TPartitionId]types.TVersion) bool {

	if len(p.PartitionsVersion) != len(src) {
		return false
	}
	for k, v := range p.PartitionsVersion {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}

type TMasterResult_ struct {
	Status *status.TStatus `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
}

func NewTMasterResult_() *TMasterResult_ {
	return &TMasterResult_{}
}

func (p *TMasterResult_) InitDefault() {
}

var TMasterResult__Status_DEFAULT *status.TStatus

func (p *TMasterResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TMasterResult__Status_DEFAULT
	}
	return p.Status
}
func (p *TMasterResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}

var fieldIDToName_TMasterResult_ = map[int16]string{
	1: "status",
}

func (p *TMasterResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TMasterResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMasterResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TMasterResult_[fieldId]))
}

func (p *TMasterResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}

func (p *TMasterResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMasterResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMasterResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMasterResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMasterResult_(%+v)", *p)

}

func (p *TMasterResult_) DeepEqual(ano *TMasterResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *TMasterResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type TResourceGroup struct {
	ResourceByType map[TResourceType]int32 `thrift:"resourceByType,1,required" frugal:"1,required,map<TResourceType:i32>" json:"resourceByType"`
}

func NewTResourceGroup() *TResourceGroup {
	return &TResourceGroup{}
}

func (p *TResourceGroup) InitDefault() {
}

func (p *TResourceGroup) GetResourceByType() (v map[TResourceType]int32) {
	return p.ResourceByType
}
func (p *TResourceGroup) SetResourceByType(val map[TResourceType]int32) {
	p.ResourceByType = val
}

var fieldIDToName_TResourceGroup = map[int16]string{
	1: "resourceByType",
}

func (p *TResourceGroup) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetResourceByType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetResourceByType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetResourceByType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TResourceGroup[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TResourceGroup[fieldId]))
}

func (p *TResourceGroup) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[TResourceType]int32, size)
	for i := 0; i < size; i++ {
		var _key TResourceType
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = TResourceType(v)
		}

		var _val int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.ResourceByType = _field
	return nil
}

func (p *TResourceGroup) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TResourceGroup"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TResourceGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resourceByType", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.ResourceByType)); err != nil {
		return err
	}
	for k, v := range p.ResourceByType {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return err
		}
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TResourceGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TResourceGroup(%+v)", *p)

}

func (p *TResourceGroup) DeepEqual(ano *TResourceGroup) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ResourceByType) {
		return false
	}
	return true
}

func (p *TResourceGroup) Field1DeepEqual(src map[TResourceType]int32) bool {

	if len(p.ResourceByType) != len(src) {
		return false
	}
	for k, v := range p.ResourceByType {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}

type TUserResource struct {
	Resource     *TResourceGroup  `thrift:"resource,1,required" frugal:"1,required,TResourceGroup" json:"resource"`
	ShareByGroup map[string]int32 `thrift:"shareByGroup,2,required" frugal:"2,required,map<string:i32>" json:"shareByGroup"`
}

func NewTUserResource() *TUserResource {
	return &TUserResource{}
}

func (p *TUserResource) InitDefault() {
}

var TUserResource_Resource_DEFAULT *TResourceGroup

func (p *TUserResource) GetResource() (v *TResourceGroup) {
	if !p.IsSetResource() {
		return TUserResource_Resource_DEFAULT
	}
	return p.Resource
}

func (p *TUserResource) GetShareByGroup() (v map[string]int32) {
	return p.ShareByGroup
}
func (p *TUserResource) SetResource(val *TResourceGroup) {
	p.Resource = val
}
func (p *TUserResource) SetShareByGroup(val map[string]int32) {
	p.ShareByGroup = val
}

var fieldIDToName_TUserResource = map[int16]string{
	1: "resource",
	2: "shareByGroup",
}

func (p *TUserResource) IsSetResource() bool {
	return p.Resource != nil
}

func (p *TUserResource) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetResource bool = false
	var issetShareByGroup bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetResource = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetShareByGroup = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetResource {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetShareByGroup {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TUserResource[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TUserResource[fieldId]))
}

func (p *TUserResource) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTResourceGroup()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Resource = _field
	return nil
}
func (p *TUserResource) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]int32, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.ShareByGroup = _field
	return nil
}

func (p *TUserResource) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TUserResource"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TUserResource) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resource", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resource.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TUserResource) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shareByGroup", thrift.MAP, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.ShareByGroup)); err != nil {
		return err
	}
	for k, v := range p.ShareByGroup {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TUserResource) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TUserResource(%+v)", *p)

}

func (p *TUserResource) DeepEqual(ano *TUserResource) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Resource) {
		return false
	}
	if !p.Field2DeepEqual(ano.ShareByGroup) {
		return false
	}
	return true
}

func (p *TUserResource) Field1DeepEqual(src *TResourceGroup) bool {

	if !p.Resource.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TUserResource) Field2DeepEqual(src map[string]int32) bool {

	if len(p.ShareByGroup) != len(src) {
		return false
	}
	for k, v := range p.ShareByGroup {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}

type TFetchResourceResult_ struct {
	ProtocolVersion agentservice.TAgentServiceVersion `thrift:"protocolVersion,1,required" frugal:"1,required,TAgentServiceVersion" json:"protocolVersion"`
	ResourceVersion int64                             `thrift:"resourceVersion,2,required" frugal:"2,required,i64" json:"resourceVersion"`
	ResourceByUser  map[string]*TUserResource         `thrift:"resourceByUser,3,required" frugal:"3,required,map<string:TUserResource>" json:"resourceByUser"`
}

func NewTFetchResourceResult_() *TFetchResourceResult_ {
	return &TFetchResourceResult_{}
}

func (p *TFetchResourceResult_) InitDefault() {
}

func (p *TFetchResourceResult_) GetProtocolVersion() (v agentservice.TAgentServiceVersion) {
	return p.ProtocolVersion
}

func (p *TFetchResourceResult_) GetResourceVersion() (v int64) {
	return p.ResourceVersion
}

func (p *TFetchResourceResult_) GetResourceByUser() (v map[string]*TUserResource) {
	return p.ResourceByUser
}
func (p *TFetchResourceResult_) SetProtocolVersion(val agentservice.TAgentServiceVersion) {
	p.ProtocolVersion = val
}
func (p *TFetchResourceResult_) SetResourceVersion(val int64) {
	p.ResourceVersion = val
}
func (p *TFetchResourceResult_) SetResourceByUser(val map[string]*TUserResource) {
	p.ResourceByUser = val
}

var fieldIDToName_TFetchResourceResult_ = map[int16]string{
	1: "protocolVersion",
	2: "resourceVersion",
	3: "resourceByUser",
}

func (p *TFetchResourceResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false
	var issetResourceVersion bool = false
	var issetResourceByUser bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetResourceVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetResourceByUser = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetResourceVersion {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetResourceByUser {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFetchResourceResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFetchResourceResult_[fieldId]))
}

func (p *TFetchResourceResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field agentservice.TAgentServiceVersion
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = agentservice.TAgentServiceVersion(v)
	}
	p.ProtocolVersion = _field
	return nil
}
func (p *TFetchResourceResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ResourceVersion = _field
	return nil
}
func (p *TFetchResourceResult_) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]*TUserResource, size)
	values := make([]TUserResource, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.ResourceByUser = _field
	return nil
}

func (p *TFetchResourceResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFetchResourceResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFetchResourceResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("protocolVersion", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFetchResourceResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resourceVersion", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ResourceVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFetchResourceResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resourceByUser", thrift.MAP, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ResourceByUser)); err != nil {
		return err
	}
	for k, v := range p.ResourceByUser {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TFetchResourceResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFetchResourceResult_(%+v)", *p)

}

func (p *TFetchResourceResult_) DeepEqual(ano *TFetchResourceResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ProtocolVersion) {
		return false
	}
	if !p.Field2DeepEqual(ano.ResourceVersion) {
		return false
	}
	if !p.Field3DeepEqual(ano.ResourceByUser) {
		return false
	}
	return true
}

func (p *TFetchResourceResult_) Field1DeepEqual(src agentservice.TAgentServiceVersion) bool {

	if p.ProtocolVersion != src {
		return false
	}
	return true
}
func (p *TFetchResourceResult_) Field2DeepEqual(src int64) bool {

	if p.ResourceVersion != src {
		return false
	}
	return true
}
func (p *TFetchResourceResult_) Field3DeepEqual(src map[string]*TUserResource) bool {

	if len(p.ResourceByUser) != len(src) {
		return false
	}
	for k, v := range p.ResourceByUser {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
