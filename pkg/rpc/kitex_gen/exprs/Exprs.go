// Code generated by thriftgo (0.3.13). DO NOT EDIT.

package exprs

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/opcodes"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/types"
	"strings"
)

type TExprNodeType int64

const (
	TExprNodeType_AGG_EXPR                  TExprNodeType = 0
	TExprNodeType_ARITHMETIC_EXPR           TExprNodeType = 1
	TExprNodeType_BINARY_PRED               TExprNodeType = 2
	TExprNodeType_BOOL_LITERAL              TExprNodeType = 3
	TExprNodeType_CASE_EXPR                 TExprNodeType = 4
	TExprNodeType_CAST_EXPR                 TExprNodeType = 5
	TExprNodeType_COMPOUND_PRED             TExprNodeType = 6
	TExprNodeType_DATE_LITERAL              TExprNodeType = 7
	TExprNodeType_FLOAT_LITERAL             TExprNodeType = 8
	TExprNodeType_INT_LITERAL               TExprNodeType = 9
	TExprNodeType_DECIMAL_LITERAL           TExprNodeType = 10
	TExprNodeType_IN_PRED                   TExprNodeType = 11
	TExprNodeType_IS_NULL_PRED              TExprNodeType = 12
	TExprNodeType_LIKE_PRED                 TExprNodeType = 13
	TExprNodeType_LITERAL_PRED              TExprNodeType = 14
	TExprNodeType_NULL_LITERAL              TExprNodeType = 15
	TExprNodeType_SLOT_REF                  TExprNodeType = 16
	TExprNodeType_STRING_LITERAL            TExprNodeType = 17
	TExprNodeType_TUPLE_IS_NULL_PRED        TExprNodeType = 18
	TExprNodeType_INFO_FUNC                 TExprNodeType = 19
	TExprNodeType_FUNCTION_CALL             TExprNodeType = 20
	TExprNodeType_ARRAY_LITERAL             TExprNodeType = 21
	TExprNodeType_COMPUTE_FUNCTION_CALL     TExprNodeType = 22
	TExprNodeType_LARGE_INT_LITERAL         TExprNodeType = 23
	TExprNodeType_BLOOM_PRED                TExprNodeType = 24
	TExprNodeType_JSON_LITERAL              TExprNodeType = 25
	TExprNodeType_BITMAP_PRED               TExprNodeType = 26
	TExprNodeType_MATCH_PRED                TExprNodeType = 27
	TExprNodeType_MAP_LITERAL               TExprNodeType = 28
	TExprNodeType_STRUCT_LITERAL            TExprNodeType = 29
	TExprNodeType_SCHEMA_CHANGE_EXPR        TExprNodeType = 30
	TExprNodeType_LAMBDA_FUNCTION_EXPR      TExprNodeType = 31
	TExprNodeType_LAMBDA_FUNCTION_CALL_EXPR TExprNodeType = 32
	TExprNodeType_COLUMN_REF                TExprNodeType = 33
	TExprNodeType_IPV4_LITERAL              TExprNodeType = 34
	TExprNodeType_IPV6_LITERAL              TExprNodeType = 35
	TExprNodeType_NULL_AWARE_IN_PRED        TExprNodeType = 36
	TExprNodeType_NULL_AWARE_BINARY_PRED    TExprNodeType = 37
)

func (p TExprNodeType) String() string {
	switch p {
	case TExprNodeType_AGG_EXPR:
		return "AGG_EXPR"
	case TExprNodeType_ARITHMETIC_EXPR:
		return "ARITHMETIC_EXPR"
	case TExprNodeType_BINARY_PRED:
		return "BINARY_PRED"
	case TExprNodeType_BOOL_LITERAL:
		return "BOOL_LITERAL"
	case TExprNodeType_CASE_EXPR:
		return "CASE_EXPR"
	case TExprNodeType_CAST_EXPR:
		return "CAST_EXPR"
	case TExprNodeType_COMPOUND_PRED:
		return "COMPOUND_PRED"
	case TExprNodeType_DATE_LITERAL:
		return "DATE_LITERAL"
	case TExprNodeType_FLOAT_LITERAL:
		return "FLOAT_LITERAL"
	case TExprNodeType_INT_LITERAL:
		return "INT_LITERAL"
	case TExprNodeType_DECIMAL_LITERAL:
		return "DECIMAL_LITERAL"
	case TExprNodeType_IN_PRED:
		return "IN_PRED"
	case TExprNodeType_IS_NULL_PRED:
		return "IS_NULL_PRED"
	case TExprNodeType_LIKE_PRED:
		return "LIKE_PRED"
	case TExprNodeType_LITERAL_PRED:
		return "LITERAL_PRED"
	case TExprNodeType_NULL_LITERAL:
		return "NULL_LITERAL"
	case TExprNodeType_SLOT_REF:
		return "SLOT_REF"
	case TExprNodeType_STRING_LITERAL:
		return "STRING_LITERAL"
	case TExprNodeType_TUPLE_IS_NULL_PRED:
		return "TUPLE_IS_NULL_PRED"
	case TExprNodeType_INFO_FUNC:
		return "INFO_FUNC"
	case TExprNodeType_FUNCTION_CALL:
		return "FUNCTION_CALL"
	case TExprNodeType_ARRAY_LITERAL:
		return "ARRAY_LITERAL"
	case TExprNodeType_COMPUTE_FUNCTION_CALL:
		return "COMPUTE_FUNCTION_CALL"
	case TExprNodeType_LARGE_INT_LITERAL:
		return "LARGE_INT_LITERAL"
	case TExprNodeType_BLOOM_PRED:
		return "BLOOM_PRED"
	case TExprNodeType_JSON_LITERAL:
		return "JSON_LITERAL"
	case TExprNodeType_BITMAP_PRED:
		return "BITMAP_PRED"
	case TExprNodeType_MATCH_PRED:
		return "MATCH_PRED"
	case TExprNodeType_MAP_LITERAL:
		return "MAP_LITERAL"
	case TExprNodeType_STRUCT_LITERAL:
		return "STRUCT_LITERAL"
	case TExprNodeType_SCHEMA_CHANGE_EXPR:
		return "SCHEMA_CHANGE_EXPR"
	case TExprNodeType_LAMBDA_FUNCTION_EXPR:
		return "LAMBDA_FUNCTION_EXPR"
	case TExprNodeType_LAMBDA_FUNCTION_CALL_EXPR:
		return "LAMBDA_FUNCTION_CALL_EXPR"
	case TExprNodeType_COLUMN_REF:
		return "COLUMN_REF"
	case TExprNodeType_IPV4_LITERAL:
		return "IPV4_LITERAL"
	case TExprNodeType_IPV6_LITERAL:
		return "IPV6_LITERAL"
	case TExprNodeType_NULL_AWARE_IN_PRED:
		return "NULL_AWARE_IN_PRED"
	case TExprNodeType_NULL_AWARE_BINARY_PRED:
		return "NULL_AWARE_BINARY_PRED"
	}
	return "<UNSET>"
}

func TExprNodeTypeFromString(s string) (TExprNodeType, error) {
	switch s {
	case "AGG_EXPR":
		return TExprNodeType_AGG_EXPR, nil
	case "ARITHMETIC_EXPR":
		return TExprNodeType_ARITHMETIC_EXPR, nil
	case "BINARY_PRED":
		return TExprNodeType_BINARY_PRED, nil
	case "BOOL_LITERAL":
		return TExprNodeType_BOOL_LITERAL, nil
	case "CASE_EXPR":
		return TExprNodeType_CASE_EXPR, nil
	case "CAST_EXPR":
		return TExprNodeType_CAST_EXPR, nil
	case "COMPOUND_PRED":
		return TExprNodeType_COMPOUND_PRED, nil
	case "DATE_LITERAL":
		return TExprNodeType_DATE_LITERAL, nil
	case "FLOAT_LITERAL":
		return TExprNodeType_FLOAT_LITERAL, nil
	case "INT_LITERAL":
		return TExprNodeType_INT_LITERAL, nil
	case "DECIMAL_LITERAL":
		return TExprNodeType_DECIMAL_LITERAL, nil
	case "IN_PRED":
		return TExprNodeType_IN_PRED, nil
	case "IS_NULL_PRED":
		return TExprNodeType_IS_NULL_PRED, nil
	case "LIKE_PRED":
		return TExprNodeType_LIKE_PRED, nil
	case "LITERAL_PRED":
		return TExprNodeType_LITERAL_PRED, nil
	case "NULL_LITERAL":
		return TExprNodeType_NULL_LITERAL, nil
	case "SLOT_REF":
		return TExprNodeType_SLOT_REF, nil
	case "STRING_LITERAL":
		return TExprNodeType_STRING_LITERAL, nil
	case "TUPLE_IS_NULL_PRED":
		return TExprNodeType_TUPLE_IS_NULL_PRED, nil
	case "INFO_FUNC":
		return TExprNodeType_INFO_FUNC, nil
	case "FUNCTION_CALL":
		return TExprNodeType_FUNCTION_CALL, nil
	case "ARRAY_LITERAL":
		return TExprNodeType_ARRAY_LITERAL, nil
	case "COMPUTE_FUNCTION_CALL":
		return TExprNodeType_COMPUTE_FUNCTION_CALL, nil
	case "LARGE_INT_LITERAL":
		return TExprNodeType_LARGE_INT_LITERAL, nil
	case "BLOOM_PRED":
		return TExprNodeType_BLOOM_PRED, nil
	case "JSON_LITERAL":
		return TExprNodeType_JSON_LITERAL, nil
	case "BITMAP_PRED":
		return TExprNodeType_BITMAP_PRED, nil
	case "MATCH_PRED":
		return TExprNodeType_MATCH_PRED, nil
	case "MAP_LITERAL":
		return TExprNodeType_MAP_LITERAL, nil
	case "STRUCT_LITERAL":
		return TExprNodeType_STRUCT_LITERAL, nil
	case "SCHEMA_CHANGE_EXPR":
		return TExprNodeType_SCHEMA_CHANGE_EXPR, nil
	case "LAMBDA_FUNCTION_EXPR":
		return TExprNodeType_LAMBDA_FUNCTION_EXPR, nil
	case "LAMBDA_FUNCTION_CALL_EXPR":
		return TExprNodeType_LAMBDA_FUNCTION_CALL_EXPR, nil
	case "COLUMN_REF":
		return TExprNodeType_COLUMN_REF, nil
	case "IPV4_LITERAL":
		return TExprNodeType_IPV4_LITERAL, nil
	case "IPV6_LITERAL":
		return TExprNodeType_IPV6_LITERAL, nil
	case "NULL_AWARE_IN_PRED":
		return TExprNodeType_NULL_AWARE_IN_PRED, nil
	case "NULL_AWARE_BINARY_PRED":
		return TExprNodeType_NULL_AWARE_BINARY_PRED, nil
	}
	return TExprNodeType(0), fmt.Errorf("not a valid TExprNodeType string")
}

func TExprNodeTypePtr(v TExprNodeType) *TExprNodeType { return &v }
func (p *TExprNodeType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TExprNodeType(result.Int64)
	return
}

func (p *TExprNodeType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TNullSide int64

const (
	TNullSide_LEFT  TNullSide = 0
	TNullSide_RIGHT TNullSide = 1
)

func (p TNullSide) String() string {
	switch p {
	case TNullSide_LEFT:
		return "LEFT"
	case TNullSide_RIGHT:
		return "RIGHT"
	}
	return "<UNSET>"
}

func TNullSideFromString(s string) (TNullSide, error) {
	switch s {
	case "LEFT":
		return TNullSide_LEFT, nil
	case "RIGHT":
		return TNullSide_RIGHT, nil
	}
	return TNullSide(0), fmt.Errorf("not a valid TNullSide string")
}

func TNullSidePtr(v TNullSide) *TNullSide { return &v }
func (p *TNullSide) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TNullSide(result.Int64)
	return
}

func (p *TNullSide) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TAggregateExpr struct {
	IsMergeAgg bool               `thrift:"is_merge_agg,1,required" frugal:"1,required,bool" json:"is_merge_agg"`
	ParamTypes []*types.TTypeDesc `thrift:"param_types,2,optional" frugal:"2,optional,list<types.TTypeDesc>" json:"param_types,omitempty"`
}

func NewTAggregateExpr() *TAggregateExpr {
	return &TAggregateExpr{}
}

func (p *TAggregateExpr) InitDefault() {
}

func (p *TAggregateExpr) GetIsMergeAgg() (v bool) {
	return p.IsMergeAgg
}

var TAggregateExpr_ParamTypes_DEFAULT []*types.TTypeDesc

func (p *TAggregateExpr) GetParamTypes() (v []*types.TTypeDesc) {
	if !p.IsSetParamTypes() {
		return TAggregateExpr_ParamTypes_DEFAULT
	}
	return p.ParamTypes
}
func (p *TAggregateExpr) SetIsMergeAgg(val bool) {
	p.IsMergeAgg = val
}
func (p *TAggregateExpr) SetParamTypes(val []*types.TTypeDesc) {
	p.ParamTypes = val
}

var fieldIDToName_TAggregateExpr = map[int16]string{
	1: "is_merge_agg",
	2: "param_types",
}

func (p *TAggregateExpr) IsSetParamTypes() bool {
	return p.ParamTypes != nil
}

func (p *TAggregateExpr) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetIsMergeAgg bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsMergeAgg = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetIsMergeAgg {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAggregateExpr[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAggregateExpr[fieldId]))
}

func (p *TAggregateExpr) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsMergeAgg = _field
	return nil
}
func (p *TAggregateExpr) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*types.TTypeDesc, 0, size)
	values := make([]types.TTypeDesc, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ParamTypes = _field
	return nil
}

func (p *TAggregateExpr) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAggregateExpr"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAggregateExpr) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_merge_agg", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsMergeAgg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAggregateExpr) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetParamTypes() {
		if err = oprot.WriteFieldBegin("param_types", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ParamTypes)); err != nil {
			return err
		}
		for _, v := range p.ParamTypes {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAggregateExpr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAggregateExpr(%+v)", *p)

}

func (p *TAggregateExpr) DeepEqual(ano *TAggregateExpr) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IsMergeAgg) {
		return false
	}
	if !p.Field2DeepEqual(ano.ParamTypes) {
		return false
	}
	return true
}

func (p *TAggregateExpr) Field1DeepEqual(src bool) bool {

	if p.IsMergeAgg != src {
		return false
	}
	return true
}
func (p *TAggregateExpr) Field2DeepEqual(src []*types.TTypeDesc) bool {

	if len(p.ParamTypes) != len(src) {
		return false
	}
	for i, v := range p.ParamTypes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TBoolLiteral struct {
	Value bool `thrift:"value,1,required" frugal:"1,required,bool" json:"value"`
}

func NewTBoolLiteral() *TBoolLiteral {
	return &TBoolLiteral{}
}

func (p *TBoolLiteral) InitDefault() {
}

func (p *TBoolLiteral) GetValue() (v bool) {
	return p.Value
}
func (p *TBoolLiteral) SetValue(val bool) {
	p.Value = val
}

var fieldIDToName_TBoolLiteral = map[int16]string{
	1: "value",
}

func (p *TBoolLiteral) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetValue bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetValue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetValue {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TBoolLiteral[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TBoolLiteral[fieldId]))
}

func (p *TBoolLiteral) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}

func (p *TBoolLiteral) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TBoolLiteral"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TBoolLiteral) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TBoolLiteral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBoolLiteral(%+v)", *p)

}

func (p *TBoolLiteral) DeepEqual(ano *TBoolLiteral) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Value) {
		return false
	}
	return true
}

func (p *TBoolLiteral) Field1DeepEqual(src bool) bool {

	if p.Value != src {
		return false
	}
	return true
}

type TCaseExpr struct {
	HasCaseExpr bool `thrift:"has_case_expr,1,required" frugal:"1,required,bool" json:"has_case_expr"`
	HasElseExpr bool `thrift:"has_else_expr,2,required" frugal:"2,required,bool" json:"has_else_expr"`
}

func NewTCaseExpr() *TCaseExpr {
	return &TCaseExpr{}
}

func (p *TCaseExpr) InitDefault() {
}

func (p *TCaseExpr) GetHasCaseExpr() (v bool) {
	return p.HasCaseExpr
}

func (p *TCaseExpr) GetHasElseExpr() (v bool) {
	return p.HasElseExpr
}
func (p *TCaseExpr) SetHasCaseExpr(val bool) {
	p.HasCaseExpr = val
}
func (p *TCaseExpr) SetHasElseExpr(val bool) {
	p.HasElseExpr = val
}

var fieldIDToName_TCaseExpr = map[int16]string{
	1: "has_case_expr",
	2: "has_else_expr",
}

func (p *TCaseExpr) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetHasCaseExpr bool = false
	var issetHasElseExpr bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetHasCaseExpr = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetHasElseExpr = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetHasCaseExpr {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetHasElseExpr {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCaseExpr[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCaseExpr[fieldId]))
}

func (p *TCaseExpr) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HasCaseExpr = _field
	return nil
}
func (p *TCaseExpr) ReadField2(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HasElseExpr = _field
	return nil
}

func (p *TCaseExpr) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCaseExpr"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCaseExpr) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("has_case_expr", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.HasCaseExpr); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCaseExpr) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("has_else_expr", thrift.BOOL, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.HasElseExpr); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCaseExpr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCaseExpr(%+v)", *p)

}

func (p *TCaseExpr) DeepEqual(ano *TCaseExpr) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.HasCaseExpr) {
		return false
	}
	if !p.Field2DeepEqual(ano.HasElseExpr) {
		return false
	}
	return true
}

func (p *TCaseExpr) Field1DeepEqual(src bool) bool {

	if p.HasCaseExpr != src {
		return false
	}
	return true
}
func (p *TCaseExpr) Field2DeepEqual(src bool) bool {

	if p.HasElseExpr != src {
		return false
	}
	return true
}

type TDateLiteral struct {
	Value string `thrift:"value,1,required" frugal:"1,required,string" json:"value"`
}

func NewTDateLiteral() *TDateLiteral {
	return &TDateLiteral{}
}

func (p *TDateLiteral) InitDefault() {
}

func (p *TDateLiteral) GetValue() (v string) {
	return p.Value
}
func (p *TDateLiteral) SetValue(val string) {
	p.Value = val
}

var fieldIDToName_TDateLiteral = map[int16]string{
	1: "value",
}

func (p *TDateLiteral) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetValue bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetValue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetValue {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDateLiteral[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TDateLiteral[fieldId]))
}

func (p *TDateLiteral) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}

func (p *TDateLiteral) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDateLiteral"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDateLiteral) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDateLiteral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDateLiteral(%+v)", *p)

}

func (p *TDateLiteral) DeepEqual(ano *TDateLiteral) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Value) {
		return false
	}
	return true
}

func (p *TDateLiteral) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Value, src) != 0 {
		return false
	}
	return true
}

type TFloatLiteral struct {
	Value float64 `thrift:"value,1,required" frugal:"1,required,double" json:"value"`
}

func NewTFloatLiteral() *TFloatLiteral {
	return &TFloatLiteral{}
}

func (p *TFloatLiteral) InitDefault() {
}

func (p *TFloatLiteral) GetValue() (v float64) {
	return p.Value
}
func (p *TFloatLiteral) SetValue(val float64) {
	p.Value = val
}

var fieldIDToName_TFloatLiteral = map[int16]string{
	1: "value",
}

func (p *TFloatLiteral) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetValue bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetValue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetValue {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFloatLiteral[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFloatLiteral[fieldId]))
}

func (p *TFloatLiteral) ReadField1(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}

func (p *TFloatLiteral) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFloatLiteral"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFloatLiteral) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.DOUBLE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFloatLiteral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFloatLiteral(%+v)", *p)

}

func (p *TFloatLiteral) DeepEqual(ano *TFloatLiteral) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Value) {
		return false
	}
	return true
}

func (p *TFloatLiteral) Field1DeepEqual(src float64) bool {

	if p.Value != src {
		return false
	}
	return true
}

type TDecimalLiteral struct {
	Value string `thrift:"value,1,required" frugal:"1,required,string" json:"value"`
}

func NewTDecimalLiteral() *TDecimalLiteral {
	return &TDecimalLiteral{}
}

func (p *TDecimalLiteral) InitDefault() {
}

func (p *TDecimalLiteral) GetValue() (v string) {
	return p.Value
}
func (p *TDecimalLiteral) SetValue(val string) {
	p.Value = val
}

var fieldIDToName_TDecimalLiteral = map[int16]string{
	1: "value",
}

func (p *TDecimalLiteral) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetValue bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetValue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetValue {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDecimalLiteral[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TDecimalLiteral[fieldId]))
}

func (p *TDecimalLiteral) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}

func (p *TDecimalLiteral) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDecimalLiteral"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDecimalLiteral) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDecimalLiteral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDecimalLiteral(%+v)", *p)

}

func (p *TDecimalLiteral) DeepEqual(ano *TDecimalLiteral) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Value) {
		return false
	}
	return true
}

func (p *TDecimalLiteral) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Value, src) != 0 {
		return false
	}
	return true
}

type TIntLiteral struct {
	Value int64 `thrift:"value,1,required" frugal:"1,required,i64" json:"value"`
}

func NewTIntLiteral() *TIntLiteral {
	return &TIntLiteral{}
}

func (p *TIntLiteral) InitDefault() {
}

func (p *TIntLiteral) GetValue() (v int64) {
	return p.Value
}
func (p *TIntLiteral) SetValue(val int64) {
	p.Value = val
}

var fieldIDToName_TIntLiteral = map[int16]string{
	1: "value",
}

func (p *TIntLiteral) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetValue bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetValue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetValue {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TIntLiteral[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TIntLiteral[fieldId]))
}

func (p *TIntLiteral) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}

func (p *TIntLiteral) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TIntLiteral"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TIntLiteral) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TIntLiteral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIntLiteral(%+v)", *p)

}

func (p *TIntLiteral) DeepEqual(ano *TIntLiteral) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Value) {
		return false
	}
	return true
}

func (p *TIntLiteral) Field1DeepEqual(src int64) bool {

	if p.Value != src {
		return false
	}
	return true
}

type TLargeIntLiteral struct {
	Value string `thrift:"value,1,required" frugal:"1,required,string" json:"value"`
}

func NewTLargeIntLiteral() *TLargeIntLiteral {
	return &TLargeIntLiteral{}
}

func (p *TLargeIntLiteral) InitDefault() {
}

func (p *TLargeIntLiteral) GetValue() (v string) {
	return p.Value
}
func (p *TLargeIntLiteral) SetValue(val string) {
	p.Value = val
}

var fieldIDToName_TLargeIntLiteral = map[int16]string{
	1: "value",
}

func (p *TLargeIntLiteral) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetValue bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetValue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetValue {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TLargeIntLiteral[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TLargeIntLiteral[fieldId]))
}

func (p *TLargeIntLiteral) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}

func (p *TLargeIntLiteral) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TLargeIntLiteral"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TLargeIntLiteral) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TLargeIntLiteral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLargeIntLiteral(%+v)", *p)

}

func (p *TLargeIntLiteral) DeepEqual(ano *TLargeIntLiteral) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Value) {
		return false
	}
	return true
}

func (p *TLargeIntLiteral) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Value, src) != 0 {
		return false
	}
	return true
}

type TIPv4Literal struct {
	Value int64 `thrift:"value,1,required" frugal:"1,required,i64" json:"value"`
}

func NewTIPv4Literal() *TIPv4Literal {
	return &TIPv4Literal{}
}

func (p *TIPv4Literal) InitDefault() {
}

func (p *TIPv4Literal) GetValue() (v int64) {
	return p.Value
}
func (p *TIPv4Literal) SetValue(val int64) {
	p.Value = val
}

var fieldIDToName_TIPv4Literal = map[int16]string{
	1: "value",
}

func (p *TIPv4Literal) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetValue bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetValue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetValue {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TIPv4Literal[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TIPv4Literal[fieldId]))
}

func (p *TIPv4Literal) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}

func (p *TIPv4Literal) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TIPv4Literal"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TIPv4Literal) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TIPv4Literal) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIPv4Literal(%+v)", *p)

}

func (p *TIPv4Literal) DeepEqual(ano *TIPv4Literal) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Value) {
		return false
	}
	return true
}

func (p *TIPv4Literal) Field1DeepEqual(src int64) bool {

	if p.Value != src {
		return false
	}
	return true
}

type TIPv6Literal struct {
	Value string `thrift:"value,1,required" frugal:"1,required,string" json:"value"`
}

func NewTIPv6Literal() *TIPv6Literal {
	return &TIPv6Literal{}
}

func (p *TIPv6Literal) InitDefault() {
}

func (p *TIPv6Literal) GetValue() (v string) {
	return p.Value
}
func (p *TIPv6Literal) SetValue(val string) {
	p.Value = val
}

var fieldIDToName_TIPv6Literal = map[int16]string{
	1: "value",
}

func (p *TIPv6Literal) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetValue bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetValue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetValue {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TIPv6Literal[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TIPv6Literal[fieldId]))
}

func (p *TIPv6Literal) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}

func (p *TIPv6Literal) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TIPv6Literal"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TIPv6Literal) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TIPv6Literal) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIPv6Literal(%+v)", *p)

}

func (p *TIPv6Literal) DeepEqual(ano *TIPv6Literal) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Value) {
		return false
	}
	return true
}

func (p *TIPv6Literal) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Value, src) != 0 {
		return false
	}
	return true
}

type TInPredicate struct {
	IsNotIn bool `thrift:"is_not_in,1,required" frugal:"1,required,bool" json:"is_not_in"`
}

func NewTInPredicate() *TInPredicate {
	return &TInPredicate{}
}

func (p *TInPredicate) InitDefault() {
}

func (p *TInPredicate) GetIsNotIn() (v bool) {
	return p.IsNotIn
}
func (p *TInPredicate) SetIsNotIn(val bool) {
	p.IsNotIn = val
}

var fieldIDToName_TInPredicate = map[int16]string{
	1: "is_not_in",
}

func (p *TInPredicate) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetIsNotIn bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsNotIn = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetIsNotIn {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TInPredicate[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TInPredicate[fieldId]))
}

func (p *TInPredicate) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsNotIn = _field
	return nil
}

func (p *TInPredicate) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TInPredicate"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TInPredicate) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_not_in", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsNotIn); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TInPredicate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TInPredicate(%+v)", *p)

}

func (p *TInPredicate) DeepEqual(ano *TInPredicate) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IsNotIn) {
		return false
	}
	return true
}

func (p *TInPredicate) Field1DeepEqual(src bool) bool {

	if p.IsNotIn != src {
		return false
	}
	return true
}

type TIsNullPredicate struct {
	IsNotNull bool `thrift:"is_not_null,1,required" frugal:"1,required,bool" json:"is_not_null"`
}

func NewTIsNullPredicate() *TIsNullPredicate {
	return &TIsNullPredicate{}
}

func (p *TIsNullPredicate) InitDefault() {
}

func (p *TIsNullPredicate) GetIsNotNull() (v bool) {
	return p.IsNotNull
}
func (p *TIsNullPredicate) SetIsNotNull(val bool) {
	p.IsNotNull = val
}

var fieldIDToName_TIsNullPredicate = map[int16]string{
	1: "is_not_null",
}

func (p *TIsNullPredicate) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetIsNotNull bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsNotNull = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetIsNotNull {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TIsNullPredicate[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TIsNullPredicate[fieldId]))
}

func (p *TIsNullPredicate) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsNotNull = _field
	return nil
}

func (p *TIsNullPredicate) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TIsNullPredicate"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TIsNullPredicate) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_not_null", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsNotNull); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TIsNullPredicate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIsNullPredicate(%+v)", *p)

}

func (p *TIsNullPredicate) DeepEqual(ano *TIsNullPredicate) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IsNotNull) {
		return false
	}
	return true
}

func (p *TIsNullPredicate) Field1DeepEqual(src bool) bool {

	if p.IsNotNull != src {
		return false
	}
	return true
}

type TLikePredicate struct {
	EscapeChar string `thrift:"escape_char,1,required" frugal:"1,required,string" json:"escape_char"`
}

func NewTLikePredicate() *TLikePredicate {
	return &TLikePredicate{}
}

func (p *TLikePredicate) InitDefault() {
}

func (p *TLikePredicate) GetEscapeChar() (v string) {
	return p.EscapeChar
}
func (p *TLikePredicate) SetEscapeChar(val string) {
	p.EscapeChar = val
}

var fieldIDToName_TLikePredicate = map[int16]string{
	1: "escape_char",
}

func (p *TLikePredicate) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEscapeChar bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEscapeChar = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEscapeChar {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TLikePredicate[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TLikePredicate[fieldId]))
}

func (p *TLikePredicate) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EscapeChar = _field
	return nil
}

func (p *TLikePredicate) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TLikePredicate"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TLikePredicate) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("escape_char", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EscapeChar); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TLikePredicate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLikePredicate(%+v)", *p)

}

func (p *TLikePredicate) DeepEqual(ano *TLikePredicate) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EscapeChar) {
		return false
	}
	return true
}

func (p *TLikePredicate) Field1DeepEqual(src string) bool {

	if strings.Compare(p.EscapeChar, src) != 0 {
		return false
	}
	return true
}

type TMatchPredicate struct {
	ParserType      string            `thrift:"parser_type,1,required" frugal:"1,required,string" json:"parser_type"`
	ParserMode      string            `thrift:"parser_mode,2,required" frugal:"2,required,string" json:"parser_mode"`
	CharFilterMap   map[string]string `thrift:"char_filter_map,3,optional" frugal:"3,optional,map<string:string>" json:"char_filter_map,omitempty"`
	ParserLowercase bool              `thrift:"parser_lowercase,4,optional" frugal:"4,optional,bool" json:"parser_lowercase,omitempty"`
	ParserStopwords string            `thrift:"parser_stopwords,5,optional" frugal:"5,optional,string" json:"parser_stopwords,omitempty"`
}

func NewTMatchPredicate() *TMatchPredicate {
	return &TMatchPredicate{

		ParserLowercase: true,
		ParserStopwords: "",
	}
}

func (p *TMatchPredicate) InitDefault() {
	p.ParserLowercase = true
	p.ParserStopwords = ""
}

func (p *TMatchPredicate) GetParserType() (v string) {
	return p.ParserType
}

func (p *TMatchPredicate) GetParserMode() (v string) {
	return p.ParserMode
}

var TMatchPredicate_CharFilterMap_DEFAULT map[string]string

func (p *TMatchPredicate) GetCharFilterMap() (v map[string]string) {
	if !p.IsSetCharFilterMap() {
		return TMatchPredicate_CharFilterMap_DEFAULT
	}
	return p.CharFilterMap
}

var TMatchPredicate_ParserLowercase_DEFAULT bool = true

func (p *TMatchPredicate) GetParserLowercase() (v bool) {
	if !p.IsSetParserLowercase() {
		return TMatchPredicate_ParserLowercase_DEFAULT
	}
	return p.ParserLowercase
}

var TMatchPredicate_ParserStopwords_DEFAULT string = ""

func (p *TMatchPredicate) GetParserStopwords() (v string) {
	if !p.IsSetParserStopwords() {
		return TMatchPredicate_ParserStopwords_DEFAULT
	}
	return p.ParserStopwords
}
func (p *TMatchPredicate) SetParserType(val string) {
	p.ParserType = val
}
func (p *TMatchPredicate) SetParserMode(val string) {
	p.ParserMode = val
}
func (p *TMatchPredicate) SetCharFilterMap(val map[string]string) {
	p.CharFilterMap = val
}
func (p *TMatchPredicate) SetParserLowercase(val bool) {
	p.ParserLowercase = val
}
func (p *TMatchPredicate) SetParserStopwords(val string) {
	p.ParserStopwords = val
}

var fieldIDToName_TMatchPredicate = map[int16]string{
	1: "parser_type",
	2: "parser_mode",
	3: "char_filter_map",
	4: "parser_lowercase",
	5: "parser_stopwords",
}

func (p *TMatchPredicate) IsSetCharFilterMap() bool {
	return p.CharFilterMap != nil
}

func (p *TMatchPredicate) IsSetParserLowercase() bool {
	return p.ParserLowercase != TMatchPredicate_ParserLowercase_DEFAULT
}

func (p *TMatchPredicate) IsSetParserStopwords() bool {
	return p.ParserStopwords != TMatchPredicate_ParserStopwords_DEFAULT
}

func (p *TMatchPredicate) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetParserType bool = false
	var issetParserMode bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetParserType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetParserMode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetParserType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetParserMode {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMatchPredicate[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TMatchPredicate[fieldId]))
}

func (p *TMatchPredicate) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ParserType = _field
	return nil
}
func (p *TMatchPredicate) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ParserMode = _field
	return nil
}
func (p *TMatchPredicate) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.CharFilterMap = _field
	return nil
}
func (p *TMatchPredicate) ReadField4(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ParserLowercase = _field
	return nil
}
func (p *TMatchPredicate) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ParserStopwords = _field
	return nil
}

func (p *TMatchPredicate) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMatchPredicate"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMatchPredicate) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("parser_type", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ParserType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMatchPredicate) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("parser_mode", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ParserMode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TMatchPredicate) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCharFilterMap() {
		if err = oprot.WriteFieldBegin("char_filter_map", thrift.MAP, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.CharFilterMap)); err != nil {
			return err
		}
		for k, v := range p.CharFilterMap {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TMatchPredicate) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetParserLowercase() {
		if err = oprot.WriteFieldBegin("parser_lowercase", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.ParserLowercase); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TMatchPredicate) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetParserStopwords() {
		if err = oprot.WriteFieldBegin("parser_stopwords", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ParserStopwords); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TMatchPredicate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMatchPredicate(%+v)", *p)

}

func (p *TMatchPredicate) DeepEqual(ano *TMatchPredicate) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ParserType) {
		return false
	}
	if !p.Field2DeepEqual(ano.ParserMode) {
		return false
	}
	if !p.Field3DeepEqual(ano.CharFilterMap) {
		return false
	}
	if !p.Field4DeepEqual(ano.ParserLowercase) {
		return false
	}
	if !p.Field5DeepEqual(ano.ParserStopwords) {
		return false
	}
	return true
}

func (p *TMatchPredicate) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ParserType, src) != 0 {
		return false
	}
	return true
}
func (p *TMatchPredicate) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ParserMode, src) != 0 {
		return false
	}
	return true
}
func (p *TMatchPredicate) Field3DeepEqual(src map[string]string) bool {

	if len(p.CharFilterMap) != len(src) {
		return false
	}
	for k, v := range p.CharFilterMap {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TMatchPredicate) Field4DeepEqual(src bool) bool {

	if p.ParserLowercase != src {
		return false
	}
	return true
}
func (p *TMatchPredicate) Field5DeepEqual(src string) bool {

	if strings.Compare(p.ParserStopwords, src) != 0 {
		return false
	}
	return true
}

type TLiteralPredicate struct {
	Value  bool `thrift:"value,1,required" frugal:"1,required,bool" json:"value"`
	IsNull bool `thrift:"is_null,2,required" frugal:"2,required,bool" json:"is_null"`
}

func NewTLiteralPredicate() *TLiteralPredicate {
	return &TLiteralPredicate{}
}

func (p *TLiteralPredicate) InitDefault() {
}

func (p *TLiteralPredicate) GetValue() (v bool) {
	return p.Value
}

func (p *TLiteralPredicate) GetIsNull() (v bool) {
	return p.IsNull
}
func (p *TLiteralPredicate) SetValue(val bool) {
	p.Value = val
}
func (p *TLiteralPredicate) SetIsNull(val bool) {
	p.IsNull = val
}

var fieldIDToName_TLiteralPredicate = map[int16]string{
	1: "value",
	2: "is_null",
}

func (p *TLiteralPredicate) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetValue bool = false
	var issetIsNull bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetValue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsNull = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetValue {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetIsNull {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TLiteralPredicate[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TLiteralPredicate[fieldId]))
}

func (p *TLiteralPredicate) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}
func (p *TLiteralPredicate) ReadField2(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsNull = _field
	return nil
}

func (p *TLiteralPredicate) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TLiteralPredicate"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TLiteralPredicate) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TLiteralPredicate) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_null", thrift.BOOL, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsNull); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TLiteralPredicate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLiteralPredicate(%+v)", *p)

}

func (p *TLiteralPredicate) DeepEqual(ano *TLiteralPredicate) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Value) {
		return false
	}
	if !p.Field2DeepEqual(ano.IsNull) {
		return false
	}
	return true
}

func (p *TLiteralPredicate) Field1DeepEqual(src bool) bool {

	if p.Value != src {
		return false
	}
	return true
}
func (p *TLiteralPredicate) Field2DeepEqual(src bool) bool {

	if p.IsNull != src {
		return false
	}
	return true
}

type TTupleIsNullPredicate struct {
	TupleIds []types.TTupleId `thrift:"tuple_ids,1,required" frugal:"1,required,list<i32>" json:"tuple_ids"`
	NullSide *TNullSide       `thrift:"null_side,2,optional" frugal:"2,optional,TNullSide" json:"null_side,omitempty"`
}

func NewTTupleIsNullPredicate() *TTupleIsNullPredicate {
	return &TTupleIsNullPredicate{}
}

func (p *TTupleIsNullPredicate) InitDefault() {
}

func (p *TTupleIsNullPredicate) GetTupleIds() (v []types.TTupleId) {
	return p.TupleIds
}

var TTupleIsNullPredicate_NullSide_DEFAULT TNullSide

func (p *TTupleIsNullPredicate) GetNullSide() (v TNullSide) {
	if !p.IsSetNullSide() {
		return TTupleIsNullPredicate_NullSide_DEFAULT
	}
	return *p.NullSide
}
func (p *TTupleIsNullPredicate) SetTupleIds(val []types.TTupleId) {
	p.TupleIds = val
}
func (p *TTupleIsNullPredicate) SetNullSide(val *TNullSide) {
	p.NullSide = val
}

var fieldIDToName_TTupleIsNullPredicate = map[int16]string{
	1: "tuple_ids",
	2: "null_side",
}

func (p *TTupleIsNullPredicate) IsSetNullSide() bool {
	return p.NullSide != nil
}

func (p *TTupleIsNullPredicate) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTupleIds bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTupleIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTupleIds {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTupleIsNullPredicate[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTupleIsNullPredicate[fieldId]))
}

func (p *TTupleIsNullPredicate) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TTupleId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TTupleId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TupleIds = _field
	return nil
}
func (p *TTupleIsNullPredicate) ReadField2(iprot thrift.TProtocol) error {

	var _field *TNullSide
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TNullSide(v)
		_field = &tmp
	}
	p.NullSide = _field
	return nil
}

func (p *TTupleIsNullPredicate) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTupleIsNullPredicate"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTupleIsNullPredicate) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tuple_ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.TupleIds)); err != nil {
		return err
	}
	for _, v := range p.TupleIds {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTupleIsNullPredicate) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNullSide() {
		if err = oprot.WriteFieldBegin("null_side", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.NullSide)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTupleIsNullPredicate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTupleIsNullPredicate(%+v)", *p)

}

func (p *TTupleIsNullPredicate) DeepEqual(ano *TTupleIsNullPredicate) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TupleIds) {
		return false
	}
	if !p.Field2DeepEqual(ano.NullSide) {
		return false
	}
	return true
}

func (p *TTupleIsNullPredicate) Field1DeepEqual(src []types.TTupleId) bool {

	if len(p.TupleIds) != len(src) {
		return false
	}
	for i, v := range p.TupleIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TTupleIsNullPredicate) Field2DeepEqual(src *TNullSide) bool {

	if p.NullSide == src {
		return true
	} else if p.NullSide == nil || src == nil {
		return false
	}
	if *p.NullSide != *src {
		return false
	}
	return true
}

type TSlotRef struct {
	SlotId      types.TSlotId  `thrift:"slot_id,1,required" frugal:"1,required,i32" json:"slot_id"`
	TupleId     types.TTupleId `thrift:"tuple_id,2,required" frugal:"2,required,i32" json:"tuple_id"`
	ColUniqueId *int32         `thrift:"col_unique_id,3,optional" frugal:"3,optional,i32" json:"col_unique_id,omitempty"`
}

func NewTSlotRef() *TSlotRef {
	return &TSlotRef{}
}

func (p *TSlotRef) InitDefault() {
}

func (p *TSlotRef) GetSlotId() (v types.TSlotId) {
	return p.SlotId
}

func (p *TSlotRef) GetTupleId() (v types.TTupleId) {
	return p.TupleId
}

var TSlotRef_ColUniqueId_DEFAULT int32

func (p *TSlotRef) GetColUniqueId() (v int32) {
	if !p.IsSetColUniqueId() {
		return TSlotRef_ColUniqueId_DEFAULT
	}
	return *p.ColUniqueId
}
func (p *TSlotRef) SetSlotId(val types.TSlotId) {
	p.SlotId = val
}
func (p *TSlotRef) SetTupleId(val types.TTupleId) {
	p.TupleId = val
}
func (p *TSlotRef) SetColUniqueId(val *int32) {
	p.ColUniqueId = val
}

var fieldIDToName_TSlotRef = map[int16]string{
	1: "slot_id",
	2: "tuple_id",
	3: "col_unique_id",
}

func (p *TSlotRef) IsSetColUniqueId() bool {
	return p.ColUniqueId != nil
}

func (p *TSlotRef) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSlotId bool = false
	var issetTupleId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetSlotId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSlotId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTupleId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TSlotRef[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TSlotRef[fieldId]))
}

func (p *TSlotRef) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TSlotId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SlotId = _field
	return nil
}
func (p *TSlotRef) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TupleId = _field
	return nil
}
func (p *TSlotRef) ReadField3(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ColUniqueId = _field
	return nil
}

func (p *TSlotRef) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TSlotRef"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TSlotRef) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("slot_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SlotId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TSlotRef) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tuple_id", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TSlotRef) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetColUniqueId() {
		if err = oprot.WriteFieldBegin("col_unique_id", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ColUniqueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TSlotRef) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSlotRef(%+v)", *p)

}

func (p *TSlotRef) DeepEqual(ano *TSlotRef) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SlotId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TupleId) {
		return false
	}
	if !p.Field3DeepEqual(ano.ColUniqueId) {
		return false
	}
	return true
}

func (p *TSlotRef) Field1DeepEqual(src types.TSlotId) bool {

	if p.SlotId != src {
		return false
	}
	return true
}
func (p *TSlotRef) Field2DeepEqual(src types.TTupleId) bool {

	if p.TupleId != src {
		return false
	}
	return true
}
func (p *TSlotRef) Field3DeepEqual(src *int32) bool {

	if p.ColUniqueId == src {
		return true
	} else if p.ColUniqueId == nil || src == nil {
		return false
	}
	if *p.ColUniqueId != *src {
		return false
	}
	return true
}

type TColumnRef struct {
	ColumnId   *types.TSlotId `thrift:"column_id,1,optional" frugal:"1,optional,i32" json:"column_id,omitempty"`
	ColumnName *string        `thrift:"column_name,2,optional" frugal:"2,optional,string" json:"column_name,omitempty"`
}

func NewTColumnRef() *TColumnRef {
	return &TColumnRef{}
}

func (p *TColumnRef) InitDefault() {
}

var TColumnRef_ColumnId_DEFAULT types.TSlotId

func (p *TColumnRef) GetColumnId() (v types.TSlotId) {
	if !p.IsSetColumnId() {
		return TColumnRef_ColumnId_DEFAULT
	}
	return *p.ColumnId
}

var TColumnRef_ColumnName_DEFAULT string

func (p *TColumnRef) GetColumnName() (v string) {
	if !p.IsSetColumnName() {
		return TColumnRef_ColumnName_DEFAULT
	}
	return *p.ColumnName
}
func (p *TColumnRef) SetColumnId(val *types.TSlotId) {
	p.ColumnId = val
}
func (p *TColumnRef) SetColumnName(val *string) {
	p.ColumnName = val
}

var fieldIDToName_TColumnRef = map[int16]string{
	1: "column_id",
	2: "column_name",
}

func (p *TColumnRef) IsSetColumnId() bool {
	return p.ColumnId != nil
}

func (p *TColumnRef) IsSetColumnName() bool {
	return p.ColumnName != nil
}

func (p *TColumnRef) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TColumnRef[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TColumnRef) ReadField1(iprot thrift.TProtocol) error {

	var _field *types.TSlotId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ColumnId = _field
	return nil
}
func (p *TColumnRef) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ColumnName = _field
	return nil
}

func (p *TColumnRef) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TColumnRef"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TColumnRef) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnId() {
		if err = oprot.WriteFieldBegin("column_id", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ColumnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TColumnRef) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnName() {
		if err = oprot.WriteFieldBegin("column_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ColumnName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TColumnRef) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumnRef(%+v)", *p)

}

func (p *TColumnRef) DeepEqual(ano *TColumnRef) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ColumnName) {
		return false
	}
	return true
}

func (p *TColumnRef) Field1DeepEqual(src *types.TSlotId) bool {

	if p.ColumnId == src {
		return true
	} else if p.ColumnId == nil || src == nil {
		return false
	}
	if *p.ColumnId != *src {
		return false
	}
	return true
}
func (p *TColumnRef) Field2DeepEqual(src *string) bool {

	if p.ColumnName == src {
		return true
	} else if p.ColumnName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ColumnName, *src) != 0 {
		return false
	}
	return true
}

type TStringLiteral struct {
	Value string `thrift:"value,1,required" frugal:"1,required,string" json:"value"`
}

func NewTStringLiteral() *TStringLiteral {
	return &TStringLiteral{}
}

func (p *TStringLiteral) InitDefault() {
}

func (p *TStringLiteral) GetValue() (v string) {
	return p.Value
}
func (p *TStringLiteral) SetValue(val string) {
	p.Value = val
}

var fieldIDToName_TStringLiteral = map[int16]string{
	1: "value",
}

func (p *TStringLiteral) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetValue bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetValue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetValue {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TStringLiteral[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TStringLiteral[fieldId]))
}

func (p *TStringLiteral) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}

func (p *TStringLiteral) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TStringLiteral"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TStringLiteral) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TStringLiteral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStringLiteral(%+v)", *p)

}

func (p *TStringLiteral) DeepEqual(ano *TStringLiteral) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Value) {
		return false
	}
	return true
}

func (p *TStringLiteral) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Value, src) != 0 {
		return false
	}
	return true
}

type TNullableStringLiteral struct {
	Value  *string `thrift:"value,1,optional" frugal:"1,optional,string" json:"value,omitempty"`
	IsNull bool    `thrift:"is_null,2,optional" frugal:"2,optional,bool" json:"is_null,omitempty"`
}

func NewTNullableStringLiteral() *TNullableStringLiteral {
	return &TNullableStringLiteral{

		IsNull: false,
	}
}

func (p *TNullableStringLiteral) InitDefault() {
	p.IsNull = false
}

var TNullableStringLiteral_Value_DEFAULT string

func (p *TNullableStringLiteral) GetValue() (v string) {
	if !p.IsSetValue() {
		return TNullableStringLiteral_Value_DEFAULT
	}
	return *p.Value
}

var TNullableStringLiteral_IsNull_DEFAULT bool = false

func (p *TNullableStringLiteral) GetIsNull() (v bool) {
	if !p.IsSetIsNull() {
		return TNullableStringLiteral_IsNull_DEFAULT
	}
	return p.IsNull
}
func (p *TNullableStringLiteral) SetValue(val *string) {
	p.Value = val
}
func (p *TNullableStringLiteral) SetIsNull(val bool) {
	p.IsNull = val
}

var fieldIDToName_TNullableStringLiteral = map[int16]string{
	1: "value",
	2: "is_null",
}

func (p *TNullableStringLiteral) IsSetValue() bool {
	return p.Value != nil
}

func (p *TNullableStringLiteral) IsSetIsNull() bool {
	return p.IsNull != TNullableStringLiteral_IsNull_DEFAULT
}

func (p *TNullableStringLiteral) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TNullableStringLiteral[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TNullableStringLiteral) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Value = _field
	return nil
}
func (p *TNullableStringLiteral) ReadField2(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsNull = _field
	return nil
}

func (p *TNullableStringLiteral) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TNullableStringLiteral"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TNullableStringLiteral) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err = oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Value); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TNullableStringLiteral) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsNull() {
		if err = oprot.WriteFieldBegin("is_null", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsNull); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TNullableStringLiteral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TNullableStringLiteral(%+v)", *p)

}

func (p *TNullableStringLiteral) DeepEqual(ano *TNullableStringLiteral) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Value) {
		return false
	}
	if !p.Field2DeepEqual(ano.IsNull) {
		return false
	}
	return true
}

func (p *TNullableStringLiteral) Field1DeepEqual(src *string) bool {

	if p.Value == src {
		return true
	} else if p.Value == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Value, *src) != 0 {
		return false
	}
	return true
}
func (p *TNullableStringLiteral) Field2DeepEqual(src bool) bool {

	if p.IsNull != src {
		return false
	}
	return true
}

type TJsonLiteral struct {
	Value string `thrift:"value,1,required" frugal:"1,required,string" json:"value"`
}

func NewTJsonLiteral() *TJsonLiteral {
	return &TJsonLiteral{}
}

func (p *TJsonLiteral) InitDefault() {
}

func (p *TJsonLiteral) GetValue() (v string) {
	return p.Value
}
func (p *TJsonLiteral) SetValue(val string) {
	p.Value = val
}

var fieldIDToName_TJsonLiteral = map[int16]string{
	1: "value",
}

func (p *TJsonLiteral) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetValue bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetValue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetValue {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TJsonLiteral[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TJsonLiteral[fieldId]))
}

func (p *TJsonLiteral) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}

func (p *TJsonLiteral) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TJsonLiteral"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TJsonLiteral) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TJsonLiteral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TJsonLiteral(%+v)", *p)

}

func (p *TJsonLiteral) DeepEqual(ano *TJsonLiteral) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Value) {
		return false
	}
	return true
}

func (p *TJsonLiteral) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Value, src) != 0 {
		return false
	}
	return true
}

type TInfoFunc struct {
	IntValue int64  `thrift:"int_value,1,required" frugal:"1,required,i64" json:"int_value"`
	StrValue string `thrift:"str_value,2,required" frugal:"2,required,string" json:"str_value"`
}

func NewTInfoFunc() *TInfoFunc {
	return &TInfoFunc{}
}

func (p *TInfoFunc) InitDefault() {
}

func (p *TInfoFunc) GetIntValue() (v int64) {
	return p.IntValue
}

func (p *TInfoFunc) GetStrValue() (v string) {
	return p.StrValue
}
func (p *TInfoFunc) SetIntValue(val int64) {
	p.IntValue = val
}
func (p *TInfoFunc) SetStrValue(val string) {
	p.StrValue = val
}

var fieldIDToName_TInfoFunc = map[int16]string{
	1: "int_value",
	2: "str_value",
}

func (p *TInfoFunc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetIntValue bool = false
	var issetStrValue bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetIntValue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetStrValue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetIntValue {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetStrValue {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TInfoFunc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TInfoFunc[fieldId]))
}

func (p *TInfoFunc) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IntValue = _field
	return nil
}
func (p *TInfoFunc) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StrValue = _field
	return nil
}

func (p *TInfoFunc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TInfoFunc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TInfoFunc) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("int_value", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.IntValue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TInfoFunc) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("str_value", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StrValue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TInfoFunc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TInfoFunc(%+v)", *p)

}

func (p *TInfoFunc) DeepEqual(ano *TInfoFunc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IntValue) {
		return false
	}
	if !p.Field2DeepEqual(ano.StrValue) {
		return false
	}
	return true
}

func (p *TInfoFunc) Field1DeepEqual(src int64) bool {

	if p.IntValue != src {
		return false
	}
	return true
}
func (p *TInfoFunc) Field2DeepEqual(src string) bool {

	if strings.Compare(p.StrValue, src) != 0 {
		return false
	}
	return true
}

type TFunctionCallExpr struct {
	Fn             *types.TFunction `thrift:"fn,1,required" frugal:"1,required,types.TFunction" json:"fn"`
	VarargStartIdx *int32           `thrift:"vararg_start_idx,2,optional" frugal:"2,optional,i32" json:"vararg_start_idx,omitempty"`
}

func NewTFunctionCallExpr() *TFunctionCallExpr {
	return &TFunctionCallExpr{}
}

func (p *TFunctionCallExpr) InitDefault() {
}

var TFunctionCallExpr_Fn_DEFAULT *types.TFunction

func (p *TFunctionCallExpr) GetFn() (v *types.TFunction) {
	if !p.IsSetFn() {
		return TFunctionCallExpr_Fn_DEFAULT
	}
	return p.Fn
}

var TFunctionCallExpr_VarargStartIdx_DEFAULT int32

func (p *TFunctionCallExpr) GetVarargStartIdx() (v int32) {
	if !p.IsSetVarargStartIdx() {
		return TFunctionCallExpr_VarargStartIdx_DEFAULT
	}
	return *p.VarargStartIdx
}
func (p *TFunctionCallExpr) SetFn(val *types.TFunction) {
	p.Fn = val
}
func (p *TFunctionCallExpr) SetVarargStartIdx(val *int32) {
	p.VarargStartIdx = val
}

var fieldIDToName_TFunctionCallExpr = map[int16]string{
	1: "fn",
	2: "vararg_start_idx",
}

func (p *TFunctionCallExpr) IsSetFn() bool {
	return p.Fn != nil
}

func (p *TFunctionCallExpr) IsSetVarargStartIdx() bool {
	return p.VarargStartIdx != nil
}

func (p *TFunctionCallExpr) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFn bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFn = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFn {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFunctionCallExpr[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFunctionCallExpr[fieldId]))
}

func (p *TFunctionCallExpr) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTFunction()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Fn = _field
	return nil
}
func (p *TFunctionCallExpr) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VarargStartIdx = _field
	return nil
}

func (p *TFunctionCallExpr) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFunctionCallExpr"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFunctionCallExpr) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fn", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Fn.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFunctionCallExpr) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVarargStartIdx() {
		if err = oprot.WriteFieldBegin("vararg_start_idx", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.VarargStartIdx); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFunctionCallExpr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFunctionCallExpr(%+v)", *p)

}

func (p *TFunctionCallExpr) DeepEqual(ano *TFunctionCallExpr) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Fn) {
		return false
	}
	if !p.Field2DeepEqual(ano.VarargStartIdx) {
		return false
	}
	return true
}

func (p *TFunctionCallExpr) Field1DeepEqual(src *types.TFunction) bool {

	if !p.Fn.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFunctionCallExpr) Field2DeepEqual(src *int32) bool {

	if p.VarargStartIdx == src {
		return true
	} else if p.VarargStartIdx == nil || src == nil {
		return false
	}
	if *p.VarargStartIdx != *src {
		return false
	}
	return true
}

type TSchemaChangeExpr struct {
	TableId *int64 `thrift:"table_id,1,optional" frugal:"1,optional,i64" json:"table_id,omitempty"`
}

func NewTSchemaChangeExpr() *TSchemaChangeExpr {
	return &TSchemaChangeExpr{}
}

func (p *TSchemaChangeExpr) InitDefault() {
}

var TSchemaChangeExpr_TableId_DEFAULT int64

func (p *TSchemaChangeExpr) GetTableId() (v int64) {
	if !p.IsSetTableId() {
		return TSchemaChangeExpr_TableId_DEFAULT
	}
	return *p.TableId
}
func (p *TSchemaChangeExpr) SetTableId(val *int64) {
	p.TableId = val
}

var fieldIDToName_TSchemaChangeExpr = map[int16]string{
	1: "table_id",
}

func (p *TSchemaChangeExpr) IsSetTableId() bool {
	return p.TableId != nil
}

func (p *TSchemaChangeExpr) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TSchemaChangeExpr[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TSchemaChangeExpr) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableId = _field
	return nil
}

func (p *TSchemaChangeExpr) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TSchemaChangeExpr"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TSchemaChangeExpr) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err = oprot.WriteFieldBegin("table_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TSchemaChangeExpr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSchemaChangeExpr(%+v)", *p)

}

func (p *TSchemaChangeExpr) DeepEqual(ano *TSchemaChangeExpr) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TableId) {
		return false
	}
	return true
}

func (p *TSchemaChangeExpr) Field1DeepEqual(src *int64) bool {

	if p.TableId == src {
		return true
	} else if p.TableId == nil || src == nil {
		return false
	}
	if *p.TableId != *src {
		return false
	}
	return true
}

type TExprNode struct {
	NodeType         TExprNodeType          `thrift:"node_type,1,required" frugal:"1,required,TExprNodeType" json:"node_type"`
	Type             *types.TTypeDesc       `thrift:"type,2,required" frugal:"2,required,types.TTypeDesc" json:"type"`
	Opcode           *opcodes.TExprOpcode   `thrift:"opcode,3,optional" frugal:"3,optional,TExprOpcode" json:"opcode,omitempty"`
	NumChildren      int32                  `thrift:"num_children,4,required" frugal:"4,required,i32" json:"num_children"`
	AggExpr          *TAggregateExpr        `thrift:"agg_expr,5,optional" frugal:"5,optional,TAggregateExpr" json:"agg_expr,omitempty"`
	BoolLiteral      *TBoolLiteral          `thrift:"bool_literal,6,optional" frugal:"6,optional,TBoolLiteral" json:"bool_literal,omitempty"`
	CaseExpr         *TCaseExpr             `thrift:"case_expr,7,optional" frugal:"7,optional,TCaseExpr" json:"case_expr,omitempty"`
	DateLiteral      *TDateLiteral          `thrift:"date_literal,8,optional" frugal:"8,optional,TDateLiteral" json:"date_literal,omitempty"`
	FloatLiteral     *TFloatLiteral         `thrift:"float_literal,9,optional" frugal:"9,optional,TFloatLiteral" json:"float_literal,omitempty"`
	IntLiteral       *TIntLiteral           `thrift:"int_literal,10,optional" frugal:"10,optional,TIntLiteral" json:"int_literal,omitempty"`
	InPredicate      *TInPredicate          `thrift:"in_predicate,11,optional" frugal:"11,optional,TInPredicate" json:"in_predicate,omitempty"`
	IsNullPred       *TIsNullPredicate      `thrift:"is_null_pred,12,optional" frugal:"12,optional,TIsNullPredicate" json:"is_null_pred,omitempty"`
	LikePred         *TLikePredicate        `thrift:"like_pred,13,optional" frugal:"13,optional,TLikePredicate" json:"like_pred,omitempty"`
	LiteralPred      *TLiteralPredicate     `thrift:"literal_pred,14,optional" frugal:"14,optional,TLiteralPredicate" json:"literal_pred,omitempty"`
	SlotRef          *TSlotRef              `thrift:"slot_ref,15,optional" frugal:"15,optional,TSlotRef" json:"slot_ref,omitempty"`
	StringLiteral    *TStringLiteral        `thrift:"string_literal,16,optional" frugal:"16,optional,TStringLiteral" json:"string_literal,omitempty"`
	TupleIsNullPred  *TTupleIsNullPredicate `thrift:"tuple_is_null_pred,17,optional" frugal:"17,optional,TTupleIsNullPredicate" json:"tuple_is_null_pred,omitempty"`
	InfoFunc         *TInfoFunc             `thrift:"info_func,18,optional" frugal:"18,optional,TInfoFunc" json:"info_func,omitempty"`
	DecimalLiteral   *TDecimalLiteral       `thrift:"decimal_literal,19,optional" frugal:"19,optional,TDecimalLiteral" json:"decimal_literal,omitempty"`
	OutputScale      int32                  `thrift:"output_scale,20,required" frugal:"20,required,i32" json:"output_scale"`
	FnCallExpr       *TFunctionCallExpr     `thrift:"fn_call_expr,21,optional" frugal:"21,optional,TFunctionCallExpr" json:"fn_call_expr,omitempty"`
	LargeIntLiteral  *TLargeIntLiteral      `thrift:"large_int_literal,22,optional" frugal:"22,optional,TLargeIntLiteral" json:"large_int_literal,omitempty"`
	OutputColumn     *int32                 `thrift:"output_column,23,optional" frugal:"23,optional,i32" json:"output_column,omitempty"`
	OutputType       *types.TColumnType     `thrift:"output_type,24,optional" frugal:"24,optional,types.TColumnType" json:"output_type,omitempty"`
	VectorOpcode     *opcodes.TExprOpcode   `thrift:"vector_opcode,25,optional" frugal:"25,optional,TExprOpcode" json:"vector_opcode,omitempty"`
	Fn               *types.TFunction       `thrift:"fn,26,optional" frugal:"26,optional,types.TFunction" json:"fn,omitempty"`
	VarargStartIdx   *int32                 `thrift:"vararg_start_idx,27,optional" frugal:"27,optional,i32" json:"vararg_start_idx,omitempty"`
	ChildType        *types.TPrimitiveType  `thrift:"child_type,28,optional" frugal:"28,optional,TPrimitiveType" json:"child_type,omitempty"`
	IsNullable       *bool                  `thrift:"is_nullable,29,optional" frugal:"29,optional,bool" json:"is_nullable,omitempty"`
	JsonLiteral      *TJsonLiteral          `thrift:"json_literal,30,optional" frugal:"30,optional,TJsonLiteral" json:"json_literal,omitempty"`
	SchemaChangeExpr *TSchemaChangeExpr     `thrift:"schema_change_expr,31,optional" frugal:"31,optional,TSchemaChangeExpr" json:"schema_change_expr,omitempty"`
	ColumnRef        *TColumnRef            `thrift:"column_ref,32,optional" frugal:"32,optional,TColumnRef" json:"column_ref,omitempty"`
	MatchPredicate   *TMatchPredicate       `thrift:"match_predicate,33,optional" frugal:"33,optional,TMatchPredicate" json:"match_predicate,omitempty"`
	Ipv4Literal      *TIPv4Literal          `thrift:"ipv4_literal,34,optional" frugal:"34,optional,TIPv4Literal" json:"ipv4_literal,omitempty"`
	Ipv6Literal      *TIPv6Literal          `thrift:"ipv6_literal,35,optional" frugal:"35,optional,TIPv6Literal" json:"ipv6_literal,omitempty"`
	Label            *string                `thrift:"label,36,optional" frugal:"36,optional,string" json:"label,omitempty"`
}

func NewTExprNode() *TExprNode {
	return &TExprNode{}
}

func (p *TExprNode) InitDefault() {
}

func (p *TExprNode) GetNodeType() (v TExprNodeType) {
	return p.NodeType
}

var TExprNode_Type_DEFAULT *types.TTypeDesc

func (p *TExprNode) GetType() (v *types.TTypeDesc) {
	if !p.IsSetType() {
		return TExprNode_Type_DEFAULT
	}
	return p.Type
}

var TExprNode_Opcode_DEFAULT opcodes.TExprOpcode

func (p *TExprNode) GetOpcode() (v opcodes.TExprOpcode) {
	if !p.IsSetOpcode() {
		return TExprNode_Opcode_DEFAULT
	}
	return *p.Opcode
}

func (p *TExprNode) GetNumChildren() (v int32) {
	return p.NumChildren
}

var TExprNode_AggExpr_DEFAULT *TAggregateExpr

func (p *TExprNode) GetAggExpr() (v *TAggregateExpr) {
	if !p.IsSetAggExpr() {
		return TExprNode_AggExpr_DEFAULT
	}
	return p.AggExpr
}

var TExprNode_BoolLiteral_DEFAULT *TBoolLiteral

func (p *TExprNode) GetBoolLiteral() (v *TBoolLiteral) {
	if !p.IsSetBoolLiteral() {
		return TExprNode_BoolLiteral_DEFAULT
	}
	return p.BoolLiteral
}

var TExprNode_CaseExpr_DEFAULT *TCaseExpr

func (p *TExprNode) GetCaseExpr() (v *TCaseExpr) {
	if !p.IsSetCaseExpr() {
		return TExprNode_CaseExpr_DEFAULT
	}
	return p.CaseExpr
}

var TExprNode_DateLiteral_DEFAULT *TDateLiteral

func (p *TExprNode) GetDateLiteral() (v *TDateLiteral) {
	if !p.IsSetDateLiteral() {
		return TExprNode_DateLiteral_DEFAULT
	}
	return p.DateLiteral
}

var TExprNode_FloatLiteral_DEFAULT *TFloatLiteral

func (p *TExprNode) GetFloatLiteral() (v *TFloatLiteral) {
	if !p.IsSetFloatLiteral() {
		return TExprNode_FloatLiteral_DEFAULT
	}
	return p.FloatLiteral
}

var TExprNode_IntLiteral_DEFAULT *TIntLiteral

func (p *TExprNode) GetIntLiteral() (v *TIntLiteral) {
	if !p.IsSetIntLiteral() {
		return TExprNode_IntLiteral_DEFAULT
	}
	return p.IntLiteral
}

var TExprNode_InPredicate_DEFAULT *TInPredicate

func (p *TExprNode) GetInPredicate() (v *TInPredicate) {
	if !p.IsSetInPredicate() {
		return TExprNode_InPredicate_DEFAULT
	}
	return p.InPredicate
}

var TExprNode_IsNullPred_DEFAULT *TIsNullPredicate

func (p *TExprNode) GetIsNullPred() (v *TIsNullPredicate) {
	if !p.IsSetIsNullPred() {
		return TExprNode_IsNullPred_DEFAULT
	}
	return p.IsNullPred
}

var TExprNode_LikePred_DEFAULT *TLikePredicate

func (p *TExprNode) GetLikePred() (v *TLikePredicate) {
	if !p.IsSetLikePred() {
		return TExprNode_LikePred_DEFAULT
	}
	return p.LikePred
}

var TExprNode_LiteralPred_DEFAULT *TLiteralPredicate

func (p *TExprNode) GetLiteralPred() (v *TLiteralPredicate) {
	if !p.IsSetLiteralPred() {
		return TExprNode_LiteralPred_DEFAULT
	}
	return p.LiteralPred
}

var TExprNode_SlotRef_DEFAULT *TSlotRef

func (p *TExprNode) GetSlotRef() (v *TSlotRef) {
	if !p.IsSetSlotRef() {
		return TExprNode_SlotRef_DEFAULT
	}
	return p.SlotRef
}

var TExprNode_StringLiteral_DEFAULT *TStringLiteral

func (p *TExprNode) GetStringLiteral() (v *TStringLiteral) {
	if !p.IsSetStringLiteral() {
		return TExprNode_StringLiteral_DEFAULT
	}
	return p.StringLiteral
}

var TExprNode_TupleIsNullPred_DEFAULT *TTupleIsNullPredicate

func (p *TExprNode) GetTupleIsNullPred() (v *TTupleIsNullPredicate) {
	if !p.IsSetTupleIsNullPred() {
		return TExprNode_TupleIsNullPred_DEFAULT
	}
	return p.TupleIsNullPred
}

var TExprNode_InfoFunc_DEFAULT *TInfoFunc

func (p *TExprNode) GetInfoFunc() (v *TInfoFunc) {
	if !p.IsSetInfoFunc() {
		return TExprNode_InfoFunc_DEFAULT
	}
	return p.InfoFunc
}

var TExprNode_DecimalLiteral_DEFAULT *TDecimalLiteral

func (p *TExprNode) GetDecimalLiteral() (v *TDecimalLiteral) {
	if !p.IsSetDecimalLiteral() {
		return TExprNode_DecimalLiteral_DEFAULT
	}
	return p.DecimalLiteral
}

func (p *TExprNode) GetOutputScale() (v int32) {
	return p.OutputScale
}

var TExprNode_FnCallExpr_DEFAULT *TFunctionCallExpr

func (p *TExprNode) GetFnCallExpr() (v *TFunctionCallExpr) {
	if !p.IsSetFnCallExpr() {
		return TExprNode_FnCallExpr_DEFAULT
	}
	return p.FnCallExpr
}

var TExprNode_LargeIntLiteral_DEFAULT *TLargeIntLiteral

func (p *TExprNode) GetLargeIntLiteral() (v *TLargeIntLiteral) {
	if !p.IsSetLargeIntLiteral() {
		return TExprNode_LargeIntLiteral_DEFAULT
	}
	return p.LargeIntLiteral
}

var TExprNode_OutputColumn_DEFAULT int32

func (p *TExprNode) GetOutputColumn() (v int32) {
	if !p.IsSetOutputColumn() {
		return TExprNode_OutputColumn_DEFAULT
	}
	return *p.OutputColumn
}

var TExprNode_OutputType_DEFAULT *types.TColumnType

func (p *TExprNode) GetOutputType() (v *types.TColumnType) {
	if !p.IsSetOutputType() {
		return TExprNode_OutputType_DEFAULT
	}
	return p.OutputType
}

var TExprNode_VectorOpcode_DEFAULT opcodes.TExprOpcode

func (p *TExprNode) GetVectorOpcode() (v opcodes.TExprOpcode) {
	if !p.IsSetVectorOpcode() {
		return TExprNode_VectorOpcode_DEFAULT
	}
	return *p.VectorOpcode
}

var TExprNode_Fn_DEFAULT *types.TFunction

func (p *TExprNode) GetFn() (v *types.TFunction) {
	if !p.IsSetFn() {
		return TExprNode_Fn_DEFAULT
	}
	return p.Fn
}

var TExprNode_VarargStartIdx_DEFAULT int32

func (p *TExprNode) GetVarargStartIdx() (v int32) {
	if !p.IsSetVarargStartIdx() {
		return TExprNode_VarargStartIdx_DEFAULT
	}
	return *p.VarargStartIdx
}

var TExprNode_ChildType_DEFAULT types.TPrimitiveType

func (p *TExprNode) GetChildType() (v types.TPrimitiveType) {
	if !p.IsSetChildType() {
		return TExprNode_ChildType_DEFAULT
	}
	return *p.ChildType
}

var TExprNode_IsNullable_DEFAULT bool

func (p *TExprNode) GetIsNullable() (v bool) {
	if !p.IsSetIsNullable() {
		return TExprNode_IsNullable_DEFAULT
	}
	return *p.IsNullable
}

var TExprNode_JsonLiteral_DEFAULT *TJsonLiteral

func (p *TExprNode) GetJsonLiteral() (v *TJsonLiteral) {
	if !p.IsSetJsonLiteral() {
		return TExprNode_JsonLiteral_DEFAULT
	}
	return p.JsonLiteral
}

var TExprNode_SchemaChangeExpr_DEFAULT *TSchemaChangeExpr

func (p *TExprNode) GetSchemaChangeExpr() (v *TSchemaChangeExpr) {
	if !p.IsSetSchemaChangeExpr() {
		return TExprNode_SchemaChangeExpr_DEFAULT
	}
	return p.SchemaChangeExpr
}

var TExprNode_ColumnRef_DEFAULT *TColumnRef

func (p *TExprNode) GetColumnRef() (v *TColumnRef) {
	if !p.IsSetColumnRef() {
		return TExprNode_ColumnRef_DEFAULT
	}
	return p.ColumnRef
}

var TExprNode_MatchPredicate_DEFAULT *TMatchPredicate

func (p *TExprNode) GetMatchPredicate() (v *TMatchPredicate) {
	if !p.IsSetMatchPredicate() {
		return TExprNode_MatchPredicate_DEFAULT
	}
	return p.MatchPredicate
}

var TExprNode_Ipv4Literal_DEFAULT *TIPv4Literal

func (p *TExprNode) GetIpv4Literal() (v *TIPv4Literal) {
	if !p.IsSetIpv4Literal() {
		return TExprNode_Ipv4Literal_DEFAULT
	}
	return p.Ipv4Literal
}

var TExprNode_Ipv6Literal_DEFAULT *TIPv6Literal

func (p *TExprNode) GetIpv6Literal() (v *TIPv6Literal) {
	if !p.IsSetIpv6Literal() {
		return TExprNode_Ipv6Literal_DEFAULT
	}
	return p.Ipv6Literal
}

var TExprNode_Label_DEFAULT string

func (p *TExprNode) GetLabel() (v string) {
	if !p.IsSetLabel() {
		return TExprNode_Label_DEFAULT
	}
	return *p.Label
}
func (p *TExprNode) SetNodeType(val TExprNodeType) {
	p.NodeType = val
}
func (p *TExprNode) SetType(val *types.TTypeDesc) {
	p.Type = val
}
func (p *TExprNode) SetOpcode(val *opcodes.TExprOpcode) {
	p.Opcode = val
}
func (p *TExprNode) SetNumChildren(val int32) {
	p.NumChildren = val
}
func (p *TExprNode) SetAggExpr(val *TAggregateExpr) {
	p.AggExpr = val
}
func (p *TExprNode) SetBoolLiteral(val *TBoolLiteral) {
	p.BoolLiteral = val
}
func (p *TExprNode) SetCaseExpr(val *TCaseExpr) {
	p.CaseExpr = val
}
func (p *TExprNode) SetDateLiteral(val *TDateLiteral) {
	p.DateLiteral = val
}
func (p *TExprNode) SetFloatLiteral(val *TFloatLiteral) {
	p.FloatLiteral = val
}
func (p *TExprNode) SetIntLiteral(val *TIntLiteral) {
	p.IntLiteral = val
}
func (p *TExprNode) SetInPredicate(val *TInPredicate) {
	p.InPredicate = val
}
func (p *TExprNode) SetIsNullPred(val *TIsNullPredicate) {
	p.IsNullPred = val
}
func (p *TExprNode) SetLikePred(val *TLikePredicate) {
	p.LikePred = val
}
func (p *TExprNode) SetLiteralPred(val *TLiteralPredicate) {
	p.LiteralPred = val
}
func (p *TExprNode) SetSlotRef(val *TSlotRef) {
	p.SlotRef = val
}
func (p *TExprNode) SetStringLiteral(val *TStringLiteral) {
	p.StringLiteral = val
}
func (p *TExprNode) SetTupleIsNullPred(val *TTupleIsNullPredicate) {
	p.TupleIsNullPred = val
}
func (p *TExprNode) SetInfoFunc(val *TInfoFunc) {
	p.InfoFunc = val
}
func (p *TExprNode) SetDecimalLiteral(val *TDecimalLiteral) {
	p.DecimalLiteral = val
}
func (p *TExprNode) SetOutputScale(val int32) {
	p.OutputScale = val
}
func (p *TExprNode) SetFnCallExpr(val *TFunctionCallExpr) {
	p.FnCallExpr = val
}
func (p *TExprNode) SetLargeIntLiteral(val *TLargeIntLiteral) {
	p.LargeIntLiteral = val
}
func (p *TExprNode) SetOutputColumn(val *int32) {
	p.OutputColumn = val
}
func (p *TExprNode) SetOutputType(val *types.TColumnType) {
	p.OutputType = val
}
func (p *TExprNode) SetVectorOpcode(val *opcodes.TExprOpcode) {
	p.VectorOpcode = val
}
func (p *TExprNode) SetFn(val *types.TFunction) {
	p.Fn = val
}
func (p *TExprNode) SetVarargStartIdx(val *int32) {
	p.VarargStartIdx = val
}
func (p *TExprNode) SetChildType(val *types.TPrimitiveType) {
	p.ChildType = val
}
func (p *TExprNode) SetIsNullable(val *bool) {
	p.IsNullable = val
}
func (p *TExprNode) SetJsonLiteral(val *TJsonLiteral) {
	p.JsonLiteral = val
}
func (p *TExprNode) SetSchemaChangeExpr(val *TSchemaChangeExpr) {
	p.SchemaChangeExpr = val
}
func (p *TExprNode) SetColumnRef(val *TColumnRef) {
	p.ColumnRef = val
}
func (p *TExprNode) SetMatchPredicate(val *TMatchPredicate) {
	p.MatchPredicate = val
}
func (p *TExprNode) SetIpv4Literal(val *TIPv4Literal) {
	p.Ipv4Literal = val
}
func (p *TExprNode) SetIpv6Literal(val *TIPv6Literal) {
	p.Ipv6Literal = val
}
func (p *TExprNode) SetLabel(val *string) {
	p.Label = val
}

var fieldIDToName_TExprNode = map[int16]string{
	1:  "node_type",
	2:  "type",
	3:  "opcode",
	4:  "num_children",
	5:  "agg_expr",
	6:  "bool_literal",
	7:  "case_expr",
	8:  "date_literal",
	9:  "float_literal",
	10: "int_literal",
	11: "in_predicate",
	12: "is_null_pred",
	13: "like_pred",
	14: "literal_pred",
	15: "slot_ref",
	16: "string_literal",
	17: "tuple_is_null_pred",
	18: "info_func",
	19: "decimal_literal",
	20: "output_scale",
	21: "fn_call_expr",
	22: "large_int_literal",
	23: "output_column",
	24: "output_type",
	25: "vector_opcode",
	26: "fn",
	27: "vararg_start_idx",
	28: "child_type",
	29: "is_nullable",
	30: "json_literal",
	31: "schema_change_expr",
	32: "column_ref",
	33: "match_predicate",
	34: "ipv4_literal",
	35: "ipv6_literal",
	36: "label",
}

func (p *TExprNode) IsSetType() bool {
	return p.Type != nil
}

func (p *TExprNode) IsSetOpcode() bool {
	return p.Opcode != nil
}

func (p *TExprNode) IsSetAggExpr() bool {
	return p.AggExpr != nil
}

func (p *TExprNode) IsSetBoolLiteral() bool {
	return p.BoolLiteral != nil
}

func (p *TExprNode) IsSetCaseExpr() bool {
	return p.CaseExpr != nil
}

func (p *TExprNode) IsSetDateLiteral() bool {
	return p.DateLiteral != nil
}

func (p *TExprNode) IsSetFloatLiteral() bool {
	return p.FloatLiteral != nil
}

func (p *TExprNode) IsSetIntLiteral() bool {
	return p.IntLiteral != nil
}

func (p *TExprNode) IsSetInPredicate() bool {
	return p.InPredicate != nil
}

func (p *TExprNode) IsSetIsNullPred() bool {
	return p.IsNullPred != nil
}

func (p *TExprNode) IsSetLikePred() bool {
	return p.LikePred != nil
}

func (p *TExprNode) IsSetLiteralPred() bool {
	return p.LiteralPred != nil
}

func (p *TExprNode) IsSetSlotRef() bool {
	return p.SlotRef != nil
}

func (p *TExprNode) IsSetStringLiteral() bool {
	return p.StringLiteral != nil
}

func (p *TExprNode) IsSetTupleIsNullPred() bool {
	return p.TupleIsNullPred != nil
}

func (p *TExprNode) IsSetInfoFunc() bool {
	return p.InfoFunc != nil
}

func (p *TExprNode) IsSetDecimalLiteral() bool {
	return p.DecimalLiteral != nil
}

func (p *TExprNode) IsSetFnCallExpr() bool {
	return p.FnCallExpr != nil
}

func (p *TExprNode) IsSetLargeIntLiteral() bool {
	return p.LargeIntLiteral != nil
}

func (p *TExprNode) IsSetOutputColumn() bool {
	return p.OutputColumn != nil
}

func (p *TExprNode) IsSetOutputType() bool {
	return p.OutputType != nil
}

func (p *TExprNode) IsSetVectorOpcode() bool {
	return p.VectorOpcode != nil
}

func (p *TExprNode) IsSetFn() bool {
	return p.Fn != nil
}

func (p *TExprNode) IsSetVarargStartIdx() bool {
	return p.VarargStartIdx != nil
}

func (p *TExprNode) IsSetChildType() bool {
	return p.ChildType != nil
}

func (p *TExprNode) IsSetIsNullable() bool {
	return p.IsNullable != nil
}

func (p *TExprNode) IsSetJsonLiteral() bool {
	return p.JsonLiteral != nil
}

func (p *TExprNode) IsSetSchemaChangeExpr() bool {
	return p.SchemaChangeExpr != nil
}

func (p *TExprNode) IsSetColumnRef() bool {
	return p.ColumnRef != nil
}

func (p *TExprNode) IsSetMatchPredicate() bool {
	return p.MatchPredicate != nil
}

func (p *TExprNode) IsSetIpv4Literal() bool {
	return p.Ipv4Literal != nil
}

func (p *TExprNode) IsSetIpv6Literal() bool {
	return p.Ipv6Literal != nil
}

func (p *TExprNode) IsSetLabel() bool {
	return p.Label != nil
}

func (p *TExprNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNodeType bool = false
	var issetType bool = false
	var issetNumChildren bool = false
	var issetOutputScale bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodeType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetNumChildren = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
				issetOutputScale = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 29:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 30:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 32:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 33:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField33(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 34:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField34(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 35:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField35(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 36:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField36(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNodeType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetNumChildren {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetOutputScale {
		fieldId = 20
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExprNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TExprNode[fieldId]))
}

func (p *TExprNode) ReadField1(iprot thrift.TProtocol) error {

	var _field TExprNodeType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TExprNodeType(v)
	}
	p.NodeType = _field
	return nil
}
func (p *TExprNode) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTTypeDesc()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Type = _field
	return nil
}
func (p *TExprNode) ReadField3(iprot thrift.TProtocol) error {

	var _field *opcodes.TExprOpcode
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := opcodes.TExprOpcode(v)
		_field = &tmp
	}
	p.Opcode = _field
	return nil
}
func (p *TExprNode) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumChildren = _field
	return nil
}
func (p *TExprNode) ReadField5(iprot thrift.TProtocol) error {
	_field := NewTAggregateExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AggExpr = _field
	return nil
}
func (p *TExprNode) ReadField6(iprot thrift.TProtocol) error {
	_field := NewTBoolLiteral()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BoolLiteral = _field
	return nil
}
func (p *TExprNode) ReadField7(iprot thrift.TProtocol) error {
	_field := NewTCaseExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CaseExpr = _field
	return nil
}
func (p *TExprNode) ReadField8(iprot thrift.TProtocol) error {
	_field := NewTDateLiteral()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DateLiteral = _field
	return nil
}
func (p *TExprNode) ReadField9(iprot thrift.TProtocol) error {
	_field := NewTFloatLiteral()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FloatLiteral = _field
	return nil
}
func (p *TExprNode) ReadField10(iprot thrift.TProtocol) error {
	_field := NewTIntLiteral()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.IntLiteral = _field
	return nil
}
func (p *TExprNode) ReadField11(iprot thrift.TProtocol) error {
	_field := NewTInPredicate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.InPredicate = _field
	return nil
}
func (p *TExprNode) ReadField12(iprot thrift.TProtocol) error {
	_field := NewTIsNullPredicate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.IsNullPred = _field
	return nil
}
func (p *TExprNode) ReadField13(iprot thrift.TProtocol) error {
	_field := NewTLikePredicate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.LikePred = _field
	return nil
}
func (p *TExprNode) ReadField14(iprot thrift.TProtocol) error {
	_field := NewTLiteralPredicate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.LiteralPred = _field
	return nil
}
func (p *TExprNode) ReadField15(iprot thrift.TProtocol) error {
	_field := NewTSlotRef()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SlotRef = _field
	return nil
}
func (p *TExprNode) ReadField16(iprot thrift.TProtocol) error {
	_field := NewTStringLiteral()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.StringLiteral = _field
	return nil
}
func (p *TExprNode) ReadField17(iprot thrift.TProtocol) error {
	_field := NewTTupleIsNullPredicate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TupleIsNullPred = _field
	return nil
}
func (p *TExprNode) ReadField18(iprot thrift.TProtocol) error {
	_field := NewTInfoFunc()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.InfoFunc = _field
	return nil
}
func (p *TExprNode) ReadField19(iprot thrift.TProtocol) error {
	_field := NewTDecimalLiteral()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DecimalLiteral = _field
	return nil
}
func (p *TExprNode) ReadField20(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OutputScale = _field
	return nil
}
func (p *TExprNode) ReadField21(iprot thrift.TProtocol) error {
	_field := NewTFunctionCallExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FnCallExpr = _field
	return nil
}
func (p *TExprNode) ReadField22(iprot thrift.TProtocol) error {
	_field := NewTLargeIntLiteral()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.LargeIntLiteral = _field
	return nil
}
func (p *TExprNode) ReadField23(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OutputColumn = _field
	return nil
}
func (p *TExprNode) ReadField24(iprot thrift.TProtocol) error {
	_field := types.NewTColumnType()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.OutputType = _field
	return nil
}
func (p *TExprNode) ReadField25(iprot thrift.TProtocol) error {

	var _field *opcodes.TExprOpcode
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := opcodes.TExprOpcode(v)
		_field = &tmp
	}
	p.VectorOpcode = _field
	return nil
}
func (p *TExprNode) ReadField26(iprot thrift.TProtocol) error {
	_field := types.NewTFunction()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Fn = _field
	return nil
}
func (p *TExprNode) ReadField27(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VarargStartIdx = _field
	return nil
}
func (p *TExprNode) ReadField28(iprot thrift.TProtocol) error {

	var _field *types.TPrimitiveType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TPrimitiveType(v)
		_field = &tmp
	}
	p.ChildType = _field
	return nil
}
func (p *TExprNode) ReadField29(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsNullable = _field
	return nil
}
func (p *TExprNode) ReadField30(iprot thrift.TProtocol) error {
	_field := NewTJsonLiteral()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.JsonLiteral = _field
	return nil
}
func (p *TExprNode) ReadField31(iprot thrift.TProtocol) error {
	_field := NewTSchemaChangeExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SchemaChangeExpr = _field
	return nil
}
func (p *TExprNode) ReadField32(iprot thrift.TProtocol) error {
	_field := NewTColumnRef()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ColumnRef = _field
	return nil
}
func (p *TExprNode) ReadField33(iprot thrift.TProtocol) error {
	_field := NewTMatchPredicate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MatchPredicate = _field
	return nil
}
func (p *TExprNode) ReadField34(iprot thrift.TProtocol) error {
	_field := NewTIPv4Literal()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Ipv4Literal = _field
	return nil
}
func (p *TExprNode) ReadField35(iprot thrift.TProtocol) error {
	_field := NewTIPv6Literal()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Ipv6Literal = _field
	return nil
}
func (p *TExprNode) ReadField36(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Label = _field
	return nil
}

func (p *TExprNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TExprNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField33(oprot); err != nil {
			fieldId = 33
			goto WriteFieldError
		}
		if err = p.writeField34(oprot); err != nil {
			fieldId = 34
			goto WriteFieldError
		}
		if err = p.writeField35(oprot); err != nil {
			fieldId = 35
			goto WriteFieldError
		}
		if err = p.writeField36(oprot); err != nil {
			fieldId = 36
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TExprNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("node_type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.NodeType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TExprNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Type.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TExprNode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOpcode() {
		if err = oprot.WriteFieldBegin("opcode", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Opcode)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TExprNode) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("num_children", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NumChildren); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TExprNode) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAggExpr() {
		if err = oprot.WriteFieldBegin("agg_expr", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.AggExpr.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TExprNode) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBoolLiteral() {
		if err = oprot.WriteFieldBegin("bool_literal", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BoolLiteral.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TExprNode) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCaseExpr() {
		if err = oprot.WriteFieldBegin("case_expr", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CaseExpr.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TExprNode) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDateLiteral() {
		if err = oprot.WriteFieldBegin("date_literal", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DateLiteral.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TExprNode) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetFloatLiteral() {
		if err = oprot.WriteFieldBegin("float_literal", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FloatLiteral.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TExprNode) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntLiteral() {
		if err = oprot.WriteFieldBegin("int_literal", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.IntLiteral.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TExprNode) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetInPredicate() {
		if err = oprot.WriteFieldBegin("in_predicate", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.InPredicate.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TExprNode) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsNullPred() {
		if err = oprot.WriteFieldBegin("is_null_pred", thrift.STRUCT, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.IsNullPred.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TExprNode) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetLikePred() {
		if err = oprot.WriteFieldBegin("like_pred", thrift.STRUCT, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.LikePred.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TExprNode) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetLiteralPred() {
		if err = oprot.WriteFieldBegin("literal_pred", thrift.STRUCT, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.LiteralPred.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TExprNode) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetSlotRef() {
		if err = oprot.WriteFieldBegin("slot_ref", thrift.STRUCT, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.SlotRef.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TExprNode) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringLiteral() {
		if err = oprot.WriteFieldBegin("string_literal", thrift.STRUCT, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.StringLiteral.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TExprNode) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetTupleIsNullPred() {
		if err = oprot.WriteFieldBegin("tuple_is_null_pred", thrift.STRUCT, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TupleIsNullPred.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TExprNode) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetInfoFunc() {
		if err = oprot.WriteFieldBegin("info_func", thrift.STRUCT, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.InfoFunc.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TExprNode) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetDecimalLiteral() {
		if err = oprot.WriteFieldBegin("decimal_literal", thrift.STRUCT, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DecimalLiteral.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TExprNode) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("output_scale", thrift.I32, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.OutputScale); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *TExprNode) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetFnCallExpr() {
		if err = oprot.WriteFieldBegin("fn_call_expr", thrift.STRUCT, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FnCallExpr.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *TExprNode) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetLargeIntLiteral() {
		if err = oprot.WriteFieldBegin("large_int_literal", thrift.STRUCT, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.LargeIntLiteral.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *TExprNode) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputColumn() {
		if err = oprot.WriteFieldBegin("output_column", thrift.I32, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.OutputColumn); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *TExprNode) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputType() {
		if err = oprot.WriteFieldBegin("output_type", thrift.STRUCT, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.OutputType.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *TExprNode) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetVectorOpcode() {
		if err = oprot.WriteFieldBegin("vector_opcode", thrift.I32, 25); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.VectorOpcode)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *TExprNode) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetFn() {
		if err = oprot.WriteFieldBegin("fn", thrift.STRUCT, 26); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Fn.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *TExprNode) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetVarargStartIdx() {
		if err = oprot.WriteFieldBegin("vararg_start_idx", thrift.I32, 27); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.VarargStartIdx); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *TExprNode) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetChildType() {
		if err = oprot.WriteFieldBegin("child_type", thrift.I32, 28); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.ChildType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *TExprNode) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsNullable() {
		if err = oprot.WriteFieldBegin("is_nullable", thrift.BOOL, 29); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsNullable); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}

func (p *TExprNode) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetJsonLiteral() {
		if err = oprot.WriteFieldBegin("json_literal", thrift.STRUCT, 30); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.JsonLiteral.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}

func (p *TExprNode) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaChangeExpr() {
		if err = oprot.WriteFieldBegin("schema_change_expr", thrift.STRUCT, 31); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.SchemaChangeExpr.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}

func (p *TExprNode) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnRef() {
		if err = oprot.WriteFieldBegin("column_ref", thrift.STRUCT, 32); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ColumnRef.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}

func (p *TExprNode) writeField33(oprot thrift.TProtocol) (err error) {
	if p.IsSetMatchPredicate() {
		if err = oprot.WriteFieldBegin("match_predicate", thrift.STRUCT, 33); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MatchPredicate.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 end error: ", p), err)
}

func (p *TExprNode) writeField34(oprot thrift.TProtocol) (err error) {
	if p.IsSetIpv4Literal() {
		if err = oprot.WriteFieldBegin("ipv4_literal", thrift.STRUCT, 34); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Ipv4Literal.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 end error: ", p), err)
}

func (p *TExprNode) writeField35(oprot thrift.TProtocol) (err error) {
	if p.IsSetIpv6Literal() {
		if err = oprot.WriteFieldBegin("ipv6_literal", thrift.STRUCT, 35); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Ipv6Literal.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 end error: ", p), err)
}

func (p *TExprNode) writeField36(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabel() {
		if err = oprot.WriteFieldBegin("label", thrift.STRING, 36); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Label); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 end error: ", p), err)
}

func (p *TExprNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExprNode(%+v)", *p)

}

func (p *TExprNode) DeepEqual(ano *TExprNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.NodeType) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	if !p.Field3DeepEqual(ano.Opcode) {
		return false
	}
	if !p.Field4DeepEqual(ano.NumChildren) {
		return false
	}
	if !p.Field5DeepEqual(ano.AggExpr) {
		return false
	}
	if !p.Field6DeepEqual(ano.BoolLiteral) {
		return false
	}
	if !p.Field7DeepEqual(ano.CaseExpr) {
		return false
	}
	if !p.Field8DeepEqual(ano.DateLiteral) {
		return false
	}
	if !p.Field9DeepEqual(ano.FloatLiteral) {
		return false
	}
	if !p.Field10DeepEqual(ano.IntLiteral) {
		return false
	}
	if !p.Field11DeepEqual(ano.InPredicate) {
		return false
	}
	if !p.Field12DeepEqual(ano.IsNullPred) {
		return false
	}
	if !p.Field13DeepEqual(ano.LikePred) {
		return false
	}
	if !p.Field14DeepEqual(ano.LiteralPred) {
		return false
	}
	if !p.Field15DeepEqual(ano.SlotRef) {
		return false
	}
	if !p.Field16DeepEqual(ano.StringLiteral) {
		return false
	}
	if !p.Field17DeepEqual(ano.TupleIsNullPred) {
		return false
	}
	if !p.Field18DeepEqual(ano.InfoFunc) {
		return false
	}
	if !p.Field19DeepEqual(ano.DecimalLiteral) {
		return false
	}
	if !p.Field20DeepEqual(ano.OutputScale) {
		return false
	}
	if !p.Field21DeepEqual(ano.FnCallExpr) {
		return false
	}
	if !p.Field22DeepEqual(ano.LargeIntLiteral) {
		return false
	}
	if !p.Field23DeepEqual(ano.OutputColumn) {
		return false
	}
	if !p.Field24DeepEqual(ano.OutputType) {
		return false
	}
	if !p.Field25DeepEqual(ano.VectorOpcode) {
		return false
	}
	if !p.Field26DeepEqual(ano.Fn) {
		return false
	}
	if !p.Field27DeepEqual(ano.VarargStartIdx) {
		return false
	}
	if !p.Field28DeepEqual(ano.ChildType) {
		return false
	}
	if !p.Field29DeepEqual(ano.IsNullable) {
		return false
	}
	if !p.Field30DeepEqual(ano.JsonLiteral) {
		return false
	}
	if !p.Field31DeepEqual(ano.SchemaChangeExpr) {
		return false
	}
	if !p.Field32DeepEqual(ano.ColumnRef) {
		return false
	}
	if !p.Field33DeepEqual(ano.MatchPredicate) {
		return false
	}
	if !p.Field34DeepEqual(ano.Ipv4Literal) {
		return false
	}
	if !p.Field35DeepEqual(ano.Ipv6Literal) {
		return false
	}
	if !p.Field36DeepEqual(ano.Label) {
		return false
	}
	return true
}

func (p *TExprNode) Field1DeepEqual(src TExprNodeType) bool {

	if p.NodeType != src {
		return false
	}
	return true
}
func (p *TExprNode) Field2DeepEqual(src *types.TTypeDesc) bool {

	if !p.Type.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field3DeepEqual(src *opcodes.TExprOpcode) bool {

	if p.Opcode == src {
		return true
	} else if p.Opcode == nil || src == nil {
		return false
	}
	if *p.Opcode != *src {
		return false
	}
	return true
}
func (p *TExprNode) Field4DeepEqual(src int32) bool {

	if p.NumChildren != src {
		return false
	}
	return true
}
func (p *TExprNode) Field5DeepEqual(src *TAggregateExpr) bool {

	if !p.AggExpr.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field6DeepEqual(src *TBoolLiteral) bool {

	if !p.BoolLiteral.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field7DeepEqual(src *TCaseExpr) bool {

	if !p.CaseExpr.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field8DeepEqual(src *TDateLiteral) bool {

	if !p.DateLiteral.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field9DeepEqual(src *TFloatLiteral) bool {

	if !p.FloatLiteral.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field10DeepEqual(src *TIntLiteral) bool {

	if !p.IntLiteral.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field11DeepEqual(src *TInPredicate) bool {

	if !p.InPredicate.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field12DeepEqual(src *TIsNullPredicate) bool {

	if !p.IsNullPred.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field13DeepEqual(src *TLikePredicate) bool {

	if !p.LikePred.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field14DeepEqual(src *TLiteralPredicate) bool {

	if !p.LiteralPred.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field15DeepEqual(src *TSlotRef) bool {

	if !p.SlotRef.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field16DeepEqual(src *TStringLiteral) bool {

	if !p.StringLiteral.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field17DeepEqual(src *TTupleIsNullPredicate) bool {

	if !p.TupleIsNullPred.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field18DeepEqual(src *TInfoFunc) bool {

	if !p.InfoFunc.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field19DeepEqual(src *TDecimalLiteral) bool {

	if !p.DecimalLiteral.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field20DeepEqual(src int32) bool {

	if p.OutputScale != src {
		return false
	}
	return true
}
func (p *TExprNode) Field21DeepEqual(src *TFunctionCallExpr) bool {

	if !p.FnCallExpr.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field22DeepEqual(src *TLargeIntLiteral) bool {

	if !p.LargeIntLiteral.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field23DeepEqual(src *int32) bool {

	if p.OutputColumn == src {
		return true
	} else if p.OutputColumn == nil || src == nil {
		return false
	}
	if *p.OutputColumn != *src {
		return false
	}
	return true
}
func (p *TExprNode) Field24DeepEqual(src *types.TColumnType) bool {

	if !p.OutputType.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field25DeepEqual(src *opcodes.TExprOpcode) bool {

	if p.VectorOpcode == src {
		return true
	} else if p.VectorOpcode == nil || src == nil {
		return false
	}
	if *p.VectorOpcode != *src {
		return false
	}
	return true
}
func (p *TExprNode) Field26DeepEqual(src *types.TFunction) bool {

	if !p.Fn.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field27DeepEqual(src *int32) bool {

	if p.VarargStartIdx == src {
		return true
	} else if p.VarargStartIdx == nil || src == nil {
		return false
	}
	if *p.VarargStartIdx != *src {
		return false
	}
	return true
}
func (p *TExprNode) Field28DeepEqual(src *types.TPrimitiveType) bool {

	if p.ChildType == src {
		return true
	} else if p.ChildType == nil || src == nil {
		return false
	}
	if *p.ChildType != *src {
		return false
	}
	return true
}
func (p *TExprNode) Field29DeepEqual(src *bool) bool {

	if p.IsNullable == src {
		return true
	} else if p.IsNullable == nil || src == nil {
		return false
	}
	if *p.IsNullable != *src {
		return false
	}
	return true
}
func (p *TExprNode) Field30DeepEqual(src *TJsonLiteral) bool {

	if !p.JsonLiteral.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field31DeepEqual(src *TSchemaChangeExpr) bool {

	if !p.SchemaChangeExpr.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field32DeepEqual(src *TColumnRef) bool {

	if !p.ColumnRef.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field33DeepEqual(src *TMatchPredicate) bool {

	if !p.MatchPredicate.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field34DeepEqual(src *TIPv4Literal) bool {

	if !p.Ipv4Literal.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field35DeepEqual(src *TIPv6Literal) bool {

	if !p.Ipv6Literal.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExprNode) Field36DeepEqual(src *string) bool {

	if p.Label == src {
		return true
	} else if p.Label == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Label, *src) != 0 {
		return false
	}
	return true
}

type TExpr struct {
	Nodes []*TExprNode `thrift:"nodes,1,required" frugal:"1,required,list<TExprNode>" json:"nodes"`
}

func NewTExpr() *TExpr {
	return &TExpr{}
}

func (p *TExpr) InitDefault() {
}

func (p *TExpr) GetNodes() (v []*TExprNode) {
	return p.Nodes
}
func (p *TExpr) SetNodes(val []*TExprNode) {
	p.Nodes = val
}

var fieldIDToName_TExpr = map[int16]string{
	1: "nodes",
}

func (p *TExpr) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNodes bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodes = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNodes {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExpr[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TExpr[fieldId]))
}

func (p *TExpr) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TExprNode, 0, size)
	values := make([]TExprNode, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Nodes = _field
	return nil
}

func (p *TExpr) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TExpr"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TExpr) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nodes", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Nodes)); err != nil {
		return err
	}
	for _, v := range p.Nodes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TExpr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExpr(%+v)", *p)

}

func (p *TExpr) DeepEqual(ano *TExpr) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Nodes) {
		return false
	}
	return true
}

func (p *TExpr) Field1DeepEqual(src []*TExprNode) bool {

	if len(p.Nodes) != len(src) {
		return false
	}
	for i, v := range p.Nodes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TExprList struct {
	Exprs []*TExpr `thrift:"exprs,1,required" frugal:"1,required,list<TExpr>" json:"exprs"`
}

func NewTExprList() *TExprList {
	return &TExprList{}
}

func (p *TExprList) InitDefault() {
}

func (p *TExprList) GetExprs() (v []*TExpr) {
	return p.Exprs
}
func (p *TExprList) SetExprs(val []*TExpr) {
	p.Exprs = val
}

var fieldIDToName_TExprList = map[int16]string{
	1: "exprs",
}

func (p *TExprList) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetExprs bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetExprs = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetExprs {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExprList[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TExprList[fieldId]))
}

func (p *TExprList) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TExpr, 0, size)
	values := make([]TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Exprs = _field
	return nil
}

func (p *TExprList) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TExprList"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TExprList) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("exprs", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Exprs)); err != nil {
		return err
	}
	for _, v := range p.Exprs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TExprList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExprList(%+v)", *p)

}

func (p *TExprList) DeepEqual(ano *TExprList) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Exprs) {
		return false
	}
	return true
}

func (p *TExprList) Field1DeepEqual(src []*TExpr) bool {

	if len(p.Exprs) != len(src) {
		return false
	}
	for i, v := range p.Exprs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
