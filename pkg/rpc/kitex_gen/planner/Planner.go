// Code generated by thriftgo (0.3.13). DO NOT EDIT.

package planner

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/datasinks"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/exprs"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/partitions"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/plannodes"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/querycache"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/types"
)

type TPlanFragment struct {
	Plan                          *plannodes.TPlan             `thrift:"plan,2,optional" frugal:"2,optional,plannodes.TPlan" json:"plan,omitempty"`
	OutputExprs                   []*exprs.TExpr               `thrift:"output_exprs,4,optional" frugal:"4,optional,list<exprs.TExpr>" json:"output_exprs,omitempty"`
	OutputSink                    *datasinks.TDataSink         `thrift:"output_sink,5,optional" frugal:"5,optional,datasinks.TDataSink" json:"output_sink,omitempty"`
	Partition                     *partitions.TDataPartition   `thrift:"partition,6,required" frugal:"6,required,partitions.TDataPartition" json:"partition"`
	MinReservationBytes           *int64                       `thrift:"min_reservation_bytes,7,optional" frugal:"7,optional,i64" json:"min_reservation_bytes,omitempty"`
	InitialReservationTotalClaims *int64                       `thrift:"initial_reservation_total_claims,8,optional" frugal:"8,optional,i64" json:"initial_reservation_total_claims,omitempty"`
	QueryCacheParam               *querycache.TQueryCacheParam `thrift:"query_cache_param,9,optional" frugal:"9,optional,querycache.TQueryCacheParam" json:"query_cache_param,omitempty"`
}

func NewTPlanFragment() *TPlanFragment {
	return &TPlanFragment{}
}

func (p *TPlanFragment) InitDefault() {
}

var TPlanFragment_Plan_DEFAULT *plannodes.TPlan

func (p *TPlanFragment) GetPlan() (v *plannodes.TPlan) {
	if !p.IsSetPlan() {
		return TPlanFragment_Plan_DEFAULT
	}
	return p.Plan
}

var TPlanFragment_OutputExprs_DEFAULT []*exprs.TExpr

func (p *TPlanFragment) GetOutputExprs() (v []*exprs.TExpr) {
	if !p.IsSetOutputExprs() {
		return TPlanFragment_OutputExprs_DEFAULT
	}
	return p.OutputExprs
}

var TPlanFragment_OutputSink_DEFAULT *datasinks.TDataSink

func (p *TPlanFragment) GetOutputSink() (v *datasinks.TDataSink) {
	if !p.IsSetOutputSink() {
		return TPlanFragment_OutputSink_DEFAULT
	}
	return p.OutputSink
}

var TPlanFragment_Partition_DEFAULT *partitions.TDataPartition

func (p *TPlanFragment) GetPartition() (v *partitions.TDataPartition) {
	if !p.IsSetPartition() {
		return TPlanFragment_Partition_DEFAULT
	}
	return p.Partition
}

var TPlanFragment_MinReservationBytes_DEFAULT int64

func (p *TPlanFragment) GetMinReservationBytes() (v int64) {
	if !p.IsSetMinReservationBytes() {
		return TPlanFragment_MinReservationBytes_DEFAULT
	}
	return *p.MinReservationBytes
}

var TPlanFragment_InitialReservationTotalClaims_DEFAULT int64

func (p *TPlanFragment) GetInitialReservationTotalClaims() (v int64) {
	if !p.IsSetInitialReservationTotalClaims() {
		return TPlanFragment_InitialReservationTotalClaims_DEFAULT
	}
	return *p.InitialReservationTotalClaims
}

var TPlanFragment_QueryCacheParam_DEFAULT *querycache.TQueryCacheParam

func (p *TPlanFragment) GetQueryCacheParam() (v *querycache.TQueryCacheParam) {
	if !p.IsSetQueryCacheParam() {
		return TPlanFragment_QueryCacheParam_DEFAULT
	}
	return p.QueryCacheParam
}
func (p *TPlanFragment) SetPlan(val *plannodes.TPlan) {
	p.Plan = val
}
func (p *TPlanFragment) SetOutputExprs(val []*exprs.TExpr) {
	p.OutputExprs = val
}
func (p *TPlanFragment) SetOutputSink(val *datasinks.TDataSink) {
	p.OutputSink = val
}
func (p *TPlanFragment) SetPartition(val *partitions.TDataPartition) {
	p.Partition = val
}
func (p *TPlanFragment) SetMinReservationBytes(val *int64) {
	p.MinReservationBytes = val
}
func (p *TPlanFragment) SetInitialReservationTotalClaims(val *int64) {
	p.InitialReservationTotalClaims = val
}
func (p *TPlanFragment) SetQueryCacheParam(val *querycache.TQueryCacheParam) {
	p.QueryCacheParam = val
}

var fieldIDToName_TPlanFragment = map[int16]string{
	2: "plan",
	4: "output_exprs",
	5: "output_sink",
	6: "partition",
	7: "min_reservation_bytes",
	8: "initial_reservation_total_claims",
	9: "query_cache_param",
}

func (p *TPlanFragment) IsSetPlan() bool {
	return p.Plan != nil
}

func (p *TPlanFragment) IsSetOutputExprs() bool {
	return p.OutputExprs != nil
}

func (p *TPlanFragment) IsSetOutputSink() bool {
	return p.OutputSink != nil
}

func (p *TPlanFragment) IsSetPartition() bool {
	return p.Partition != nil
}

func (p *TPlanFragment) IsSetMinReservationBytes() bool {
	return p.MinReservationBytes != nil
}

func (p *TPlanFragment) IsSetInitialReservationTotalClaims() bool {
	return p.InitialReservationTotalClaims != nil
}

func (p *TPlanFragment) IsSetQueryCacheParam() bool {
	return p.QueryCacheParam != nil
}

func (p *TPlanFragment) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPartition bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetPartition = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPartition {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPlanFragment[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPlanFragment[fieldId]))
}

func (p *TPlanFragment) ReadField2(iprot thrift.TProtocol) error {
	_field := plannodes.NewTPlan()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Plan = _field
	return nil
}
func (p *TPlanFragment) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OutputExprs = _field
	return nil
}
func (p *TPlanFragment) ReadField5(iprot thrift.TProtocol) error {
	_field := datasinks.NewTDataSink()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.OutputSink = _field
	return nil
}
func (p *TPlanFragment) ReadField6(iprot thrift.TProtocol) error {
	_field := partitions.NewTDataPartition()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Partition = _field
	return nil
}
func (p *TPlanFragment) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MinReservationBytes = _field
	return nil
}
func (p *TPlanFragment) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InitialReservationTotalClaims = _field
	return nil
}
func (p *TPlanFragment) ReadField9(iprot thrift.TProtocol) error {
	_field := querycache.NewTQueryCacheParam()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryCacheParam = _field
	return nil
}

func (p *TPlanFragment) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPlanFragment"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPlanFragment) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlan() {
		if err = oprot.WriteFieldBegin("plan", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Plan.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPlanFragment) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputExprs() {
		if err = oprot.WriteFieldBegin("output_exprs", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OutputExprs)); err != nil {
			return err
		}
		for _, v := range p.OutputExprs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TPlanFragment) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputSink() {
		if err = oprot.WriteFieldBegin("output_sink", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.OutputSink.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TPlanFragment) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("partition", thrift.STRUCT, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Partition.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TPlanFragment) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMinReservationBytes() {
		if err = oprot.WriteFieldBegin("min_reservation_bytes", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MinReservationBytes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TPlanFragment) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetInitialReservationTotalClaims() {
		if err = oprot.WriteFieldBegin("initial_reservation_total_claims", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.InitialReservationTotalClaims); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TPlanFragment) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryCacheParam() {
		if err = oprot.WriteFieldBegin("query_cache_param", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.QueryCacheParam.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TPlanFragment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPlanFragment(%+v)", *p)

}

func (p *TPlanFragment) DeepEqual(ano *TPlanFragment) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field2DeepEqual(ano.Plan) {
		return false
	}
	if !p.Field4DeepEqual(ano.OutputExprs) {
		return false
	}
	if !p.Field5DeepEqual(ano.OutputSink) {
		return false
	}
	if !p.Field6DeepEqual(ano.Partition) {
		return false
	}
	if !p.Field7DeepEqual(ano.MinReservationBytes) {
		return false
	}
	if !p.Field8DeepEqual(ano.InitialReservationTotalClaims) {
		return false
	}
	if !p.Field9DeepEqual(ano.QueryCacheParam) {
		return false
	}
	return true
}

func (p *TPlanFragment) Field2DeepEqual(src *plannodes.TPlan) bool {

	if !p.Plan.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanFragment) Field4DeepEqual(src []*exprs.TExpr) bool {

	if len(p.OutputExprs) != len(src) {
		return false
	}
	for i, v := range p.OutputExprs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPlanFragment) Field5DeepEqual(src *datasinks.TDataSink) bool {

	if !p.OutputSink.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanFragment) Field6DeepEqual(src *partitions.TDataPartition) bool {

	if !p.Partition.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanFragment) Field7DeepEqual(src *int64) bool {

	if p.MinReservationBytes == src {
		return true
	} else if p.MinReservationBytes == nil || src == nil {
		return false
	}
	if *p.MinReservationBytes != *src {
		return false
	}
	return true
}
func (p *TPlanFragment) Field8DeepEqual(src *int64) bool {

	if p.InitialReservationTotalClaims == src {
		return true
	} else if p.InitialReservationTotalClaims == nil || src == nil {
		return false
	}
	if *p.InitialReservationTotalClaims != *src {
		return false
	}
	return true
}
func (p *TPlanFragment) Field9DeepEqual(src *querycache.TQueryCacheParam) bool {

	if !p.QueryCacheParam.DeepEqual(src) {
		return false
	}
	return true
}

type TScanRangeLocation struct {
	Server    *types.TNetworkAddress `thrift:"server,1,required" frugal:"1,required,types.TNetworkAddress" json:"server"`
	VolumeId  int32                  `thrift:"volume_id,2,optional" frugal:"2,optional,i32" json:"volume_id,omitempty"`
	BackendId *int64                 `thrift:"backend_id,3,optional" frugal:"3,optional,i64" json:"backend_id,omitempty"`
}

func NewTScanRangeLocation() *TScanRangeLocation {
	return &TScanRangeLocation{

		VolumeId: -1,
	}
}

func (p *TScanRangeLocation) InitDefault() {
	p.VolumeId = -1
}

var TScanRangeLocation_Server_DEFAULT *types.TNetworkAddress

func (p *TScanRangeLocation) GetServer() (v *types.TNetworkAddress) {
	if !p.IsSetServer() {
		return TScanRangeLocation_Server_DEFAULT
	}
	return p.Server
}

var TScanRangeLocation_VolumeId_DEFAULT int32 = -1

func (p *TScanRangeLocation) GetVolumeId() (v int32) {
	if !p.IsSetVolumeId() {
		return TScanRangeLocation_VolumeId_DEFAULT
	}
	return p.VolumeId
}

var TScanRangeLocation_BackendId_DEFAULT int64

func (p *TScanRangeLocation) GetBackendId() (v int64) {
	if !p.IsSetBackendId() {
		return TScanRangeLocation_BackendId_DEFAULT
	}
	return *p.BackendId
}
func (p *TScanRangeLocation) SetServer(val *types.TNetworkAddress) {
	p.Server = val
}
func (p *TScanRangeLocation) SetVolumeId(val int32) {
	p.VolumeId = val
}
func (p *TScanRangeLocation) SetBackendId(val *int64) {
	p.BackendId = val
}

var fieldIDToName_TScanRangeLocation = map[int16]string{
	1: "server",
	2: "volume_id",
	3: "backend_id",
}

func (p *TScanRangeLocation) IsSetServer() bool {
	return p.Server != nil
}

func (p *TScanRangeLocation) IsSetVolumeId() bool {
	return p.VolumeId != TScanRangeLocation_VolumeId_DEFAULT
}

func (p *TScanRangeLocation) IsSetBackendId() bool {
	return p.BackendId != nil
}

func (p *TScanRangeLocation) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetServer bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetServer = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetServer {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TScanRangeLocation[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TScanRangeLocation[fieldId]))
}

func (p *TScanRangeLocation) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Server = _field
	return nil
}
func (p *TScanRangeLocation) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VolumeId = _field
	return nil
}
func (p *TScanRangeLocation) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BackendId = _field
	return nil
}

func (p *TScanRangeLocation) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TScanRangeLocation"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TScanRangeLocation) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("server", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Server.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TScanRangeLocation) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVolumeId() {
		if err = oprot.WriteFieldBegin("volume_id", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.VolumeId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TScanRangeLocation) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackendId() {
		if err = oprot.WriteFieldBegin("backend_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BackendId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TScanRangeLocation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScanRangeLocation(%+v)", *p)

}

func (p *TScanRangeLocation) DeepEqual(ano *TScanRangeLocation) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Server) {
		return false
	}
	if !p.Field2DeepEqual(ano.VolumeId) {
		return false
	}
	if !p.Field3DeepEqual(ano.BackendId) {
		return false
	}
	return true
}

func (p *TScanRangeLocation) Field1DeepEqual(src *types.TNetworkAddress) bool {

	if !p.Server.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TScanRangeLocation) Field2DeepEqual(src int32) bool {

	if p.VolumeId != src {
		return false
	}
	return true
}
func (p *TScanRangeLocation) Field3DeepEqual(src *int64) bool {

	if p.BackendId == src {
		return true
	} else if p.BackendId == nil || src == nil {
		return false
	}
	if *p.BackendId != *src {
		return false
	}
	return true
}

type TScanRangeLocations struct {
	ScanRange *plannodes.TScanRange `thrift:"scan_range,1,required" frugal:"1,required,plannodes.TScanRange" json:"scan_range"`
	Locations []*TScanRangeLocation `thrift:"locations,2" frugal:"2,default,list<TScanRangeLocation>" json:"locations"`
}

func NewTScanRangeLocations() *TScanRangeLocations {
	return &TScanRangeLocations{}
}

func (p *TScanRangeLocations) InitDefault() {
}

var TScanRangeLocations_ScanRange_DEFAULT *plannodes.TScanRange

func (p *TScanRangeLocations) GetScanRange() (v *plannodes.TScanRange) {
	if !p.IsSetScanRange() {
		return TScanRangeLocations_ScanRange_DEFAULT
	}
	return p.ScanRange
}

func (p *TScanRangeLocations) GetLocations() (v []*TScanRangeLocation) {
	return p.Locations
}
func (p *TScanRangeLocations) SetScanRange(val *plannodes.TScanRange) {
	p.ScanRange = val
}
func (p *TScanRangeLocations) SetLocations(val []*TScanRangeLocation) {
	p.Locations = val
}

var fieldIDToName_TScanRangeLocations = map[int16]string{
	1: "scan_range",
	2: "locations",
}

func (p *TScanRangeLocations) IsSetScanRange() bool {
	return p.ScanRange != nil
}

func (p *TScanRangeLocations) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetScanRange bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetScanRange = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetScanRange {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TScanRangeLocations[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TScanRangeLocations[fieldId]))
}

func (p *TScanRangeLocations) ReadField1(iprot thrift.TProtocol) error {
	_field := plannodes.NewTScanRange()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ScanRange = _field
	return nil
}
func (p *TScanRangeLocations) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TScanRangeLocation, 0, size)
	values := make([]TScanRangeLocation, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Locations = _field
	return nil
}

func (p *TScanRangeLocations) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TScanRangeLocations"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TScanRangeLocations) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("scan_range", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ScanRange.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TScanRangeLocations) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("locations", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Locations)); err != nil {
		return err
	}
	for _, v := range p.Locations {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TScanRangeLocations) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScanRangeLocations(%+v)", *p)

}

func (p *TScanRangeLocations) DeepEqual(ano *TScanRangeLocations) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ScanRange) {
		return false
	}
	if !p.Field2DeepEqual(ano.Locations) {
		return false
	}
	return true
}

func (p *TScanRangeLocations) Field1DeepEqual(src *plannodes.TScanRange) bool {

	if !p.ScanRange.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TScanRangeLocations) Field2DeepEqual(src []*TScanRangeLocation) bool {

	if len(p.Locations) != len(src) {
		return false
	}
	for i, v := range p.Locations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
