// Code generated by Kitex v0.8.0. DO NOT EDIT.

package types

import (
	"bytes"
	"fmt"
	"reflect"
	"strings"

	"github.com/apache/thrift/lib/go/thrift"

	"github.com/cloudwego/kitex/pkg/protocol/bthrift"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = thrift.TProtocol(nil)
	_ = bthrift.BinaryWriter(nil)
)

func (p *TScalarType) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TScalarType[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TScalarType[fieldId]))
}

func (p *TScalarType) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Type = TPrimitiveType(v)

	}
	return offset, nil
}

func (p *TScalarType) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Len = &v

	}
	return offset, nil
}

func (p *TScalarType) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Precision = &v

	}
	return offset, nil
}

func (p *TScalarType) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Scale = &v

	}
	return offset, nil
}

// for compatibility
func (p *TScalarType) FastWrite(buf []byte) int {
	return 0
}

func (p *TScalarType) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TScalarType")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TScalarType) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TScalarType")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TScalarType) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "type", thrift.I32, 1)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.Type))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TScalarType) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetLen() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "len", thrift.I32, 2)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.Len)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TScalarType) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPrecision() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "precision", thrift.I32, 3)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.Precision)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TScalarType) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetScale() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "scale", thrift.I32, 4)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.Scale)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TScalarType) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("type", thrift.I32, 1)
	l += bthrift.Binary.I32Length(int32(p.Type))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TScalarType) field2Length() int {
	l := 0
	if p.IsSetLen() {
		l += bthrift.Binary.FieldBeginLength("len", thrift.I32, 2)
		l += bthrift.Binary.I32Length(*p.Len)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TScalarType) field3Length() int {
	l := 0
	if p.IsSetPrecision() {
		l += bthrift.Binary.FieldBeginLength("precision", thrift.I32, 3)
		l += bthrift.Binary.I32Length(*p.Precision)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TScalarType) field4Length() int {
	l := 0
	if p.IsSetScale() {
		l += bthrift.Binary.FieldBeginLength("scale", thrift.I32, 4)
		l += bthrift.Binary.I32Length(*p.Scale)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStructField) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TStructField[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TStructField[fieldId]))
}

func (p *TStructField) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Name = v

	}
	return offset, nil
}

func (p *TStructField) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Comment = &v

	}
	return offset, nil
}

func (p *TStructField) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ContainsNull = &v

	}
	return offset, nil
}

// for compatibility
func (p *TStructField) FastWrite(buf []byte) int {
	return 0
}

func (p *TStructField) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TStructField")
	if p != nil {
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TStructField) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TStructField")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TStructField) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "name", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Name)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TStructField) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetComment() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "comment", thrift.STRING, 2)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Comment)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStructField) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetContainsNull() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "contains_null", thrift.BOOL, 3)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.ContainsNull)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TStructField) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("name", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.Name)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TStructField) field2Length() int {
	l := 0
	if p.IsSetComment() {
		l += bthrift.Binary.FieldBeginLength("comment", thrift.STRING, 2)
		l += bthrift.Binary.StringLengthNocopy(*p.Comment)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TStructField) field3Length() int {
	l := 0
	if p.IsSetContainsNull() {
		l += bthrift.Binary.FieldBeginLength("contains_null", thrift.BOOL, 3)
		l += bthrift.Binary.BoolLength(*p.ContainsNull)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTypeNode) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTypeNode[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTypeNode[fieldId]))
}

func (p *TTypeNode) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Type = TTypeNodeType(v)

	}
	return offset, nil
}

func (p *TTypeNode) FastReadField2(buf []byte) (int, error) {
	offset := 0

	tmp := NewTScalarType()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ScalarType = tmp
	return offset, nil
}

func (p *TTypeNode) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.StructFields = make([]*TStructField, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTStructField()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.StructFields = append(p.StructFields, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TTypeNode) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ContainsNull = &v

	}
	return offset, nil
}

func (p *TTypeNode) FastReadField5(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.ContainsNulls = make([]bool, 0, size)
	for i := 0; i < size; i++ {
		var _elem bool
		if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.ContainsNulls = append(p.ContainsNulls, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TTypeNode) FastWrite(buf []byte) int {
	return 0
}

func (p *TTypeNode) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTypeNode")
	if p != nil {
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTypeNode) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTypeNode")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTypeNode) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "type", thrift.I32, 1)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.Type))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTypeNode) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetScalarType() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "scalar_type", thrift.STRUCT, 2)
		offset += p.ScalarType.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTypeNode) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStructFields() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "struct_fields", thrift.LIST, 3)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.StructFields {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTypeNode) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetContainsNull() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "contains_null", thrift.BOOL, 4)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.ContainsNull)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTypeNode) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetContainsNulls() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "contains_nulls", thrift.LIST, 5)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.BOOL, 0)
		var length int
		for _, v := range p.ContainsNulls {
			length++
			offset += bthrift.Binary.WriteBool(buf[offset:], v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.BOOL, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTypeNode) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("type", thrift.I32, 1)
	l += bthrift.Binary.I32Length(int32(p.Type))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTypeNode) field2Length() int {
	l := 0
	if p.IsSetScalarType() {
		l += bthrift.Binary.FieldBeginLength("scalar_type", thrift.STRUCT, 2)
		l += p.ScalarType.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTypeNode) field3Length() int {
	l := 0
	if p.IsSetStructFields() {
		l += bthrift.Binary.FieldBeginLength("struct_fields", thrift.LIST, 3)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.StructFields))
		for _, v := range p.StructFields {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTypeNode) field4Length() int {
	l := 0
	if p.IsSetContainsNull() {
		l += bthrift.Binary.FieldBeginLength("contains_null", thrift.BOOL, 4)
		l += bthrift.Binary.BoolLength(*p.ContainsNull)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTypeNode) field5Length() int {
	l := 0
	if p.IsSetContainsNulls() {
		l += bthrift.Binary.FieldBeginLength("contains_nulls", thrift.LIST, 5)
		l += bthrift.Binary.ListBeginLength(thrift.BOOL, len(p.ContainsNulls))
		var tmpV bool
		l += bthrift.Binary.BoolLength(bool(tmpV)) * len(p.ContainsNulls)
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTypeDesc) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTypeDesc[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTypeDesc) FastReadField1(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Types = make([]*TTypeNode, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTTypeNode()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Types = append(p.Types, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TTypeDesc) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.IsNullable = &v

	}
	return offset, nil
}

func (p *TTypeDesc) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ByteSize = &v

	}
	return offset, nil
}

func (p *TTypeDesc) FastReadField4(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.SubTypes = make([]*TTypeDesc, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTTypeDesc()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.SubTypes = append(p.SubTypes, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TTypeDesc) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ResultIsNullable = &v

	}
	return offset, nil
}

func (p *TTypeDesc) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.FunctionName = &v

	}
	return offset, nil
}

func (p *TTypeDesc) FastReadField7(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.BeExecVersion = &v

	}
	return offset, nil
}

// for compatibility
func (p *TTypeDesc) FastWrite(buf []byte) int {
	return 0
}

func (p *TTypeDesc) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTypeDesc")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTypeDesc) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTypeDesc")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTypeDesc) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "types", thrift.LIST, 1)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.Types {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTypeDesc) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsNullable() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_nullable", thrift.BOOL, 2)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.IsNullable)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTypeDesc) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetByteSize() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "byte_size", thrift.I64, 3)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.ByteSize)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTypeDesc) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSubTypes() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "sub_types", thrift.LIST, 4)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.SubTypes {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTypeDesc) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetResultIsNullable() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "result_is_nullable", thrift.BOOL, 5)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.ResultIsNullable)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTypeDesc) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFunctionName() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "function_name", thrift.STRING, 6)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.FunctionName)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTypeDesc) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBeExecVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "be_exec_version", thrift.I32, 7)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.BeExecVersion)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTypeDesc) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("types", thrift.LIST, 1)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.Types))
	for _, v := range p.Types {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTypeDesc) field2Length() int {
	l := 0
	if p.IsSetIsNullable() {
		l += bthrift.Binary.FieldBeginLength("is_nullable", thrift.BOOL, 2)
		l += bthrift.Binary.BoolLength(*p.IsNullable)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTypeDesc) field3Length() int {
	l := 0
	if p.IsSetByteSize() {
		l += bthrift.Binary.FieldBeginLength("byte_size", thrift.I64, 3)
		l += bthrift.Binary.I64Length(*p.ByteSize)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTypeDesc) field4Length() int {
	l := 0
	if p.IsSetSubTypes() {
		l += bthrift.Binary.FieldBeginLength("sub_types", thrift.LIST, 4)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.SubTypes))
		for _, v := range p.SubTypes {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTypeDesc) field5Length() int {
	l := 0
	if p.IsSetResultIsNullable() {
		l += bthrift.Binary.FieldBeginLength("result_is_nullable", thrift.BOOL, 5)
		l += bthrift.Binary.BoolLength(*p.ResultIsNullable)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTypeDesc) field6Length() int {
	l := 0
	if p.IsSetFunctionName() {
		l += bthrift.Binary.FieldBeginLength("function_name", thrift.STRING, 6)
		l += bthrift.Binary.StringLengthNocopy(*p.FunctionName)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTypeDesc) field7Length() int {
	l := 0
	if p.IsSetBeExecVersion() {
		l += bthrift.Binary.FieldBeginLength("be_exec_version", thrift.I32, 7)
		l += bthrift.Binary.I32Length(*p.BeExecVersion)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TColumnType) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TColumnType[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TColumnType[fieldId]))
}

func (p *TColumnType) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Type = TPrimitiveType(v)

	}
	return offset, nil
}

func (p *TColumnType) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Len = &v

	}
	return offset, nil
}

func (p *TColumnType) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.IndexLen = &v

	}
	return offset, nil
}

func (p *TColumnType) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Precision = &v

	}
	return offset, nil
}

func (p *TColumnType) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Scale = &v

	}
	return offset, nil
}

// for compatibility
func (p *TColumnType) FastWrite(buf []byte) int {
	return 0
}

func (p *TColumnType) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TColumnType")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TColumnType) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TColumnType")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TColumnType) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "type", thrift.I32, 1)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.Type))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TColumnType) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetLen() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "len", thrift.I32, 2)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.Len)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TColumnType) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIndexLen() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "index_len", thrift.I32, 3)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.IndexLen)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TColumnType) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPrecision() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "precision", thrift.I32, 4)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.Precision)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TColumnType) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetScale() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "scale", thrift.I32, 5)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.Scale)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TColumnType) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("type", thrift.I32, 1)
	l += bthrift.Binary.I32Length(int32(p.Type))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TColumnType) field2Length() int {
	l := 0
	if p.IsSetLen() {
		l += bthrift.Binary.FieldBeginLength("len", thrift.I32, 2)
		l += bthrift.Binary.I32Length(*p.Len)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TColumnType) field3Length() int {
	l := 0
	if p.IsSetIndexLen() {
		l += bthrift.Binary.FieldBeginLength("index_len", thrift.I32, 3)
		l += bthrift.Binary.I32Length(*p.IndexLen)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TColumnType) field4Length() int {
	l := 0
	if p.IsSetPrecision() {
		l += bthrift.Binary.FieldBeginLength("precision", thrift.I32, 4)
		l += bthrift.Binary.I32Length(*p.Precision)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TColumnType) field5Length() int {
	l := 0
	if p.IsSetScale() {
		l += bthrift.Binary.FieldBeginLength("scale", thrift.I32, 5)
		l += bthrift.Binary.I32Length(*p.Scale)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TNetworkAddress) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetHostname bool = false
	var issetPort bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetHostname = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPort = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetHostname {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPort {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TNetworkAddress[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TNetworkAddress[fieldId]))
}

func (p *TNetworkAddress) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Hostname = v

	}
	return offset, nil
}

func (p *TNetworkAddress) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Port = v

	}
	return offset, nil
}

// for compatibility
func (p *TNetworkAddress) FastWrite(buf []byte) int {
	return 0
}

func (p *TNetworkAddress) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TNetworkAddress")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TNetworkAddress) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TNetworkAddress")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TNetworkAddress) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "hostname", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Hostname)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TNetworkAddress) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "port", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.Port)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TNetworkAddress) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("hostname", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.Hostname)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TNetworkAddress) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("port", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.Port)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TUniqueId) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetHi bool = false
	var issetLo bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetHi = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetLo = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetHi {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetLo {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TUniqueId[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TUniqueId[fieldId]))
}

func (p *TUniqueId) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Hi = v

	}
	return offset, nil
}

func (p *TUniqueId) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Lo = v

	}
	return offset, nil
}

// for compatibility
func (p *TUniqueId) FastWrite(buf []byte) int {
	return 0
}

func (p *TUniqueId) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TUniqueId")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TUniqueId) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TUniqueId")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TUniqueId) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "hi", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.Hi)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TUniqueId) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "lo", thrift.I64, 2)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.Lo)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TUniqueId) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("hi", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.Hi)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TUniqueId) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("lo", thrift.I64, 2)
	l += bthrift.Binary.I64Length(p.Lo)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFunctionName) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFunctionName bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetFunctionName = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetFunctionName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFunctionName[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFunctionName[fieldId]))
}

func (p *TFunctionName) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.DbName = &v

	}
	return offset, nil
}

func (p *TFunctionName) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.FunctionName = v

	}
	return offset, nil
}

// for compatibility
func (p *TFunctionName) FastWrite(buf []byte) int {
	return 0
}

func (p *TFunctionName) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TFunctionName")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TFunctionName) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TFunctionName")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TFunctionName) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDbName() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "db_name", thrift.STRING, 1)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.DbName)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFunctionName) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "function_name", thrift.STRING, 2)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.FunctionName)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFunctionName) field1Length() int {
	l := 0
	if p.IsSetDbName() {
		l += bthrift.Binary.FieldBeginLength("db_name", thrift.STRING, 1)
		l += bthrift.Binary.StringLengthNocopy(*p.DbName)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFunctionName) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("function_name", thrift.STRING, 2)
	l += bthrift.Binary.StringLengthNocopy(p.FunctionName)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TScalarFunction) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSymbol bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSymbol = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetSymbol {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TScalarFunction[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TScalarFunction[fieldId]))
}

func (p *TScalarFunction) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Symbol = v

	}
	return offset, nil
}

func (p *TScalarFunction) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.PrepareFnSymbol = &v

	}
	return offset, nil
}

func (p *TScalarFunction) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.CloseFnSymbol = &v

	}
	return offset, nil
}

// for compatibility
func (p *TScalarFunction) FastWrite(buf []byte) int {
	return 0
}

func (p *TScalarFunction) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TScalarFunction")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TScalarFunction) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TScalarFunction")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TScalarFunction) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "symbol", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Symbol)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TScalarFunction) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPrepareFnSymbol() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "prepare_fn_symbol", thrift.STRING, 2)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.PrepareFnSymbol)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TScalarFunction) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCloseFnSymbol() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "close_fn_symbol", thrift.STRING, 3)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.CloseFnSymbol)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TScalarFunction) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("symbol", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.Symbol)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TScalarFunction) field2Length() int {
	l := 0
	if p.IsSetPrepareFnSymbol() {
		l += bthrift.Binary.FieldBeginLength("prepare_fn_symbol", thrift.STRING, 2)
		l += bthrift.Binary.StringLengthNocopy(*p.PrepareFnSymbol)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TScalarFunction) field3Length() int {
	l := 0
	if p.IsSetCloseFnSymbol() {
		l += bthrift.Binary.FieldBeginLength("close_fn_symbol", thrift.STRING, 3)
		l += bthrift.Binary.StringLengthNocopy(*p.CloseFnSymbol)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAggregateFunction) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetIntermediateType bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetIntermediateType = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetIntermediateType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAggregateFunction[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAggregateFunction[fieldId]))
}

func (p *TAggregateFunction) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := NewTTypeDesc()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.IntermediateType = tmp
	return offset, nil
}

func (p *TAggregateFunction) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.UpdateFnSymbol = &v

	}
	return offset, nil
}

func (p *TAggregateFunction) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.InitFnSymbol = &v

	}
	return offset, nil
}

func (p *TAggregateFunction) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.SerializeFnSymbol = &v

	}
	return offset, nil
}

func (p *TAggregateFunction) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.MergeFnSymbol = &v

	}
	return offset, nil
}

func (p *TAggregateFunction) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.FinalizeFnSymbol = &v

	}
	return offset, nil
}

func (p *TAggregateFunction) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.GetValueFnSymbol = &v

	}
	return offset, nil
}

func (p *TAggregateFunction) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.RemoveFnSymbol = &v

	}
	return offset, nil
}

func (p *TAggregateFunction) FastReadField10(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.IsAnalyticOnlyFn = v

	}
	return offset, nil
}

func (p *TAggregateFunction) FastReadField11(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Symbol = &v

	}
	return offset, nil
}

// for compatibility
func (p *TAggregateFunction) FastWrite(buf []byte) int {
	return 0
}

func (p *TAggregateFunction) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TAggregateFunction")
	if p != nil {
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TAggregateFunction) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TAggregateFunction")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TAggregateFunction) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "intermediate_type", thrift.STRUCT, 1)
	offset += p.IntermediateType.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TAggregateFunction) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetUpdateFnSymbol() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "update_fn_symbol", thrift.STRING, 2)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.UpdateFnSymbol)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAggregateFunction) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetInitFnSymbol() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "init_fn_symbol", thrift.STRING, 3)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.InitFnSymbol)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAggregateFunction) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSerializeFnSymbol() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "serialize_fn_symbol", thrift.STRING, 4)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.SerializeFnSymbol)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAggregateFunction) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMergeFnSymbol() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "merge_fn_symbol", thrift.STRING, 5)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.MergeFnSymbol)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAggregateFunction) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFinalizeFnSymbol() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "finalize_fn_symbol", thrift.STRING, 6)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.FinalizeFnSymbol)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAggregateFunction) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetGetValueFnSymbol() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "get_value_fn_symbol", thrift.STRING, 8)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.GetValueFnSymbol)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAggregateFunction) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRemoveFnSymbol() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "remove_fn_symbol", thrift.STRING, 9)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.RemoveFnSymbol)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAggregateFunction) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsAnalyticOnlyFn() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_analytic_only_fn", thrift.BOOL, 10)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.IsAnalyticOnlyFn)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAggregateFunction) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSymbol() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "symbol", thrift.STRING, 11)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Symbol)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TAggregateFunction) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("intermediate_type", thrift.STRUCT, 1)
	l += p.IntermediateType.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TAggregateFunction) field2Length() int {
	l := 0
	if p.IsSetUpdateFnSymbol() {
		l += bthrift.Binary.FieldBeginLength("update_fn_symbol", thrift.STRING, 2)
		l += bthrift.Binary.StringLengthNocopy(*p.UpdateFnSymbol)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAggregateFunction) field3Length() int {
	l := 0
	if p.IsSetInitFnSymbol() {
		l += bthrift.Binary.FieldBeginLength("init_fn_symbol", thrift.STRING, 3)
		l += bthrift.Binary.StringLengthNocopy(*p.InitFnSymbol)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAggregateFunction) field4Length() int {
	l := 0
	if p.IsSetSerializeFnSymbol() {
		l += bthrift.Binary.FieldBeginLength("serialize_fn_symbol", thrift.STRING, 4)
		l += bthrift.Binary.StringLengthNocopy(*p.SerializeFnSymbol)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAggregateFunction) field5Length() int {
	l := 0
	if p.IsSetMergeFnSymbol() {
		l += bthrift.Binary.FieldBeginLength("merge_fn_symbol", thrift.STRING, 5)
		l += bthrift.Binary.StringLengthNocopy(*p.MergeFnSymbol)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAggregateFunction) field6Length() int {
	l := 0
	if p.IsSetFinalizeFnSymbol() {
		l += bthrift.Binary.FieldBeginLength("finalize_fn_symbol", thrift.STRING, 6)
		l += bthrift.Binary.StringLengthNocopy(*p.FinalizeFnSymbol)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAggregateFunction) field8Length() int {
	l := 0
	if p.IsSetGetValueFnSymbol() {
		l += bthrift.Binary.FieldBeginLength("get_value_fn_symbol", thrift.STRING, 8)
		l += bthrift.Binary.StringLengthNocopy(*p.GetValueFnSymbol)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAggregateFunction) field9Length() int {
	l := 0
	if p.IsSetRemoveFnSymbol() {
		l += bthrift.Binary.FieldBeginLength("remove_fn_symbol", thrift.STRING, 9)
		l += bthrift.Binary.StringLengthNocopy(*p.RemoveFnSymbol)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAggregateFunction) field10Length() int {
	l := 0
	if p.IsSetIsAnalyticOnlyFn() {
		l += bthrift.Binary.FieldBeginLength("is_analytic_only_fn", thrift.BOOL, 10)
		l += bthrift.Binary.BoolLength(p.IsAnalyticOnlyFn)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TAggregateFunction) field11Length() int {
	l := 0
	if p.IsSetSymbol() {
		l += bthrift.Binary.FieldBeginLength("symbol", thrift.STRING, 11)
		l += bthrift.Binary.StringLengthNocopy(*p.Symbol)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFunction) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetBinaryType bool = false
	var issetArgTypes bool = false
	var issetRetType bool = false
	var issetHasVarArgs_ bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetBinaryType = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetArgTypes = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetRetType = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetHasVarArgs_ = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField15(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField16(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetBinaryType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetArgTypes {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetRetType {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetHasVarArgs_ {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFunction[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFunction[fieldId]))
}

func (p *TFunction) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := NewTFunctionName()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Name = tmp
	return offset, nil
}

func (p *TFunction) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.BinaryType = TFunctionBinaryType(v)

	}
	return offset, nil
}

func (p *TFunction) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.ArgTypes = make([]*TTypeDesc, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTTypeDesc()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.ArgTypes = append(p.ArgTypes, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TFunction) FastReadField4(buf []byte) (int, error) {
	offset := 0

	tmp := NewTTypeDesc()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.RetType = tmp
	return offset, nil
}

func (p *TFunction) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.HasVarArgs_ = v

	}
	return offset, nil
}

func (p *TFunction) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Comment = &v

	}
	return offset, nil
}

func (p *TFunction) FastReadField7(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Signature = &v

	}
	return offset, nil
}

func (p *TFunction) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.HdfsLocation = &v

	}
	return offset, nil
}

func (p *TFunction) FastReadField9(buf []byte) (int, error) {
	offset := 0

	tmp := NewTScalarFunction()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ScalarFn = tmp
	return offset, nil
}

func (p *TFunction) FastReadField10(buf []byte) (int, error) {
	offset := 0

	tmp := NewTAggregateFunction()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.AggregateFn = tmp
	return offset, nil
}

func (p *TFunction) FastReadField11(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Id = &v

	}
	return offset, nil
}

func (p *TFunction) FastReadField12(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Checksum = &v

	}
	return offset, nil
}

func (p *TFunction) FastReadField13(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Vectorized = v

	}
	return offset, nil
}

func (p *TFunction) FastReadField14(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.IsUdtfFunction = v

	}
	return offset, nil
}

func (p *TFunction) FastReadField15(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.IsStaticLoad = v

	}
	return offset, nil
}

func (p *TFunction) FastReadField16(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ExpirationTime = &v

	}
	return offset, nil
}

// for compatibility
func (p *TFunction) FastWrite(buf []byte) int {
	return 0
}

func (p *TFunction) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TFunction")
	if p != nil {
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
		offset += p.fastWriteField15(buf[offset:], binaryWriter)
		offset += p.fastWriteField16(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TFunction) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TFunction")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
		l += p.field15Length()
		l += p.field16Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TFunction) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "name", thrift.STRUCT, 1)
	offset += p.Name.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFunction) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "binary_type", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.BinaryType))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFunction) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "arg_types", thrift.LIST, 3)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.ArgTypes {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFunction) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "ret_type", thrift.STRUCT, 4)
	offset += p.RetType.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFunction) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "has_var_args", thrift.BOOL, 5)
	offset += bthrift.Binary.WriteBool(buf[offset:], p.HasVarArgs_)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFunction) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetComment() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "comment", thrift.STRING, 6)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Comment)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFunction) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSignature() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "signature", thrift.STRING, 7)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Signature)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFunction) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetHdfsLocation() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "hdfs_location", thrift.STRING, 8)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.HdfsLocation)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFunction) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetScalarFn() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "scalar_fn", thrift.STRUCT, 9)
		offset += p.ScalarFn.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFunction) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetAggregateFn() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "aggregate_fn", thrift.STRUCT, 10)
		offset += p.AggregateFn.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFunction) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "id", thrift.I64, 11)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.Id)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFunction) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetChecksum() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "checksum", thrift.STRING, 12)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Checksum)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFunction) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetVectorized() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "vectorized", thrift.BOOL, 13)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.Vectorized)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFunction) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsUdtfFunction() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_udtf_function", thrift.BOOL, 14)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.IsUdtfFunction)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFunction) fastWriteField15(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsStaticLoad() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_static_load", thrift.BOOL, 15)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.IsStaticLoad)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFunction) fastWriteField16(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetExpirationTime() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "expiration_time", thrift.I64, 16)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.ExpirationTime)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFunction) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("name", thrift.STRUCT, 1)
	l += p.Name.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFunction) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("binary_type", thrift.I32, 2)
	l += bthrift.Binary.I32Length(int32(p.BinaryType))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFunction) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("arg_types", thrift.LIST, 3)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.ArgTypes))
	for _, v := range p.ArgTypes {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFunction) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("ret_type", thrift.STRUCT, 4)
	l += p.RetType.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFunction) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("has_var_args", thrift.BOOL, 5)
	l += bthrift.Binary.BoolLength(p.HasVarArgs_)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFunction) field6Length() int {
	l := 0
	if p.IsSetComment() {
		l += bthrift.Binary.FieldBeginLength("comment", thrift.STRING, 6)
		l += bthrift.Binary.StringLengthNocopy(*p.Comment)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFunction) field7Length() int {
	l := 0
	if p.IsSetSignature() {
		l += bthrift.Binary.FieldBeginLength("signature", thrift.STRING, 7)
		l += bthrift.Binary.StringLengthNocopy(*p.Signature)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFunction) field8Length() int {
	l := 0
	if p.IsSetHdfsLocation() {
		l += bthrift.Binary.FieldBeginLength("hdfs_location", thrift.STRING, 8)
		l += bthrift.Binary.StringLengthNocopy(*p.HdfsLocation)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFunction) field9Length() int {
	l := 0
	if p.IsSetScalarFn() {
		l += bthrift.Binary.FieldBeginLength("scalar_fn", thrift.STRUCT, 9)
		l += p.ScalarFn.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFunction) field10Length() int {
	l := 0
	if p.IsSetAggregateFn() {
		l += bthrift.Binary.FieldBeginLength("aggregate_fn", thrift.STRUCT, 10)
		l += p.AggregateFn.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFunction) field11Length() int {
	l := 0
	if p.IsSetId() {
		l += bthrift.Binary.FieldBeginLength("id", thrift.I64, 11)
		l += bthrift.Binary.I64Length(*p.Id)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFunction) field12Length() int {
	l := 0
	if p.IsSetChecksum() {
		l += bthrift.Binary.FieldBeginLength("checksum", thrift.STRING, 12)
		l += bthrift.Binary.StringLengthNocopy(*p.Checksum)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFunction) field13Length() int {
	l := 0
	if p.IsSetVectorized() {
		l += bthrift.Binary.FieldBeginLength("vectorized", thrift.BOOL, 13)
		l += bthrift.Binary.BoolLength(p.Vectorized)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFunction) field14Length() int {
	l := 0
	if p.IsSetIsUdtfFunction() {
		l += bthrift.Binary.FieldBeginLength("is_udtf_function", thrift.BOOL, 14)
		l += bthrift.Binary.BoolLength(p.IsUdtfFunction)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFunction) field15Length() int {
	l := 0
	if p.IsSetIsStaticLoad() {
		l += bthrift.Binary.FieldBeginLength("is_static_load", thrift.BOOL, 15)
		l += bthrift.Binary.BoolLength(p.IsStaticLoad)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFunction) field16Length() int {
	l := 0
	if p.IsSetExpirationTime() {
		l += bthrift.Binary.FieldBeginLength("expiration_time", thrift.I64, 16)
		l += bthrift.Binary.I64Length(*p.ExpirationTime)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJdbcExecutorCtorParams) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField15(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField16(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TJdbcExecutorCtorParams[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Statement = &v

	}
	return offset, nil
}

func (p *TJdbcExecutorCtorParams) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.JdbcUrl = &v

	}
	return offset, nil
}

func (p *TJdbcExecutorCtorParams) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.JdbcUser = &v

	}
	return offset, nil
}

func (p *TJdbcExecutorCtorParams) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.JdbcPassword = &v

	}
	return offset, nil
}

func (p *TJdbcExecutorCtorParams) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.JdbcDriverClass = &v

	}
	return offset, nil
}

func (p *TJdbcExecutorCtorParams) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.BatchSize = &v

	}
	return offset, nil
}

func (p *TJdbcExecutorCtorParams) FastReadField7(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		tmp := TJdbcOperation(v)
		p.Op = &tmp

	}
	return offset, nil
}

func (p *TJdbcExecutorCtorParams) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.DriverPath = &v

	}
	return offset, nil
}

func (p *TJdbcExecutorCtorParams) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		tmp := TOdbcTableType(v)
		p.TableType = &tmp

	}
	return offset, nil
}

func (p *TJdbcExecutorCtorParams) FastReadField10(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ConnectionPoolMinSize = &v

	}
	return offset, nil
}

func (p *TJdbcExecutorCtorParams) FastReadField11(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ConnectionPoolMaxSize = &v

	}
	return offset, nil
}

func (p *TJdbcExecutorCtorParams) FastReadField12(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ConnectionPoolMaxWaitTime = &v

	}
	return offset, nil
}

func (p *TJdbcExecutorCtorParams) FastReadField13(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ConnectionPoolMaxLifeTime = &v

	}
	return offset, nil
}

func (p *TJdbcExecutorCtorParams) FastReadField14(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ConnectionPoolCacheClearTime = &v

	}
	return offset, nil
}

func (p *TJdbcExecutorCtorParams) FastReadField15(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ConnectionPoolKeepAlive = &v

	}
	return offset, nil
}

func (p *TJdbcExecutorCtorParams) FastReadField16(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.CatalogId = &v

	}
	return offset, nil
}

// for compatibility
func (p *TJdbcExecutorCtorParams) FastWrite(buf []byte) int {
	return 0
}

func (p *TJdbcExecutorCtorParams) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TJdbcExecutorCtorParams")
	if p != nil {
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
		offset += p.fastWriteField15(buf[offset:], binaryWriter)
		offset += p.fastWriteField16(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TJdbcExecutorCtorParams) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TJdbcExecutorCtorParams")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
		l += p.field15Length()
		l += p.field16Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TJdbcExecutorCtorParams) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStatement() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "statement", thrift.STRING, 1)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Statement)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJdbcExecutorCtorParams) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetJdbcUrl() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "jdbc_url", thrift.STRING, 2)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.JdbcUrl)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJdbcExecutorCtorParams) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetJdbcUser() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "jdbc_user", thrift.STRING, 3)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.JdbcUser)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJdbcExecutorCtorParams) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetJdbcPassword() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "jdbc_password", thrift.STRING, 4)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.JdbcPassword)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJdbcExecutorCtorParams) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetJdbcDriverClass() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "jdbc_driver_class", thrift.STRING, 5)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.JdbcDriverClass)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJdbcExecutorCtorParams) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBatchSize() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "batch_size", thrift.I32, 6)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.BatchSize)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJdbcExecutorCtorParams) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetOp() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "op", thrift.I32, 7)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(*p.Op))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJdbcExecutorCtorParams) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDriverPath() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "driver_path", thrift.STRING, 8)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.DriverPath)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJdbcExecutorCtorParams) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTableType() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "table_type", thrift.I32, 9)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(*p.TableType))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJdbcExecutorCtorParams) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetConnectionPoolMinSize() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "connection_pool_min_size", thrift.I32, 10)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.ConnectionPoolMinSize)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJdbcExecutorCtorParams) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetConnectionPoolMaxSize() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "connection_pool_max_size", thrift.I32, 11)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.ConnectionPoolMaxSize)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJdbcExecutorCtorParams) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetConnectionPoolMaxWaitTime() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "connection_pool_max_wait_time", thrift.I32, 12)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.ConnectionPoolMaxWaitTime)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJdbcExecutorCtorParams) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetConnectionPoolMaxLifeTime() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "connection_pool_max_life_time", thrift.I32, 13)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.ConnectionPoolMaxLifeTime)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJdbcExecutorCtorParams) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetConnectionPoolCacheClearTime() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "connection_pool_cache_clear_time", thrift.I32, 14)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.ConnectionPoolCacheClearTime)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJdbcExecutorCtorParams) fastWriteField15(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetConnectionPoolKeepAlive() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "connection_pool_keep_alive", thrift.BOOL, 15)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.ConnectionPoolKeepAlive)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJdbcExecutorCtorParams) fastWriteField16(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCatalogId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "catalog_id", thrift.I64, 16)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.CatalogId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJdbcExecutorCtorParams) field1Length() int {
	l := 0
	if p.IsSetStatement() {
		l += bthrift.Binary.FieldBeginLength("statement", thrift.STRING, 1)
		l += bthrift.Binary.StringLengthNocopy(*p.Statement)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJdbcExecutorCtorParams) field2Length() int {
	l := 0
	if p.IsSetJdbcUrl() {
		l += bthrift.Binary.FieldBeginLength("jdbc_url", thrift.STRING, 2)
		l += bthrift.Binary.StringLengthNocopy(*p.JdbcUrl)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJdbcExecutorCtorParams) field3Length() int {
	l := 0
	if p.IsSetJdbcUser() {
		l += bthrift.Binary.FieldBeginLength("jdbc_user", thrift.STRING, 3)
		l += bthrift.Binary.StringLengthNocopy(*p.JdbcUser)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJdbcExecutorCtorParams) field4Length() int {
	l := 0
	if p.IsSetJdbcPassword() {
		l += bthrift.Binary.FieldBeginLength("jdbc_password", thrift.STRING, 4)
		l += bthrift.Binary.StringLengthNocopy(*p.JdbcPassword)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJdbcExecutorCtorParams) field5Length() int {
	l := 0
	if p.IsSetJdbcDriverClass() {
		l += bthrift.Binary.FieldBeginLength("jdbc_driver_class", thrift.STRING, 5)
		l += bthrift.Binary.StringLengthNocopy(*p.JdbcDriverClass)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJdbcExecutorCtorParams) field6Length() int {
	l := 0
	if p.IsSetBatchSize() {
		l += bthrift.Binary.FieldBeginLength("batch_size", thrift.I32, 6)
		l += bthrift.Binary.I32Length(*p.BatchSize)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJdbcExecutorCtorParams) field7Length() int {
	l := 0
	if p.IsSetOp() {
		l += bthrift.Binary.FieldBeginLength("op", thrift.I32, 7)
		l += bthrift.Binary.I32Length(int32(*p.Op))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJdbcExecutorCtorParams) field8Length() int {
	l := 0
	if p.IsSetDriverPath() {
		l += bthrift.Binary.FieldBeginLength("driver_path", thrift.STRING, 8)
		l += bthrift.Binary.StringLengthNocopy(*p.DriverPath)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJdbcExecutorCtorParams) field9Length() int {
	l := 0
	if p.IsSetTableType() {
		l += bthrift.Binary.FieldBeginLength("table_type", thrift.I32, 9)
		l += bthrift.Binary.I32Length(int32(*p.TableType))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJdbcExecutorCtorParams) field10Length() int {
	l := 0
	if p.IsSetConnectionPoolMinSize() {
		l += bthrift.Binary.FieldBeginLength("connection_pool_min_size", thrift.I32, 10)
		l += bthrift.Binary.I32Length(*p.ConnectionPoolMinSize)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJdbcExecutorCtorParams) field11Length() int {
	l := 0
	if p.IsSetConnectionPoolMaxSize() {
		l += bthrift.Binary.FieldBeginLength("connection_pool_max_size", thrift.I32, 11)
		l += bthrift.Binary.I32Length(*p.ConnectionPoolMaxSize)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJdbcExecutorCtorParams) field12Length() int {
	l := 0
	if p.IsSetConnectionPoolMaxWaitTime() {
		l += bthrift.Binary.FieldBeginLength("connection_pool_max_wait_time", thrift.I32, 12)
		l += bthrift.Binary.I32Length(*p.ConnectionPoolMaxWaitTime)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJdbcExecutorCtorParams) field13Length() int {
	l := 0
	if p.IsSetConnectionPoolMaxLifeTime() {
		l += bthrift.Binary.FieldBeginLength("connection_pool_max_life_time", thrift.I32, 13)
		l += bthrift.Binary.I32Length(*p.ConnectionPoolMaxLifeTime)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJdbcExecutorCtorParams) field14Length() int {
	l := 0
	if p.IsSetConnectionPoolCacheClearTime() {
		l += bthrift.Binary.FieldBeginLength("connection_pool_cache_clear_time", thrift.I32, 14)
		l += bthrift.Binary.I32Length(*p.ConnectionPoolCacheClearTime)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJdbcExecutorCtorParams) field15Length() int {
	l := 0
	if p.IsSetConnectionPoolKeepAlive() {
		l += bthrift.Binary.FieldBeginLength("connection_pool_keep_alive", thrift.BOOL, 15)
		l += bthrift.Binary.BoolLength(*p.ConnectionPoolKeepAlive)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJdbcExecutorCtorParams) field16Length() int {
	l := 0
	if p.IsSetCatalogId() {
		l += bthrift.Binary.FieldBeginLength("catalog_id", thrift.I64, 16)
		l += bthrift.Binary.I64Length(*p.CatalogId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJavaUdfExecutorCtorParams) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField15(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TJavaUdfExecutorCtorParams[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TJavaUdfExecutorCtorParams) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := NewTFunction()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Fn = tmp
	return offset, nil
}

func (p *TJavaUdfExecutorCtorParams) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Location = &v

	}
	return offset, nil
}

func (p *TJavaUdfExecutorCtorParams) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.InputOffsetsPtrs = &v

	}
	return offset, nil
}

func (p *TJavaUdfExecutorCtorParams) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.InputNullsPtrs = &v

	}
	return offset, nil
}

func (p *TJavaUdfExecutorCtorParams) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.InputBufferPtrs = &v

	}
	return offset, nil
}

func (p *TJavaUdfExecutorCtorParams) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.OutputNullPtr = &v

	}
	return offset, nil
}

func (p *TJavaUdfExecutorCtorParams) FastReadField7(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.OutputBufferPtr = &v

	}
	return offset, nil
}

func (p *TJavaUdfExecutorCtorParams) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.OutputOffsetsPtr = &v

	}
	return offset, nil
}

func (p *TJavaUdfExecutorCtorParams) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.OutputIntermediateStatePtr = &v

	}
	return offset, nil
}

func (p *TJavaUdfExecutorCtorParams) FastReadField10(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.BatchSizePtr = &v

	}
	return offset, nil
}

func (p *TJavaUdfExecutorCtorParams) FastReadField11(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.InputPlacesPtr = &v

	}
	return offset, nil
}

func (p *TJavaUdfExecutorCtorParams) FastReadField12(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.InputArrayNullsBufferPtr = &v

	}
	return offset, nil
}

func (p *TJavaUdfExecutorCtorParams) FastReadField13(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.InputArrayStringOffsetsPtrs = &v

	}
	return offset, nil
}

func (p *TJavaUdfExecutorCtorParams) FastReadField14(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.OutputArrayNullPtr = &v

	}
	return offset, nil
}

func (p *TJavaUdfExecutorCtorParams) FastReadField15(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.OutputArrayStringOffsetsPtr = &v

	}
	return offset, nil
}

// for compatibility
func (p *TJavaUdfExecutorCtorParams) FastWrite(buf []byte) int {
	return 0
}

func (p *TJavaUdfExecutorCtorParams) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TJavaUdfExecutorCtorParams")
	if p != nil {
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
		offset += p.fastWriteField15(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TJavaUdfExecutorCtorParams) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TJavaUdfExecutorCtorParams")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
		l += p.field15Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TJavaUdfExecutorCtorParams) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFn() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "fn", thrift.STRUCT, 1)
		offset += p.Fn.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJavaUdfExecutorCtorParams) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetLocation() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "location", thrift.STRING, 2)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Location)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJavaUdfExecutorCtorParams) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetInputOffsetsPtrs() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "input_offsets_ptrs", thrift.I64, 3)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.InputOffsetsPtrs)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJavaUdfExecutorCtorParams) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetInputNullsPtrs() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "input_nulls_ptrs", thrift.I64, 4)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.InputNullsPtrs)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJavaUdfExecutorCtorParams) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetInputBufferPtrs() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "input_buffer_ptrs", thrift.I64, 5)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.InputBufferPtrs)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJavaUdfExecutorCtorParams) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetOutputNullPtr() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "output_null_ptr", thrift.I64, 6)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.OutputNullPtr)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJavaUdfExecutorCtorParams) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetOutputBufferPtr() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "output_buffer_ptr", thrift.I64, 7)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.OutputBufferPtr)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJavaUdfExecutorCtorParams) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetOutputOffsetsPtr() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "output_offsets_ptr", thrift.I64, 8)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.OutputOffsetsPtr)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJavaUdfExecutorCtorParams) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetOutputIntermediateStatePtr() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "output_intermediate_state_ptr", thrift.I64, 9)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.OutputIntermediateStatePtr)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJavaUdfExecutorCtorParams) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBatchSizePtr() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "batch_size_ptr", thrift.I64, 10)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.BatchSizePtr)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJavaUdfExecutorCtorParams) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetInputPlacesPtr() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "input_places_ptr", thrift.I64, 11)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.InputPlacesPtr)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJavaUdfExecutorCtorParams) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetInputArrayNullsBufferPtr() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "input_array_nulls_buffer_ptr", thrift.I64, 12)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.InputArrayNullsBufferPtr)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJavaUdfExecutorCtorParams) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetInputArrayStringOffsetsPtrs() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "input_array_string_offsets_ptrs", thrift.I64, 13)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.InputArrayStringOffsetsPtrs)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJavaUdfExecutorCtorParams) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetOutputArrayNullPtr() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "output_array_null_ptr", thrift.I64, 14)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.OutputArrayNullPtr)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJavaUdfExecutorCtorParams) fastWriteField15(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetOutputArrayStringOffsetsPtr() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "output_array_string_offsets_ptr", thrift.I64, 15)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.OutputArrayStringOffsetsPtr)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TJavaUdfExecutorCtorParams) field1Length() int {
	l := 0
	if p.IsSetFn() {
		l += bthrift.Binary.FieldBeginLength("fn", thrift.STRUCT, 1)
		l += p.Fn.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJavaUdfExecutorCtorParams) field2Length() int {
	l := 0
	if p.IsSetLocation() {
		l += bthrift.Binary.FieldBeginLength("location", thrift.STRING, 2)
		l += bthrift.Binary.StringLengthNocopy(*p.Location)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJavaUdfExecutorCtorParams) field3Length() int {
	l := 0
	if p.IsSetInputOffsetsPtrs() {
		l += bthrift.Binary.FieldBeginLength("input_offsets_ptrs", thrift.I64, 3)
		l += bthrift.Binary.I64Length(*p.InputOffsetsPtrs)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJavaUdfExecutorCtorParams) field4Length() int {
	l := 0
	if p.IsSetInputNullsPtrs() {
		l += bthrift.Binary.FieldBeginLength("input_nulls_ptrs", thrift.I64, 4)
		l += bthrift.Binary.I64Length(*p.InputNullsPtrs)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJavaUdfExecutorCtorParams) field5Length() int {
	l := 0
	if p.IsSetInputBufferPtrs() {
		l += bthrift.Binary.FieldBeginLength("input_buffer_ptrs", thrift.I64, 5)
		l += bthrift.Binary.I64Length(*p.InputBufferPtrs)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJavaUdfExecutorCtorParams) field6Length() int {
	l := 0
	if p.IsSetOutputNullPtr() {
		l += bthrift.Binary.FieldBeginLength("output_null_ptr", thrift.I64, 6)
		l += bthrift.Binary.I64Length(*p.OutputNullPtr)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJavaUdfExecutorCtorParams) field7Length() int {
	l := 0
	if p.IsSetOutputBufferPtr() {
		l += bthrift.Binary.FieldBeginLength("output_buffer_ptr", thrift.I64, 7)
		l += bthrift.Binary.I64Length(*p.OutputBufferPtr)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJavaUdfExecutorCtorParams) field8Length() int {
	l := 0
	if p.IsSetOutputOffsetsPtr() {
		l += bthrift.Binary.FieldBeginLength("output_offsets_ptr", thrift.I64, 8)
		l += bthrift.Binary.I64Length(*p.OutputOffsetsPtr)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJavaUdfExecutorCtorParams) field9Length() int {
	l := 0
	if p.IsSetOutputIntermediateStatePtr() {
		l += bthrift.Binary.FieldBeginLength("output_intermediate_state_ptr", thrift.I64, 9)
		l += bthrift.Binary.I64Length(*p.OutputIntermediateStatePtr)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJavaUdfExecutorCtorParams) field10Length() int {
	l := 0
	if p.IsSetBatchSizePtr() {
		l += bthrift.Binary.FieldBeginLength("batch_size_ptr", thrift.I64, 10)
		l += bthrift.Binary.I64Length(*p.BatchSizePtr)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJavaUdfExecutorCtorParams) field11Length() int {
	l := 0
	if p.IsSetInputPlacesPtr() {
		l += bthrift.Binary.FieldBeginLength("input_places_ptr", thrift.I64, 11)
		l += bthrift.Binary.I64Length(*p.InputPlacesPtr)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJavaUdfExecutorCtorParams) field12Length() int {
	l := 0
	if p.IsSetInputArrayNullsBufferPtr() {
		l += bthrift.Binary.FieldBeginLength("input_array_nulls_buffer_ptr", thrift.I64, 12)
		l += bthrift.Binary.I64Length(*p.InputArrayNullsBufferPtr)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJavaUdfExecutorCtorParams) field13Length() int {
	l := 0
	if p.IsSetInputArrayStringOffsetsPtrs() {
		l += bthrift.Binary.FieldBeginLength("input_array_string_offsets_ptrs", thrift.I64, 13)
		l += bthrift.Binary.I64Length(*p.InputArrayStringOffsetsPtrs)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJavaUdfExecutorCtorParams) field14Length() int {
	l := 0
	if p.IsSetOutputArrayNullPtr() {
		l += bthrift.Binary.FieldBeginLength("output_array_null_ptr", thrift.I64, 14)
		l += bthrift.Binary.I64Length(*p.OutputArrayNullPtr)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJavaUdfExecutorCtorParams) field15Length() int {
	l := 0
	if p.IsSetOutputArrayStringOffsetsPtr() {
		l += bthrift.Binary.FieldBeginLength("output_array_string_offsets_ptr", thrift.I64, 15)
		l += bthrift.Binary.I64Length(*p.OutputArrayStringOffsetsPtr)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TJvmMemoryPool) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCommitted bool = false
	var issetInit bool = false
	var issetMax bool = false
	var issetUsed bool = false
	var issetPeakCommitted bool = false
	var issetPeakInit bool = false
	var issetPeakMax bool = false
	var issetPeakUsed bool = false
	var issetName bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetCommitted = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetInit = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetMax = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetUsed = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPeakCommitted = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPeakInit = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPeakMax = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPeakUsed = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetCommitted {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetInit {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetMax {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetUsed {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetPeakCommitted {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetPeakInit {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetPeakMax {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetPeakUsed {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 9
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TJvmMemoryPool[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TJvmMemoryPool[fieldId]))
}

func (p *TJvmMemoryPool) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Committed = v

	}
	return offset, nil
}

func (p *TJvmMemoryPool) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Init = v

	}
	return offset, nil
}

func (p *TJvmMemoryPool) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Max = v

	}
	return offset, nil
}

func (p *TJvmMemoryPool) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Used = v

	}
	return offset, nil
}

func (p *TJvmMemoryPool) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.PeakCommitted = v

	}
	return offset, nil
}

func (p *TJvmMemoryPool) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.PeakInit = v

	}
	return offset, nil
}

func (p *TJvmMemoryPool) FastReadField7(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.PeakMax = v

	}
	return offset, nil
}

func (p *TJvmMemoryPool) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.PeakUsed = v

	}
	return offset, nil
}

func (p *TJvmMemoryPool) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Name = v

	}
	return offset, nil
}

// for compatibility
func (p *TJvmMemoryPool) FastWrite(buf []byte) int {
	return 0
}

func (p *TJvmMemoryPool) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TJvmMemoryPool")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TJvmMemoryPool) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TJvmMemoryPool")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TJvmMemoryPool) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "committed", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.Committed)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TJvmMemoryPool) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "init", thrift.I64, 2)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.Init)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TJvmMemoryPool) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "max", thrift.I64, 3)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.Max)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TJvmMemoryPool) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "used", thrift.I64, 4)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.Used)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TJvmMemoryPool) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "peak_committed", thrift.I64, 5)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.PeakCommitted)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TJvmMemoryPool) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "peak_init", thrift.I64, 6)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.PeakInit)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TJvmMemoryPool) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "peak_max", thrift.I64, 7)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.PeakMax)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TJvmMemoryPool) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "peak_used", thrift.I64, 8)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.PeakUsed)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TJvmMemoryPool) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "name", thrift.STRING, 9)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Name)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TJvmMemoryPool) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("committed", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.Committed)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TJvmMemoryPool) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("init", thrift.I64, 2)
	l += bthrift.Binary.I64Length(p.Init)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TJvmMemoryPool) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("max", thrift.I64, 3)
	l += bthrift.Binary.I64Length(p.Max)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TJvmMemoryPool) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("used", thrift.I64, 4)
	l += bthrift.Binary.I64Length(p.Used)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TJvmMemoryPool) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("peak_committed", thrift.I64, 5)
	l += bthrift.Binary.I64Length(p.PeakCommitted)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TJvmMemoryPool) field6Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("peak_init", thrift.I64, 6)
	l += bthrift.Binary.I64Length(p.PeakInit)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TJvmMemoryPool) field7Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("peak_max", thrift.I64, 7)
	l += bthrift.Binary.I64Length(p.PeakMax)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TJvmMemoryPool) field8Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("peak_used", thrift.I64, 8)
	l += bthrift.Binary.I64Length(p.PeakUsed)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TJvmMemoryPool) field9Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("name", thrift.STRING, 9)
	l += bthrift.Binary.StringLengthNocopy(p.Name)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TGetJvmMemoryMetricsResponse) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetMemoryPools bool = false
	var issetGcNumWarnThresholdExceeded bool = false
	var issetGcNumInfoThresholdExceeded bool = false
	var issetGcTotalExtraSleepTimeMillis bool = false
	var issetGcCount bool = false
	var issetGcTimeMillis bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetMemoryPools = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetGcNumWarnThresholdExceeded = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetGcNumInfoThresholdExceeded = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetGcTotalExtraSleepTimeMillis = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetGcCount = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetGcTimeMillis = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetMemoryPools {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetGcNumWarnThresholdExceeded {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetGcNumInfoThresholdExceeded {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetGcTotalExtraSleepTimeMillis {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetGcCount {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetGcTimeMillis {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetJvmMemoryMetricsResponse[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TGetJvmMemoryMetricsResponse[fieldId]))
}

func (p *TGetJvmMemoryMetricsResponse) FastReadField1(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.MemoryPools = make([]*TJvmMemoryPool, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTJvmMemoryPool()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.MemoryPools = append(p.MemoryPools, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TGetJvmMemoryMetricsResponse) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.GcNumWarnThresholdExceeded = v

	}
	return offset, nil
}

func (p *TGetJvmMemoryMetricsResponse) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.GcNumInfoThresholdExceeded = v

	}
	return offset, nil
}

func (p *TGetJvmMemoryMetricsResponse) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.GcTotalExtraSleepTimeMillis = v

	}
	return offset, nil
}

func (p *TGetJvmMemoryMetricsResponse) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.GcCount = v

	}
	return offset, nil
}

func (p *TGetJvmMemoryMetricsResponse) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.GcTimeMillis = v

	}
	return offset, nil
}

// for compatibility
func (p *TGetJvmMemoryMetricsResponse) FastWrite(buf []byte) int {
	return 0
}

func (p *TGetJvmMemoryMetricsResponse) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TGetJvmMemoryMetricsResponse")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TGetJvmMemoryMetricsResponse) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TGetJvmMemoryMetricsResponse")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TGetJvmMemoryMetricsResponse) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "memory_pools", thrift.LIST, 1)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.MemoryPools {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TGetJvmMemoryMetricsResponse) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "gc_num_warn_threshold_exceeded", thrift.I64, 2)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.GcNumWarnThresholdExceeded)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TGetJvmMemoryMetricsResponse) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "gc_num_info_threshold_exceeded", thrift.I64, 3)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.GcNumInfoThresholdExceeded)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TGetJvmMemoryMetricsResponse) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "gc_total_extra_sleep_time_millis", thrift.I64, 4)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.GcTotalExtraSleepTimeMillis)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TGetJvmMemoryMetricsResponse) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "gc_count", thrift.I64, 5)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.GcCount)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TGetJvmMemoryMetricsResponse) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "gc_time_millis", thrift.I64, 6)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.GcTimeMillis)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TGetJvmMemoryMetricsResponse) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("memory_pools", thrift.LIST, 1)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.MemoryPools))
	for _, v := range p.MemoryPools {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TGetJvmMemoryMetricsResponse) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("gc_num_warn_threshold_exceeded", thrift.I64, 2)
	l += bthrift.Binary.I64Length(p.GcNumWarnThresholdExceeded)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TGetJvmMemoryMetricsResponse) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("gc_num_info_threshold_exceeded", thrift.I64, 3)
	l += bthrift.Binary.I64Length(p.GcNumInfoThresholdExceeded)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TGetJvmMemoryMetricsResponse) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("gc_total_extra_sleep_time_millis", thrift.I64, 4)
	l += bthrift.Binary.I64Length(p.GcTotalExtraSleepTimeMillis)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TGetJvmMemoryMetricsResponse) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("gc_count", thrift.I64, 5)
	l += bthrift.Binary.I64Length(p.GcCount)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TGetJvmMemoryMetricsResponse) field6Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("gc_time_millis", thrift.I64, 6)
	l += bthrift.Binary.I64Length(p.GcTimeMillis)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TJvmThreadInfo) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSummary bool = false
	var issetCpuTimeInNs bool = false
	var issetUserTimeInNs bool = false
	var issetBlockedCount bool = false
	var issetBlockedTimeInMs bool = false
	var issetIsInNative bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSummary = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetCpuTimeInNs = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetUserTimeInNs = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetBlockedCount = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetBlockedTimeInMs = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetIsInNative = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetSummary {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCpuTimeInNs {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetUserTimeInNs {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetBlockedCount {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetBlockedTimeInMs {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetIsInNative {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TJvmThreadInfo[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TJvmThreadInfo[fieldId]))
}

func (p *TJvmThreadInfo) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Summary = v

	}
	return offset, nil
}

func (p *TJvmThreadInfo) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.CpuTimeInNs = v

	}
	return offset, nil
}

func (p *TJvmThreadInfo) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.UserTimeInNs = v

	}
	return offset, nil
}

func (p *TJvmThreadInfo) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.BlockedCount = v

	}
	return offset, nil
}

func (p *TJvmThreadInfo) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.BlockedTimeInMs = v

	}
	return offset, nil
}

func (p *TJvmThreadInfo) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.IsInNative = v

	}
	return offset, nil
}

// for compatibility
func (p *TJvmThreadInfo) FastWrite(buf []byte) int {
	return 0
}

func (p *TJvmThreadInfo) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TJvmThreadInfo")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TJvmThreadInfo) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TJvmThreadInfo")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TJvmThreadInfo) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "summary", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Summary)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TJvmThreadInfo) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "cpu_time_in_ns", thrift.I64, 2)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.CpuTimeInNs)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TJvmThreadInfo) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "user_time_in_ns", thrift.I64, 3)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.UserTimeInNs)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TJvmThreadInfo) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "blocked_count", thrift.I64, 4)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.BlockedCount)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TJvmThreadInfo) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "blocked_time_in_ms", thrift.I64, 5)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.BlockedTimeInMs)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TJvmThreadInfo) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_in_native", thrift.BOOL, 6)
	offset += bthrift.Binary.WriteBool(buf[offset:], p.IsInNative)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TJvmThreadInfo) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("summary", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.Summary)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TJvmThreadInfo) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("cpu_time_in_ns", thrift.I64, 2)
	l += bthrift.Binary.I64Length(p.CpuTimeInNs)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TJvmThreadInfo) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("user_time_in_ns", thrift.I64, 3)
	l += bthrift.Binary.I64Length(p.UserTimeInNs)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TJvmThreadInfo) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("blocked_count", thrift.I64, 4)
	l += bthrift.Binary.I64Length(p.BlockedCount)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TJvmThreadInfo) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("blocked_time_in_ms", thrift.I64, 5)
	l += bthrift.Binary.I64Length(p.BlockedTimeInMs)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TJvmThreadInfo) field6Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("is_in_native", thrift.BOOL, 6)
	l += bthrift.Binary.BoolLength(p.IsInNative)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TGetJvmThreadsInfoRequest) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetGetCompleteInfo bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetGetCompleteInfo = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetGetCompleteInfo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetJvmThreadsInfoRequest[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TGetJvmThreadsInfoRequest[fieldId]))
}

func (p *TGetJvmThreadsInfoRequest) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.GetCompleteInfo = v

	}
	return offset, nil
}

// for compatibility
func (p *TGetJvmThreadsInfoRequest) FastWrite(buf []byte) int {
	return 0
}

func (p *TGetJvmThreadsInfoRequest) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TGetJvmThreadsInfoRequest")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TGetJvmThreadsInfoRequest) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TGetJvmThreadsInfoRequest")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TGetJvmThreadsInfoRequest) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "get_complete_info", thrift.BOOL, 1)
	offset += bthrift.Binary.WriteBool(buf[offset:], p.GetCompleteInfo)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TGetJvmThreadsInfoRequest) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("get_complete_info", thrift.BOOL, 1)
	l += bthrift.Binary.BoolLength(p.GetCompleteInfo)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TGetJvmThreadsInfoResponse) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotalThreadCount bool = false
	var issetDaemonThreadCount bool = false
	var issetPeakThreadCount bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTotalThreadCount = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetDaemonThreadCount = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPeakThreadCount = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTotalThreadCount {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetDaemonThreadCount {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPeakThreadCount {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetJvmThreadsInfoResponse[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TGetJvmThreadsInfoResponse[fieldId]))
}

func (p *TGetJvmThreadsInfoResponse) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TotalThreadCount = v

	}
	return offset, nil
}

func (p *TGetJvmThreadsInfoResponse) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.DaemonThreadCount = v

	}
	return offset, nil
}

func (p *TGetJvmThreadsInfoResponse) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.PeakThreadCount = v

	}
	return offset, nil
}

func (p *TGetJvmThreadsInfoResponse) FastReadField4(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Threads = make([]*TJvmThreadInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTJvmThreadInfo()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Threads = append(p.Threads, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TGetJvmThreadsInfoResponse) FastWrite(buf []byte) int {
	return 0
}

func (p *TGetJvmThreadsInfoResponse) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TGetJvmThreadsInfoResponse")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TGetJvmThreadsInfoResponse) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TGetJvmThreadsInfoResponse")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TGetJvmThreadsInfoResponse) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "total_thread_count", thrift.I32, 1)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.TotalThreadCount)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TGetJvmThreadsInfoResponse) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "daemon_thread_count", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.DaemonThreadCount)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TGetJvmThreadsInfoResponse) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "peak_thread_count", thrift.I32, 3)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.PeakThreadCount)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TGetJvmThreadsInfoResponse) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetThreads() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "threads", thrift.LIST, 4)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.Threads {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TGetJvmThreadsInfoResponse) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("total_thread_count", thrift.I32, 1)
	l += bthrift.Binary.I32Length(p.TotalThreadCount)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TGetJvmThreadsInfoResponse) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("daemon_thread_count", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.DaemonThreadCount)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TGetJvmThreadsInfoResponse) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("peak_thread_count", thrift.I32, 3)
	l += bthrift.Binary.I32Length(p.PeakThreadCount)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TGetJvmThreadsInfoResponse) field4Length() int {
	l := 0
	if p.IsSetThreads() {
		l += bthrift.Binary.FieldBeginLength("threads", thrift.LIST, 4)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.Threads))
		for _, v := range p.Threads {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TGetJMXJsonResponse) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetJmxJson bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetJmxJson = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetJmxJson {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetJMXJsonResponse[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TGetJMXJsonResponse[fieldId]))
}

func (p *TGetJMXJsonResponse) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.JmxJson = v

	}
	return offset, nil
}

// for compatibility
func (p *TGetJMXJsonResponse) FastWrite(buf []byte) int {
	return 0
}

func (p *TGetJMXJsonResponse) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TGetJMXJsonResponse")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TGetJMXJsonResponse) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TGetJMXJsonResponse")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TGetJMXJsonResponse) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "jmx_json", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.JmxJson)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TGetJMXJsonResponse) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("jmx_json", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.JmxJson)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TBackend) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetHost bool = false
	var issetBePort bool = false
	var issetHttpPort bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetHost = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetBePort = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetHttpPort = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetHost {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetBePort {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetHttpPort {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TBackend[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TBackend[fieldId]))
}

func (p *TBackend) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Host = v

	}
	return offset, nil
}

func (p *TBackend) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.BePort = v

	}
	return offset, nil
}

func (p *TBackend) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.HttpPort = v

	}
	return offset, nil
}

func (p *TBackend) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.BrpcPort = &v

	}
	return offset, nil
}

func (p *TBackend) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.IsAlive = &v

	}
	return offset, nil
}

func (p *TBackend) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Id = &v

	}
	return offset, nil
}

// for compatibility
func (p *TBackend) FastWrite(buf []byte) int {
	return 0
}

func (p *TBackend) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TBackend")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TBackend) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TBackend")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TBackend) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "host", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Host)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TBackend) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "be_port", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.BePort)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TBackend) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "http_port", thrift.I32, 3)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.HttpPort)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TBackend) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBrpcPort() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "brpc_port", thrift.I32, 4)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.BrpcPort)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TBackend) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsAlive() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_alive", thrift.BOOL, 5)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.IsAlive)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TBackend) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "id", thrift.I64, 6)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.Id)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TBackend) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("host", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.Host)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TBackend) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("be_port", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.BePort)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TBackend) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("http_port", thrift.I32, 3)
	l += bthrift.Binary.I32Length(p.HttpPort)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TBackend) field4Length() int {
	l := 0
	if p.IsSetBrpcPort() {
		l += bthrift.Binary.FieldBeginLength("brpc_port", thrift.I32, 4)
		l += bthrift.Binary.I32Length(*p.BrpcPort)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TBackend) field5Length() int {
	l := 0
	if p.IsSetIsAlive() {
		l += bthrift.Binary.FieldBeginLength("is_alive", thrift.BOOL, 5)
		l += bthrift.Binary.BoolLength(*p.IsAlive)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TBackend) field6Length() int {
	l := 0
	if p.IsSetId() {
		l += bthrift.Binary.FieldBeginLength("id", thrift.I64, 6)
		l += bthrift.Binary.I64Length(*p.Id)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TReplicaInfo) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetHost bool = false
	var issetBePort bool = false
	var issetHttpPort bool = false
	var issetBrpcPort bool = false
	var issetReplicaId bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetHost = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetBePort = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetHttpPort = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetBrpcPort = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetReplicaId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetHost {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetBePort {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetHttpPort {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetBrpcPort {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetReplicaId {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TReplicaInfo[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TReplicaInfo[fieldId]))
}

func (p *TReplicaInfo) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Host = v

	}
	return offset, nil
}

func (p *TReplicaInfo) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.BePort = v

	}
	return offset, nil
}

func (p *TReplicaInfo) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.HttpPort = v

	}
	return offset, nil
}

func (p *TReplicaInfo) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.BrpcPort = v

	}
	return offset, nil
}

func (p *TReplicaInfo) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ReplicaId = v

	}
	return offset, nil
}

// for compatibility
func (p *TReplicaInfo) FastWrite(buf []byte) int {
	return 0
}

func (p *TReplicaInfo) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TReplicaInfo")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TReplicaInfo) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TReplicaInfo")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TReplicaInfo) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "host", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Host)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TReplicaInfo) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "be_port", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.BePort)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TReplicaInfo) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "http_port", thrift.I32, 3)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.HttpPort)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TReplicaInfo) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "brpc_port", thrift.I32, 4)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.BrpcPort)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TReplicaInfo) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "replica_id", thrift.I64, 5)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.ReplicaId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TReplicaInfo) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("host", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.Host)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TReplicaInfo) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("be_port", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.BePort)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TReplicaInfo) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("http_port", thrift.I32, 3)
	l += bthrift.Binary.I32Length(p.HttpPort)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TReplicaInfo) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("brpc_port", thrift.I32, 4)
	l += bthrift.Binary.I32Length(p.BrpcPort)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TReplicaInfo) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("replica_id", thrift.I64, 5)
	l += bthrift.Binary.I64Length(p.ReplicaId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TResourceInfo) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUser bool = false
	var issetGroup bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetUser = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetGroup = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetUser {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetGroup {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TResourceInfo[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TResourceInfo[fieldId]))
}

func (p *TResourceInfo) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.User = v

	}
	return offset, nil
}

func (p *TResourceInfo) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Group = v

	}
	return offset, nil
}

// for compatibility
func (p *TResourceInfo) FastWrite(buf []byte) int {
	return 0
}

func (p *TResourceInfo) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TResourceInfo")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TResourceInfo) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TResourceInfo")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TResourceInfo) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "user", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.User)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TResourceInfo) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "group", thrift.STRING, 2)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Group)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TResourceInfo) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("user", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.User)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TResourceInfo) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("group", thrift.STRING, 2)
	l += bthrift.Binary.StringLengthNocopy(p.Group)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletCommitInfo) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetBackendId bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetBackendId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetBackendId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletCommitInfo[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletCommitInfo[fieldId]))
}

func (p *TTabletCommitInfo) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TabletId = v

	}
	return offset, nil
}

func (p *TTabletCommitInfo) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.BackendId = v

	}
	return offset, nil
}

func (p *TTabletCommitInfo) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.InvalidDictCols = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.InvalidDictCols = append(p.InvalidDictCols, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TTabletCommitInfo) FastWrite(buf []byte) int {
	return 0
}

func (p *TTabletCommitInfo) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTabletCommitInfo")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTabletCommitInfo) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTabletCommitInfo")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTabletCommitInfo) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tabletId", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TabletId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletCommitInfo) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "backendId", thrift.I64, 2)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.BackendId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletCommitInfo) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetInvalidDictCols() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "invalid_dict_cols", thrift.LIST, 3)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRING, 0)
		var length int
		for _, v := range p.InvalidDictCols {
			length++
			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRING, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTabletCommitInfo) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tabletId", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.TabletId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletCommitInfo) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("backendId", thrift.I64, 2)
	l += bthrift.Binary.I64Length(p.BackendId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletCommitInfo) field3Length() int {
	l := 0
	if p.IsSetInvalidDictCols() {
		l += bthrift.Binary.FieldBeginLength("invalid_dict_cols", thrift.LIST, 3)
		l += bthrift.Binary.ListBeginLength(thrift.STRING, len(p.InvalidDictCols))
		for _, v := range p.InvalidDictCols {
			l += bthrift.Binary.StringLengthNocopy(v)

		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TErrorTabletInfo) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TErrorTabletInfo[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TErrorTabletInfo) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TabletId = &v

	}
	return offset, nil
}

func (p *TErrorTabletInfo) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Msg = &v

	}
	return offset, nil
}

// for compatibility
func (p *TErrorTabletInfo) FastWrite(buf []byte) int {
	return 0
}

func (p *TErrorTabletInfo) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TErrorTabletInfo")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TErrorTabletInfo) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TErrorTabletInfo")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TErrorTabletInfo) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTabletId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tabletId", thrift.I64, 1)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TabletId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TErrorTabletInfo) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMsg() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "msg", thrift.STRING, 2)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Msg)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TErrorTabletInfo) field1Length() int {
	l := 0
	if p.IsSetTabletId() {
		l += bthrift.Binary.FieldBeginLength("tabletId", thrift.I64, 1)
		l += bthrift.Binary.I64Length(*p.TabletId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TErrorTabletInfo) field2Length() int {
	l := 0
	if p.IsSetMsg() {
		l += bthrift.Binary.FieldBeginLength("msg", thrift.STRING, 2)
		l += bthrift.Binary.StringLengthNocopy(*p.Msg)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TUserIdentity) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TUserIdentity[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TUserIdentity) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Username = &v

	}
	return offset, nil
}

func (p *TUserIdentity) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Host = &v

	}
	return offset, nil
}

func (p *TUserIdentity) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.IsDomain = &v

	}
	return offset, nil
}

// for compatibility
func (p *TUserIdentity) FastWrite(buf []byte) int {
	return 0
}

func (p *TUserIdentity) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TUserIdentity")
	if p != nil {
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TUserIdentity) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TUserIdentity")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TUserIdentity) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetUsername() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "username", thrift.STRING, 1)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Username)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TUserIdentity) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetHost() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "host", thrift.STRING, 2)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Host)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TUserIdentity) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsDomain() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_domain", thrift.BOOL, 3)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.IsDomain)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TUserIdentity) field1Length() int {
	l := 0
	if p.IsSetUsername() {
		l += bthrift.Binary.FieldBeginLength("username", thrift.STRING, 1)
		l += bthrift.Binary.StringLengthNocopy(*p.Username)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TUserIdentity) field2Length() int {
	l := 0
	if p.IsSetHost() {
		l += bthrift.Binary.FieldBeginLength("host", thrift.STRING, 2)
		l += bthrift.Binary.StringLengthNocopy(*p.Host)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TUserIdentity) field3Length() int {
	l := 0
	if p.IsSetIsDomain() {
		l += bthrift.Binary.FieldBeginLength("is_domain", thrift.BOOL, 3)
		l += bthrift.Binary.BoolLength(*p.IsDomain)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}
