// Code generated by thriftgo (0.3.13). DO NOT EDIT.

package types

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

const (
	TSNAPSHOT_REQ_VERSION1 = 3

	TSNAPSHOT_REQ_VERSION2 = 4

	TPREFER_SNAPSHOT_REQ_VERSION = int32(TSNAPSHOT_REQ_VERSION2)
)

type TStorageType int64

const (
	TStorageType_ROW    TStorageType = 0
	TStorageType_COLUMN TStorageType = 1
)

func (p TStorageType) String() string {
	switch p {
	case TStorageType_ROW:
		return "ROW"
	case TStorageType_COLUMN:
		return "COLUMN"
	}
	return "<UNSET>"
}

func TStorageTypeFromString(s string) (TStorageType, error) {
	switch s {
	case "ROW":
		return TStorageType_ROW, nil
	case "COLUMN":
		return TStorageType_COLUMN, nil
	}
	return TStorageType(0), fmt.Errorf("not a valid TStorageType string")
}

func TStorageTypePtr(v TStorageType) *TStorageType { return &v }
func (p *TStorageType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TStorageType(result.Int64)
	return
}

func (p *TStorageType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TStorageMedium int64

const (
	TStorageMedium_HDD          TStorageMedium = 0
	TStorageMedium_SSD          TStorageMedium = 1
	TStorageMedium_S3           TStorageMedium = 2
	TStorageMedium_REMOTE_CACHE TStorageMedium = 3
)

func (p TStorageMedium) String() string {
	switch p {
	case TStorageMedium_HDD:
		return "HDD"
	case TStorageMedium_SSD:
		return "SSD"
	case TStorageMedium_S3:
		return "S3"
	case TStorageMedium_REMOTE_CACHE:
		return "REMOTE_CACHE"
	}
	return "<UNSET>"
}

func TStorageMediumFromString(s string) (TStorageMedium, error) {
	switch s {
	case "HDD":
		return TStorageMedium_HDD, nil
	case "SSD":
		return TStorageMedium_SSD, nil
	case "S3":
		return TStorageMedium_S3, nil
	case "REMOTE_CACHE":
		return TStorageMedium_REMOTE_CACHE, nil
	}
	return TStorageMedium(0), fmt.Errorf("not a valid TStorageMedium string")
}

func TStorageMediumPtr(v TStorageMedium) *TStorageMedium { return &v }
func (p *TStorageMedium) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TStorageMedium(result.Int64)
	return
}

func (p *TStorageMedium) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TVarType int64

const (
	TVarType_SESSION TVarType = 0
	TVarType_GLOBAL  TVarType = 1
)

func (p TVarType) String() string {
	switch p {
	case TVarType_SESSION:
		return "SESSION"
	case TVarType_GLOBAL:
		return "GLOBAL"
	}
	return "<UNSET>"
}

func TVarTypeFromString(s string) (TVarType, error) {
	switch s {
	case "SESSION":
		return TVarType_SESSION, nil
	case "GLOBAL":
		return TVarType_GLOBAL, nil
	}
	return TVarType(0), fmt.Errorf("not a valid TVarType string")
}

func TVarTypePtr(v TVarType) *TVarType { return &v }
func (p *TVarType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TVarType(result.Int64)
	return
}

func (p *TVarType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TPrimitiveType int64

const (
	TPrimitiveType_INVALID_TYPE      TPrimitiveType = 0
	TPrimitiveType_NULL_TYPE         TPrimitiveType = 1
	TPrimitiveType_BOOLEAN           TPrimitiveType = 2
	TPrimitiveType_TINYINT           TPrimitiveType = 3
	TPrimitiveType_SMALLINT          TPrimitiveType = 4
	TPrimitiveType_INT               TPrimitiveType = 5
	TPrimitiveType_BIGINT            TPrimitiveType = 6
	TPrimitiveType_FLOAT             TPrimitiveType = 7
	TPrimitiveType_DOUBLE            TPrimitiveType = 8
	TPrimitiveType_DATE              TPrimitiveType = 9
	TPrimitiveType_DATETIME          TPrimitiveType = 10
	TPrimitiveType_BINARY            TPrimitiveType = 11
	TPrimitiveType_DECIMAL_DEPRACTED TPrimitiveType = 12
	TPrimitiveType_CHAR              TPrimitiveType = 13
	TPrimitiveType_LARGEINT          TPrimitiveType = 14
	TPrimitiveType_VARCHAR           TPrimitiveType = 15
	TPrimitiveType_HLL               TPrimitiveType = 16
	TPrimitiveType_DECIMALV2         TPrimitiveType = 17
	TPrimitiveType_TIME              TPrimitiveType = 18
	TPrimitiveType_OBJECT            TPrimitiveType = 19
	TPrimitiveType_ARRAY             TPrimitiveType = 20
	TPrimitiveType_MAP               TPrimitiveType = 21
	TPrimitiveType_STRUCT            TPrimitiveType = 22
	TPrimitiveType_STRING            TPrimitiveType = 23
	TPrimitiveType_ALL               TPrimitiveType = 24
	TPrimitiveType_QUANTILE_STATE    TPrimitiveType = 25
	TPrimitiveType_DATEV2            TPrimitiveType = 26
	TPrimitiveType_DATETIMEV2        TPrimitiveType = 27
	TPrimitiveType_TIMEV2            TPrimitiveType = 28
	TPrimitiveType_DECIMAL32         TPrimitiveType = 29
	TPrimitiveType_DECIMAL64         TPrimitiveType = 30
	TPrimitiveType_DECIMAL128I       TPrimitiveType = 31
	TPrimitiveType_JSONB             TPrimitiveType = 32
	TPrimitiveType_UNSUPPORTED       TPrimitiveType = 33
	TPrimitiveType_VARIANT           TPrimitiveType = 34
	TPrimitiveType_LAMBDA_FUNCTION   TPrimitiveType = 35
	TPrimitiveType_AGG_STATE         TPrimitiveType = 36
	TPrimitiveType_DECIMAL256        TPrimitiveType = 37
	TPrimitiveType_IPV4              TPrimitiveType = 38
	TPrimitiveType_IPV6              TPrimitiveType = 39
)

func (p TPrimitiveType) String() string {
	switch p {
	case TPrimitiveType_INVALID_TYPE:
		return "INVALID_TYPE"
	case TPrimitiveType_NULL_TYPE:
		return "NULL_TYPE"
	case TPrimitiveType_BOOLEAN:
		return "BOOLEAN"
	case TPrimitiveType_TINYINT:
		return "TINYINT"
	case TPrimitiveType_SMALLINT:
		return "SMALLINT"
	case TPrimitiveType_INT:
		return "INT"
	case TPrimitiveType_BIGINT:
		return "BIGINT"
	case TPrimitiveType_FLOAT:
		return "FLOAT"
	case TPrimitiveType_DOUBLE:
		return "DOUBLE"
	case TPrimitiveType_DATE:
		return "DATE"
	case TPrimitiveType_DATETIME:
		return "DATETIME"
	case TPrimitiveType_BINARY:
		return "BINARY"
	case TPrimitiveType_DECIMAL_DEPRACTED:
		return "DECIMAL_DEPRACTED"
	case TPrimitiveType_CHAR:
		return "CHAR"
	case TPrimitiveType_LARGEINT:
		return "LARGEINT"
	case TPrimitiveType_VARCHAR:
		return "VARCHAR"
	case TPrimitiveType_HLL:
		return "HLL"
	case TPrimitiveType_DECIMALV2:
		return "DECIMALV2"
	case TPrimitiveType_TIME:
		return "TIME"
	case TPrimitiveType_OBJECT:
		return "OBJECT"
	case TPrimitiveType_ARRAY:
		return "ARRAY"
	case TPrimitiveType_MAP:
		return "MAP"
	case TPrimitiveType_STRUCT:
		return "STRUCT"
	case TPrimitiveType_STRING:
		return "STRING"
	case TPrimitiveType_ALL:
		return "ALL"
	case TPrimitiveType_QUANTILE_STATE:
		return "QUANTILE_STATE"
	case TPrimitiveType_DATEV2:
		return "DATEV2"
	case TPrimitiveType_DATETIMEV2:
		return "DATETIMEV2"
	case TPrimitiveType_TIMEV2:
		return "TIMEV2"
	case TPrimitiveType_DECIMAL32:
		return "DECIMAL32"
	case TPrimitiveType_DECIMAL64:
		return "DECIMAL64"
	case TPrimitiveType_DECIMAL128I:
		return "DECIMAL128I"
	case TPrimitiveType_JSONB:
		return "JSONB"
	case TPrimitiveType_UNSUPPORTED:
		return "UNSUPPORTED"
	case TPrimitiveType_VARIANT:
		return "VARIANT"
	case TPrimitiveType_LAMBDA_FUNCTION:
		return "LAMBDA_FUNCTION"
	case TPrimitiveType_AGG_STATE:
		return "AGG_STATE"
	case TPrimitiveType_DECIMAL256:
		return "DECIMAL256"
	case TPrimitiveType_IPV4:
		return "IPV4"
	case TPrimitiveType_IPV6:
		return "IPV6"
	}
	return "<UNSET>"
}

func TPrimitiveTypeFromString(s string) (TPrimitiveType, error) {
	switch s {
	case "INVALID_TYPE":
		return TPrimitiveType_INVALID_TYPE, nil
	case "NULL_TYPE":
		return TPrimitiveType_NULL_TYPE, nil
	case "BOOLEAN":
		return TPrimitiveType_BOOLEAN, nil
	case "TINYINT":
		return TPrimitiveType_TINYINT, nil
	case "SMALLINT":
		return TPrimitiveType_SMALLINT, nil
	case "INT":
		return TPrimitiveType_INT, nil
	case "BIGINT":
		return TPrimitiveType_BIGINT, nil
	case "FLOAT":
		return TPrimitiveType_FLOAT, nil
	case "DOUBLE":
		return TPrimitiveType_DOUBLE, nil
	case "DATE":
		return TPrimitiveType_DATE, nil
	case "DATETIME":
		return TPrimitiveType_DATETIME, nil
	case "BINARY":
		return TPrimitiveType_BINARY, nil
	case "DECIMAL_DEPRACTED":
		return TPrimitiveType_DECIMAL_DEPRACTED, nil
	case "CHAR":
		return TPrimitiveType_CHAR, nil
	case "LARGEINT":
		return TPrimitiveType_LARGEINT, nil
	case "VARCHAR":
		return TPrimitiveType_VARCHAR, nil
	case "HLL":
		return TPrimitiveType_HLL, nil
	case "DECIMALV2":
		return TPrimitiveType_DECIMALV2, nil
	case "TIME":
		return TPrimitiveType_TIME, nil
	case "OBJECT":
		return TPrimitiveType_OBJECT, nil
	case "ARRAY":
		return TPrimitiveType_ARRAY, nil
	case "MAP":
		return TPrimitiveType_MAP, nil
	case "STRUCT":
		return TPrimitiveType_STRUCT, nil
	case "STRING":
		return TPrimitiveType_STRING, nil
	case "ALL":
		return TPrimitiveType_ALL, nil
	case "QUANTILE_STATE":
		return TPrimitiveType_QUANTILE_STATE, nil
	case "DATEV2":
		return TPrimitiveType_DATEV2, nil
	case "DATETIMEV2":
		return TPrimitiveType_DATETIMEV2, nil
	case "TIMEV2":
		return TPrimitiveType_TIMEV2, nil
	case "DECIMAL32":
		return TPrimitiveType_DECIMAL32, nil
	case "DECIMAL64":
		return TPrimitiveType_DECIMAL64, nil
	case "DECIMAL128I":
		return TPrimitiveType_DECIMAL128I, nil
	case "JSONB":
		return TPrimitiveType_JSONB, nil
	case "UNSUPPORTED":
		return TPrimitiveType_UNSUPPORTED, nil
	case "VARIANT":
		return TPrimitiveType_VARIANT, nil
	case "LAMBDA_FUNCTION":
		return TPrimitiveType_LAMBDA_FUNCTION, nil
	case "AGG_STATE":
		return TPrimitiveType_AGG_STATE, nil
	case "DECIMAL256":
		return TPrimitiveType_DECIMAL256, nil
	case "IPV4":
		return TPrimitiveType_IPV4, nil
	case "IPV6":
		return TPrimitiveType_IPV6, nil
	}
	return TPrimitiveType(0), fmt.Errorf("not a valid TPrimitiveType string")
}

func TPrimitiveTypePtr(v TPrimitiveType) *TPrimitiveType { return &v }
func (p *TPrimitiveType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TPrimitiveType(result.Int64)
	return
}

func (p *TPrimitiveType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TTypeNodeType int64

const (
	TTypeNodeType_SCALAR  TTypeNodeType = 0
	TTypeNodeType_ARRAY   TTypeNodeType = 1
	TTypeNodeType_MAP     TTypeNodeType = 2
	TTypeNodeType_STRUCT  TTypeNodeType = 3
	TTypeNodeType_VARIANT TTypeNodeType = 4
)

func (p TTypeNodeType) String() string {
	switch p {
	case TTypeNodeType_SCALAR:
		return "SCALAR"
	case TTypeNodeType_ARRAY:
		return "ARRAY"
	case TTypeNodeType_MAP:
		return "MAP"
	case TTypeNodeType_STRUCT:
		return "STRUCT"
	case TTypeNodeType_VARIANT:
		return "VARIANT"
	}
	return "<UNSET>"
}

func TTypeNodeTypeFromString(s string) (TTypeNodeType, error) {
	switch s {
	case "SCALAR":
		return TTypeNodeType_SCALAR, nil
	case "ARRAY":
		return TTypeNodeType_ARRAY, nil
	case "MAP":
		return TTypeNodeType_MAP, nil
	case "STRUCT":
		return TTypeNodeType_STRUCT, nil
	case "VARIANT":
		return TTypeNodeType_VARIANT, nil
	}
	return TTypeNodeType(0), fmt.Errorf("not a valid TTypeNodeType string")
}

func TTypeNodeTypePtr(v TTypeNodeType) *TTypeNodeType { return &v }
func (p *TTypeNodeType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TTypeNodeType(result.Int64)
	return
}

func (p *TTypeNodeType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TStorageBackendType int64

const (
	TStorageBackendType_BROKER TStorageBackendType = 0
	TStorageBackendType_S3     TStorageBackendType = 1
	TStorageBackendType_HDFS   TStorageBackendType = 2
	TStorageBackendType_JFS    TStorageBackendType = 3
	TStorageBackendType_LOCAL  TStorageBackendType = 4
	TStorageBackendType_OFS    TStorageBackendType = 5
	TStorageBackendType_AZURE  TStorageBackendType = 6
)

func (p TStorageBackendType) String() string {
	switch p {
	case TStorageBackendType_BROKER:
		return "BROKER"
	case TStorageBackendType_S3:
		return "S3"
	case TStorageBackendType_HDFS:
		return "HDFS"
	case TStorageBackendType_JFS:
		return "JFS"
	case TStorageBackendType_LOCAL:
		return "LOCAL"
	case TStorageBackendType_OFS:
		return "OFS"
	case TStorageBackendType_AZURE:
		return "AZURE"
	}
	return "<UNSET>"
}

func TStorageBackendTypeFromString(s string) (TStorageBackendType, error) {
	switch s {
	case "BROKER":
		return TStorageBackendType_BROKER, nil
	case "S3":
		return TStorageBackendType_S3, nil
	case "HDFS":
		return TStorageBackendType_HDFS, nil
	case "JFS":
		return TStorageBackendType_JFS, nil
	case "LOCAL":
		return TStorageBackendType_LOCAL, nil
	case "OFS":
		return TStorageBackendType_OFS, nil
	case "AZURE":
		return TStorageBackendType_AZURE, nil
	}
	return TStorageBackendType(0), fmt.Errorf("not a valid TStorageBackendType string")
}

func TStorageBackendTypePtr(v TStorageBackendType) *TStorageBackendType { return &v }
func (p *TStorageBackendType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TStorageBackendType(result.Int64)
	return
}

func (p *TStorageBackendType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TInvertedIndexFileStorageFormat int64

const (
	TInvertedIndexFileStorageFormat_DEFAULT TInvertedIndexFileStorageFormat = 0
	TInvertedIndexFileStorageFormat_V1      TInvertedIndexFileStorageFormat = 1
	TInvertedIndexFileStorageFormat_V2      TInvertedIndexFileStorageFormat = 2
)

func (p TInvertedIndexFileStorageFormat) String() string {
	switch p {
	case TInvertedIndexFileStorageFormat_DEFAULT:
		return "DEFAULT"
	case TInvertedIndexFileStorageFormat_V1:
		return "V1"
	case TInvertedIndexFileStorageFormat_V2:
		return "V2"
	}
	return "<UNSET>"
}

func TInvertedIndexFileStorageFormatFromString(s string) (TInvertedIndexFileStorageFormat, error) {
	switch s {
	case "DEFAULT":
		return TInvertedIndexFileStorageFormat_DEFAULT, nil
	case "V1":
		return TInvertedIndexFileStorageFormat_V1, nil
	case "V2":
		return TInvertedIndexFileStorageFormat_V2, nil
	}
	return TInvertedIndexFileStorageFormat(0), fmt.Errorf("not a valid TInvertedIndexFileStorageFormat string")
}

func TInvertedIndexFileStorageFormatPtr(v TInvertedIndexFileStorageFormat) *TInvertedIndexFileStorageFormat {
	return &v
}
func (p *TInvertedIndexFileStorageFormat) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TInvertedIndexFileStorageFormat(result.Int64)
	return
}

func (p *TInvertedIndexFileStorageFormat) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TAggregationType int64

const (
	TAggregationType_SUM                 TAggregationType = 0
	TAggregationType_MAX                 TAggregationType = 1
	TAggregationType_MIN                 TAggregationType = 2
	TAggregationType_REPLACE             TAggregationType = 3
	TAggregationType_HLL_UNION           TAggregationType = 4
	TAggregationType_NONE                TAggregationType = 5
	TAggregationType_BITMAP_UNION        TAggregationType = 6
	TAggregationType_REPLACE_IF_NOT_NULL TAggregationType = 7
	TAggregationType_QUANTILE_UNION      TAggregationType = 8
)

func (p TAggregationType) String() string {
	switch p {
	case TAggregationType_SUM:
		return "SUM"
	case TAggregationType_MAX:
		return "MAX"
	case TAggregationType_MIN:
		return "MIN"
	case TAggregationType_REPLACE:
		return "REPLACE"
	case TAggregationType_HLL_UNION:
		return "HLL_UNION"
	case TAggregationType_NONE:
		return "NONE"
	case TAggregationType_BITMAP_UNION:
		return "BITMAP_UNION"
	case TAggregationType_REPLACE_IF_NOT_NULL:
		return "REPLACE_IF_NOT_NULL"
	case TAggregationType_QUANTILE_UNION:
		return "QUANTILE_UNION"
	}
	return "<UNSET>"
}

func TAggregationTypeFromString(s string) (TAggregationType, error) {
	switch s {
	case "SUM":
		return TAggregationType_SUM, nil
	case "MAX":
		return TAggregationType_MAX, nil
	case "MIN":
		return TAggregationType_MIN, nil
	case "REPLACE":
		return TAggregationType_REPLACE, nil
	case "HLL_UNION":
		return TAggregationType_HLL_UNION, nil
	case "NONE":
		return TAggregationType_NONE, nil
	case "BITMAP_UNION":
		return TAggregationType_BITMAP_UNION, nil
	case "REPLACE_IF_NOT_NULL":
		return TAggregationType_REPLACE_IF_NOT_NULL, nil
	case "QUANTILE_UNION":
		return TAggregationType_QUANTILE_UNION, nil
	}
	return TAggregationType(0), fmt.Errorf("not a valid TAggregationType string")
}

func TAggregationTypePtr(v TAggregationType) *TAggregationType { return &v }
func (p *TAggregationType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TAggregationType(result.Int64)
	return
}

func (p *TAggregationType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TPushType int64

const (
	TPushType_LOAD        TPushType = 0
	TPushType_DELETE      TPushType = 1
	TPushType_LOAD_DELETE TPushType = 2
	TPushType_LOAD_V2     TPushType = 3
)

func (p TPushType) String() string {
	switch p {
	case TPushType_LOAD:
		return "LOAD"
	case TPushType_DELETE:
		return "DELETE"
	case TPushType_LOAD_DELETE:
		return "LOAD_DELETE"
	case TPushType_LOAD_V2:
		return "LOAD_V2"
	}
	return "<UNSET>"
}

func TPushTypeFromString(s string) (TPushType, error) {
	switch s {
	case "LOAD":
		return TPushType_LOAD, nil
	case "DELETE":
		return TPushType_DELETE, nil
	case "LOAD_DELETE":
		return TPushType_LOAD_DELETE, nil
	case "LOAD_V2":
		return TPushType_LOAD_V2, nil
	}
	return TPushType(0), fmt.Errorf("not a valid TPushType string")
}

func TPushTypePtr(v TPushType) *TPushType { return &v }
func (p *TPushType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TPushType(result.Int64)
	return
}

func (p *TPushType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TTaskType int64

const (
	TTaskType_CREATE                       TTaskType = 0
	TTaskType_DROP                         TTaskType = 1
	TTaskType_PUSH                         TTaskType = 2
	TTaskType_CLONE                        TTaskType = 3
	TTaskType_STORAGE_MEDIUM_MIGRATE       TTaskType = 4
	TTaskType_ROLLUP                       TTaskType = 5
	TTaskType_SCHEMA_CHANGE                TTaskType = 6
	TTaskType_CANCEL_DELETE                TTaskType = 7
	TTaskType_MAKE_SNAPSHOT                TTaskType = 8
	TTaskType_RELEASE_SNAPSHOT             TTaskType = 9
	TTaskType_CHECK_CONSISTENCY            TTaskType = 10
	TTaskType_UPLOAD                       TTaskType = 11
	TTaskType_DOWNLOAD                     TTaskType = 12
	TTaskType_CLEAR_REMOTE_FILE            TTaskType = 13
	TTaskType_MOVE                         TTaskType = 14
	TTaskType_REALTIME_PUSH                TTaskType = 15
	TTaskType_PUBLISH_VERSION              TTaskType = 16
	TTaskType_CLEAR_ALTER_TASK             TTaskType = 17
	TTaskType_CLEAR_TRANSACTION_TASK       TTaskType = 18
	TTaskType_RECOVER_TABLET               TTaskType = 19
	TTaskType_STREAM_LOAD                  TTaskType = 20
	TTaskType_UPDATE_TABLET_META_INFO      TTaskType = 21
	TTaskType_ALTER                        TTaskType = 22
	TTaskType_INSTALL_PLUGIN               TTaskType = 23
	TTaskType_UNINSTALL_PLUGIN             TTaskType = 24
	TTaskType_COMPACTION                   TTaskType = 25
	TTaskType_STORAGE_MEDIUM_MIGRATE_V2    TTaskType = 26
	TTaskType_NOTIFY_UPDATE_STORAGE_POLICY TTaskType = 27
	TTaskType_PUSH_COOLDOWN_CONF           TTaskType = 28
	TTaskType_PUSH_STORAGE_POLICY          TTaskType = 29
	TTaskType_ALTER_INVERTED_INDEX         TTaskType = 30
	TTaskType_GC_BINLOG                    TTaskType = 31
	TTaskType_CLEAN_TRASH                  TTaskType = 32
	TTaskType_UPDATE_VISIBLE_VERSION       TTaskType = 33
	TTaskType_CLEAN_UDF_CACHE              TTaskType = 34
	TTaskType_CALCULATE_DELETE_BITMAP      TTaskType = 1000
)

func (p TTaskType) String() string {
	switch p {
	case TTaskType_CREATE:
		return "CREATE"
	case TTaskType_DROP:
		return "DROP"
	case TTaskType_PUSH:
		return "PUSH"
	case TTaskType_CLONE:
		return "CLONE"
	case TTaskType_STORAGE_MEDIUM_MIGRATE:
		return "STORAGE_MEDIUM_MIGRATE"
	case TTaskType_ROLLUP:
		return "ROLLUP"
	case TTaskType_SCHEMA_CHANGE:
		return "SCHEMA_CHANGE"
	case TTaskType_CANCEL_DELETE:
		return "CANCEL_DELETE"
	case TTaskType_MAKE_SNAPSHOT:
		return "MAKE_SNAPSHOT"
	case TTaskType_RELEASE_SNAPSHOT:
		return "RELEASE_SNAPSHOT"
	case TTaskType_CHECK_CONSISTENCY:
		return "CHECK_CONSISTENCY"
	case TTaskType_UPLOAD:
		return "UPLOAD"
	case TTaskType_DOWNLOAD:
		return "DOWNLOAD"
	case TTaskType_CLEAR_REMOTE_FILE:
		return "CLEAR_REMOTE_FILE"
	case TTaskType_MOVE:
		return "MOVE"
	case TTaskType_REALTIME_PUSH:
		return "REALTIME_PUSH"
	case TTaskType_PUBLISH_VERSION:
		return "PUBLISH_VERSION"
	case TTaskType_CLEAR_ALTER_TASK:
		return "CLEAR_ALTER_TASK"
	case TTaskType_CLEAR_TRANSACTION_TASK:
		return "CLEAR_TRANSACTION_TASK"
	case TTaskType_RECOVER_TABLET:
		return "RECOVER_TABLET"
	case TTaskType_STREAM_LOAD:
		return "STREAM_LOAD"
	case TTaskType_UPDATE_TABLET_META_INFO:
		return "UPDATE_TABLET_META_INFO"
	case TTaskType_ALTER:
		return "ALTER"
	case TTaskType_INSTALL_PLUGIN:
		return "INSTALL_PLUGIN"
	case TTaskType_UNINSTALL_PLUGIN:
		return "UNINSTALL_PLUGIN"
	case TTaskType_COMPACTION:
		return "COMPACTION"
	case TTaskType_STORAGE_MEDIUM_MIGRATE_V2:
		return "STORAGE_MEDIUM_MIGRATE_V2"
	case TTaskType_NOTIFY_UPDATE_STORAGE_POLICY:
		return "NOTIFY_UPDATE_STORAGE_POLICY"
	case TTaskType_PUSH_COOLDOWN_CONF:
		return "PUSH_COOLDOWN_CONF"
	case TTaskType_PUSH_STORAGE_POLICY:
		return "PUSH_STORAGE_POLICY"
	case TTaskType_ALTER_INVERTED_INDEX:
		return "ALTER_INVERTED_INDEX"
	case TTaskType_GC_BINLOG:
		return "GC_BINLOG"
	case TTaskType_CLEAN_TRASH:
		return "CLEAN_TRASH"
	case TTaskType_UPDATE_VISIBLE_VERSION:
		return "UPDATE_VISIBLE_VERSION"
	case TTaskType_CLEAN_UDF_CACHE:
		return "CLEAN_UDF_CACHE"
	case TTaskType_CALCULATE_DELETE_BITMAP:
		return "CALCULATE_DELETE_BITMAP"
	}
	return "<UNSET>"
}

func TTaskTypeFromString(s string) (TTaskType, error) {
	switch s {
	case "CREATE":
		return TTaskType_CREATE, nil
	case "DROP":
		return TTaskType_DROP, nil
	case "PUSH":
		return TTaskType_PUSH, nil
	case "CLONE":
		return TTaskType_CLONE, nil
	case "STORAGE_MEDIUM_MIGRATE":
		return TTaskType_STORAGE_MEDIUM_MIGRATE, nil
	case "ROLLUP":
		return TTaskType_ROLLUP, nil
	case "SCHEMA_CHANGE":
		return TTaskType_SCHEMA_CHANGE, nil
	case "CANCEL_DELETE":
		return TTaskType_CANCEL_DELETE, nil
	case "MAKE_SNAPSHOT":
		return TTaskType_MAKE_SNAPSHOT, nil
	case "RELEASE_SNAPSHOT":
		return TTaskType_RELEASE_SNAPSHOT, nil
	case "CHECK_CONSISTENCY":
		return TTaskType_CHECK_CONSISTENCY, nil
	case "UPLOAD":
		return TTaskType_UPLOAD, nil
	case "DOWNLOAD":
		return TTaskType_DOWNLOAD, nil
	case "CLEAR_REMOTE_FILE":
		return TTaskType_CLEAR_REMOTE_FILE, nil
	case "MOVE":
		return TTaskType_MOVE, nil
	case "REALTIME_PUSH":
		return TTaskType_REALTIME_PUSH, nil
	case "PUBLISH_VERSION":
		return TTaskType_PUBLISH_VERSION, nil
	case "CLEAR_ALTER_TASK":
		return TTaskType_CLEAR_ALTER_TASK, nil
	case "CLEAR_TRANSACTION_TASK":
		return TTaskType_CLEAR_TRANSACTION_TASK, nil
	case "RECOVER_TABLET":
		return TTaskType_RECOVER_TABLET, nil
	case "STREAM_LOAD":
		return TTaskType_STREAM_LOAD, nil
	case "UPDATE_TABLET_META_INFO":
		return TTaskType_UPDATE_TABLET_META_INFO, nil
	case "ALTER":
		return TTaskType_ALTER, nil
	case "INSTALL_PLUGIN":
		return TTaskType_INSTALL_PLUGIN, nil
	case "UNINSTALL_PLUGIN":
		return TTaskType_UNINSTALL_PLUGIN, nil
	case "COMPACTION":
		return TTaskType_COMPACTION, nil
	case "STORAGE_MEDIUM_MIGRATE_V2":
		return TTaskType_STORAGE_MEDIUM_MIGRATE_V2, nil
	case "NOTIFY_UPDATE_STORAGE_POLICY":
		return TTaskType_NOTIFY_UPDATE_STORAGE_POLICY, nil
	case "PUSH_COOLDOWN_CONF":
		return TTaskType_PUSH_COOLDOWN_CONF, nil
	case "PUSH_STORAGE_POLICY":
		return TTaskType_PUSH_STORAGE_POLICY, nil
	case "ALTER_INVERTED_INDEX":
		return TTaskType_ALTER_INVERTED_INDEX, nil
	case "GC_BINLOG":
		return TTaskType_GC_BINLOG, nil
	case "CLEAN_TRASH":
		return TTaskType_CLEAN_TRASH, nil
	case "UPDATE_VISIBLE_VERSION":
		return TTaskType_UPDATE_VISIBLE_VERSION, nil
	case "CLEAN_UDF_CACHE":
		return TTaskType_CLEAN_UDF_CACHE, nil
	case "CALCULATE_DELETE_BITMAP":
		return TTaskType_CALCULATE_DELETE_BITMAP, nil
	}
	return TTaskType(0), fmt.Errorf("not a valid TTaskType string")
}

func TTaskTypePtr(v TTaskType) *TTaskType { return &v }
func (p *TTaskType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TTaskType(result.Int64)
	return
}

func (p *TTaskType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TStmtType int64

const (
	TStmtType_QUERY   TStmtType = 0
	TStmtType_DDL     TStmtType = 1
	TStmtType_DML     TStmtType = 2
	TStmtType_EXPLAIN TStmtType = 3
)

func (p TStmtType) String() string {
	switch p {
	case TStmtType_QUERY:
		return "QUERY"
	case TStmtType_DDL:
		return "DDL"
	case TStmtType_DML:
		return "DML"
	case TStmtType_EXPLAIN:
		return "EXPLAIN"
	}
	return "<UNSET>"
}

func TStmtTypeFromString(s string) (TStmtType, error) {
	switch s {
	case "QUERY":
		return TStmtType_QUERY, nil
	case "DDL":
		return TStmtType_DDL, nil
	case "DML":
		return TStmtType_DML, nil
	case "EXPLAIN":
		return TStmtType_EXPLAIN, nil
	}
	return TStmtType(0), fmt.Errorf("not a valid TStmtType string")
}

func TStmtTypePtr(v TStmtType) *TStmtType { return &v }
func (p *TStmtType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TStmtType(result.Int64)
	return
}

func (p *TStmtType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TExplainLevel int64

const (
	TExplainLevel_BRIEF   TExplainLevel = 0
	TExplainLevel_NORMAL  TExplainLevel = 1
	TExplainLevel_VERBOSE TExplainLevel = 2
)

func (p TExplainLevel) String() string {
	switch p {
	case TExplainLevel_BRIEF:
		return "BRIEF"
	case TExplainLevel_NORMAL:
		return "NORMAL"
	case TExplainLevel_VERBOSE:
		return "VERBOSE"
	}
	return "<UNSET>"
}

func TExplainLevelFromString(s string) (TExplainLevel, error) {
	switch s {
	case "BRIEF":
		return TExplainLevel_BRIEF, nil
	case "NORMAL":
		return TExplainLevel_NORMAL, nil
	case "VERBOSE":
		return TExplainLevel_VERBOSE, nil
	}
	return TExplainLevel(0), fmt.Errorf("not a valid TExplainLevel string")
}

func TExplainLevelPtr(v TExplainLevel) *TExplainLevel { return &v }
func (p *TExplainLevel) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TExplainLevel(result.Int64)
	return
}

func (p *TExplainLevel) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TRuntimeFilterMode int64

const (
	TRuntimeFilterMode_OFF    TRuntimeFilterMode = 0
	TRuntimeFilterMode_LOCAL  TRuntimeFilterMode = 1
	TRuntimeFilterMode_REMOTE TRuntimeFilterMode = 2
	TRuntimeFilterMode_GLOBAL TRuntimeFilterMode = 3
)

func (p TRuntimeFilterMode) String() string {
	switch p {
	case TRuntimeFilterMode_OFF:
		return "OFF"
	case TRuntimeFilterMode_LOCAL:
		return "LOCAL"
	case TRuntimeFilterMode_REMOTE:
		return "REMOTE"
	case TRuntimeFilterMode_GLOBAL:
		return "GLOBAL"
	}
	return "<UNSET>"
}

func TRuntimeFilterModeFromString(s string) (TRuntimeFilterMode, error) {
	switch s {
	case "OFF":
		return TRuntimeFilterMode_OFF, nil
	case "LOCAL":
		return TRuntimeFilterMode_LOCAL, nil
	case "REMOTE":
		return TRuntimeFilterMode_REMOTE, nil
	case "GLOBAL":
		return TRuntimeFilterMode_GLOBAL, nil
	}
	return TRuntimeFilterMode(0), fmt.Errorf("not a valid TRuntimeFilterMode string")
}

func TRuntimeFilterModePtr(v TRuntimeFilterMode) *TRuntimeFilterMode { return &v }
func (p *TRuntimeFilterMode) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TRuntimeFilterMode(result.Int64)
	return
}

func (p *TRuntimeFilterMode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type QueryState int64

const (
	QueryState_CREATED     QueryState = 0
	QueryState_INITIALIZED QueryState = 1
	QueryState_COMPILED    QueryState = 2
	QueryState_RUNNING     QueryState = 3
	QueryState_FINISHED    QueryState = 4
	QueryState_EXCEPTION   QueryState = 5
)

func (p QueryState) String() string {
	switch p {
	case QueryState_CREATED:
		return "CREATED"
	case QueryState_INITIALIZED:
		return "INITIALIZED"
	case QueryState_COMPILED:
		return "COMPILED"
	case QueryState_RUNNING:
		return "RUNNING"
	case QueryState_FINISHED:
		return "FINISHED"
	case QueryState_EXCEPTION:
		return "EXCEPTION"
	}
	return "<UNSET>"
}

func QueryStateFromString(s string) (QueryState, error) {
	switch s {
	case "CREATED":
		return QueryState_CREATED, nil
	case "INITIALIZED":
		return QueryState_INITIALIZED, nil
	case "COMPILED":
		return QueryState_COMPILED, nil
	case "RUNNING":
		return QueryState_RUNNING, nil
	case "FINISHED":
		return QueryState_FINISHED, nil
	case "EXCEPTION":
		return QueryState_EXCEPTION, nil
	}
	return QueryState(0), fmt.Errorf("not a valid QueryState string")
}

func QueryStatePtr(v QueryState) *QueryState { return &v }
func (p *QueryState) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = QueryState(result.Int64)
	return
}

func (p *QueryState) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TFunctionType int64

const (
	TFunctionType_SCALAR    TFunctionType = 0
	TFunctionType_AGGREGATE TFunctionType = 1
)

func (p TFunctionType) String() string {
	switch p {
	case TFunctionType_SCALAR:
		return "SCALAR"
	case TFunctionType_AGGREGATE:
		return "AGGREGATE"
	}
	return "<UNSET>"
}

func TFunctionTypeFromString(s string) (TFunctionType, error) {
	switch s {
	case "SCALAR":
		return TFunctionType_SCALAR, nil
	case "AGGREGATE":
		return TFunctionType_AGGREGATE, nil
	}
	return TFunctionType(0), fmt.Errorf("not a valid TFunctionType string")
}

func TFunctionTypePtr(v TFunctionType) *TFunctionType { return &v }
func (p *TFunctionType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TFunctionType(result.Int64)
	return
}

func (p *TFunctionType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TFunctionBinaryType int64

const (
	TFunctionBinaryType_BUILTIN   TFunctionBinaryType = 0
	TFunctionBinaryType_HIVE      TFunctionBinaryType = 1
	TFunctionBinaryType_NATIVE    TFunctionBinaryType = 2
	TFunctionBinaryType_IR        TFunctionBinaryType = 3
	TFunctionBinaryType_RPC       TFunctionBinaryType = 4
	TFunctionBinaryType_JAVA_UDF  TFunctionBinaryType = 5
	TFunctionBinaryType_AGG_STATE TFunctionBinaryType = 6
)

func (p TFunctionBinaryType) String() string {
	switch p {
	case TFunctionBinaryType_BUILTIN:
		return "BUILTIN"
	case TFunctionBinaryType_HIVE:
		return "HIVE"
	case TFunctionBinaryType_NATIVE:
		return "NATIVE"
	case TFunctionBinaryType_IR:
		return "IR"
	case TFunctionBinaryType_RPC:
		return "RPC"
	case TFunctionBinaryType_JAVA_UDF:
		return "JAVA_UDF"
	case TFunctionBinaryType_AGG_STATE:
		return "AGG_STATE"
	}
	return "<UNSET>"
}

func TFunctionBinaryTypeFromString(s string) (TFunctionBinaryType, error) {
	switch s {
	case "BUILTIN":
		return TFunctionBinaryType_BUILTIN, nil
	case "HIVE":
		return TFunctionBinaryType_HIVE, nil
	case "NATIVE":
		return TFunctionBinaryType_NATIVE, nil
	case "IR":
		return TFunctionBinaryType_IR, nil
	case "RPC":
		return TFunctionBinaryType_RPC, nil
	case "JAVA_UDF":
		return TFunctionBinaryType_JAVA_UDF, nil
	case "AGG_STATE":
		return TFunctionBinaryType_AGG_STATE, nil
	}
	return TFunctionBinaryType(0), fmt.Errorf("not a valid TFunctionBinaryType string")
}

func TFunctionBinaryTypePtr(v TFunctionBinaryType) *TFunctionBinaryType { return &v }
func (p *TFunctionBinaryType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TFunctionBinaryType(result.Int64)
	return
}

func (p *TFunctionBinaryType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TJdbcOperation int64

const (
	TJdbcOperation_READ  TJdbcOperation = 0
	TJdbcOperation_WRITE TJdbcOperation = 1
)

func (p TJdbcOperation) String() string {
	switch p {
	case TJdbcOperation_READ:
		return "READ"
	case TJdbcOperation_WRITE:
		return "WRITE"
	}
	return "<UNSET>"
}

func TJdbcOperationFromString(s string) (TJdbcOperation, error) {
	switch s {
	case "READ":
		return TJdbcOperation_READ, nil
	case "WRITE":
		return TJdbcOperation_WRITE, nil
	}
	return TJdbcOperation(0), fmt.Errorf("not a valid TJdbcOperation string")
}

func TJdbcOperationPtr(v TJdbcOperation) *TJdbcOperation { return &v }
func (p *TJdbcOperation) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TJdbcOperation(result.Int64)
	return
}

func (p *TJdbcOperation) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TOdbcTableType int64

const (
	TOdbcTableType_MYSQL            TOdbcTableType = 0
	TOdbcTableType_ORACLE           TOdbcTableType = 1
	TOdbcTableType_POSTGRESQL       TOdbcTableType = 2
	TOdbcTableType_SQLSERVER        TOdbcTableType = 3
	TOdbcTableType_REDIS            TOdbcTableType = 4
	TOdbcTableType_MONGODB          TOdbcTableType = 5
	TOdbcTableType_CLICKHOUSE       TOdbcTableType = 6
	TOdbcTableType_SAP_HANA         TOdbcTableType = 7
	TOdbcTableType_TRINO            TOdbcTableType = 8
	TOdbcTableType_PRESTO           TOdbcTableType = 9
	TOdbcTableType_OCEANBASE        TOdbcTableType = 10
	TOdbcTableType_OCEANBASE_ORACLE TOdbcTableType = 11
	TOdbcTableType_NEBULA           TOdbcTableType = 12
	TOdbcTableType_DB2              TOdbcTableType = 13
)

func (p TOdbcTableType) String() string {
	switch p {
	case TOdbcTableType_MYSQL:
		return "MYSQL"
	case TOdbcTableType_ORACLE:
		return "ORACLE"
	case TOdbcTableType_POSTGRESQL:
		return "POSTGRESQL"
	case TOdbcTableType_SQLSERVER:
		return "SQLSERVER"
	case TOdbcTableType_REDIS:
		return "REDIS"
	case TOdbcTableType_MONGODB:
		return "MONGODB"
	case TOdbcTableType_CLICKHOUSE:
		return "CLICKHOUSE"
	case TOdbcTableType_SAP_HANA:
		return "SAP_HANA"
	case TOdbcTableType_TRINO:
		return "TRINO"
	case TOdbcTableType_PRESTO:
		return "PRESTO"
	case TOdbcTableType_OCEANBASE:
		return "OCEANBASE"
	case TOdbcTableType_OCEANBASE_ORACLE:
		return "OCEANBASE_ORACLE"
	case TOdbcTableType_NEBULA:
		return "NEBULA"
	case TOdbcTableType_DB2:
		return "DB2"
	}
	return "<UNSET>"
}

func TOdbcTableTypeFromString(s string) (TOdbcTableType, error) {
	switch s {
	case "MYSQL":
		return TOdbcTableType_MYSQL, nil
	case "ORACLE":
		return TOdbcTableType_ORACLE, nil
	case "POSTGRESQL":
		return TOdbcTableType_POSTGRESQL, nil
	case "SQLSERVER":
		return TOdbcTableType_SQLSERVER, nil
	case "REDIS":
		return TOdbcTableType_REDIS, nil
	case "MONGODB":
		return TOdbcTableType_MONGODB, nil
	case "CLICKHOUSE":
		return TOdbcTableType_CLICKHOUSE, nil
	case "SAP_HANA":
		return TOdbcTableType_SAP_HANA, nil
	case "TRINO":
		return TOdbcTableType_TRINO, nil
	case "PRESTO":
		return TOdbcTableType_PRESTO, nil
	case "OCEANBASE":
		return TOdbcTableType_OCEANBASE, nil
	case "OCEANBASE_ORACLE":
		return TOdbcTableType_OCEANBASE_ORACLE, nil
	case "NEBULA":
		return TOdbcTableType_NEBULA, nil
	case "DB2":
		return TOdbcTableType_DB2, nil
	}
	return TOdbcTableType(0), fmt.Errorf("not a valid TOdbcTableType string")
}

func TOdbcTableTypePtr(v TOdbcTableType) *TOdbcTableType { return &v }
func (p *TOdbcTableType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TOdbcTableType(result.Int64)
	return
}

func (p *TOdbcTableType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TLoadJobState int64

const (
	TLoadJobState_PENDING   TLoadJobState = 0
	TLoadJobState_ETL       TLoadJobState = 1
	TLoadJobState_LOADING   TLoadJobState = 2
	TLoadJobState_FINISHED  TLoadJobState = 3
	TLoadJobState_CANCELLED TLoadJobState = 4
)

func (p TLoadJobState) String() string {
	switch p {
	case TLoadJobState_PENDING:
		return "PENDING"
	case TLoadJobState_ETL:
		return "ETL"
	case TLoadJobState_LOADING:
		return "LOADING"
	case TLoadJobState_FINISHED:
		return "FINISHED"
	case TLoadJobState_CANCELLED:
		return "CANCELLED"
	}
	return "<UNSET>"
}

func TLoadJobStateFromString(s string) (TLoadJobState, error) {
	switch s {
	case "PENDING":
		return TLoadJobState_PENDING, nil
	case "ETL":
		return TLoadJobState_ETL, nil
	case "LOADING":
		return TLoadJobState_LOADING, nil
	case "FINISHED":
		return TLoadJobState_FINISHED, nil
	case "CANCELLED":
		return TLoadJobState_CANCELLED, nil
	}
	return TLoadJobState(0), fmt.Errorf("not a valid TLoadJobState string")
}

func TLoadJobStatePtr(v TLoadJobState) *TLoadJobState { return &v }
func (p *TLoadJobState) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TLoadJobState(result.Int64)
	return
}

func (p *TLoadJobState) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TEtlState int64

const (
	TEtlState_RUNNING   TEtlState = 0
	TEtlState_FINISHED  TEtlState = 1
	TEtlState_CANCELLED TEtlState = 2
	TEtlState_UNKNOWN   TEtlState = 3
)

func (p TEtlState) String() string {
	switch p {
	case TEtlState_RUNNING:
		return "RUNNING"
	case TEtlState_FINISHED:
		return "FINISHED"
	case TEtlState_CANCELLED:
		return "CANCELLED"
	case TEtlState_UNKNOWN:
		return "UNKNOWN"
	}
	return "<UNSET>"
}

func TEtlStateFromString(s string) (TEtlState, error) {
	switch s {
	case "RUNNING":
		return TEtlState_RUNNING, nil
	case "FINISHED":
		return TEtlState_FINISHED, nil
	case "CANCELLED":
		return TEtlState_CANCELLED, nil
	case "UNKNOWN":
		return TEtlState_UNKNOWN, nil
	}
	return TEtlState(0), fmt.Errorf("not a valid TEtlState string")
}

func TEtlStatePtr(v TEtlState) *TEtlState { return &v }
func (p *TEtlState) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TEtlState(result.Int64)
	return
}

func (p *TEtlState) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TTableType int64

const (
	TTableType_MYSQL_TABLE           TTableType = 0
	TTableType_OLAP_TABLE            TTableType = 1
	TTableType_SCHEMA_TABLE          TTableType = 2
	TTableType_KUDU_TABLE            TTableType = 3
	TTableType_BROKER_TABLE          TTableType = 4
	TTableType_ES_TABLE              TTableType = 5
	TTableType_ODBC_TABLE            TTableType = 6
	TTableType_HIVE_TABLE            TTableType = 7
	TTableType_ICEBERG_TABLE         TTableType = 8
	TTableType_HUDI_TABLE            TTableType = 9
	TTableType_JDBC_TABLE            TTableType = 10
	TTableType_TEST_EXTERNAL_TABLE   TTableType = 11
	TTableType_MAX_COMPUTE_TABLE     TTableType = 12
	TTableType_LAKESOUL_TABLE        TTableType = 13
	TTableType_TRINO_CONNECTOR_TABLE TTableType = 14
)

func (p TTableType) String() string {
	switch p {
	case TTableType_MYSQL_TABLE:
		return "MYSQL_TABLE"
	case TTableType_OLAP_TABLE:
		return "OLAP_TABLE"
	case TTableType_SCHEMA_TABLE:
		return "SCHEMA_TABLE"
	case TTableType_KUDU_TABLE:
		return "KUDU_TABLE"
	case TTableType_BROKER_TABLE:
		return "BROKER_TABLE"
	case TTableType_ES_TABLE:
		return "ES_TABLE"
	case TTableType_ODBC_TABLE:
		return "ODBC_TABLE"
	case TTableType_HIVE_TABLE:
		return "HIVE_TABLE"
	case TTableType_ICEBERG_TABLE:
		return "ICEBERG_TABLE"
	case TTableType_HUDI_TABLE:
		return "HUDI_TABLE"
	case TTableType_JDBC_TABLE:
		return "JDBC_TABLE"
	case TTableType_TEST_EXTERNAL_TABLE:
		return "TEST_EXTERNAL_TABLE"
	case TTableType_MAX_COMPUTE_TABLE:
		return "MAX_COMPUTE_TABLE"
	case TTableType_LAKESOUL_TABLE:
		return "LAKESOUL_TABLE"
	case TTableType_TRINO_CONNECTOR_TABLE:
		return "TRINO_CONNECTOR_TABLE"
	}
	return "<UNSET>"
}

func TTableTypeFromString(s string) (TTableType, error) {
	switch s {
	case "MYSQL_TABLE":
		return TTableType_MYSQL_TABLE, nil
	case "OLAP_TABLE":
		return TTableType_OLAP_TABLE, nil
	case "SCHEMA_TABLE":
		return TTableType_SCHEMA_TABLE, nil
	case "KUDU_TABLE":
		return TTableType_KUDU_TABLE, nil
	case "BROKER_TABLE":
		return TTableType_BROKER_TABLE, nil
	case "ES_TABLE":
		return TTableType_ES_TABLE, nil
	case "ODBC_TABLE":
		return TTableType_ODBC_TABLE, nil
	case "HIVE_TABLE":
		return TTableType_HIVE_TABLE, nil
	case "ICEBERG_TABLE":
		return TTableType_ICEBERG_TABLE, nil
	case "HUDI_TABLE":
		return TTableType_HUDI_TABLE, nil
	case "JDBC_TABLE":
		return TTableType_JDBC_TABLE, nil
	case "TEST_EXTERNAL_TABLE":
		return TTableType_TEST_EXTERNAL_TABLE, nil
	case "MAX_COMPUTE_TABLE":
		return TTableType_MAX_COMPUTE_TABLE, nil
	case "LAKESOUL_TABLE":
		return TTableType_LAKESOUL_TABLE, nil
	case "TRINO_CONNECTOR_TABLE":
		return TTableType_TRINO_CONNECTOR_TABLE, nil
	}
	return TTableType(0), fmt.Errorf("not a valid TTableType string")
}

func TTableTypePtr(v TTableType) *TTableType { return &v }
func (p *TTableType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TTableType(result.Int64)
	return
}

func (p *TTableType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TKeysType int64

const (
	TKeysType_PRIMARY_KEYS TKeysType = 0
	TKeysType_DUP_KEYS     TKeysType = 1
	TKeysType_UNIQUE_KEYS  TKeysType = 2
	TKeysType_AGG_KEYS     TKeysType = 3
)

func (p TKeysType) String() string {
	switch p {
	case TKeysType_PRIMARY_KEYS:
		return "PRIMARY_KEYS"
	case TKeysType_DUP_KEYS:
		return "DUP_KEYS"
	case TKeysType_UNIQUE_KEYS:
		return "UNIQUE_KEYS"
	case TKeysType_AGG_KEYS:
		return "AGG_KEYS"
	}
	return "<UNSET>"
}

func TKeysTypeFromString(s string) (TKeysType, error) {
	switch s {
	case "PRIMARY_KEYS":
		return TKeysType_PRIMARY_KEYS, nil
	case "DUP_KEYS":
		return TKeysType_DUP_KEYS, nil
	case "UNIQUE_KEYS":
		return TKeysType_UNIQUE_KEYS, nil
	case "AGG_KEYS":
		return TKeysType_AGG_KEYS, nil
	}
	return TKeysType(0), fmt.Errorf("not a valid TKeysType string")
}

func TKeysTypePtr(v TKeysType) *TKeysType { return &v }
func (p *TKeysType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TKeysType(result.Int64)
	return
}

func (p *TKeysType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TPriority int64

const (
	TPriority_NORMAL TPriority = 0
	TPriority_HIGH   TPriority = 1
)

func (p TPriority) String() string {
	switch p {
	case TPriority_NORMAL:
		return "NORMAL"
	case TPriority_HIGH:
		return "HIGH"
	}
	return "<UNSET>"
}

func TPriorityFromString(s string) (TPriority, error) {
	switch s {
	case "NORMAL":
		return TPriority_NORMAL, nil
	case "HIGH":
		return TPriority_HIGH, nil
	}
	return TPriority(0), fmt.Errorf("not a valid TPriority string")
}

func TPriorityPtr(v TPriority) *TPriority { return &v }
func (p *TPriority) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TPriority(result.Int64)
	return
}

func (p *TPriority) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TExportState int64

const (
	TExportState_RUNNING   TExportState = 0
	TExportState_FINISHED  TExportState = 1
	TExportState_CANCELLED TExportState = 2
	TExportState_UNKNOWN   TExportState = 3
)

func (p TExportState) String() string {
	switch p {
	case TExportState_RUNNING:
		return "RUNNING"
	case TExportState_FINISHED:
		return "FINISHED"
	case TExportState_CANCELLED:
		return "CANCELLED"
	case TExportState_UNKNOWN:
		return "UNKNOWN"
	}
	return "<UNSET>"
}

func TExportStateFromString(s string) (TExportState, error) {
	switch s {
	case "RUNNING":
		return TExportState_RUNNING, nil
	case "FINISHED":
		return TExportState_FINISHED, nil
	case "CANCELLED":
		return TExportState_CANCELLED, nil
	case "UNKNOWN":
		return TExportState_UNKNOWN, nil
	}
	return TExportState(0), fmt.Errorf("not a valid TExportState string")
}

func TExportStatePtr(v TExportState) *TExportState { return &v }
func (p *TExportState) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TExportState(result.Int64)
	return
}

func (p *TExportState) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TFileType int64

const (
	TFileType_FILE_LOCAL  TFileType = 0
	TFileType_FILE_BROKER TFileType = 1
	TFileType_FILE_STREAM TFileType = 2
	TFileType_FILE_S3     TFileType = 3
	TFileType_FILE_HDFS   TFileType = 4
	TFileType_FILE_NET    TFileType = 5
)

func (p TFileType) String() string {
	switch p {
	case TFileType_FILE_LOCAL:
		return "FILE_LOCAL"
	case TFileType_FILE_BROKER:
		return "FILE_BROKER"
	case TFileType_FILE_STREAM:
		return "FILE_STREAM"
	case TFileType_FILE_S3:
		return "FILE_S3"
	case TFileType_FILE_HDFS:
		return "FILE_HDFS"
	case TFileType_FILE_NET:
		return "FILE_NET"
	}
	return "<UNSET>"
}

func TFileTypeFromString(s string) (TFileType, error) {
	switch s {
	case "FILE_LOCAL":
		return TFileType_FILE_LOCAL, nil
	case "FILE_BROKER":
		return TFileType_FILE_BROKER, nil
	case "FILE_STREAM":
		return TFileType_FILE_STREAM, nil
	case "FILE_S3":
		return TFileType_FILE_S3, nil
	case "FILE_HDFS":
		return TFileType_FILE_HDFS, nil
	case "FILE_NET":
		return TFileType_FILE_NET, nil
	}
	return TFileType(0), fmt.Errorf("not a valid TFileType string")
}

func TFileTypePtr(v TFileType) *TFileType { return &v }
func (p *TFileType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TFileType(result.Int64)
	return
}

func (p *TFileType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TLoadType int64

const (
	TLoadType_MANUL_LOAD   TLoadType = 0
	TLoadType_ROUTINE_LOAD TLoadType = 1
	TLoadType_MINI_LOAD    TLoadType = 2
)

func (p TLoadType) String() string {
	switch p {
	case TLoadType_MANUL_LOAD:
		return "MANUL_LOAD"
	case TLoadType_ROUTINE_LOAD:
		return "ROUTINE_LOAD"
	case TLoadType_MINI_LOAD:
		return "MINI_LOAD"
	}
	return "<UNSET>"
}

func TLoadTypeFromString(s string) (TLoadType, error) {
	switch s {
	case "MANUL_LOAD":
		return TLoadType_MANUL_LOAD, nil
	case "ROUTINE_LOAD":
		return TLoadType_ROUTINE_LOAD, nil
	case "MINI_LOAD":
		return TLoadType_MINI_LOAD, nil
	}
	return TLoadType(0), fmt.Errorf("not a valid TLoadType string")
}

func TLoadTypePtr(v TLoadType) *TLoadType { return &v }
func (p *TLoadType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TLoadType(result.Int64)
	return
}

func (p *TLoadType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TLoadSourceType int64

const (
	TLoadSourceType_RAW         TLoadSourceType = 0
	TLoadSourceType_KAFKA       TLoadSourceType = 1
	TLoadSourceType_MULTI_TABLE TLoadSourceType = 2
)

func (p TLoadSourceType) String() string {
	switch p {
	case TLoadSourceType_RAW:
		return "RAW"
	case TLoadSourceType_KAFKA:
		return "KAFKA"
	case TLoadSourceType_MULTI_TABLE:
		return "MULTI_TABLE"
	}
	return "<UNSET>"
}

func TLoadSourceTypeFromString(s string) (TLoadSourceType, error) {
	switch s {
	case "RAW":
		return TLoadSourceType_RAW, nil
	case "KAFKA":
		return TLoadSourceType_KAFKA, nil
	case "MULTI_TABLE":
		return TLoadSourceType_MULTI_TABLE, nil
	}
	return TLoadSourceType(0), fmt.Errorf("not a valid TLoadSourceType string")
}

func TLoadSourceTypePtr(v TLoadSourceType) *TLoadSourceType { return &v }
func (p *TLoadSourceType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TLoadSourceType(result.Int64)
	return
}

func (p *TLoadSourceType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TMergeType int64

const (
	TMergeType_APPEND TMergeType = 0
	TMergeType_MERGE  TMergeType = 1
	TMergeType_DELETE TMergeType = 2
)

func (p TMergeType) String() string {
	switch p {
	case TMergeType_APPEND:
		return "APPEND"
	case TMergeType_MERGE:
		return "MERGE"
	case TMergeType_DELETE:
		return "DELETE"
	}
	return "<UNSET>"
}

func TMergeTypeFromString(s string) (TMergeType, error) {
	switch s {
	case "APPEND":
		return TMergeType_APPEND, nil
	case "MERGE":
		return TMergeType_MERGE, nil
	case "DELETE":
		return TMergeType_DELETE, nil
	}
	return TMergeType(0), fmt.Errorf("not a valid TMergeType string")
}

func TMergeTypePtr(v TMergeType) *TMergeType { return &v }
func (p *TMergeType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TMergeType(result.Int64)
	return
}

func (p *TMergeType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TSortType int64

const (
	TSortType_LEXICAL TSortType = 0
	TSortType_ZORDER  TSortType = 1
)

func (p TSortType) String() string {
	switch p {
	case TSortType_LEXICAL:
		return "LEXICAL"
	case TSortType_ZORDER:
		return "ZORDER"
	}
	return "<UNSET>"
}

func TSortTypeFromString(s string) (TSortType, error) {
	switch s {
	case "LEXICAL":
		return TSortType_LEXICAL, nil
	case "ZORDER":
		return TSortType_ZORDER, nil
	}
	return TSortType(0), fmt.Errorf("not a valid TSortType string")
}

func TSortTypePtr(v TSortType) *TSortType { return &v }
func (p *TSortType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TSortType(result.Int64)
	return
}

func (p *TSortType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TMetadataType int64

const (
	TMetadataType_ICEBERG               TMetadataType = 0
	TMetadataType_BACKENDS              TMetadataType = 1
	TMetadataType_FRONTENDS             TMetadataType = 2
	TMetadataType_CATALOGS              TMetadataType = 3
	TMetadataType_FRONTENDS_DISKS       TMetadataType = 4
	TMetadataType_MATERIALIZED_VIEWS    TMetadataType = 5
	TMetadataType_JOBS                  TMetadataType = 6
	TMetadataType_TASKS                 TMetadataType = 7
	TMetadataType_WORKLOAD_SCHED_POLICY TMetadataType = 8
	TMetadataType_PARTITIONS            TMetadataType = 9
)

func (p TMetadataType) String() string {
	switch p {
	case TMetadataType_ICEBERG:
		return "ICEBERG"
	case TMetadataType_BACKENDS:
		return "BACKENDS"
	case TMetadataType_FRONTENDS:
		return "FRONTENDS"
	case TMetadataType_CATALOGS:
		return "CATALOGS"
	case TMetadataType_FRONTENDS_DISKS:
		return "FRONTENDS_DISKS"
	case TMetadataType_MATERIALIZED_VIEWS:
		return "MATERIALIZED_VIEWS"
	case TMetadataType_JOBS:
		return "JOBS"
	case TMetadataType_TASKS:
		return "TASKS"
	case TMetadataType_WORKLOAD_SCHED_POLICY:
		return "WORKLOAD_SCHED_POLICY"
	case TMetadataType_PARTITIONS:
		return "PARTITIONS"
	}
	return "<UNSET>"
}

func TMetadataTypeFromString(s string) (TMetadataType, error) {
	switch s {
	case "ICEBERG":
		return TMetadataType_ICEBERG, nil
	case "BACKENDS":
		return TMetadataType_BACKENDS, nil
	case "FRONTENDS":
		return TMetadataType_FRONTENDS, nil
	case "CATALOGS":
		return TMetadataType_CATALOGS, nil
	case "FRONTENDS_DISKS":
		return TMetadataType_FRONTENDS_DISKS, nil
	case "MATERIALIZED_VIEWS":
		return TMetadataType_MATERIALIZED_VIEWS, nil
	case "JOBS":
		return TMetadataType_JOBS, nil
	case "TASKS":
		return TMetadataType_TASKS, nil
	case "WORKLOAD_SCHED_POLICY":
		return TMetadataType_WORKLOAD_SCHED_POLICY, nil
	case "PARTITIONS":
		return TMetadataType_PARTITIONS, nil
	}
	return TMetadataType(0), fmt.Errorf("not a valid TMetadataType string")
}

func TMetadataTypePtr(v TMetadataType) *TMetadataType { return &v }
func (p *TMetadataType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TMetadataType(result.Int64)
	return
}

func (p *TMetadataType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TIcebergQueryType int64

const (
	TIcebergQueryType_SNAPSHOTS TIcebergQueryType = 0
)

func (p TIcebergQueryType) String() string {
	switch p {
	case TIcebergQueryType_SNAPSHOTS:
		return "SNAPSHOTS"
	}
	return "<UNSET>"
}

func TIcebergQueryTypeFromString(s string) (TIcebergQueryType, error) {
	switch s {
	case "SNAPSHOTS":
		return TIcebergQueryType_SNAPSHOTS, nil
	}
	return TIcebergQueryType(0), fmt.Errorf("not a valid TIcebergQueryType string")
}

func TIcebergQueryTypePtr(v TIcebergQueryType) *TIcebergQueryType { return &v }
func (p *TIcebergQueryType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TIcebergQueryType(result.Int64)
	return
}

func (p *TIcebergQueryType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TTimestamp = int64

type TPlanNodeId = int32

type TTupleId = int32

type TSlotId = int32

type TTableId = int64

type TTabletId = int64

type TReplicaId = int64

type TVersion = int64

type TVersionHash = int64

type TSchemaHash = int32

type TPort = int32

type TCount = int64

type TSize = int64

type TClusterId = int32

type TEpoch = int64

type TTransactionId = int64

type TPartitionId = int64

type TScalarType struct {
	Type      TPrimitiveType `thrift:"type,1,required" frugal:"1,required,TPrimitiveType" json:"type"`
	Len       *int32         `thrift:"len,2,optional" frugal:"2,optional,i32" json:"len,omitempty"`
	Precision *int32         `thrift:"precision,3,optional" frugal:"3,optional,i32" json:"precision,omitempty"`
	Scale     *int32         `thrift:"scale,4,optional" frugal:"4,optional,i32" json:"scale,omitempty"`
}

func NewTScalarType() *TScalarType {
	return &TScalarType{}
}

func (p *TScalarType) InitDefault() {
}

func (p *TScalarType) GetType() (v TPrimitiveType) {
	return p.Type
}

var TScalarType_Len_DEFAULT int32

func (p *TScalarType) GetLen() (v int32) {
	if !p.IsSetLen() {
		return TScalarType_Len_DEFAULT
	}
	return *p.Len
}

var TScalarType_Precision_DEFAULT int32

func (p *TScalarType) GetPrecision() (v int32) {
	if !p.IsSetPrecision() {
		return TScalarType_Precision_DEFAULT
	}
	return *p.Precision
}

var TScalarType_Scale_DEFAULT int32

func (p *TScalarType) GetScale() (v int32) {
	if !p.IsSetScale() {
		return TScalarType_Scale_DEFAULT
	}
	return *p.Scale
}
func (p *TScalarType) SetType(val TPrimitiveType) {
	p.Type = val
}
func (p *TScalarType) SetLen(val *int32) {
	p.Len = val
}
func (p *TScalarType) SetPrecision(val *int32) {
	p.Precision = val
}
func (p *TScalarType) SetScale(val *int32) {
	p.Scale = val
}

var fieldIDToName_TScalarType = map[int16]string{
	1: "type",
	2: "len",
	3: "precision",
	4: "scale",
}

func (p *TScalarType) IsSetLen() bool {
	return p.Len != nil
}

func (p *TScalarType) IsSetPrecision() bool {
	return p.Precision != nil
}

func (p *TScalarType) IsSetScale() bool {
	return p.Scale != nil
}

func (p *TScalarType) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TScalarType[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TScalarType[fieldId]))
}

func (p *TScalarType) ReadField1(iprot thrift.TProtocol) error {

	var _field TPrimitiveType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TPrimitiveType(v)
	}
	p.Type = _field
	return nil
}
func (p *TScalarType) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Len = _field
	return nil
}
func (p *TScalarType) ReadField3(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Precision = _field
	return nil
}
func (p *TScalarType) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Scale = _field
	return nil
}

func (p *TScalarType) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TScalarType"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TScalarType) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TScalarType) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLen() {
		if err = oprot.WriteFieldBegin("len", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Len); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TScalarType) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrecision() {
		if err = oprot.WriteFieldBegin("precision", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Precision); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TScalarType) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetScale() {
		if err = oprot.WriteFieldBegin("scale", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Scale); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TScalarType) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScalarType(%+v)", *p)

}

func (p *TScalarType) DeepEqual(ano *TScalarType) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.Len) {
		return false
	}
	if !p.Field3DeepEqual(ano.Precision) {
		return false
	}
	if !p.Field4DeepEqual(ano.Scale) {
		return false
	}
	return true
}

func (p *TScalarType) Field1DeepEqual(src TPrimitiveType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *TScalarType) Field2DeepEqual(src *int32) bool {

	if p.Len == src {
		return true
	} else if p.Len == nil || src == nil {
		return false
	}
	if *p.Len != *src {
		return false
	}
	return true
}
func (p *TScalarType) Field3DeepEqual(src *int32) bool {

	if p.Precision == src {
		return true
	} else if p.Precision == nil || src == nil {
		return false
	}
	if *p.Precision != *src {
		return false
	}
	return true
}
func (p *TScalarType) Field4DeepEqual(src *int32) bool {

	if p.Scale == src {
		return true
	} else if p.Scale == nil || src == nil {
		return false
	}
	if *p.Scale != *src {
		return false
	}
	return true
}

type TStructField struct {
	Name         string  `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	Comment      *string `thrift:"comment,2,optional" frugal:"2,optional,string" json:"comment,omitempty"`
	ContainsNull *bool   `thrift:"contains_null,3,optional" frugal:"3,optional,bool" json:"contains_null,omitempty"`
}

func NewTStructField() *TStructField {
	return &TStructField{}
}

func (p *TStructField) InitDefault() {
}

func (p *TStructField) GetName() (v string) {
	return p.Name
}

var TStructField_Comment_DEFAULT string

func (p *TStructField) GetComment() (v string) {
	if !p.IsSetComment() {
		return TStructField_Comment_DEFAULT
	}
	return *p.Comment
}

var TStructField_ContainsNull_DEFAULT bool

func (p *TStructField) GetContainsNull() (v bool) {
	if !p.IsSetContainsNull() {
		return TStructField_ContainsNull_DEFAULT
	}
	return *p.ContainsNull
}
func (p *TStructField) SetName(val string) {
	p.Name = val
}
func (p *TStructField) SetComment(val *string) {
	p.Comment = val
}
func (p *TStructField) SetContainsNull(val *bool) {
	p.ContainsNull = val
}

var fieldIDToName_TStructField = map[int16]string{
	1: "name",
	2: "comment",
	3: "contains_null",
}

func (p *TStructField) IsSetComment() bool {
	return p.Comment != nil
}

func (p *TStructField) IsSetContainsNull() bool {
	return p.ContainsNull != nil
}

func (p *TStructField) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TStructField[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TStructField[fieldId]))
}

func (p *TStructField) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *TStructField) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Comment = _field
	return nil
}
func (p *TStructField) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ContainsNull = _field
	return nil
}

func (p *TStructField) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TStructField"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TStructField) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TStructField) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetComment() {
		if err = oprot.WriteFieldBegin("comment", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Comment); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TStructField) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetContainsNull() {
		if err = oprot.WriteFieldBegin("contains_null", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ContainsNull); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TStructField) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStructField(%+v)", *p)

}

func (p *TStructField) DeepEqual(ano *TStructField) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Comment) {
		return false
	}
	if !p.Field3DeepEqual(ano.ContainsNull) {
		return false
	}
	return true
}

func (p *TStructField) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *TStructField) Field2DeepEqual(src *string) bool {

	if p.Comment == src {
		return true
	} else if p.Comment == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Comment, *src) != 0 {
		return false
	}
	return true
}
func (p *TStructField) Field3DeepEqual(src *bool) bool {

	if p.ContainsNull == src {
		return true
	} else if p.ContainsNull == nil || src == nil {
		return false
	}
	if *p.ContainsNull != *src {
		return false
	}
	return true
}

type TTypeNode struct {
	Type          TTypeNodeType   `thrift:"type,1,required" frugal:"1,required,TTypeNodeType" json:"type"`
	ScalarType    *TScalarType    `thrift:"scalar_type,2,optional" frugal:"2,optional,TScalarType" json:"scalar_type,omitempty"`
	StructFields  []*TStructField `thrift:"struct_fields,3,optional" frugal:"3,optional,list<TStructField>" json:"struct_fields,omitempty"`
	ContainsNull  *bool           `thrift:"contains_null,4,optional" frugal:"4,optional,bool" json:"contains_null,omitempty"`
	ContainsNulls []bool          `thrift:"contains_nulls,5,optional" frugal:"5,optional,list<bool>" json:"contains_nulls,omitempty"`
}

func NewTTypeNode() *TTypeNode {
	return &TTypeNode{}
}

func (p *TTypeNode) InitDefault() {
}

func (p *TTypeNode) GetType() (v TTypeNodeType) {
	return p.Type
}

var TTypeNode_ScalarType_DEFAULT *TScalarType

func (p *TTypeNode) GetScalarType() (v *TScalarType) {
	if !p.IsSetScalarType() {
		return TTypeNode_ScalarType_DEFAULT
	}
	return p.ScalarType
}

var TTypeNode_StructFields_DEFAULT []*TStructField

func (p *TTypeNode) GetStructFields() (v []*TStructField) {
	if !p.IsSetStructFields() {
		return TTypeNode_StructFields_DEFAULT
	}
	return p.StructFields
}

var TTypeNode_ContainsNull_DEFAULT bool

func (p *TTypeNode) GetContainsNull() (v bool) {
	if !p.IsSetContainsNull() {
		return TTypeNode_ContainsNull_DEFAULT
	}
	return *p.ContainsNull
}

var TTypeNode_ContainsNulls_DEFAULT []bool

func (p *TTypeNode) GetContainsNulls() (v []bool) {
	if !p.IsSetContainsNulls() {
		return TTypeNode_ContainsNulls_DEFAULT
	}
	return p.ContainsNulls
}
func (p *TTypeNode) SetType(val TTypeNodeType) {
	p.Type = val
}
func (p *TTypeNode) SetScalarType(val *TScalarType) {
	p.ScalarType = val
}
func (p *TTypeNode) SetStructFields(val []*TStructField) {
	p.StructFields = val
}
func (p *TTypeNode) SetContainsNull(val *bool) {
	p.ContainsNull = val
}
func (p *TTypeNode) SetContainsNulls(val []bool) {
	p.ContainsNulls = val
}

var fieldIDToName_TTypeNode = map[int16]string{
	1: "type",
	2: "scalar_type",
	3: "struct_fields",
	4: "contains_null",
	5: "contains_nulls",
}

func (p *TTypeNode) IsSetScalarType() bool {
	return p.ScalarType != nil
}

func (p *TTypeNode) IsSetStructFields() bool {
	return p.StructFields != nil
}

func (p *TTypeNode) IsSetContainsNull() bool {
	return p.ContainsNull != nil
}

func (p *TTypeNode) IsSetContainsNulls() bool {
	return p.ContainsNulls != nil
}

func (p *TTypeNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTypeNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTypeNode[fieldId]))
}

func (p *TTypeNode) ReadField1(iprot thrift.TProtocol) error {

	var _field TTypeNodeType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TTypeNodeType(v)
	}
	p.Type = _field
	return nil
}
func (p *TTypeNode) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTScalarType()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ScalarType = _field
	return nil
}
func (p *TTypeNode) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TStructField, 0, size)
	values := make([]TStructField, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.StructFields = _field
	return nil
}
func (p *TTypeNode) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ContainsNull = _field
	return nil
}
func (p *TTypeNode) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]bool, 0, size)
	for i := 0; i < size; i++ {

		var _elem bool
		if v, err := iprot.ReadBool(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ContainsNulls = _field
	return nil
}

func (p *TTypeNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTypeNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTypeNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTypeNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetScalarType() {
		if err = oprot.WriteFieldBegin("scalar_type", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ScalarType.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTypeNode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStructFields() {
		if err = oprot.WriteFieldBegin("struct_fields", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StructFields)); err != nil {
			return err
		}
		for _, v := range p.StructFields {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTypeNode) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetContainsNull() {
		if err = oprot.WriteFieldBegin("contains_null", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ContainsNull); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TTypeNode) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetContainsNulls() {
		if err = oprot.WriteFieldBegin("contains_nulls", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.BOOL, len(p.ContainsNulls)); err != nil {
			return err
		}
		for _, v := range p.ContainsNulls {
			if err := oprot.WriteBool(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TTypeNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTypeNode(%+v)", *p)

}

func (p *TTypeNode) DeepEqual(ano *TTypeNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.ScalarType) {
		return false
	}
	if !p.Field3DeepEqual(ano.StructFields) {
		return false
	}
	if !p.Field4DeepEqual(ano.ContainsNull) {
		return false
	}
	if !p.Field5DeepEqual(ano.ContainsNulls) {
		return false
	}
	return true
}

func (p *TTypeNode) Field1DeepEqual(src TTypeNodeType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *TTypeNode) Field2DeepEqual(src *TScalarType) bool {

	if !p.ScalarType.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTypeNode) Field3DeepEqual(src []*TStructField) bool {

	if len(p.StructFields) != len(src) {
		return false
	}
	for i, v := range p.StructFields {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TTypeNode) Field4DeepEqual(src *bool) bool {

	if p.ContainsNull == src {
		return true
	} else if p.ContainsNull == nil || src == nil {
		return false
	}
	if *p.ContainsNull != *src {
		return false
	}
	return true
}
func (p *TTypeNode) Field5DeepEqual(src []bool) bool {

	if len(p.ContainsNulls) != len(src) {
		return false
	}
	for i, v := range p.ContainsNulls {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type TTypeDesc struct {
	Types            []*TTypeNode `thrift:"types,1" frugal:"1,default,list<TTypeNode>" json:"types"`
	IsNullable       *bool        `thrift:"is_nullable,2,optional" frugal:"2,optional,bool" json:"is_nullable,omitempty"`
	ByteSize         *int64       `thrift:"byte_size,3,optional" frugal:"3,optional,i64" json:"byte_size,omitempty"`
	SubTypes         []*TTypeDesc `thrift:"sub_types,4,optional" frugal:"4,optional,list<TTypeDesc>" json:"sub_types,omitempty"`
	ResultIsNullable *bool        `thrift:"result_is_nullable,5,optional" frugal:"5,optional,bool" json:"result_is_nullable,omitempty"`
	FunctionName     *string      `thrift:"function_name,6,optional" frugal:"6,optional,string" json:"function_name,omitempty"`
	BeExecVersion    *int32       `thrift:"be_exec_version,7,optional" frugal:"7,optional,i32" json:"be_exec_version,omitempty"`
}

func NewTTypeDesc() *TTypeDesc {
	return &TTypeDesc{}
}

func (p *TTypeDesc) InitDefault() {
}

func (p *TTypeDesc) GetTypes() (v []*TTypeNode) {
	return p.Types
}

var TTypeDesc_IsNullable_DEFAULT bool

func (p *TTypeDesc) GetIsNullable() (v bool) {
	if !p.IsSetIsNullable() {
		return TTypeDesc_IsNullable_DEFAULT
	}
	return *p.IsNullable
}

var TTypeDesc_ByteSize_DEFAULT int64

func (p *TTypeDesc) GetByteSize() (v int64) {
	if !p.IsSetByteSize() {
		return TTypeDesc_ByteSize_DEFAULT
	}
	return *p.ByteSize
}

var TTypeDesc_SubTypes_DEFAULT []*TTypeDesc

func (p *TTypeDesc) GetSubTypes() (v []*TTypeDesc) {
	if !p.IsSetSubTypes() {
		return TTypeDesc_SubTypes_DEFAULT
	}
	return p.SubTypes
}

var TTypeDesc_ResultIsNullable_DEFAULT bool

func (p *TTypeDesc) GetResultIsNullable() (v bool) {
	if !p.IsSetResultIsNullable() {
		return TTypeDesc_ResultIsNullable_DEFAULT
	}
	return *p.ResultIsNullable
}

var TTypeDesc_FunctionName_DEFAULT string

func (p *TTypeDesc) GetFunctionName() (v string) {
	if !p.IsSetFunctionName() {
		return TTypeDesc_FunctionName_DEFAULT
	}
	return *p.FunctionName
}

var TTypeDesc_BeExecVersion_DEFAULT int32

func (p *TTypeDesc) GetBeExecVersion() (v int32) {
	if !p.IsSetBeExecVersion() {
		return TTypeDesc_BeExecVersion_DEFAULT
	}
	return *p.BeExecVersion
}
func (p *TTypeDesc) SetTypes(val []*TTypeNode) {
	p.Types = val
}
func (p *TTypeDesc) SetIsNullable(val *bool) {
	p.IsNullable = val
}
func (p *TTypeDesc) SetByteSize(val *int64) {
	p.ByteSize = val
}
func (p *TTypeDesc) SetSubTypes(val []*TTypeDesc) {
	p.SubTypes = val
}
func (p *TTypeDesc) SetResultIsNullable(val *bool) {
	p.ResultIsNullable = val
}
func (p *TTypeDesc) SetFunctionName(val *string) {
	p.FunctionName = val
}
func (p *TTypeDesc) SetBeExecVersion(val *int32) {
	p.BeExecVersion = val
}

var fieldIDToName_TTypeDesc = map[int16]string{
	1: "types",
	2: "is_nullable",
	3: "byte_size",
	4: "sub_types",
	5: "result_is_nullable",
	6: "function_name",
	7: "be_exec_version",
}

func (p *TTypeDesc) IsSetIsNullable() bool {
	return p.IsNullable != nil
}

func (p *TTypeDesc) IsSetByteSize() bool {
	return p.ByteSize != nil
}

func (p *TTypeDesc) IsSetSubTypes() bool {
	return p.SubTypes != nil
}

func (p *TTypeDesc) IsSetResultIsNullable() bool {
	return p.ResultIsNullable != nil
}

func (p *TTypeDesc) IsSetFunctionName() bool {
	return p.FunctionName != nil
}

func (p *TTypeDesc) IsSetBeExecVersion() bool {
	return p.BeExecVersion != nil
}

func (p *TTypeDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTypeDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTypeDesc) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTypeNode, 0, size)
	values := make([]TTypeNode, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Types = _field
	return nil
}
func (p *TTypeDesc) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsNullable = _field
	return nil
}
func (p *TTypeDesc) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ByteSize = _field
	return nil
}
func (p *TTypeDesc) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTypeDesc, 0, size)
	values := make([]TTypeDesc, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SubTypes = _field
	return nil
}
func (p *TTypeDesc) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResultIsNullable = _field
	return nil
}
func (p *TTypeDesc) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FunctionName = _field
	return nil
}
func (p *TTypeDesc) ReadField7(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BeExecVersion = _field
	return nil
}

func (p *TTypeDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTypeDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTypeDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("types", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Types)); err != nil {
		return err
	}
	for _, v := range p.Types {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTypeDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsNullable() {
		if err = oprot.WriteFieldBegin("is_nullable", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsNullable); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTypeDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetByteSize() {
		if err = oprot.WriteFieldBegin("byte_size", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ByteSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTypeDesc) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubTypes() {
		if err = oprot.WriteFieldBegin("sub_types", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SubTypes)); err != nil {
			return err
		}
		for _, v := range p.SubTypes {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TTypeDesc) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetResultIsNullable() {
		if err = oprot.WriteFieldBegin("result_is_nullable", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ResultIsNullable); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TTypeDesc) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFunctionName() {
		if err = oprot.WriteFieldBegin("function_name", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FunctionName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TTypeDesc) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetBeExecVersion() {
		if err = oprot.WriteFieldBegin("be_exec_version", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BeExecVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TTypeDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTypeDesc(%+v)", *p)

}

func (p *TTypeDesc) DeepEqual(ano *TTypeDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Types) {
		return false
	}
	if !p.Field2DeepEqual(ano.IsNullable) {
		return false
	}
	if !p.Field3DeepEqual(ano.ByteSize) {
		return false
	}
	if !p.Field4DeepEqual(ano.SubTypes) {
		return false
	}
	if !p.Field5DeepEqual(ano.ResultIsNullable) {
		return false
	}
	if !p.Field6DeepEqual(ano.FunctionName) {
		return false
	}
	if !p.Field7DeepEqual(ano.BeExecVersion) {
		return false
	}
	return true
}

func (p *TTypeDesc) Field1DeepEqual(src []*TTypeNode) bool {

	if len(p.Types) != len(src) {
		return false
	}
	for i, v := range p.Types {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TTypeDesc) Field2DeepEqual(src *bool) bool {

	if p.IsNullable == src {
		return true
	} else if p.IsNullable == nil || src == nil {
		return false
	}
	if *p.IsNullable != *src {
		return false
	}
	return true
}
func (p *TTypeDesc) Field3DeepEqual(src *int64) bool {

	if p.ByteSize == src {
		return true
	} else if p.ByteSize == nil || src == nil {
		return false
	}
	if *p.ByteSize != *src {
		return false
	}
	return true
}
func (p *TTypeDesc) Field4DeepEqual(src []*TTypeDesc) bool {

	if len(p.SubTypes) != len(src) {
		return false
	}
	for i, v := range p.SubTypes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TTypeDesc) Field5DeepEqual(src *bool) bool {

	if p.ResultIsNullable == src {
		return true
	} else if p.ResultIsNullable == nil || src == nil {
		return false
	}
	if *p.ResultIsNullable != *src {
		return false
	}
	return true
}
func (p *TTypeDesc) Field6DeepEqual(src *string) bool {

	if p.FunctionName == src {
		return true
	} else if p.FunctionName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FunctionName, *src) != 0 {
		return false
	}
	return true
}
func (p *TTypeDesc) Field7DeepEqual(src *int32) bool {

	if p.BeExecVersion == src {
		return true
	} else if p.BeExecVersion == nil || src == nil {
		return false
	}
	if *p.BeExecVersion != *src {
		return false
	}
	return true
}

type TColumnType struct {
	Type      TPrimitiveType `thrift:"type,1,required" frugal:"1,required,TPrimitiveType" json:"type"`
	Len       *int32         `thrift:"len,2,optional" frugal:"2,optional,i32" json:"len,omitempty"`
	IndexLen  *int32         `thrift:"index_len,3,optional" frugal:"3,optional,i32" json:"index_len,omitempty"`
	Precision *int32         `thrift:"precision,4,optional" frugal:"4,optional,i32" json:"precision,omitempty"`
	Scale     *int32         `thrift:"scale,5,optional" frugal:"5,optional,i32" json:"scale,omitempty"`
}

func NewTColumnType() *TColumnType {
	return &TColumnType{}
}

func (p *TColumnType) InitDefault() {
}

func (p *TColumnType) GetType() (v TPrimitiveType) {
	return p.Type
}

var TColumnType_Len_DEFAULT int32

func (p *TColumnType) GetLen() (v int32) {
	if !p.IsSetLen() {
		return TColumnType_Len_DEFAULT
	}
	return *p.Len
}

var TColumnType_IndexLen_DEFAULT int32

func (p *TColumnType) GetIndexLen() (v int32) {
	if !p.IsSetIndexLen() {
		return TColumnType_IndexLen_DEFAULT
	}
	return *p.IndexLen
}

var TColumnType_Precision_DEFAULT int32

func (p *TColumnType) GetPrecision() (v int32) {
	if !p.IsSetPrecision() {
		return TColumnType_Precision_DEFAULT
	}
	return *p.Precision
}

var TColumnType_Scale_DEFAULT int32

func (p *TColumnType) GetScale() (v int32) {
	if !p.IsSetScale() {
		return TColumnType_Scale_DEFAULT
	}
	return *p.Scale
}
func (p *TColumnType) SetType(val TPrimitiveType) {
	p.Type = val
}
func (p *TColumnType) SetLen(val *int32) {
	p.Len = val
}
func (p *TColumnType) SetIndexLen(val *int32) {
	p.IndexLen = val
}
func (p *TColumnType) SetPrecision(val *int32) {
	p.Precision = val
}
func (p *TColumnType) SetScale(val *int32) {
	p.Scale = val
}

var fieldIDToName_TColumnType = map[int16]string{
	1: "type",
	2: "len",
	3: "index_len",
	4: "precision",
	5: "scale",
}

func (p *TColumnType) IsSetLen() bool {
	return p.Len != nil
}

func (p *TColumnType) IsSetIndexLen() bool {
	return p.IndexLen != nil
}

func (p *TColumnType) IsSetPrecision() bool {
	return p.Precision != nil
}

func (p *TColumnType) IsSetScale() bool {
	return p.Scale != nil
}

func (p *TColumnType) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TColumnType[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TColumnType[fieldId]))
}

func (p *TColumnType) ReadField1(iprot thrift.TProtocol) error {

	var _field TPrimitiveType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TPrimitiveType(v)
	}
	p.Type = _field
	return nil
}
func (p *TColumnType) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Len = _field
	return nil
}
func (p *TColumnType) ReadField3(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IndexLen = _field
	return nil
}
func (p *TColumnType) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Precision = _field
	return nil
}
func (p *TColumnType) ReadField5(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Scale = _field
	return nil
}

func (p *TColumnType) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TColumnType"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TColumnType) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TColumnType) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLen() {
		if err = oprot.WriteFieldBegin("len", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Len); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TColumnType) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndexLen() {
		if err = oprot.WriteFieldBegin("index_len", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.IndexLen); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TColumnType) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrecision() {
		if err = oprot.WriteFieldBegin("precision", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Precision); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TColumnType) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetScale() {
		if err = oprot.WriteFieldBegin("scale", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Scale); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TColumnType) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumnType(%+v)", *p)

}

func (p *TColumnType) DeepEqual(ano *TColumnType) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.Len) {
		return false
	}
	if !p.Field3DeepEqual(ano.IndexLen) {
		return false
	}
	if !p.Field4DeepEqual(ano.Precision) {
		return false
	}
	if !p.Field5DeepEqual(ano.Scale) {
		return false
	}
	return true
}

func (p *TColumnType) Field1DeepEqual(src TPrimitiveType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *TColumnType) Field2DeepEqual(src *int32) bool {

	if p.Len == src {
		return true
	} else if p.Len == nil || src == nil {
		return false
	}
	if *p.Len != *src {
		return false
	}
	return true
}
func (p *TColumnType) Field3DeepEqual(src *int32) bool {

	if p.IndexLen == src {
		return true
	} else if p.IndexLen == nil || src == nil {
		return false
	}
	if *p.IndexLen != *src {
		return false
	}
	return true
}
func (p *TColumnType) Field4DeepEqual(src *int32) bool {

	if p.Precision == src {
		return true
	} else if p.Precision == nil || src == nil {
		return false
	}
	if *p.Precision != *src {
		return false
	}
	return true
}
func (p *TColumnType) Field5DeepEqual(src *int32) bool {

	if p.Scale == src {
		return true
	} else if p.Scale == nil || src == nil {
		return false
	}
	if *p.Scale != *src {
		return false
	}
	return true
}

type TNetworkAddress struct {
	Hostname string `thrift:"hostname,1,required" frugal:"1,required,string" json:"hostname"`
	Port     int32  `thrift:"port,2,required" frugal:"2,required,i32" json:"port"`
}

func NewTNetworkAddress() *TNetworkAddress {
	return &TNetworkAddress{}
}

func (p *TNetworkAddress) InitDefault() {
}

func (p *TNetworkAddress) GetHostname() (v string) {
	return p.Hostname
}

func (p *TNetworkAddress) GetPort() (v int32) {
	return p.Port
}
func (p *TNetworkAddress) SetHostname(val string) {
	p.Hostname = val
}
func (p *TNetworkAddress) SetPort(val int32) {
	p.Port = val
}

var fieldIDToName_TNetworkAddress = map[int16]string{
	1: "hostname",
	2: "port",
}

func (p *TNetworkAddress) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetHostname bool = false
	var issetPort bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetHostname = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPort = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetHostname {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPort {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TNetworkAddress[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TNetworkAddress[fieldId]))
}

func (p *TNetworkAddress) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Hostname = _field
	return nil
}
func (p *TNetworkAddress) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Port = _field
	return nil
}

func (p *TNetworkAddress) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TNetworkAddress"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TNetworkAddress) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hostname", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Hostname); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TNetworkAddress) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Port); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TNetworkAddress) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TNetworkAddress(%+v)", *p)

}

func (p *TNetworkAddress) DeepEqual(ano *TNetworkAddress) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Hostname) {
		return false
	}
	if !p.Field2DeepEqual(ano.Port) {
		return false
	}
	return true
}

func (p *TNetworkAddress) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Hostname, src) != 0 {
		return false
	}
	return true
}
func (p *TNetworkAddress) Field2DeepEqual(src int32) bool {

	if p.Port != src {
		return false
	}
	return true
}

type TUniqueId struct {
	Hi int64 `thrift:"hi,1,required" frugal:"1,required,i64" json:"hi"`
	Lo int64 `thrift:"lo,2,required" frugal:"2,required,i64" json:"lo"`
}

func NewTUniqueId() *TUniqueId {
	return &TUniqueId{}
}

func (p *TUniqueId) InitDefault() {
}

func (p *TUniqueId) GetHi() (v int64) {
	return p.Hi
}

func (p *TUniqueId) GetLo() (v int64) {
	return p.Lo
}
func (p *TUniqueId) SetHi(val int64) {
	p.Hi = val
}
func (p *TUniqueId) SetLo(val int64) {
	p.Lo = val
}

var fieldIDToName_TUniqueId = map[int16]string{
	1: "hi",
	2: "lo",
}

func (p *TUniqueId) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetHi bool = false
	var issetLo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetHi = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetLo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetHi {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetLo {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TUniqueId[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TUniqueId[fieldId]))
}

func (p *TUniqueId) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Hi = _field
	return nil
}
func (p *TUniqueId) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Lo = _field
	return nil
}

func (p *TUniqueId) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TUniqueId"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TUniqueId) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hi", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Hi); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TUniqueId) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("lo", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Lo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TUniqueId) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TUniqueId(%+v)", *p)

}

func (p *TUniqueId) DeepEqual(ano *TUniqueId) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Hi) {
		return false
	}
	if !p.Field2DeepEqual(ano.Lo) {
		return false
	}
	return true
}

func (p *TUniqueId) Field1DeepEqual(src int64) bool {

	if p.Hi != src {
		return false
	}
	return true
}
func (p *TUniqueId) Field2DeepEqual(src int64) bool {

	if p.Lo != src {
		return false
	}
	return true
}

type TFunctionName struct {
	DbName       *string `thrift:"db_name,1,optional" frugal:"1,optional,string" json:"db_name,omitempty"`
	FunctionName string  `thrift:"function_name,2,required" frugal:"2,required,string" json:"function_name"`
}

func NewTFunctionName() *TFunctionName {
	return &TFunctionName{}
}

func (p *TFunctionName) InitDefault() {
}

var TFunctionName_DbName_DEFAULT string

func (p *TFunctionName) GetDbName() (v string) {
	if !p.IsSetDbName() {
		return TFunctionName_DbName_DEFAULT
	}
	return *p.DbName
}

func (p *TFunctionName) GetFunctionName() (v string) {
	return p.FunctionName
}
func (p *TFunctionName) SetDbName(val *string) {
	p.DbName = val
}
func (p *TFunctionName) SetFunctionName(val string) {
	p.FunctionName = val
}

var fieldIDToName_TFunctionName = map[int16]string{
	1: "db_name",
	2: "function_name",
}

func (p *TFunctionName) IsSetDbName() bool {
	return p.DbName != nil
}

func (p *TFunctionName) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFunctionName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetFunctionName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFunctionName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFunctionName[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFunctionName[fieldId]))
}

func (p *TFunctionName) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbName = _field
	return nil
}
func (p *TFunctionName) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FunctionName = _field
	return nil
}

func (p *TFunctionName) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFunctionName"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFunctionName) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbName() {
		if err = oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DbName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFunctionName) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("function_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FunctionName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFunctionName) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFunctionName(%+v)", *p)

}

func (p *TFunctionName) DeepEqual(ano *TFunctionName) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DbName) {
		return false
	}
	if !p.Field2DeepEqual(ano.FunctionName) {
		return false
	}
	return true
}

func (p *TFunctionName) Field1DeepEqual(src *string) bool {

	if p.DbName == src {
		return true
	} else if p.DbName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DbName, *src) != 0 {
		return false
	}
	return true
}
func (p *TFunctionName) Field2DeepEqual(src string) bool {

	if strings.Compare(p.FunctionName, src) != 0 {
		return false
	}
	return true
}

type TScalarFunction struct {
	Symbol          string  `thrift:"symbol,1,required" frugal:"1,required,string" json:"symbol"`
	PrepareFnSymbol *string `thrift:"prepare_fn_symbol,2,optional" frugal:"2,optional,string" json:"prepare_fn_symbol,omitempty"`
	CloseFnSymbol   *string `thrift:"close_fn_symbol,3,optional" frugal:"3,optional,string" json:"close_fn_symbol,omitempty"`
}

func NewTScalarFunction() *TScalarFunction {
	return &TScalarFunction{}
}

func (p *TScalarFunction) InitDefault() {
}

func (p *TScalarFunction) GetSymbol() (v string) {
	return p.Symbol
}

var TScalarFunction_PrepareFnSymbol_DEFAULT string

func (p *TScalarFunction) GetPrepareFnSymbol() (v string) {
	if !p.IsSetPrepareFnSymbol() {
		return TScalarFunction_PrepareFnSymbol_DEFAULT
	}
	return *p.PrepareFnSymbol
}

var TScalarFunction_CloseFnSymbol_DEFAULT string

func (p *TScalarFunction) GetCloseFnSymbol() (v string) {
	if !p.IsSetCloseFnSymbol() {
		return TScalarFunction_CloseFnSymbol_DEFAULT
	}
	return *p.CloseFnSymbol
}
func (p *TScalarFunction) SetSymbol(val string) {
	p.Symbol = val
}
func (p *TScalarFunction) SetPrepareFnSymbol(val *string) {
	p.PrepareFnSymbol = val
}
func (p *TScalarFunction) SetCloseFnSymbol(val *string) {
	p.CloseFnSymbol = val
}

var fieldIDToName_TScalarFunction = map[int16]string{
	1: "symbol",
	2: "prepare_fn_symbol",
	3: "close_fn_symbol",
}

func (p *TScalarFunction) IsSetPrepareFnSymbol() bool {
	return p.PrepareFnSymbol != nil
}

func (p *TScalarFunction) IsSetCloseFnSymbol() bool {
	return p.CloseFnSymbol != nil
}

func (p *TScalarFunction) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSymbol bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetSymbol = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSymbol {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TScalarFunction[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TScalarFunction[fieldId]))
}

func (p *TScalarFunction) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Symbol = _field
	return nil
}
func (p *TScalarFunction) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PrepareFnSymbol = _field
	return nil
}
func (p *TScalarFunction) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CloseFnSymbol = _field
	return nil
}

func (p *TScalarFunction) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TScalarFunction"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TScalarFunction) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("symbol", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Symbol); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TScalarFunction) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrepareFnSymbol() {
		if err = oprot.WriteFieldBegin("prepare_fn_symbol", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PrepareFnSymbol); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TScalarFunction) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCloseFnSymbol() {
		if err = oprot.WriteFieldBegin("close_fn_symbol", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CloseFnSymbol); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TScalarFunction) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScalarFunction(%+v)", *p)

}

func (p *TScalarFunction) DeepEqual(ano *TScalarFunction) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Symbol) {
		return false
	}
	if !p.Field2DeepEqual(ano.PrepareFnSymbol) {
		return false
	}
	if !p.Field3DeepEqual(ano.CloseFnSymbol) {
		return false
	}
	return true
}

func (p *TScalarFunction) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Symbol, src) != 0 {
		return false
	}
	return true
}
func (p *TScalarFunction) Field2DeepEqual(src *string) bool {

	if p.PrepareFnSymbol == src {
		return true
	} else if p.PrepareFnSymbol == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PrepareFnSymbol, *src) != 0 {
		return false
	}
	return true
}
func (p *TScalarFunction) Field3DeepEqual(src *string) bool {

	if p.CloseFnSymbol == src {
		return true
	} else if p.CloseFnSymbol == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CloseFnSymbol, *src) != 0 {
		return false
	}
	return true
}

type TAggregateFunction struct {
	IntermediateType  *TTypeDesc `thrift:"intermediate_type,1,required" frugal:"1,required,TTypeDesc" json:"intermediate_type"`
	UpdateFnSymbol    *string    `thrift:"update_fn_symbol,2,optional" frugal:"2,optional,string" json:"update_fn_symbol,omitempty"`
	InitFnSymbol      *string    `thrift:"init_fn_symbol,3,optional" frugal:"3,optional,string" json:"init_fn_symbol,omitempty"`
	SerializeFnSymbol *string    `thrift:"serialize_fn_symbol,4,optional" frugal:"4,optional,string" json:"serialize_fn_symbol,omitempty"`
	MergeFnSymbol     *string    `thrift:"merge_fn_symbol,5,optional" frugal:"5,optional,string" json:"merge_fn_symbol,omitempty"`
	FinalizeFnSymbol  *string    `thrift:"finalize_fn_symbol,6,optional" frugal:"6,optional,string" json:"finalize_fn_symbol,omitempty"`
	GetValueFnSymbol  *string    `thrift:"get_value_fn_symbol,8,optional" frugal:"8,optional,string" json:"get_value_fn_symbol,omitempty"`
	RemoveFnSymbol    *string    `thrift:"remove_fn_symbol,9,optional" frugal:"9,optional,string" json:"remove_fn_symbol,omitempty"`
	IsAnalyticOnlyFn  bool       `thrift:"is_analytic_only_fn,10,optional" frugal:"10,optional,bool" json:"is_analytic_only_fn,omitempty"`
	Symbol            *string    `thrift:"symbol,11,optional" frugal:"11,optional,string" json:"symbol,omitempty"`
}

func NewTAggregateFunction() *TAggregateFunction {
	return &TAggregateFunction{

		IsAnalyticOnlyFn: false,
	}
}

func (p *TAggregateFunction) InitDefault() {
	p.IsAnalyticOnlyFn = false
}

var TAggregateFunction_IntermediateType_DEFAULT *TTypeDesc

func (p *TAggregateFunction) GetIntermediateType() (v *TTypeDesc) {
	if !p.IsSetIntermediateType() {
		return TAggregateFunction_IntermediateType_DEFAULT
	}
	return p.IntermediateType
}

var TAggregateFunction_UpdateFnSymbol_DEFAULT string

func (p *TAggregateFunction) GetUpdateFnSymbol() (v string) {
	if !p.IsSetUpdateFnSymbol() {
		return TAggregateFunction_UpdateFnSymbol_DEFAULT
	}
	return *p.UpdateFnSymbol
}

var TAggregateFunction_InitFnSymbol_DEFAULT string

func (p *TAggregateFunction) GetInitFnSymbol() (v string) {
	if !p.IsSetInitFnSymbol() {
		return TAggregateFunction_InitFnSymbol_DEFAULT
	}
	return *p.InitFnSymbol
}

var TAggregateFunction_SerializeFnSymbol_DEFAULT string

func (p *TAggregateFunction) GetSerializeFnSymbol() (v string) {
	if !p.IsSetSerializeFnSymbol() {
		return TAggregateFunction_SerializeFnSymbol_DEFAULT
	}
	return *p.SerializeFnSymbol
}

var TAggregateFunction_MergeFnSymbol_DEFAULT string

func (p *TAggregateFunction) GetMergeFnSymbol() (v string) {
	if !p.IsSetMergeFnSymbol() {
		return TAggregateFunction_MergeFnSymbol_DEFAULT
	}
	return *p.MergeFnSymbol
}

var TAggregateFunction_FinalizeFnSymbol_DEFAULT string

func (p *TAggregateFunction) GetFinalizeFnSymbol() (v string) {
	if !p.IsSetFinalizeFnSymbol() {
		return TAggregateFunction_FinalizeFnSymbol_DEFAULT
	}
	return *p.FinalizeFnSymbol
}

var TAggregateFunction_GetValueFnSymbol_DEFAULT string

func (p *TAggregateFunction) GetGetValueFnSymbol() (v string) {
	if !p.IsSetGetValueFnSymbol() {
		return TAggregateFunction_GetValueFnSymbol_DEFAULT
	}
	return *p.GetValueFnSymbol
}

var TAggregateFunction_RemoveFnSymbol_DEFAULT string

func (p *TAggregateFunction) GetRemoveFnSymbol() (v string) {
	if !p.IsSetRemoveFnSymbol() {
		return TAggregateFunction_RemoveFnSymbol_DEFAULT
	}
	return *p.RemoveFnSymbol
}

var TAggregateFunction_IsAnalyticOnlyFn_DEFAULT bool = false

func (p *TAggregateFunction) GetIsAnalyticOnlyFn() (v bool) {
	if !p.IsSetIsAnalyticOnlyFn() {
		return TAggregateFunction_IsAnalyticOnlyFn_DEFAULT
	}
	return p.IsAnalyticOnlyFn
}

var TAggregateFunction_Symbol_DEFAULT string

func (p *TAggregateFunction) GetSymbol() (v string) {
	if !p.IsSetSymbol() {
		return TAggregateFunction_Symbol_DEFAULT
	}
	return *p.Symbol
}
func (p *TAggregateFunction) SetIntermediateType(val *TTypeDesc) {
	p.IntermediateType = val
}
func (p *TAggregateFunction) SetUpdateFnSymbol(val *string) {
	p.UpdateFnSymbol = val
}
func (p *TAggregateFunction) SetInitFnSymbol(val *string) {
	p.InitFnSymbol = val
}
func (p *TAggregateFunction) SetSerializeFnSymbol(val *string) {
	p.SerializeFnSymbol = val
}
func (p *TAggregateFunction) SetMergeFnSymbol(val *string) {
	p.MergeFnSymbol = val
}
func (p *TAggregateFunction) SetFinalizeFnSymbol(val *string) {
	p.FinalizeFnSymbol = val
}
func (p *TAggregateFunction) SetGetValueFnSymbol(val *string) {
	p.GetValueFnSymbol = val
}
func (p *TAggregateFunction) SetRemoveFnSymbol(val *string) {
	p.RemoveFnSymbol = val
}
func (p *TAggregateFunction) SetIsAnalyticOnlyFn(val bool) {
	p.IsAnalyticOnlyFn = val
}
func (p *TAggregateFunction) SetSymbol(val *string) {
	p.Symbol = val
}

var fieldIDToName_TAggregateFunction = map[int16]string{
	1:  "intermediate_type",
	2:  "update_fn_symbol",
	3:  "init_fn_symbol",
	4:  "serialize_fn_symbol",
	5:  "merge_fn_symbol",
	6:  "finalize_fn_symbol",
	8:  "get_value_fn_symbol",
	9:  "remove_fn_symbol",
	10: "is_analytic_only_fn",
	11: "symbol",
}

func (p *TAggregateFunction) IsSetIntermediateType() bool {
	return p.IntermediateType != nil
}

func (p *TAggregateFunction) IsSetUpdateFnSymbol() bool {
	return p.UpdateFnSymbol != nil
}

func (p *TAggregateFunction) IsSetInitFnSymbol() bool {
	return p.InitFnSymbol != nil
}

func (p *TAggregateFunction) IsSetSerializeFnSymbol() bool {
	return p.SerializeFnSymbol != nil
}

func (p *TAggregateFunction) IsSetMergeFnSymbol() bool {
	return p.MergeFnSymbol != nil
}

func (p *TAggregateFunction) IsSetFinalizeFnSymbol() bool {
	return p.FinalizeFnSymbol != nil
}

func (p *TAggregateFunction) IsSetGetValueFnSymbol() bool {
	return p.GetValueFnSymbol != nil
}

func (p *TAggregateFunction) IsSetRemoveFnSymbol() bool {
	return p.RemoveFnSymbol != nil
}

func (p *TAggregateFunction) IsSetIsAnalyticOnlyFn() bool {
	return p.IsAnalyticOnlyFn != TAggregateFunction_IsAnalyticOnlyFn_DEFAULT
}

func (p *TAggregateFunction) IsSetSymbol() bool {
	return p.Symbol != nil
}

func (p *TAggregateFunction) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetIntermediateType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetIntermediateType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetIntermediateType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAggregateFunction[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAggregateFunction[fieldId]))
}

func (p *TAggregateFunction) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTTypeDesc()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.IntermediateType = _field
	return nil
}
func (p *TAggregateFunction) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdateFnSymbol = _field
	return nil
}
func (p *TAggregateFunction) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InitFnSymbol = _field
	return nil
}
func (p *TAggregateFunction) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SerializeFnSymbol = _field
	return nil
}
func (p *TAggregateFunction) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MergeFnSymbol = _field
	return nil
}
func (p *TAggregateFunction) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FinalizeFnSymbol = _field
	return nil
}
func (p *TAggregateFunction) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.GetValueFnSymbol = _field
	return nil
}
func (p *TAggregateFunction) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RemoveFnSymbol = _field
	return nil
}
func (p *TAggregateFunction) ReadField10(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsAnalyticOnlyFn = _field
	return nil
}
func (p *TAggregateFunction) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Symbol = _field
	return nil
}

func (p *TAggregateFunction) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAggregateFunction"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAggregateFunction) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("intermediate_type", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.IntermediateType.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAggregateFunction) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateFnSymbol() {
		if err = oprot.WriteFieldBegin("update_fn_symbol", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UpdateFnSymbol); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAggregateFunction) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInitFnSymbol() {
		if err = oprot.WriteFieldBegin("init_fn_symbol", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.InitFnSymbol); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TAggregateFunction) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSerializeFnSymbol() {
		if err = oprot.WriteFieldBegin("serialize_fn_symbol", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SerializeFnSymbol); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TAggregateFunction) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMergeFnSymbol() {
		if err = oprot.WriteFieldBegin("merge_fn_symbol", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MergeFnSymbol); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TAggregateFunction) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFinalizeFnSymbol() {
		if err = oprot.WriteFieldBegin("finalize_fn_symbol", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FinalizeFnSymbol); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TAggregateFunction) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetGetValueFnSymbol() {
		if err = oprot.WriteFieldBegin("get_value_fn_symbol", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.GetValueFnSymbol); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TAggregateFunction) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoveFnSymbol() {
		if err = oprot.WriteFieldBegin("remove_fn_symbol", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RemoveFnSymbol); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TAggregateFunction) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsAnalyticOnlyFn() {
		if err = oprot.WriteFieldBegin("is_analytic_only_fn", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsAnalyticOnlyFn); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TAggregateFunction) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSymbol() {
		if err = oprot.WriteFieldBegin("symbol", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Symbol); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TAggregateFunction) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAggregateFunction(%+v)", *p)

}

func (p *TAggregateFunction) DeepEqual(ano *TAggregateFunction) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IntermediateType) {
		return false
	}
	if !p.Field2DeepEqual(ano.UpdateFnSymbol) {
		return false
	}
	if !p.Field3DeepEqual(ano.InitFnSymbol) {
		return false
	}
	if !p.Field4DeepEqual(ano.SerializeFnSymbol) {
		return false
	}
	if !p.Field5DeepEqual(ano.MergeFnSymbol) {
		return false
	}
	if !p.Field6DeepEqual(ano.FinalizeFnSymbol) {
		return false
	}
	if !p.Field8DeepEqual(ano.GetValueFnSymbol) {
		return false
	}
	if !p.Field9DeepEqual(ano.RemoveFnSymbol) {
		return false
	}
	if !p.Field10DeepEqual(ano.IsAnalyticOnlyFn) {
		return false
	}
	if !p.Field11DeepEqual(ano.Symbol) {
		return false
	}
	return true
}

func (p *TAggregateFunction) Field1DeepEqual(src *TTypeDesc) bool {

	if !p.IntermediateType.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAggregateFunction) Field2DeepEqual(src *string) bool {

	if p.UpdateFnSymbol == src {
		return true
	} else if p.UpdateFnSymbol == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UpdateFnSymbol, *src) != 0 {
		return false
	}
	return true
}
func (p *TAggregateFunction) Field3DeepEqual(src *string) bool {

	if p.InitFnSymbol == src {
		return true
	} else if p.InitFnSymbol == nil || src == nil {
		return false
	}
	if strings.Compare(*p.InitFnSymbol, *src) != 0 {
		return false
	}
	return true
}
func (p *TAggregateFunction) Field4DeepEqual(src *string) bool {

	if p.SerializeFnSymbol == src {
		return true
	} else if p.SerializeFnSymbol == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SerializeFnSymbol, *src) != 0 {
		return false
	}
	return true
}
func (p *TAggregateFunction) Field5DeepEqual(src *string) bool {

	if p.MergeFnSymbol == src {
		return true
	} else if p.MergeFnSymbol == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MergeFnSymbol, *src) != 0 {
		return false
	}
	return true
}
func (p *TAggregateFunction) Field6DeepEqual(src *string) bool {

	if p.FinalizeFnSymbol == src {
		return true
	} else if p.FinalizeFnSymbol == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FinalizeFnSymbol, *src) != 0 {
		return false
	}
	return true
}
func (p *TAggregateFunction) Field8DeepEqual(src *string) bool {

	if p.GetValueFnSymbol == src {
		return true
	} else if p.GetValueFnSymbol == nil || src == nil {
		return false
	}
	if strings.Compare(*p.GetValueFnSymbol, *src) != 0 {
		return false
	}
	return true
}
func (p *TAggregateFunction) Field9DeepEqual(src *string) bool {

	if p.RemoveFnSymbol == src {
		return true
	} else if p.RemoveFnSymbol == nil || src == nil {
		return false
	}
	if strings.Compare(*p.RemoveFnSymbol, *src) != 0 {
		return false
	}
	return true
}
func (p *TAggregateFunction) Field10DeepEqual(src bool) bool {

	if p.IsAnalyticOnlyFn != src {
		return false
	}
	return true
}
func (p *TAggregateFunction) Field11DeepEqual(src *string) bool {

	if p.Symbol == src {
		return true
	} else if p.Symbol == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Symbol, *src) != 0 {
		return false
	}
	return true
}

type TFunction struct {
	Name           *TFunctionName      `thrift:"name,1,required" frugal:"1,required,TFunctionName" json:"name"`
	BinaryType     TFunctionBinaryType `thrift:"binary_type,2,required" frugal:"2,required,TFunctionBinaryType" json:"binary_type"`
	ArgTypes       []*TTypeDesc        `thrift:"arg_types,3,required" frugal:"3,required,list<TTypeDesc>" json:"arg_types"`
	RetType        *TTypeDesc          `thrift:"ret_type,4,required" frugal:"4,required,TTypeDesc" json:"ret_type"`
	HasVarArgs_    bool                `thrift:"has_var_args,5,required" frugal:"5,required,bool" json:"has_var_args"`
	Comment        *string             `thrift:"comment,6,optional" frugal:"6,optional,string" json:"comment,omitempty"`
	Signature      *string             `thrift:"signature,7,optional" frugal:"7,optional,string" json:"signature,omitempty"`
	HdfsLocation   *string             `thrift:"hdfs_location,8,optional" frugal:"8,optional,string" json:"hdfs_location,omitempty"`
	ScalarFn       *TScalarFunction    `thrift:"scalar_fn,9,optional" frugal:"9,optional,TScalarFunction" json:"scalar_fn,omitempty"`
	AggregateFn    *TAggregateFunction `thrift:"aggregate_fn,10,optional" frugal:"10,optional,TAggregateFunction" json:"aggregate_fn,omitempty"`
	Id             *int64              `thrift:"id,11,optional" frugal:"11,optional,i64" json:"id,omitempty"`
	Checksum       *string             `thrift:"checksum,12,optional" frugal:"12,optional,string" json:"checksum,omitempty"`
	Vectorized     bool                `thrift:"vectorized,13,optional" frugal:"13,optional,bool" json:"vectorized,omitempty"`
	IsUdtfFunction bool                `thrift:"is_udtf_function,14,optional" frugal:"14,optional,bool" json:"is_udtf_function,omitempty"`
	IsStaticLoad   bool                `thrift:"is_static_load,15,optional" frugal:"15,optional,bool" json:"is_static_load,omitempty"`
	ExpirationTime *int64              `thrift:"expiration_time,16,optional" frugal:"16,optional,i64" json:"expiration_time,omitempty"`
}

func NewTFunction() *TFunction {
	return &TFunction{

		Vectorized:     false,
		IsUdtfFunction: false,
		IsStaticLoad:   false,
	}
}

func (p *TFunction) InitDefault() {
	p.Vectorized = false
	p.IsUdtfFunction = false
	p.IsStaticLoad = false
}

var TFunction_Name_DEFAULT *TFunctionName

func (p *TFunction) GetName() (v *TFunctionName) {
	if !p.IsSetName() {
		return TFunction_Name_DEFAULT
	}
	return p.Name
}

func (p *TFunction) GetBinaryType() (v TFunctionBinaryType) {
	return p.BinaryType
}

func (p *TFunction) GetArgTypes() (v []*TTypeDesc) {
	return p.ArgTypes
}

var TFunction_RetType_DEFAULT *TTypeDesc

func (p *TFunction) GetRetType() (v *TTypeDesc) {
	if !p.IsSetRetType() {
		return TFunction_RetType_DEFAULT
	}
	return p.RetType
}

func (p *TFunction) GetHasVarArgs_() (v bool) {
	return p.HasVarArgs_
}

var TFunction_Comment_DEFAULT string

func (p *TFunction) GetComment() (v string) {
	if !p.IsSetComment() {
		return TFunction_Comment_DEFAULT
	}
	return *p.Comment
}

var TFunction_Signature_DEFAULT string

func (p *TFunction) GetSignature() (v string) {
	if !p.IsSetSignature() {
		return TFunction_Signature_DEFAULT
	}
	return *p.Signature
}

var TFunction_HdfsLocation_DEFAULT string

func (p *TFunction) GetHdfsLocation() (v string) {
	if !p.IsSetHdfsLocation() {
		return TFunction_HdfsLocation_DEFAULT
	}
	return *p.HdfsLocation
}

var TFunction_ScalarFn_DEFAULT *TScalarFunction

func (p *TFunction) GetScalarFn() (v *TScalarFunction) {
	if !p.IsSetScalarFn() {
		return TFunction_ScalarFn_DEFAULT
	}
	return p.ScalarFn
}

var TFunction_AggregateFn_DEFAULT *TAggregateFunction

func (p *TFunction) GetAggregateFn() (v *TAggregateFunction) {
	if !p.IsSetAggregateFn() {
		return TFunction_AggregateFn_DEFAULT
	}
	return p.AggregateFn
}

var TFunction_Id_DEFAULT int64

func (p *TFunction) GetId() (v int64) {
	if !p.IsSetId() {
		return TFunction_Id_DEFAULT
	}
	return *p.Id
}

var TFunction_Checksum_DEFAULT string

func (p *TFunction) GetChecksum() (v string) {
	if !p.IsSetChecksum() {
		return TFunction_Checksum_DEFAULT
	}
	return *p.Checksum
}

var TFunction_Vectorized_DEFAULT bool = false

func (p *TFunction) GetVectorized() (v bool) {
	if !p.IsSetVectorized() {
		return TFunction_Vectorized_DEFAULT
	}
	return p.Vectorized
}

var TFunction_IsUdtfFunction_DEFAULT bool = false

func (p *TFunction) GetIsUdtfFunction() (v bool) {
	if !p.IsSetIsUdtfFunction() {
		return TFunction_IsUdtfFunction_DEFAULT
	}
	return p.IsUdtfFunction
}

var TFunction_IsStaticLoad_DEFAULT bool = false

func (p *TFunction) GetIsStaticLoad() (v bool) {
	if !p.IsSetIsStaticLoad() {
		return TFunction_IsStaticLoad_DEFAULT
	}
	return p.IsStaticLoad
}

var TFunction_ExpirationTime_DEFAULT int64

func (p *TFunction) GetExpirationTime() (v int64) {
	if !p.IsSetExpirationTime() {
		return TFunction_ExpirationTime_DEFAULT
	}
	return *p.ExpirationTime
}
func (p *TFunction) SetName(val *TFunctionName) {
	p.Name = val
}
func (p *TFunction) SetBinaryType(val TFunctionBinaryType) {
	p.BinaryType = val
}
func (p *TFunction) SetArgTypes(val []*TTypeDesc) {
	p.ArgTypes = val
}
func (p *TFunction) SetRetType(val *TTypeDesc) {
	p.RetType = val
}
func (p *TFunction) SetHasVarArgs_(val bool) {
	p.HasVarArgs_ = val
}
func (p *TFunction) SetComment(val *string) {
	p.Comment = val
}
func (p *TFunction) SetSignature(val *string) {
	p.Signature = val
}
func (p *TFunction) SetHdfsLocation(val *string) {
	p.HdfsLocation = val
}
func (p *TFunction) SetScalarFn(val *TScalarFunction) {
	p.ScalarFn = val
}
func (p *TFunction) SetAggregateFn(val *TAggregateFunction) {
	p.AggregateFn = val
}
func (p *TFunction) SetId(val *int64) {
	p.Id = val
}
func (p *TFunction) SetChecksum(val *string) {
	p.Checksum = val
}
func (p *TFunction) SetVectorized(val bool) {
	p.Vectorized = val
}
func (p *TFunction) SetIsUdtfFunction(val bool) {
	p.IsUdtfFunction = val
}
func (p *TFunction) SetIsStaticLoad(val bool) {
	p.IsStaticLoad = val
}
func (p *TFunction) SetExpirationTime(val *int64) {
	p.ExpirationTime = val
}

var fieldIDToName_TFunction = map[int16]string{
	1:  "name",
	2:  "binary_type",
	3:  "arg_types",
	4:  "ret_type",
	5:  "has_var_args",
	6:  "comment",
	7:  "signature",
	8:  "hdfs_location",
	9:  "scalar_fn",
	10: "aggregate_fn",
	11: "id",
	12: "checksum",
	13: "vectorized",
	14: "is_udtf_function",
	15: "is_static_load",
	16: "expiration_time",
}

func (p *TFunction) IsSetName() bool {
	return p.Name != nil
}

func (p *TFunction) IsSetRetType() bool {
	return p.RetType != nil
}

func (p *TFunction) IsSetComment() bool {
	return p.Comment != nil
}

func (p *TFunction) IsSetSignature() bool {
	return p.Signature != nil
}

func (p *TFunction) IsSetHdfsLocation() bool {
	return p.HdfsLocation != nil
}

func (p *TFunction) IsSetScalarFn() bool {
	return p.ScalarFn != nil
}

func (p *TFunction) IsSetAggregateFn() bool {
	return p.AggregateFn != nil
}

func (p *TFunction) IsSetId() bool {
	return p.Id != nil
}

func (p *TFunction) IsSetChecksum() bool {
	return p.Checksum != nil
}

func (p *TFunction) IsSetVectorized() bool {
	return p.Vectorized != TFunction_Vectorized_DEFAULT
}

func (p *TFunction) IsSetIsUdtfFunction() bool {
	return p.IsUdtfFunction != TFunction_IsUdtfFunction_DEFAULT
}

func (p *TFunction) IsSetIsStaticLoad() bool {
	return p.IsStaticLoad != TFunction_IsStaticLoad_DEFAULT
}

func (p *TFunction) IsSetExpirationTime() bool {
	return p.ExpirationTime != nil
}

func (p *TFunction) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetBinaryType bool = false
	var issetArgTypes bool = false
	var issetRetType bool = false
	var issetHasVarArgs_ bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetBinaryType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetArgTypes = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetRetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetHasVarArgs_ = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetBinaryType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetArgTypes {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetRetType {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetHasVarArgs_ {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFunction[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFunction[fieldId]))
}

func (p *TFunction) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTFunctionName()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Name = _field
	return nil
}
func (p *TFunction) ReadField2(iprot thrift.TProtocol) error {

	var _field TFunctionBinaryType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TFunctionBinaryType(v)
	}
	p.BinaryType = _field
	return nil
}
func (p *TFunction) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTypeDesc, 0, size)
	values := make([]TTypeDesc, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ArgTypes = _field
	return nil
}
func (p *TFunction) ReadField4(iprot thrift.TProtocol) error {
	_field := NewTTypeDesc()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.RetType = _field
	return nil
}
func (p *TFunction) ReadField5(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HasVarArgs_ = _field
	return nil
}
func (p *TFunction) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Comment = _field
	return nil
}
func (p *TFunction) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Signature = _field
	return nil
}
func (p *TFunction) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HdfsLocation = _field
	return nil
}
func (p *TFunction) ReadField9(iprot thrift.TProtocol) error {
	_field := NewTScalarFunction()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ScalarFn = _field
	return nil
}
func (p *TFunction) ReadField10(iprot thrift.TProtocol) error {
	_field := NewTAggregateFunction()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AggregateFn = _field
	return nil
}
func (p *TFunction) ReadField11(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *TFunction) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Checksum = _field
	return nil
}
func (p *TFunction) ReadField13(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Vectorized = _field
	return nil
}
func (p *TFunction) ReadField14(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsUdtfFunction = _field
	return nil
}
func (p *TFunction) ReadField15(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsStaticLoad = _field
	return nil
}
func (p *TFunction) ReadField16(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExpirationTime = _field
	return nil
}

func (p *TFunction) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFunction"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFunction) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Name.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFunction) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("binary_type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.BinaryType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFunction) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("arg_types", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ArgTypes)); err != nil {
		return err
	}
	for _, v := range p.ArgTypes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TFunction) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ret_type", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.RetType.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TFunction) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("has_var_args", thrift.BOOL, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.HasVarArgs_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TFunction) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetComment() {
		if err = oprot.WriteFieldBegin("comment", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Comment); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TFunction) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignature() {
		if err = oprot.WriteFieldBegin("signature", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Signature); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TFunction) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetHdfsLocation() {
		if err = oprot.WriteFieldBegin("hdfs_location", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.HdfsLocation); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TFunction) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetScalarFn() {
		if err = oprot.WriteFieldBegin("scalar_fn", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ScalarFn.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TFunction) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetAggregateFn() {
		if err = oprot.WriteFieldBegin("aggregate_fn", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.AggregateFn.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TFunction) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TFunction) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetChecksum() {
		if err = oprot.WriteFieldBegin("checksum", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Checksum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TFunction) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetVectorized() {
		if err = oprot.WriteFieldBegin("vectorized", thrift.BOOL, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.Vectorized); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TFunction) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsUdtfFunction() {
		if err = oprot.WriteFieldBegin("is_udtf_function", thrift.BOOL, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsUdtfFunction); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TFunction) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsStaticLoad() {
		if err = oprot.WriteFieldBegin("is_static_load", thrift.BOOL, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsStaticLoad); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TFunction) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpirationTime() {
		if err = oprot.WriteFieldBegin("expiration_time", thrift.I64, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExpirationTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TFunction) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFunction(%+v)", *p)

}

func (p *TFunction) DeepEqual(ano *TFunction) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.BinaryType) {
		return false
	}
	if !p.Field3DeepEqual(ano.ArgTypes) {
		return false
	}
	if !p.Field4DeepEqual(ano.RetType) {
		return false
	}
	if !p.Field5DeepEqual(ano.HasVarArgs_) {
		return false
	}
	if !p.Field6DeepEqual(ano.Comment) {
		return false
	}
	if !p.Field7DeepEqual(ano.Signature) {
		return false
	}
	if !p.Field8DeepEqual(ano.HdfsLocation) {
		return false
	}
	if !p.Field9DeepEqual(ano.ScalarFn) {
		return false
	}
	if !p.Field10DeepEqual(ano.AggregateFn) {
		return false
	}
	if !p.Field11DeepEqual(ano.Id) {
		return false
	}
	if !p.Field12DeepEqual(ano.Checksum) {
		return false
	}
	if !p.Field13DeepEqual(ano.Vectorized) {
		return false
	}
	if !p.Field14DeepEqual(ano.IsUdtfFunction) {
		return false
	}
	if !p.Field15DeepEqual(ano.IsStaticLoad) {
		return false
	}
	if !p.Field16DeepEqual(ano.ExpirationTime) {
		return false
	}
	return true
}

func (p *TFunction) Field1DeepEqual(src *TFunctionName) bool {

	if !p.Name.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFunction) Field2DeepEqual(src TFunctionBinaryType) bool {

	if p.BinaryType != src {
		return false
	}
	return true
}
func (p *TFunction) Field3DeepEqual(src []*TTypeDesc) bool {

	if len(p.ArgTypes) != len(src) {
		return false
	}
	for i, v := range p.ArgTypes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TFunction) Field4DeepEqual(src *TTypeDesc) bool {

	if !p.RetType.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFunction) Field5DeepEqual(src bool) bool {

	if p.HasVarArgs_ != src {
		return false
	}
	return true
}
func (p *TFunction) Field6DeepEqual(src *string) bool {

	if p.Comment == src {
		return true
	} else if p.Comment == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Comment, *src) != 0 {
		return false
	}
	return true
}
func (p *TFunction) Field7DeepEqual(src *string) bool {

	if p.Signature == src {
		return true
	} else if p.Signature == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Signature, *src) != 0 {
		return false
	}
	return true
}
func (p *TFunction) Field8DeepEqual(src *string) bool {

	if p.HdfsLocation == src {
		return true
	} else if p.HdfsLocation == nil || src == nil {
		return false
	}
	if strings.Compare(*p.HdfsLocation, *src) != 0 {
		return false
	}
	return true
}
func (p *TFunction) Field9DeepEqual(src *TScalarFunction) bool {

	if !p.ScalarFn.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFunction) Field10DeepEqual(src *TAggregateFunction) bool {

	if !p.AggregateFn.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFunction) Field11DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *TFunction) Field12DeepEqual(src *string) bool {

	if p.Checksum == src {
		return true
	} else if p.Checksum == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Checksum, *src) != 0 {
		return false
	}
	return true
}
func (p *TFunction) Field13DeepEqual(src bool) bool {

	if p.Vectorized != src {
		return false
	}
	return true
}
func (p *TFunction) Field14DeepEqual(src bool) bool {

	if p.IsUdtfFunction != src {
		return false
	}
	return true
}
func (p *TFunction) Field15DeepEqual(src bool) bool {

	if p.IsStaticLoad != src {
		return false
	}
	return true
}
func (p *TFunction) Field16DeepEqual(src *int64) bool {

	if p.ExpirationTime == src {
		return true
	} else if p.ExpirationTime == nil || src == nil {
		return false
	}
	if *p.ExpirationTime != *src {
		return false
	}
	return true
}

type TJdbcExecutorCtorParams struct {
	Statement                    *string         `thrift:"statement,1,optional" frugal:"1,optional,string" json:"statement,omitempty"`
	JdbcUrl                      *string         `thrift:"jdbc_url,2,optional" frugal:"2,optional,string" json:"jdbc_url,omitempty"`
	JdbcUser                     *string         `thrift:"jdbc_user,3,optional" frugal:"3,optional,string" json:"jdbc_user,omitempty"`
	JdbcPassword                 *string         `thrift:"jdbc_password,4,optional" frugal:"4,optional,string" json:"jdbc_password,omitempty"`
	JdbcDriverClass              *string         `thrift:"jdbc_driver_class,5,optional" frugal:"5,optional,string" json:"jdbc_driver_class,omitempty"`
	BatchSize                    *int32          `thrift:"batch_size,6,optional" frugal:"6,optional,i32" json:"batch_size,omitempty"`
	Op                           *TJdbcOperation `thrift:"op,7,optional" frugal:"7,optional,TJdbcOperation" json:"op,omitempty"`
	DriverPath                   *string         `thrift:"driver_path,8,optional" frugal:"8,optional,string" json:"driver_path,omitempty"`
	TableType                    *TOdbcTableType `thrift:"table_type,9,optional" frugal:"9,optional,TOdbcTableType" json:"table_type,omitempty"`
	ConnectionPoolMinSize        *int32          `thrift:"connection_pool_min_size,10,optional" frugal:"10,optional,i32" json:"connection_pool_min_size,omitempty"`
	ConnectionPoolMaxSize        *int32          `thrift:"connection_pool_max_size,11,optional" frugal:"11,optional,i32" json:"connection_pool_max_size,omitempty"`
	ConnectionPoolMaxWaitTime    *int32          `thrift:"connection_pool_max_wait_time,12,optional" frugal:"12,optional,i32" json:"connection_pool_max_wait_time,omitempty"`
	ConnectionPoolMaxLifeTime    *int32          `thrift:"connection_pool_max_life_time,13,optional" frugal:"13,optional,i32" json:"connection_pool_max_life_time,omitempty"`
	ConnectionPoolCacheClearTime *int32          `thrift:"connection_pool_cache_clear_time,14,optional" frugal:"14,optional,i32" json:"connection_pool_cache_clear_time,omitempty"`
	ConnectionPoolKeepAlive      *bool           `thrift:"connection_pool_keep_alive,15,optional" frugal:"15,optional,bool" json:"connection_pool_keep_alive,omitempty"`
	CatalogId                    *int64          `thrift:"catalog_id,16,optional" frugal:"16,optional,i64" json:"catalog_id,omitempty"`
}

func NewTJdbcExecutorCtorParams() *TJdbcExecutorCtorParams {
	return &TJdbcExecutorCtorParams{}
}

func (p *TJdbcExecutorCtorParams) InitDefault() {
}

var TJdbcExecutorCtorParams_Statement_DEFAULT string

func (p *TJdbcExecutorCtorParams) GetStatement() (v string) {
	if !p.IsSetStatement() {
		return TJdbcExecutorCtorParams_Statement_DEFAULT
	}
	return *p.Statement
}

var TJdbcExecutorCtorParams_JdbcUrl_DEFAULT string

func (p *TJdbcExecutorCtorParams) GetJdbcUrl() (v string) {
	if !p.IsSetJdbcUrl() {
		return TJdbcExecutorCtorParams_JdbcUrl_DEFAULT
	}
	return *p.JdbcUrl
}

var TJdbcExecutorCtorParams_JdbcUser_DEFAULT string

func (p *TJdbcExecutorCtorParams) GetJdbcUser() (v string) {
	if !p.IsSetJdbcUser() {
		return TJdbcExecutorCtorParams_JdbcUser_DEFAULT
	}
	return *p.JdbcUser
}

var TJdbcExecutorCtorParams_JdbcPassword_DEFAULT string

func (p *TJdbcExecutorCtorParams) GetJdbcPassword() (v string) {
	if !p.IsSetJdbcPassword() {
		return TJdbcExecutorCtorParams_JdbcPassword_DEFAULT
	}
	return *p.JdbcPassword
}

var TJdbcExecutorCtorParams_JdbcDriverClass_DEFAULT string

func (p *TJdbcExecutorCtorParams) GetJdbcDriverClass() (v string) {
	if !p.IsSetJdbcDriverClass() {
		return TJdbcExecutorCtorParams_JdbcDriverClass_DEFAULT
	}
	return *p.JdbcDriverClass
}

var TJdbcExecutorCtorParams_BatchSize_DEFAULT int32

func (p *TJdbcExecutorCtorParams) GetBatchSize() (v int32) {
	if !p.IsSetBatchSize() {
		return TJdbcExecutorCtorParams_BatchSize_DEFAULT
	}
	return *p.BatchSize
}

var TJdbcExecutorCtorParams_Op_DEFAULT TJdbcOperation

func (p *TJdbcExecutorCtorParams) GetOp() (v TJdbcOperation) {
	if !p.IsSetOp() {
		return TJdbcExecutorCtorParams_Op_DEFAULT
	}
	return *p.Op
}

var TJdbcExecutorCtorParams_DriverPath_DEFAULT string

func (p *TJdbcExecutorCtorParams) GetDriverPath() (v string) {
	if !p.IsSetDriverPath() {
		return TJdbcExecutorCtorParams_DriverPath_DEFAULT
	}
	return *p.DriverPath
}

var TJdbcExecutorCtorParams_TableType_DEFAULT TOdbcTableType

func (p *TJdbcExecutorCtorParams) GetTableType() (v TOdbcTableType) {
	if !p.IsSetTableType() {
		return TJdbcExecutorCtorParams_TableType_DEFAULT
	}
	return *p.TableType
}

var TJdbcExecutorCtorParams_ConnectionPoolMinSize_DEFAULT int32

func (p *TJdbcExecutorCtorParams) GetConnectionPoolMinSize() (v int32) {
	if !p.IsSetConnectionPoolMinSize() {
		return TJdbcExecutorCtorParams_ConnectionPoolMinSize_DEFAULT
	}
	return *p.ConnectionPoolMinSize
}

var TJdbcExecutorCtorParams_ConnectionPoolMaxSize_DEFAULT int32

func (p *TJdbcExecutorCtorParams) GetConnectionPoolMaxSize() (v int32) {
	if !p.IsSetConnectionPoolMaxSize() {
		return TJdbcExecutorCtorParams_ConnectionPoolMaxSize_DEFAULT
	}
	return *p.ConnectionPoolMaxSize
}

var TJdbcExecutorCtorParams_ConnectionPoolMaxWaitTime_DEFAULT int32

func (p *TJdbcExecutorCtorParams) GetConnectionPoolMaxWaitTime() (v int32) {
	if !p.IsSetConnectionPoolMaxWaitTime() {
		return TJdbcExecutorCtorParams_ConnectionPoolMaxWaitTime_DEFAULT
	}
	return *p.ConnectionPoolMaxWaitTime
}

var TJdbcExecutorCtorParams_ConnectionPoolMaxLifeTime_DEFAULT int32

func (p *TJdbcExecutorCtorParams) GetConnectionPoolMaxLifeTime() (v int32) {
	if !p.IsSetConnectionPoolMaxLifeTime() {
		return TJdbcExecutorCtorParams_ConnectionPoolMaxLifeTime_DEFAULT
	}
	return *p.ConnectionPoolMaxLifeTime
}

var TJdbcExecutorCtorParams_ConnectionPoolCacheClearTime_DEFAULT int32

func (p *TJdbcExecutorCtorParams) GetConnectionPoolCacheClearTime() (v int32) {
	if !p.IsSetConnectionPoolCacheClearTime() {
		return TJdbcExecutorCtorParams_ConnectionPoolCacheClearTime_DEFAULT
	}
	return *p.ConnectionPoolCacheClearTime
}

var TJdbcExecutorCtorParams_ConnectionPoolKeepAlive_DEFAULT bool

func (p *TJdbcExecutorCtorParams) GetConnectionPoolKeepAlive() (v bool) {
	if !p.IsSetConnectionPoolKeepAlive() {
		return TJdbcExecutorCtorParams_ConnectionPoolKeepAlive_DEFAULT
	}
	return *p.ConnectionPoolKeepAlive
}

var TJdbcExecutorCtorParams_CatalogId_DEFAULT int64

func (p *TJdbcExecutorCtorParams) GetCatalogId() (v int64) {
	if !p.IsSetCatalogId() {
		return TJdbcExecutorCtorParams_CatalogId_DEFAULT
	}
	return *p.CatalogId
}
func (p *TJdbcExecutorCtorParams) SetStatement(val *string) {
	p.Statement = val
}
func (p *TJdbcExecutorCtorParams) SetJdbcUrl(val *string) {
	p.JdbcUrl = val
}
func (p *TJdbcExecutorCtorParams) SetJdbcUser(val *string) {
	p.JdbcUser = val
}
func (p *TJdbcExecutorCtorParams) SetJdbcPassword(val *string) {
	p.JdbcPassword = val
}
func (p *TJdbcExecutorCtorParams) SetJdbcDriverClass(val *string) {
	p.JdbcDriverClass = val
}
func (p *TJdbcExecutorCtorParams) SetBatchSize(val *int32) {
	p.BatchSize = val
}
func (p *TJdbcExecutorCtorParams) SetOp(val *TJdbcOperation) {
	p.Op = val
}
func (p *TJdbcExecutorCtorParams) SetDriverPath(val *string) {
	p.DriverPath = val
}
func (p *TJdbcExecutorCtorParams) SetTableType(val *TOdbcTableType) {
	p.TableType = val
}
func (p *TJdbcExecutorCtorParams) SetConnectionPoolMinSize(val *int32) {
	p.ConnectionPoolMinSize = val
}
func (p *TJdbcExecutorCtorParams) SetConnectionPoolMaxSize(val *int32) {
	p.ConnectionPoolMaxSize = val
}
func (p *TJdbcExecutorCtorParams) SetConnectionPoolMaxWaitTime(val *int32) {
	p.ConnectionPoolMaxWaitTime = val
}
func (p *TJdbcExecutorCtorParams) SetConnectionPoolMaxLifeTime(val *int32) {
	p.ConnectionPoolMaxLifeTime = val
}
func (p *TJdbcExecutorCtorParams) SetConnectionPoolCacheClearTime(val *int32) {
	p.ConnectionPoolCacheClearTime = val
}
func (p *TJdbcExecutorCtorParams) SetConnectionPoolKeepAlive(val *bool) {
	p.ConnectionPoolKeepAlive = val
}
func (p *TJdbcExecutorCtorParams) SetCatalogId(val *int64) {
	p.CatalogId = val
}

var fieldIDToName_TJdbcExecutorCtorParams = map[int16]string{
	1:  "statement",
	2:  "jdbc_url",
	3:  "jdbc_user",
	4:  "jdbc_password",
	5:  "jdbc_driver_class",
	6:  "batch_size",
	7:  "op",
	8:  "driver_path",
	9:  "table_type",
	10: "connection_pool_min_size",
	11: "connection_pool_max_size",
	12: "connection_pool_max_wait_time",
	13: "connection_pool_max_life_time",
	14: "connection_pool_cache_clear_time",
	15: "connection_pool_keep_alive",
	16: "catalog_id",
}

func (p *TJdbcExecutorCtorParams) IsSetStatement() bool {
	return p.Statement != nil
}

func (p *TJdbcExecutorCtorParams) IsSetJdbcUrl() bool {
	return p.JdbcUrl != nil
}

func (p *TJdbcExecutorCtorParams) IsSetJdbcUser() bool {
	return p.JdbcUser != nil
}

func (p *TJdbcExecutorCtorParams) IsSetJdbcPassword() bool {
	return p.JdbcPassword != nil
}

func (p *TJdbcExecutorCtorParams) IsSetJdbcDriverClass() bool {
	return p.JdbcDriverClass != nil
}

func (p *TJdbcExecutorCtorParams) IsSetBatchSize() bool {
	return p.BatchSize != nil
}

func (p *TJdbcExecutorCtorParams) IsSetOp() bool {
	return p.Op != nil
}

func (p *TJdbcExecutorCtorParams) IsSetDriverPath() bool {
	return p.DriverPath != nil
}

func (p *TJdbcExecutorCtorParams) IsSetTableType() bool {
	return p.TableType != nil
}

func (p *TJdbcExecutorCtorParams) IsSetConnectionPoolMinSize() bool {
	return p.ConnectionPoolMinSize != nil
}

func (p *TJdbcExecutorCtorParams) IsSetConnectionPoolMaxSize() bool {
	return p.ConnectionPoolMaxSize != nil
}

func (p *TJdbcExecutorCtorParams) IsSetConnectionPoolMaxWaitTime() bool {
	return p.ConnectionPoolMaxWaitTime != nil
}

func (p *TJdbcExecutorCtorParams) IsSetConnectionPoolMaxLifeTime() bool {
	return p.ConnectionPoolMaxLifeTime != nil
}

func (p *TJdbcExecutorCtorParams) IsSetConnectionPoolCacheClearTime() bool {
	return p.ConnectionPoolCacheClearTime != nil
}

func (p *TJdbcExecutorCtorParams) IsSetConnectionPoolKeepAlive() bool {
	return p.ConnectionPoolKeepAlive != nil
}

func (p *TJdbcExecutorCtorParams) IsSetCatalogId() bool {
	return p.CatalogId != nil
}

func (p *TJdbcExecutorCtorParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TJdbcExecutorCtorParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Statement = _field
	return nil
}
func (p *TJdbcExecutorCtorParams) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JdbcUrl = _field
	return nil
}
func (p *TJdbcExecutorCtorParams) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JdbcUser = _field
	return nil
}
func (p *TJdbcExecutorCtorParams) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JdbcPassword = _field
	return nil
}
func (p *TJdbcExecutorCtorParams) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JdbcDriverClass = _field
	return nil
}
func (p *TJdbcExecutorCtorParams) ReadField6(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BatchSize = _field
	return nil
}
func (p *TJdbcExecutorCtorParams) ReadField7(iprot thrift.TProtocol) error {

	var _field *TJdbcOperation
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TJdbcOperation(v)
		_field = &tmp
	}
	p.Op = _field
	return nil
}
func (p *TJdbcExecutorCtorParams) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DriverPath = _field
	return nil
}
func (p *TJdbcExecutorCtorParams) ReadField9(iprot thrift.TProtocol) error {

	var _field *TOdbcTableType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TOdbcTableType(v)
		_field = &tmp
	}
	p.TableType = _field
	return nil
}
func (p *TJdbcExecutorCtorParams) ReadField10(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ConnectionPoolMinSize = _field
	return nil
}
func (p *TJdbcExecutorCtorParams) ReadField11(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ConnectionPoolMaxSize = _field
	return nil
}
func (p *TJdbcExecutorCtorParams) ReadField12(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ConnectionPoolMaxWaitTime = _field
	return nil
}
func (p *TJdbcExecutorCtorParams) ReadField13(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ConnectionPoolMaxLifeTime = _field
	return nil
}
func (p *TJdbcExecutorCtorParams) ReadField14(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ConnectionPoolCacheClearTime = _field
	return nil
}
func (p *TJdbcExecutorCtorParams) ReadField15(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ConnectionPoolKeepAlive = _field
	return nil
}
func (p *TJdbcExecutorCtorParams) ReadField16(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CatalogId = _field
	return nil
}

func (p *TJdbcExecutorCtorParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TJdbcExecutorCtorParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatement() {
		if err = oprot.WriteFieldBegin("statement", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Statement); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetJdbcUrl() {
		if err = oprot.WriteFieldBegin("jdbc_url", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JdbcUrl); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetJdbcUser() {
		if err = oprot.WriteFieldBegin("jdbc_user", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JdbcUser); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetJdbcPassword() {
		if err = oprot.WriteFieldBegin("jdbc_password", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JdbcPassword); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetJdbcDriverClass() {
		if err = oprot.WriteFieldBegin("jdbc_driver_class", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JdbcDriverClass); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBatchSize() {
		if err = oprot.WriteFieldBegin("batch_size", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BatchSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetOp() {
		if err = oprot.WriteFieldBegin("op", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Op)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDriverPath() {
		if err = oprot.WriteFieldBegin("driver_path", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DriverPath); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableType() {
		if err = oprot.WriteFieldBegin("table_type", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.TableType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetConnectionPoolMinSize() {
		if err = oprot.WriteFieldBegin("connection_pool_min_size", thrift.I32, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ConnectionPoolMinSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetConnectionPoolMaxSize() {
		if err = oprot.WriteFieldBegin("connection_pool_max_size", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ConnectionPoolMaxSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetConnectionPoolMaxWaitTime() {
		if err = oprot.WriteFieldBegin("connection_pool_max_wait_time", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ConnectionPoolMaxWaitTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetConnectionPoolMaxLifeTime() {
		if err = oprot.WriteFieldBegin("connection_pool_max_life_time", thrift.I32, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ConnectionPoolMaxLifeTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetConnectionPoolCacheClearTime() {
		if err = oprot.WriteFieldBegin("connection_pool_cache_clear_time", thrift.I32, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ConnectionPoolCacheClearTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetConnectionPoolKeepAlive() {
		if err = oprot.WriteFieldBegin("connection_pool_keep_alive", thrift.BOOL, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ConnectionPoolKeepAlive); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalogId() {
		if err = oprot.WriteFieldBegin("catalog_id", thrift.I64, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CatalogId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TJdbcExecutorCtorParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TJdbcExecutorCtorParams(%+v)", *p)

}

func (p *TJdbcExecutorCtorParams) DeepEqual(ano *TJdbcExecutorCtorParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Statement) {
		return false
	}
	if !p.Field2DeepEqual(ano.JdbcUrl) {
		return false
	}
	if !p.Field3DeepEqual(ano.JdbcUser) {
		return false
	}
	if !p.Field4DeepEqual(ano.JdbcPassword) {
		return false
	}
	if !p.Field5DeepEqual(ano.JdbcDriverClass) {
		return false
	}
	if !p.Field6DeepEqual(ano.BatchSize) {
		return false
	}
	if !p.Field7DeepEqual(ano.Op) {
		return false
	}
	if !p.Field8DeepEqual(ano.DriverPath) {
		return false
	}
	if !p.Field9DeepEqual(ano.TableType) {
		return false
	}
	if !p.Field10DeepEqual(ano.ConnectionPoolMinSize) {
		return false
	}
	if !p.Field11DeepEqual(ano.ConnectionPoolMaxSize) {
		return false
	}
	if !p.Field12DeepEqual(ano.ConnectionPoolMaxWaitTime) {
		return false
	}
	if !p.Field13DeepEqual(ano.ConnectionPoolMaxLifeTime) {
		return false
	}
	if !p.Field14DeepEqual(ano.ConnectionPoolCacheClearTime) {
		return false
	}
	if !p.Field15DeepEqual(ano.ConnectionPoolKeepAlive) {
		return false
	}
	if !p.Field16DeepEqual(ano.CatalogId) {
		return false
	}
	return true
}

func (p *TJdbcExecutorCtorParams) Field1DeepEqual(src *string) bool {

	if p.Statement == src {
		return true
	} else if p.Statement == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Statement, *src) != 0 {
		return false
	}
	return true
}
func (p *TJdbcExecutorCtorParams) Field2DeepEqual(src *string) bool {

	if p.JdbcUrl == src {
		return true
	} else if p.JdbcUrl == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JdbcUrl, *src) != 0 {
		return false
	}
	return true
}
func (p *TJdbcExecutorCtorParams) Field3DeepEqual(src *string) bool {

	if p.JdbcUser == src {
		return true
	} else if p.JdbcUser == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JdbcUser, *src) != 0 {
		return false
	}
	return true
}
func (p *TJdbcExecutorCtorParams) Field4DeepEqual(src *string) bool {

	if p.JdbcPassword == src {
		return true
	} else if p.JdbcPassword == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JdbcPassword, *src) != 0 {
		return false
	}
	return true
}
func (p *TJdbcExecutorCtorParams) Field5DeepEqual(src *string) bool {

	if p.JdbcDriverClass == src {
		return true
	} else if p.JdbcDriverClass == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JdbcDriverClass, *src) != 0 {
		return false
	}
	return true
}
func (p *TJdbcExecutorCtorParams) Field6DeepEqual(src *int32) bool {

	if p.BatchSize == src {
		return true
	} else if p.BatchSize == nil || src == nil {
		return false
	}
	if *p.BatchSize != *src {
		return false
	}
	return true
}
func (p *TJdbcExecutorCtorParams) Field7DeepEqual(src *TJdbcOperation) bool {

	if p.Op == src {
		return true
	} else if p.Op == nil || src == nil {
		return false
	}
	if *p.Op != *src {
		return false
	}
	return true
}
func (p *TJdbcExecutorCtorParams) Field8DeepEqual(src *string) bool {

	if p.DriverPath == src {
		return true
	} else if p.DriverPath == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DriverPath, *src) != 0 {
		return false
	}
	return true
}
func (p *TJdbcExecutorCtorParams) Field9DeepEqual(src *TOdbcTableType) bool {

	if p.TableType == src {
		return true
	} else if p.TableType == nil || src == nil {
		return false
	}
	if *p.TableType != *src {
		return false
	}
	return true
}
func (p *TJdbcExecutorCtorParams) Field10DeepEqual(src *int32) bool {

	if p.ConnectionPoolMinSize == src {
		return true
	} else if p.ConnectionPoolMinSize == nil || src == nil {
		return false
	}
	if *p.ConnectionPoolMinSize != *src {
		return false
	}
	return true
}
func (p *TJdbcExecutorCtorParams) Field11DeepEqual(src *int32) bool {

	if p.ConnectionPoolMaxSize == src {
		return true
	} else if p.ConnectionPoolMaxSize == nil || src == nil {
		return false
	}
	if *p.ConnectionPoolMaxSize != *src {
		return false
	}
	return true
}
func (p *TJdbcExecutorCtorParams) Field12DeepEqual(src *int32) bool {

	if p.ConnectionPoolMaxWaitTime == src {
		return true
	} else if p.ConnectionPoolMaxWaitTime == nil || src == nil {
		return false
	}
	if *p.ConnectionPoolMaxWaitTime != *src {
		return false
	}
	return true
}
func (p *TJdbcExecutorCtorParams) Field13DeepEqual(src *int32) bool {

	if p.ConnectionPoolMaxLifeTime == src {
		return true
	} else if p.ConnectionPoolMaxLifeTime == nil || src == nil {
		return false
	}
	if *p.ConnectionPoolMaxLifeTime != *src {
		return false
	}
	return true
}
func (p *TJdbcExecutorCtorParams) Field14DeepEqual(src *int32) bool {

	if p.ConnectionPoolCacheClearTime == src {
		return true
	} else if p.ConnectionPoolCacheClearTime == nil || src == nil {
		return false
	}
	if *p.ConnectionPoolCacheClearTime != *src {
		return false
	}
	return true
}
func (p *TJdbcExecutorCtorParams) Field15DeepEqual(src *bool) bool {

	if p.ConnectionPoolKeepAlive == src {
		return true
	} else if p.ConnectionPoolKeepAlive == nil || src == nil {
		return false
	}
	if *p.ConnectionPoolKeepAlive != *src {
		return false
	}
	return true
}
func (p *TJdbcExecutorCtorParams) Field16DeepEqual(src *int64) bool {

	if p.CatalogId == src {
		return true
	} else if p.CatalogId == nil || src == nil {
		return false
	}
	if *p.CatalogId != *src {
		return false
	}
	return true
}

type TJavaUdfExecutorCtorParams struct {
	Fn                          *TFunction `thrift:"fn,1,optional" frugal:"1,optional,TFunction" json:"fn,omitempty"`
	Location                    *string    `thrift:"location,2,optional" frugal:"2,optional,string" json:"location,omitempty"`
	InputOffsetsPtrs            *int64     `thrift:"input_offsets_ptrs,3,optional" frugal:"3,optional,i64" json:"input_offsets_ptrs,omitempty"`
	InputNullsPtrs              *int64     `thrift:"input_nulls_ptrs,4,optional" frugal:"4,optional,i64" json:"input_nulls_ptrs,omitempty"`
	InputBufferPtrs             *int64     `thrift:"input_buffer_ptrs,5,optional" frugal:"5,optional,i64" json:"input_buffer_ptrs,omitempty"`
	OutputNullPtr               *int64     `thrift:"output_null_ptr,6,optional" frugal:"6,optional,i64" json:"output_null_ptr,omitempty"`
	OutputBufferPtr             *int64     `thrift:"output_buffer_ptr,7,optional" frugal:"7,optional,i64" json:"output_buffer_ptr,omitempty"`
	OutputOffsetsPtr            *int64     `thrift:"output_offsets_ptr,8,optional" frugal:"8,optional,i64" json:"output_offsets_ptr,omitempty"`
	OutputIntermediateStatePtr  *int64     `thrift:"output_intermediate_state_ptr,9,optional" frugal:"9,optional,i64" json:"output_intermediate_state_ptr,omitempty"`
	BatchSizePtr                *int64     `thrift:"batch_size_ptr,10,optional" frugal:"10,optional,i64" json:"batch_size_ptr,omitempty"`
	InputPlacesPtr              *int64     `thrift:"input_places_ptr,11,optional" frugal:"11,optional,i64" json:"input_places_ptr,omitempty"`
	InputArrayNullsBufferPtr    *int64     `thrift:"input_array_nulls_buffer_ptr,12,optional" frugal:"12,optional,i64" json:"input_array_nulls_buffer_ptr,omitempty"`
	InputArrayStringOffsetsPtrs *int64     `thrift:"input_array_string_offsets_ptrs,13,optional" frugal:"13,optional,i64" json:"input_array_string_offsets_ptrs,omitempty"`
	OutputArrayNullPtr          *int64     `thrift:"output_array_null_ptr,14,optional" frugal:"14,optional,i64" json:"output_array_null_ptr,omitempty"`
	OutputArrayStringOffsetsPtr *int64     `thrift:"output_array_string_offsets_ptr,15,optional" frugal:"15,optional,i64" json:"output_array_string_offsets_ptr,omitempty"`
}

func NewTJavaUdfExecutorCtorParams() *TJavaUdfExecutorCtorParams {
	return &TJavaUdfExecutorCtorParams{}
}

func (p *TJavaUdfExecutorCtorParams) InitDefault() {
}

var TJavaUdfExecutorCtorParams_Fn_DEFAULT *TFunction

func (p *TJavaUdfExecutorCtorParams) GetFn() (v *TFunction) {
	if !p.IsSetFn() {
		return TJavaUdfExecutorCtorParams_Fn_DEFAULT
	}
	return p.Fn
}

var TJavaUdfExecutorCtorParams_Location_DEFAULT string

func (p *TJavaUdfExecutorCtorParams) GetLocation() (v string) {
	if !p.IsSetLocation() {
		return TJavaUdfExecutorCtorParams_Location_DEFAULT
	}
	return *p.Location
}

var TJavaUdfExecutorCtorParams_InputOffsetsPtrs_DEFAULT int64

func (p *TJavaUdfExecutorCtorParams) GetInputOffsetsPtrs() (v int64) {
	if !p.IsSetInputOffsetsPtrs() {
		return TJavaUdfExecutorCtorParams_InputOffsetsPtrs_DEFAULT
	}
	return *p.InputOffsetsPtrs
}

var TJavaUdfExecutorCtorParams_InputNullsPtrs_DEFAULT int64

func (p *TJavaUdfExecutorCtorParams) GetInputNullsPtrs() (v int64) {
	if !p.IsSetInputNullsPtrs() {
		return TJavaUdfExecutorCtorParams_InputNullsPtrs_DEFAULT
	}
	return *p.InputNullsPtrs
}

var TJavaUdfExecutorCtorParams_InputBufferPtrs_DEFAULT int64

func (p *TJavaUdfExecutorCtorParams) GetInputBufferPtrs() (v int64) {
	if !p.IsSetInputBufferPtrs() {
		return TJavaUdfExecutorCtorParams_InputBufferPtrs_DEFAULT
	}
	return *p.InputBufferPtrs
}

var TJavaUdfExecutorCtorParams_OutputNullPtr_DEFAULT int64

func (p *TJavaUdfExecutorCtorParams) GetOutputNullPtr() (v int64) {
	if !p.IsSetOutputNullPtr() {
		return TJavaUdfExecutorCtorParams_OutputNullPtr_DEFAULT
	}
	return *p.OutputNullPtr
}

var TJavaUdfExecutorCtorParams_OutputBufferPtr_DEFAULT int64

func (p *TJavaUdfExecutorCtorParams) GetOutputBufferPtr() (v int64) {
	if !p.IsSetOutputBufferPtr() {
		return TJavaUdfExecutorCtorParams_OutputBufferPtr_DEFAULT
	}
	return *p.OutputBufferPtr
}

var TJavaUdfExecutorCtorParams_OutputOffsetsPtr_DEFAULT int64

func (p *TJavaUdfExecutorCtorParams) GetOutputOffsetsPtr() (v int64) {
	if !p.IsSetOutputOffsetsPtr() {
		return TJavaUdfExecutorCtorParams_OutputOffsetsPtr_DEFAULT
	}
	return *p.OutputOffsetsPtr
}

var TJavaUdfExecutorCtorParams_OutputIntermediateStatePtr_DEFAULT int64

func (p *TJavaUdfExecutorCtorParams) GetOutputIntermediateStatePtr() (v int64) {
	if !p.IsSetOutputIntermediateStatePtr() {
		return TJavaUdfExecutorCtorParams_OutputIntermediateStatePtr_DEFAULT
	}
	return *p.OutputIntermediateStatePtr
}

var TJavaUdfExecutorCtorParams_BatchSizePtr_DEFAULT int64

func (p *TJavaUdfExecutorCtorParams) GetBatchSizePtr() (v int64) {
	if !p.IsSetBatchSizePtr() {
		return TJavaUdfExecutorCtorParams_BatchSizePtr_DEFAULT
	}
	return *p.BatchSizePtr
}

var TJavaUdfExecutorCtorParams_InputPlacesPtr_DEFAULT int64

func (p *TJavaUdfExecutorCtorParams) GetInputPlacesPtr() (v int64) {
	if !p.IsSetInputPlacesPtr() {
		return TJavaUdfExecutorCtorParams_InputPlacesPtr_DEFAULT
	}
	return *p.InputPlacesPtr
}

var TJavaUdfExecutorCtorParams_InputArrayNullsBufferPtr_DEFAULT int64

func (p *TJavaUdfExecutorCtorParams) GetInputArrayNullsBufferPtr() (v int64) {
	if !p.IsSetInputArrayNullsBufferPtr() {
		return TJavaUdfExecutorCtorParams_InputArrayNullsBufferPtr_DEFAULT
	}
	return *p.InputArrayNullsBufferPtr
}

var TJavaUdfExecutorCtorParams_InputArrayStringOffsetsPtrs_DEFAULT int64

func (p *TJavaUdfExecutorCtorParams) GetInputArrayStringOffsetsPtrs() (v int64) {
	if !p.IsSetInputArrayStringOffsetsPtrs() {
		return TJavaUdfExecutorCtorParams_InputArrayStringOffsetsPtrs_DEFAULT
	}
	return *p.InputArrayStringOffsetsPtrs
}

var TJavaUdfExecutorCtorParams_OutputArrayNullPtr_DEFAULT int64

func (p *TJavaUdfExecutorCtorParams) GetOutputArrayNullPtr() (v int64) {
	if !p.IsSetOutputArrayNullPtr() {
		return TJavaUdfExecutorCtorParams_OutputArrayNullPtr_DEFAULT
	}
	return *p.OutputArrayNullPtr
}

var TJavaUdfExecutorCtorParams_OutputArrayStringOffsetsPtr_DEFAULT int64

func (p *TJavaUdfExecutorCtorParams) GetOutputArrayStringOffsetsPtr() (v int64) {
	if !p.IsSetOutputArrayStringOffsetsPtr() {
		return TJavaUdfExecutorCtorParams_OutputArrayStringOffsetsPtr_DEFAULT
	}
	return *p.OutputArrayStringOffsetsPtr
}
func (p *TJavaUdfExecutorCtorParams) SetFn(val *TFunction) {
	p.Fn = val
}
func (p *TJavaUdfExecutorCtorParams) SetLocation(val *string) {
	p.Location = val
}
func (p *TJavaUdfExecutorCtorParams) SetInputOffsetsPtrs(val *int64) {
	p.InputOffsetsPtrs = val
}
func (p *TJavaUdfExecutorCtorParams) SetInputNullsPtrs(val *int64) {
	p.InputNullsPtrs = val
}
func (p *TJavaUdfExecutorCtorParams) SetInputBufferPtrs(val *int64) {
	p.InputBufferPtrs = val
}
func (p *TJavaUdfExecutorCtorParams) SetOutputNullPtr(val *int64) {
	p.OutputNullPtr = val
}
func (p *TJavaUdfExecutorCtorParams) SetOutputBufferPtr(val *int64) {
	p.OutputBufferPtr = val
}
func (p *TJavaUdfExecutorCtorParams) SetOutputOffsetsPtr(val *int64) {
	p.OutputOffsetsPtr = val
}
func (p *TJavaUdfExecutorCtorParams) SetOutputIntermediateStatePtr(val *int64) {
	p.OutputIntermediateStatePtr = val
}
func (p *TJavaUdfExecutorCtorParams) SetBatchSizePtr(val *int64) {
	p.BatchSizePtr = val
}
func (p *TJavaUdfExecutorCtorParams) SetInputPlacesPtr(val *int64) {
	p.InputPlacesPtr = val
}
func (p *TJavaUdfExecutorCtorParams) SetInputArrayNullsBufferPtr(val *int64) {
	p.InputArrayNullsBufferPtr = val
}
func (p *TJavaUdfExecutorCtorParams) SetInputArrayStringOffsetsPtrs(val *int64) {
	p.InputArrayStringOffsetsPtrs = val
}
func (p *TJavaUdfExecutorCtorParams) SetOutputArrayNullPtr(val *int64) {
	p.OutputArrayNullPtr = val
}
func (p *TJavaUdfExecutorCtorParams) SetOutputArrayStringOffsetsPtr(val *int64) {
	p.OutputArrayStringOffsetsPtr = val
}

var fieldIDToName_TJavaUdfExecutorCtorParams = map[int16]string{
	1:  "fn",
	2:  "location",
	3:  "input_offsets_ptrs",
	4:  "input_nulls_ptrs",
	5:  "input_buffer_ptrs",
	6:  "output_null_ptr",
	7:  "output_buffer_ptr",
	8:  "output_offsets_ptr",
	9:  "output_intermediate_state_ptr",
	10: "batch_size_ptr",
	11: "input_places_ptr",
	12: "input_array_nulls_buffer_ptr",
	13: "input_array_string_offsets_ptrs",
	14: "output_array_null_ptr",
	15: "output_array_string_offsets_ptr",
}

func (p *TJavaUdfExecutorCtorParams) IsSetFn() bool {
	return p.Fn != nil
}

func (p *TJavaUdfExecutorCtorParams) IsSetLocation() bool {
	return p.Location != nil
}

func (p *TJavaUdfExecutorCtorParams) IsSetInputOffsetsPtrs() bool {
	return p.InputOffsetsPtrs != nil
}

func (p *TJavaUdfExecutorCtorParams) IsSetInputNullsPtrs() bool {
	return p.InputNullsPtrs != nil
}

func (p *TJavaUdfExecutorCtorParams) IsSetInputBufferPtrs() bool {
	return p.InputBufferPtrs != nil
}

func (p *TJavaUdfExecutorCtorParams) IsSetOutputNullPtr() bool {
	return p.OutputNullPtr != nil
}

func (p *TJavaUdfExecutorCtorParams) IsSetOutputBufferPtr() bool {
	return p.OutputBufferPtr != nil
}

func (p *TJavaUdfExecutorCtorParams) IsSetOutputOffsetsPtr() bool {
	return p.OutputOffsetsPtr != nil
}

func (p *TJavaUdfExecutorCtorParams) IsSetOutputIntermediateStatePtr() bool {
	return p.OutputIntermediateStatePtr != nil
}

func (p *TJavaUdfExecutorCtorParams) IsSetBatchSizePtr() bool {
	return p.BatchSizePtr != nil
}

func (p *TJavaUdfExecutorCtorParams) IsSetInputPlacesPtr() bool {
	return p.InputPlacesPtr != nil
}

func (p *TJavaUdfExecutorCtorParams) IsSetInputArrayNullsBufferPtr() bool {
	return p.InputArrayNullsBufferPtr != nil
}

func (p *TJavaUdfExecutorCtorParams) IsSetInputArrayStringOffsetsPtrs() bool {
	return p.InputArrayStringOffsetsPtrs != nil
}

func (p *TJavaUdfExecutorCtorParams) IsSetOutputArrayNullPtr() bool {
	return p.OutputArrayNullPtr != nil
}

func (p *TJavaUdfExecutorCtorParams) IsSetOutputArrayStringOffsetsPtr() bool {
	return p.OutputArrayStringOffsetsPtr != nil
}

func (p *TJavaUdfExecutorCtorParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TJavaUdfExecutorCtorParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TJavaUdfExecutorCtorParams) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTFunction()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Fn = _field
	return nil
}
func (p *TJavaUdfExecutorCtorParams) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Location = _field
	return nil
}
func (p *TJavaUdfExecutorCtorParams) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InputOffsetsPtrs = _field
	return nil
}
func (p *TJavaUdfExecutorCtorParams) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InputNullsPtrs = _field
	return nil
}
func (p *TJavaUdfExecutorCtorParams) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InputBufferPtrs = _field
	return nil
}
func (p *TJavaUdfExecutorCtorParams) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OutputNullPtr = _field
	return nil
}
func (p *TJavaUdfExecutorCtorParams) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OutputBufferPtr = _field
	return nil
}
func (p *TJavaUdfExecutorCtorParams) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OutputOffsetsPtr = _field
	return nil
}
func (p *TJavaUdfExecutorCtorParams) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OutputIntermediateStatePtr = _field
	return nil
}
func (p *TJavaUdfExecutorCtorParams) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BatchSizePtr = _field
	return nil
}
func (p *TJavaUdfExecutorCtorParams) ReadField11(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InputPlacesPtr = _field
	return nil
}
func (p *TJavaUdfExecutorCtorParams) ReadField12(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InputArrayNullsBufferPtr = _field
	return nil
}
func (p *TJavaUdfExecutorCtorParams) ReadField13(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InputArrayStringOffsetsPtrs = _field
	return nil
}
func (p *TJavaUdfExecutorCtorParams) ReadField14(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OutputArrayNullPtr = _field
	return nil
}
func (p *TJavaUdfExecutorCtorParams) ReadField15(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OutputArrayStringOffsetsPtr = _field
	return nil
}

func (p *TJavaUdfExecutorCtorParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TJavaUdfExecutorCtorParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TJavaUdfExecutorCtorParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFn() {
		if err = oprot.WriteFieldBegin("fn", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Fn.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TJavaUdfExecutorCtorParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocation() {
		if err = oprot.WriteFieldBegin("location", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Location); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TJavaUdfExecutorCtorParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputOffsetsPtrs() {
		if err = oprot.WriteFieldBegin("input_offsets_ptrs", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.InputOffsetsPtrs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TJavaUdfExecutorCtorParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputNullsPtrs() {
		if err = oprot.WriteFieldBegin("input_nulls_ptrs", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.InputNullsPtrs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TJavaUdfExecutorCtorParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputBufferPtrs() {
		if err = oprot.WriteFieldBegin("input_buffer_ptrs", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.InputBufferPtrs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TJavaUdfExecutorCtorParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputNullPtr() {
		if err = oprot.WriteFieldBegin("output_null_ptr", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.OutputNullPtr); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TJavaUdfExecutorCtorParams) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputBufferPtr() {
		if err = oprot.WriteFieldBegin("output_buffer_ptr", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.OutputBufferPtr); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TJavaUdfExecutorCtorParams) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputOffsetsPtr() {
		if err = oprot.WriteFieldBegin("output_offsets_ptr", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.OutputOffsetsPtr); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TJavaUdfExecutorCtorParams) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputIntermediateStatePtr() {
		if err = oprot.WriteFieldBegin("output_intermediate_state_ptr", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.OutputIntermediateStatePtr); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TJavaUdfExecutorCtorParams) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetBatchSizePtr() {
		if err = oprot.WriteFieldBegin("batch_size_ptr", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BatchSizePtr); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TJavaUdfExecutorCtorParams) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputPlacesPtr() {
		if err = oprot.WriteFieldBegin("input_places_ptr", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.InputPlacesPtr); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TJavaUdfExecutorCtorParams) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputArrayNullsBufferPtr() {
		if err = oprot.WriteFieldBegin("input_array_nulls_buffer_ptr", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.InputArrayNullsBufferPtr); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TJavaUdfExecutorCtorParams) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputArrayStringOffsetsPtrs() {
		if err = oprot.WriteFieldBegin("input_array_string_offsets_ptrs", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.InputArrayStringOffsetsPtrs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TJavaUdfExecutorCtorParams) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputArrayNullPtr() {
		if err = oprot.WriteFieldBegin("output_array_null_ptr", thrift.I64, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.OutputArrayNullPtr); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TJavaUdfExecutorCtorParams) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputArrayStringOffsetsPtr() {
		if err = oprot.WriteFieldBegin("output_array_string_offsets_ptr", thrift.I64, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.OutputArrayStringOffsetsPtr); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TJavaUdfExecutorCtorParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TJavaUdfExecutorCtorParams(%+v)", *p)

}

func (p *TJavaUdfExecutorCtorParams) DeepEqual(ano *TJavaUdfExecutorCtorParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Fn) {
		return false
	}
	if !p.Field2DeepEqual(ano.Location) {
		return false
	}
	if !p.Field3DeepEqual(ano.InputOffsetsPtrs) {
		return false
	}
	if !p.Field4DeepEqual(ano.InputNullsPtrs) {
		return false
	}
	if !p.Field5DeepEqual(ano.InputBufferPtrs) {
		return false
	}
	if !p.Field6DeepEqual(ano.OutputNullPtr) {
		return false
	}
	if !p.Field7DeepEqual(ano.OutputBufferPtr) {
		return false
	}
	if !p.Field8DeepEqual(ano.OutputOffsetsPtr) {
		return false
	}
	if !p.Field9DeepEqual(ano.OutputIntermediateStatePtr) {
		return false
	}
	if !p.Field10DeepEqual(ano.BatchSizePtr) {
		return false
	}
	if !p.Field11DeepEqual(ano.InputPlacesPtr) {
		return false
	}
	if !p.Field12DeepEqual(ano.InputArrayNullsBufferPtr) {
		return false
	}
	if !p.Field13DeepEqual(ano.InputArrayStringOffsetsPtrs) {
		return false
	}
	if !p.Field14DeepEqual(ano.OutputArrayNullPtr) {
		return false
	}
	if !p.Field15DeepEqual(ano.OutputArrayStringOffsetsPtr) {
		return false
	}
	return true
}

func (p *TJavaUdfExecutorCtorParams) Field1DeepEqual(src *TFunction) bool {

	if !p.Fn.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TJavaUdfExecutorCtorParams) Field2DeepEqual(src *string) bool {

	if p.Location == src {
		return true
	} else if p.Location == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Location, *src) != 0 {
		return false
	}
	return true
}
func (p *TJavaUdfExecutorCtorParams) Field3DeepEqual(src *int64) bool {

	if p.InputOffsetsPtrs == src {
		return true
	} else if p.InputOffsetsPtrs == nil || src == nil {
		return false
	}
	if *p.InputOffsetsPtrs != *src {
		return false
	}
	return true
}
func (p *TJavaUdfExecutorCtorParams) Field4DeepEqual(src *int64) bool {

	if p.InputNullsPtrs == src {
		return true
	} else if p.InputNullsPtrs == nil || src == nil {
		return false
	}
	if *p.InputNullsPtrs != *src {
		return false
	}
	return true
}
func (p *TJavaUdfExecutorCtorParams) Field5DeepEqual(src *int64) bool {

	if p.InputBufferPtrs == src {
		return true
	} else if p.InputBufferPtrs == nil || src == nil {
		return false
	}
	if *p.InputBufferPtrs != *src {
		return false
	}
	return true
}
func (p *TJavaUdfExecutorCtorParams) Field6DeepEqual(src *int64) bool {

	if p.OutputNullPtr == src {
		return true
	} else if p.OutputNullPtr == nil || src == nil {
		return false
	}
	if *p.OutputNullPtr != *src {
		return false
	}
	return true
}
func (p *TJavaUdfExecutorCtorParams) Field7DeepEqual(src *int64) bool {

	if p.OutputBufferPtr == src {
		return true
	} else if p.OutputBufferPtr == nil || src == nil {
		return false
	}
	if *p.OutputBufferPtr != *src {
		return false
	}
	return true
}
func (p *TJavaUdfExecutorCtorParams) Field8DeepEqual(src *int64) bool {

	if p.OutputOffsetsPtr == src {
		return true
	} else if p.OutputOffsetsPtr == nil || src == nil {
		return false
	}
	if *p.OutputOffsetsPtr != *src {
		return false
	}
	return true
}
func (p *TJavaUdfExecutorCtorParams) Field9DeepEqual(src *int64) bool {

	if p.OutputIntermediateStatePtr == src {
		return true
	} else if p.OutputIntermediateStatePtr == nil || src == nil {
		return false
	}
	if *p.OutputIntermediateStatePtr != *src {
		return false
	}
	return true
}
func (p *TJavaUdfExecutorCtorParams) Field10DeepEqual(src *int64) bool {

	if p.BatchSizePtr == src {
		return true
	} else if p.BatchSizePtr == nil || src == nil {
		return false
	}
	if *p.BatchSizePtr != *src {
		return false
	}
	return true
}
func (p *TJavaUdfExecutorCtorParams) Field11DeepEqual(src *int64) bool {

	if p.InputPlacesPtr == src {
		return true
	} else if p.InputPlacesPtr == nil || src == nil {
		return false
	}
	if *p.InputPlacesPtr != *src {
		return false
	}
	return true
}
func (p *TJavaUdfExecutorCtorParams) Field12DeepEqual(src *int64) bool {

	if p.InputArrayNullsBufferPtr == src {
		return true
	} else if p.InputArrayNullsBufferPtr == nil || src == nil {
		return false
	}
	if *p.InputArrayNullsBufferPtr != *src {
		return false
	}
	return true
}
func (p *TJavaUdfExecutorCtorParams) Field13DeepEqual(src *int64) bool {

	if p.InputArrayStringOffsetsPtrs == src {
		return true
	} else if p.InputArrayStringOffsetsPtrs == nil || src == nil {
		return false
	}
	if *p.InputArrayStringOffsetsPtrs != *src {
		return false
	}
	return true
}
func (p *TJavaUdfExecutorCtorParams) Field14DeepEqual(src *int64) bool {

	if p.OutputArrayNullPtr == src {
		return true
	} else if p.OutputArrayNullPtr == nil || src == nil {
		return false
	}
	if *p.OutputArrayNullPtr != *src {
		return false
	}
	return true
}
func (p *TJavaUdfExecutorCtorParams) Field15DeepEqual(src *int64) bool {

	if p.OutputArrayStringOffsetsPtr == src {
		return true
	} else if p.OutputArrayStringOffsetsPtr == nil || src == nil {
		return false
	}
	if *p.OutputArrayStringOffsetsPtr != *src {
		return false
	}
	return true
}

type TJvmMemoryPool struct {
	Committed     int64  `thrift:"committed,1,required" frugal:"1,required,i64" json:"committed"`
	Init          int64  `thrift:"init,2,required" frugal:"2,required,i64" json:"init"`
	Max           int64  `thrift:"max,3,required" frugal:"3,required,i64" json:"max"`
	Used          int64  `thrift:"used,4,required" frugal:"4,required,i64" json:"used"`
	PeakCommitted int64  `thrift:"peak_committed,5,required" frugal:"5,required,i64" json:"peak_committed"`
	PeakInit      int64  `thrift:"peak_init,6,required" frugal:"6,required,i64" json:"peak_init"`
	PeakMax       int64  `thrift:"peak_max,7,required" frugal:"7,required,i64" json:"peak_max"`
	PeakUsed      int64  `thrift:"peak_used,8,required" frugal:"8,required,i64" json:"peak_used"`
	Name          string `thrift:"name,9,required" frugal:"9,required,string" json:"name"`
}

func NewTJvmMemoryPool() *TJvmMemoryPool {
	return &TJvmMemoryPool{}
}

func (p *TJvmMemoryPool) InitDefault() {
}

func (p *TJvmMemoryPool) GetCommitted() (v int64) {
	return p.Committed
}

func (p *TJvmMemoryPool) GetInit() (v int64) {
	return p.Init
}

func (p *TJvmMemoryPool) GetMax() (v int64) {
	return p.Max
}

func (p *TJvmMemoryPool) GetUsed() (v int64) {
	return p.Used
}

func (p *TJvmMemoryPool) GetPeakCommitted() (v int64) {
	return p.PeakCommitted
}

func (p *TJvmMemoryPool) GetPeakInit() (v int64) {
	return p.PeakInit
}

func (p *TJvmMemoryPool) GetPeakMax() (v int64) {
	return p.PeakMax
}

func (p *TJvmMemoryPool) GetPeakUsed() (v int64) {
	return p.PeakUsed
}

func (p *TJvmMemoryPool) GetName() (v string) {
	return p.Name
}
func (p *TJvmMemoryPool) SetCommitted(val int64) {
	p.Committed = val
}
func (p *TJvmMemoryPool) SetInit(val int64) {
	p.Init = val
}
func (p *TJvmMemoryPool) SetMax(val int64) {
	p.Max = val
}
func (p *TJvmMemoryPool) SetUsed(val int64) {
	p.Used = val
}
func (p *TJvmMemoryPool) SetPeakCommitted(val int64) {
	p.PeakCommitted = val
}
func (p *TJvmMemoryPool) SetPeakInit(val int64) {
	p.PeakInit = val
}
func (p *TJvmMemoryPool) SetPeakMax(val int64) {
	p.PeakMax = val
}
func (p *TJvmMemoryPool) SetPeakUsed(val int64) {
	p.PeakUsed = val
}
func (p *TJvmMemoryPool) SetName(val string) {
	p.Name = val
}

var fieldIDToName_TJvmMemoryPool = map[int16]string{
	1: "committed",
	2: "init",
	3: "max",
	4: "used",
	5: "peak_committed",
	6: "peak_init",
	7: "peak_max",
	8: "peak_used",
	9: "name",
}

func (p *TJvmMemoryPool) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCommitted bool = false
	var issetInit bool = false
	var issetMax bool = false
	var issetUsed bool = false
	var issetPeakCommitted bool = false
	var issetPeakInit bool = false
	var issetPeakMax bool = false
	var issetPeakUsed bool = false
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCommitted = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetInit = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetMax = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsed = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetPeakCommitted = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetPeakInit = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetPeakMax = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetPeakUsed = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCommitted {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetInit {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetMax {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetUsed {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetPeakCommitted {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetPeakInit {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetPeakMax {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetPeakUsed {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 9
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TJvmMemoryPool[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TJvmMemoryPool[fieldId]))
}

func (p *TJvmMemoryPool) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Committed = _field
	return nil
}
func (p *TJvmMemoryPool) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Init = _field
	return nil
}
func (p *TJvmMemoryPool) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Max = _field
	return nil
}
func (p *TJvmMemoryPool) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Used = _field
	return nil
}
func (p *TJvmMemoryPool) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PeakCommitted = _field
	return nil
}
func (p *TJvmMemoryPool) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PeakInit = _field
	return nil
}
func (p *TJvmMemoryPool) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PeakMax = _field
	return nil
}
func (p *TJvmMemoryPool) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PeakUsed = _field
	return nil
}
func (p *TJvmMemoryPool) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}

func (p *TJvmMemoryPool) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TJvmMemoryPool"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TJvmMemoryPool) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("committed", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Committed); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TJvmMemoryPool) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("init", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Init); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TJvmMemoryPool) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("max", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Max); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TJvmMemoryPool) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("used", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Used); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TJvmMemoryPool) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("peak_committed", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PeakCommitted); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TJvmMemoryPool) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("peak_init", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PeakInit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TJvmMemoryPool) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("peak_max", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PeakMax); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TJvmMemoryPool) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("peak_used", thrift.I64, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PeakUsed); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TJvmMemoryPool) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TJvmMemoryPool) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TJvmMemoryPool(%+v)", *p)

}

func (p *TJvmMemoryPool) DeepEqual(ano *TJvmMemoryPool) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Committed) {
		return false
	}
	if !p.Field2DeepEqual(ano.Init) {
		return false
	}
	if !p.Field3DeepEqual(ano.Max) {
		return false
	}
	if !p.Field4DeepEqual(ano.Used) {
		return false
	}
	if !p.Field5DeepEqual(ano.PeakCommitted) {
		return false
	}
	if !p.Field6DeepEqual(ano.PeakInit) {
		return false
	}
	if !p.Field7DeepEqual(ano.PeakMax) {
		return false
	}
	if !p.Field8DeepEqual(ano.PeakUsed) {
		return false
	}
	if !p.Field9DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *TJvmMemoryPool) Field1DeepEqual(src int64) bool {

	if p.Committed != src {
		return false
	}
	return true
}
func (p *TJvmMemoryPool) Field2DeepEqual(src int64) bool {

	if p.Init != src {
		return false
	}
	return true
}
func (p *TJvmMemoryPool) Field3DeepEqual(src int64) bool {

	if p.Max != src {
		return false
	}
	return true
}
func (p *TJvmMemoryPool) Field4DeepEqual(src int64) bool {

	if p.Used != src {
		return false
	}
	return true
}
func (p *TJvmMemoryPool) Field5DeepEqual(src int64) bool {

	if p.PeakCommitted != src {
		return false
	}
	return true
}
func (p *TJvmMemoryPool) Field6DeepEqual(src int64) bool {

	if p.PeakInit != src {
		return false
	}
	return true
}
func (p *TJvmMemoryPool) Field7DeepEqual(src int64) bool {

	if p.PeakMax != src {
		return false
	}
	return true
}
func (p *TJvmMemoryPool) Field8DeepEqual(src int64) bool {

	if p.PeakUsed != src {
		return false
	}
	return true
}
func (p *TJvmMemoryPool) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}

type TGetJvmMemoryMetricsResponse struct {
	MemoryPools                 []*TJvmMemoryPool `thrift:"memory_pools,1,required" frugal:"1,required,list<TJvmMemoryPool>" json:"memory_pools"`
	GcNumWarnThresholdExceeded  int64             `thrift:"gc_num_warn_threshold_exceeded,2,required" frugal:"2,required,i64" json:"gc_num_warn_threshold_exceeded"`
	GcNumInfoThresholdExceeded  int64             `thrift:"gc_num_info_threshold_exceeded,3,required" frugal:"3,required,i64" json:"gc_num_info_threshold_exceeded"`
	GcTotalExtraSleepTimeMillis int64             `thrift:"gc_total_extra_sleep_time_millis,4,required" frugal:"4,required,i64" json:"gc_total_extra_sleep_time_millis"`
	GcCount                     int64             `thrift:"gc_count,5,required" frugal:"5,required,i64" json:"gc_count"`
	GcTimeMillis                int64             `thrift:"gc_time_millis,6,required" frugal:"6,required,i64" json:"gc_time_millis"`
}

func NewTGetJvmMemoryMetricsResponse() *TGetJvmMemoryMetricsResponse {
	return &TGetJvmMemoryMetricsResponse{}
}

func (p *TGetJvmMemoryMetricsResponse) InitDefault() {
}

func (p *TGetJvmMemoryMetricsResponse) GetMemoryPools() (v []*TJvmMemoryPool) {
	return p.MemoryPools
}

func (p *TGetJvmMemoryMetricsResponse) GetGcNumWarnThresholdExceeded() (v int64) {
	return p.GcNumWarnThresholdExceeded
}

func (p *TGetJvmMemoryMetricsResponse) GetGcNumInfoThresholdExceeded() (v int64) {
	return p.GcNumInfoThresholdExceeded
}

func (p *TGetJvmMemoryMetricsResponse) GetGcTotalExtraSleepTimeMillis() (v int64) {
	return p.GcTotalExtraSleepTimeMillis
}

func (p *TGetJvmMemoryMetricsResponse) GetGcCount() (v int64) {
	return p.GcCount
}

func (p *TGetJvmMemoryMetricsResponse) GetGcTimeMillis() (v int64) {
	return p.GcTimeMillis
}
func (p *TGetJvmMemoryMetricsResponse) SetMemoryPools(val []*TJvmMemoryPool) {
	p.MemoryPools = val
}
func (p *TGetJvmMemoryMetricsResponse) SetGcNumWarnThresholdExceeded(val int64) {
	p.GcNumWarnThresholdExceeded = val
}
func (p *TGetJvmMemoryMetricsResponse) SetGcNumInfoThresholdExceeded(val int64) {
	p.GcNumInfoThresholdExceeded = val
}
func (p *TGetJvmMemoryMetricsResponse) SetGcTotalExtraSleepTimeMillis(val int64) {
	p.GcTotalExtraSleepTimeMillis = val
}
func (p *TGetJvmMemoryMetricsResponse) SetGcCount(val int64) {
	p.GcCount = val
}
func (p *TGetJvmMemoryMetricsResponse) SetGcTimeMillis(val int64) {
	p.GcTimeMillis = val
}

var fieldIDToName_TGetJvmMemoryMetricsResponse = map[int16]string{
	1: "memory_pools",
	2: "gc_num_warn_threshold_exceeded",
	3: "gc_num_info_threshold_exceeded",
	4: "gc_total_extra_sleep_time_millis",
	5: "gc_count",
	6: "gc_time_millis",
}

func (p *TGetJvmMemoryMetricsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetMemoryPools bool = false
	var issetGcNumWarnThresholdExceeded bool = false
	var issetGcNumInfoThresholdExceeded bool = false
	var issetGcTotalExtraSleepTimeMillis bool = false
	var issetGcCount bool = false
	var issetGcTimeMillis bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetMemoryPools = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetGcNumWarnThresholdExceeded = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetGcNumInfoThresholdExceeded = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetGcTotalExtraSleepTimeMillis = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetGcCount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetGcTimeMillis = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetMemoryPools {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetGcNumWarnThresholdExceeded {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetGcNumInfoThresholdExceeded {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetGcTotalExtraSleepTimeMillis {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetGcCount {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetGcTimeMillis {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetJvmMemoryMetricsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TGetJvmMemoryMetricsResponse[fieldId]))
}

func (p *TGetJvmMemoryMetricsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TJvmMemoryPool, 0, size)
	values := make([]TJvmMemoryPool, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MemoryPools = _field
	return nil
}
func (p *TGetJvmMemoryMetricsResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GcNumWarnThresholdExceeded = _field
	return nil
}
func (p *TGetJvmMemoryMetricsResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GcNumInfoThresholdExceeded = _field
	return nil
}
func (p *TGetJvmMemoryMetricsResponse) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GcTotalExtraSleepTimeMillis = _field
	return nil
}
func (p *TGetJvmMemoryMetricsResponse) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GcCount = _field
	return nil
}
func (p *TGetJvmMemoryMetricsResponse) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GcTimeMillis = _field
	return nil
}

func (p *TGetJvmMemoryMetricsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetJvmMemoryMetricsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetJvmMemoryMetricsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("memory_pools", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MemoryPools)); err != nil {
		return err
	}
	for _, v := range p.MemoryPools {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetJvmMemoryMetricsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gc_num_warn_threshold_exceeded", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GcNumWarnThresholdExceeded); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetJvmMemoryMetricsResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gc_num_info_threshold_exceeded", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GcNumInfoThresholdExceeded); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetJvmMemoryMetricsResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gc_total_extra_sleep_time_millis", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GcTotalExtraSleepTimeMillis); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TGetJvmMemoryMetricsResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gc_count", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GcCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TGetJvmMemoryMetricsResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gc_time_millis", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GcTimeMillis); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TGetJvmMemoryMetricsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetJvmMemoryMetricsResponse(%+v)", *p)

}

func (p *TGetJvmMemoryMetricsResponse) DeepEqual(ano *TGetJvmMemoryMetricsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MemoryPools) {
		return false
	}
	if !p.Field2DeepEqual(ano.GcNumWarnThresholdExceeded) {
		return false
	}
	if !p.Field3DeepEqual(ano.GcNumInfoThresholdExceeded) {
		return false
	}
	if !p.Field4DeepEqual(ano.GcTotalExtraSleepTimeMillis) {
		return false
	}
	if !p.Field5DeepEqual(ano.GcCount) {
		return false
	}
	if !p.Field6DeepEqual(ano.GcTimeMillis) {
		return false
	}
	return true
}

func (p *TGetJvmMemoryMetricsResponse) Field1DeepEqual(src []*TJvmMemoryPool) bool {

	if len(p.MemoryPools) != len(src) {
		return false
	}
	for i, v := range p.MemoryPools {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TGetJvmMemoryMetricsResponse) Field2DeepEqual(src int64) bool {

	if p.GcNumWarnThresholdExceeded != src {
		return false
	}
	return true
}
func (p *TGetJvmMemoryMetricsResponse) Field3DeepEqual(src int64) bool {

	if p.GcNumInfoThresholdExceeded != src {
		return false
	}
	return true
}
func (p *TGetJvmMemoryMetricsResponse) Field4DeepEqual(src int64) bool {

	if p.GcTotalExtraSleepTimeMillis != src {
		return false
	}
	return true
}
func (p *TGetJvmMemoryMetricsResponse) Field5DeepEqual(src int64) bool {

	if p.GcCount != src {
		return false
	}
	return true
}
func (p *TGetJvmMemoryMetricsResponse) Field6DeepEqual(src int64) bool {

	if p.GcTimeMillis != src {
		return false
	}
	return true
}

type TJvmThreadInfo struct {
	Summary         string `thrift:"summary,1,required" frugal:"1,required,string" json:"summary"`
	CpuTimeInNs     int64  `thrift:"cpu_time_in_ns,2,required" frugal:"2,required,i64" json:"cpu_time_in_ns"`
	UserTimeInNs    int64  `thrift:"user_time_in_ns,3,required" frugal:"3,required,i64" json:"user_time_in_ns"`
	BlockedCount    int64  `thrift:"blocked_count,4,required" frugal:"4,required,i64" json:"blocked_count"`
	BlockedTimeInMs int64  `thrift:"blocked_time_in_ms,5,required" frugal:"5,required,i64" json:"blocked_time_in_ms"`
	IsInNative      bool   `thrift:"is_in_native,6,required" frugal:"6,required,bool" json:"is_in_native"`
}

func NewTJvmThreadInfo() *TJvmThreadInfo {
	return &TJvmThreadInfo{}
}

func (p *TJvmThreadInfo) InitDefault() {
}

func (p *TJvmThreadInfo) GetSummary() (v string) {
	return p.Summary
}

func (p *TJvmThreadInfo) GetCpuTimeInNs() (v int64) {
	return p.CpuTimeInNs
}

func (p *TJvmThreadInfo) GetUserTimeInNs() (v int64) {
	return p.UserTimeInNs
}

func (p *TJvmThreadInfo) GetBlockedCount() (v int64) {
	return p.BlockedCount
}

func (p *TJvmThreadInfo) GetBlockedTimeInMs() (v int64) {
	return p.BlockedTimeInMs
}

func (p *TJvmThreadInfo) GetIsInNative() (v bool) {
	return p.IsInNative
}
func (p *TJvmThreadInfo) SetSummary(val string) {
	p.Summary = val
}
func (p *TJvmThreadInfo) SetCpuTimeInNs(val int64) {
	p.CpuTimeInNs = val
}
func (p *TJvmThreadInfo) SetUserTimeInNs(val int64) {
	p.UserTimeInNs = val
}
func (p *TJvmThreadInfo) SetBlockedCount(val int64) {
	p.BlockedCount = val
}
func (p *TJvmThreadInfo) SetBlockedTimeInMs(val int64) {
	p.BlockedTimeInMs = val
}
func (p *TJvmThreadInfo) SetIsInNative(val bool) {
	p.IsInNative = val
}

var fieldIDToName_TJvmThreadInfo = map[int16]string{
	1: "summary",
	2: "cpu_time_in_ns",
	3: "user_time_in_ns",
	4: "blocked_count",
	5: "blocked_time_in_ms",
	6: "is_in_native",
}

func (p *TJvmThreadInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSummary bool = false
	var issetCpuTimeInNs bool = false
	var issetUserTimeInNs bool = false
	var issetBlockedCount bool = false
	var issetBlockedTimeInMs bool = false
	var issetIsInNative bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetSummary = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCpuTimeInNs = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserTimeInNs = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetBlockedCount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetBlockedTimeInMs = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsInNative = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSummary {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCpuTimeInNs {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetUserTimeInNs {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetBlockedCount {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetBlockedTimeInMs {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetIsInNative {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TJvmThreadInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TJvmThreadInfo[fieldId]))
}

func (p *TJvmThreadInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Summary = _field
	return nil
}
func (p *TJvmThreadInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CpuTimeInNs = _field
	return nil
}
func (p *TJvmThreadInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserTimeInNs = _field
	return nil
}
func (p *TJvmThreadInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BlockedCount = _field
	return nil
}
func (p *TJvmThreadInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BlockedTimeInMs = _field
	return nil
}
func (p *TJvmThreadInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsInNative = _field
	return nil
}

func (p *TJvmThreadInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TJvmThreadInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TJvmThreadInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("summary", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Summary); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TJvmThreadInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cpu_time_in_ns", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CpuTimeInNs); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TJvmThreadInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_time_in_ns", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserTimeInNs); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TJvmThreadInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("blocked_count", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.BlockedCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TJvmThreadInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("blocked_time_in_ms", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.BlockedTimeInMs); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TJvmThreadInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_in_native", thrift.BOOL, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsInNative); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TJvmThreadInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TJvmThreadInfo(%+v)", *p)

}

func (p *TJvmThreadInfo) DeepEqual(ano *TJvmThreadInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Summary) {
		return false
	}
	if !p.Field2DeepEqual(ano.CpuTimeInNs) {
		return false
	}
	if !p.Field3DeepEqual(ano.UserTimeInNs) {
		return false
	}
	if !p.Field4DeepEqual(ano.BlockedCount) {
		return false
	}
	if !p.Field5DeepEqual(ano.BlockedTimeInMs) {
		return false
	}
	if !p.Field6DeepEqual(ano.IsInNative) {
		return false
	}
	return true
}

func (p *TJvmThreadInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Summary, src) != 0 {
		return false
	}
	return true
}
func (p *TJvmThreadInfo) Field2DeepEqual(src int64) bool {

	if p.CpuTimeInNs != src {
		return false
	}
	return true
}
func (p *TJvmThreadInfo) Field3DeepEqual(src int64) bool {

	if p.UserTimeInNs != src {
		return false
	}
	return true
}
func (p *TJvmThreadInfo) Field4DeepEqual(src int64) bool {

	if p.BlockedCount != src {
		return false
	}
	return true
}
func (p *TJvmThreadInfo) Field5DeepEqual(src int64) bool {

	if p.BlockedTimeInMs != src {
		return false
	}
	return true
}
func (p *TJvmThreadInfo) Field6DeepEqual(src bool) bool {

	if p.IsInNative != src {
		return false
	}
	return true
}

type TGetJvmThreadsInfoRequest struct {
	GetCompleteInfo bool `thrift:"get_complete_info,1,required" frugal:"1,required,bool" json:"get_complete_info"`
}

func NewTGetJvmThreadsInfoRequest() *TGetJvmThreadsInfoRequest {
	return &TGetJvmThreadsInfoRequest{}
}

func (p *TGetJvmThreadsInfoRequest) InitDefault() {
}

func (p *TGetJvmThreadsInfoRequest) GetGetCompleteInfo() (v bool) {
	return p.GetCompleteInfo
}
func (p *TGetJvmThreadsInfoRequest) SetGetCompleteInfo(val bool) {
	p.GetCompleteInfo = val
}

var fieldIDToName_TGetJvmThreadsInfoRequest = map[int16]string{
	1: "get_complete_info",
}

func (p *TGetJvmThreadsInfoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetGetCompleteInfo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetGetCompleteInfo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetGetCompleteInfo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetJvmThreadsInfoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TGetJvmThreadsInfoRequest[fieldId]))
}

func (p *TGetJvmThreadsInfoRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GetCompleteInfo = _field
	return nil
}

func (p *TGetJvmThreadsInfoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetJvmThreadsInfoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetJvmThreadsInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("get_complete_info", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.GetCompleteInfo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetJvmThreadsInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetJvmThreadsInfoRequest(%+v)", *p)

}

func (p *TGetJvmThreadsInfoRequest) DeepEqual(ano *TGetJvmThreadsInfoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.GetCompleteInfo) {
		return false
	}
	return true
}

func (p *TGetJvmThreadsInfoRequest) Field1DeepEqual(src bool) bool {

	if p.GetCompleteInfo != src {
		return false
	}
	return true
}

type TGetJvmThreadsInfoResponse struct {
	TotalThreadCount  int32             `thrift:"total_thread_count,1,required" frugal:"1,required,i32" json:"total_thread_count"`
	DaemonThreadCount int32             `thrift:"daemon_thread_count,2,required" frugal:"2,required,i32" json:"daemon_thread_count"`
	PeakThreadCount   int32             `thrift:"peak_thread_count,3,required" frugal:"3,required,i32" json:"peak_thread_count"`
	Threads           []*TJvmThreadInfo `thrift:"threads,4,optional" frugal:"4,optional,list<TJvmThreadInfo>" json:"threads,omitempty"`
}

func NewTGetJvmThreadsInfoResponse() *TGetJvmThreadsInfoResponse {
	return &TGetJvmThreadsInfoResponse{}
}

func (p *TGetJvmThreadsInfoResponse) InitDefault() {
}

func (p *TGetJvmThreadsInfoResponse) GetTotalThreadCount() (v int32) {
	return p.TotalThreadCount
}

func (p *TGetJvmThreadsInfoResponse) GetDaemonThreadCount() (v int32) {
	return p.DaemonThreadCount
}

func (p *TGetJvmThreadsInfoResponse) GetPeakThreadCount() (v int32) {
	return p.PeakThreadCount
}

var TGetJvmThreadsInfoResponse_Threads_DEFAULT []*TJvmThreadInfo

func (p *TGetJvmThreadsInfoResponse) GetThreads() (v []*TJvmThreadInfo) {
	if !p.IsSetThreads() {
		return TGetJvmThreadsInfoResponse_Threads_DEFAULT
	}
	return p.Threads
}
func (p *TGetJvmThreadsInfoResponse) SetTotalThreadCount(val int32) {
	p.TotalThreadCount = val
}
func (p *TGetJvmThreadsInfoResponse) SetDaemonThreadCount(val int32) {
	p.DaemonThreadCount = val
}
func (p *TGetJvmThreadsInfoResponse) SetPeakThreadCount(val int32) {
	p.PeakThreadCount = val
}
func (p *TGetJvmThreadsInfoResponse) SetThreads(val []*TJvmThreadInfo) {
	p.Threads = val
}

var fieldIDToName_TGetJvmThreadsInfoResponse = map[int16]string{
	1: "total_thread_count",
	2: "daemon_thread_count",
	3: "peak_thread_count",
	4: "threads",
}

func (p *TGetJvmThreadsInfoResponse) IsSetThreads() bool {
	return p.Threads != nil
}

func (p *TGetJvmThreadsInfoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotalThreadCount bool = false
	var issetDaemonThreadCount bool = false
	var issetPeakThreadCount bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalThreadCount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDaemonThreadCount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPeakThreadCount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotalThreadCount {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetDaemonThreadCount {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPeakThreadCount {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetJvmThreadsInfoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TGetJvmThreadsInfoResponse[fieldId]))
}

func (p *TGetJvmThreadsInfoResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TotalThreadCount = _field
	return nil
}
func (p *TGetJvmThreadsInfoResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DaemonThreadCount = _field
	return nil
}
func (p *TGetJvmThreadsInfoResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PeakThreadCount = _field
	return nil
}
func (p *TGetJvmThreadsInfoResponse) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TJvmThreadInfo, 0, size)
	values := make([]TJvmThreadInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Threads = _field
	return nil
}

func (p *TGetJvmThreadsInfoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetJvmThreadsInfoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetJvmThreadsInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total_thread_count", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TotalThreadCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetJvmThreadsInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("daemon_thread_count", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DaemonThreadCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetJvmThreadsInfoResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("peak_thread_count", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PeakThreadCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetJvmThreadsInfoResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetThreads() {
		if err = oprot.WriteFieldBegin("threads", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Threads)); err != nil {
			return err
		}
		for _, v := range p.Threads {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TGetJvmThreadsInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetJvmThreadsInfoResponse(%+v)", *p)

}

func (p *TGetJvmThreadsInfoResponse) DeepEqual(ano *TGetJvmThreadsInfoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TotalThreadCount) {
		return false
	}
	if !p.Field2DeepEqual(ano.DaemonThreadCount) {
		return false
	}
	if !p.Field3DeepEqual(ano.PeakThreadCount) {
		return false
	}
	if !p.Field4DeepEqual(ano.Threads) {
		return false
	}
	return true
}

func (p *TGetJvmThreadsInfoResponse) Field1DeepEqual(src int32) bool {

	if p.TotalThreadCount != src {
		return false
	}
	return true
}
func (p *TGetJvmThreadsInfoResponse) Field2DeepEqual(src int32) bool {

	if p.DaemonThreadCount != src {
		return false
	}
	return true
}
func (p *TGetJvmThreadsInfoResponse) Field3DeepEqual(src int32) bool {

	if p.PeakThreadCount != src {
		return false
	}
	return true
}
func (p *TGetJvmThreadsInfoResponse) Field4DeepEqual(src []*TJvmThreadInfo) bool {

	if len(p.Threads) != len(src) {
		return false
	}
	for i, v := range p.Threads {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TGetJMXJsonResponse struct {
	JmxJson string `thrift:"jmx_json,1,required" frugal:"1,required,string" json:"jmx_json"`
}

func NewTGetJMXJsonResponse() *TGetJMXJsonResponse {
	return &TGetJMXJsonResponse{}
}

func (p *TGetJMXJsonResponse) InitDefault() {
}

func (p *TGetJMXJsonResponse) GetJmxJson() (v string) {
	return p.JmxJson
}
func (p *TGetJMXJsonResponse) SetJmxJson(val string) {
	p.JmxJson = val
}

var fieldIDToName_TGetJMXJsonResponse = map[int16]string{
	1: "jmx_json",
}

func (p *TGetJMXJsonResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetJmxJson bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetJmxJson = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetJmxJson {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetJMXJsonResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TGetJMXJsonResponse[fieldId]))
}

func (p *TGetJMXJsonResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.JmxJson = _field
	return nil
}

func (p *TGetJMXJsonResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetJMXJsonResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetJMXJsonResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("jmx_json", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.JmxJson); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetJMXJsonResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetJMXJsonResponse(%+v)", *p)

}

func (p *TGetJMXJsonResponse) DeepEqual(ano *TGetJMXJsonResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.JmxJson) {
		return false
	}
	return true
}

func (p *TGetJMXJsonResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.JmxJson, src) != 0 {
		return false
	}
	return true
}

type TBackend struct {
	Host     string `thrift:"host,1,required" frugal:"1,required,string" json:"host"`
	BePort   TPort  `thrift:"be_port,2,required" frugal:"2,required,i32" json:"be_port"`
	HttpPort TPort  `thrift:"http_port,3,required" frugal:"3,required,i32" json:"http_port"`
	BrpcPort *TPort `thrift:"brpc_port,4,optional" frugal:"4,optional,i32" json:"brpc_port,omitempty"`
	IsAlive  *bool  `thrift:"is_alive,5,optional" frugal:"5,optional,bool" json:"is_alive,omitempty"`
	Id       *int64 `thrift:"id,6,optional" frugal:"6,optional,i64" json:"id,omitempty"`
}

func NewTBackend() *TBackend {
	return &TBackend{}
}

func (p *TBackend) InitDefault() {
}

func (p *TBackend) GetHost() (v string) {
	return p.Host
}

func (p *TBackend) GetBePort() (v TPort) {
	return p.BePort
}

func (p *TBackend) GetHttpPort() (v TPort) {
	return p.HttpPort
}

var TBackend_BrpcPort_DEFAULT TPort

func (p *TBackend) GetBrpcPort() (v TPort) {
	if !p.IsSetBrpcPort() {
		return TBackend_BrpcPort_DEFAULT
	}
	return *p.BrpcPort
}

var TBackend_IsAlive_DEFAULT bool

func (p *TBackend) GetIsAlive() (v bool) {
	if !p.IsSetIsAlive() {
		return TBackend_IsAlive_DEFAULT
	}
	return *p.IsAlive
}

var TBackend_Id_DEFAULT int64

func (p *TBackend) GetId() (v int64) {
	if !p.IsSetId() {
		return TBackend_Id_DEFAULT
	}
	return *p.Id
}
func (p *TBackend) SetHost(val string) {
	p.Host = val
}
func (p *TBackend) SetBePort(val TPort) {
	p.BePort = val
}
func (p *TBackend) SetHttpPort(val TPort) {
	p.HttpPort = val
}
func (p *TBackend) SetBrpcPort(val *TPort) {
	p.BrpcPort = val
}
func (p *TBackend) SetIsAlive(val *bool) {
	p.IsAlive = val
}
func (p *TBackend) SetId(val *int64) {
	p.Id = val
}

var fieldIDToName_TBackend = map[int16]string{
	1: "host",
	2: "be_port",
	3: "http_port",
	4: "brpc_port",
	5: "is_alive",
	6: "id",
}

func (p *TBackend) IsSetBrpcPort() bool {
	return p.BrpcPort != nil
}

func (p *TBackend) IsSetIsAlive() bool {
	return p.IsAlive != nil
}

func (p *TBackend) IsSetId() bool {
	return p.Id != nil
}

func (p *TBackend) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetHost bool = false
	var issetBePort bool = false
	var issetHttpPort bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetHost = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetBePort = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetHttpPort = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetHost {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetBePort {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetHttpPort {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TBackend[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TBackend[fieldId]))
}

func (p *TBackend) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Host = _field
	return nil
}
func (p *TBackend) ReadField2(iprot thrift.TProtocol) error {

	var _field TPort
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BePort = _field
	return nil
}
func (p *TBackend) ReadField3(iprot thrift.TProtocol) error {

	var _field TPort
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HttpPort = _field
	return nil
}
func (p *TBackend) ReadField4(iprot thrift.TProtocol) error {

	var _field *TPort
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BrpcPort = _field
	return nil
}
func (p *TBackend) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsAlive = _field
	return nil
}
func (p *TBackend) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}

func (p *TBackend) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TBackend"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TBackend) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Host); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TBackend) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("be_port", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.BePort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TBackend) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("http_port", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.HttpPort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TBackend) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBrpcPort() {
		if err = oprot.WriteFieldBegin("brpc_port", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BrpcPort); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TBackend) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsAlive() {
		if err = oprot.WriteFieldBegin("is_alive", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsAlive); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TBackend) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TBackend) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBackend(%+v)", *p)

}

func (p *TBackend) DeepEqual(ano *TBackend) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Host) {
		return false
	}
	if !p.Field2DeepEqual(ano.BePort) {
		return false
	}
	if !p.Field3DeepEqual(ano.HttpPort) {
		return false
	}
	if !p.Field4DeepEqual(ano.BrpcPort) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsAlive) {
		return false
	}
	if !p.Field6DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *TBackend) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Host, src) != 0 {
		return false
	}
	return true
}
func (p *TBackend) Field2DeepEqual(src TPort) bool {

	if p.BePort != src {
		return false
	}
	return true
}
func (p *TBackend) Field3DeepEqual(src TPort) bool {

	if p.HttpPort != src {
		return false
	}
	return true
}
func (p *TBackend) Field4DeepEqual(src *TPort) bool {

	if p.BrpcPort == src {
		return true
	} else if p.BrpcPort == nil || src == nil {
		return false
	}
	if *p.BrpcPort != *src {
		return false
	}
	return true
}
func (p *TBackend) Field5DeepEqual(src *bool) bool {

	if p.IsAlive == src {
		return true
	} else if p.IsAlive == nil || src == nil {
		return false
	}
	if *p.IsAlive != *src {
		return false
	}
	return true
}
func (p *TBackend) Field6DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}

type TReplicaInfo struct {
	Host      string     `thrift:"host,1,required" frugal:"1,required,string" json:"host"`
	BePort    TPort      `thrift:"be_port,2,required" frugal:"2,required,i32" json:"be_port"`
	HttpPort  TPort      `thrift:"http_port,3,required" frugal:"3,required,i32" json:"http_port"`
	BrpcPort  TPort      `thrift:"brpc_port,4,required" frugal:"4,required,i32" json:"brpc_port"`
	ReplicaId TReplicaId `thrift:"replica_id,5,required" frugal:"5,required,i64" json:"replica_id"`
}

func NewTReplicaInfo() *TReplicaInfo {
	return &TReplicaInfo{}
}

func (p *TReplicaInfo) InitDefault() {
}

func (p *TReplicaInfo) GetHost() (v string) {
	return p.Host
}

func (p *TReplicaInfo) GetBePort() (v TPort) {
	return p.BePort
}

func (p *TReplicaInfo) GetHttpPort() (v TPort) {
	return p.HttpPort
}

func (p *TReplicaInfo) GetBrpcPort() (v TPort) {
	return p.BrpcPort
}

func (p *TReplicaInfo) GetReplicaId() (v TReplicaId) {
	return p.ReplicaId
}
func (p *TReplicaInfo) SetHost(val string) {
	p.Host = val
}
func (p *TReplicaInfo) SetBePort(val TPort) {
	p.BePort = val
}
func (p *TReplicaInfo) SetHttpPort(val TPort) {
	p.HttpPort = val
}
func (p *TReplicaInfo) SetBrpcPort(val TPort) {
	p.BrpcPort = val
}
func (p *TReplicaInfo) SetReplicaId(val TReplicaId) {
	p.ReplicaId = val
}

var fieldIDToName_TReplicaInfo = map[int16]string{
	1: "host",
	2: "be_port",
	3: "http_port",
	4: "brpc_port",
	5: "replica_id",
}

func (p *TReplicaInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetHost bool = false
	var issetBePort bool = false
	var issetHttpPort bool = false
	var issetBrpcPort bool = false
	var issetReplicaId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetHost = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetBePort = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetHttpPort = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetBrpcPort = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetReplicaId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetHost {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetBePort {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetHttpPort {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetBrpcPort {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetReplicaId {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TReplicaInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TReplicaInfo[fieldId]))
}

func (p *TReplicaInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Host = _field
	return nil
}
func (p *TReplicaInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field TPort
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BePort = _field
	return nil
}
func (p *TReplicaInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field TPort
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HttpPort = _field
	return nil
}
func (p *TReplicaInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field TPort
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BrpcPort = _field
	return nil
}
func (p *TReplicaInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field TReplicaId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ReplicaId = _field
	return nil
}

func (p *TReplicaInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TReplicaInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TReplicaInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Host); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TReplicaInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("be_port", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.BePort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TReplicaInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("http_port", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.HttpPort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TReplicaInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("brpc_port", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.BrpcPort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TReplicaInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("replica_id", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ReplicaId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TReplicaInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TReplicaInfo(%+v)", *p)

}

func (p *TReplicaInfo) DeepEqual(ano *TReplicaInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Host) {
		return false
	}
	if !p.Field2DeepEqual(ano.BePort) {
		return false
	}
	if !p.Field3DeepEqual(ano.HttpPort) {
		return false
	}
	if !p.Field4DeepEqual(ano.BrpcPort) {
		return false
	}
	if !p.Field5DeepEqual(ano.ReplicaId) {
		return false
	}
	return true
}

func (p *TReplicaInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Host, src) != 0 {
		return false
	}
	return true
}
func (p *TReplicaInfo) Field2DeepEqual(src TPort) bool {

	if p.BePort != src {
		return false
	}
	return true
}
func (p *TReplicaInfo) Field3DeepEqual(src TPort) bool {

	if p.HttpPort != src {
		return false
	}
	return true
}
func (p *TReplicaInfo) Field4DeepEqual(src TPort) bool {

	if p.BrpcPort != src {
		return false
	}
	return true
}
func (p *TReplicaInfo) Field5DeepEqual(src TReplicaId) bool {

	if p.ReplicaId != src {
		return false
	}
	return true
}

type TResourceInfo struct {
	User  string `thrift:"user,1,required" frugal:"1,required,string" json:"user"`
	Group string `thrift:"group,2,required" frugal:"2,required,string" json:"group"`
}

func NewTResourceInfo() *TResourceInfo {
	return &TResourceInfo{}
}

func (p *TResourceInfo) InitDefault() {
}

func (p *TResourceInfo) GetUser() (v string) {
	return p.User
}

func (p *TResourceInfo) GetGroup() (v string) {
	return p.Group
}
func (p *TResourceInfo) SetUser(val string) {
	p.User = val
}
func (p *TResourceInfo) SetGroup(val string) {
	p.Group = val
}

var fieldIDToName_TResourceInfo = map[int16]string{
	1: "user",
	2: "group",
}

func (p *TResourceInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUser bool = false
	var issetGroup bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUser = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetGroup = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUser {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetGroup {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TResourceInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TResourceInfo[fieldId]))
}

func (p *TResourceInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.User = _field
	return nil
}
func (p *TResourceInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Group = _field
	return nil
}

func (p *TResourceInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TResourceInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TResourceInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.User); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TResourceInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("group", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Group); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TResourceInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TResourceInfo(%+v)", *p)

}

func (p *TResourceInfo) DeepEqual(ano *TResourceInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.User) {
		return false
	}
	if !p.Field2DeepEqual(ano.Group) {
		return false
	}
	return true
}

func (p *TResourceInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.User, src) != 0 {
		return false
	}
	return true
}
func (p *TResourceInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Group, src) != 0 {
		return false
	}
	return true
}

type TTabletCommitInfo struct {
	TabletId        int64    `thrift:"tabletId,1,required" frugal:"1,required,i64" json:"tabletId"`
	BackendId       int64    `thrift:"backendId,2,required" frugal:"2,required,i64" json:"backendId"`
	InvalidDictCols []string `thrift:"invalid_dict_cols,3,optional" frugal:"3,optional,list<string>" json:"invalid_dict_cols,omitempty"`
}

func NewTTabletCommitInfo() *TTabletCommitInfo {
	return &TTabletCommitInfo{}
}

func (p *TTabletCommitInfo) InitDefault() {
}

func (p *TTabletCommitInfo) GetTabletId() (v int64) {
	return p.TabletId
}

func (p *TTabletCommitInfo) GetBackendId() (v int64) {
	return p.BackendId
}

var TTabletCommitInfo_InvalidDictCols_DEFAULT []string

func (p *TTabletCommitInfo) GetInvalidDictCols() (v []string) {
	if !p.IsSetInvalidDictCols() {
		return TTabletCommitInfo_InvalidDictCols_DEFAULT
	}
	return p.InvalidDictCols
}
func (p *TTabletCommitInfo) SetTabletId(val int64) {
	p.TabletId = val
}
func (p *TTabletCommitInfo) SetBackendId(val int64) {
	p.BackendId = val
}
func (p *TTabletCommitInfo) SetInvalidDictCols(val []string) {
	p.InvalidDictCols = val
}

var fieldIDToName_TTabletCommitInfo = map[int16]string{
	1: "tabletId",
	2: "backendId",
	3: "invalid_dict_cols",
}

func (p *TTabletCommitInfo) IsSetInvalidDictCols() bool {
	return p.InvalidDictCols != nil
}

func (p *TTabletCommitInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false
	var issetBackendId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetBackendId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetBackendId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletCommitInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletCommitInfo[fieldId]))
}

func (p *TTabletCommitInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TabletId = _field
	return nil
}
func (p *TTabletCommitInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BackendId = _field
	return nil
}
func (p *TTabletCommitInfo) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.InvalidDictCols = _field
	return nil
}

func (p *TTabletCommitInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTabletCommitInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTabletCommitInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tabletId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTabletCommitInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("backendId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.BackendId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTabletCommitInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvalidDictCols() {
		if err = oprot.WriteFieldBegin("invalid_dict_cols", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.InvalidDictCols)); err != nil {
			return err
		}
		for _, v := range p.InvalidDictCols {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTabletCommitInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTabletCommitInfo(%+v)", *p)

}

func (p *TTabletCommitInfo) DeepEqual(ano *TTabletCommitInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.BackendId) {
		return false
	}
	if !p.Field3DeepEqual(ano.InvalidDictCols) {
		return false
	}
	return true
}

func (p *TTabletCommitInfo) Field1DeepEqual(src int64) bool {

	if p.TabletId != src {
		return false
	}
	return true
}
func (p *TTabletCommitInfo) Field2DeepEqual(src int64) bool {

	if p.BackendId != src {
		return false
	}
	return true
}
func (p *TTabletCommitInfo) Field3DeepEqual(src []string) bool {

	if len(p.InvalidDictCols) != len(src) {
		return false
	}
	for i, v := range p.InvalidDictCols {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type TErrorTabletInfo struct {
	TabletId *int64  `thrift:"tabletId,1,optional" frugal:"1,optional,i64" json:"tabletId,omitempty"`
	Msg      *string `thrift:"msg,2,optional" frugal:"2,optional,string" json:"msg,omitempty"`
}

func NewTErrorTabletInfo() *TErrorTabletInfo {
	return &TErrorTabletInfo{}
}

func (p *TErrorTabletInfo) InitDefault() {
}

var TErrorTabletInfo_TabletId_DEFAULT int64

func (p *TErrorTabletInfo) GetTabletId() (v int64) {
	if !p.IsSetTabletId() {
		return TErrorTabletInfo_TabletId_DEFAULT
	}
	return *p.TabletId
}

var TErrorTabletInfo_Msg_DEFAULT string

func (p *TErrorTabletInfo) GetMsg() (v string) {
	if !p.IsSetMsg() {
		return TErrorTabletInfo_Msg_DEFAULT
	}
	return *p.Msg
}
func (p *TErrorTabletInfo) SetTabletId(val *int64) {
	p.TabletId = val
}
func (p *TErrorTabletInfo) SetMsg(val *string) {
	p.Msg = val
}

var fieldIDToName_TErrorTabletInfo = map[int16]string{
	1: "tabletId",
	2: "msg",
}

func (p *TErrorTabletInfo) IsSetTabletId() bool {
	return p.TabletId != nil
}

func (p *TErrorTabletInfo) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *TErrorTabletInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TErrorTabletInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TErrorTabletInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TabletId = _field
	return nil
}
func (p *TErrorTabletInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}

func (p *TErrorTabletInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TErrorTabletInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TErrorTabletInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletId() {
		if err = oprot.WriteFieldBegin("tabletId", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TabletId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TErrorTabletInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TErrorTabletInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TErrorTabletInfo(%+v)", *p)

}

func (p *TErrorTabletInfo) DeepEqual(ano *TErrorTabletInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	return true
}

func (p *TErrorTabletInfo) Field1DeepEqual(src *int64) bool {

	if p.TabletId == src {
		return true
	} else if p.TabletId == nil || src == nil {
		return false
	}
	if *p.TabletId != *src {
		return false
	}
	return true
}
func (p *TErrorTabletInfo) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}

type TUserIdentity struct {
	Username *string `thrift:"username,1,optional" frugal:"1,optional,string" json:"username,omitempty"`
	Host     *string `thrift:"host,2,optional" frugal:"2,optional,string" json:"host,omitempty"`
	IsDomain *bool   `thrift:"is_domain,3,optional" frugal:"3,optional,bool" json:"is_domain,omitempty"`
}

func NewTUserIdentity() *TUserIdentity {
	return &TUserIdentity{}
}

func (p *TUserIdentity) InitDefault() {
}

var TUserIdentity_Username_DEFAULT string

func (p *TUserIdentity) GetUsername() (v string) {
	if !p.IsSetUsername() {
		return TUserIdentity_Username_DEFAULT
	}
	return *p.Username
}

var TUserIdentity_Host_DEFAULT string

func (p *TUserIdentity) GetHost() (v string) {
	if !p.IsSetHost() {
		return TUserIdentity_Host_DEFAULT
	}
	return *p.Host
}

var TUserIdentity_IsDomain_DEFAULT bool

func (p *TUserIdentity) GetIsDomain() (v bool) {
	if !p.IsSetIsDomain() {
		return TUserIdentity_IsDomain_DEFAULT
	}
	return *p.IsDomain
}
func (p *TUserIdentity) SetUsername(val *string) {
	p.Username = val
}
func (p *TUserIdentity) SetHost(val *string) {
	p.Host = val
}
func (p *TUserIdentity) SetIsDomain(val *bool) {
	p.IsDomain = val
}

var fieldIDToName_TUserIdentity = map[int16]string{
	1: "username",
	2: "host",
	3: "is_domain",
}

func (p *TUserIdentity) IsSetUsername() bool {
	return p.Username != nil
}

func (p *TUserIdentity) IsSetHost() bool {
	return p.Host != nil
}

func (p *TUserIdentity) IsSetIsDomain() bool {
	return p.IsDomain != nil
}

func (p *TUserIdentity) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TUserIdentity[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TUserIdentity) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Username = _field
	return nil
}
func (p *TUserIdentity) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Host = _field
	return nil
}
func (p *TUserIdentity) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsDomain = _field
	return nil
}

func (p *TUserIdentity) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TUserIdentity"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TUserIdentity) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err = oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Username); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TUserIdentity) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetHost() {
		if err = oprot.WriteFieldBegin("host", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Host); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TUserIdentity) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsDomain() {
		if err = oprot.WriteFieldBegin("is_domain", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsDomain); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TUserIdentity) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TUserIdentity(%+v)", *p)

}

func (p *TUserIdentity) DeepEqual(ano *TUserIdentity) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.Host) {
		return false
	}
	if !p.Field3DeepEqual(ano.IsDomain) {
		return false
	}
	return true
}

func (p *TUserIdentity) Field1DeepEqual(src *string) bool {

	if p.Username == src {
		return true
	} else if p.Username == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Username, *src) != 0 {
		return false
	}
	return true
}
func (p *TUserIdentity) Field2DeepEqual(src *string) bool {

	if p.Host == src {
		return true
	} else if p.Host == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Host, *src) != 0 {
		return false
	}
	return true
}
func (p *TUserIdentity) Field3DeepEqual(src *bool) bool {

	if p.IsDomain == src {
		return true
	} else if p.IsDomain == nil || src == nil {
		return false
	}
	if *p.IsDomain != *src {
		return false
	}
	return true
}
