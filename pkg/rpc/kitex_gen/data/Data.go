// Code generated by thriftgo (0.3.13). DO NOT EDIT.

package data

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/types"
	"strings"
)

type TRowBatch struct {
	NumRows      int32            `thrift:"num_rows,1,required" frugal:"1,required,i32" json:"num_rows"`
	RowTuples    []types.TTupleId `thrift:"row_tuples,2,required" frugal:"2,required,list<i32>" json:"row_tuples"`
	TupleOffsets []int32          `thrift:"tuple_offsets,3" frugal:"3,default,list<i32>" json:"tuple_offsets"`
	TupleData    string           `thrift:"tuple_data,4" frugal:"4,default,string" json:"tuple_data"`
	IsCompressed bool             `thrift:"is_compressed,5" frugal:"5,default,bool" json:"is_compressed"`
	BeNumber     int32            `thrift:"be_number,6" frugal:"6,default,i32" json:"be_number"`
	PacketSeq    int64            `thrift:"packet_seq,7" frugal:"7,default,i64" json:"packet_seq"`
}

func NewTRowBatch() *TRowBatch {
	return &TRowBatch{}
}

func (p *TRowBatch) InitDefault() {
}

func (p *TRowBatch) GetNumRows() (v int32) {
	return p.NumRows
}

func (p *TRowBatch) GetRowTuples() (v []types.TTupleId) {
	return p.RowTuples
}

func (p *TRowBatch) GetTupleOffsets() (v []int32) {
	return p.TupleOffsets
}

func (p *TRowBatch) GetTupleData() (v string) {
	return p.TupleData
}

func (p *TRowBatch) GetIsCompressed() (v bool) {
	return p.IsCompressed
}

func (p *TRowBatch) GetBeNumber() (v int32) {
	return p.BeNumber
}

func (p *TRowBatch) GetPacketSeq() (v int64) {
	return p.PacketSeq
}
func (p *TRowBatch) SetNumRows(val int32) {
	p.NumRows = val
}
func (p *TRowBatch) SetRowTuples(val []types.TTupleId) {
	p.RowTuples = val
}
func (p *TRowBatch) SetTupleOffsets(val []int32) {
	p.TupleOffsets = val
}
func (p *TRowBatch) SetTupleData(val string) {
	p.TupleData = val
}
func (p *TRowBatch) SetIsCompressed(val bool) {
	p.IsCompressed = val
}
func (p *TRowBatch) SetBeNumber(val int32) {
	p.BeNumber = val
}
func (p *TRowBatch) SetPacketSeq(val int64) {
	p.PacketSeq = val
}

var fieldIDToName_TRowBatch = map[int16]string{
	1: "num_rows",
	2: "row_tuples",
	3: "tuple_offsets",
	4: "tuple_data",
	5: "is_compressed",
	6: "be_number",
	7: "packet_seq",
}

func (p *TRowBatch) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNumRows bool = false
	var issetRowTuples bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetNumRows = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetRowTuples = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNumRows {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetRowTuples {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRowBatch[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TRowBatch[fieldId]))
}

func (p *TRowBatch) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumRows = _field
	return nil
}
func (p *TRowBatch) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TTupleId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TTupleId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.RowTuples = _field
	return nil
}
func (p *TRowBatch) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TupleOffsets = _field
	return nil
}
func (p *TRowBatch) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TupleData = _field
	return nil
}
func (p *TRowBatch) ReadField5(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsCompressed = _field
	return nil
}
func (p *TRowBatch) ReadField6(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BeNumber = _field
	return nil
}
func (p *TRowBatch) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PacketSeq = _field
	return nil
}

func (p *TRowBatch) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TRowBatch"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TRowBatch) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("num_rows", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NumRows); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TRowBatch) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("row_tuples", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.RowTuples)); err != nil {
		return err
	}
	for _, v := range p.RowTuples {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TRowBatch) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tuple_offsets", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.TupleOffsets)); err != nil {
		return err
	}
	for _, v := range p.TupleOffsets {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TRowBatch) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tuple_data", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TupleData); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TRowBatch) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_compressed", thrift.BOOL, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsCompressed); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TRowBatch) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("be_number", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.BeNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TRowBatch) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("packet_seq", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PacketSeq); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TRowBatch) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRowBatch(%+v)", *p)

}

func (p *TRowBatch) DeepEqual(ano *TRowBatch) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.NumRows) {
		return false
	}
	if !p.Field2DeepEqual(ano.RowTuples) {
		return false
	}
	if !p.Field3DeepEqual(ano.TupleOffsets) {
		return false
	}
	if !p.Field4DeepEqual(ano.TupleData) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsCompressed) {
		return false
	}
	if !p.Field6DeepEqual(ano.BeNumber) {
		return false
	}
	if !p.Field7DeepEqual(ano.PacketSeq) {
		return false
	}
	return true
}

func (p *TRowBatch) Field1DeepEqual(src int32) bool {

	if p.NumRows != src {
		return false
	}
	return true
}
func (p *TRowBatch) Field2DeepEqual(src []types.TTupleId) bool {

	if len(p.RowTuples) != len(src) {
		return false
	}
	for i, v := range p.RowTuples {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TRowBatch) Field3DeepEqual(src []int32) bool {

	if len(p.TupleOffsets) != len(src) {
		return false
	}
	for i, v := range p.TupleOffsets {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TRowBatch) Field4DeepEqual(src string) bool {

	if strings.Compare(p.TupleData, src) != 0 {
		return false
	}
	return true
}
func (p *TRowBatch) Field5DeepEqual(src bool) bool {

	if p.IsCompressed != src {
		return false
	}
	return true
}
func (p *TRowBatch) Field6DeepEqual(src int32) bool {

	if p.BeNumber != src {
		return false
	}
	return true
}
func (p *TRowBatch) Field7DeepEqual(src int64) bool {

	if p.PacketSeq != src {
		return false
	}
	return true
}

type TCell struct {
	BoolVal   *bool    `thrift:"boolVal,1,optional" frugal:"1,optional,bool" json:"boolVal,omitempty"`
	IntVal    *int32   `thrift:"intVal,2,optional" frugal:"2,optional,i32" json:"intVal,omitempty"`
	LongVal   *int64   `thrift:"longVal,3,optional" frugal:"3,optional,i64" json:"longVal,omitempty"`
	DoubleVal *float64 `thrift:"doubleVal,4,optional" frugal:"4,optional,double" json:"doubleVal,omitempty"`
	StringVal *string  `thrift:"stringVal,5,optional" frugal:"5,optional,string" json:"stringVal,omitempty"`
}

func NewTCell() *TCell {
	return &TCell{}
}

func (p *TCell) InitDefault() {
}

var TCell_BoolVal_DEFAULT bool

func (p *TCell) GetBoolVal() (v bool) {
	if !p.IsSetBoolVal() {
		return TCell_BoolVal_DEFAULT
	}
	return *p.BoolVal
}

var TCell_IntVal_DEFAULT int32

func (p *TCell) GetIntVal() (v int32) {
	if !p.IsSetIntVal() {
		return TCell_IntVal_DEFAULT
	}
	return *p.IntVal
}

var TCell_LongVal_DEFAULT int64

func (p *TCell) GetLongVal() (v int64) {
	if !p.IsSetLongVal() {
		return TCell_LongVal_DEFAULT
	}
	return *p.LongVal
}

var TCell_DoubleVal_DEFAULT float64

func (p *TCell) GetDoubleVal() (v float64) {
	if !p.IsSetDoubleVal() {
		return TCell_DoubleVal_DEFAULT
	}
	return *p.DoubleVal
}

var TCell_StringVal_DEFAULT string

func (p *TCell) GetStringVal() (v string) {
	if !p.IsSetStringVal() {
		return TCell_StringVal_DEFAULT
	}
	return *p.StringVal
}
func (p *TCell) SetBoolVal(val *bool) {
	p.BoolVal = val
}
func (p *TCell) SetIntVal(val *int32) {
	p.IntVal = val
}
func (p *TCell) SetLongVal(val *int64) {
	p.LongVal = val
}
func (p *TCell) SetDoubleVal(val *float64) {
	p.DoubleVal = val
}
func (p *TCell) SetStringVal(val *string) {
	p.StringVal = val
}

var fieldIDToName_TCell = map[int16]string{
	1: "boolVal",
	2: "intVal",
	3: "longVal",
	4: "doubleVal",
	5: "stringVal",
}

func (p *TCell) IsSetBoolVal() bool {
	return p.BoolVal != nil
}

func (p *TCell) IsSetIntVal() bool {
	return p.IntVal != nil
}

func (p *TCell) IsSetLongVal() bool {
	return p.LongVal != nil
}

func (p *TCell) IsSetDoubleVal() bool {
	return p.DoubleVal != nil
}

func (p *TCell) IsSetStringVal() bool {
	return p.StringVal != nil
}

func (p *TCell) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCell[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TCell) ReadField1(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BoolVal = _field
	return nil
}
func (p *TCell) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IntVal = _field
	return nil
}
func (p *TCell) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LongVal = _field
	return nil
}
func (p *TCell) ReadField4(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DoubleVal = _field
	return nil
}
func (p *TCell) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StringVal = _field
	return nil
}

func (p *TCell) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCell"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCell) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBoolVal() {
		if err = oprot.WriteFieldBegin("boolVal", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.BoolVal); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCell) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntVal() {
		if err = oprot.WriteFieldBegin("intVal", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.IntVal); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCell) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLongVal() {
		if err = oprot.WriteFieldBegin("longVal", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LongVal); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TCell) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDoubleVal() {
		if err = oprot.WriteFieldBegin("doubleVal", thrift.DOUBLE, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.DoubleVal); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TCell) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringVal() {
		if err = oprot.WriteFieldBegin("stringVal", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StringVal); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TCell) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCell(%+v)", *p)

}

func (p *TCell) DeepEqual(ano *TCell) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BoolVal) {
		return false
	}
	if !p.Field2DeepEqual(ano.IntVal) {
		return false
	}
	if !p.Field3DeepEqual(ano.LongVal) {
		return false
	}
	if !p.Field4DeepEqual(ano.DoubleVal) {
		return false
	}
	if !p.Field5DeepEqual(ano.StringVal) {
		return false
	}
	return true
}

func (p *TCell) Field1DeepEqual(src *bool) bool {

	if p.BoolVal == src {
		return true
	} else if p.BoolVal == nil || src == nil {
		return false
	}
	if *p.BoolVal != *src {
		return false
	}
	return true
}
func (p *TCell) Field2DeepEqual(src *int32) bool {

	if p.IntVal == src {
		return true
	} else if p.IntVal == nil || src == nil {
		return false
	}
	if *p.IntVal != *src {
		return false
	}
	return true
}
func (p *TCell) Field3DeepEqual(src *int64) bool {

	if p.LongVal == src {
		return true
	} else if p.LongVal == nil || src == nil {
		return false
	}
	if *p.LongVal != *src {
		return false
	}
	return true
}
func (p *TCell) Field4DeepEqual(src *float64) bool {

	if p.DoubleVal == src {
		return true
	} else if p.DoubleVal == nil || src == nil {
		return false
	}
	if *p.DoubleVal != *src {
		return false
	}
	return true
}
func (p *TCell) Field5DeepEqual(src *string) bool {

	if p.StringVal == src {
		return true
	} else if p.StringVal == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StringVal, *src) != 0 {
		return false
	}
	return true
}

type TResultRow struct {
	ColVals []*TCell `thrift:"colVals,1" frugal:"1,default,list<TCell>" json:"colVals"`
}

func NewTResultRow() *TResultRow {
	return &TResultRow{}
}

func (p *TResultRow) InitDefault() {
}

func (p *TResultRow) GetColVals() (v []*TCell) {
	return p.ColVals
}
func (p *TResultRow) SetColVals(val []*TCell) {
	p.ColVals = val
}

var fieldIDToName_TResultRow = map[int16]string{
	1: "colVals",
}

func (p *TResultRow) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TResultRow[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TResultRow) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TCell, 0, size)
	values := make([]TCell, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColVals = _field
	return nil
}

func (p *TResultRow) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TResultRow"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TResultRow) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("colVals", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColVals)); err != nil {
		return err
	}
	for _, v := range p.ColVals {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TResultRow) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TResultRow(%+v)", *p)

}

func (p *TResultRow) DeepEqual(ano *TResultRow) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColVals) {
		return false
	}
	return true
}

func (p *TResultRow) Field1DeepEqual(src []*TCell) bool {

	if len(p.ColVals) != len(src) {
		return false
	}
	for i, v := range p.ColVals {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TRow struct {
	ColumnValue []*TCell `thrift:"column_value,1,optional" frugal:"1,optional,list<TCell>" json:"column_value,omitempty"`
}

func NewTRow() *TRow {
	return &TRow{}
}

func (p *TRow) InitDefault() {
}

var TRow_ColumnValue_DEFAULT []*TCell

func (p *TRow) GetColumnValue() (v []*TCell) {
	if !p.IsSetColumnValue() {
		return TRow_ColumnValue_DEFAULT
	}
	return p.ColumnValue
}
func (p *TRow) SetColumnValue(val []*TCell) {
	p.ColumnValue = val
}

var fieldIDToName_TRow = map[int16]string{
	1: "column_value",
}

func (p *TRow) IsSetColumnValue() bool {
	return p.ColumnValue != nil
}

func (p *TRow) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRow[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TRow) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TCell, 0, size)
	values := make([]TCell, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnValue = _field
	return nil
}

func (p *TRow) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TRow"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TRow) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnValue() {
		if err = oprot.WriteFieldBegin("column_value", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnValue)); err != nil {
			return err
		}
		for _, v := range p.ColumnValue {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TRow) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRow(%+v)", *p)

}

func (p *TRow) DeepEqual(ano *TRow) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnValue) {
		return false
	}
	return true
}

func (p *TRow) Field1DeepEqual(src []*TCell) bool {

	if len(p.ColumnValue) != len(src) {
		return false
	}
	for i, v := range p.ColumnValue {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TResultBatch struct {
	Rows          [][]byte          `thrift:"rows,1,required" frugal:"1,required,list<binary>" json:"rows"`
	IsCompressed  bool              `thrift:"is_compressed,2,required" frugal:"2,required,bool" json:"is_compressed"`
	PacketSeq     int64             `thrift:"packet_seq,3,required" frugal:"3,required,i64" json:"packet_seq"`
	AttachedInfos map[string]string `thrift:"attached_infos,4,optional" frugal:"4,optional,map<string:string>" json:"attached_infos,omitempty"`
}

func NewTResultBatch() *TResultBatch {
	return &TResultBatch{}
}

func (p *TResultBatch) InitDefault() {
}

func (p *TResultBatch) GetRows() (v [][]byte) {
	return p.Rows
}

func (p *TResultBatch) GetIsCompressed() (v bool) {
	return p.IsCompressed
}

func (p *TResultBatch) GetPacketSeq() (v int64) {
	return p.PacketSeq
}

var TResultBatch_AttachedInfos_DEFAULT map[string]string

func (p *TResultBatch) GetAttachedInfos() (v map[string]string) {
	if !p.IsSetAttachedInfos() {
		return TResultBatch_AttachedInfos_DEFAULT
	}
	return p.AttachedInfos
}
func (p *TResultBatch) SetRows(val [][]byte) {
	p.Rows = val
}
func (p *TResultBatch) SetIsCompressed(val bool) {
	p.IsCompressed = val
}
func (p *TResultBatch) SetPacketSeq(val int64) {
	p.PacketSeq = val
}
func (p *TResultBatch) SetAttachedInfos(val map[string]string) {
	p.AttachedInfos = val
}

var fieldIDToName_TResultBatch = map[int16]string{
	1: "rows",
	2: "is_compressed",
	3: "packet_seq",
	4: "attached_infos",
}

func (p *TResultBatch) IsSetAttachedInfos() bool {
	return p.AttachedInfos != nil
}

func (p *TResultBatch) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRows bool = false
	var issetIsCompressed bool = false
	var issetPacketSeq bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRows = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsCompressed = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPacketSeq = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRows {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetIsCompressed {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPacketSeq {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TResultBatch[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TResultBatch[fieldId]))
}

func (p *TResultBatch) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]byte, 0, size)
	for i := 0; i < size; i++ {

		var _elem []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return err
		} else {
			_elem = []byte(v)
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Rows = _field
	return nil
}
func (p *TResultBatch) ReadField2(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsCompressed = _field
	return nil
}
func (p *TResultBatch) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PacketSeq = _field
	return nil
}
func (p *TResultBatch) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.AttachedInfos = _field
	return nil
}

func (p *TResultBatch) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TResultBatch"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TResultBatch) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("rows", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Rows)); err != nil {
		return err
	}
	for _, v := range p.Rows {
		if err := oprot.WriteBinary([]byte(v)); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TResultBatch) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_compressed", thrift.BOOL, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsCompressed); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TResultBatch) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("packet_seq", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PacketSeq); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TResultBatch) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttachedInfos() {
		if err = oprot.WriteFieldBegin("attached_infos", thrift.MAP, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.AttachedInfos)); err != nil {
			return err
		}
		for k, v := range p.AttachedInfos {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TResultBatch) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TResultBatch(%+v)", *p)

}

func (p *TResultBatch) DeepEqual(ano *TResultBatch) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Rows) {
		return false
	}
	if !p.Field2DeepEqual(ano.IsCompressed) {
		return false
	}
	if !p.Field3DeepEqual(ano.PacketSeq) {
		return false
	}
	if !p.Field4DeepEqual(ano.AttachedInfos) {
		return false
	}
	return true
}

func (p *TResultBatch) Field1DeepEqual(src [][]byte) bool {

	if len(p.Rows) != len(src) {
		return false
	}
	for i, v := range p.Rows {
		_src := src[i]
		if bytes.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TResultBatch) Field2DeepEqual(src bool) bool {

	if p.IsCompressed != src {
		return false
	}
	return true
}
func (p *TResultBatch) Field3DeepEqual(src int64) bool {

	if p.PacketSeq != src {
		return false
	}
	return true
}
func (p *TResultBatch) Field4DeepEqual(src map[string]string) bool {

	if len(p.AttachedInfos) != len(src) {
		return false
	}
	for k, v := range p.AttachedInfos {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
