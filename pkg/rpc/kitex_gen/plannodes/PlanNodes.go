// Code generated by thriftgo (0.3.13). DO NOT EDIT.

package plannodes

import (
	"bytes"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/descriptors"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/exprs"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/opcodes"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/partitions"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/types"
	"strings"
)

type TPlanNodeType int64

const (
	TPlanNodeType_OLAP_SCAN_NODE          TPlanNodeType = 0
	TPlanNodeType_MYSQL_SCAN_NODE         TPlanNodeType = 1
	TPlanNodeType_CSV_SCAN_NODE           TPlanNodeType = 2
	TPlanNodeType_SCHEMA_SCAN_NODE        TPlanNodeType = 3
	TPlanNodeType_HASH_JOIN_NODE          TPlanNodeType = 4
	TPlanNodeType_MERGE_JOIN_NODE         TPlanNodeType = 5
	TPlanNodeType_AGGREGATION_NODE        TPlanNodeType = 6
	TPlanNodeType_PRE_AGGREGATION_NODE    TPlanNodeType = 7
	TPlanNodeType_SORT_NODE               TPlanNodeType = 8
	TPlanNodeType_EXCHANGE_NODE           TPlanNodeType = 9
	TPlanNodeType_MERGE_NODE              TPlanNodeType = 10
	TPlanNodeType_SELECT_NODE             TPlanNodeType = 11
	TPlanNodeType_CROSS_JOIN_NODE         TPlanNodeType = 12
	TPlanNodeType_META_SCAN_NODE          TPlanNodeType = 13
	TPlanNodeType_ANALYTIC_EVAL_NODE      TPlanNodeType = 14
	TPlanNodeType_OLAP_REWRITE_NODE       TPlanNodeType = 15
	TPlanNodeType_KUDU_SCAN_NODE          TPlanNodeType = 16
	TPlanNodeType_BROKER_SCAN_NODE        TPlanNodeType = 17
	TPlanNodeType_EMPTY_SET_NODE          TPlanNodeType = 18
	TPlanNodeType_UNION_NODE              TPlanNodeType = 19
	TPlanNodeType_ES_SCAN_NODE            TPlanNodeType = 20
	TPlanNodeType_ES_HTTP_SCAN_NODE       TPlanNodeType = 21
	TPlanNodeType_REPEAT_NODE             TPlanNodeType = 22
	TPlanNodeType_ASSERT_NUM_ROWS_NODE    TPlanNodeType = 23
	TPlanNodeType_INTERSECT_NODE          TPlanNodeType = 24
	TPlanNodeType_EXCEPT_NODE             TPlanNodeType = 25
	TPlanNodeType_ODBC_SCAN_NODE          TPlanNodeType = 26
	TPlanNodeType_TABLE_FUNCTION_NODE     TPlanNodeType = 27
	TPlanNodeType_DATA_GEN_SCAN_NODE      TPlanNodeType = 28
	TPlanNodeType_FILE_SCAN_NODE          TPlanNodeType = 29
	TPlanNodeType_JDBC_SCAN_NODE          TPlanNodeType = 30
	TPlanNodeType_TEST_EXTERNAL_SCAN_NODE TPlanNodeType = 31
	TPlanNodeType_PARTITION_SORT_NODE     TPlanNodeType = 32
	TPlanNodeType_GROUP_COMMIT_SCAN_NODE  TPlanNodeType = 33
)

func (p TPlanNodeType) String() string {
	switch p {
	case TPlanNodeType_OLAP_SCAN_NODE:
		return "OLAP_SCAN_NODE"
	case TPlanNodeType_MYSQL_SCAN_NODE:
		return "MYSQL_SCAN_NODE"
	case TPlanNodeType_CSV_SCAN_NODE:
		return "CSV_SCAN_NODE"
	case TPlanNodeType_SCHEMA_SCAN_NODE:
		return "SCHEMA_SCAN_NODE"
	case TPlanNodeType_HASH_JOIN_NODE:
		return "HASH_JOIN_NODE"
	case TPlanNodeType_MERGE_JOIN_NODE:
		return "MERGE_JOIN_NODE"
	case TPlanNodeType_AGGREGATION_NODE:
		return "AGGREGATION_NODE"
	case TPlanNodeType_PRE_AGGREGATION_NODE:
		return "PRE_AGGREGATION_NODE"
	case TPlanNodeType_SORT_NODE:
		return "SORT_NODE"
	case TPlanNodeType_EXCHANGE_NODE:
		return "EXCHANGE_NODE"
	case TPlanNodeType_MERGE_NODE:
		return "MERGE_NODE"
	case TPlanNodeType_SELECT_NODE:
		return "SELECT_NODE"
	case TPlanNodeType_CROSS_JOIN_NODE:
		return "CROSS_JOIN_NODE"
	case TPlanNodeType_META_SCAN_NODE:
		return "META_SCAN_NODE"
	case TPlanNodeType_ANALYTIC_EVAL_NODE:
		return "ANALYTIC_EVAL_NODE"
	case TPlanNodeType_OLAP_REWRITE_NODE:
		return "OLAP_REWRITE_NODE"
	case TPlanNodeType_KUDU_SCAN_NODE:
		return "KUDU_SCAN_NODE"
	case TPlanNodeType_BROKER_SCAN_NODE:
		return "BROKER_SCAN_NODE"
	case TPlanNodeType_EMPTY_SET_NODE:
		return "EMPTY_SET_NODE"
	case TPlanNodeType_UNION_NODE:
		return "UNION_NODE"
	case TPlanNodeType_ES_SCAN_NODE:
		return "ES_SCAN_NODE"
	case TPlanNodeType_ES_HTTP_SCAN_NODE:
		return "ES_HTTP_SCAN_NODE"
	case TPlanNodeType_REPEAT_NODE:
		return "REPEAT_NODE"
	case TPlanNodeType_ASSERT_NUM_ROWS_NODE:
		return "ASSERT_NUM_ROWS_NODE"
	case TPlanNodeType_INTERSECT_NODE:
		return "INTERSECT_NODE"
	case TPlanNodeType_EXCEPT_NODE:
		return "EXCEPT_NODE"
	case TPlanNodeType_ODBC_SCAN_NODE:
		return "ODBC_SCAN_NODE"
	case TPlanNodeType_TABLE_FUNCTION_NODE:
		return "TABLE_FUNCTION_NODE"
	case TPlanNodeType_DATA_GEN_SCAN_NODE:
		return "DATA_GEN_SCAN_NODE"
	case TPlanNodeType_FILE_SCAN_NODE:
		return "FILE_SCAN_NODE"
	case TPlanNodeType_JDBC_SCAN_NODE:
		return "JDBC_SCAN_NODE"
	case TPlanNodeType_TEST_EXTERNAL_SCAN_NODE:
		return "TEST_EXTERNAL_SCAN_NODE"
	case TPlanNodeType_PARTITION_SORT_NODE:
		return "PARTITION_SORT_NODE"
	case TPlanNodeType_GROUP_COMMIT_SCAN_NODE:
		return "GROUP_COMMIT_SCAN_NODE"
	}
	return "<UNSET>"
}

func TPlanNodeTypeFromString(s string) (TPlanNodeType, error) {
	switch s {
	case "OLAP_SCAN_NODE":
		return TPlanNodeType_OLAP_SCAN_NODE, nil
	case "MYSQL_SCAN_NODE":
		return TPlanNodeType_MYSQL_SCAN_NODE, nil
	case "CSV_SCAN_NODE":
		return TPlanNodeType_CSV_SCAN_NODE, nil
	case "SCHEMA_SCAN_NODE":
		return TPlanNodeType_SCHEMA_SCAN_NODE, nil
	case "HASH_JOIN_NODE":
		return TPlanNodeType_HASH_JOIN_NODE, nil
	case "MERGE_JOIN_NODE":
		return TPlanNodeType_MERGE_JOIN_NODE, nil
	case "AGGREGATION_NODE":
		return TPlanNodeType_AGGREGATION_NODE, nil
	case "PRE_AGGREGATION_NODE":
		return TPlanNodeType_PRE_AGGREGATION_NODE, nil
	case "SORT_NODE":
		return TPlanNodeType_SORT_NODE, nil
	case "EXCHANGE_NODE":
		return TPlanNodeType_EXCHANGE_NODE, nil
	case "MERGE_NODE":
		return TPlanNodeType_MERGE_NODE, nil
	case "SELECT_NODE":
		return TPlanNodeType_SELECT_NODE, nil
	case "CROSS_JOIN_NODE":
		return TPlanNodeType_CROSS_JOIN_NODE, nil
	case "META_SCAN_NODE":
		return TPlanNodeType_META_SCAN_NODE, nil
	case "ANALYTIC_EVAL_NODE":
		return TPlanNodeType_ANALYTIC_EVAL_NODE, nil
	case "OLAP_REWRITE_NODE":
		return TPlanNodeType_OLAP_REWRITE_NODE, nil
	case "KUDU_SCAN_NODE":
		return TPlanNodeType_KUDU_SCAN_NODE, nil
	case "BROKER_SCAN_NODE":
		return TPlanNodeType_BROKER_SCAN_NODE, nil
	case "EMPTY_SET_NODE":
		return TPlanNodeType_EMPTY_SET_NODE, nil
	case "UNION_NODE":
		return TPlanNodeType_UNION_NODE, nil
	case "ES_SCAN_NODE":
		return TPlanNodeType_ES_SCAN_NODE, nil
	case "ES_HTTP_SCAN_NODE":
		return TPlanNodeType_ES_HTTP_SCAN_NODE, nil
	case "REPEAT_NODE":
		return TPlanNodeType_REPEAT_NODE, nil
	case "ASSERT_NUM_ROWS_NODE":
		return TPlanNodeType_ASSERT_NUM_ROWS_NODE, nil
	case "INTERSECT_NODE":
		return TPlanNodeType_INTERSECT_NODE, nil
	case "EXCEPT_NODE":
		return TPlanNodeType_EXCEPT_NODE, nil
	case "ODBC_SCAN_NODE":
		return TPlanNodeType_ODBC_SCAN_NODE, nil
	case "TABLE_FUNCTION_NODE":
		return TPlanNodeType_TABLE_FUNCTION_NODE, nil
	case "DATA_GEN_SCAN_NODE":
		return TPlanNodeType_DATA_GEN_SCAN_NODE, nil
	case "FILE_SCAN_NODE":
		return TPlanNodeType_FILE_SCAN_NODE, nil
	case "JDBC_SCAN_NODE":
		return TPlanNodeType_JDBC_SCAN_NODE, nil
	case "TEST_EXTERNAL_SCAN_NODE":
		return TPlanNodeType_TEST_EXTERNAL_SCAN_NODE, nil
	case "PARTITION_SORT_NODE":
		return TPlanNodeType_PARTITION_SORT_NODE, nil
	case "GROUP_COMMIT_SCAN_NODE":
		return TPlanNodeType_GROUP_COMMIT_SCAN_NODE, nil
	}
	return TPlanNodeType(0), fmt.Errorf("not a valid TPlanNodeType string")
}

func TPlanNodeTypePtr(v TPlanNodeType) *TPlanNodeType { return &v }
func (p *TPlanNodeType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TPlanNodeType(result.Int64)
	return
}

func (p *TPlanNodeType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TExecNodePhase int64

const (
	TExecNodePhase_PREPARE TExecNodePhase = 0
	TExecNodePhase_OPEN    TExecNodePhase = 1
	TExecNodePhase_GETNEXT TExecNodePhase = 2
	TExecNodePhase_CLOSE   TExecNodePhase = 3
	TExecNodePhase_INVALID TExecNodePhase = 4
)

func (p TExecNodePhase) String() string {
	switch p {
	case TExecNodePhase_PREPARE:
		return "PREPARE"
	case TExecNodePhase_OPEN:
		return "OPEN"
	case TExecNodePhase_GETNEXT:
		return "GETNEXT"
	case TExecNodePhase_CLOSE:
		return "CLOSE"
	case TExecNodePhase_INVALID:
		return "INVALID"
	}
	return "<UNSET>"
}

func TExecNodePhaseFromString(s string) (TExecNodePhase, error) {
	switch s {
	case "PREPARE":
		return TExecNodePhase_PREPARE, nil
	case "OPEN":
		return TExecNodePhase_OPEN, nil
	case "GETNEXT":
		return TExecNodePhase_GETNEXT, nil
	case "CLOSE":
		return TExecNodePhase_CLOSE, nil
	case "INVALID":
		return TExecNodePhase_INVALID, nil
	}
	return TExecNodePhase(0), fmt.Errorf("not a valid TExecNodePhase string")
}

func TExecNodePhasePtr(v TExecNodePhase) *TExecNodePhase { return &v }
func (p *TExecNodePhase) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TExecNodePhase(result.Int64)
	return
}

func (p *TExecNodePhase) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TDebugAction int64

const (
	TDebugAction_WAIT TDebugAction = 0
	TDebugAction_FAIL TDebugAction = 1
)

func (p TDebugAction) String() string {
	switch p {
	case TDebugAction_WAIT:
		return "WAIT"
	case TDebugAction_FAIL:
		return "FAIL"
	}
	return "<UNSET>"
}

func TDebugActionFromString(s string) (TDebugAction, error) {
	switch s {
	case "WAIT":
		return TDebugAction_WAIT, nil
	case "FAIL":
		return TDebugAction_FAIL, nil
	}
	return TDebugAction(0), fmt.Errorf("not a valid TDebugAction string")
}

func TDebugActionPtr(v TDebugAction) *TDebugAction { return &v }
func (p *TDebugAction) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TDebugAction(result.Int64)
	return
}

func (p *TDebugAction) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TFileFormatType int64

const (
	TFileFormatType_FORMAT_UNKNOWN         TFileFormatType = -1
	TFileFormatType_FORMAT_CSV_PLAIN       TFileFormatType = 0
	TFileFormatType_FORMAT_CSV_GZ          TFileFormatType = 1
	TFileFormatType_FORMAT_CSV_LZO         TFileFormatType = 2
	TFileFormatType_FORMAT_CSV_BZ2         TFileFormatType = 3
	TFileFormatType_FORMAT_CSV_LZ4FRAME    TFileFormatType = 4
	TFileFormatType_FORMAT_CSV_LZOP        TFileFormatType = 5
	TFileFormatType_FORMAT_PARQUET         TFileFormatType = 6
	TFileFormatType_FORMAT_CSV_DEFLATE     TFileFormatType = 7
	TFileFormatType_FORMAT_ORC             TFileFormatType = 8
	TFileFormatType_FORMAT_JSON            TFileFormatType = 9
	TFileFormatType_FORMAT_PROTO           TFileFormatType = 10
	TFileFormatType_FORMAT_JNI             TFileFormatType = 11
	TFileFormatType_FORMAT_AVRO            TFileFormatType = 12
	TFileFormatType_FORMAT_CSV_LZ4BLOCK    TFileFormatType = 13
	TFileFormatType_FORMAT_CSV_SNAPPYBLOCK TFileFormatType = 14
	TFileFormatType_FORMAT_WAL             TFileFormatType = 15
	TFileFormatType_FORMAT_ARROW           TFileFormatType = 16
)

func (p TFileFormatType) String() string {
	switch p {
	case TFileFormatType_FORMAT_UNKNOWN:
		return "FORMAT_UNKNOWN"
	case TFileFormatType_FORMAT_CSV_PLAIN:
		return "FORMAT_CSV_PLAIN"
	case TFileFormatType_FORMAT_CSV_GZ:
		return "FORMAT_CSV_GZ"
	case TFileFormatType_FORMAT_CSV_LZO:
		return "FORMAT_CSV_LZO"
	case TFileFormatType_FORMAT_CSV_BZ2:
		return "FORMAT_CSV_BZ2"
	case TFileFormatType_FORMAT_CSV_LZ4FRAME:
		return "FORMAT_CSV_LZ4FRAME"
	case TFileFormatType_FORMAT_CSV_LZOP:
		return "FORMAT_CSV_LZOP"
	case TFileFormatType_FORMAT_PARQUET:
		return "FORMAT_PARQUET"
	case TFileFormatType_FORMAT_CSV_DEFLATE:
		return "FORMAT_CSV_DEFLATE"
	case TFileFormatType_FORMAT_ORC:
		return "FORMAT_ORC"
	case TFileFormatType_FORMAT_JSON:
		return "FORMAT_JSON"
	case TFileFormatType_FORMAT_PROTO:
		return "FORMAT_PROTO"
	case TFileFormatType_FORMAT_JNI:
		return "FORMAT_JNI"
	case TFileFormatType_FORMAT_AVRO:
		return "FORMAT_AVRO"
	case TFileFormatType_FORMAT_CSV_LZ4BLOCK:
		return "FORMAT_CSV_LZ4BLOCK"
	case TFileFormatType_FORMAT_CSV_SNAPPYBLOCK:
		return "FORMAT_CSV_SNAPPYBLOCK"
	case TFileFormatType_FORMAT_WAL:
		return "FORMAT_WAL"
	case TFileFormatType_FORMAT_ARROW:
		return "FORMAT_ARROW"
	}
	return "<UNSET>"
}

func TFileFormatTypeFromString(s string) (TFileFormatType, error) {
	switch s {
	case "FORMAT_UNKNOWN":
		return TFileFormatType_FORMAT_UNKNOWN, nil
	case "FORMAT_CSV_PLAIN":
		return TFileFormatType_FORMAT_CSV_PLAIN, nil
	case "FORMAT_CSV_GZ":
		return TFileFormatType_FORMAT_CSV_GZ, nil
	case "FORMAT_CSV_LZO":
		return TFileFormatType_FORMAT_CSV_LZO, nil
	case "FORMAT_CSV_BZ2":
		return TFileFormatType_FORMAT_CSV_BZ2, nil
	case "FORMAT_CSV_LZ4FRAME":
		return TFileFormatType_FORMAT_CSV_LZ4FRAME, nil
	case "FORMAT_CSV_LZOP":
		return TFileFormatType_FORMAT_CSV_LZOP, nil
	case "FORMAT_PARQUET":
		return TFileFormatType_FORMAT_PARQUET, nil
	case "FORMAT_CSV_DEFLATE":
		return TFileFormatType_FORMAT_CSV_DEFLATE, nil
	case "FORMAT_ORC":
		return TFileFormatType_FORMAT_ORC, nil
	case "FORMAT_JSON":
		return TFileFormatType_FORMAT_JSON, nil
	case "FORMAT_PROTO":
		return TFileFormatType_FORMAT_PROTO, nil
	case "FORMAT_JNI":
		return TFileFormatType_FORMAT_JNI, nil
	case "FORMAT_AVRO":
		return TFileFormatType_FORMAT_AVRO, nil
	case "FORMAT_CSV_LZ4BLOCK":
		return TFileFormatType_FORMAT_CSV_LZ4BLOCK, nil
	case "FORMAT_CSV_SNAPPYBLOCK":
		return TFileFormatType_FORMAT_CSV_SNAPPYBLOCK, nil
	case "FORMAT_WAL":
		return TFileFormatType_FORMAT_WAL, nil
	case "FORMAT_ARROW":
		return TFileFormatType_FORMAT_ARROW, nil
	}
	return TFileFormatType(0), fmt.Errorf("not a valid TFileFormatType string")
}

func TFileFormatTypePtr(v TFileFormatType) *TFileFormatType { return &v }
func (p *TFileFormatType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TFileFormatType(result.Int64)
	return
}

func (p *TFileFormatType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TFileCompressType int64

const (
	TFileCompressType_UNKNOWN     TFileCompressType = 0
	TFileCompressType_PLAIN       TFileCompressType = 1
	TFileCompressType_GZ          TFileCompressType = 2
	TFileCompressType_LZO         TFileCompressType = 3
	TFileCompressType_BZ2         TFileCompressType = 4
	TFileCompressType_LZ4FRAME    TFileCompressType = 5
	TFileCompressType_DEFLATE     TFileCompressType = 6
	TFileCompressType_LZOP        TFileCompressType = 7
	TFileCompressType_LZ4BLOCK    TFileCompressType = 8
	TFileCompressType_SNAPPYBLOCK TFileCompressType = 9
	TFileCompressType_ZLIB        TFileCompressType = 10
	TFileCompressType_ZSTD        TFileCompressType = 11
)

func (p TFileCompressType) String() string {
	switch p {
	case TFileCompressType_UNKNOWN:
		return "UNKNOWN"
	case TFileCompressType_PLAIN:
		return "PLAIN"
	case TFileCompressType_GZ:
		return "GZ"
	case TFileCompressType_LZO:
		return "LZO"
	case TFileCompressType_BZ2:
		return "BZ2"
	case TFileCompressType_LZ4FRAME:
		return "LZ4FRAME"
	case TFileCompressType_DEFLATE:
		return "DEFLATE"
	case TFileCompressType_LZOP:
		return "LZOP"
	case TFileCompressType_LZ4BLOCK:
		return "LZ4BLOCK"
	case TFileCompressType_SNAPPYBLOCK:
		return "SNAPPYBLOCK"
	case TFileCompressType_ZLIB:
		return "ZLIB"
	case TFileCompressType_ZSTD:
		return "ZSTD"
	}
	return "<UNSET>"
}

func TFileCompressTypeFromString(s string) (TFileCompressType, error) {
	switch s {
	case "UNKNOWN":
		return TFileCompressType_UNKNOWN, nil
	case "PLAIN":
		return TFileCompressType_PLAIN, nil
	case "GZ":
		return TFileCompressType_GZ, nil
	case "LZO":
		return TFileCompressType_LZO, nil
	case "BZ2":
		return TFileCompressType_BZ2, nil
	case "LZ4FRAME":
		return TFileCompressType_LZ4FRAME, nil
	case "DEFLATE":
		return TFileCompressType_DEFLATE, nil
	case "LZOP":
		return TFileCompressType_LZOP, nil
	case "LZ4BLOCK":
		return TFileCompressType_LZ4BLOCK, nil
	case "SNAPPYBLOCK":
		return TFileCompressType_SNAPPYBLOCK, nil
	case "ZLIB":
		return TFileCompressType_ZLIB, nil
	case "ZSTD":
		return TFileCompressType_ZSTD, nil
	}
	return TFileCompressType(0), fmt.Errorf("not a valid TFileCompressType string")
}

func TFileCompressTypePtr(v TFileCompressType) *TFileCompressType { return &v }
func (p *TFileCompressType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TFileCompressType(result.Int64)
	return
}

func (p *TFileCompressType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TTextSerdeType int64

const (
	TTextSerdeType_JSON_TEXT_SERDE TTextSerdeType = 0
	TTextSerdeType_HIVE_TEXT_SERDE TTextSerdeType = 1
)

func (p TTextSerdeType) String() string {
	switch p {
	case TTextSerdeType_JSON_TEXT_SERDE:
		return "JSON_TEXT_SERDE"
	case TTextSerdeType_HIVE_TEXT_SERDE:
		return "HIVE_TEXT_SERDE"
	}
	return "<UNSET>"
}

func TTextSerdeTypeFromString(s string) (TTextSerdeType, error) {
	switch s {
	case "JSON_TEXT_SERDE":
		return TTextSerdeType_JSON_TEXT_SERDE, nil
	case "HIVE_TEXT_SERDE":
		return TTextSerdeType_HIVE_TEXT_SERDE, nil
	}
	return TTextSerdeType(0), fmt.Errorf("not a valid TTextSerdeType string")
}

func TTextSerdeTypePtr(v TTextSerdeType) *TTextSerdeType { return &v }
func (p *TTextSerdeType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TTextSerdeType(result.Int64)
	return
}

func (p *TTextSerdeType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TDataGenFunctionName int64

const (
	TDataGenFunctionName_NUMBERS TDataGenFunctionName = 0
)

func (p TDataGenFunctionName) String() string {
	switch p {
	case TDataGenFunctionName_NUMBERS:
		return "NUMBERS"
	}
	return "<UNSET>"
}

func TDataGenFunctionNameFromString(s string) (TDataGenFunctionName, error) {
	switch s {
	case "NUMBERS":
		return TDataGenFunctionName_NUMBERS, nil
	}
	return TDataGenFunctionName(0), fmt.Errorf("not a valid TDataGenFunctionName string")
}

func TDataGenFunctionNamePtr(v TDataGenFunctionName) *TDataGenFunctionName { return &v }
func (p *TDataGenFunctionName) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TDataGenFunctionName(result.Int64)
	return
}

func (p *TDataGenFunctionName) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TPushAggOp int64

const (
	TPushAggOp_NONE           TPushAggOp = 0
	TPushAggOp_MINMAX         TPushAggOp = 1
	TPushAggOp_COUNT          TPushAggOp = 2
	TPushAggOp_MIX            TPushAggOp = 3
	TPushAggOp_COUNT_ON_INDEX TPushAggOp = 4
)

func (p TPushAggOp) String() string {
	switch p {
	case TPushAggOp_NONE:
		return "NONE"
	case TPushAggOp_MINMAX:
		return "MINMAX"
	case TPushAggOp_COUNT:
		return "COUNT"
	case TPushAggOp_MIX:
		return "MIX"
	case TPushAggOp_COUNT_ON_INDEX:
		return "COUNT_ON_INDEX"
	}
	return "<UNSET>"
}

func TPushAggOpFromString(s string) (TPushAggOp, error) {
	switch s {
	case "NONE":
		return TPushAggOp_NONE, nil
	case "MINMAX":
		return TPushAggOp_MINMAX, nil
	case "COUNT":
		return TPushAggOp_COUNT, nil
	case "MIX":
		return TPushAggOp_MIX, nil
	case "COUNT_ON_INDEX":
		return TPushAggOp_COUNT_ON_INDEX, nil
	}
	return TPushAggOp(0), fmt.Errorf("not a valid TPushAggOp string")
}

func TPushAggOpPtr(v TPushAggOp) *TPushAggOp { return &v }
func (p *TPushAggOp) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TPushAggOp(result.Int64)
	return
}

func (p *TPushAggOp) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TJoinOp int64

const (
	TJoinOp_INNER_JOIN                TJoinOp = 0
	TJoinOp_LEFT_OUTER_JOIN           TJoinOp = 1
	TJoinOp_LEFT_SEMI_JOIN            TJoinOp = 2
	TJoinOp_RIGHT_OUTER_JOIN          TJoinOp = 3
	TJoinOp_FULL_OUTER_JOIN           TJoinOp = 4
	TJoinOp_CROSS_JOIN                TJoinOp = 5
	TJoinOp_MERGE_JOIN                TJoinOp = 6
	TJoinOp_RIGHT_SEMI_JOIN           TJoinOp = 7
	TJoinOp_LEFT_ANTI_JOIN            TJoinOp = 8
	TJoinOp_RIGHT_ANTI_JOIN           TJoinOp = 9
	TJoinOp_NULL_AWARE_LEFT_ANTI_JOIN TJoinOp = 10
	TJoinOp_NULL_AWARE_LEFT_SEMI_JOIN TJoinOp = 11
)

func (p TJoinOp) String() string {
	switch p {
	case TJoinOp_INNER_JOIN:
		return "INNER_JOIN"
	case TJoinOp_LEFT_OUTER_JOIN:
		return "LEFT_OUTER_JOIN"
	case TJoinOp_LEFT_SEMI_JOIN:
		return "LEFT_SEMI_JOIN"
	case TJoinOp_RIGHT_OUTER_JOIN:
		return "RIGHT_OUTER_JOIN"
	case TJoinOp_FULL_OUTER_JOIN:
		return "FULL_OUTER_JOIN"
	case TJoinOp_CROSS_JOIN:
		return "CROSS_JOIN"
	case TJoinOp_MERGE_JOIN:
		return "MERGE_JOIN"
	case TJoinOp_RIGHT_SEMI_JOIN:
		return "RIGHT_SEMI_JOIN"
	case TJoinOp_LEFT_ANTI_JOIN:
		return "LEFT_ANTI_JOIN"
	case TJoinOp_RIGHT_ANTI_JOIN:
		return "RIGHT_ANTI_JOIN"
	case TJoinOp_NULL_AWARE_LEFT_ANTI_JOIN:
		return "NULL_AWARE_LEFT_ANTI_JOIN"
	case TJoinOp_NULL_AWARE_LEFT_SEMI_JOIN:
		return "NULL_AWARE_LEFT_SEMI_JOIN"
	}
	return "<UNSET>"
}

func TJoinOpFromString(s string) (TJoinOp, error) {
	switch s {
	case "INNER_JOIN":
		return TJoinOp_INNER_JOIN, nil
	case "LEFT_OUTER_JOIN":
		return TJoinOp_LEFT_OUTER_JOIN, nil
	case "LEFT_SEMI_JOIN":
		return TJoinOp_LEFT_SEMI_JOIN, nil
	case "RIGHT_OUTER_JOIN":
		return TJoinOp_RIGHT_OUTER_JOIN, nil
	case "FULL_OUTER_JOIN":
		return TJoinOp_FULL_OUTER_JOIN, nil
	case "CROSS_JOIN":
		return TJoinOp_CROSS_JOIN, nil
	case "MERGE_JOIN":
		return TJoinOp_MERGE_JOIN, nil
	case "RIGHT_SEMI_JOIN":
		return TJoinOp_RIGHT_SEMI_JOIN, nil
	case "LEFT_ANTI_JOIN":
		return TJoinOp_LEFT_ANTI_JOIN, nil
	case "RIGHT_ANTI_JOIN":
		return TJoinOp_RIGHT_ANTI_JOIN, nil
	case "NULL_AWARE_LEFT_ANTI_JOIN":
		return TJoinOp_NULL_AWARE_LEFT_ANTI_JOIN, nil
	case "NULL_AWARE_LEFT_SEMI_JOIN":
		return TJoinOp_NULL_AWARE_LEFT_SEMI_JOIN, nil
	}
	return TJoinOp(0), fmt.Errorf("not a valid TJoinOp string")
}

func TJoinOpPtr(v TJoinOp) *TJoinOp { return &v }
func (p *TJoinOp) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TJoinOp(result.Int64)
	return
}

func (p *TJoinOp) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TJoinDistributionType int64

const (
	TJoinDistributionType_NONE           TJoinDistributionType = 0
	TJoinDistributionType_BROADCAST      TJoinDistributionType = 1
	TJoinDistributionType_PARTITIONED    TJoinDistributionType = 2
	TJoinDistributionType_BUCKET_SHUFFLE TJoinDistributionType = 3
	TJoinDistributionType_COLOCATE       TJoinDistributionType = 4
)

func (p TJoinDistributionType) String() string {
	switch p {
	case TJoinDistributionType_NONE:
		return "NONE"
	case TJoinDistributionType_BROADCAST:
		return "BROADCAST"
	case TJoinDistributionType_PARTITIONED:
		return "PARTITIONED"
	case TJoinDistributionType_BUCKET_SHUFFLE:
		return "BUCKET_SHUFFLE"
	case TJoinDistributionType_COLOCATE:
		return "COLOCATE"
	}
	return "<UNSET>"
}

func TJoinDistributionTypeFromString(s string) (TJoinDistributionType, error) {
	switch s {
	case "NONE":
		return TJoinDistributionType_NONE, nil
	case "BROADCAST":
		return TJoinDistributionType_BROADCAST, nil
	case "PARTITIONED":
		return TJoinDistributionType_PARTITIONED, nil
	case "BUCKET_SHUFFLE":
		return TJoinDistributionType_BUCKET_SHUFFLE, nil
	case "COLOCATE":
		return TJoinDistributionType_COLOCATE, nil
	}
	return TJoinDistributionType(0), fmt.Errorf("not a valid TJoinDistributionType string")
}

func TJoinDistributionTypePtr(v TJoinDistributionType) *TJoinDistributionType { return &v }
func (p *TJoinDistributionType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TJoinDistributionType(result.Int64)
	return
}

func (p *TJoinDistributionType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TAggregationOp int64

const (
	TAggregationOp_INVALID        TAggregationOp = 0
	TAggregationOp_COUNT          TAggregationOp = 1
	TAggregationOp_MAX            TAggregationOp = 2
	TAggregationOp_DISTINCT_PC    TAggregationOp = 3
	TAggregationOp_DISTINCT_PCSA  TAggregationOp = 4
	TAggregationOp_MIN            TAggregationOp = 5
	TAggregationOp_SUM            TAggregationOp = 6
	TAggregationOp_GROUP_CONCAT   TAggregationOp = 7
	TAggregationOp_HLL            TAggregationOp = 8
	TAggregationOp_COUNT_DISTINCT TAggregationOp = 9
	TAggregationOp_SUM_DISTINCT   TAggregationOp = 10
	TAggregationOp_LEAD           TAggregationOp = 11
	TAggregationOp_FIRST_VALUE    TAggregationOp = 12
	TAggregationOp_LAST_VALUE     TAggregationOp = 13
	TAggregationOp_RANK           TAggregationOp = 14
	TAggregationOp_DENSE_RANK     TAggregationOp = 15
	TAggregationOp_ROW_NUMBER     TAggregationOp = 16
	TAggregationOp_LAG            TAggregationOp = 17
	TAggregationOp_HLL_C          TAggregationOp = 18
	TAggregationOp_BITMAP_UNION   TAggregationOp = 19
	TAggregationOp_NTILE          TAggregationOp = 20
)

func (p TAggregationOp) String() string {
	switch p {
	case TAggregationOp_INVALID:
		return "INVALID"
	case TAggregationOp_COUNT:
		return "COUNT"
	case TAggregationOp_MAX:
		return "MAX"
	case TAggregationOp_DISTINCT_PC:
		return "DISTINCT_PC"
	case TAggregationOp_DISTINCT_PCSA:
		return "DISTINCT_PCSA"
	case TAggregationOp_MIN:
		return "MIN"
	case TAggregationOp_SUM:
		return "SUM"
	case TAggregationOp_GROUP_CONCAT:
		return "GROUP_CONCAT"
	case TAggregationOp_HLL:
		return "HLL"
	case TAggregationOp_COUNT_DISTINCT:
		return "COUNT_DISTINCT"
	case TAggregationOp_SUM_DISTINCT:
		return "SUM_DISTINCT"
	case TAggregationOp_LEAD:
		return "LEAD"
	case TAggregationOp_FIRST_VALUE:
		return "FIRST_VALUE"
	case TAggregationOp_LAST_VALUE:
		return "LAST_VALUE"
	case TAggregationOp_RANK:
		return "RANK"
	case TAggregationOp_DENSE_RANK:
		return "DENSE_RANK"
	case TAggregationOp_ROW_NUMBER:
		return "ROW_NUMBER"
	case TAggregationOp_LAG:
		return "LAG"
	case TAggregationOp_HLL_C:
		return "HLL_C"
	case TAggregationOp_BITMAP_UNION:
		return "BITMAP_UNION"
	case TAggregationOp_NTILE:
		return "NTILE"
	}
	return "<UNSET>"
}

func TAggregationOpFromString(s string) (TAggregationOp, error) {
	switch s {
	case "INVALID":
		return TAggregationOp_INVALID, nil
	case "COUNT":
		return TAggregationOp_COUNT, nil
	case "MAX":
		return TAggregationOp_MAX, nil
	case "DISTINCT_PC":
		return TAggregationOp_DISTINCT_PC, nil
	case "DISTINCT_PCSA":
		return TAggregationOp_DISTINCT_PCSA, nil
	case "MIN":
		return TAggregationOp_MIN, nil
	case "SUM":
		return TAggregationOp_SUM, nil
	case "GROUP_CONCAT":
		return TAggregationOp_GROUP_CONCAT, nil
	case "HLL":
		return TAggregationOp_HLL, nil
	case "COUNT_DISTINCT":
		return TAggregationOp_COUNT_DISTINCT, nil
	case "SUM_DISTINCT":
		return TAggregationOp_SUM_DISTINCT, nil
	case "LEAD":
		return TAggregationOp_LEAD, nil
	case "FIRST_VALUE":
		return TAggregationOp_FIRST_VALUE, nil
	case "LAST_VALUE":
		return TAggregationOp_LAST_VALUE, nil
	case "RANK":
		return TAggregationOp_RANK, nil
	case "DENSE_RANK":
		return TAggregationOp_DENSE_RANK, nil
	case "ROW_NUMBER":
		return TAggregationOp_ROW_NUMBER, nil
	case "LAG":
		return TAggregationOp_LAG, nil
	case "HLL_C":
		return TAggregationOp_HLL_C, nil
	case "BITMAP_UNION":
		return TAggregationOp_BITMAP_UNION, nil
	case "NTILE":
		return TAggregationOp_NTILE, nil
	}
	return TAggregationOp(0), fmt.Errorf("not a valid TAggregationOp string")
}

func TAggregationOpPtr(v TAggregationOp) *TAggregationOp { return &v }
func (p *TAggregationOp) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TAggregationOp(result.Int64)
	return
}

func (p *TAggregationOp) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TSortAlgorithm int64

const (
	TSortAlgorithm_HEAP_SORT TSortAlgorithm = 0
	TSortAlgorithm_TOPN_SORT TSortAlgorithm = 1
	TSortAlgorithm_FULL_SORT TSortAlgorithm = 2
)

func (p TSortAlgorithm) String() string {
	switch p {
	case TSortAlgorithm_HEAP_SORT:
		return "HEAP_SORT"
	case TSortAlgorithm_TOPN_SORT:
		return "TOPN_SORT"
	case TSortAlgorithm_FULL_SORT:
		return "FULL_SORT"
	}
	return "<UNSET>"
}

func TSortAlgorithmFromString(s string) (TSortAlgorithm, error) {
	switch s {
	case "HEAP_SORT":
		return TSortAlgorithm_HEAP_SORT, nil
	case "TOPN_SORT":
		return TSortAlgorithm_TOPN_SORT, nil
	case "FULL_SORT":
		return TSortAlgorithm_FULL_SORT, nil
	}
	return TSortAlgorithm(0), fmt.Errorf("not a valid TSortAlgorithm string")
}

func TSortAlgorithmPtr(v TSortAlgorithm) *TSortAlgorithm { return &v }
func (p *TSortAlgorithm) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TSortAlgorithm(result.Int64)
	return
}

func (p *TSortAlgorithm) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TopNAlgorithm int64

const (
	TopNAlgorithm_RANK       TopNAlgorithm = 0
	TopNAlgorithm_DENSE_RANK TopNAlgorithm = 1
	TopNAlgorithm_ROW_NUMBER TopNAlgorithm = 2
)

func (p TopNAlgorithm) String() string {
	switch p {
	case TopNAlgorithm_RANK:
		return "RANK"
	case TopNAlgorithm_DENSE_RANK:
		return "DENSE_RANK"
	case TopNAlgorithm_ROW_NUMBER:
		return "ROW_NUMBER"
	}
	return "<UNSET>"
}

func TopNAlgorithmFromString(s string) (TopNAlgorithm, error) {
	switch s {
	case "RANK":
		return TopNAlgorithm_RANK, nil
	case "DENSE_RANK":
		return TopNAlgorithm_DENSE_RANK, nil
	case "ROW_NUMBER":
		return TopNAlgorithm_ROW_NUMBER, nil
	}
	return TopNAlgorithm(0), fmt.Errorf("not a valid TopNAlgorithm string")
}

func TopNAlgorithmPtr(v TopNAlgorithm) *TopNAlgorithm { return &v }
func (p *TopNAlgorithm) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TopNAlgorithm(result.Int64)
	return
}

func (p *TopNAlgorithm) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TPartTopNPhase int64

const (
	TPartTopNPhase_UNKNOWN          TPartTopNPhase = 0
	TPartTopNPhase_ONE_PHASE_GLOBAL TPartTopNPhase = 1
	TPartTopNPhase_TWO_PHASE_LOCAL  TPartTopNPhase = 2
	TPartTopNPhase_TWO_PHASE_GLOBAL TPartTopNPhase = 3
)

func (p TPartTopNPhase) String() string {
	switch p {
	case TPartTopNPhase_UNKNOWN:
		return "UNKNOWN"
	case TPartTopNPhase_ONE_PHASE_GLOBAL:
		return "ONE_PHASE_GLOBAL"
	case TPartTopNPhase_TWO_PHASE_LOCAL:
		return "TWO_PHASE_LOCAL"
	case TPartTopNPhase_TWO_PHASE_GLOBAL:
		return "TWO_PHASE_GLOBAL"
	}
	return "<UNSET>"
}

func TPartTopNPhaseFromString(s string) (TPartTopNPhase, error) {
	switch s {
	case "UNKNOWN":
		return TPartTopNPhase_UNKNOWN, nil
	case "ONE_PHASE_GLOBAL":
		return TPartTopNPhase_ONE_PHASE_GLOBAL, nil
	case "TWO_PHASE_LOCAL":
		return TPartTopNPhase_TWO_PHASE_LOCAL, nil
	case "TWO_PHASE_GLOBAL":
		return TPartTopNPhase_TWO_PHASE_GLOBAL, nil
	}
	return TPartTopNPhase(0), fmt.Errorf("not a valid TPartTopNPhase string")
}

func TPartTopNPhasePtr(v TPartTopNPhase) *TPartTopNPhase { return &v }
func (p *TPartTopNPhase) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TPartTopNPhase(result.Int64)
	return
}

func (p *TPartTopNPhase) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TAnalyticWindowType int64

const (
	TAnalyticWindowType_RANGE TAnalyticWindowType = 0
	TAnalyticWindowType_ROWS  TAnalyticWindowType = 1
)

func (p TAnalyticWindowType) String() string {
	switch p {
	case TAnalyticWindowType_RANGE:
		return "RANGE"
	case TAnalyticWindowType_ROWS:
		return "ROWS"
	}
	return "<UNSET>"
}

func TAnalyticWindowTypeFromString(s string) (TAnalyticWindowType, error) {
	switch s {
	case "RANGE":
		return TAnalyticWindowType_RANGE, nil
	case "ROWS":
		return TAnalyticWindowType_ROWS, nil
	}
	return TAnalyticWindowType(0), fmt.Errorf("not a valid TAnalyticWindowType string")
}

func TAnalyticWindowTypePtr(v TAnalyticWindowType) *TAnalyticWindowType { return &v }
func (p *TAnalyticWindowType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TAnalyticWindowType(result.Int64)
	return
}

func (p *TAnalyticWindowType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TAnalyticWindowBoundaryType int64

const (
	TAnalyticWindowBoundaryType_CURRENT_ROW TAnalyticWindowBoundaryType = 0
	TAnalyticWindowBoundaryType_PRECEDING   TAnalyticWindowBoundaryType = 1
	TAnalyticWindowBoundaryType_FOLLOWING   TAnalyticWindowBoundaryType = 2
)

func (p TAnalyticWindowBoundaryType) String() string {
	switch p {
	case TAnalyticWindowBoundaryType_CURRENT_ROW:
		return "CURRENT_ROW"
	case TAnalyticWindowBoundaryType_PRECEDING:
		return "PRECEDING"
	case TAnalyticWindowBoundaryType_FOLLOWING:
		return "FOLLOWING"
	}
	return "<UNSET>"
}

func TAnalyticWindowBoundaryTypeFromString(s string) (TAnalyticWindowBoundaryType, error) {
	switch s {
	case "CURRENT_ROW":
		return TAnalyticWindowBoundaryType_CURRENT_ROW, nil
	case "PRECEDING":
		return TAnalyticWindowBoundaryType_PRECEDING, nil
	case "FOLLOWING":
		return TAnalyticWindowBoundaryType_FOLLOWING, nil
	}
	return TAnalyticWindowBoundaryType(0), fmt.Errorf("not a valid TAnalyticWindowBoundaryType string")
}

func TAnalyticWindowBoundaryTypePtr(v TAnalyticWindowBoundaryType) *TAnalyticWindowBoundaryType {
	return &v
}
func (p *TAnalyticWindowBoundaryType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TAnalyticWindowBoundaryType(result.Int64)
	return
}

func (p *TAnalyticWindowBoundaryType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TAssertion int64

const (
	TAssertion_EQ TAssertion = 0
	TAssertion_NE TAssertion = 1
	TAssertion_LT TAssertion = 2
	TAssertion_LE TAssertion = 3
	TAssertion_GT TAssertion = 4
	TAssertion_GE TAssertion = 5
)

func (p TAssertion) String() string {
	switch p {
	case TAssertion_EQ:
		return "EQ"
	case TAssertion_NE:
		return "NE"
	case TAssertion_LT:
		return "LT"
	case TAssertion_LE:
		return "LE"
	case TAssertion_GT:
		return "GT"
	case TAssertion_GE:
		return "GE"
	}
	return "<UNSET>"
}

func TAssertionFromString(s string) (TAssertion, error) {
	switch s {
	case "EQ":
		return TAssertion_EQ, nil
	case "NE":
		return TAssertion_NE, nil
	case "LT":
		return TAssertion_LT, nil
	case "LE":
		return TAssertion_LE, nil
	case "GT":
		return TAssertion_GT, nil
	case "GE":
		return TAssertion_GE, nil
	}
	return TAssertion(0), fmt.Errorf("not a valid TAssertion string")
}

func TAssertionPtr(v TAssertion) *TAssertion { return &v }
func (p *TAssertion) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TAssertion(result.Int64)
	return
}

func (p *TAssertion) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TRuntimeFilterType int64

const (
	TRuntimeFilterType_IN          TRuntimeFilterType = 1
	TRuntimeFilterType_BLOOM       TRuntimeFilterType = 2
	TRuntimeFilterType_MIN_MAX     TRuntimeFilterType = 4
	TRuntimeFilterType_IN_OR_BLOOM TRuntimeFilterType = 8
	TRuntimeFilterType_BITMAP      TRuntimeFilterType = 16
)

func (p TRuntimeFilterType) String() string {
	switch p {
	case TRuntimeFilterType_IN:
		return "IN"
	case TRuntimeFilterType_BLOOM:
		return "BLOOM"
	case TRuntimeFilterType_MIN_MAX:
		return "MIN_MAX"
	case TRuntimeFilterType_IN_OR_BLOOM:
		return "IN_OR_BLOOM"
	case TRuntimeFilterType_BITMAP:
		return "BITMAP"
	}
	return "<UNSET>"
}

func TRuntimeFilterTypeFromString(s string) (TRuntimeFilterType, error) {
	switch s {
	case "IN":
		return TRuntimeFilterType_IN, nil
	case "BLOOM":
		return TRuntimeFilterType_BLOOM, nil
	case "MIN_MAX":
		return TRuntimeFilterType_MIN_MAX, nil
	case "IN_OR_BLOOM":
		return TRuntimeFilterType_IN_OR_BLOOM, nil
	case "BITMAP":
		return TRuntimeFilterType_BITMAP, nil
	}
	return TRuntimeFilterType(0), fmt.Errorf("not a valid TRuntimeFilterType string")
}

func TRuntimeFilterTypePtr(v TRuntimeFilterType) *TRuntimeFilterType { return &v }
func (p *TRuntimeFilterType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TRuntimeFilterType(result.Int64)
	return
}

func (p *TRuntimeFilterType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TMinMaxRuntimeFilterType int64

const (
	TMinMaxRuntimeFilterType_MIN     TMinMaxRuntimeFilterType = 1
	TMinMaxRuntimeFilterType_MAX     TMinMaxRuntimeFilterType = 2
	TMinMaxRuntimeFilterType_MIN_MAX TMinMaxRuntimeFilterType = 4
)

func (p TMinMaxRuntimeFilterType) String() string {
	switch p {
	case TMinMaxRuntimeFilterType_MIN:
		return "MIN"
	case TMinMaxRuntimeFilterType_MAX:
		return "MAX"
	case TMinMaxRuntimeFilterType_MIN_MAX:
		return "MIN_MAX"
	}
	return "<UNSET>"
}

func TMinMaxRuntimeFilterTypeFromString(s string) (TMinMaxRuntimeFilterType, error) {
	switch s {
	case "MIN":
		return TMinMaxRuntimeFilterType_MIN, nil
	case "MAX":
		return TMinMaxRuntimeFilterType_MAX, nil
	case "MIN_MAX":
		return TMinMaxRuntimeFilterType_MIN_MAX, nil
	}
	return TMinMaxRuntimeFilterType(0), fmt.Errorf("not a valid TMinMaxRuntimeFilterType string")
}

func TMinMaxRuntimeFilterTypePtr(v TMinMaxRuntimeFilterType) *TMinMaxRuntimeFilterType { return &v }
func (p *TMinMaxRuntimeFilterType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TMinMaxRuntimeFilterType(result.Int64)
	return
}

func (p *TMinMaxRuntimeFilterType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TKeyRange struct {
	BeginKey   int64                `thrift:"begin_key,1,required" frugal:"1,required,i64" json:"begin_key"`
	EndKey     int64                `thrift:"end_key,2,required" frugal:"2,required,i64" json:"end_key"`
	ColumnType types.TPrimitiveType `thrift:"column_type,3,required" frugal:"3,required,TPrimitiveType" json:"column_type"`
	ColumnName string               `thrift:"column_name,4,required" frugal:"4,required,string" json:"column_name"`
}

func NewTKeyRange() *TKeyRange {
	return &TKeyRange{}
}

func (p *TKeyRange) InitDefault() {
}

func (p *TKeyRange) GetBeginKey() (v int64) {
	return p.BeginKey
}

func (p *TKeyRange) GetEndKey() (v int64) {
	return p.EndKey
}

func (p *TKeyRange) GetColumnType() (v types.TPrimitiveType) {
	return p.ColumnType
}

func (p *TKeyRange) GetColumnName() (v string) {
	return p.ColumnName
}
func (p *TKeyRange) SetBeginKey(val int64) {
	p.BeginKey = val
}
func (p *TKeyRange) SetEndKey(val int64) {
	p.EndKey = val
}
func (p *TKeyRange) SetColumnType(val types.TPrimitiveType) {
	p.ColumnType = val
}
func (p *TKeyRange) SetColumnName(val string) {
	p.ColumnName = val
}

var fieldIDToName_TKeyRange = map[int16]string{
	1: "begin_key",
	2: "end_key",
	3: "column_type",
	4: "column_name",
}

func (p *TKeyRange) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBeginKey bool = false
	var issetEndKey bool = false
	var issetColumnType bool = false
	var issetColumnName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBeginKey = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEndKey = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumnType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumnName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBeginKey {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEndKey {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetColumnType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetColumnName {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TKeyRange[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TKeyRange[fieldId]))
}

func (p *TKeyRange) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BeginKey = _field
	return nil
}
func (p *TKeyRange) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndKey = _field
	return nil
}
func (p *TKeyRange) ReadField3(iprot thrift.TProtocol) error {

	var _field types.TPrimitiveType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TPrimitiveType(v)
	}
	p.ColumnType = _field
	return nil
}
func (p *TKeyRange) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ColumnName = _field
	return nil
}

func (p *TKeyRange) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TKeyRange"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TKeyRange) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("begin_key", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.BeginKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TKeyRange) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_key", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EndKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TKeyRange) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("column_type", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ColumnType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TKeyRange) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("column_name", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ColumnName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TKeyRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TKeyRange(%+v)", *p)

}

func (p *TKeyRange) DeepEqual(ano *TKeyRange) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BeginKey) {
		return false
	}
	if !p.Field2DeepEqual(ano.EndKey) {
		return false
	}
	if !p.Field3DeepEqual(ano.ColumnType) {
		return false
	}
	if !p.Field4DeepEqual(ano.ColumnName) {
		return false
	}
	return true
}

func (p *TKeyRange) Field1DeepEqual(src int64) bool {

	if p.BeginKey != src {
		return false
	}
	return true
}
func (p *TKeyRange) Field2DeepEqual(src int64) bool {

	if p.EndKey != src {
		return false
	}
	return true
}
func (p *TKeyRange) Field3DeepEqual(src types.TPrimitiveType) bool {

	if p.ColumnType != src {
		return false
	}
	return true
}
func (p *TKeyRange) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ColumnName, src) != 0 {
		return false
	}
	return true
}

type TPaloScanRange struct {
	Hosts                 []*types.TNetworkAddress `thrift:"hosts,1,required" frugal:"1,required,list<types.TNetworkAddress>" json:"hosts"`
	SchemaHash            string                   `thrift:"schema_hash,2,required" frugal:"2,required,string" json:"schema_hash"`
	Version               string                   `thrift:"version,3,required" frugal:"3,required,string" json:"version"`
	VersionHash           string                   `thrift:"version_hash,4,required" frugal:"4,required,string" json:"version_hash"`
	TabletId              types.TTabletId          `thrift:"tablet_id,5,required" frugal:"5,required,i64" json:"tablet_id"`
	DbName                string                   `thrift:"db_name,6,required" frugal:"6,required,string" json:"db_name"`
	PartitionColumnRanges []*TKeyRange             `thrift:"partition_column_ranges,7,optional" frugal:"7,optional,list<TKeyRange>" json:"partition_column_ranges,omitempty"`
	IndexName             *string                  `thrift:"index_name,8,optional" frugal:"8,optional,string" json:"index_name,omitempty"`
	TableName             *string                  `thrift:"table_name,9,optional" frugal:"9,optional,string" json:"table_name,omitempty"`
}

func NewTPaloScanRange() *TPaloScanRange {
	return &TPaloScanRange{}
}

func (p *TPaloScanRange) InitDefault() {
}

func (p *TPaloScanRange) GetHosts() (v []*types.TNetworkAddress) {
	return p.Hosts
}

func (p *TPaloScanRange) GetSchemaHash() (v string) {
	return p.SchemaHash
}

func (p *TPaloScanRange) GetVersion() (v string) {
	return p.Version
}

func (p *TPaloScanRange) GetVersionHash() (v string) {
	return p.VersionHash
}

func (p *TPaloScanRange) GetTabletId() (v types.TTabletId) {
	return p.TabletId
}

func (p *TPaloScanRange) GetDbName() (v string) {
	return p.DbName
}

var TPaloScanRange_PartitionColumnRanges_DEFAULT []*TKeyRange

func (p *TPaloScanRange) GetPartitionColumnRanges() (v []*TKeyRange) {
	if !p.IsSetPartitionColumnRanges() {
		return TPaloScanRange_PartitionColumnRanges_DEFAULT
	}
	return p.PartitionColumnRanges
}

var TPaloScanRange_IndexName_DEFAULT string

func (p *TPaloScanRange) GetIndexName() (v string) {
	if !p.IsSetIndexName() {
		return TPaloScanRange_IndexName_DEFAULT
	}
	return *p.IndexName
}

var TPaloScanRange_TableName_DEFAULT string

func (p *TPaloScanRange) GetTableName() (v string) {
	if !p.IsSetTableName() {
		return TPaloScanRange_TableName_DEFAULT
	}
	return *p.TableName
}
func (p *TPaloScanRange) SetHosts(val []*types.TNetworkAddress) {
	p.Hosts = val
}
func (p *TPaloScanRange) SetSchemaHash(val string) {
	p.SchemaHash = val
}
func (p *TPaloScanRange) SetVersion(val string) {
	p.Version = val
}
func (p *TPaloScanRange) SetVersionHash(val string) {
	p.VersionHash = val
}
func (p *TPaloScanRange) SetTabletId(val types.TTabletId) {
	p.TabletId = val
}
func (p *TPaloScanRange) SetDbName(val string) {
	p.DbName = val
}
func (p *TPaloScanRange) SetPartitionColumnRanges(val []*TKeyRange) {
	p.PartitionColumnRanges = val
}
func (p *TPaloScanRange) SetIndexName(val *string) {
	p.IndexName = val
}
func (p *TPaloScanRange) SetTableName(val *string) {
	p.TableName = val
}

var fieldIDToName_TPaloScanRange = map[int16]string{
	1: "hosts",
	2: "schema_hash",
	3: "version",
	4: "version_hash",
	5: "tablet_id",
	6: "db_name",
	7: "partition_column_ranges",
	8: "index_name",
	9: "table_name",
}

func (p *TPaloScanRange) IsSetPartitionColumnRanges() bool {
	return p.PartitionColumnRanges != nil
}

func (p *TPaloScanRange) IsSetIndexName() bool {
	return p.IndexName != nil
}

func (p *TPaloScanRange) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *TPaloScanRange) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetHosts bool = false
	var issetSchemaHash bool = false
	var issetVersion bool = false
	var issetVersionHash bool = false
	var issetTabletId bool = false
	var issetDbName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetHosts = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchemaHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersionHash = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetDbName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetHosts {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSchemaHash {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetVersionHash {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTabletId {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetDbName {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPaloScanRange[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPaloScanRange[fieldId]))
}

func (p *TPaloScanRange) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*types.TNetworkAddress, 0, size)
	values := make([]types.TNetworkAddress, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Hosts = _field
	return nil
}
func (p *TPaloScanRange) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SchemaHash = _field
	return nil
}
func (p *TPaloScanRange) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *TPaloScanRange) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VersionHash = _field
	return nil
}
func (p *TPaloScanRange) ReadField5(iprot thrift.TProtocol) error {

	var _field types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TabletId = _field
	return nil
}
func (p *TPaloScanRange) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DbName = _field
	return nil
}
func (p *TPaloScanRange) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TKeyRange, 0, size)
	values := make([]TKeyRange, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PartitionColumnRanges = _field
	return nil
}
func (p *TPaloScanRange) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IndexName = _field
	return nil
}
func (p *TPaloScanRange) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableName = _field
	return nil
}

func (p *TPaloScanRange) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPaloScanRange"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPaloScanRange) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hosts", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
		return err
	}
	for _, v := range p.Hosts {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPaloScanRange) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schema_hash", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SchemaHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPaloScanRange) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPaloScanRange) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version_hash", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VersionHash); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TPaloScanRange) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TPaloScanRange) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("db_name", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DbName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TPaloScanRange) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionColumnRanges() {
		if err = oprot.WriteFieldBegin("partition_column_ranges", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PartitionColumnRanges)); err != nil {
			return err
		}
		for _, v := range p.PartitionColumnRanges {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TPaloScanRange) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndexName() {
		if err = oprot.WriteFieldBegin("index_name", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.IndexName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TPaloScanRange) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err = oprot.WriteFieldBegin("table_name", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TableName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TPaloScanRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPaloScanRange(%+v)", *p)

}

func (p *TPaloScanRange) DeepEqual(ano *TPaloScanRange) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Hosts) {
		return false
	}
	if !p.Field2DeepEqual(ano.SchemaHash) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.VersionHash) {
		return false
	}
	if !p.Field5DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field6DeepEqual(ano.DbName) {
		return false
	}
	if !p.Field7DeepEqual(ano.PartitionColumnRanges) {
		return false
	}
	if !p.Field8DeepEqual(ano.IndexName) {
		return false
	}
	if !p.Field9DeepEqual(ano.TableName) {
		return false
	}
	return true
}

func (p *TPaloScanRange) Field1DeepEqual(src []*types.TNetworkAddress) bool {

	if len(p.Hosts) != len(src) {
		return false
	}
	for i, v := range p.Hosts {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPaloScanRange) Field2DeepEqual(src string) bool {

	if strings.Compare(p.SchemaHash, src) != 0 {
		return false
	}
	return true
}
func (p *TPaloScanRange) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Version, src) != 0 {
		return false
	}
	return true
}
func (p *TPaloScanRange) Field4DeepEqual(src string) bool {

	if strings.Compare(p.VersionHash, src) != 0 {
		return false
	}
	return true
}
func (p *TPaloScanRange) Field5DeepEqual(src types.TTabletId) bool {

	if p.TabletId != src {
		return false
	}
	return true
}
func (p *TPaloScanRange) Field6DeepEqual(src string) bool {

	if strings.Compare(p.DbName, src) != 0 {
		return false
	}
	return true
}
func (p *TPaloScanRange) Field7DeepEqual(src []*TKeyRange) bool {

	if len(p.PartitionColumnRanges) != len(src) {
		return false
	}
	for i, v := range p.PartitionColumnRanges {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPaloScanRange) Field8DeepEqual(src *string) bool {

	if p.IndexName == src {
		return true
	} else if p.IndexName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.IndexName, *src) != 0 {
		return false
	}
	return true
}
func (p *TPaloScanRange) Field9DeepEqual(src *string) bool {

	if p.TableName == src {
		return true
	} else if p.TableName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TableName, *src) != 0 {
		return false
	}
	return true
}

type THdfsConf struct {
	Key   string `thrift:"key,1,required" frugal:"1,required,string" json:"key"`
	Value string `thrift:"value,2,required" frugal:"2,required,string" json:"value"`
}

func NewTHdfsConf() *THdfsConf {
	return &THdfsConf{}
}

func (p *THdfsConf) InitDefault() {
}

func (p *THdfsConf) GetKey() (v string) {
	return p.Key
}

func (p *THdfsConf) GetValue() (v string) {
	return p.Value
}
func (p *THdfsConf) SetKey(val string) {
	p.Key = val
}
func (p *THdfsConf) SetValue(val string) {
	p.Value = val
}

var fieldIDToName_THdfsConf = map[int16]string{
	1: "key",
	2: "value",
}

func (p *THdfsConf) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetKey bool = false
	var issetValue bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetKey = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetValue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetKey {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetValue {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_THdfsConf[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_THdfsConf[fieldId]))
}

func (p *THdfsConf) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Key = _field
	return nil
}
func (p *THdfsConf) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}

func (p *THdfsConf) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("THdfsConf"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *THdfsConf) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Key); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *THdfsConf) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *THdfsConf) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("THdfsConf(%+v)", *p)

}

func (p *THdfsConf) DeepEqual(ano *THdfsConf) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.Value) {
		return false
	}
	return true
}

func (p *THdfsConf) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Key, src) != 0 {
		return false
	}
	return true
}
func (p *THdfsConf) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Value, src) != 0 {
		return false
	}
	return true
}

type THdfsParams struct {
	FsName                *string      `thrift:"fs_name,1,optional" frugal:"1,optional,string" json:"fs_name,omitempty"`
	User                  *string      `thrift:"user,2,optional" frugal:"2,optional,string" json:"user,omitempty"`
	HdfsKerberosPrincipal *string      `thrift:"hdfs_kerberos_principal,3,optional" frugal:"3,optional,string" json:"hdfs_kerberos_principal,omitempty"`
	HdfsKerberosKeytab    *string      `thrift:"hdfs_kerberos_keytab,4,optional" frugal:"4,optional,string" json:"hdfs_kerberos_keytab,omitempty"`
	HdfsConf              []*THdfsConf `thrift:"hdfs_conf,5,optional" frugal:"5,optional,list<THdfsConf>" json:"hdfs_conf,omitempty"`
	RootPath              *string      `thrift:"root_path,6,optional" frugal:"6,optional,string" json:"root_path,omitempty"`
}

func NewTHdfsParams() *THdfsParams {
	return &THdfsParams{}
}

func (p *THdfsParams) InitDefault() {
}

var THdfsParams_FsName_DEFAULT string

func (p *THdfsParams) GetFsName() (v string) {
	if !p.IsSetFsName() {
		return THdfsParams_FsName_DEFAULT
	}
	return *p.FsName
}

var THdfsParams_User_DEFAULT string

func (p *THdfsParams) GetUser() (v string) {
	if !p.IsSetUser() {
		return THdfsParams_User_DEFAULT
	}
	return *p.User
}

var THdfsParams_HdfsKerberosPrincipal_DEFAULT string

func (p *THdfsParams) GetHdfsKerberosPrincipal() (v string) {
	if !p.IsSetHdfsKerberosPrincipal() {
		return THdfsParams_HdfsKerberosPrincipal_DEFAULT
	}
	return *p.HdfsKerberosPrincipal
}

var THdfsParams_HdfsKerberosKeytab_DEFAULT string

func (p *THdfsParams) GetHdfsKerberosKeytab() (v string) {
	if !p.IsSetHdfsKerberosKeytab() {
		return THdfsParams_HdfsKerberosKeytab_DEFAULT
	}
	return *p.HdfsKerberosKeytab
}

var THdfsParams_HdfsConf_DEFAULT []*THdfsConf

func (p *THdfsParams) GetHdfsConf() (v []*THdfsConf) {
	if !p.IsSetHdfsConf() {
		return THdfsParams_HdfsConf_DEFAULT
	}
	return p.HdfsConf
}

var THdfsParams_RootPath_DEFAULT string

func (p *THdfsParams) GetRootPath() (v string) {
	if !p.IsSetRootPath() {
		return THdfsParams_RootPath_DEFAULT
	}
	return *p.RootPath
}
func (p *THdfsParams) SetFsName(val *string) {
	p.FsName = val
}
func (p *THdfsParams) SetUser(val *string) {
	p.User = val
}
func (p *THdfsParams) SetHdfsKerberosPrincipal(val *string) {
	p.HdfsKerberosPrincipal = val
}
func (p *THdfsParams) SetHdfsKerberosKeytab(val *string) {
	p.HdfsKerberosKeytab = val
}
func (p *THdfsParams) SetHdfsConf(val []*THdfsConf) {
	p.HdfsConf = val
}
func (p *THdfsParams) SetRootPath(val *string) {
	p.RootPath = val
}

var fieldIDToName_THdfsParams = map[int16]string{
	1: "fs_name",
	2: "user",
	3: "hdfs_kerberos_principal",
	4: "hdfs_kerberos_keytab",
	5: "hdfs_conf",
	6: "root_path",
}

func (p *THdfsParams) IsSetFsName() bool {
	return p.FsName != nil
}

func (p *THdfsParams) IsSetUser() bool {
	return p.User != nil
}

func (p *THdfsParams) IsSetHdfsKerberosPrincipal() bool {
	return p.HdfsKerberosPrincipal != nil
}

func (p *THdfsParams) IsSetHdfsKerberosKeytab() bool {
	return p.HdfsKerberosKeytab != nil
}

func (p *THdfsParams) IsSetHdfsConf() bool {
	return p.HdfsConf != nil
}

func (p *THdfsParams) IsSetRootPath() bool {
	return p.RootPath != nil
}

func (p *THdfsParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_THdfsParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *THdfsParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FsName = _field
	return nil
}
func (p *THdfsParams) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *THdfsParams) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HdfsKerberosPrincipal = _field
	return nil
}
func (p *THdfsParams) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HdfsKerberosKeytab = _field
	return nil
}
func (p *THdfsParams) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*THdfsConf, 0, size)
	values := make([]THdfsConf, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.HdfsConf = _field
	return nil
}
func (p *THdfsParams) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RootPath = _field
	return nil
}

func (p *THdfsParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("THdfsParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *THdfsParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFsName() {
		if err = oprot.WriteFieldBegin("fs_name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FsName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *THdfsParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *THdfsParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetHdfsKerberosPrincipal() {
		if err = oprot.WriteFieldBegin("hdfs_kerberos_principal", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.HdfsKerberosPrincipal); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *THdfsParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetHdfsKerberosKeytab() {
		if err = oprot.WriteFieldBegin("hdfs_kerberos_keytab", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.HdfsKerberosKeytab); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *THdfsParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetHdfsConf() {
		if err = oprot.WriteFieldBegin("hdfs_conf", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HdfsConf)); err != nil {
			return err
		}
		for _, v := range p.HdfsConf {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *THdfsParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetRootPath() {
		if err = oprot.WriteFieldBegin("root_path", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RootPath); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *THdfsParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("THdfsParams(%+v)", *p)

}

func (p *THdfsParams) DeepEqual(ano *THdfsParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FsName) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.HdfsKerberosPrincipal) {
		return false
	}
	if !p.Field4DeepEqual(ano.HdfsKerberosKeytab) {
		return false
	}
	if !p.Field5DeepEqual(ano.HdfsConf) {
		return false
	}
	if !p.Field6DeepEqual(ano.RootPath) {
		return false
	}
	return true
}

func (p *THdfsParams) Field1DeepEqual(src *string) bool {

	if p.FsName == src {
		return true
	} else if p.FsName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FsName, *src) != 0 {
		return false
	}
	return true
}
func (p *THdfsParams) Field2DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *THdfsParams) Field3DeepEqual(src *string) bool {

	if p.HdfsKerberosPrincipal == src {
		return true
	} else if p.HdfsKerberosPrincipal == nil || src == nil {
		return false
	}
	if strings.Compare(*p.HdfsKerberosPrincipal, *src) != 0 {
		return false
	}
	return true
}
func (p *THdfsParams) Field4DeepEqual(src *string) bool {

	if p.HdfsKerberosKeytab == src {
		return true
	} else if p.HdfsKerberosKeytab == nil || src == nil {
		return false
	}
	if strings.Compare(*p.HdfsKerberosKeytab, *src) != 0 {
		return false
	}
	return true
}
func (p *THdfsParams) Field5DeepEqual(src []*THdfsConf) bool {

	if len(p.HdfsConf) != len(src) {
		return false
	}
	for i, v := range p.HdfsConf {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *THdfsParams) Field6DeepEqual(src *string) bool {

	if p.RootPath == src {
		return true
	} else if p.RootPath == nil || src == nil {
		return false
	}
	if strings.Compare(*p.RootPath, *src) != 0 {
		return false
	}
	return true
}

type TBrokerRangeDesc struct {
	FileType             types.TFileType  `thrift:"file_type,1,required" frugal:"1,required,TFileType" json:"file_type"`
	FormatType           TFileFormatType  `thrift:"format_type,2,required" frugal:"2,required,TFileFormatType" json:"format_type"`
	Splittable           bool             `thrift:"splittable,3,required" frugal:"3,required,bool" json:"splittable"`
	Path                 string           `thrift:"path,4,required" frugal:"4,required,string" json:"path"`
	StartOffset          int64            `thrift:"start_offset,5,required" frugal:"5,required,i64" json:"start_offset"`
	Size                 int64            `thrift:"size,6,required" frugal:"6,required,i64" json:"size"`
	LoadId               *types.TUniqueId `thrift:"load_id,7,optional" frugal:"7,optional,types.TUniqueId" json:"load_id,omitempty"`
	FileSize             *int64           `thrift:"file_size,8,optional" frugal:"8,optional,i64" json:"file_size,omitempty"`
	NumOfColumnsFromFile *int32           `thrift:"num_of_columns_from_file,9,optional" frugal:"9,optional,i32" json:"num_of_columns_from_file,omitempty"`
	ColumnsFromPath      []string         `thrift:"columns_from_path,10,optional" frugal:"10,optional,list<string>" json:"columns_from_path,omitempty"`
	StripOuterArray      *bool            `thrift:"strip_outer_array,11,optional" frugal:"11,optional,bool" json:"strip_outer_array,omitempty"`
	Jsonpaths            *string          `thrift:"jsonpaths,12,optional" frugal:"12,optional,string" json:"jsonpaths,omitempty"`
	JsonRoot             *string          `thrift:"json_root,13,optional" frugal:"13,optional,string" json:"json_root,omitempty"`
	NumAsString          *bool            `thrift:"num_as_string,14,optional" frugal:"14,optional,bool" json:"num_as_string,omitempty"`
	FuzzyParse           *bool            `thrift:"fuzzy_parse,15,optional" frugal:"15,optional,bool" json:"fuzzy_parse,omitempty"`
	HdfsParams           *THdfsParams     `thrift:"hdfs_params,16,optional" frugal:"16,optional,THdfsParams" json:"hdfs_params,omitempty"`
	ReadJsonByLine       *bool            `thrift:"read_json_by_line,17,optional" frugal:"17,optional,bool" json:"read_json_by_line,omitempty"`
	ReadByColumnDef      *bool            `thrift:"read_by_column_def,18,optional" frugal:"18,optional,bool" json:"read_by_column_def,omitempty"`
	HeaderType           *string          `thrift:"header_type,19,optional" frugal:"19,optional,string" json:"header_type,omitempty"`
	SkipLines            *int32           `thrift:"skip_lines,20,optional" frugal:"20,optional,i32" json:"skip_lines,omitempty"`
}

func NewTBrokerRangeDesc() *TBrokerRangeDesc {
	return &TBrokerRangeDesc{}
}

func (p *TBrokerRangeDesc) InitDefault() {
}

func (p *TBrokerRangeDesc) GetFileType() (v types.TFileType) {
	return p.FileType
}

func (p *TBrokerRangeDesc) GetFormatType() (v TFileFormatType) {
	return p.FormatType
}

func (p *TBrokerRangeDesc) GetSplittable() (v bool) {
	return p.Splittable
}

func (p *TBrokerRangeDesc) GetPath() (v string) {
	return p.Path
}

func (p *TBrokerRangeDesc) GetStartOffset() (v int64) {
	return p.StartOffset
}

func (p *TBrokerRangeDesc) GetSize() (v int64) {
	return p.Size
}

var TBrokerRangeDesc_LoadId_DEFAULT *types.TUniqueId

func (p *TBrokerRangeDesc) GetLoadId() (v *types.TUniqueId) {
	if !p.IsSetLoadId() {
		return TBrokerRangeDesc_LoadId_DEFAULT
	}
	return p.LoadId
}

var TBrokerRangeDesc_FileSize_DEFAULT int64

func (p *TBrokerRangeDesc) GetFileSize() (v int64) {
	if !p.IsSetFileSize() {
		return TBrokerRangeDesc_FileSize_DEFAULT
	}
	return *p.FileSize
}

var TBrokerRangeDesc_NumOfColumnsFromFile_DEFAULT int32

func (p *TBrokerRangeDesc) GetNumOfColumnsFromFile() (v int32) {
	if !p.IsSetNumOfColumnsFromFile() {
		return TBrokerRangeDesc_NumOfColumnsFromFile_DEFAULT
	}
	return *p.NumOfColumnsFromFile
}

var TBrokerRangeDesc_ColumnsFromPath_DEFAULT []string

func (p *TBrokerRangeDesc) GetColumnsFromPath() (v []string) {
	if !p.IsSetColumnsFromPath() {
		return TBrokerRangeDesc_ColumnsFromPath_DEFAULT
	}
	return p.ColumnsFromPath
}

var TBrokerRangeDesc_StripOuterArray_DEFAULT bool

func (p *TBrokerRangeDesc) GetStripOuterArray() (v bool) {
	if !p.IsSetStripOuterArray() {
		return TBrokerRangeDesc_StripOuterArray_DEFAULT
	}
	return *p.StripOuterArray
}

var TBrokerRangeDesc_Jsonpaths_DEFAULT string

func (p *TBrokerRangeDesc) GetJsonpaths() (v string) {
	if !p.IsSetJsonpaths() {
		return TBrokerRangeDesc_Jsonpaths_DEFAULT
	}
	return *p.Jsonpaths
}

var TBrokerRangeDesc_JsonRoot_DEFAULT string

func (p *TBrokerRangeDesc) GetJsonRoot() (v string) {
	if !p.IsSetJsonRoot() {
		return TBrokerRangeDesc_JsonRoot_DEFAULT
	}
	return *p.JsonRoot
}

var TBrokerRangeDesc_NumAsString_DEFAULT bool

func (p *TBrokerRangeDesc) GetNumAsString() (v bool) {
	if !p.IsSetNumAsString() {
		return TBrokerRangeDesc_NumAsString_DEFAULT
	}
	return *p.NumAsString
}

var TBrokerRangeDesc_FuzzyParse_DEFAULT bool

func (p *TBrokerRangeDesc) GetFuzzyParse() (v bool) {
	if !p.IsSetFuzzyParse() {
		return TBrokerRangeDesc_FuzzyParse_DEFAULT
	}
	return *p.FuzzyParse
}

var TBrokerRangeDesc_HdfsParams_DEFAULT *THdfsParams

func (p *TBrokerRangeDesc) GetHdfsParams() (v *THdfsParams) {
	if !p.IsSetHdfsParams() {
		return TBrokerRangeDesc_HdfsParams_DEFAULT
	}
	return p.HdfsParams
}

var TBrokerRangeDesc_ReadJsonByLine_DEFAULT bool

func (p *TBrokerRangeDesc) GetReadJsonByLine() (v bool) {
	if !p.IsSetReadJsonByLine() {
		return TBrokerRangeDesc_ReadJsonByLine_DEFAULT
	}
	return *p.ReadJsonByLine
}

var TBrokerRangeDesc_ReadByColumnDef_DEFAULT bool

func (p *TBrokerRangeDesc) GetReadByColumnDef() (v bool) {
	if !p.IsSetReadByColumnDef() {
		return TBrokerRangeDesc_ReadByColumnDef_DEFAULT
	}
	return *p.ReadByColumnDef
}

var TBrokerRangeDesc_HeaderType_DEFAULT string

func (p *TBrokerRangeDesc) GetHeaderType() (v string) {
	if !p.IsSetHeaderType() {
		return TBrokerRangeDesc_HeaderType_DEFAULT
	}
	return *p.HeaderType
}

var TBrokerRangeDesc_SkipLines_DEFAULT int32

func (p *TBrokerRangeDesc) GetSkipLines() (v int32) {
	if !p.IsSetSkipLines() {
		return TBrokerRangeDesc_SkipLines_DEFAULT
	}
	return *p.SkipLines
}
func (p *TBrokerRangeDesc) SetFileType(val types.TFileType) {
	p.FileType = val
}
func (p *TBrokerRangeDesc) SetFormatType(val TFileFormatType) {
	p.FormatType = val
}
func (p *TBrokerRangeDesc) SetSplittable(val bool) {
	p.Splittable = val
}
func (p *TBrokerRangeDesc) SetPath(val string) {
	p.Path = val
}
func (p *TBrokerRangeDesc) SetStartOffset(val int64) {
	p.StartOffset = val
}
func (p *TBrokerRangeDesc) SetSize(val int64) {
	p.Size = val
}
func (p *TBrokerRangeDesc) SetLoadId(val *types.TUniqueId) {
	p.LoadId = val
}
func (p *TBrokerRangeDesc) SetFileSize(val *int64) {
	p.FileSize = val
}
func (p *TBrokerRangeDesc) SetNumOfColumnsFromFile(val *int32) {
	p.NumOfColumnsFromFile = val
}
func (p *TBrokerRangeDesc) SetColumnsFromPath(val []string) {
	p.ColumnsFromPath = val
}
func (p *TBrokerRangeDesc) SetStripOuterArray(val *bool) {
	p.StripOuterArray = val
}
func (p *TBrokerRangeDesc) SetJsonpaths(val *string) {
	p.Jsonpaths = val
}
func (p *TBrokerRangeDesc) SetJsonRoot(val *string) {
	p.JsonRoot = val
}
func (p *TBrokerRangeDesc) SetNumAsString(val *bool) {
	p.NumAsString = val
}
func (p *TBrokerRangeDesc) SetFuzzyParse(val *bool) {
	p.FuzzyParse = val
}
func (p *TBrokerRangeDesc) SetHdfsParams(val *THdfsParams) {
	p.HdfsParams = val
}
func (p *TBrokerRangeDesc) SetReadJsonByLine(val *bool) {
	p.ReadJsonByLine = val
}
func (p *TBrokerRangeDesc) SetReadByColumnDef(val *bool) {
	p.ReadByColumnDef = val
}
func (p *TBrokerRangeDesc) SetHeaderType(val *string) {
	p.HeaderType = val
}
func (p *TBrokerRangeDesc) SetSkipLines(val *int32) {
	p.SkipLines = val
}

var fieldIDToName_TBrokerRangeDesc = map[int16]string{
	1:  "file_type",
	2:  "format_type",
	3:  "splittable",
	4:  "path",
	5:  "start_offset",
	6:  "size",
	7:  "load_id",
	8:  "file_size",
	9:  "num_of_columns_from_file",
	10: "columns_from_path",
	11: "strip_outer_array",
	12: "jsonpaths",
	13: "json_root",
	14: "num_as_string",
	15: "fuzzy_parse",
	16: "hdfs_params",
	17: "read_json_by_line",
	18: "read_by_column_def",
	19: "header_type",
	20: "skip_lines",
}

func (p *TBrokerRangeDesc) IsSetLoadId() bool {
	return p.LoadId != nil
}

func (p *TBrokerRangeDesc) IsSetFileSize() bool {
	return p.FileSize != nil
}

func (p *TBrokerRangeDesc) IsSetNumOfColumnsFromFile() bool {
	return p.NumOfColumnsFromFile != nil
}

func (p *TBrokerRangeDesc) IsSetColumnsFromPath() bool {
	return p.ColumnsFromPath != nil
}

func (p *TBrokerRangeDesc) IsSetStripOuterArray() bool {
	return p.StripOuterArray != nil
}

func (p *TBrokerRangeDesc) IsSetJsonpaths() bool {
	return p.Jsonpaths != nil
}

func (p *TBrokerRangeDesc) IsSetJsonRoot() bool {
	return p.JsonRoot != nil
}

func (p *TBrokerRangeDesc) IsSetNumAsString() bool {
	return p.NumAsString != nil
}

func (p *TBrokerRangeDesc) IsSetFuzzyParse() bool {
	return p.FuzzyParse != nil
}

func (p *TBrokerRangeDesc) IsSetHdfsParams() bool {
	return p.HdfsParams != nil
}

func (p *TBrokerRangeDesc) IsSetReadJsonByLine() bool {
	return p.ReadJsonByLine != nil
}

func (p *TBrokerRangeDesc) IsSetReadByColumnDef() bool {
	return p.ReadByColumnDef != nil
}

func (p *TBrokerRangeDesc) IsSetHeaderType() bool {
	return p.HeaderType != nil
}

func (p *TBrokerRangeDesc) IsSetSkipLines() bool {
	return p.SkipLines != nil
}

func (p *TBrokerRangeDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFileType bool = false
	var issetFormatType bool = false
	var issetSplittable bool = false
	var issetPath bool = false
	var issetStartOffset bool = false
	var issetSize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFileType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetFormatType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSplittable = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPath = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartOffset = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetSize = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFileType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetFormatType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSplittable {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPath {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetStartOffset {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetSize {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TBrokerRangeDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TBrokerRangeDesc[fieldId]))
}

func (p *TBrokerRangeDesc) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TFileType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TFileType(v)
	}
	p.FileType = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField2(iprot thrift.TProtocol) error {

	var _field TFileFormatType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TFileFormatType(v)
	}
	p.FormatType = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField3(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Splittable = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Path = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartOffset = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Size = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField7(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.LoadId = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FileSize = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField9(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NumOfColumnsFromFile = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnsFromPath = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField11(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StripOuterArray = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Jsonpaths = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField13(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JsonRoot = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField14(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NumAsString = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField15(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FuzzyParse = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField16(iprot thrift.TProtocol) error {
	_field := NewTHdfsParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.HdfsParams = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField17(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReadJsonByLine = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField18(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReadByColumnDef = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField19(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HeaderType = _field
	return nil
}
func (p *TBrokerRangeDesc) ReadField20(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SkipLines = _field
	return nil
}

func (p *TBrokerRangeDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TBrokerRangeDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("file_type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.FileType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("format_type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.FormatType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("splittable", thrift.BOOL, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Splittable); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("path", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Path); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_offset", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.StartOffset); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("size", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Size); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadId() {
		if err = oprot.WriteFieldBegin("load_id", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.LoadId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileSize() {
		if err = oprot.WriteFieldBegin("file_size", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.FileSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumOfColumnsFromFile() {
		if err = oprot.WriteFieldBegin("num_of_columns_from_file", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.NumOfColumnsFromFile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnsFromPath() {
		if err = oprot.WriteFieldBegin("columns_from_path", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ColumnsFromPath)); err != nil {
			return err
		}
		for _, v := range p.ColumnsFromPath {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetStripOuterArray() {
		if err = oprot.WriteFieldBegin("strip_outer_array", thrift.BOOL, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.StripOuterArray); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetJsonpaths() {
		if err = oprot.WriteFieldBegin("jsonpaths", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Jsonpaths); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetJsonRoot() {
		if err = oprot.WriteFieldBegin("json_root", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JsonRoot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumAsString() {
		if err = oprot.WriteFieldBegin("num_as_string", thrift.BOOL, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.NumAsString); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetFuzzyParse() {
		if err = oprot.WriteFieldBegin("fuzzy_parse", thrift.BOOL, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.FuzzyParse); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetHdfsParams() {
		if err = oprot.WriteFieldBegin("hdfs_params", thrift.STRUCT, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.HdfsParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadJsonByLine() {
		if err = oprot.WriteFieldBegin("read_json_by_line", thrift.BOOL, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ReadJsonByLine); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadByColumnDef() {
		if err = oprot.WriteFieldBegin("read_by_column_def", thrift.BOOL, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ReadByColumnDef); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeaderType() {
		if err = oprot.WriteFieldBegin("header_type", thrift.STRING, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.HeaderType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TBrokerRangeDesc) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipLines() {
		if err = oprot.WriteFieldBegin("skip_lines", thrift.I32, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SkipLines); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *TBrokerRangeDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBrokerRangeDesc(%+v)", *p)

}

func (p *TBrokerRangeDesc) DeepEqual(ano *TBrokerRangeDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FileType) {
		return false
	}
	if !p.Field2DeepEqual(ano.FormatType) {
		return false
	}
	if !p.Field3DeepEqual(ano.Splittable) {
		return false
	}
	if !p.Field4DeepEqual(ano.Path) {
		return false
	}
	if !p.Field5DeepEqual(ano.StartOffset) {
		return false
	}
	if !p.Field6DeepEqual(ano.Size) {
		return false
	}
	if !p.Field7DeepEqual(ano.LoadId) {
		return false
	}
	if !p.Field8DeepEqual(ano.FileSize) {
		return false
	}
	if !p.Field9DeepEqual(ano.NumOfColumnsFromFile) {
		return false
	}
	if !p.Field10DeepEqual(ano.ColumnsFromPath) {
		return false
	}
	if !p.Field11DeepEqual(ano.StripOuterArray) {
		return false
	}
	if !p.Field12DeepEqual(ano.Jsonpaths) {
		return false
	}
	if !p.Field13DeepEqual(ano.JsonRoot) {
		return false
	}
	if !p.Field14DeepEqual(ano.NumAsString) {
		return false
	}
	if !p.Field15DeepEqual(ano.FuzzyParse) {
		return false
	}
	if !p.Field16DeepEqual(ano.HdfsParams) {
		return false
	}
	if !p.Field17DeepEqual(ano.ReadJsonByLine) {
		return false
	}
	if !p.Field18DeepEqual(ano.ReadByColumnDef) {
		return false
	}
	if !p.Field19DeepEqual(ano.HeaderType) {
		return false
	}
	if !p.Field20DeepEqual(ano.SkipLines) {
		return false
	}
	return true
}

func (p *TBrokerRangeDesc) Field1DeepEqual(src types.TFileType) bool {

	if p.FileType != src {
		return false
	}
	return true
}
func (p *TBrokerRangeDesc) Field2DeepEqual(src TFileFormatType) bool {

	if p.FormatType != src {
		return false
	}
	return true
}
func (p *TBrokerRangeDesc) Field3DeepEqual(src bool) bool {

	if p.Splittable != src {
		return false
	}
	return true
}
func (p *TBrokerRangeDesc) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Path, src) != 0 {
		return false
	}
	return true
}
func (p *TBrokerRangeDesc) Field5DeepEqual(src int64) bool {

	if p.StartOffset != src {
		return false
	}
	return true
}
func (p *TBrokerRangeDesc) Field6DeepEqual(src int64) bool {

	if p.Size != src {
		return false
	}
	return true
}
func (p *TBrokerRangeDesc) Field7DeepEqual(src *types.TUniqueId) bool {

	if !p.LoadId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TBrokerRangeDesc) Field8DeepEqual(src *int64) bool {

	if p.FileSize == src {
		return true
	} else if p.FileSize == nil || src == nil {
		return false
	}
	if *p.FileSize != *src {
		return false
	}
	return true
}
func (p *TBrokerRangeDesc) Field9DeepEqual(src *int32) bool {

	if p.NumOfColumnsFromFile == src {
		return true
	} else if p.NumOfColumnsFromFile == nil || src == nil {
		return false
	}
	if *p.NumOfColumnsFromFile != *src {
		return false
	}
	return true
}
func (p *TBrokerRangeDesc) Field10DeepEqual(src []string) bool {

	if len(p.ColumnsFromPath) != len(src) {
		return false
	}
	for i, v := range p.ColumnsFromPath {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TBrokerRangeDesc) Field11DeepEqual(src *bool) bool {

	if p.StripOuterArray == src {
		return true
	} else if p.StripOuterArray == nil || src == nil {
		return false
	}
	if *p.StripOuterArray != *src {
		return false
	}
	return true
}
func (p *TBrokerRangeDesc) Field12DeepEqual(src *string) bool {

	if p.Jsonpaths == src {
		return true
	} else if p.Jsonpaths == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Jsonpaths, *src) != 0 {
		return false
	}
	return true
}
func (p *TBrokerRangeDesc) Field13DeepEqual(src *string) bool {

	if p.JsonRoot == src {
		return true
	} else if p.JsonRoot == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JsonRoot, *src) != 0 {
		return false
	}
	return true
}
func (p *TBrokerRangeDesc) Field14DeepEqual(src *bool) bool {

	if p.NumAsString == src {
		return true
	} else if p.NumAsString == nil || src == nil {
		return false
	}
	if *p.NumAsString != *src {
		return false
	}
	return true
}
func (p *TBrokerRangeDesc) Field15DeepEqual(src *bool) bool {

	if p.FuzzyParse == src {
		return true
	} else if p.FuzzyParse == nil || src == nil {
		return false
	}
	if *p.FuzzyParse != *src {
		return false
	}
	return true
}
func (p *TBrokerRangeDesc) Field16DeepEqual(src *THdfsParams) bool {

	if !p.HdfsParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TBrokerRangeDesc) Field17DeepEqual(src *bool) bool {

	if p.ReadJsonByLine == src {
		return true
	} else if p.ReadJsonByLine == nil || src == nil {
		return false
	}
	if *p.ReadJsonByLine != *src {
		return false
	}
	return true
}
func (p *TBrokerRangeDesc) Field18DeepEqual(src *bool) bool {

	if p.ReadByColumnDef == src {
		return true
	} else if p.ReadByColumnDef == nil || src == nil {
		return false
	}
	if *p.ReadByColumnDef != *src {
		return false
	}
	return true
}
func (p *TBrokerRangeDesc) Field19DeepEqual(src *string) bool {

	if p.HeaderType == src {
		return true
	} else if p.HeaderType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.HeaderType, *src) != 0 {
		return false
	}
	return true
}
func (p *TBrokerRangeDesc) Field20DeepEqual(src *int32) bool {

	if p.SkipLines == src {
		return true
	} else if p.SkipLines == nil || src == nil {
		return false
	}
	if *p.SkipLines != *src {
		return false
	}
	return true
}

type TBrokerScanRangeParams struct {
	ColumnSeparator             int8                            `thrift:"column_separator,1,required" frugal:"1,required,i8" json:"column_separator"`
	LineDelimiter               int8                            `thrift:"line_delimiter,2,required" frugal:"2,required,i8" json:"line_delimiter"`
	SrcTupleId                  types.TTupleId                  `thrift:"src_tuple_id,3,required" frugal:"3,required,i32" json:"src_tuple_id"`
	SrcSlotIds                  []types.TSlotId                 `thrift:"src_slot_ids,4,required" frugal:"4,required,list<i32>" json:"src_slot_ids"`
	DestTupleId                 types.TTupleId                  `thrift:"dest_tuple_id,5,required" frugal:"5,required,i32" json:"dest_tuple_id"`
	ExprOfDestSlot              map[types.TSlotId]*exprs.TExpr  `thrift:"expr_of_dest_slot,6,optional" frugal:"6,optional,map<i32:exprs.TExpr>" json:"expr_of_dest_slot,omitempty"`
	Properties                  map[string]string               `thrift:"properties,7,optional" frugal:"7,optional,map<string:string>" json:"properties,omitempty"`
	PartitionIds                []int64                         `thrift:"partition_ids,8,optional" frugal:"8,optional,list<i64>" json:"partition_ids,omitempty"`
	DestSidToSrcSidWithoutTrans map[types.TSlotId]types.TSlotId `thrift:"dest_sid_to_src_sid_without_trans,9,optional" frugal:"9,optional,map<i32:i32>" json:"dest_sid_to_src_sid_without_trans,omitempty"`
	StrictMode                  *bool                           `thrift:"strict_mode,10,optional" frugal:"10,optional,bool" json:"strict_mode,omitempty"`
	ColumnSeparatorLength       int32                           `thrift:"column_separator_length,11,optional" frugal:"11,optional,i32" json:"column_separator_length,omitempty"`
	LineDelimiterLength         int32                           `thrift:"line_delimiter_length,12,optional" frugal:"12,optional,i32" json:"line_delimiter_length,omitempty"`
	ColumnSeparatorStr          *string                         `thrift:"column_separator_str,13,optional" frugal:"13,optional,string" json:"column_separator_str,omitempty"`
	LineDelimiterStr            *string                         `thrift:"line_delimiter_str,14,optional" frugal:"14,optional,string" json:"line_delimiter_str,omitempty"`
	TrimDoubleQuotes            *bool                           `thrift:"trim_double_quotes,15,optional" frugal:"15,optional,bool" json:"trim_double_quotes,omitempty"`
}

func NewTBrokerScanRangeParams() *TBrokerScanRangeParams {
	return &TBrokerScanRangeParams{

		ColumnSeparatorLength: 1,
		LineDelimiterLength:   1,
	}
}

func (p *TBrokerScanRangeParams) InitDefault() {
	p.ColumnSeparatorLength = 1
	p.LineDelimiterLength = 1
}

func (p *TBrokerScanRangeParams) GetColumnSeparator() (v int8) {
	return p.ColumnSeparator
}

func (p *TBrokerScanRangeParams) GetLineDelimiter() (v int8) {
	return p.LineDelimiter
}

func (p *TBrokerScanRangeParams) GetSrcTupleId() (v types.TTupleId) {
	return p.SrcTupleId
}

func (p *TBrokerScanRangeParams) GetSrcSlotIds() (v []types.TSlotId) {
	return p.SrcSlotIds
}

func (p *TBrokerScanRangeParams) GetDestTupleId() (v types.TTupleId) {
	return p.DestTupleId
}

var TBrokerScanRangeParams_ExprOfDestSlot_DEFAULT map[types.TSlotId]*exprs.TExpr

func (p *TBrokerScanRangeParams) GetExprOfDestSlot() (v map[types.TSlotId]*exprs.TExpr) {
	if !p.IsSetExprOfDestSlot() {
		return TBrokerScanRangeParams_ExprOfDestSlot_DEFAULT
	}
	return p.ExprOfDestSlot
}

var TBrokerScanRangeParams_Properties_DEFAULT map[string]string

func (p *TBrokerScanRangeParams) GetProperties() (v map[string]string) {
	if !p.IsSetProperties() {
		return TBrokerScanRangeParams_Properties_DEFAULT
	}
	return p.Properties
}

var TBrokerScanRangeParams_PartitionIds_DEFAULT []int64

func (p *TBrokerScanRangeParams) GetPartitionIds() (v []int64) {
	if !p.IsSetPartitionIds() {
		return TBrokerScanRangeParams_PartitionIds_DEFAULT
	}
	return p.PartitionIds
}

var TBrokerScanRangeParams_DestSidToSrcSidWithoutTrans_DEFAULT map[types.TSlotId]types.TSlotId

func (p *TBrokerScanRangeParams) GetDestSidToSrcSidWithoutTrans() (v map[types.TSlotId]types.TSlotId) {
	if !p.IsSetDestSidToSrcSidWithoutTrans() {
		return TBrokerScanRangeParams_DestSidToSrcSidWithoutTrans_DEFAULT
	}
	return p.DestSidToSrcSidWithoutTrans
}

var TBrokerScanRangeParams_StrictMode_DEFAULT bool

func (p *TBrokerScanRangeParams) GetStrictMode() (v bool) {
	if !p.IsSetStrictMode() {
		return TBrokerScanRangeParams_StrictMode_DEFAULT
	}
	return *p.StrictMode
}

var TBrokerScanRangeParams_ColumnSeparatorLength_DEFAULT int32 = 1

func (p *TBrokerScanRangeParams) GetColumnSeparatorLength() (v int32) {
	if !p.IsSetColumnSeparatorLength() {
		return TBrokerScanRangeParams_ColumnSeparatorLength_DEFAULT
	}
	return p.ColumnSeparatorLength
}

var TBrokerScanRangeParams_LineDelimiterLength_DEFAULT int32 = 1

func (p *TBrokerScanRangeParams) GetLineDelimiterLength() (v int32) {
	if !p.IsSetLineDelimiterLength() {
		return TBrokerScanRangeParams_LineDelimiterLength_DEFAULT
	}
	return p.LineDelimiterLength
}

var TBrokerScanRangeParams_ColumnSeparatorStr_DEFAULT string

func (p *TBrokerScanRangeParams) GetColumnSeparatorStr() (v string) {
	if !p.IsSetColumnSeparatorStr() {
		return TBrokerScanRangeParams_ColumnSeparatorStr_DEFAULT
	}
	return *p.ColumnSeparatorStr
}

var TBrokerScanRangeParams_LineDelimiterStr_DEFAULT string

func (p *TBrokerScanRangeParams) GetLineDelimiterStr() (v string) {
	if !p.IsSetLineDelimiterStr() {
		return TBrokerScanRangeParams_LineDelimiterStr_DEFAULT
	}
	return *p.LineDelimiterStr
}

var TBrokerScanRangeParams_TrimDoubleQuotes_DEFAULT bool

func (p *TBrokerScanRangeParams) GetTrimDoubleQuotes() (v bool) {
	if !p.IsSetTrimDoubleQuotes() {
		return TBrokerScanRangeParams_TrimDoubleQuotes_DEFAULT
	}
	return *p.TrimDoubleQuotes
}
func (p *TBrokerScanRangeParams) SetColumnSeparator(val int8) {
	p.ColumnSeparator = val
}
func (p *TBrokerScanRangeParams) SetLineDelimiter(val int8) {
	p.LineDelimiter = val
}
func (p *TBrokerScanRangeParams) SetSrcTupleId(val types.TTupleId) {
	p.SrcTupleId = val
}
func (p *TBrokerScanRangeParams) SetSrcSlotIds(val []types.TSlotId) {
	p.SrcSlotIds = val
}
func (p *TBrokerScanRangeParams) SetDestTupleId(val types.TTupleId) {
	p.DestTupleId = val
}
func (p *TBrokerScanRangeParams) SetExprOfDestSlot(val map[types.TSlotId]*exprs.TExpr) {
	p.ExprOfDestSlot = val
}
func (p *TBrokerScanRangeParams) SetProperties(val map[string]string) {
	p.Properties = val
}
func (p *TBrokerScanRangeParams) SetPartitionIds(val []int64) {
	p.PartitionIds = val
}
func (p *TBrokerScanRangeParams) SetDestSidToSrcSidWithoutTrans(val map[types.TSlotId]types.TSlotId) {
	p.DestSidToSrcSidWithoutTrans = val
}
func (p *TBrokerScanRangeParams) SetStrictMode(val *bool) {
	p.StrictMode = val
}
func (p *TBrokerScanRangeParams) SetColumnSeparatorLength(val int32) {
	p.ColumnSeparatorLength = val
}
func (p *TBrokerScanRangeParams) SetLineDelimiterLength(val int32) {
	p.LineDelimiterLength = val
}
func (p *TBrokerScanRangeParams) SetColumnSeparatorStr(val *string) {
	p.ColumnSeparatorStr = val
}
func (p *TBrokerScanRangeParams) SetLineDelimiterStr(val *string) {
	p.LineDelimiterStr = val
}
func (p *TBrokerScanRangeParams) SetTrimDoubleQuotes(val *bool) {
	p.TrimDoubleQuotes = val
}

var fieldIDToName_TBrokerScanRangeParams = map[int16]string{
	1:  "column_separator",
	2:  "line_delimiter",
	3:  "src_tuple_id",
	4:  "src_slot_ids",
	5:  "dest_tuple_id",
	6:  "expr_of_dest_slot",
	7:  "properties",
	8:  "partition_ids",
	9:  "dest_sid_to_src_sid_without_trans",
	10: "strict_mode",
	11: "column_separator_length",
	12: "line_delimiter_length",
	13: "column_separator_str",
	14: "line_delimiter_str",
	15: "trim_double_quotes",
}

func (p *TBrokerScanRangeParams) IsSetExprOfDestSlot() bool {
	return p.ExprOfDestSlot != nil
}

func (p *TBrokerScanRangeParams) IsSetProperties() bool {
	return p.Properties != nil
}

func (p *TBrokerScanRangeParams) IsSetPartitionIds() bool {
	return p.PartitionIds != nil
}

func (p *TBrokerScanRangeParams) IsSetDestSidToSrcSidWithoutTrans() bool {
	return p.DestSidToSrcSidWithoutTrans != nil
}

func (p *TBrokerScanRangeParams) IsSetStrictMode() bool {
	return p.StrictMode != nil
}

func (p *TBrokerScanRangeParams) IsSetColumnSeparatorLength() bool {
	return p.ColumnSeparatorLength != TBrokerScanRangeParams_ColumnSeparatorLength_DEFAULT
}

func (p *TBrokerScanRangeParams) IsSetLineDelimiterLength() bool {
	return p.LineDelimiterLength != TBrokerScanRangeParams_LineDelimiterLength_DEFAULT
}

func (p *TBrokerScanRangeParams) IsSetColumnSeparatorStr() bool {
	return p.ColumnSeparatorStr != nil
}

func (p *TBrokerScanRangeParams) IsSetLineDelimiterStr() bool {
	return p.LineDelimiterStr != nil
}

func (p *TBrokerScanRangeParams) IsSetTrimDoubleQuotes() bool {
	return p.TrimDoubleQuotes != nil
}

func (p *TBrokerScanRangeParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetColumnSeparator bool = false
	var issetLineDelimiter bool = false
	var issetSrcTupleId bool = false
	var issetSrcSlotIds bool = false
	var issetDestTupleId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumnSeparator = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetLineDelimiter = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSrcTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetSrcSlotIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetDestTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetColumnSeparator {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetLineDelimiter {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSrcTupleId {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetSrcSlotIds {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetDestTupleId {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TBrokerScanRangeParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TBrokerScanRangeParams[fieldId]))
}

func (p *TBrokerScanRangeParams) ReadField1(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ColumnSeparator = _field
	return nil
}
func (p *TBrokerScanRangeParams) ReadField2(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LineDelimiter = _field
	return nil
}
func (p *TBrokerScanRangeParams) ReadField3(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SrcTupleId = _field
	return nil
}
func (p *TBrokerScanRangeParams) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TSlotId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TSlotId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SrcSlotIds = _field
	return nil
}
func (p *TBrokerScanRangeParams) ReadField5(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DestTupleId = _field
	return nil
}
func (p *TBrokerScanRangeParams) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TSlotId]*exprs.TExpr, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		var _key types.TSlotId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.ExprOfDestSlot = _field
	return nil
}
func (p *TBrokerScanRangeParams) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Properties = _field
	return nil
}
func (p *TBrokerScanRangeParams) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PartitionIds = _field
	return nil
}
func (p *TBrokerScanRangeParams) ReadField9(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TSlotId]types.TSlotId, size)
	for i := 0; i < size; i++ {
		var _key types.TSlotId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val types.TSlotId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.DestSidToSrcSidWithoutTrans = _field
	return nil
}
func (p *TBrokerScanRangeParams) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StrictMode = _field
	return nil
}
func (p *TBrokerScanRangeParams) ReadField11(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ColumnSeparatorLength = _field
	return nil
}
func (p *TBrokerScanRangeParams) ReadField12(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LineDelimiterLength = _field
	return nil
}
func (p *TBrokerScanRangeParams) ReadField13(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ColumnSeparatorStr = _field
	return nil
}
func (p *TBrokerScanRangeParams) ReadField14(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LineDelimiterStr = _field
	return nil
}
func (p *TBrokerScanRangeParams) ReadField15(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TrimDoubleQuotes = _field
	return nil
}

func (p *TBrokerScanRangeParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TBrokerScanRangeParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TBrokerScanRangeParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("column_separator", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.ColumnSeparator); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TBrokerScanRangeParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("line_delimiter", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.LineDelimiter); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TBrokerScanRangeParams) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("src_tuple_id", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SrcTupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TBrokerScanRangeParams) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("src_slot_ids", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.SrcSlotIds)); err != nil {
		return err
	}
	for _, v := range p.SrcSlotIds {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TBrokerScanRangeParams) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dest_tuple_id", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.DestTupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TBrokerScanRangeParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetExprOfDestSlot() {
		if err = oprot.WriteFieldBegin("expr_of_dest_slot", thrift.MAP, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.ExprOfDestSlot)); err != nil {
			return err
		}
		for k, v := range p.ExprOfDestSlot {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TBrokerScanRangeParams) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperties() {
		if err = oprot.WriteFieldBegin("properties", thrift.MAP, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
			return err
		}
		for k, v := range p.Properties {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TBrokerScanRangeParams) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionIds() {
		if err = oprot.WriteFieldBegin("partition_ids", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.PartitionIds)); err != nil {
			return err
		}
		for _, v := range p.PartitionIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TBrokerScanRangeParams) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestSidToSrcSidWithoutTrans() {
		if err = oprot.WriteFieldBegin("dest_sid_to_src_sid_without_trans", thrift.MAP, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.DestSidToSrcSidWithoutTrans)); err != nil {
			return err
		}
		for k, v := range p.DestSidToSrcSidWithoutTrans {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TBrokerScanRangeParams) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetStrictMode() {
		if err = oprot.WriteFieldBegin("strict_mode", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.StrictMode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TBrokerScanRangeParams) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnSeparatorLength() {
		if err = oprot.WriteFieldBegin("column_separator_length", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.ColumnSeparatorLength); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TBrokerScanRangeParams) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetLineDelimiterLength() {
		if err = oprot.WriteFieldBegin("line_delimiter_length", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.LineDelimiterLength); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TBrokerScanRangeParams) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnSeparatorStr() {
		if err = oprot.WriteFieldBegin("column_separator_str", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ColumnSeparatorStr); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TBrokerScanRangeParams) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetLineDelimiterStr() {
		if err = oprot.WriteFieldBegin("line_delimiter_str", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LineDelimiterStr); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TBrokerScanRangeParams) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrimDoubleQuotes() {
		if err = oprot.WriteFieldBegin("trim_double_quotes", thrift.BOOL, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.TrimDoubleQuotes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TBrokerScanRangeParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBrokerScanRangeParams(%+v)", *p)

}

func (p *TBrokerScanRangeParams) DeepEqual(ano *TBrokerScanRangeParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnSeparator) {
		return false
	}
	if !p.Field2DeepEqual(ano.LineDelimiter) {
		return false
	}
	if !p.Field3DeepEqual(ano.SrcTupleId) {
		return false
	}
	if !p.Field4DeepEqual(ano.SrcSlotIds) {
		return false
	}
	if !p.Field5DeepEqual(ano.DestTupleId) {
		return false
	}
	if !p.Field6DeepEqual(ano.ExprOfDestSlot) {
		return false
	}
	if !p.Field7DeepEqual(ano.Properties) {
		return false
	}
	if !p.Field8DeepEqual(ano.PartitionIds) {
		return false
	}
	if !p.Field9DeepEqual(ano.DestSidToSrcSidWithoutTrans) {
		return false
	}
	if !p.Field10DeepEqual(ano.StrictMode) {
		return false
	}
	if !p.Field11DeepEqual(ano.ColumnSeparatorLength) {
		return false
	}
	if !p.Field12DeepEqual(ano.LineDelimiterLength) {
		return false
	}
	if !p.Field13DeepEqual(ano.ColumnSeparatorStr) {
		return false
	}
	if !p.Field14DeepEqual(ano.LineDelimiterStr) {
		return false
	}
	if !p.Field15DeepEqual(ano.TrimDoubleQuotes) {
		return false
	}
	return true
}

func (p *TBrokerScanRangeParams) Field1DeepEqual(src int8) bool {

	if p.ColumnSeparator != src {
		return false
	}
	return true
}
func (p *TBrokerScanRangeParams) Field2DeepEqual(src int8) bool {

	if p.LineDelimiter != src {
		return false
	}
	return true
}
func (p *TBrokerScanRangeParams) Field3DeepEqual(src types.TTupleId) bool {

	if p.SrcTupleId != src {
		return false
	}
	return true
}
func (p *TBrokerScanRangeParams) Field4DeepEqual(src []types.TSlotId) bool {

	if len(p.SrcSlotIds) != len(src) {
		return false
	}
	for i, v := range p.SrcSlotIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TBrokerScanRangeParams) Field5DeepEqual(src types.TTupleId) bool {

	if p.DestTupleId != src {
		return false
	}
	return true
}
func (p *TBrokerScanRangeParams) Field6DeepEqual(src map[types.TSlotId]*exprs.TExpr) bool {

	if len(p.ExprOfDestSlot) != len(src) {
		return false
	}
	for k, v := range p.ExprOfDestSlot {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TBrokerScanRangeParams) Field7DeepEqual(src map[string]string) bool {

	if len(p.Properties) != len(src) {
		return false
	}
	for k, v := range p.Properties {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TBrokerScanRangeParams) Field8DeepEqual(src []int64) bool {

	if len(p.PartitionIds) != len(src) {
		return false
	}
	for i, v := range p.PartitionIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TBrokerScanRangeParams) Field9DeepEqual(src map[types.TSlotId]types.TSlotId) bool {

	if len(p.DestSidToSrcSidWithoutTrans) != len(src) {
		return false
	}
	for k, v := range p.DestSidToSrcSidWithoutTrans {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TBrokerScanRangeParams) Field10DeepEqual(src *bool) bool {

	if p.StrictMode == src {
		return true
	} else if p.StrictMode == nil || src == nil {
		return false
	}
	if *p.StrictMode != *src {
		return false
	}
	return true
}
func (p *TBrokerScanRangeParams) Field11DeepEqual(src int32) bool {

	if p.ColumnSeparatorLength != src {
		return false
	}
	return true
}
func (p *TBrokerScanRangeParams) Field12DeepEqual(src int32) bool {

	if p.LineDelimiterLength != src {
		return false
	}
	return true
}
func (p *TBrokerScanRangeParams) Field13DeepEqual(src *string) bool {

	if p.ColumnSeparatorStr == src {
		return true
	} else if p.ColumnSeparatorStr == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ColumnSeparatorStr, *src) != 0 {
		return false
	}
	return true
}
func (p *TBrokerScanRangeParams) Field14DeepEqual(src *string) bool {

	if p.LineDelimiterStr == src {
		return true
	} else if p.LineDelimiterStr == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LineDelimiterStr, *src) != 0 {
		return false
	}
	return true
}
func (p *TBrokerScanRangeParams) Field15DeepEqual(src *bool) bool {

	if p.TrimDoubleQuotes == src {
		return true
	} else if p.TrimDoubleQuotes == nil || src == nil {
		return false
	}
	if *p.TrimDoubleQuotes != *src {
		return false
	}
	return true
}

type TBrokerScanRange struct {
	Ranges          []*TBrokerRangeDesc      `thrift:"ranges,1,required" frugal:"1,required,list<TBrokerRangeDesc>" json:"ranges"`
	Params          *TBrokerScanRangeParams  `thrift:"params,2,required" frugal:"2,required,TBrokerScanRangeParams" json:"params"`
	BrokerAddresses []*types.TNetworkAddress `thrift:"broker_addresses,3,required" frugal:"3,required,list<types.TNetworkAddress>" json:"broker_addresses"`
}

func NewTBrokerScanRange() *TBrokerScanRange {
	return &TBrokerScanRange{}
}

func (p *TBrokerScanRange) InitDefault() {
}

func (p *TBrokerScanRange) GetRanges() (v []*TBrokerRangeDesc) {
	return p.Ranges
}

var TBrokerScanRange_Params_DEFAULT *TBrokerScanRangeParams

func (p *TBrokerScanRange) GetParams() (v *TBrokerScanRangeParams) {
	if !p.IsSetParams() {
		return TBrokerScanRange_Params_DEFAULT
	}
	return p.Params
}

func (p *TBrokerScanRange) GetBrokerAddresses() (v []*types.TNetworkAddress) {
	return p.BrokerAddresses
}
func (p *TBrokerScanRange) SetRanges(val []*TBrokerRangeDesc) {
	p.Ranges = val
}
func (p *TBrokerScanRange) SetParams(val *TBrokerScanRangeParams) {
	p.Params = val
}
func (p *TBrokerScanRange) SetBrokerAddresses(val []*types.TNetworkAddress) {
	p.BrokerAddresses = val
}

var fieldIDToName_TBrokerScanRange = map[int16]string{
	1: "ranges",
	2: "params",
	3: "broker_addresses",
}

func (p *TBrokerScanRange) IsSetParams() bool {
	return p.Params != nil
}

func (p *TBrokerScanRange) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRanges bool = false
	var issetParams bool = false
	var issetBrokerAddresses bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRanges = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetParams = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetBrokerAddresses = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRanges {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetParams {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetBrokerAddresses {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TBrokerScanRange[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TBrokerScanRange[fieldId]))
}

func (p *TBrokerScanRange) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TBrokerRangeDesc, 0, size)
	values := make([]TBrokerRangeDesc, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Ranges = _field
	return nil
}
func (p *TBrokerScanRange) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTBrokerScanRangeParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}
func (p *TBrokerScanRange) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*types.TNetworkAddress, 0, size)
	values := make([]types.TNetworkAddress, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.BrokerAddresses = _field
	return nil
}

func (p *TBrokerScanRange) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TBrokerScanRange"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TBrokerScanRange) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ranges", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Ranges)); err != nil {
		return err
	}
	for _, v := range p.Ranges {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TBrokerScanRange) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TBrokerScanRange) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("broker_addresses", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BrokerAddresses)); err != nil {
		return err
	}
	for _, v := range p.BrokerAddresses {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TBrokerScanRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBrokerScanRange(%+v)", *p)

}

func (p *TBrokerScanRange) DeepEqual(ano *TBrokerScanRange) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ranges) {
		return false
	}
	if !p.Field2DeepEqual(ano.Params) {
		return false
	}
	if !p.Field3DeepEqual(ano.BrokerAddresses) {
		return false
	}
	return true
}

func (p *TBrokerScanRange) Field1DeepEqual(src []*TBrokerRangeDesc) bool {

	if len(p.Ranges) != len(src) {
		return false
	}
	for i, v := range p.Ranges {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TBrokerScanRange) Field2DeepEqual(src *TBrokerScanRangeParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TBrokerScanRange) Field3DeepEqual(src []*types.TNetworkAddress) bool {

	if len(p.BrokerAddresses) != len(src) {
		return false
	}
	for i, v := range p.BrokerAddresses {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TEsScanRange struct {
	EsHosts []*types.TNetworkAddress `thrift:"es_hosts,1,required" frugal:"1,required,list<types.TNetworkAddress>" json:"es_hosts"`
	Index   string                   `thrift:"index,2,required" frugal:"2,required,string" json:"index"`
	Type    *string                  `thrift:"type,3,optional" frugal:"3,optional,string" json:"type,omitempty"`
	ShardId int32                    `thrift:"shard_id,4,required" frugal:"4,required,i32" json:"shard_id"`
}

func NewTEsScanRange() *TEsScanRange {
	return &TEsScanRange{}
}

func (p *TEsScanRange) InitDefault() {
}

func (p *TEsScanRange) GetEsHosts() (v []*types.TNetworkAddress) {
	return p.EsHosts
}

func (p *TEsScanRange) GetIndex() (v string) {
	return p.Index
}

var TEsScanRange_Type_DEFAULT string

func (p *TEsScanRange) GetType() (v string) {
	if !p.IsSetType() {
		return TEsScanRange_Type_DEFAULT
	}
	return *p.Type
}

func (p *TEsScanRange) GetShardId() (v int32) {
	return p.ShardId
}
func (p *TEsScanRange) SetEsHosts(val []*types.TNetworkAddress) {
	p.EsHosts = val
}
func (p *TEsScanRange) SetIndex(val string) {
	p.Index = val
}
func (p *TEsScanRange) SetType(val *string) {
	p.Type = val
}
func (p *TEsScanRange) SetShardId(val int32) {
	p.ShardId = val
}

var fieldIDToName_TEsScanRange = map[int16]string{
	1: "es_hosts",
	2: "index",
	3: "type",
	4: "shard_id",
}

func (p *TEsScanRange) IsSetType() bool {
	return p.Type != nil
}

func (p *TEsScanRange) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEsHosts bool = false
	var issetIndex bool = false
	var issetShardId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEsHosts = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetIndex = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetShardId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEsHosts {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetIndex {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetShardId {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TEsScanRange[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TEsScanRange[fieldId]))
}

func (p *TEsScanRange) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*types.TNetworkAddress, 0, size)
	values := make([]types.TNetworkAddress, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EsHosts = _field
	return nil
}
func (p *TEsScanRange) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Index = _field
	return nil
}
func (p *TEsScanRange) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}
func (p *TEsScanRange) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShardId = _field
	return nil
}

func (p *TEsScanRange) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TEsScanRange"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TEsScanRange) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("es_hosts", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EsHosts)); err != nil {
		return err
	}
	for _, v := range p.EsHosts {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TEsScanRange) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("index", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Index); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TEsScanRange) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TEsScanRange) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("shard_id", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ShardId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TEsScanRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TEsScanRange(%+v)", *p)

}

func (p *TEsScanRange) DeepEqual(ano *TEsScanRange) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EsHosts) {
		return false
	}
	if !p.Field2DeepEqual(ano.Index) {
		return false
	}
	if !p.Field3DeepEqual(ano.Type) {
		return false
	}
	if !p.Field4DeepEqual(ano.ShardId) {
		return false
	}
	return true
}

func (p *TEsScanRange) Field1DeepEqual(src []*types.TNetworkAddress) bool {

	if len(p.EsHosts) != len(src) {
		return false
	}
	for i, v := range p.EsHosts {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TEsScanRange) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Index, src) != 0 {
		return false
	}
	return true
}
func (p *TEsScanRange) Field3DeepEqual(src *string) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}
func (p *TEsScanRange) Field4DeepEqual(src int32) bool {

	if p.ShardId != src {
		return false
	}
	return true
}

type TFileTextScanRangeParams struct {
	ColumnSeparator     *string `thrift:"column_separator,1,optional" frugal:"1,optional,string" json:"column_separator,omitempty"`
	LineDelimiter       *string `thrift:"line_delimiter,2,optional" frugal:"2,optional,string" json:"line_delimiter,omitempty"`
	CollectionDelimiter *string `thrift:"collection_delimiter,3,optional" frugal:"3,optional,string" json:"collection_delimiter,omitempty"`
	MapkvDelimiter      *string `thrift:"mapkv_delimiter,4,optional" frugal:"4,optional,string" json:"mapkv_delimiter,omitempty"`
	Enclose             *int8   `thrift:"enclose,5,optional" frugal:"5,optional,i8" json:"enclose,omitempty"`
	Escape              *int8   `thrift:"escape,6,optional" frugal:"6,optional,i8" json:"escape,omitempty"`
}

func NewTFileTextScanRangeParams() *TFileTextScanRangeParams {
	return &TFileTextScanRangeParams{}
}

func (p *TFileTextScanRangeParams) InitDefault() {
}

var TFileTextScanRangeParams_ColumnSeparator_DEFAULT string

func (p *TFileTextScanRangeParams) GetColumnSeparator() (v string) {
	if !p.IsSetColumnSeparator() {
		return TFileTextScanRangeParams_ColumnSeparator_DEFAULT
	}
	return *p.ColumnSeparator
}

var TFileTextScanRangeParams_LineDelimiter_DEFAULT string

func (p *TFileTextScanRangeParams) GetLineDelimiter() (v string) {
	if !p.IsSetLineDelimiter() {
		return TFileTextScanRangeParams_LineDelimiter_DEFAULT
	}
	return *p.LineDelimiter
}

var TFileTextScanRangeParams_CollectionDelimiter_DEFAULT string

func (p *TFileTextScanRangeParams) GetCollectionDelimiter() (v string) {
	if !p.IsSetCollectionDelimiter() {
		return TFileTextScanRangeParams_CollectionDelimiter_DEFAULT
	}
	return *p.CollectionDelimiter
}

var TFileTextScanRangeParams_MapkvDelimiter_DEFAULT string

func (p *TFileTextScanRangeParams) GetMapkvDelimiter() (v string) {
	if !p.IsSetMapkvDelimiter() {
		return TFileTextScanRangeParams_MapkvDelimiter_DEFAULT
	}
	return *p.MapkvDelimiter
}

var TFileTextScanRangeParams_Enclose_DEFAULT int8

func (p *TFileTextScanRangeParams) GetEnclose() (v int8) {
	if !p.IsSetEnclose() {
		return TFileTextScanRangeParams_Enclose_DEFAULT
	}
	return *p.Enclose
}

var TFileTextScanRangeParams_Escape_DEFAULT int8

func (p *TFileTextScanRangeParams) GetEscape() (v int8) {
	if !p.IsSetEscape() {
		return TFileTextScanRangeParams_Escape_DEFAULT
	}
	return *p.Escape
}
func (p *TFileTextScanRangeParams) SetColumnSeparator(val *string) {
	p.ColumnSeparator = val
}
func (p *TFileTextScanRangeParams) SetLineDelimiter(val *string) {
	p.LineDelimiter = val
}
func (p *TFileTextScanRangeParams) SetCollectionDelimiter(val *string) {
	p.CollectionDelimiter = val
}
func (p *TFileTextScanRangeParams) SetMapkvDelimiter(val *string) {
	p.MapkvDelimiter = val
}
func (p *TFileTextScanRangeParams) SetEnclose(val *int8) {
	p.Enclose = val
}
func (p *TFileTextScanRangeParams) SetEscape(val *int8) {
	p.Escape = val
}

var fieldIDToName_TFileTextScanRangeParams = map[int16]string{
	1: "column_separator",
	2: "line_delimiter",
	3: "collection_delimiter",
	4: "mapkv_delimiter",
	5: "enclose",
	6: "escape",
}

func (p *TFileTextScanRangeParams) IsSetColumnSeparator() bool {
	return p.ColumnSeparator != nil
}

func (p *TFileTextScanRangeParams) IsSetLineDelimiter() bool {
	return p.LineDelimiter != nil
}

func (p *TFileTextScanRangeParams) IsSetCollectionDelimiter() bool {
	return p.CollectionDelimiter != nil
}

func (p *TFileTextScanRangeParams) IsSetMapkvDelimiter() bool {
	return p.MapkvDelimiter != nil
}

func (p *TFileTextScanRangeParams) IsSetEnclose() bool {
	return p.Enclose != nil
}

func (p *TFileTextScanRangeParams) IsSetEscape() bool {
	return p.Escape != nil
}

func (p *TFileTextScanRangeParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFileTextScanRangeParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TFileTextScanRangeParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ColumnSeparator = _field
	return nil
}
func (p *TFileTextScanRangeParams) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LineDelimiter = _field
	return nil
}
func (p *TFileTextScanRangeParams) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CollectionDelimiter = _field
	return nil
}
func (p *TFileTextScanRangeParams) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MapkvDelimiter = _field
	return nil
}
func (p *TFileTextScanRangeParams) ReadField5(iprot thrift.TProtocol) error {

	var _field *int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Enclose = _field
	return nil
}
func (p *TFileTextScanRangeParams) ReadField6(iprot thrift.TProtocol) error {

	var _field *int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Escape = _field
	return nil
}

func (p *TFileTextScanRangeParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFileTextScanRangeParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFileTextScanRangeParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnSeparator() {
		if err = oprot.WriteFieldBegin("column_separator", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ColumnSeparator); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFileTextScanRangeParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLineDelimiter() {
		if err = oprot.WriteFieldBegin("line_delimiter", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LineDelimiter); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFileTextScanRangeParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCollectionDelimiter() {
		if err = oprot.WriteFieldBegin("collection_delimiter", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CollectionDelimiter); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TFileTextScanRangeParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMapkvDelimiter() {
		if err = oprot.WriteFieldBegin("mapkv_delimiter", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MapkvDelimiter); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TFileTextScanRangeParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnclose() {
		if err = oprot.WriteFieldBegin("enclose", thrift.BYTE, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteByte(*p.Enclose); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TFileTextScanRangeParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetEscape() {
		if err = oprot.WriteFieldBegin("escape", thrift.BYTE, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteByte(*p.Escape); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TFileTextScanRangeParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFileTextScanRangeParams(%+v)", *p)

}

func (p *TFileTextScanRangeParams) DeepEqual(ano *TFileTextScanRangeParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnSeparator) {
		return false
	}
	if !p.Field2DeepEqual(ano.LineDelimiter) {
		return false
	}
	if !p.Field3DeepEqual(ano.CollectionDelimiter) {
		return false
	}
	if !p.Field4DeepEqual(ano.MapkvDelimiter) {
		return false
	}
	if !p.Field5DeepEqual(ano.Enclose) {
		return false
	}
	if !p.Field6DeepEqual(ano.Escape) {
		return false
	}
	return true
}

func (p *TFileTextScanRangeParams) Field1DeepEqual(src *string) bool {

	if p.ColumnSeparator == src {
		return true
	} else if p.ColumnSeparator == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ColumnSeparator, *src) != 0 {
		return false
	}
	return true
}
func (p *TFileTextScanRangeParams) Field2DeepEqual(src *string) bool {

	if p.LineDelimiter == src {
		return true
	} else if p.LineDelimiter == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LineDelimiter, *src) != 0 {
		return false
	}
	return true
}
func (p *TFileTextScanRangeParams) Field3DeepEqual(src *string) bool {

	if p.CollectionDelimiter == src {
		return true
	} else if p.CollectionDelimiter == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CollectionDelimiter, *src) != 0 {
		return false
	}
	return true
}
func (p *TFileTextScanRangeParams) Field4DeepEqual(src *string) bool {

	if p.MapkvDelimiter == src {
		return true
	} else if p.MapkvDelimiter == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MapkvDelimiter, *src) != 0 {
		return false
	}
	return true
}
func (p *TFileTextScanRangeParams) Field5DeepEqual(src *int8) bool {

	if p.Enclose == src {
		return true
	} else if p.Enclose == nil || src == nil {
		return false
	}
	if *p.Enclose != *src {
		return false
	}
	return true
}
func (p *TFileTextScanRangeParams) Field6DeepEqual(src *int8) bool {

	if p.Escape == src {
		return true
	} else if p.Escape == nil || src == nil {
		return false
	}
	if *p.Escape != *src {
		return false
	}
	return true
}

type TFileScanSlotInfo struct {
	SlotId     *types.TSlotId `thrift:"slot_id,1,optional" frugal:"1,optional,i32" json:"slot_id,omitempty"`
	IsFileSlot *bool          `thrift:"is_file_slot,2,optional" frugal:"2,optional,bool" json:"is_file_slot,omitempty"`
}

func NewTFileScanSlotInfo() *TFileScanSlotInfo {
	return &TFileScanSlotInfo{}
}

func (p *TFileScanSlotInfo) InitDefault() {
}

var TFileScanSlotInfo_SlotId_DEFAULT types.TSlotId

func (p *TFileScanSlotInfo) GetSlotId() (v types.TSlotId) {
	if !p.IsSetSlotId() {
		return TFileScanSlotInfo_SlotId_DEFAULT
	}
	return *p.SlotId
}

var TFileScanSlotInfo_IsFileSlot_DEFAULT bool

func (p *TFileScanSlotInfo) GetIsFileSlot() (v bool) {
	if !p.IsSetIsFileSlot() {
		return TFileScanSlotInfo_IsFileSlot_DEFAULT
	}
	return *p.IsFileSlot
}
func (p *TFileScanSlotInfo) SetSlotId(val *types.TSlotId) {
	p.SlotId = val
}
func (p *TFileScanSlotInfo) SetIsFileSlot(val *bool) {
	p.IsFileSlot = val
}

var fieldIDToName_TFileScanSlotInfo = map[int16]string{
	1: "slot_id",
	2: "is_file_slot",
}

func (p *TFileScanSlotInfo) IsSetSlotId() bool {
	return p.SlotId != nil
}

func (p *TFileScanSlotInfo) IsSetIsFileSlot() bool {
	return p.IsFileSlot != nil
}

func (p *TFileScanSlotInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFileScanSlotInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TFileScanSlotInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *types.TSlotId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SlotId = _field
	return nil
}
func (p *TFileScanSlotInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsFileSlot = _field
	return nil
}

func (p *TFileScanSlotInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFileScanSlotInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFileScanSlotInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSlotId() {
		if err = oprot.WriteFieldBegin("slot_id", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SlotId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFileScanSlotInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsFileSlot() {
		if err = oprot.WriteFieldBegin("is_file_slot", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsFileSlot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFileScanSlotInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFileScanSlotInfo(%+v)", *p)

}

func (p *TFileScanSlotInfo) DeepEqual(ano *TFileScanSlotInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SlotId) {
		return false
	}
	if !p.Field2DeepEqual(ano.IsFileSlot) {
		return false
	}
	return true
}

func (p *TFileScanSlotInfo) Field1DeepEqual(src *types.TSlotId) bool {

	if p.SlotId == src {
		return true
	} else if p.SlotId == nil || src == nil {
		return false
	}
	if *p.SlotId != *src {
		return false
	}
	return true
}
func (p *TFileScanSlotInfo) Field2DeepEqual(src *bool) bool {

	if p.IsFileSlot == src {
		return true
	} else if p.IsFileSlot == nil || src == nil {
		return false
	}
	if *p.IsFileSlot != *src {
		return false
	}
	return true
}

type TFileAttributes struct {
	TextParams            *TFileTextScanRangeParams `thrift:"text_params,1,optional" frugal:"1,optional,TFileTextScanRangeParams" json:"text_params,omitempty"`
	StripOuterArray       *bool                     `thrift:"strip_outer_array,2,optional" frugal:"2,optional,bool" json:"strip_outer_array,omitempty"`
	Jsonpaths             *string                   `thrift:"jsonpaths,3,optional" frugal:"3,optional,string" json:"jsonpaths,omitempty"`
	JsonRoot              *string                   `thrift:"json_root,4,optional" frugal:"4,optional,string" json:"json_root,omitempty"`
	NumAsString           *bool                     `thrift:"num_as_string,5,optional" frugal:"5,optional,bool" json:"num_as_string,omitempty"`
	FuzzyParse            *bool                     `thrift:"fuzzy_parse,6,optional" frugal:"6,optional,bool" json:"fuzzy_parse,omitempty"`
	ReadJsonByLine        *bool                     `thrift:"read_json_by_line,7,optional" frugal:"7,optional,bool" json:"read_json_by_line,omitempty"`
	ReadByColumnDef       *bool                     `thrift:"read_by_column_def,8,optional" frugal:"8,optional,bool" json:"read_by_column_def,omitempty"`
	HeaderType            *string                   `thrift:"header_type,9,optional" frugal:"9,optional,string" json:"header_type,omitempty"`
	TrimDoubleQuotes      *bool                     `thrift:"trim_double_quotes,10,optional" frugal:"10,optional,bool" json:"trim_double_quotes,omitempty"`
	SkipLines             *int32                    `thrift:"skip_lines,11,optional" frugal:"11,optional,i32" json:"skip_lines,omitempty"`
	IgnoreCsvRedundantCol *bool                     `thrift:"ignore_csv_redundant_col,1001,optional" frugal:"1001,optional,bool" json:"ignore_csv_redundant_col,omitempty"`
}

func NewTFileAttributes() *TFileAttributes {
	return &TFileAttributes{}
}

func (p *TFileAttributes) InitDefault() {
}

var TFileAttributes_TextParams_DEFAULT *TFileTextScanRangeParams

func (p *TFileAttributes) GetTextParams() (v *TFileTextScanRangeParams) {
	if !p.IsSetTextParams() {
		return TFileAttributes_TextParams_DEFAULT
	}
	return p.TextParams
}

var TFileAttributes_StripOuterArray_DEFAULT bool

func (p *TFileAttributes) GetStripOuterArray() (v bool) {
	if !p.IsSetStripOuterArray() {
		return TFileAttributes_StripOuterArray_DEFAULT
	}
	return *p.StripOuterArray
}

var TFileAttributes_Jsonpaths_DEFAULT string

func (p *TFileAttributes) GetJsonpaths() (v string) {
	if !p.IsSetJsonpaths() {
		return TFileAttributes_Jsonpaths_DEFAULT
	}
	return *p.Jsonpaths
}

var TFileAttributes_JsonRoot_DEFAULT string

func (p *TFileAttributes) GetJsonRoot() (v string) {
	if !p.IsSetJsonRoot() {
		return TFileAttributes_JsonRoot_DEFAULT
	}
	return *p.JsonRoot
}

var TFileAttributes_NumAsString_DEFAULT bool

func (p *TFileAttributes) GetNumAsString() (v bool) {
	if !p.IsSetNumAsString() {
		return TFileAttributes_NumAsString_DEFAULT
	}
	return *p.NumAsString
}

var TFileAttributes_FuzzyParse_DEFAULT bool

func (p *TFileAttributes) GetFuzzyParse() (v bool) {
	if !p.IsSetFuzzyParse() {
		return TFileAttributes_FuzzyParse_DEFAULT
	}
	return *p.FuzzyParse
}

var TFileAttributes_ReadJsonByLine_DEFAULT bool

func (p *TFileAttributes) GetReadJsonByLine() (v bool) {
	if !p.IsSetReadJsonByLine() {
		return TFileAttributes_ReadJsonByLine_DEFAULT
	}
	return *p.ReadJsonByLine
}

var TFileAttributes_ReadByColumnDef_DEFAULT bool

func (p *TFileAttributes) GetReadByColumnDef() (v bool) {
	if !p.IsSetReadByColumnDef() {
		return TFileAttributes_ReadByColumnDef_DEFAULT
	}
	return *p.ReadByColumnDef
}

var TFileAttributes_HeaderType_DEFAULT string

func (p *TFileAttributes) GetHeaderType() (v string) {
	if !p.IsSetHeaderType() {
		return TFileAttributes_HeaderType_DEFAULT
	}
	return *p.HeaderType
}

var TFileAttributes_TrimDoubleQuotes_DEFAULT bool

func (p *TFileAttributes) GetTrimDoubleQuotes() (v bool) {
	if !p.IsSetTrimDoubleQuotes() {
		return TFileAttributes_TrimDoubleQuotes_DEFAULT
	}
	return *p.TrimDoubleQuotes
}

var TFileAttributes_SkipLines_DEFAULT int32

func (p *TFileAttributes) GetSkipLines() (v int32) {
	if !p.IsSetSkipLines() {
		return TFileAttributes_SkipLines_DEFAULT
	}
	return *p.SkipLines
}

var TFileAttributes_IgnoreCsvRedundantCol_DEFAULT bool

func (p *TFileAttributes) GetIgnoreCsvRedundantCol() (v bool) {
	if !p.IsSetIgnoreCsvRedundantCol() {
		return TFileAttributes_IgnoreCsvRedundantCol_DEFAULT
	}
	return *p.IgnoreCsvRedundantCol
}
func (p *TFileAttributes) SetTextParams(val *TFileTextScanRangeParams) {
	p.TextParams = val
}
func (p *TFileAttributes) SetStripOuterArray(val *bool) {
	p.StripOuterArray = val
}
func (p *TFileAttributes) SetJsonpaths(val *string) {
	p.Jsonpaths = val
}
func (p *TFileAttributes) SetJsonRoot(val *string) {
	p.JsonRoot = val
}
func (p *TFileAttributes) SetNumAsString(val *bool) {
	p.NumAsString = val
}
func (p *TFileAttributes) SetFuzzyParse(val *bool) {
	p.FuzzyParse = val
}
func (p *TFileAttributes) SetReadJsonByLine(val *bool) {
	p.ReadJsonByLine = val
}
func (p *TFileAttributes) SetReadByColumnDef(val *bool) {
	p.ReadByColumnDef = val
}
func (p *TFileAttributes) SetHeaderType(val *string) {
	p.HeaderType = val
}
func (p *TFileAttributes) SetTrimDoubleQuotes(val *bool) {
	p.TrimDoubleQuotes = val
}
func (p *TFileAttributes) SetSkipLines(val *int32) {
	p.SkipLines = val
}
func (p *TFileAttributes) SetIgnoreCsvRedundantCol(val *bool) {
	p.IgnoreCsvRedundantCol = val
}

var fieldIDToName_TFileAttributes = map[int16]string{
	1:    "text_params",
	2:    "strip_outer_array",
	3:    "jsonpaths",
	4:    "json_root",
	5:    "num_as_string",
	6:    "fuzzy_parse",
	7:    "read_json_by_line",
	8:    "read_by_column_def",
	9:    "header_type",
	10:   "trim_double_quotes",
	11:   "skip_lines",
	1001: "ignore_csv_redundant_col",
}

func (p *TFileAttributes) IsSetTextParams() bool {
	return p.TextParams != nil
}

func (p *TFileAttributes) IsSetStripOuterArray() bool {
	return p.StripOuterArray != nil
}

func (p *TFileAttributes) IsSetJsonpaths() bool {
	return p.Jsonpaths != nil
}

func (p *TFileAttributes) IsSetJsonRoot() bool {
	return p.JsonRoot != nil
}

func (p *TFileAttributes) IsSetNumAsString() bool {
	return p.NumAsString != nil
}

func (p *TFileAttributes) IsSetFuzzyParse() bool {
	return p.FuzzyParse != nil
}

func (p *TFileAttributes) IsSetReadJsonByLine() bool {
	return p.ReadJsonByLine != nil
}

func (p *TFileAttributes) IsSetReadByColumnDef() bool {
	return p.ReadByColumnDef != nil
}

func (p *TFileAttributes) IsSetHeaderType() bool {
	return p.HeaderType != nil
}

func (p *TFileAttributes) IsSetTrimDoubleQuotes() bool {
	return p.TrimDoubleQuotes != nil
}

func (p *TFileAttributes) IsSetSkipLines() bool {
	return p.SkipLines != nil
}

func (p *TFileAttributes) IsSetIgnoreCsvRedundantCol() bool {
	return p.IgnoreCsvRedundantCol != nil
}

func (p *TFileAttributes) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1001:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1001(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFileAttributes[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TFileAttributes) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTFileTextScanRangeParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TextParams = _field
	return nil
}
func (p *TFileAttributes) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StripOuterArray = _field
	return nil
}
func (p *TFileAttributes) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Jsonpaths = _field
	return nil
}
func (p *TFileAttributes) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JsonRoot = _field
	return nil
}
func (p *TFileAttributes) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NumAsString = _field
	return nil
}
func (p *TFileAttributes) ReadField6(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FuzzyParse = _field
	return nil
}
func (p *TFileAttributes) ReadField7(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReadJsonByLine = _field
	return nil
}
func (p *TFileAttributes) ReadField8(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReadByColumnDef = _field
	return nil
}
func (p *TFileAttributes) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HeaderType = _field
	return nil
}
func (p *TFileAttributes) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TrimDoubleQuotes = _field
	return nil
}
func (p *TFileAttributes) ReadField11(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SkipLines = _field
	return nil
}
func (p *TFileAttributes) ReadField1001(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IgnoreCsvRedundantCol = _field
	return nil
}

func (p *TFileAttributes) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFileAttributes"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField1001(oprot); err != nil {
			fieldId = 1001
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFileAttributes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTextParams() {
		if err = oprot.WriteFieldBegin("text_params", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TextParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFileAttributes) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStripOuterArray() {
		if err = oprot.WriteFieldBegin("strip_outer_array", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.StripOuterArray); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFileAttributes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetJsonpaths() {
		if err = oprot.WriteFieldBegin("jsonpaths", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Jsonpaths); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TFileAttributes) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetJsonRoot() {
		if err = oprot.WriteFieldBegin("json_root", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JsonRoot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TFileAttributes) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumAsString() {
		if err = oprot.WriteFieldBegin("num_as_string", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.NumAsString); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TFileAttributes) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFuzzyParse() {
		if err = oprot.WriteFieldBegin("fuzzy_parse", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.FuzzyParse); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TFileAttributes) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadJsonByLine() {
		if err = oprot.WriteFieldBegin("read_json_by_line", thrift.BOOL, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ReadJsonByLine); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TFileAttributes) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadByColumnDef() {
		if err = oprot.WriteFieldBegin("read_by_column_def", thrift.BOOL, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ReadByColumnDef); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TFileAttributes) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeaderType() {
		if err = oprot.WriteFieldBegin("header_type", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.HeaderType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TFileAttributes) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrimDoubleQuotes() {
		if err = oprot.WriteFieldBegin("trim_double_quotes", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.TrimDoubleQuotes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TFileAttributes) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipLines() {
		if err = oprot.WriteFieldBegin("skip_lines", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SkipLines); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TFileAttributes) writeField1001(oprot thrift.TProtocol) (err error) {
	if p.IsSetIgnoreCsvRedundantCol() {
		if err = oprot.WriteFieldBegin("ignore_csv_redundant_col", thrift.BOOL, 1001); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IgnoreCsvRedundantCol); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1001 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1001 end error: ", p), err)
}

func (p *TFileAttributes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFileAttributes(%+v)", *p)

}

func (p *TFileAttributes) DeepEqual(ano *TFileAttributes) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TextParams) {
		return false
	}
	if !p.Field2DeepEqual(ano.StripOuterArray) {
		return false
	}
	if !p.Field3DeepEqual(ano.Jsonpaths) {
		return false
	}
	if !p.Field4DeepEqual(ano.JsonRoot) {
		return false
	}
	if !p.Field5DeepEqual(ano.NumAsString) {
		return false
	}
	if !p.Field6DeepEqual(ano.FuzzyParse) {
		return false
	}
	if !p.Field7DeepEqual(ano.ReadJsonByLine) {
		return false
	}
	if !p.Field8DeepEqual(ano.ReadByColumnDef) {
		return false
	}
	if !p.Field9DeepEqual(ano.HeaderType) {
		return false
	}
	if !p.Field10DeepEqual(ano.TrimDoubleQuotes) {
		return false
	}
	if !p.Field11DeepEqual(ano.SkipLines) {
		return false
	}
	if !p.Field1001DeepEqual(ano.IgnoreCsvRedundantCol) {
		return false
	}
	return true
}

func (p *TFileAttributes) Field1DeepEqual(src *TFileTextScanRangeParams) bool {

	if !p.TextParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFileAttributes) Field2DeepEqual(src *bool) bool {

	if p.StripOuterArray == src {
		return true
	} else if p.StripOuterArray == nil || src == nil {
		return false
	}
	if *p.StripOuterArray != *src {
		return false
	}
	return true
}
func (p *TFileAttributes) Field3DeepEqual(src *string) bool {

	if p.Jsonpaths == src {
		return true
	} else if p.Jsonpaths == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Jsonpaths, *src) != 0 {
		return false
	}
	return true
}
func (p *TFileAttributes) Field4DeepEqual(src *string) bool {

	if p.JsonRoot == src {
		return true
	} else if p.JsonRoot == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JsonRoot, *src) != 0 {
		return false
	}
	return true
}
func (p *TFileAttributes) Field5DeepEqual(src *bool) bool {

	if p.NumAsString == src {
		return true
	} else if p.NumAsString == nil || src == nil {
		return false
	}
	if *p.NumAsString != *src {
		return false
	}
	return true
}
func (p *TFileAttributes) Field6DeepEqual(src *bool) bool {

	if p.FuzzyParse == src {
		return true
	} else if p.FuzzyParse == nil || src == nil {
		return false
	}
	if *p.FuzzyParse != *src {
		return false
	}
	return true
}
func (p *TFileAttributes) Field7DeepEqual(src *bool) bool {

	if p.ReadJsonByLine == src {
		return true
	} else if p.ReadJsonByLine == nil || src == nil {
		return false
	}
	if *p.ReadJsonByLine != *src {
		return false
	}
	return true
}
func (p *TFileAttributes) Field8DeepEqual(src *bool) bool {

	if p.ReadByColumnDef == src {
		return true
	} else if p.ReadByColumnDef == nil || src == nil {
		return false
	}
	if *p.ReadByColumnDef != *src {
		return false
	}
	return true
}
func (p *TFileAttributes) Field9DeepEqual(src *string) bool {

	if p.HeaderType == src {
		return true
	} else if p.HeaderType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.HeaderType, *src) != 0 {
		return false
	}
	return true
}
func (p *TFileAttributes) Field10DeepEqual(src *bool) bool {

	if p.TrimDoubleQuotes == src {
		return true
	} else if p.TrimDoubleQuotes == nil || src == nil {
		return false
	}
	if *p.TrimDoubleQuotes != *src {
		return false
	}
	return true
}
func (p *TFileAttributes) Field11DeepEqual(src *int32) bool {

	if p.SkipLines == src {
		return true
	} else if p.SkipLines == nil || src == nil {
		return false
	}
	if *p.SkipLines != *src {
		return false
	}
	return true
}
func (p *TFileAttributes) Field1001DeepEqual(src *bool) bool {

	if p.IgnoreCsvRedundantCol == src {
		return true
	} else if p.IgnoreCsvRedundantCol == nil || src == nil {
		return false
	}
	if *p.IgnoreCsvRedundantCol != *src {
		return false
	}
	return true
}

type TIcebergDeleteFileDesc struct {
	Path               *string `thrift:"path,1,optional" frugal:"1,optional,string" json:"path,omitempty"`
	PositionLowerBound *int64  `thrift:"position_lower_bound,2,optional" frugal:"2,optional,i64" json:"position_lower_bound,omitempty"`
	PositionUpperBound *int64  `thrift:"position_upper_bound,3,optional" frugal:"3,optional,i64" json:"position_upper_bound,omitempty"`
	FieldIds           []int32 `thrift:"field_ids,4,optional" frugal:"4,optional,list<i32>" json:"field_ids,omitempty"`
	Content            *int32  `thrift:"content,5,optional" frugal:"5,optional,i32" json:"content,omitempty"`
}

func NewTIcebergDeleteFileDesc() *TIcebergDeleteFileDesc {
	return &TIcebergDeleteFileDesc{}
}

func (p *TIcebergDeleteFileDesc) InitDefault() {
}

var TIcebergDeleteFileDesc_Path_DEFAULT string

func (p *TIcebergDeleteFileDesc) GetPath() (v string) {
	if !p.IsSetPath() {
		return TIcebergDeleteFileDesc_Path_DEFAULT
	}
	return *p.Path
}

var TIcebergDeleteFileDesc_PositionLowerBound_DEFAULT int64

func (p *TIcebergDeleteFileDesc) GetPositionLowerBound() (v int64) {
	if !p.IsSetPositionLowerBound() {
		return TIcebergDeleteFileDesc_PositionLowerBound_DEFAULT
	}
	return *p.PositionLowerBound
}

var TIcebergDeleteFileDesc_PositionUpperBound_DEFAULT int64

func (p *TIcebergDeleteFileDesc) GetPositionUpperBound() (v int64) {
	if !p.IsSetPositionUpperBound() {
		return TIcebergDeleteFileDesc_PositionUpperBound_DEFAULT
	}
	return *p.PositionUpperBound
}

var TIcebergDeleteFileDesc_FieldIds_DEFAULT []int32

func (p *TIcebergDeleteFileDesc) GetFieldIds() (v []int32) {
	if !p.IsSetFieldIds() {
		return TIcebergDeleteFileDesc_FieldIds_DEFAULT
	}
	return p.FieldIds
}

var TIcebergDeleteFileDesc_Content_DEFAULT int32

func (p *TIcebergDeleteFileDesc) GetContent() (v int32) {
	if !p.IsSetContent() {
		return TIcebergDeleteFileDesc_Content_DEFAULT
	}
	return *p.Content
}
func (p *TIcebergDeleteFileDesc) SetPath(val *string) {
	p.Path = val
}
func (p *TIcebergDeleteFileDesc) SetPositionLowerBound(val *int64) {
	p.PositionLowerBound = val
}
func (p *TIcebergDeleteFileDesc) SetPositionUpperBound(val *int64) {
	p.PositionUpperBound = val
}
func (p *TIcebergDeleteFileDesc) SetFieldIds(val []int32) {
	p.FieldIds = val
}
func (p *TIcebergDeleteFileDesc) SetContent(val *int32) {
	p.Content = val
}

var fieldIDToName_TIcebergDeleteFileDesc = map[int16]string{
	1: "path",
	2: "position_lower_bound",
	3: "position_upper_bound",
	4: "field_ids",
	5: "content",
}

func (p *TIcebergDeleteFileDesc) IsSetPath() bool {
	return p.Path != nil
}

func (p *TIcebergDeleteFileDesc) IsSetPositionLowerBound() bool {
	return p.PositionLowerBound != nil
}

func (p *TIcebergDeleteFileDesc) IsSetPositionUpperBound() bool {
	return p.PositionUpperBound != nil
}

func (p *TIcebergDeleteFileDesc) IsSetFieldIds() bool {
	return p.FieldIds != nil
}

func (p *TIcebergDeleteFileDesc) IsSetContent() bool {
	return p.Content != nil
}

func (p *TIcebergDeleteFileDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TIcebergDeleteFileDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TIcebergDeleteFileDesc) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Path = _field
	return nil
}
func (p *TIcebergDeleteFileDesc) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PositionLowerBound = _field
	return nil
}
func (p *TIcebergDeleteFileDesc) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PositionUpperBound = _field
	return nil
}
func (p *TIcebergDeleteFileDesc) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FieldIds = _field
	return nil
}
func (p *TIcebergDeleteFileDesc) ReadField5(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Content = _field
	return nil
}

func (p *TIcebergDeleteFileDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TIcebergDeleteFileDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TIcebergDeleteFileDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err = oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Path); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TIcebergDeleteFileDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPositionLowerBound() {
		if err = oprot.WriteFieldBegin("position_lower_bound", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PositionLowerBound); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TIcebergDeleteFileDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPositionUpperBound() {
		if err = oprot.WriteFieldBegin("position_upper_bound", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PositionUpperBound); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TIcebergDeleteFileDesc) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFieldIds() {
		if err = oprot.WriteFieldBegin("field_ids", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.FieldIds)); err != nil {
			return err
		}
		for _, v := range p.FieldIds {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TIcebergDeleteFileDesc) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Content); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TIcebergDeleteFileDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIcebergDeleteFileDesc(%+v)", *p)

}

func (p *TIcebergDeleteFileDesc) DeepEqual(ano *TIcebergDeleteFileDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Path) {
		return false
	}
	if !p.Field2DeepEqual(ano.PositionLowerBound) {
		return false
	}
	if !p.Field3DeepEqual(ano.PositionUpperBound) {
		return false
	}
	if !p.Field4DeepEqual(ano.FieldIds) {
		return false
	}
	if !p.Field5DeepEqual(ano.Content) {
		return false
	}
	return true
}

func (p *TIcebergDeleteFileDesc) Field1DeepEqual(src *string) bool {

	if p.Path == src {
		return true
	} else if p.Path == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Path, *src) != 0 {
		return false
	}
	return true
}
func (p *TIcebergDeleteFileDesc) Field2DeepEqual(src *int64) bool {

	if p.PositionLowerBound == src {
		return true
	} else if p.PositionLowerBound == nil || src == nil {
		return false
	}
	if *p.PositionLowerBound != *src {
		return false
	}
	return true
}
func (p *TIcebergDeleteFileDesc) Field3DeepEqual(src *int64) bool {

	if p.PositionUpperBound == src {
		return true
	} else if p.PositionUpperBound == nil || src == nil {
		return false
	}
	if *p.PositionUpperBound != *src {
		return false
	}
	return true
}
func (p *TIcebergDeleteFileDesc) Field4DeepEqual(src []int32) bool {

	if len(p.FieldIds) != len(src) {
		return false
	}
	for i, v := range p.FieldIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TIcebergDeleteFileDesc) Field5DeepEqual(src *int32) bool {

	if p.Content == src {
		return true
	} else if p.Content == nil || src == nil {
		return false
	}
	if *p.Content != *src {
		return false
	}
	return true
}

type TIcebergFileDesc struct {
	FormatVersion      *int32                    `thrift:"format_version,1,optional" frugal:"1,optional,i32" json:"format_version,omitempty"`
	Content            *int32                    `thrift:"content,2,optional" frugal:"2,optional,i32" json:"content,omitempty"`
	DeleteFiles        []*TIcebergDeleteFileDesc `thrift:"delete_files,3,optional" frugal:"3,optional,list<TIcebergDeleteFileDesc>" json:"delete_files,omitempty"`
	DeleteTableTupleId *types.TTupleId           `thrift:"delete_table_tuple_id,4,optional" frugal:"4,optional,i32" json:"delete_table_tuple_id,omitempty"`
	FileSelectConjunct *exprs.TExpr              `thrift:"file_select_conjunct,5,optional" frugal:"5,optional,exprs.TExpr" json:"file_select_conjunct,omitempty"`
	OriginalFilePath   *string                   `thrift:"original_file_path,6,optional" frugal:"6,optional,string" json:"original_file_path,omitempty"`
}

func NewTIcebergFileDesc() *TIcebergFileDesc {
	return &TIcebergFileDesc{}
}

func (p *TIcebergFileDesc) InitDefault() {
}

var TIcebergFileDesc_FormatVersion_DEFAULT int32

func (p *TIcebergFileDesc) GetFormatVersion() (v int32) {
	if !p.IsSetFormatVersion() {
		return TIcebergFileDesc_FormatVersion_DEFAULT
	}
	return *p.FormatVersion
}

var TIcebergFileDesc_Content_DEFAULT int32

func (p *TIcebergFileDesc) GetContent() (v int32) {
	if !p.IsSetContent() {
		return TIcebergFileDesc_Content_DEFAULT
	}
	return *p.Content
}

var TIcebergFileDesc_DeleteFiles_DEFAULT []*TIcebergDeleteFileDesc

func (p *TIcebergFileDesc) GetDeleteFiles() (v []*TIcebergDeleteFileDesc) {
	if !p.IsSetDeleteFiles() {
		return TIcebergFileDesc_DeleteFiles_DEFAULT
	}
	return p.DeleteFiles
}

var TIcebergFileDesc_DeleteTableTupleId_DEFAULT types.TTupleId

func (p *TIcebergFileDesc) GetDeleteTableTupleId() (v types.TTupleId) {
	if !p.IsSetDeleteTableTupleId() {
		return TIcebergFileDesc_DeleteTableTupleId_DEFAULT
	}
	return *p.DeleteTableTupleId
}

var TIcebergFileDesc_FileSelectConjunct_DEFAULT *exprs.TExpr

func (p *TIcebergFileDesc) GetFileSelectConjunct() (v *exprs.TExpr) {
	if !p.IsSetFileSelectConjunct() {
		return TIcebergFileDesc_FileSelectConjunct_DEFAULT
	}
	return p.FileSelectConjunct
}

var TIcebergFileDesc_OriginalFilePath_DEFAULT string

func (p *TIcebergFileDesc) GetOriginalFilePath() (v string) {
	if !p.IsSetOriginalFilePath() {
		return TIcebergFileDesc_OriginalFilePath_DEFAULT
	}
	return *p.OriginalFilePath
}
func (p *TIcebergFileDesc) SetFormatVersion(val *int32) {
	p.FormatVersion = val
}
func (p *TIcebergFileDesc) SetContent(val *int32) {
	p.Content = val
}
func (p *TIcebergFileDesc) SetDeleteFiles(val []*TIcebergDeleteFileDesc) {
	p.DeleteFiles = val
}
func (p *TIcebergFileDesc) SetDeleteTableTupleId(val *types.TTupleId) {
	p.DeleteTableTupleId = val
}
func (p *TIcebergFileDesc) SetFileSelectConjunct(val *exprs.TExpr) {
	p.FileSelectConjunct = val
}
func (p *TIcebergFileDesc) SetOriginalFilePath(val *string) {
	p.OriginalFilePath = val
}

var fieldIDToName_TIcebergFileDesc = map[int16]string{
	1: "format_version",
	2: "content",
	3: "delete_files",
	4: "delete_table_tuple_id",
	5: "file_select_conjunct",
	6: "original_file_path",
}

func (p *TIcebergFileDesc) IsSetFormatVersion() bool {
	return p.FormatVersion != nil
}

func (p *TIcebergFileDesc) IsSetContent() bool {
	return p.Content != nil
}

func (p *TIcebergFileDesc) IsSetDeleteFiles() bool {
	return p.DeleteFiles != nil
}

func (p *TIcebergFileDesc) IsSetDeleteTableTupleId() bool {
	return p.DeleteTableTupleId != nil
}

func (p *TIcebergFileDesc) IsSetFileSelectConjunct() bool {
	return p.FileSelectConjunct != nil
}

func (p *TIcebergFileDesc) IsSetOriginalFilePath() bool {
	return p.OriginalFilePath != nil
}

func (p *TIcebergFileDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TIcebergFileDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TIcebergFileDesc) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FormatVersion = _field
	return nil
}
func (p *TIcebergFileDesc) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Content = _field
	return nil
}
func (p *TIcebergFileDesc) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TIcebergDeleteFileDesc, 0, size)
	values := make([]TIcebergDeleteFileDesc, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DeleteFiles = _field
	return nil
}
func (p *TIcebergFileDesc) ReadField4(iprot thrift.TProtocol) error {

	var _field *types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DeleteTableTupleId = _field
	return nil
}
func (p *TIcebergFileDesc) ReadField5(iprot thrift.TProtocol) error {
	_field := exprs.NewTExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FileSelectConjunct = _field
	return nil
}
func (p *TIcebergFileDesc) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OriginalFilePath = _field
	return nil
}

func (p *TIcebergFileDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TIcebergFileDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TIcebergFileDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFormatVersion() {
		if err = oprot.WriteFieldBegin("format_version", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.FormatVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TIcebergFileDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Content); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TIcebergFileDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleteFiles() {
		if err = oprot.WriteFieldBegin("delete_files", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DeleteFiles)); err != nil {
			return err
		}
		for _, v := range p.DeleteFiles {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TIcebergFileDesc) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleteTableTupleId() {
		if err = oprot.WriteFieldBegin("delete_table_tuple_id", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.DeleteTableTupleId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TIcebergFileDesc) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileSelectConjunct() {
		if err = oprot.WriteFieldBegin("file_select_conjunct", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FileSelectConjunct.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TIcebergFileDesc) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalFilePath() {
		if err = oprot.WriteFieldBegin("original_file_path", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OriginalFilePath); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TIcebergFileDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIcebergFileDesc(%+v)", *p)

}

func (p *TIcebergFileDesc) DeepEqual(ano *TIcebergFileDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FormatVersion) {
		return false
	}
	if !p.Field2DeepEqual(ano.Content) {
		return false
	}
	if !p.Field3DeepEqual(ano.DeleteFiles) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeleteTableTupleId) {
		return false
	}
	if !p.Field5DeepEqual(ano.FileSelectConjunct) {
		return false
	}
	if !p.Field6DeepEqual(ano.OriginalFilePath) {
		return false
	}
	return true
}

func (p *TIcebergFileDesc) Field1DeepEqual(src *int32) bool {

	if p.FormatVersion == src {
		return true
	} else if p.FormatVersion == nil || src == nil {
		return false
	}
	if *p.FormatVersion != *src {
		return false
	}
	return true
}
func (p *TIcebergFileDesc) Field2DeepEqual(src *int32) bool {

	if p.Content == src {
		return true
	} else if p.Content == nil || src == nil {
		return false
	}
	if *p.Content != *src {
		return false
	}
	return true
}
func (p *TIcebergFileDesc) Field3DeepEqual(src []*TIcebergDeleteFileDesc) bool {

	if len(p.DeleteFiles) != len(src) {
		return false
	}
	for i, v := range p.DeleteFiles {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TIcebergFileDesc) Field4DeepEqual(src *types.TTupleId) bool {

	if p.DeleteTableTupleId == src {
		return true
	} else if p.DeleteTableTupleId == nil || src == nil {
		return false
	}
	if *p.DeleteTableTupleId != *src {
		return false
	}
	return true
}
func (p *TIcebergFileDesc) Field5DeepEqual(src *exprs.TExpr) bool {

	if !p.FileSelectConjunct.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TIcebergFileDesc) Field6DeepEqual(src *string) bool {

	if p.OriginalFilePath == src {
		return true
	} else if p.OriginalFilePath == nil || src == nil {
		return false
	}
	if strings.Compare(*p.OriginalFilePath, *src) != 0 {
		return false
	}
	return true
}

type TPaimonDeletionFileDesc struct {
	Path   *string `thrift:"path,1,optional" frugal:"1,optional,string" json:"path,omitempty"`
	Offset *int64  `thrift:"offset,2,optional" frugal:"2,optional,i64" json:"offset,omitempty"`
	Length *int64  `thrift:"length,3,optional" frugal:"3,optional,i64" json:"length,omitempty"`
}

func NewTPaimonDeletionFileDesc() *TPaimonDeletionFileDesc {
	return &TPaimonDeletionFileDesc{}
}

func (p *TPaimonDeletionFileDesc) InitDefault() {
}

var TPaimonDeletionFileDesc_Path_DEFAULT string

func (p *TPaimonDeletionFileDesc) GetPath() (v string) {
	if !p.IsSetPath() {
		return TPaimonDeletionFileDesc_Path_DEFAULT
	}
	return *p.Path
}

var TPaimonDeletionFileDesc_Offset_DEFAULT int64

func (p *TPaimonDeletionFileDesc) GetOffset() (v int64) {
	if !p.IsSetOffset() {
		return TPaimonDeletionFileDesc_Offset_DEFAULT
	}
	return *p.Offset
}

var TPaimonDeletionFileDesc_Length_DEFAULT int64

func (p *TPaimonDeletionFileDesc) GetLength() (v int64) {
	if !p.IsSetLength() {
		return TPaimonDeletionFileDesc_Length_DEFAULT
	}
	return *p.Length
}
func (p *TPaimonDeletionFileDesc) SetPath(val *string) {
	p.Path = val
}
func (p *TPaimonDeletionFileDesc) SetOffset(val *int64) {
	p.Offset = val
}
func (p *TPaimonDeletionFileDesc) SetLength(val *int64) {
	p.Length = val
}

var fieldIDToName_TPaimonDeletionFileDesc = map[int16]string{
	1: "path",
	2: "offset",
	3: "length",
}

func (p *TPaimonDeletionFileDesc) IsSetPath() bool {
	return p.Path != nil
}

func (p *TPaimonDeletionFileDesc) IsSetOffset() bool {
	return p.Offset != nil
}

func (p *TPaimonDeletionFileDesc) IsSetLength() bool {
	return p.Length != nil
}

func (p *TPaimonDeletionFileDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPaimonDeletionFileDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TPaimonDeletionFileDesc) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Path = _field
	return nil
}
func (p *TPaimonDeletionFileDesc) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Offset = _field
	return nil
}
func (p *TPaimonDeletionFileDesc) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Length = _field
	return nil
}

func (p *TPaimonDeletionFileDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPaimonDeletionFileDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPaimonDeletionFileDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err = oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Path); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPaimonDeletionFileDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOffset() {
		if err = oprot.WriteFieldBegin("offset", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Offset); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPaimonDeletionFileDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLength() {
		if err = oprot.WriteFieldBegin("length", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Length); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPaimonDeletionFileDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPaimonDeletionFileDesc(%+v)", *p)

}

func (p *TPaimonDeletionFileDesc) DeepEqual(ano *TPaimonDeletionFileDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Path) {
		return false
	}
	if !p.Field2DeepEqual(ano.Offset) {
		return false
	}
	if !p.Field3DeepEqual(ano.Length) {
		return false
	}
	return true
}

func (p *TPaimonDeletionFileDesc) Field1DeepEqual(src *string) bool {

	if p.Path == src {
		return true
	} else if p.Path == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Path, *src) != 0 {
		return false
	}
	return true
}
func (p *TPaimonDeletionFileDesc) Field2DeepEqual(src *int64) bool {

	if p.Offset == src {
		return true
	} else if p.Offset == nil || src == nil {
		return false
	}
	if *p.Offset != *src {
		return false
	}
	return true
}
func (p *TPaimonDeletionFileDesc) Field3DeepEqual(src *int64) bool {

	if p.Length == src {
		return true
	} else if p.Length == nil || src == nil {
		return false
	}
	if *p.Length != *src {
		return false
	}
	return true
}

type TPaimonFileDesc struct {
	PaimonSplit       *string                  `thrift:"paimon_split,1,optional" frugal:"1,optional,string" json:"paimon_split,omitempty"`
	PaimonColumnNames *string                  `thrift:"paimon_column_names,2,optional" frugal:"2,optional,string" json:"paimon_column_names,omitempty"`
	DbName            *string                  `thrift:"db_name,3,optional" frugal:"3,optional,string" json:"db_name,omitempty"`
	TableName         *string                  `thrift:"table_name,4,optional" frugal:"4,optional,string" json:"table_name,omitempty"`
	PaimonPredicate   *string                  `thrift:"paimon_predicate,5,optional" frugal:"5,optional,string" json:"paimon_predicate,omitempty"`
	PaimonOptions     map[string]string        `thrift:"paimon_options,6,optional" frugal:"6,optional,map<string:string>" json:"paimon_options,omitempty"`
	CtlId             *int64                   `thrift:"ctl_id,7,optional" frugal:"7,optional,i64" json:"ctl_id,omitempty"`
	DbId              *int64                   `thrift:"db_id,8,optional" frugal:"8,optional,i64" json:"db_id,omitempty"`
	TblId             *int64                   `thrift:"tbl_id,9,optional" frugal:"9,optional,i64" json:"tbl_id,omitempty"`
	LastUpdateTime    *int64                   `thrift:"last_update_time,10,optional" frugal:"10,optional,i64" json:"last_update_time,omitempty"`
	FileFormat        *string                  `thrift:"file_format,11,optional" frugal:"11,optional,string" json:"file_format,omitempty"`
	DeletionFile      *TPaimonDeletionFileDesc `thrift:"deletion_file,12,optional" frugal:"12,optional,TPaimonDeletionFileDesc" json:"deletion_file,omitempty"`
}

func NewTPaimonFileDesc() *TPaimonFileDesc {
	return &TPaimonFileDesc{}
}

func (p *TPaimonFileDesc) InitDefault() {
}

var TPaimonFileDesc_PaimonSplit_DEFAULT string

func (p *TPaimonFileDesc) GetPaimonSplit() (v string) {
	if !p.IsSetPaimonSplit() {
		return TPaimonFileDesc_PaimonSplit_DEFAULT
	}
	return *p.PaimonSplit
}

var TPaimonFileDesc_PaimonColumnNames_DEFAULT string

func (p *TPaimonFileDesc) GetPaimonColumnNames() (v string) {
	if !p.IsSetPaimonColumnNames() {
		return TPaimonFileDesc_PaimonColumnNames_DEFAULT
	}
	return *p.PaimonColumnNames
}

var TPaimonFileDesc_DbName_DEFAULT string

func (p *TPaimonFileDesc) GetDbName() (v string) {
	if !p.IsSetDbName() {
		return TPaimonFileDesc_DbName_DEFAULT
	}
	return *p.DbName
}

var TPaimonFileDesc_TableName_DEFAULT string

func (p *TPaimonFileDesc) GetTableName() (v string) {
	if !p.IsSetTableName() {
		return TPaimonFileDesc_TableName_DEFAULT
	}
	return *p.TableName
}

var TPaimonFileDesc_PaimonPredicate_DEFAULT string

func (p *TPaimonFileDesc) GetPaimonPredicate() (v string) {
	if !p.IsSetPaimonPredicate() {
		return TPaimonFileDesc_PaimonPredicate_DEFAULT
	}
	return *p.PaimonPredicate
}

var TPaimonFileDesc_PaimonOptions_DEFAULT map[string]string

func (p *TPaimonFileDesc) GetPaimonOptions() (v map[string]string) {
	if !p.IsSetPaimonOptions() {
		return TPaimonFileDesc_PaimonOptions_DEFAULT
	}
	return p.PaimonOptions
}

var TPaimonFileDesc_CtlId_DEFAULT int64

func (p *TPaimonFileDesc) GetCtlId() (v int64) {
	if !p.IsSetCtlId() {
		return TPaimonFileDesc_CtlId_DEFAULT
	}
	return *p.CtlId
}

var TPaimonFileDesc_DbId_DEFAULT int64

func (p *TPaimonFileDesc) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TPaimonFileDesc_DbId_DEFAULT
	}
	return *p.DbId
}

var TPaimonFileDesc_TblId_DEFAULT int64

func (p *TPaimonFileDesc) GetTblId() (v int64) {
	if !p.IsSetTblId() {
		return TPaimonFileDesc_TblId_DEFAULT
	}
	return *p.TblId
}

var TPaimonFileDesc_LastUpdateTime_DEFAULT int64

func (p *TPaimonFileDesc) GetLastUpdateTime() (v int64) {
	if !p.IsSetLastUpdateTime() {
		return TPaimonFileDesc_LastUpdateTime_DEFAULT
	}
	return *p.LastUpdateTime
}

var TPaimonFileDesc_FileFormat_DEFAULT string

func (p *TPaimonFileDesc) GetFileFormat() (v string) {
	if !p.IsSetFileFormat() {
		return TPaimonFileDesc_FileFormat_DEFAULT
	}
	return *p.FileFormat
}

var TPaimonFileDesc_DeletionFile_DEFAULT *TPaimonDeletionFileDesc

func (p *TPaimonFileDesc) GetDeletionFile() (v *TPaimonDeletionFileDesc) {
	if !p.IsSetDeletionFile() {
		return TPaimonFileDesc_DeletionFile_DEFAULT
	}
	return p.DeletionFile
}
func (p *TPaimonFileDesc) SetPaimonSplit(val *string) {
	p.PaimonSplit = val
}
func (p *TPaimonFileDesc) SetPaimonColumnNames(val *string) {
	p.PaimonColumnNames = val
}
func (p *TPaimonFileDesc) SetDbName(val *string) {
	p.DbName = val
}
func (p *TPaimonFileDesc) SetTableName(val *string) {
	p.TableName = val
}
func (p *TPaimonFileDesc) SetPaimonPredicate(val *string) {
	p.PaimonPredicate = val
}
func (p *TPaimonFileDesc) SetPaimonOptions(val map[string]string) {
	p.PaimonOptions = val
}
func (p *TPaimonFileDesc) SetCtlId(val *int64) {
	p.CtlId = val
}
func (p *TPaimonFileDesc) SetDbId(val *int64) {
	p.DbId = val
}
func (p *TPaimonFileDesc) SetTblId(val *int64) {
	p.TblId = val
}
func (p *TPaimonFileDesc) SetLastUpdateTime(val *int64) {
	p.LastUpdateTime = val
}
func (p *TPaimonFileDesc) SetFileFormat(val *string) {
	p.FileFormat = val
}
func (p *TPaimonFileDesc) SetDeletionFile(val *TPaimonDeletionFileDesc) {
	p.DeletionFile = val
}

var fieldIDToName_TPaimonFileDesc = map[int16]string{
	1:  "paimon_split",
	2:  "paimon_column_names",
	3:  "db_name",
	4:  "table_name",
	5:  "paimon_predicate",
	6:  "paimon_options",
	7:  "ctl_id",
	8:  "db_id",
	9:  "tbl_id",
	10: "last_update_time",
	11: "file_format",
	12: "deletion_file",
}

func (p *TPaimonFileDesc) IsSetPaimonSplit() bool {
	return p.PaimonSplit != nil
}

func (p *TPaimonFileDesc) IsSetPaimonColumnNames() bool {
	return p.PaimonColumnNames != nil
}

func (p *TPaimonFileDesc) IsSetDbName() bool {
	return p.DbName != nil
}

func (p *TPaimonFileDesc) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *TPaimonFileDesc) IsSetPaimonPredicate() bool {
	return p.PaimonPredicate != nil
}

func (p *TPaimonFileDesc) IsSetPaimonOptions() bool {
	return p.PaimonOptions != nil
}

func (p *TPaimonFileDesc) IsSetCtlId() bool {
	return p.CtlId != nil
}

func (p *TPaimonFileDesc) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TPaimonFileDesc) IsSetTblId() bool {
	return p.TblId != nil
}

func (p *TPaimonFileDesc) IsSetLastUpdateTime() bool {
	return p.LastUpdateTime != nil
}

func (p *TPaimonFileDesc) IsSetFileFormat() bool {
	return p.FileFormat != nil
}

func (p *TPaimonFileDesc) IsSetDeletionFile() bool {
	return p.DeletionFile != nil
}

func (p *TPaimonFileDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPaimonFileDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TPaimonFileDesc) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PaimonSplit = _field
	return nil
}
func (p *TPaimonFileDesc) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PaimonColumnNames = _field
	return nil
}
func (p *TPaimonFileDesc) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbName = _field
	return nil
}
func (p *TPaimonFileDesc) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableName = _field
	return nil
}
func (p *TPaimonFileDesc) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PaimonPredicate = _field
	return nil
}
func (p *TPaimonFileDesc) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.PaimonOptions = _field
	return nil
}
func (p *TPaimonFileDesc) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CtlId = _field
	return nil
}
func (p *TPaimonFileDesc) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TPaimonFileDesc) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TblId = _field
	return nil
}
func (p *TPaimonFileDesc) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LastUpdateTime = _field
	return nil
}
func (p *TPaimonFileDesc) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FileFormat = _field
	return nil
}
func (p *TPaimonFileDesc) ReadField12(iprot thrift.TProtocol) error {
	_field := NewTPaimonDeletionFileDesc()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DeletionFile = _field
	return nil
}

func (p *TPaimonFileDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPaimonFileDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPaimonFileDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaimonSplit() {
		if err = oprot.WriteFieldBegin("paimon_split", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PaimonSplit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPaimonFileDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaimonColumnNames() {
		if err = oprot.WriteFieldBegin("paimon_column_names", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PaimonColumnNames); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPaimonFileDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbName() {
		if err = oprot.WriteFieldBegin("db_name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DbName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPaimonFileDesc) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err = oprot.WriteFieldBegin("table_name", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TableName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TPaimonFileDesc) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaimonPredicate() {
		if err = oprot.WriteFieldBegin("paimon_predicate", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PaimonPredicate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TPaimonFileDesc) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaimonOptions() {
		if err = oprot.WriteFieldBegin("paimon_options", thrift.MAP, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.PaimonOptions)); err != nil {
			return err
		}
		for k, v := range p.PaimonOptions {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TPaimonFileDesc) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCtlId() {
		if err = oprot.WriteFieldBegin("ctl_id", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CtlId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TPaimonFileDesc) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("db_id", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TPaimonFileDesc) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTblId() {
		if err = oprot.WriteFieldBegin("tbl_id", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TblId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TPaimonFileDesc) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastUpdateTime() {
		if err = oprot.WriteFieldBegin("last_update_time", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LastUpdateTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TPaimonFileDesc) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileFormat() {
		if err = oprot.WriteFieldBegin("file_format", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FileFormat); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TPaimonFileDesc) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeletionFile() {
		if err = oprot.WriteFieldBegin("deletion_file", thrift.STRUCT, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DeletionFile.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TPaimonFileDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPaimonFileDesc(%+v)", *p)

}

func (p *TPaimonFileDesc) DeepEqual(ano *TPaimonFileDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PaimonSplit) {
		return false
	}
	if !p.Field2DeepEqual(ano.PaimonColumnNames) {
		return false
	}
	if !p.Field3DeepEqual(ano.DbName) {
		return false
	}
	if !p.Field4DeepEqual(ano.TableName) {
		return false
	}
	if !p.Field5DeepEqual(ano.PaimonPredicate) {
		return false
	}
	if !p.Field6DeepEqual(ano.PaimonOptions) {
		return false
	}
	if !p.Field7DeepEqual(ano.CtlId) {
		return false
	}
	if !p.Field8DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field9DeepEqual(ano.TblId) {
		return false
	}
	if !p.Field10DeepEqual(ano.LastUpdateTime) {
		return false
	}
	if !p.Field11DeepEqual(ano.FileFormat) {
		return false
	}
	if !p.Field12DeepEqual(ano.DeletionFile) {
		return false
	}
	return true
}

func (p *TPaimonFileDesc) Field1DeepEqual(src *string) bool {

	if p.PaimonSplit == src {
		return true
	} else if p.PaimonSplit == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PaimonSplit, *src) != 0 {
		return false
	}
	return true
}
func (p *TPaimonFileDesc) Field2DeepEqual(src *string) bool {

	if p.PaimonColumnNames == src {
		return true
	} else if p.PaimonColumnNames == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PaimonColumnNames, *src) != 0 {
		return false
	}
	return true
}
func (p *TPaimonFileDesc) Field3DeepEqual(src *string) bool {

	if p.DbName == src {
		return true
	} else if p.DbName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DbName, *src) != 0 {
		return false
	}
	return true
}
func (p *TPaimonFileDesc) Field4DeepEqual(src *string) bool {

	if p.TableName == src {
		return true
	} else if p.TableName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TableName, *src) != 0 {
		return false
	}
	return true
}
func (p *TPaimonFileDesc) Field5DeepEqual(src *string) bool {

	if p.PaimonPredicate == src {
		return true
	} else if p.PaimonPredicate == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PaimonPredicate, *src) != 0 {
		return false
	}
	return true
}
func (p *TPaimonFileDesc) Field6DeepEqual(src map[string]string) bool {

	if len(p.PaimonOptions) != len(src) {
		return false
	}
	for k, v := range p.PaimonOptions {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TPaimonFileDesc) Field7DeepEqual(src *int64) bool {

	if p.CtlId == src {
		return true
	} else if p.CtlId == nil || src == nil {
		return false
	}
	if *p.CtlId != *src {
		return false
	}
	return true
}
func (p *TPaimonFileDesc) Field8DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}
func (p *TPaimonFileDesc) Field9DeepEqual(src *int64) bool {

	if p.TblId == src {
		return true
	} else if p.TblId == nil || src == nil {
		return false
	}
	if *p.TblId != *src {
		return false
	}
	return true
}
func (p *TPaimonFileDesc) Field10DeepEqual(src *int64) bool {

	if p.LastUpdateTime == src {
		return true
	} else if p.LastUpdateTime == nil || src == nil {
		return false
	}
	if *p.LastUpdateTime != *src {
		return false
	}
	return true
}
func (p *TPaimonFileDesc) Field11DeepEqual(src *string) bool {

	if p.FileFormat == src {
		return true
	} else if p.FileFormat == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FileFormat, *src) != 0 {
		return false
	}
	return true
}
func (p *TPaimonFileDesc) Field12DeepEqual(src *TPaimonDeletionFileDesc) bool {

	if !p.DeletionFile.DeepEqual(src) {
		return false
	}
	return true
}

type TTrinoConnectorFileDesc struct {
	CatalogName                    *string           `thrift:"catalog_name,1,optional" frugal:"1,optional,string" json:"catalog_name,omitempty"`
	DbName                         *string           `thrift:"db_name,2,optional" frugal:"2,optional,string" json:"db_name,omitempty"`
	TableName                      *string           `thrift:"table_name,3,optional" frugal:"3,optional,string" json:"table_name,omitempty"`
	TrinoConnectorOptions          map[string]string `thrift:"trino_connector_options,4,optional" frugal:"4,optional,map<string:string>" json:"trino_connector_options,omitempty"`
	TrinoConnectorTableHandle      *string           `thrift:"trino_connector_table_handle,5,optional" frugal:"5,optional,string" json:"trino_connector_table_handle,omitempty"`
	TrinoConnectorColumnHandles    *string           `thrift:"trino_connector_column_handles,6,optional" frugal:"6,optional,string" json:"trino_connector_column_handles,omitempty"`
	TrinoConnectorColumnMetadata   *string           `thrift:"trino_connector_column_metadata,7,optional" frugal:"7,optional,string" json:"trino_connector_column_metadata,omitempty"`
	TrinoConnectorColumnNames      *string           `thrift:"trino_connector_column_names,8,optional" frugal:"8,optional,string" json:"trino_connector_column_names,omitempty"`
	TrinoConnectorSplit            *string           `thrift:"trino_connector_split,9,optional" frugal:"9,optional,string" json:"trino_connector_split,omitempty"`
	TrinoConnectorPredicate        *string           `thrift:"trino_connector_predicate,10,optional" frugal:"10,optional,string" json:"trino_connector_predicate,omitempty"`
	TrinoConnectorTrascationHandle *string           `thrift:"trino_connector_trascation_handle,11,optional" frugal:"11,optional,string" json:"trino_connector_trascation_handle,omitempty"`
}

func NewTTrinoConnectorFileDesc() *TTrinoConnectorFileDesc {
	return &TTrinoConnectorFileDesc{}
}

func (p *TTrinoConnectorFileDesc) InitDefault() {
}

var TTrinoConnectorFileDesc_CatalogName_DEFAULT string

func (p *TTrinoConnectorFileDesc) GetCatalogName() (v string) {
	if !p.IsSetCatalogName() {
		return TTrinoConnectorFileDesc_CatalogName_DEFAULT
	}
	return *p.CatalogName
}

var TTrinoConnectorFileDesc_DbName_DEFAULT string

func (p *TTrinoConnectorFileDesc) GetDbName() (v string) {
	if !p.IsSetDbName() {
		return TTrinoConnectorFileDesc_DbName_DEFAULT
	}
	return *p.DbName
}

var TTrinoConnectorFileDesc_TableName_DEFAULT string

func (p *TTrinoConnectorFileDesc) GetTableName() (v string) {
	if !p.IsSetTableName() {
		return TTrinoConnectorFileDesc_TableName_DEFAULT
	}
	return *p.TableName
}

var TTrinoConnectorFileDesc_TrinoConnectorOptions_DEFAULT map[string]string

func (p *TTrinoConnectorFileDesc) GetTrinoConnectorOptions() (v map[string]string) {
	if !p.IsSetTrinoConnectorOptions() {
		return TTrinoConnectorFileDesc_TrinoConnectorOptions_DEFAULT
	}
	return p.TrinoConnectorOptions
}

var TTrinoConnectorFileDesc_TrinoConnectorTableHandle_DEFAULT string

func (p *TTrinoConnectorFileDesc) GetTrinoConnectorTableHandle() (v string) {
	if !p.IsSetTrinoConnectorTableHandle() {
		return TTrinoConnectorFileDesc_TrinoConnectorTableHandle_DEFAULT
	}
	return *p.TrinoConnectorTableHandle
}

var TTrinoConnectorFileDesc_TrinoConnectorColumnHandles_DEFAULT string

func (p *TTrinoConnectorFileDesc) GetTrinoConnectorColumnHandles() (v string) {
	if !p.IsSetTrinoConnectorColumnHandles() {
		return TTrinoConnectorFileDesc_TrinoConnectorColumnHandles_DEFAULT
	}
	return *p.TrinoConnectorColumnHandles
}

var TTrinoConnectorFileDesc_TrinoConnectorColumnMetadata_DEFAULT string

func (p *TTrinoConnectorFileDesc) GetTrinoConnectorColumnMetadata() (v string) {
	if !p.IsSetTrinoConnectorColumnMetadata() {
		return TTrinoConnectorFileDesc_TrinoConnectorColumnMetadata_DEFAULT
	}
	return *p.TrinoConnectorColumnMetadata
}

var TTrinoConnectorFileDesc_TrinoConnectorColumnNames_DEFAULT string

func (p *TTrinoConnectorFileDesc) GetTrinoConnectorColumnNames() (v string) {
	if !p.IsSetTrinoConnectorColumnNames() {
		return TTrinoConnectorFileDesc_TrinoConnectorColumnNames_DEFAULT
	}
	return *p.TrinoConnectorColumnNames
}

var TTrinoConnectorFileDesc_TrinoConnectorSplit_DEFAULT string

func (p *TTrinoConnectorFileDesc) GetTrinoConnectorSplit() (v string) {
	if !p.IsSetTrinoConnectorSplit() {
		return TTrinoConnectorFileDesc_TrinoConnectorSplit_DEFAULT
	}
	return *p.TrinoConnectorSplit
}

var TTrinoConnectorFileDesc_TrinoConnectorPredicate_DEFAULT string

func (p *TTrinoConnectorFileDesc) GetTrinoConnectorPredicate() (v string) {
	if !p.IsSetTrinoConnectorPredicate() {
		return TTrinoConnectorFileDesc_TrinoConnectorPredicate_DEFAULT
	}
	return *p.TrinoConnectorPredicate
}

var TTrinoConnectorFileDesc_TrinoConnectorTrascationHandle_DEFAULT string

func (p *TTrinoConnectorFileDesc) GetTrinoConnectorTrascationHandle() (v string) {
	if !p.IsSetTrinoConnectorTrascationHandle() {
		return TTrinoConnectorFileDesc_TrinoConnectorTrascationHandle_DEFAULT
	}
	return *p.TrinoConnectorTrascationHandle
}
func (p *TTrinoConnectorFileDesc) SetCatalogName(val *string) {
	p.CatalogName = val
}
func (p *TTrinoConnectorFileDesc) SetDbName(val *string) {
	p.DbName = val
}
func (p *TTrinoConnectorFileDesc) SetTableName(val *string) {
	p.TableName = val
}
func (p *TTrinoConnectorFileDesc) SetTrinoConnectorOptions(val map[string]string) {
	p.TrinoConnectorOptions = val
}
func (p *TTrinoConnectorFileDesc) SetTrinoConnectorTableHandle(val *string) {
	p.TrinoConnectorTableHandle = val
}
func (p *TTrinoConnectorFileDesc) SetTrinoConnectorColumnHandles(val *string) {
	p.TrinoConnectorColumnHandles = val
}
func (p *TTrinoConnectorFileDesc) SetTrinoConnectorColumnMetadata(val *string) {
	p.TrinoConnectorColumnMetadata = val
}
func (p *TTrinoConnectorFileDesc) SetTrinoConnectorColumnNames(val *string) {
	p.TrinoConnectorColumnNames = val
}
func (p *TTrinoConnectorFileDesc) SetTrinoConnectorSplit(val *string) {
	p.TrinoConnectorSplit = val
}
func (p *TTrinoConnectorFileDesc) SetTrinoConnectorPredicate(val *string) {
	p.TrinoConnectorPredicate = val
}
func (p *TTrinoConnectorFileDesc) SetTrinoConnectorTrascationHandle(val *string) {
	p.TrinoConnectorTrascationHandle = val
}

var fieldIDToName_TTrinoConnectorFileDesc = map[int16]string{
	1:  "catalog_name",
	2:  "db_name",
	3:  "table_name",
	4:  "trino_connector_options",
	5:  "trino_connector_table_handle",
	6:  "trino_connector_column_handles",
	7:  "trino_connector_column_metadata",
	8:  "trino_connector_column_names",
	9:  "trino_connector_split",
	10: "trino_connector_predicate",
	11: "trino_connector_trascation_handle",
}

func (p *TTrinoConnectorFileDesc) IsSetCatalogName() bool {
	return p.CatalogName != nil
}

func (p *TTrinoConnectorFileDesc) IsSetDbName() bool {
	return p.DbName != nil
}

func (p *TTrinoConnectorFileDesc) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *TTrinoConnectorFileDesc) IsSetTrinoConnectorOptions() bool {
	return p.TrinoConnectorOptions != nil
}

func (p *TTrinoConnectorFileDesc) IsSetTrinoConnectorTableHandle() bool {
	return p.TrinoConnectorTableHandle != nil
}

func (p *TTrinoConnectorFileDesc) IsSetTrinoConnectorColumnHandles() bool {
	return p.TrinoConnectorColumnHandles != nil
}

func (p *TTrinoConnectorFileDesc) IsSetTrinoConnectorColumnMetadata() bool {
	return p.TrinoConnectorColumnMetadata != nil
}

func (p *TTrinoConnectorFileDesc) IsSetTrinoConnectorColumnNames() bool {
	return p.TrinoConnectorColumnNames != nil
}

func (p *TTrinoConnectorFileDesc) IsSetTrinoConnectorSplit() bool {
	return p.TrinoConnectorSplit != nil
}

func (p *TTrinoConnectorFileDesc) IsSetTrinoConnectorPredicate() bool {
	return p.TrinoConnectorPredicate != nil
}

func (p *TTrinoConnectorFileDesc) IsSetTrinoConnectorTrascationHandle() bool {
	return p.TrinoConnectorTrascationHandle != nil
}

func (p *TTrinoConnectorFileDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTrinoConnectorFileDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTrinoConnectorFileDesc) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CatalogName = _field
	return nil
}
func (p *TTrinoConnectorFileDesc) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbName = _field
	return nil
}
func (p *TTrinoConnectorFileDesc) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableName = _field
	return nil
}
func (p *TTrinoConnectorFileDesc) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.TrinoConnectorOptions = _field
	return nil
}
func (p *TTrinoConnectorFileDesc) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TrinoConnectorTableHandle = _field
	return nil
}
func (p *TTrinoConnectorFileDesc) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TrinoConnectorColumnHandles = _field
	return nil
}
func (p *TTrinoConnectorFileDesc) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TrinoConnectorColumnMetadata = _field
	return nil
}
func (p *TTrinoConnectorFileDesc) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TrinoConnectorColumnNames = _field
	return nil
}
func (p *TTrinoConnectorFileDesc) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TrinoConnectorSplit = _field
	return nil
}
func (p *TTrinoConnectorFileDesc) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TrinoConnectorPredicate = _field
	return nil
}
func (p *TTrinoConnectorFileDesc) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TrinoConnectorTrascationHandle = _field
	return nil
}

func (p *TTrinoConnectorFileDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTrinoConnectorFileDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTrinoConnectorFileDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalogName() {
		if err = oprot.WriteFieldBegin("catalog_name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CatalogName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTrinoConnectorFileDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbName() {
		if err = oprot.WriteFieldBegin("db_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DbName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTrinoConnectorFileDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err = oprot.WriteFieldBegin("table_name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TableName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTrinoConnectorFileDesc) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrinoConnectorOptions() {
		if err = oprot.WriteFieldBegin("trino_connector_options", thrift.MAP, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.TrinoConnectorOptions)); err != nil {
			return err
		}
		for k, v := range p.TrinoConnectorOptions {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TTrinoConnectorFileDesc) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrinoConnectorTableHandle() {
		if err = oprot.WriteFieldBegin("trino_connector_table_handle", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TrinoConnectorTableHandle); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TTrinoConnectorFileDesc) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrinoConnectorColumnHandles() {
		if err = oprot.WriteFieldBegin("trino_connector_column_handles", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TrinoConnectorColumnHandles); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TTrinoConnectorFileDesc) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrinoConnectorColumnMetadata() {
		if err = oprot.WriteFieldBegin("trino_connector_column_metadata", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TrinoConnectorColumnMetadata); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TTrinoConnectorFileDesc) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrinoConnectorColumnNames() {
		if err = oprot.WriteFieldBegin("trino_connector_column_names", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TrinoConnectorColumnNames); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TTrinoConnectorFileDesc) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrinoConnectorSplit() {
		if err = oprot.WriteFieldBegin("trino_connector_split", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TrinoConnectorSplit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TTrinoConnectorFileDesc) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrinoConnectorPredicate() {
		if err = oprot.WriteFieldBegin("trino_connector_predicate", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TrinoConnectorPredicate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TTrinoConnectorFileDesc) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrinoConnectorTrascationHandle() {
		if err = oprot.WriteFieldBegin("trino_connector_trascation_handle", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TrinoConnectorTrascationHandle); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TTrinoConnectorFileDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTrinoConnectorFileDesc(%+v)", *p)

}

func (p *TTrinoConnectorFileDesc) DeepEqual(ano *TTrinoConnectorFileDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CatalogName) {
		return false
	}
	if !p.Field2DeepEqual(ano.DbName) {
		return false
	}
	if !p.Field3DeepEqual(ano.TableName) {
		return false
	}
	if !p.Field4DeepEqual(ano.TrinoConnectorOptions) {
		return false
	}
	if !p.Field5DeepEqual(ano.TrinoConnectorTableHandle) {
		return false
	}
	if !p.Field6DeepEqual(ano.TrinoConnectorColumnHandles) {
		return false
	}
	if !p.Field7DeepEqual(ano.TrinoConnectorColumnMetadata) {
		return false
	}
	if !p.Field8DeepEqual(ano.TrinoConnectorColumnNames) {
		return false
	}
	if !p.Field9DeepEqual(ano.TrinoConnectorSplit) {
		return false
	}
	if !p.Field10DeepEqual(ano.TrinoConnectorPredicate) {
		return false
	}
	if !p.Field11DeepEqual(ano.TrinoConnectorTrascationHandle) {
		return false
	}
	return true
}

func (p *TTrinoConnectorFileDesc) Field1DeepEqual(src *string) bool {

	if p.CatalogName == src {
		return true
	} else if p.CatalogName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CatalogName, *src) != 0 {
		return false
	}
	return true
}
func (p *TTrinoConnectorFileDesc) Field2DeepEqual(src *string) bool {

	if p.DbName == src {
		return true
	} else if p.DbName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DbName, *src) != 0 {
		return false
	}
	return true
}
func (p *TTrinoConnectorFileDesc) Field3DeepEqual(src *string) bool {

	if p.TableName == src {
		return true
	} else if p.TableName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TableName, *src) != 0 {
		return false
	}
	return true
}
func (p *TTrinoConnectorFileDesc) Field4DeepEqual(src map[string]string) bool {

	if len(p.TrinoConnectorOptions) != len(src) {
		return false
	}
	for k, v := range p.TrinoConnectorOptions {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TTrinoConnectorFileDesc) Field5DeepEqual(src *string) bool {

	if p.TrinoConnectorTableHandle == src {
		return true
	} else if p.TrinoConnectorTableHandle == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TrinoConnectorTableHandle, *src) != 0 {
		return false
	}
	return true
}
func (p *TTrinoConnectorFileDesc) Field6DeepEqual(src *string) bool {

	if p.TrinoConnectorColumnHandles == src {
		return true
	} else if p.TrinoConnectorColumnHandles == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TrinoConnectorColumnHandles, *src) != 0 {
		return false
	}
	return true
}
func (p *TTrinoConnectorFileDesc) Field7DeepEqual(src *string) bool {

	if p.TrinoConnectorColumnMetadata == src {
		return true
	} else if p.TrinoConnectorColumnMetadata == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TrinoConnectorColumnMetadata, *src) != 0 {
		return false
	}
	return true
}
func (p *TTrinoConnectorFileDesc) Field8DeepEqual(src *string) bool {

	if p.TrinoConnectorColumnNames == src {
		return true
	} else if p.TrinoConnectorColumnNames == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TrinoConnectorColumnNames, *src) != 0 {
		return false
	}
	return true
}
func (p *TTrinoConnectorFileDesc) Field9DeepEqual(src *string) bool {

	if p.TrinoConnectorSplit == src {
		return true
	} else if p.TrinoConnectorSplit == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TrinoConnectorSplit, *src) != 0 {
		return false
	}
	return true
}
func (p *TTrinoConnectorFileDesc) Field10DeepEqual(src *string) bool {

	if p.TrinoConnectorPredicate == src {
		return true
	} else if p.TrinoConnectorPredicate == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TrinoConnectorPredicate, *src) != 0 {
		return false
	}
	return true
}
func (p *TTrinoConnectorFileDesc) Field11DeepEqual(src *string) bool {

	if p.TrinoConnectorTrascationHandle == src {
		return true
	} else if p.TrinoConnectorTrascationHandle == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TrinoConnectorTrascationHandle, *src) != 0 {
		return false
	}
	return true
}

type TMaxComputeFileDesc struct {
	PartitionSpec *string `thrift:"partition_spec,1,optional" frugal:"1,optional,string" json:"partition_spec,omitempty"`
}

func NewTMaxComputeFileDesc() *TMaxComputeFileDesc {
	return &TMaxComputeFileDesc{}
}

func (p *TMaxComputeFileDesc) InitDefault() {
}

var TMaxComputeFileDesc_PartitionSpec_DEFAULT string

func (p *TMaxComputeFileDesc) GetPartitionSpec() (v string) {
	if !p.IsSetPartitionSpec() {
		return TMaxComputeFileDesc_PartitionSpec_DEFAULT
	}
	return *p.PartitionSpec
}
func (p *TMaxComputeFileDesc) SetPartitionSpec(val *string) {
	p.PartitionSpec = val
}

var fieldIDToName_TMaxComputeFileDesc = map[int16]string{
	1: "partition_spec",
}

func (p *TMaxComputeFileDesc) IsSetPartitionSpec() bool {
	return p.PartitionSpec != nil
}

func (p *TMaxComputeFileDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMaxComputeFileDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TMaxComputeFileDesc) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PartitionSpec = _field
	return nil
}

func (p *TMaxComputeFileDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMaxComputeFileDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMaxComputeFileDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionSpec() {
		if err = oprot.WriteFieldBegin("partition_spec", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PartitionSpec); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMaxComputeFileDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMaxComputeFileDesc(%+v)", *p)

}

func (p *TMaxComputeFileDesc) DeepEqual(ano *TMaxComputeFileDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PartitionSpec) {
		return false
	}
	return true
}

func (p *TMaxComputeFileDesc) Field1DeepEqual(src *string) bool {

	if p.PartitionSpec == src {
		return true
	} else if p.PartitionSpec == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PartitionSpec, *src) != 0 {
		return false
	}
	return true
}

type THudiFileDesc struct {
	InstantTime    *string  `thrift:"instant_time,1,optional" frugal:"1,optional,string" json:"instant_time,omitempty"`
	Serde          *string  `thrift:"serde,2,optional" frugal:"2,optional,string" json:"serde,omitempty"`
	InputFormat    *string  `thrift:"input_format,3,optional" frugal:"3,optional,string" json:"input_format,omitempty"`
	BasePath       *string  `thrift:"base_path,4,optional" frugal:"4,optional,string" json:"base_path,omitempty"`
	DataFilePath   *string  `thrift:"data_file_path,5,optional" frugal:"5,optional,string" json:"data_file_path,omitempty"`
	DataFileLength *int64   `thrift:"data_file_length,6,optional" frugal:"6,optional,i64" json:"data_file_length,omitempty"`
	DeltaLogs      []string `thrift:"delta_logs,7,optional" frugal:"7,optional,list<string>" json:"delta_logs,omitempty"`
	ColumnNames    []string `thrift:"column_names,8,optional" frugal:"8,optional,list<string>" json:"column_names,omitempty"`
	ColumnTypes    []string `thrift:"column_types,9,optional" frugal:"9,optional,list<string>" json:"column_types,omitempty"`
	NestedFields   []string `thrift:"nested_fields,10,optional" frugal:"10,optional,list<string>" json:"nested_fields,omitempty"`
}

func NewTHudiFileDesc() *THudiFileDesc {
	return &THudiFileDesc{}
}

func (p *THudiFileDesc) InitDefault() {
}

var THudiFileDesc_InstantTime_DEFAULT string

func (p *THudiFileDesc) GetInstantTime() (v string) {
	if !p.IsSetInstantTime() {
		return THudiFileDesc_InstantTime_DEFAULT
	}
	return *p.InstantTime
}

var THudiFileDesc_Serde_DEFAULT string

func (p *THudiFileDesc) GetSerde() (v string) {
	if !p.IsSetSerde() {
		return THudiFileDesc_Serde_DEFAULT
	}
	return *p.Serde
}

var THudiFileDesc_InputFormat_DEFAULT string

func (p *THudiFileDesc) GetInputFormat() (v string) {
	if !p.IsSetInputFormat() {
		return THudiFileDesc_InputFormat_DEFAULT
	}
	return *p.InputFormat
}

var THudiFileDesc_BasePath_DEFAULT string

func (p *THudiFileDesc) GetBasePath() (v string) {
	if !p.IsSetBasePath() {
		return THudiFileDesc_BasePath_DEFAULT
	}
	return *p.BasePath
}

var THudiFileDesc_DataFilePath_DEFAULT string

func (p *THudiFileDesc) GetDataFilePath() (v string) {
	if !p.IsSetDataFilePath() {
		return THudiFileDesc_DataFilePath_DEFAULT
	}
	return *p.DataFilePath
}

var THudiFileDesc_DataFileLength_DEFAULT int64

func (p *THudiFileDesc) GetDataFileLength() (v int64) {
	if !p.IsSetDataFileLength() {
		return THudiFileDesc_DataFileLength_DEFAULT
	}
	return *p.DataFileLength
}

var THudiFileDesc_DeltaLogs_DEFAULT []string

func (p *THudiFileDesc) GetDeltaLogs() (v []string) {
	if !p.IsSetDeltaLogs() {
		return THudiFileDesc_DeltaLogs_DEFAULT
	}
	return p.DeltaLogs
}

var THudiFileDesc_ColumnNames_DEFAULT []string

func (p *THudiFileDesc) GetColumnNames() (v []string) {
	if !p.IsSetColumnNames() {
		return THudiFileDesc_ColumnNames_DEFAULT
	}
	return p.ColumnNames
}

var THudiFileDesc_ColumnTypes_DEFAULT []string

func (p *THudiFileDesc) GetColumnTypes() (v []string) {
	if !p.IsSetColumnTypes() {
		return THudiFileDesc_ColumnTypes_DEFAULT
	}
	return p.ColumnTypes
}

var THudiFileDesc_NestedFields_DEFAULT []string

func (p *THudiFileDesc) GetNestedFields() (v []string) {
	if !p.IsSetNestedFields() {
		return THudiFileDesc_NestedFields_DEFAULT
	}
	return p.NestedFields
}
func (p *THudiFileDesc) SetInstantTime(val *string) {
	p.InstantTime = val
}
func (p *THudiFileDesc) SetSerde(val *string) {
	p.Serde = val
}
func (p *THudiFileDesc) SetInputFormat(val *string) {
	p.InputFormat = val
}
func (p *THudiFileDesc) SetBasePath(val *string) {
	p.BasePath = val
}
func (p *THudiFileDesc) SetDataFilePath(val *string) {
	p.DataFilePath = val
}
func (p *THudiFileDesc) SetDataFileLength(val *int64) {
	p.DataFileLength = val
}
func (p *THudiFileDesc) SetDeltaLogs(val []string) {
	p.DeltaLogs = val
}
func (p *THudiFileDesc) SetColumnNames(val []string) {
	p.ColumnNames = val
}
func (p *THudiFileDesc) SetColumnTypes(val []string) {
	p.ColumnTypes = val
}
func (p *THudiFileDesc) SetNestedFields(val []string) {
	p.NestedFields = val
}

var fieldIDToName_THudiFileDesc = map[int16]string{
	1:  "instant_time",
	2:  "serde",
	3:  "input_format",
	4:  "base_path",
	5:  "data_file_path",
	6:  "data_file_length",
	7:  "delta_logs",
	8:  "column_names",
	9:  "column_types",
	10: "nested_fields",
}

func (p *THudiFileDesc) IsSetInstantTime() bool {
	return p.InstantTime != nil
}

func (p *THudiFileDesc) IsSetSerde() bool {
	return p.Serde != nil
}

func (p *THudiFileDesc) IsSetInputFormat() bool {
	return p.InputFormat != nil
}

func (p *THudiFileDesc) IsSetBasePath() bool {
	return p.BasePath != nil
}

func (p *THudiFileDesc) IsSetDataFilePath() bool {
	return p.DataFilePath != nil
}

func (p *THudiFileDesc) IsSetDataFileLength() bool {
	return p.DataFileLength != nil
}

func (p *THudiFileDesc) IsSetDeltaLogs() bool {
	return p.DeltaLogs != nil
}

func (p *THudiFileDesc) IsSetColumnNames() bool {
	return p.ColumnNames != nil
}

func (p *THudiFileDesc) IsSetColumnTypes() bool {
	return p.ColumnTypes != nil
}

func (p *THudiFileDesc) IsSetNestedFields() bool {
	return p.NestedFields != nil
}

func (p *THudiFileDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_THudiFileDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *THudiFileDesc) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InstantTime = _field
	return nil
}
func (p *THudiFileDesc) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Serde = _field
	return nil
}
func (p *THudiFileDesc) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InputFormat = _field
	return nil
}
func (p *THudiFileDesc) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BasePath = _field
	return nil
}
func (p *THudiFileDesc) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DataFilePath = _field
	return nil
}
func (p *THudiFileDesc) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DataFileLength = _field
	return nil
}
func (p *THudiFileDesc) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DeltaLogs = _field
	return nil
}
func (p *THudiFileDesc) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnNames = _field
	return nil
}
func (p *THudiFileDesc) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnTypes = _field
	return nil
}
func (p *THudiFileDesc) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.NestedFields = _field
	return nil
}

func (p *THudiFileDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("THudiFileDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *THudiFileDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInstantTime() {
		if err = oprot.WriteFieldBegin("instant_time", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.InstantTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *THudiFileDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSerde() {
		if err = oprot.WriteFieldBegin("serde", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Serde); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *THudiFileDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputFormat() {
		if err = oprot.WriteFieldBegin("input_format", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.InputFormat); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *THudiFileDesc) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBasePath() {
		if err = oprot.WriteFieldBegin("base_path", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BasePath); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *THudiFileDesc) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataFilePath() {
		if err = oprot.WriteFieldBegin("data_file_path", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DataFilePath); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *THudiFileDesc) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataFileLength() {
		if err = oprot.WriteFieldBegin("data_file_length", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DataFileLength); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *THudiFileDesc) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeltaLogs() {
		if err = oprot.WriteFieldBegin("delta_logs", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.DeltaLogs)); err != nil {
			return err
		}
		for _, v := range p.DeltaLogs {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *THudiFileDesc) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnNames() {
		if err = oprot.WriteFieldBegin("column_names", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ColumnNames)); err != nil {
			return err
		}
		for _, v := range p.ColumnNames {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *THudiFileDesc) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnTypes() {
		if err = oprot.WriteFieldBegin("column_types", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ColumnTypes)); err != nil {
			return err
		}
		for _, v := range p.ColumnTypes {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *THudiFileDesc) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetNestedFields() {
		if err = oprot.WriteFieldBegin("nested_fields", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.NestedFields)); err != nil {
			return err
		}
		for _, v := range p.NestedFields {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *THudiFileDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("THudiFileDesc(%+v)", *p)

}

func (p *THudiFileDesc) DeepEqual(ano *THudiFileDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.InstantTime) {
		return false
	}
	if !p.Field2DeepEqual(ano.Serde) {
		return false
	}
	if !p.Field3DeepEqual(ano.InputFormat) {
		return false
	}
	if !p.Field4DeepEqual(ano.BasePath) {
		return false
	}
	if !p.Field5DeepEqual(ano.DataFilePath) {
		return false
	}
	if !p.Field6DeepEqual(ano.DataFileLength) {
		return false
	}
	if !p.Field7DeepEqual(ano.DeltaLogs) {
		return false
	}
	if !p.Field8DeepEqual(ano.ColumnNames) {
		return false
	}
	if !p.Field9DeepEqual(ano.ColumnTypes) {
		return false
	}
	if !p.Field10DeepEqual(ano.NestedFields) {
		return false
	}
	return true
}

func (p *THudiFileDesc) Field1DeepEqual(src *string) bool {

	if p.InstantTime == src {
		return true
	} else if p.InstantTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.InstantTime, *src) != 0 {
		return false
	}
	return true
}
func (p *THudiFileDesc) Field2DeepEqual(src *string) bool {

	if p.Serde == src {
		return true
	} else if p.Serde == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Serde, *src) != 0 {
		return false
	}
	return true
}
func (p *THudiFileDesc) Field3DeepEqual(src *string) bool {

	if p.InputFormat == src {
		return true
	} else if p.InputFormat == nil || src == nil {
		return false
	}
	if strings.Compare(*p.InputFormat, *src) != 0 {
		return false
	}
	return true
}
func (p *THudiFileDesc) Field4DeepEqual(src *string) bool {

	if p.BasePath == src {
		return true
	} else if p.BasePath == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BasePath, *src) != 0 {
		return false
	}
	return true
}
func (p *THudiFileDesc) Field5DeepEqual(src *string) bool {

	if p.DataFilePath == src {
		return true
	} else if p.DataFilePath == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DataFilePath, *src) != 0 {
		return false
	}
	return true
}
func (p *THudiFileDesc) Field6DeepEqual(src *int64) bool {

	if p.DataFileLength == src {
		return true
	} else if p.DataFileLength == nil || src == nil {
		return false
	}
	if *p.DataFileLength != *src {
		return false
	}
	return true
}
func (p *THudiFileDesc) Field7DeepEqual(src []string) bool {

	if len(p.DeltaLogs) != len(src) {
		return false
	}
	for i, v := range p.DeltaLogs {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *THudiFileDesc) Field8DeepEqual(src []string) bool {

	if len(p.ColumnNames) != len(src) {
		return false
	}
	for i, v := range p.ColumnNames {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *THudiFileDesc) Field9DeepEqual(src []string) bool {

	if len(p.ColumnTypes) != len(src) {
		return false
	}
	for i, v := range p.ColumnTypes {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *THudiFileDesc) Field10DeepEqual(src []string) bool {

	if len(p.NestedFields) != len(src) {
		return false
	}
	for i, v := range p.NestedFields {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type TLakeSoulFileDesc struct {
	FilePaths      []string `thrift:"file_paths,1,optional" frugal:"1,optional,list<string>" json:"file_paths,omitempty"`
	PrimaryKeys    []string `thrift:"primary_keys,2,optional" frugal:"2,optional,list<string>" json:"primary_keys,omitempty"`
	PartitionDescs []string `thrift:"partition_descs,3,optional" frugal:"3,optional,list<string>" json:"partition_descs,omitempty"`
	TableSchema    *string  `thrift:"table_schema,4,optional" frugal:"4,optional,string" json:"table_schema,omitempty"`
	Options        *string  `thrift:"options,5,optional" frugal:"5,optional,string" json:"options,omitempty"`
}

func NewTLakeSoulFileDesc() *TLakeSoulFileDesc {
	return &TLakeSoulFileDesc{}
}

func (p *TLakeSoulFileDesc) InitDefault() {
}

var TLakeSoulFileDesc_FilePaths_DEFAULT []string

func (p *TLakeSoulFileDesc) GetFilePaths() (v []string) {
	if !p.IsSetFilePaths() {
		return TLakeSoulFileDesc_FilePaths_DEFAULT
	}
	return p.FilePaths
}

var TLakeSoulFileDesc_PrimaryKeys_DEFAULT []string

func (p *TLakeSoulFileDesc) GetPrimaryKeys() (v []string) {
	if !p.IsSetPrimaryKeys() {
		return TLakeSoulFileDesc_PrimaryKeys_DEFAULT
	}
	return p.PrimaryKeys
}

var TLakeSoulFileDesc_PartitionDescs_DEFAULT []string

func (p *TLakeSoulFileDesc) GetPartitionDescs() (v []string) {
	if !p.IsSetPartitionDescs() {
		return TLakeSoulFileDesc_PartitionDescs_DEFAULT
	}
	return p.PartitionDescs
}

var TLakeSoulFileDesc_TableSchema_DEFAULT string

func (p *TLakeSoulFileDesc) GetTableSchema() (v string) {
	if !p.IsSetTableSchema() {
		return TLakeSoulFileDesc_TableSchema_DEFAULT
	}
	return *p.TableSchema
}

var TLakeSoulFileDesc_Options_DEFAULT string

func (p *TLakeSoulFileDesc) GetOptions() (v string) {
	if !p.IsSetOptions() {
		return TLakeSoulFileDesc_Options_DEFAULT
	}
	return *p.Options
}
func (p *TLakeSoulFileDesc) SetFilePaths(val []string) {
	p.FilePaths = val
}
func (p *TLakeSoulFileDesc) SetPrimaryKeys(val []string) {
	p.PrimaryKeys = val
}
func (p *TLakeSoulFileDesc) SetPartitionDescs(val []string) {
	p.PartitionDescs = val
}
func (p *TLakeSoulFileDesc) SetTableSchema(val *string) {
	p.TableSchema = val
}
func (p *TLakeSoulFileDesc) SetOptions(val *string) {
	p.Options = val
}

var fieldIDToName_TLakeSoulFileDesc = map[int16]string{
	1: "file_paths",
	2: "primary_keys",
	3: "partition_descs",
	4: "table_schema",
	5: "options",
}

func (p *TLakeSoulFileDesc) IsSetFilePaths() bool {
	return p.FilePaths != nil
}

func (p *TLakeSoulFileDesc) IsSetPrimaryKeys() bool {
	return p.PrimaryKeys != nil
}

func (p *TLakeSoulFileDesc) IsSetPartitionDescs() bool {
	return p.PartitionDescs != nil
}

func (p *TLakeSoulFileDesc) IsSetTableSchema() bool {
	return p.TableSchema != nil
}

func (p *TLakeSoulFileDesc) IsSetOptions() bool {
	return p.Options != nil
}

func (p *TLakeSoulFileDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TLakeSoulFileDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TLakeSoulFileDesc) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FilePaths = _field
	return nil
}
func (p *TLakeSoulFileDesc) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PrimaryKeys = _field
	return nil
}
func (p *TLakeSoulFileDesc) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PartitionDescs = _field
	return nil
}
func (p *TLakeSoulFileDesc) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableSchema = _field
	return nil
}
func (p *TLakeSoulFileDesc) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Options = _field
	return nil
}

func (p *TLakeSoulFileDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TLakeSoulFileDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TLakeSoulFileDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilePaths() {
		if err = oprot.WriteFieldBegin("file_paths", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.FilePaths)); err != nil {
			return err
		}
		for _, v := range p.FilePaths {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TLakeSoulFileDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrimaryKeys() {
		if err = oprot.WriteFieldBegin("primary_keys", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PrimaryKeys)); err != nil {
			return err
		}
		for _, v := range p.PrimaryKeys {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TLakeSoulFileDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionDescs() {
		if err = oprot.WriteFieldBegin("partition_descs", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PartitionDescs)); err != nil {
			return err
		}
		for _, v := range p.PartitionDescs {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TLakeSoulFileDesc) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableSchema() {
		if err = oprot.WriteFieldBegin("table_schema", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TableSchema); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TLakeSoulFileDesc) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOptions() {
		if err = oprot.WriteFieldBegin("options", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Options); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TLakeSoulFileDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLakeSoulFileDesc(%+v)", *p)

}

func (p *TLakeSoulFileDesc) DeepEqual(ano *TLakeSoulFileDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FilePaths) {
		return false
	}
	if !p.Field2DeepEqual(ano.PrimaryKeys) {
		return false
	}
	if !p.Field3DeepEqual(ano.PartitionDescs) {
		return false
	}
	if !p.Field4DeepEqual(ano.TableSchema) {
		return false
	}
	if !p.Field5DeepEqual(ano.Options) {
		return false
	}
	return true
}

func (p *TLakeSoulFileDesc) Field1DeepEqual(src []string) bool {

	if len(p.FilePaths) != len(src) {
		return false
	}
	for i, v := range p.FilePaths {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TLakeSoulFileDesc) Field2DeepEqual(src []string) bool {

	if len(p.PrimaryKeys) != len(src) {
		return false
	}
	for i, v := range p.PrimaryKeys {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TLakeSoulFileDesc) Field3DeepEqual(src []string) bool {

	if len(p.PartitionDescs) != len(src) {
		return false
	}
	for i, v := range p.PartitionDescs {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TLakeSoulFileDesc) Field4DeepEqual(src *string) bool {

	if p.TableSchema == src {
		return true
	} else if p.TableSchema == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TableSchema, *src) != 0 {
		return false
	}
	return true
}
func (p *TLakeSoulFileDesc) Field5DeepEqual(src *string) bool {

	if p.Options == src {
		return true
	} else if p.Options == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Options, *src) != 0 {
		return false
	}
	return true
}

type TTransactionalHiveDeleteDeltaDesc struct {
	DirectoryLocation *string  `thrift:"directory_location,1,optional" frugal:"1,optional,string" json:"directory_location,omitempty"`
	FileNames         []string `thrift:"file_names,2,optional" frugal:"2,optional,list<string>" json:"file_names,omitempty"`
}

func NewTTransactionalHiveDeleteDeltaDesc() *TTransactionalHiveDeleteDeltaDesc {
	return &TTransactionalHiveDeleteDeltaDesc{}
}

func (p *TTransactionalHiveDeleteDeltaDesc) InitDefault() {
}

var TTransactionalHiveDeleteDeltaDesc_DirectoryLocation_DEFAULT string

func (p *TTransactionalHiveDeleteDeltaDesc) GetDirectoryLocation() (v string) {
	if !p.IsSetDirectoryLocation() {
		return TTransactionalHiveDeleteDeltaDesc_DirectoryLocation_DEFAULT
	}
	return *p.DirectoryLocation
}

var TTransactionalHiveDeleteDeltaDesc_FileNames_DEFAULT []string

func (p *TTransactionalHiveDeleteDeltaDesc) GetFileNames() (v []string) {
	if !p.IsSetFileNames() {
		return TTransactionalHiveDeleteDeltaDesc_FileNames_DEFAULT
	}
	return p.FileNames
}
func (p *TTransactionalHiveDeleteDeltaDesc) SetDirectoryLocation(val *string) {
	p.DirectoryLocation = val
}
func (p *TTransactionalHiveDeleteDeltaDesc) SetFileNames(val []string) {
	p.FileNames = val
}

var fieldIDToName_TTransactionalHiveDeleteDeltaDesc = map[int16]string{
	1: "directory_location",
	2: "file_names",
}

func (p *TTransactionalHiveDeleteDeltaDesc) IsSetDirectoryLocation() bool {
	return p.DirectoryLocation != nil
}

func (p *TTransactionalHiveDeleteDeltaDesc) IsSetFileNames() bool {
	return p.FileNames != nil
}

func (p *TTransactionalHiveDeleteDeltaDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTransactionalHiveDeleteDeltaDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTransactionalHiveDeleteDeltaDesc) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DirectoryLocation = _field
	return nil
}
func (p *TTransactionalHiveDeleteDeltaDesc) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FileNames = _field
	return nil
}

func (p *TTransactionalHiveDeleteDeltaDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTransactionalHiveDeleteDeltaDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTransactionalHiveDeleteDeltaDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDirectoryLocation() {
		if err = oprot.WriteFieldBegin("directory_location", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DirectoryLocation); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTransactionalHiveDeleteDeltaDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileNames() {
		if err = oprot.WriteFieldBegin("file_names", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.FileNames)); err != nil {
			return err
		}
		for _, v := range p.FileNames {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTransactionalHiveDeleteDeltaDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTransactionalHiveDeleteDeltaDesc(%+v)", *p)

}

func (p *TTransactionalHiveDeleteDeltaDesc) DeepEqual(ano *TTransactionalHiveDeleteDeltaDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DirectoryLocation) {
		return false
	}
	if !p.Field2DeepEqual(ano.FileNames) {
		return false
	}
	return true
}

func (p *TTransactionalHiveDeleteDeltaDesc) Field1DeepEqual(src *string) bool {

	if p.DirectoryLocation == src {
		return true
	} else if p.DirectoryLocation == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DirectoryLocation, *src) != 0 {
		return false
	}
	return true
}
func (p *TTransactionalHiveDeleteDeltaDesc) Field2DeepEqual(src []string) bool {

	if len(p.FileNames) != len(src) {
		return false
	}
	for i, v := range p.FileNames {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type TTransactionalHiveDesc struct {
	Partition    *string                              `thrift:"partition,1,optional" frugal:"1,optional,string" json:"partition,omitempty"`
	DeleteDeltas []*TTransactionalHiveDeleteDeltaDesc `thrift:"delete_deltas,2,optional" frugal:"2,optional,list<TTransactionalHiveDeleteDeltaDesc>" json:"delete_deltas,omitempty"`
}

func NewTTransactionalHiveDesc() *TTransactionalHiveDesc {
	return &TTransactionalHiveDesc{}
}

func (p *TTransactionalHiveDesc) InitDefault() {
}

var TTransactionalHiveDesc_Partition_DEFAULT string

func (p *TTransactionalHiveDesc) GetPartition() (v string) {
	if !p.IsSetPartition() {
		return TTransactionalHiveDesc_Partition_DEFAULT
	}
	return *p.Partition
}

var TTransactionalHiveDesc_DeleteDeltas_DEFAULT []*TTransactionalHiveDeleteDeltaDesc

func (p *TTransactionalHiveDesc) GetDeleteDeltas() (v []*TTransactionalHiveDeleteDeltaDesc) {
	if !p.IsSetDeleteDeltas() {
		return TTransactionalHiveDesc_DeleteDeltas_DEFAULT
	}
	return p.DeleteDeltas
}
func (p *TTransactionalHiveDesc) SetPartition(val *string) {
	p.Partition = val
}
func (p *TTransactionalHiveDesc) SetDeleteDeltas(val []*TTransactionalHiveDeleteDeltaDesc) {
	p.DeleteDeltas = val
}

var fieldIDToName_TTransactionalHiveDesc = map[int16]string{
	1: "partition",
	2: "delete_deltas",
}

func (p *TTransactionalHiveDesc) IsSetPartition() bool {
	return p.Partition != nil
}

func (p *TTransactionalHiveDesc) IsSetDeleteDeltas() bool {
	return p.DeleteDeltas != nil
}

func (p *TTransactionalHiveDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTransactionalHiveDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTransactionalHiveDesc) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Partition = _field
	return nil
}
func (p *TTransactionalHiveDesc) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTransactionalHiveDeleteDeltaDesc, 0, size)
	values := make([]TTransactionalHiveDeleteDeltaDesc, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DeleteDeltas = _field
	return nil
}

func (p *TTransactionalHiveDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTransactionalHiveDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTransactionalHiveDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartition() {
		if err = oprot.WriteFieldBegin("partition", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Partition); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTransactionalHiveDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleteDeltas() {
		if err = oprot.WriteFieldBegin("delete_deltas", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DeleteDeltas)); err != nil {
			return err
		}
		for _, v := range p.DeleteDeltas {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTransactionalHiveDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTransactionalHiveDesc(%+v)", *p)

}

func (p *TTransactionalHiveDesc) DeepEqual(ano *TTransactionalHiveDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Partition) {
		return false
	}
	if !p.Field2DeepEqual(ano.DeleteDeltas) {
		return false
	}
	return true
}

func (p *TTransactionalHiveDesc) Field1DeepEqual(src *string) bool {

	if p.Partition == src {
		return true
	} else if p.Partition == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Partition, *src) != 0 {
		return false
	}
	return true
}
func (p *TTransactionalHiveDesc) Field2DeepEqual(src []*TTransactionalHiveDeleteDeltaDesc) bool {

	if len(p.DeleteDeltas) != len(src) {
		return false
	}
	for i, v := range p.DeleteDeltas {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TTableFormatFileDesc struct {
	TableFormatType         *string                  `thrift:"table_format_type,1,optional" frugal:"1,optional,string" json:"table_format_type,omitempty"`
	IcebergParams           *TIcebergFileDesc        `thrift:"iceberg_params,2,optional" frugal:"2,optional,TIcebergFileDesc" json:"iceberg_params,omitempty"`
	HudiParams              *THudiFileDesc           `thrift:"hudi_params,3,optional" frugal:"3,optional,THudiFileDesc" json:"hudi_params,omitempty"`
	PaimonParams            *TPaimonFileDesc         `thrift:"paimon_params,4,optional" frugal:"4,optional,TPaimonFileDesc" json:"paimon_params,omitempty"`
	TransactionalHiveParams *TTransactionalHiveDesc  `thrift:"transactional_hive_params,5,optional" frugal:"5,optional,TTransactionalHiveDesc" json:"transactional_hive_params,omitempty"`
	MaxComputeParams        *TMaxComputeFileDesc     `thrift:"max_compute_params,6,optional" frugal:"6,optional,TMaxComputeFileDesc" json:"max_compute_params,omitempty"`
	TrinoConnectorParams    *TTrinoConnectorFileDesc `thrift:"trino_connector_params,7,optional" frugal:"7,optional,TTrinoConnectorFileDesc" json:"trino_connector_params,omitempty"`
	LakesoulParams          *TLakeSoulFileDesc       `thrift:"lakesoul_params,8,optional" frugal:"8,optional,TLakeSoulFileDesc" json:"lakesoul_params,omitempty"`
}

func NewTTableFormatFileDesc() *TTableFormatFileDesc {
	return &TTableFormatFileDesc{}
}

func (p *TTableFormatFileDesc) InitDefault() {
}

var TTableFormatFileDesc_TableFormatType_DEFAULT string

func (p *TTableFormatFileDesc) GetTableFormatType() (v string) {
	if !p.IsSetTableFormatType() {
		return TTableFormatFileDesc_TableFormatType_DEFAULT
	}
	return *p.TableFormatType
}

var TTableFormatFileDesc_IcebergParams_DEFAULT *TIcebergFileDesc

func (p *TTableFormatFileDesc) GetIcebergParams() (v *TIcebergFileDesc) {
	if !p.IsSetIcebergParams() {
		return TTableFormatFileDesc_IcebergParams_DEFAULT
	}
	return p.IcebergParams
}

var TTableFormatFileDesc_HudiParams_DEFAULT *THudiFileDesc

func (p *TTableFormatFileDesc) GetHudiParams() (v *THudiFileDesc) {
	if !p.IsSetHudiParams() {
		return TTableFormatFileDesc_HudiParams_DEFAULT
	}
	return p.HudiParams
}

var TTableFormatFileDesc_PaimonParams_DEFAULT *TPaimonFileDesc

func (p *TTableFormatFileDesc) GetPaimonParams() (v *TPaimonFileDesc) {
	if !p.IsSetPaimonParams() {
		return TTableFormatFileDesc_PaimonParams_DEFAULT
	}
	return p.PaimonParams
}

var TTableFormatFileDesc_TransactionalHiveParams_DEFAULT *TTransactionalHiveDesc

func (p *TTableFormatFileDesc) GetTransactionalHiveParams() (v *TTransactionalHiveDesc) {
	if !p.IsSetTransactionalHiveParams() {
		return TTableFormatFileDesc_TransactionalHiveParams_DEFAULT
	}
	return p.TransactionalHiveParams
}

var TTableFormatFileDesc_MaxComputeParams_DEFAULT *TMaxComputeFileDesc

func (p *TTableFormatFileDesc) GetMaxComputeParams() (v *TMaxComputeFileDesc) {
	if !p.IsSetMaxComputeParams() {
		return TTableFormatFileDesc_MaxComputeParams_DEFAULT
	}
	return p.MaxComputeParams
}

var TTableFormatFileDesc_TrinoConnectorParams_DEFAULT *TTrinoConnectorFileDesc

func (p *TTableFormatFileDesc) GetTrinoConnectorParams() (v *TTrinoConnectorFileDesc) {
	if !p.IsSetTrinoConnectorParams() {
		return TTableFormatFileDesc_TrinoConnectorParams_DEFAULT
	}
	return p.TrinoConnectorParams
}

var TTableFormatFileDesc_LakesoulParams_DEFAULT *TLakeSoulFileDesc

func (p *TTableFormatFileDesc) GetLakesoulParams() (v *TLakeSoulFileDesc) {
	if !p.IsSetLakesoulParams() {
		return TTableFormatFileDesc_LakesoulParams_DEFAULT
	}
	return p.LakesoulParams
}
func (p *TTableFormatFileDesc) SetTableFormatType(val *string) {
	p.TableFormatType = val
}
func (p *TTableFormatFileDesc) SetIcebergParams(val *TIcebergFileDesc) {
	p.IcebergParams = val
}
func (p *TTableFormatFileDesc) SetHudiParams(val *THudiFileDesc) {
	p.HudiParams = val
}
func (p *TTableFormatFileDesc) SetPaimonParams(val *TPaimonFileDesc) {
	p.PaimonParams = val
}
func (p *TTableFormatFileDesc) SetTransactionalHiveParams(val *TTransactionalHiveDesc) {
	p.TransactionalHiveParams = val
}
func (p *TTableFormatFileDesc) SetMaxComputeParams(val *TMaxComputeFileDesc) {
	p.MaxComputeParams = val
}
func (p *TTableFormatFileDesc) SetTrinoConnectorParams(val *TTrinoConnectorFileDesc) {
	p.TrinoConnectorParams = val
}
func (p *TTableFormatFileDesc) SetLakesoulParams(val *TLakeSoulFileDesc) {
	p.LakesoulParams = val
}

var fieldIDToName_TTableFormatFileDesc = map[int16]string{
	1: "table_format_type",
	2: "iceberg_params",
	3: "hudi_params",
	4: "paimon_params",
	5: "transactional_hive_params",
	6: "max_compute_params",
	7: "trino_connector_params",
	8: "lakesoul_params",
}

func (p *TTableFormatFileDesc) IsSetTableFormatType() bool {
	return p.TableFormatType != nil
}

func (p *TTableFormatFileDesc) IsSetIcebergParams() bool {
	return p.IcebergParams != nil
}

func (p *TTableFormatFileDesc) IsSetHudiParams() bool {
	return p.HudiParams != nil
}

func (p *TTableFormatFileDesc) IsSetPaimonParams() bool {
	return p.PaimonParams != nil
}

func (p *TTableFormatFileDesc) IsSetTransactionalHiveParams() bool {
	return p.TransactionalHiveParams != nil
}

func (p *TTableFormatFileDesc) IsSetMaxComputeParams() bool {
	return p.MaxComputeParams != nil
}

func (p *TTableFormatFileDesc) IsSetTrinoConnectorParams() bool {
	return p.TrinoConnectorParams != nil
}

func (p *TTableFormatFileDesc) IsSetLakesoulParams() bool {
	return p.LakesoulParams != nil
}

func (p *TTableFormatFileDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTableFormatFileDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTableFormatFileDesc) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableFormatType = _field
	return nil
}
func (p *TTableFormatFileDesc) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTIcebergFileDesc()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.IcebergParams = _field
	return nil
}
func (p *TTableFormatFileDesc) ReadField3(iprot thrift.TProtocol) error {
	_field := NewTHudiFileDesc()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.HudiParams = _field
	return nil
}
func (p *TTableFormatFileDesc) ReadField4(iprot thrift.TProtocol) error {
	_field := NewTPaimonFileDesc()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PaimonParams = _field
	return nil
}
func (p *TTableFormatFileDesc) ReadField5(iprot thrift.TProtocol) error {
	_field := NewTTransactionalHiveDesc()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TransactionalHiveParams = _field
	return nil
}
func (p *TTableFormatFileDesc) ReadField6(iprot thrift.TProtocol) error {
	_field := NewTMaxComputeFileDesc()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MaxComputeParams = _field
	return nil
}
func (p *TTableFormatFileDesc) ReadField7(iprot thrift.TProtocol) error {
	_field := NewTTrinoConnectorFileDesc()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TrinoConnectorParams = _field
	return nil
}
func (p *TTableFormatFileDesc) ReadField8(iprot thrift.TProtocol) error {
	_field := NewTLakeSoulFileDesc()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.LakesoulParams = _field
	return nil
}

func (p *TTableFormatFileDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTableFormatFileDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTableFormatFileDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableFormatType() {
		if err = oprot.WriteFieldBegin("table_format_type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TableFormatType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTableFormatFileDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIcebergParams() {
		if err = oprot.WriteFieldBegin("iceberg_params", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.IcebergParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTableFormatFileDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetHudiParams() {
		if err = oprot.WriteFieldBegin("hudi_params", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.HudiParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTableFormatFileDesc) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaimonParams() {
		if err = oprot.WriteFieldBegin("paimon_params", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PaimonParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TTableFormatFileDesc) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransactionalHiveParams() {
		if err = oprot.WriteFieldBegin("transactional_hive_params", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TransactionalHiveParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TTableFormatFileDesc) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxComputeParams() {
		if err = oprot.WriteFieldBegin("max_compute_params", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MaxComputeParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TTableFormatFileDesc) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrinoConnectorParams() {
		if err = oprot.WriteFieldBegin("trino_connector_params", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TrinoConnectorParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TTableFormatFileDesc) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetLakesoulParams() {
		if err = oprot.WriteFieldBegin("lakesoul_params", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.LakesoulParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TTableFormatFileDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTableFormatFileDesc(%+v)", *p)

}

func (p *TTableFormatFileDesc) DeepEqual(ano *TTableFormatFileDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TableFormatType) {
		return false
	}
	if !p.Field2DeepEqual(ano.IcebergParams) {
		return false
	}
	if !p.Field3DeepEqual(ano.HudiParams) {
		return false
	}
	if !p.Field4DeepEqual(ano.PaimonParams) {
		return false
	}
	if !p.Field5DeepEqual(ano.TransactionalHiveParams) {
		return false
	}
	if !p.Field6DeepEqual(ano.MaxComputeParams) {
		return false
	}
	if !p.Field7DeepEqual(ano.TrinoConnectorParams) {
		return false
	}
	if !p.Field8DeepEqual(ano.LakesoulParams) {
		return false
	}
	return true
}

func (p *TTableFormatFileDesc) Field1DeepEqual(src *string) bool {

	if p.TableFormatType == src {
		return true
	} else if p.TableFormatType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TableFormatType, *src) != 0 {
		return false
	}
	return true
}
func (p *TTableFormatFileDesc) Field2DeepEqual(src *TIcebergFileDesc) bool {

	if !p.IcebergParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTableFormatFileDesc) Field3DeepEqual(src *THudiFileDesc) bool {

	if !p.HudiParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTableFormatFileDesc) Field4DeepEqual(src *TPaimonFileDesc) bool {

	if !p.PaimonParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTableFormatFileDesc) Field5DeepEqual(src *TTransactionalHiveDesc) bool {

	if !p.TransactionalHiveParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTableFormatFileDesc) Field6DeepEqual(src *TMaxComputeFileDesc) bool {

	if !p.MaxComputeParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTableFormatFileDesc) Field7DeepEqual(src *TTrinoConnectorFileDesc) bool {

	if !p.TrinoConnectorParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTableFormatFileDesc) Field8DeepEqual(src *TLakeSoulFileDesc) bool {

	if !p.LakesoulParams.DeepEqual(src) {
		return false
	}
	return true
}

type TFileScanRangeParams struct {
	FileType                    *types.TFileType                `thrift:"file_type,1,optional" frugal:"1,optional,TFileType" json:"file_type,omitempty"`
	FormatType                  *TFileFormatType                `thrift:"format_type,2,optional" frugal:"2,optional,TFileFormatType" json:"format_type,omitempty"`
	CompressType                *TFileCompressType              `thrift:"compress_type,3,optional" frugal:"3,optional,TFileCompressType" json:"compress_type,omitempty"`
	SrcTupleId                  *types.TTupleId                 `thrift:"src_tuple_id,4,optional" frugal:"4,optional,i32" json:"src_tuple_id,omitempty"`
	DestTupleId                 *types.TTupleId                 `thrift:"dest_tuple_id,5,optional" frugal:"5,optional,i32" json:"dest_tuple_id,omitempty"`
	NumOfColumnsFromFile        *int32                          `thrift:"num_of_columns_from_file,6,optional" frugal:"6,optional,i32" json:"num_of_columns_from_file,omitempty"`
	RequiredSlots               []*TFileScanSlotInfo            `thrift:"required_slots,7,optional" frugal:"7,optional,list<TFileScanSlotInfo>" json:"required_slots,omitempty"`
	HdfsParams                  *THdfsParams                    `thrift:"hdfs_params,8,optional" frugal:"8,optional,THdfsParams" json:"hdfs_params,omitempty"`
	Properties                  map[string]string               `thrift:"properties,9,optional" frugal:"9,optional,map<string:string>" json:"properties,omitempty"`
	ExprOfDestSlot              map[types.TSlotId]*exprs.TExpr  `thrift:"expr_of_dest_slot,10,optional" frugal:"10,optional,map<i32:exprs.TExpr>" json:"expr_of_dest_slot,omitempty"`
	DefaultValueOfSrcSlot       map[types.TSlotId]*exprs.TExpr  `thrift:"default_value_of_src_slot,11,optional" frugal:"11,optional,map<i32:exprs.TExpr>" json:"default_value_of_src_slot,omitempty"`
	DestSidToSrcSidWithoutTrans map[types.TSlotId]types.TSlotId `thrift:"dest_sid_to_src_sid_without_trans,12,optional" frugal:"12,optional,map<i32:i32>" json:"dest_sid_to_src_sid_without_trans,omitempty"`
	StrictMode                  *bool                           `thrift:"strict_mode,13,optional" frugal:"13,optional,bool" json:"strict_mode,omitempty"`
	BrokerAddresses             []*types.TNetworkAddress        `thrift:"broker_addresses,14,optional" frugal:"14,optional,list<types.TNetworkAddress>" json:"broker_addresses,omitempty"`
	FileAttributes              *TFileAttributes                `thrift:"file_attributes,15,optional" frugal:"15,optional,TFileAttributes" json:"file_attributes,omitempty"`
	PreFilterExprs              *exprs.TExpr                    `thrift:"pre_filter_exprs,16,optional" frugal:"16,optional,exprs.TExpr" json:"pre_filter_exprs,omitempty"`
	TableFormatParams           *TTableFormatFileDesc           `thrift:"table_format_params,17,optional" frugal:"17,optional,TTableFormatFileDesc" json:"table_format_params,omitempty"`
	ColumnIdxs                  []int32                         `thrift:"column_idxs,18,optional" frugal:"18,optional,list<i32>" json:"column_idxs,omitempty"`
	SlotNameToSchemaPos         map[string]int32                `thrift:"slot_name_to_schema_pos,19,optional" frugal:"19,optional,map<string:i32>" json:"slot_name_to_schema_pos,omitempty"`
	PreFilterExprsList          []*exprs.TExpr                  `thrift:"pre_filter_exprs_list,20,optional" frugal:"20,optional,list<exprs.TExpr>" json:"pre_filter_exprs_list,omitempty"`
	LoadId                      *types.TUniqueId                `thrift:"load_id,21,optional" frugal:"21,optional,types.TUniqueId" json:"load_id,omitempty"`
	TextSerdeType               *TTextSerdeType                 `thrift:"text_serde_type,22,optional" frugal:"22,optional,TTextSerdeType" json:"text_serde_type,omitempty"`
}

func NewTFileScanRangeParams() *TFileScanRangeParams {
	return &TFileScanRangeParams{}
}

func (p *TFileScanRangeParams) InitDefault() {
}

var TFileScanRangeParams_FileType_DEFAULT types.TFileType

func (p *TFileScanRangeParams) GetFileType() (v types.TFileType) {
	if !p.IsSetFileType() {
		return TFileScanRangeParams_FileType_DEFAULT
	}
	return *p.FileType
}

var TFileScanRangeParams_FormatType_DEFAULT TFileFormatType

func (p *TFileScanRangeParams) GetFormatType() (v TFileFormatType) {
	if !p.IsSetFormatType() {
		return TFileScanRangeParams_FormatType_DEFAULT
	}
	return *p.FormatType
}

var TFileScanRangeParams_CompressType_DEFAULT TFileCompressType

func (p *TFileScanRangeParams) GetCompressType() (v TFileCompressType) {
	if !p.IsSetCompressType() {
		return TFileScanRangeParams_CompressType_DEFAULT
	}
	return *p.CompressType
}

var TFileScanRangeParams_SrcTupleId_DEFAULT types.TTupleId

func (p *TFileScanRangeParams) GetSrcTupleId() (v types.TTupleId) {
	if !p.IsSetSrcTupleId() {
		return TFileScanRangeParams_SrcTupleId_DEFAULT
	}
	return *p.SrcTupleId
}

var TFileScanRangeParams_DestTupleId_DEFAULT types.TTupleId

func (p *TFileScanRangeParams) GetDestTupleId() (v types.TTupleId) {
	if !p.IsSetDestTupleId() {
		return TFileScanRangeParams_DestTupleId_DEFAULT
	}
	return *p.DestTupleId
}

var TFileScanRangeParams_NumOfColumnsFromFile_DEFAULT int32

func (p *TFileScanRangeParams) GetNumOfColumnsFromFile() (v int32) {
	if !p.IsSetNumOfColumnsFromFile() {
		return TFileScanRangeParams_NumOfColumnsFromFile_DEFAULT
	}
	return *p.NumOfColumnsFromFile
}

var TFileScanRangeParams_RequiredSlots_DEFAULT []*TFileScanSlotInfo

func (p *TFileScanRangeParams) GetRequiredSlots() (v []*TFileScanSlotInfo) {
	if !p.IsSetRequiredSlots() {
		return TFileScanRangeParams_RequiredSlots_DEFAULT
	}
	return p.RequiredSlots
}

var TFileScanRangeParams_HdfsParams_DEFAULT *THdfsParams

func (p *TFileScanRangeParams) GetHdfsParams() (v *THdfsParams) {
	if !p.IsSetHdfsParams() {
		return TFileScanRangeParams_HdfsParams_DEFAULT
	}
	return p.HdfsParams
}

var TFileScanRangeParams_Properties_DEFAULT map[string]string

func (p *TFileScanRangeParams) GetProperties() (v map[string]string) {
	if !p.IsSetProperties() {
		return TFileScanRangeParams_Properties_DEFAULT
	}
	return p.Properties
}

var TFileScanRangeParams_ExprOfDestSlot_DEFAULT map[types.TSlotId]*exprs.TExpr

func (p *TFileScanRangeParams) GetExprOfDestSlot() (v map[types.TSlotId]*exprs.TExpr) {
	if !p.IsSetExprOfDestSlot() {
		return TFileScanRangeParams_ExprOfDestSlot_DEFAULT
	}
	return p.ExprOfDestSlot
}

var TFileScanRangeParams_DefaultValueOfSrcSlot_DEFAULT map[types.TSlotId]*exprs.TExpr

func (p *TFileScanRangeParams) GetDefaultValueOfSrcSlot() (v map[types.TSlotId]*exprs.TExpr) {
	if !p.IsSetDefaultValueOfSrcSlot() {
		return TFileScanRangeParams_DefaultValueOfSrcSlot_DEFAULT
	}
	return p.DefaultValueOfSrcSlot
}

var TFileScanRangeParams_DestSidToSrcSidWithoutTrans_DEFAULT map[types.TSlotId]types.TSlotId

func (p *TFileScanRangeParams) GetDestSidToSrcSidWithoutTrans() (v map[types.TSlotId]types.TSlotId) {
	if !p.IsSetDestSidToSrcSidWithoutTrans() {
		return TFileScanRangeParams_DestSidToSrcSidWithoutTrans_DEFAULT
	}
	return p.DestSidToSrcSidWithoutTrans
}

var TFileScanRangeParams_StrictMode_DEFAULT bool

func (p *TFileScanRangeParams) GetStrictMode() (v bool) {
	if !p.IsSetStrictMode() {
		return TFileScanRangeParams_StrictMode_DEFAULT
	}
	return *p.StrictMode
}

var TFileScanRangeParams_BrokerAddresses_DEFAULT []*types.TNetworkAddress

func (p *TFileScanRangeParams) GetBrokerAddresses() (v []*types.TNetworkAddress) {
	if !p.IsSetBrokerAddresses() {
		return TFileScanRangeParams_BrokerAddresses_DEFAULT
	}
	return p.BrokerAddresses
}

var TFileScanRangeParams_FileAttributes_DEFAULT *TFileAttributes

func (p *TFileScanRangeParams) GetFileAttributes() (v *TFileAttributes) {
	if !p.IsSetFileAttributes() {
		return TFileScanRangeParams_FileAttributes_DEFAULT
	}
	return p.FileAttributes
}

var TFileScanRangeParams_PreFilterExprs_DEFAULT *exprs.TExpr

func (p *TFileScanRangeParams) GetPreFilterExprs() (v *exprs.TExpr) {
	if !p.IsSetPreFilterExprs() {
		return TFileScanRangeParams_PreFilterExprs_DEFAULT
	}
	return p.PreFilterExprs
}

var TFileScanRangeParams_TableFormatParams_DEFAULT *TTableFormatFileDesc

func (p *TFileScanRangeParams) GetTableFormatParams() (v *TTableFormatFileDesc) {
	if !p.IsSetTableFormatParams() {
		return TFileScanRangeParams_TableFormatParams_DEFAULT
	}
	return p.TableFormatParams
}

var TFileScanRangeParams_ColumnIdxs_DEFAULT []int32

func (p *TFileScanRangeParams) GetColumnIdxs() (v []int32) {
	if !p.IsSetColumnIdxs() {
		return TFileScanRangeParams_ColumnIdxs_DEFAULT
	}
	return p.ColumnIdxs
}

var TFileScanRangeParams_SlotNameToSchemaPos_DEFAULT map[string]int32

func (p *TFileScanRangeParams) GetSlotNameToSchemaPos() (v map[string]int32) {
	if !p.IsSetSlotNameToSchemaPos() {
		return TFileScanRangeParams_SlotNameToSchemaPos_DEFAULT
	}
	return p.SlotNameToSchemaPos
}

var TFileScanRangeParams_PreFilterExprsList_DEFAULT []*exprs.TExpr

func (p *TFileScanRangeParams) GetPreFilterExprsList() (v []*exprs.TExpr) {
	if !p.IsSetPreFilterExprsList() {
		return TFileScanRangeParams_PreFilterExprsList_DEFAULT
	}
	return p.PreFilterExprsList
}

var TFileScanRangeParams_LoadId_DEFAULT *types.TUniqueId

func (p *TFileScanRangeParams) GetLoadId() (v *types.TUniqueId) {
	if !p.IsSetLoadId() {
		return TFileScanRangeParams_LoadId_DEFAULT
	}
	return p.LoadId
}

var TFileScanRangeParams_TextSerdeType_DEFAULT TTextSerdeType

func (p *TFileScanRangeParams) GetTextSerdeType() (v TTextSerdeType) {
	if !p.IsSetTextSerdeType() {
		return TFileScanRangeParams_TextSerdeType_DEFAULT
	}
	return *p.TextSerdeType
}
func (p *TFileScanRangeParams) SetFileType(val *types.TFileType) {
	p.FileType = val
}
func (p *TFileScanRangeParams) SetFormatType(val *TFileFormatType) {
	p.FormatType = val
}
func (p *TFileScanRangeParams) SetCompressType(val *TFileCompressType) {
	p.CompressType = val
}
func (p *TFileScanRangeParams) SetSrcTupleId(val *types.TTupleId) {
	p.SrcTupleId = val
}
func (p *TFileScanRangeParams) SetDestTupleId(val *types.TTupleId) {
	p.DestTupleId = val
}
func (p *TFileScanRangeParams) SetNumOfColumnsFromFile(val *int32) {
	p.NumOfColumnsFromFile = val
}
func (p *TFileScanRangeParams) SetRequiredSlots(val []*TFileScanSlotInfo) {
	p.RequiredSlots = val
}
func (p *TFileScanRangeParams) SetHdfsParams(val *THdfsParams) {
	p.HdfsParams = val
}
func (p *TFileScanRangeParams) SetProperties(val map[string]string) {
	p.Properties = val
}
func (p *TFileScanRangeParams) SetExprOfDestSlot(val map[types.TSlotId]*exprs.TExpr) {
	p.ExprOfDestSlot = val
}
func (p *TFileScanRangeParams) SetDefaultValueOfSrcSlot(val map[types.TSlotId]*exprs.TExpr) {
	p.DefaultValueOfSrcSlot = val
}
func (p *TFileScanRangeParams) SetDestSidToSrcSidWithoutTrans(val map[types.TSlotId]types.TSlotId) {
	p.DestSidToSrcSidWithoutTrans = val
}
func (p *TFileScanRangeParams) SetStrictMode(val *bool) {
	p.StrictMode = val
}
func (p *TFileScanRangeParams) SetBrokerAddresses(val []*types.TNetworkAddress) {
	p.BrokerAddresses = val
}
func (p *TFileScanRangeParams) SetFileAttributes(val *TFileAttributes) {
	p.FileAttributes = val
}
func (p *TFileScanRangeParams) SetPreFilterExprs(val *exprs.TExpr) {
	p.PreFilterExprs = val
}
func (p *TFileScanRangeParams) SetTableFormatParams(val *TTableFormatFileDesc) {
	p.TableFormatParams = val
}
func (p *TFileScanRangeParams) SetColumnIdxs(val []int32) {
	p.ColumnIdxs = val
}
func (p *TFileScanRangeParams) SetSlotNameToSchemaPos(val map[string]int32) {
	p.SlotNameToSchemaPos = val
}
func (p *TFileScanRangeParams) SetPreFilterExprsList(val []*exprs.TExpr) {
	p.PreFilterExprsList = val
}
func (p *TFileScanRangeParams) SetLoadId(val *types.TUniqueId) {
	p.LoadId = val
}
func (p *TFileScanRangeParams) SetTextSerdeType(val *TTextSerdeType) {
	p.TextSerdeType = val
}

var fieldIDToName_TFileScanRangeParams = map[int16]string{
	1:  "file_type",
	2:  "format_type",
	3:  "compress_type",
	4:  "src_tuple_id",
	5:  "dest_tuple_id",
	6:  "num_of_columns_from_file",
	7:  "required_slots",
	8:  "hdfs_params",
	9:  "properties",
	10: "expr_of_dest_slot",
	11: "default_value_of_src_slot",
	12: "dest_sid_to_src_sid_without_trans",
	13: "strict_mode",
	14: "broker_addresses",
	15: "file_attributes",
	16: "pre_filter_exprs",
	17: "table_format_params",
	18: "column_idxs",
	19: "slot_name_to_schema_pos",
	20: "pre_filter_exprs_list",
	21: "load_id",
	22: "text_serde_type",
}

func (p *TFileScanRangeParams) IsSetFileType() bool {
	return p.FileType != nil
}

func (p *TFileScanRangeParams) IsSetFormatType() bool {
	return p.FormatType != nil
}

func (p *TFileScanRangeParams) IsSetCompressType() bool {
	return p.CompressType != nil
}

func (p *TFileScanRangeParams) IsSetSrcTupleId() bool {
	return p.SrcTupleId != nil
}

func (p *TFileScanRangeParams) IsSetDestTupleId() bool {
	return p.DestTupleId != nil
}

func (p *TFileScanRangeParams) IsSetNumOfColumnsFromFile() bool {
	return p.NumOfColumnsFromFile != nil
}

func (p *TFileScanRangeParams) IsSetRequiredSlots() bool {
	return p.RequiredSlots != nil
}

func (p *TFileScanRangeParams) IsSetHdfsParams() bool {
	return p.HdfsParams != nil
}

func (p *TFileScanRangeParams) IsSetProperties() bool {
	return p.Properties != nil
}

func (p *TFileScanRangeParams) IsSetExprOfDestSlot() bool {
	return p.ExprOfDestSlot != nil
}

func (p *TFileScanRangeParams) IsSetDefaultValueOfSrcSlot() bool {
	return p.DefaultValueOfSrcSlot != nil
}

func (p *TFileScanRangeParams) IsSetDestSidToSrcSidWithoutTrans() bool {
	return p.DestSidToSrcSidWithoutTrans != nil
}

func (p *TFileScanRangeParams) IsSetStrictMode() bool {
	return p.StrictMode != nil
}

func (p *TFileScanRangeParams) IsSetBrokerAddresses() bool {
	return p.BrokerAddresses != nil
}

func (p *TFileScanRangeParams) IsSetFileAttributes() bool {
	return p.FileAttributes != nil
}

func (p *TFileScanRangeParams) IsSetPreFilterExprs() bool {
	return p.PreFilterExprs != nil
}

func (p *TFileScanRangeParams) IsSetTableFormatParams() bool {
	return p.TableFormatParams != nil
}

func (p *TFileScanRangeParams) IsSetColumnIdxs() bool {
	return p.ColumnIdxs != nil
}

func (p *TFileScanRangeParams) IsSetSlotNameToSchemaPos() bool {
	return p.SlotNameToSchemaPos != nil
}

func (p *TFileScanRangeParams) IsSetPreFilterExprsList() bool {
	return p.PreFilterExprsList != nil
}

func (p *TFileScanRangeParams) IsSetLoadId() bool {
	return p.LoadId != nil
}

func (p *TFileScanRangeParams) IsSetTextSerdeType() bool {
	return p.TextSerdeType != nil
}

func (p *TFileScanRangeParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFileScanRangeParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TFileScanRangeParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *types.TFileType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TFileType(v)
		_field = &tmp
	}
	p.FileType = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField2(iprot thrift.TProtocol) error {

	var _field *TFileFormatType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TFileFormatType(v)
		_field = &tmp
	}
	p.FormatType = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField3(iprot thrift.TProtocol) error {

	var _field *TFileCompressType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TFileCompressType(v)
		_field = &tmp
	}
	p.CompressType = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField4(iprot thrift.TProtocol) error {

	var _field *types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SrcTupleId = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField5(iprot thrift.TProtocol) error {

	var _field *types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DestTupleId = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField6(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NumOfColumnsFromFile = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TFileScanSlotInfo, 0, size)
	values := make([]TFileScanSlotInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.RequiredSlots = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField8(iprot thrift.TProtocol) error {
	_field := NewTHdfsParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.HdfsParams = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField9(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Properties = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TSlotId]*exprs.TExpr, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		var _key types.TSlotId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.ExprOfDestSlot = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField11(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TSlotId]*exprs.TExpr, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		var _key types.TSlotId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.DefaultValueOfSrcSlot = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField12(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TSlotId]types.TSlotId, size)
	for i := 0; i < size; i++ {
		var _key types.TSlotId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val types.TSlotId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.DestSidToSrcSidWithoutTrans = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField13(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StrictMode = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*types.TNetworkAddress, 0, size)
	values := make([]types.TNetworkAddress, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.BrokerAddresses = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField15(iprot thrift.TProtocol) error {
	_field := NewTFileAttributes()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FileAttributes = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField16(iprot thrift.TProtocol) error {
	_field := exprs.NewTExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PreFilterExprs = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField17(iprot thrift.TProtocol) error {
	_field := NewTTableFormatFileDesc()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TableFormatParams = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField18(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnIdxs = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField19(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]int32, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.SlotNameToSchemaPos = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField20(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PreFilterExprsList = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField21(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.LoadId = _field
	return nil
}
func (p *TFileScanRangeParams) ReadField22(iprot thrift.TProtocol) error {

	var _field *TTextSerdeType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TTextSerdeType(v)
		_field = &tmp
	}
	p.TextSerdeType = _field
	return nil
}

func (p *TFileScanRangeParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFileScanRangeParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileType() {
		if err = oprot.WriteFieldBegin("file_type", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.FileType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFormatType() {
		if err = oprot.WriteFieldBegin("format_type", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.FormatType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompressType() {
		if err = oprot.WriteFieldBegin("compress_type", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.CompressType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSrcTupleId() {
		if err = oprot.WriteFieldBegin("src_tuple_id", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SrcTupleId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestTupleId() {
		if err = oprot.WriteFieldBegin("dest_tuple_id", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.DestTupleId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumOfColumnsFromFile() {
		if err = oprot.WriteFieldBegin("num_of_columns_from_file", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.NumOfColumnsFromFile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequiredSlots() {
		if err = oprot.WriteFieldBegin("required_slots", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RequiredSlots)); err != nil {
			return err
		}
		for _, v := range p.RequiredSlots {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetHdfsParams() {
		if err = oprot.WriteFieldBegin("hdfs_params", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.HdfsParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperties() {
		if err = oprot.WriteFieldBegin("properties", thrift.MAP, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
			return err
		}
		for k, v := range p.Properties {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetExprOfDestSlot() {
		if err = oprot.WriteFieldBegin("expr_of_dest_slot", thrift.MAP, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.ExprOfDestSlot)); err != nil {
			return err
		}
		for k, v := range p.ExprOfDestSlot {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultValueOfSrcSlot() {
		if err = oprot.WriteFieldBegin("default_value_of_src_slot", thrift.MAP, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.DefaultValueOfSrcSlot)); err != nil {
			return err
		}
		for k, v := range p.DefaultValueOfSrcSlot {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestSidToSrcSidWithoutTrans() {
		if err = oprot.WriteFieldBegin("dest_sid_to_src_sid_without_trans", thrift.MAP, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.DestSidToSrcSidWithoutTrans)); err != nil {
			return err
		}
		for k, v := range p.DestSidToSrcSidWithoutTrans {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetStrictMode() {
		if err = oprot.WriteFieldBegin("strict_mode", thrift.BOOL, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.StrictMode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetBrokerAddresses() {
		if err = oprot.WriteFieldBegin("broker_addresses", thrift.LIST, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BrokerAddresses)); err != nil {
			return err
		}
		for _, v := range p.BrokerAddresses {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileAttributes() {
		if err = oprot.WriteFieldBegin("file_attributes", thrift.STRUCT, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FileAttributes.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreFilterExprs() {
		if err = oprot.WriteFieldBegin("pre_filter_exprs", thrift.STRUCT, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PreFilterExprs.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableFormatParams() {
		if err = oprot.WriteFieldBegin("table_format_params", thrift.STRUCT, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TableFormatParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnIdxs() {
		if err = oprot.WriteFieldBegin("column_idxs", thrift.LIST, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.ColumnIdxs)); err != nil {
			return err
		}
		for _, v := range p.ColumnIdxs {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetSlotNameToSchemaPos() {
		if err = oprot.WriteFieldBegin("slot_name_to_schema_pos", thrift.MAP, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.SlotNameToSchemaPos)); err != nil {
			return err
		}
		for k, v := range p.SlotNameToSchemaPos {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreFilterExprsList() {
		if err = oprot.WriteFieldBegin("pre_filter_exprs_list", thrift.LIST, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PreFilterExprsList)); err != nil {
			return err
		}
		for _, v := range p.PreFilterExprsList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadId() {
		if err = oprot.WriteFieldBegin("load_id", thrift.STRUCT, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.LoadId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *TFileScanRangeParams) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetTextSerdeType() {
		if err = oprot.WriteFieldBegin("text_serde_type", thrift.I32, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.TextSerdeType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *TFileScanRangeParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFileScanRangeParams(%+v)", *p)

}

func (p *TFileScanRangeParams) DeepEqual(ano *TFileScanRangeParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FileType) {
		return false
	}
	if !p.Field2DeepEqual(ano.FormatType) {
		return false
	}
	if !p.Field3DeepEqual(ano.CompressType) {
		return false
	}
	if !p.Field4DeepEqual(ano.SrcTupleId) {
		return false
	}
	if !p.Field5DeepEqual(ano.DestTupleId) {
		return false
	}
	if !p.Field6DeepEqual(ano.NumOfColumnsFromFile) {
		return false
	}
	if !p.Field7DeepEqual(ano.RequiredSlots) {
		return false
	}
	if !p.Field8DeepEqual(ano.HdfsParams) {
		return false
	}
	if !p.Field9DeepEqual(ano.Properties) {
		return false
	}
	if !p.Field10DeepEqual(ano.ExprOfDestSlot) {
		return false
	}
	if !p.Field11DeepEqual(ano.DefaultValueOfSrcSlot) {
		return false
	}
	if !p.Field12DeepEqual(ano.DestSidToSrcSidWithoutTrans) {
		return false
	}
	if !p.Field13DeepEqual(ano.StrictMode) {
		return false
	}
	if !p.Field14DeepEqual(ano.BrokerAddresses) {
		return false
	}
	if !p.Field15DeepEqual(ano.FileAttributes) {
		return false
	}
	if !p.Field16DeepEqual(ano.PreFilterExprs) {
		return false
	}
	if !p.Field17DeepEqual(ano.TableFormatParams) {
		return false
	}
	if !p.Field18DeepEqual(ano.ColumnIdxs) {
		return false
	}
	if !p.Field19DeepEqual(ano.SlotNameToSchemaPos) {
		return false
	}
	if !p.Field20DeepEqual(ano.PreFilterExprsList) {
		return false
	}
	if !p.Field21DeepEqual(ano.LoadId) {
		return false
	}
	if !p.Field22DeepEqual(ano.TextSerdeType) {
		return false
	}
	return true
}

func (p *TFileScanRangeParams) Field1DeepEqual(src *types.TFileType) bool {

	if p.FileType == src {
		return true
	} else if p.FileType == nil || src == nil {
		return false
	}
	if *p.FileType != *src {
		return false
	}
	return true
}
func (p *TFileScanRangeParams) Field2DeepEqual(src *TFileFormatType) bool {

	if p.FormatType == src {
		return true
	} else if p.FormatType == nil || src == nil {
		return false
	}
	if *p.FormatType != *src {
		return false
	}
	return true
}
func (p *TFileScanRangeParams) Field3DeepEqual(src *TFileCompressType) bool {

	if p.CompressType == src {
		return true
	} else if p.CompressType == nil || src == nil {
		return false
	}
	if *p.CompressType != *src {
		return false
	}
	return true
}
func (p *TFileScanRangeParams) Field4DeepEqual(src *types.TTupleId) bool {

	if p.SrcTupleId == src {
		return true
	} else if p.SrcTupleId == nil || src == nil {
		return false
	}
	if *p.SrcTupleId != *src {
		return false
	}
	return true
}
func (p *TFileScanRangeParams) Field5DeepEqual(src *types.TTupleId) bool {

	if p.DestTupleId == src {
		return true
	} else if p.DestTupleId == nil || src == nil {
		return false
	}
	if *p.DestTupleId != *src {
		return false
	}
	return true
}
func (p *TFileScanRangeParams) Field6DeepEqual(src *int32) bool {

	if p.NumOfColumnsFromFile == src {
		return true
	} else if p.NumOfColumnsFromFile == nil || src == nil {
		return false
	}
	if *p.NumOfColumnsFromFile != *src {
		return false
	}
	return true
}
func (p *TFileScanRangeParams) Field7DeepEqual(src []*TFileScanSlotInfo) bool {

	if len(p.RequiredSlots) != len(src) {
		return false
	}
	for i, v := range p.RequiredSlots {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TFileScanRangeParams) Field8DeepEqual(src *THdfsParams) bool {

	if !p.HdfsParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFileScanRangeParams) Field9DeepEqual(src map[string]string) bool {

	if len(p.Properties) != len(src) {
		return false
	}
	for k, v := range p.Properties {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TFileScanRangeParams) Field10DeepEqual(src map[types.TSlotId]*exprs.TExpr) bool {

	if len(p.ExprOfDestSlot) != len(src) {
		return false
	}
	for k, v := range p.ExprOfDestSlot {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TFileScanRangeParams) Field11DeepEqual(src map[types.TSlotId]*exprs.TExpr) bool {

	if len(p.DefaultValueOfSrcSlot) != len(src) {
		return false
	}
	for k, v := range p.DefaultValueOfSrcSlot {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TFileScanRangeParams) Field12DeepEqual(src map[types.TSlotId]types.TSlotId) bool {

	if len(p.DestSidToSrcSidWithoutTrans) != len(src) {
		return false
	}
	for k, v := range p.DestSidToSrcSidWithoutTrans {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TFileScanRangeParams) Field13DeepEqual(src *bool) bool {

	if p.StrictMode == src {
		return true
	} else if p.StrictMode == nil || src == nil {
		return false
	}
	if *p.StrictMode != *src {
		return false
	}
	return true
}
func (p *TFileScanRangeParams) Field14DeepEqual(src []*types.TNetworkAddress) bool {

	if len(p.BrokerAddresses) != len(src) {
		return false
	}
	for i, v := range p.BrokerAddresses {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TFileScanRangeParams) Field15DeepEqual(src *TFileAttributes) bool {

	if !p.FileAttributes.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFileScanRangeParams) Field16DeepEqual(src *exprs.TExpr) bool {

	if !p.PreFilterExprs.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFileScanRangeParams) Field17DeepEqual(src *TTableFormatFileDesc) bool {

	if !p.TableFormatParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFileScanRangeParams) Field18DeepEqual(src []int32) bool {

	if len(p.ColumnIdxs) != len(src) {
		return false
	}
	for i, v := range p.ColumnIdxs {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TFileScanRangeParams) Field19DeepEqual(src map[string]int32) bool {

	if len(p.SlotNameToSchemaPos) != len(src) {
		return false
	}
	for k, v := range p.SlotNameToSchemaPos {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TFileScanRangeParams) Field20DeepEqual(src []*exprs.TExpr) bool {

	if len(p.PreFilterExprsList) != len(src) {
		return false
	}
	for i, v := range p.PreFilterExprsList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TFileScanRangeParams) Field21DeepEqual(src *types.TUniqueId) bool {

	if !p.LoadId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFileScanRangeParams) Field22DeepEqual(src *TTextSerdeType) bool {

	if p.TextSerdeType == src {
		return true
	} else if p.TextSerdeType == nil || src == nil {
		return false
	}
	if *p.TextSerdeType != *src {
		return false
	}
	return true
}

type TFileRangeDesc struct {
	LoadId              *types.TUniqueId      `thrift:"load_id,1,optional" frugal:"1,optional,types.TUniqueId" json:"load_id,omitempty"`
	Path                *string               `thrift:"path,2,optional" frugal:"2,optional,string" json:"path,omitempty"`
	StartOffset         *int64                `thrift:"start_offset,3,optional" frugal:"3,optional,i64" json:"start_offset,omitempty"`
	Size                *int64                `thrift:"size,4,optional" frugal:"4,optional,i64" json:"size,omitempty"`
	FileSize            int64                 `thrift:"file_size,5,optional" frugal:"5,optional,i64" json:"file_size,omitempty"`
	ColumnsFromPath     []string              `thrift:"columns_from_path,6,optional" frugal:"6,optional,list<string>" json:"columns_from_path,omitempty"`
	ColumnsFromPathKeys []string              `thrift:"columns_from_path_keys,7,optional" frugal:"7,optional,list<string>" json:"columns_from_path_keys,omitempty"`
	TableFormatParams   *TTableFormatFileDesc `thrift:"table_format_params,8,optional" frugal:"8,optional,TTableFormatFileDesc" json:"table_format_params,omitempty"`
	ModificationTime    *int64                `thrift:"modification_time,9,optional" frugal:"9,optional,i64" json:"modification_time,omitempty"`
	FileType            *types.TFileType      `thrift:"file_type,10,optional" frugal:"10,optional,TFileType" json:"file_type,omitempty"`
	CompressType        *TFileCompressType    `thrift:"compress_type,11,optional" frugal:"11,optional,TFileCompressType" json:"compress_type,omitempty"`
	FsName              *string               `thrift:"fs_name,12,optional" frugal:"12,optional,string" json:"fs_name,omitempty"`
}

func NewTFileRangeDesc() *TFileRangeDesc {
	return &TFileRangeDesc{

		FileSize: -1,
	}
}

func (p *TFileRangeDesc) InitDefault() {
	p.FileSize = -1
}

var TFileRangeDesc_LoadId_DEFAULT *types.TUniqueId

func (p *TFileRangeDesc) GetLoadId() (v *types.TUniqueId) {
	if !p.IsSetLoadId() {
		return TFileRangeDesc_LoadId_DEFAULT
	}
	return p.LoadId
}

var TFileRangeDesc_Path_DEFAULT string

func (p *TFileRangeDesc) GetPath() (v string) {
	if !p.IsSetPath() {
		return TFileRangeDesc_Path_DEFAULT
	}
	return *p.Path
}

var TFileRangeDesc_StartOffset_DEFAULT int64

func (p *TFileRangeDesc) GetStartOffset() (v int64) {
	if !p.IsSetStartOffset() {
		return TFileRangeDesc_StartOffset_DEFAULT
	}
	return *p.StartOffset
}

var TFileRangeDesc_Size_DEFAULT int64

func (p *TFileRangeDesc) GetSize() (v int64) {
	if !p.IsSetSize() {
		return TFileRangeDesc_Size_DEFAULT
	}
	return *p.Size
}

var TFileRangeDesc_FileSize_DEFAULT int64 = -1

func (p *TFileRangeDesc) GetFileSize() (v int64) {
	if !p.IsSetFileSize() {
		return TFileRangeDesc_FileSize_DEFAULT
	}
	return p.FileSize
}

var TFileRangeDesc_ColumnsFromPath_DEFAULT []string

func (p *TFileRangeDesc) GetColumnsFromPath() (v []string) {
	if !p.IsSetColumnsFromPath() {
		return TFileRangeDesc_ColumnsFromPath_DEFAULT
	}
	return p.ColumnsFromPath
}

var TFileRangeDesc_ColumnsFromPathKeys_DEFAULT []string

func (p *TFileRangeDesc) GetColumnsFromPathKeys() (v []string) {
	if !p.IsSetColumnsFromPathKeys() {
		return TFileRangeDesc_ColumnsFromPathKeys_DEFAULT
	}
	return p.ColumnsFromPathKeys
}

var TFileRangeDesc_TableFormatParams_DEFAULT *TTableFormatFileDesc

func (p *TFileRangeDesc) GetTableFormatParams() (v *TTableFormatFileDesc) {
	if !p.IsSetTableFormatParams() {
		return TFileRangeDesc_TableFormatParams_DEFAULT
	}
	return p.TableFormatParams
}

var TFileRangeDesc_ModificationTime_DEFAULT int64

func (p *TFileRangeDesc) GetModificationTime() (v int64) {
	if !p.IsSetModificationTime() {
		return TFileRangeDesc_ModificationTime_DEFAULT
	}
	return *p.ModificationTime
}

var TFileRangeDesc_FileType_DEFAULT types.TFileType

func (p *TFileRangeDesc) GetFileType() (v types.TFileType) {
	if !p.IsSetFileType() {
		return TFileRangeDesc_FileType_DEFAULT
	}
	return *p.FileType
}

var TFileRangeDesc_CompressType_DEFAULT TFileCompressType

func (p *TFileRangeDesc) GetCompressType() (v TFileCompressType) {
	if !p.IsSetCompressType() {
		return TFileRangeDesc_CompressType_DEFAULT
	}
	return *p.CompressType
}

var TFileRangeDesc_FsName_DEFAULT string

func (p *TFileRangeDesc) GetFsName() (v string) {
	if !p.IsSetFsName() {
		return TFileRangeDesc_FsName_DEFAULT
	}
	return *p.FsName
}
func (p *TFileRangeDesc) SetLoadId(val *types.TUniqueId) {
	p.LoadId = val
}
func (p *TFileRangeDesc) SetPath(val *string) {
	p.Path = val
}
func (p *TFileRangeDesc) SetStartOffset(val *int64) {
	p.StartOffset = val
}
func (p *TFileRangeDesc) SetSize(val *int64) {
	p.Size = val
}
func (p *TFileRangeDesc) SetFileSize(val int64) {
	p.FileSize = val
}
func (p *TFileRangeDesc) SetColumnsFromPath(val []string) {
	p.ColumnsFromPath = val
}
func (p *TFileRangeDesc) SetColumnsFromPathKeys(val []string) {
	p.ColumnsFromPathKeys = val
}
func (p *TFileRangeDesc) SetTableFormatParams(val *TTableFormatFileDesc) {
	p.TableFormatParams = val
}
func (p *TFileRangeDesc) SetModificationTime(val *int64) {
	p.ModificationTime = val
}
func (p *TFileRangeDesc) SetFileType(val *types.TFileType) {
	p.FileType = val
}
func (p *TFileRangeDesc) SetCompressType(val *TFileCompressType) {
	p.CompressType = val
}
func (p *TFileRangeDesc) SetFsName(val *string) {
	p.FsName = val
}

var fieldIDToName_TFileRangeDesc = map[int16]string{
	1:  "load_id",
	2:  "path",
	3:  "start_offset",
	4:  "size",
	5:  "file_size",
	6:  "columns_from_path",
	7:  "columns_from_path_keys",
	8:  "table_format_params",
	9:  "modification_time",
	10: "file_type",
	11: "compress_type",
	12: "fs_name",
}

func (p *TFileRangeDesc) IsSetLoadId() bool {
	return p.LoadId != nil
}

func (p *TFileRangeDesc) IsSetPath() bool {
	return p.Path != nil
}

func (p *TFileRangeDesc) IsSetStartOffset() bool {
	return p.StartOffset != nil
}

func (p *TFileRangeDesc) IsSetSize() bool {
	return p.Size != nil
}

func (p *TFileRangeDesc) IsSetFileSize() bool {
	return p.FileSize != TFileRangeDesc_FileSize_DEFAULT
}

func (p *TFileRangeDesc) IsSetColumnsFromPath() bool {
	return p.ColumnsFromPath != nil
}

func (p *TFileRangeDesc) IsSetColumnsFromPathKeys() bool {
	return p.ColumnsFromPathKeys != nil
}

func (p *TFileRangeDesc) IsSetTableFormatParams() bool {
	return p.TableFormatParams != nil
}

func (p *TFileRangeDesc) IsSetModificationTime() bool {
	return p.ModificationTime != nil
}

func (p *TFileRangeDesc) IsSetFileType() bool {
	return p.FileType != nil
}

func (p *TFileRangeDesc) IsSetCompressType() bool {
	return p.CompressType != nil
}

func (p *TFileRangeDesc) IsSetFsName() bool {
	return p.FsName != nil
}

func (p *TFileRangeDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFileRangeDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TFileRangeDesc) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.LoadId = _field
	return nil
}
func (p *TFileRangeDesc) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Path = _field
	return nil
}
func (p *TFileRangeDesc) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StartOffset = _field
	return nil
}
func (p *TFileRangeDesc) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Size = _field
	return nil
}
func (p *TFileRangeDesc) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FileSize = _field
	return nil
}
func (p *TFileRangeDesc) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnsFromPath = _field
	return nil
}
func (p *TFileRangeDesc) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnsFromPathKeys = _field
	return nil
}
func (p *TFileRangeDesc) ReadField8(iprot thrift.TProtocol) error {
	_field := NewTTableFormatFileDesc()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TableFormatParams = _field
	return nil
}
func (p *TFileRangeDesc) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ModificationTime = _field
	return nil
}
func (p *TFileRangeDesc) ReadField10(iprot thrift.TProtocol) error {

	var _field *types.TFileType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TFileType(v)
		_field = &tmp
	}
	p.FileType = _field
	return nil
}
func (p *TFileRangeDesc) ReadField11(iprot thrift.TProtocol) error {

	var _field *TFileCompressType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TFileCompressType(v)
		_field = &tmp
	}
	p.CompressType = _field
	return nil
}
func (p *TFileRangeDesc) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FsName = _field
	return nil
}

func (p *TFileRangeDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFileRangeDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFileRangeDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadId() {
		if err = oprot.WriteFieldBegin("load_id", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.LoadId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFileRangeDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err = oprot.WriteFieldBegin("path", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Path); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFileRangeDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartOffset() {
		if err = oprot.WriteFieldBegin("start_offset", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.StartOffset); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TFileRangeDesc) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSize() {
		if err = oprot.WriteFieldBegin("size", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Size); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TFileRangeDesc) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileSize() {
		if err = oprot.WriteFieldBegin("file_size", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.FileSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TFileRangeDesc) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnsFromPath() {
		if err = oprot.WriteFieldBegin("columns_from_path", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ColumnsFromPath)); err != nil {
			return err
		}
		for _, v := range p.ColumnsFromPath {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TFileRangeDesc) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnsFromPathKeys() {
		if err = oprot.WriteFieldBegin("columns_from_path_keys", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ColumnsFromPathKeys)); err != nil {
			return err
		}
		for _, v := range p.ColumnsFromPathKeys {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TFileRangeDesc) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableFormatParams() {
		if err = oprot.WriteFieldBegin("table_format_params", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TableFormatParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TFileRangeDesc) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetModificationTime() {
		if err = oprot.WriteFieldBegin("modification_time", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ModificationTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TFileRangeDesc) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileType() {
		if err = oprot.WriteFieldBegin("file_type", thrift.I32, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.FileType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TFileRangeDesc) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompressType() {
		if err = oprot.WriteFieldBegin("compress_type", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.CompressType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TFileRangeDesc) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetFsName() {
		if err = oprot.WriteFieldBegin("fs_name", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FsName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TFileRangeDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFileRangeDesc(%+v)", *p)

}

func (p *TFileRangeDesc) DeepEqual(ano *TFileRangeDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LoadId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Path) {
		return false
	}
	if !p.Field3DeepEqual(ano.StartOffset) {
		return false
	}
	if !p.Field4DeepEqual(ano.Size) {
		return false
	}
	if !p.Field5DeepEqual(ano.FileSize) {
		return false
	}
	if !p.Field6DeepEqual(ano.ColumnsFromPath) {
		return false
	}
	if !p.Field7DeepEqual(ano.ColumnsFromPathKeys) {
		return false
	}
	if !p.Field8DeepEqual(ano.TableFormatParams) {
		return false
	}
	if !p.Field9DeepEqual(ano.ModificationTime) {
		return false
	}
	if !p.Field10DeepEqual(ano.FileType) {
		return false
	}
	if !p.Field11DeepEqual(ano.CompressType) {
		return false
	}
	if !p.Field12DeepEqual(ano.FsName) {
		return false
	}
	return true
}

func (p *TFileRangeDesc) Field1DeepEqual(src *types.TUniqueId) bool {

	if !p.LoadId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFileRangeDesc) Field2DeepEqual(src *string) bool {

	if p.Path == src {
		return true
	} else if p.Path == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Path, *src) != 0 {
		return false
	}
	return true
}
func (p *TFileRangeDesc) Field3DeepEqual(src *int64) bool {

	if p.StartOffset == src {
		return true
	} else if p.StartOffset == nil || src == nil {
		return false
	}
	if *p.StartOffset != *src {
		return false
	}
	return true
}
func (p *TFileRangeDesc) Field4DeepEqual(src *int64) bool {

	if p.Size == src {
		return true
	} else if p.Size == nil || src == nil {
		return false
	}
	if *p.Size != *src {
		return false
	}
	return true
}
func (p *TFileRangeDesc) Field5DeepEqual(src int64) bool {

	if p.FileSize != src {
		return false
	}
	return true
}
func (p *TFileRangeDesc) Field6DeepEqual(src []string) bool {

	if len(p.ColumnsFromPath) != len(src) {
		return false
	}
	for i, v := range p.ColumnsFromPath {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TFileRangeDesc) Field7DeepEqual(src []string) bool {

	if len(p.ColumnsFromPathKeys) != len(src) {
		return false
	}
	for i, v := range p.ColumnsFromPathKeys {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TFileRangeDesc) Field8DeepEqual(src *TTableFormatFileDesc) bool {

	if !p.TableFormatParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFileRangeDesc) Field9DeepEqual(src *int64) bool {

	if p.ModificationTime == src {
		return true
	} else if p.ModificationTime == nil || src == nil {
		return false
	}
	if *p.ModificationTime != *src {
		return false
	}
	return true
}
func (p *TFileRangeDesc) Field10DeepEqual(src *types.TFileType) bool {

	if p.FileType == src {
		return true
	} else if p.FileType == nil || src == nil {
		return false
	}
	if *p.FileType != *src {
		return false
	}
	return true
}
func (p *TFileRangeDesc) Field11DeepEqual(src *TFileCompressType) bool {

	if p.CompressType == src {
		return true
	} else if p.CompressType == nil || src == nil {
		return false
	}
	if *p.CompressType != *src {
		return false
	}
	return true
}
func (p *TFileRangeDesc) Field12DeepEqual(src *string) bool {

	if p.FsName == src {
		return true
	} else if p.FsName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FsName, *src) != 0 {
		return false
	}
	return true
}

type TSplitSource struct {
	SplitSourceId *int64 `thrift:"split_source_id,1,optional" frugal:"1,optional,i64" json:"split_source_id,omitempty"`
	NumSplits     *int32 `thrift:"num_splits,2,optional" frugal:"2,optional,i32" json:"num_splits,omitempty"`
}

func NewTSplitSource() *TSplitSource {
	return &TSplitSource{}
}

func (p *TSplitSource) InitDefault() {
}

var TSplitSource_SplitSourceId_DEFAULT int64

func (p *TSplitSource) GetSplitSourceId() (v int64) {
	if !p.IsSetSplitSourceId() {
		return TSplitSource_SplitSourceId_DEFAULT
	}
	return *p.SplitSourceId
}

var TSplitSource_NumSplits_DEFAULT int32

func (p *TSplitSource) GetNumSplits() (v int32) {
	if !p.IsSetNumSplits() {
		return TSplitSource_NumSplits_DEFAULT
	}
	return *p.NumSplits
}
func (p *TSplitSource) SetSplitSourceId(val *int64) {
	p.SplitSourceId = val
}
func (p *TSplitSource) SetNumSplits(val *int32) {
	p.NumSplits = val
}

var fieldIDToName_TSplitSource = map[int16]string{
	1: "split_source_id",
	2: "num_splits",
}

func (p *TSplitSource) IsSetSplitSourceId() bool {
	return p.SplitSourceId != nil
}

func (p *TSplitSource) IsSetNumSplits() bool {
	return p.NumSplits != nil
}

func (p *TSplitSource) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TSplitSource[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TSplitSource) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SplitSourceId = _field
	return nil
}
func (p *TSplitSource) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NumSplits = _field
	return nil
}

func (p *TSplitSource) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TSplitSource"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TSplitSource) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSplitSourceId() {
		if err = oprot.WriteFieldBegin("split_source_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SplitSourceId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TSplitSource) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumSplits() {
		if err = oprot.WriteFieldBegin("num_splits", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.NumSplits); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TSplitSource) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSplitSource(%+v)", *p)

}

func (p *TSplitSource) DeepEqual(ano *TSplitSource) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SplitSourceId) {
		return false
	}
	if !p.Field2DeepEqual(ano.NumSplits) {
		return false
	}
	return true
}

func (p *TSplitSource) Field1DeepEqual(src *int64) bool {

	if p.SplitSourceId == src {
		return true
	} else if p.SplitSourceId == nil || src == nil {
		return false
	}
	if *p.SplitSourceId != *src {
		return false
	}
	return true
}
func (p *TSplitSource) Field2DeepEqual(src *int32) bool {

	if p.NumSplits == src {
		return true
	} else if p.NumSplits == nil || src == nil {
		return false
	}
	if *p.NumSplits != *src {
		return false
	}
	return true
}

type TFileScanRange struct {
	Ranges      []*TFileRangeDesc     `thrift:"ranges,1,optional" frugal:"1,optional,list<TFileRangeDesc>" json:"ranges,omitempty"`
	Params      *TFileScanRangeParams `thrift:"params,2,optional" frugal:"2,optional,TFileScanRangeParams" json:"params,omitempty"`
	SplitSource *TSplitSource         `thrift:"split_source,3,optional" frugal:"3,optional,TSplitSource" json:"split_source,omitempty"`
}

func NewTFileScanRange() *TFileScanRange {
	return &TFileScanRange{}
}

func (p *TFileScanRange) InitDefault() {
}

var TFileScanRange_Ranges_DEFAULT []*TFileRangeDesc

func (p *TFileScanRange) GetRanges() (v []*TFileRangeDesc) {
	if !p.IsSetRanges() {
		return TFileScanRange_Ranges_DEFAULT
	}
	return p.Ranges
}

var TFileScanRange_Params_DEFAULT *TFileScanRangeParams

func (p *TFileScanRange) GetParams() (v *TFileScanRangeParams) {
	if !p.IsSetParams() {
		return TFileScanRange_Params_DEFAULT
	}
	return p.Params
}

var TFileScanRange_SplitSource_DEFAULT *TSplitSource

func (p *TFileScanRange) GetSplitSource() (v *TSplitSource) {
	if !p.IsSetSplitSource() {
		return TFileScanRange_SplitSource_DEFAULT
	}
	return p.SplitSource
}
func (p *TFileScanRange) SetRanges(val []*TFileRangeDesc) {
	p.Ranges = val
}
func (p *TFileScanRange) SetParams(val *TFileScanRangeParams) {
	p.Params = val
}
func (p *TFileScanRange) SetSplitSource(val *TSplitSource) {
	p.SplitSource = val
}

var fieldIDToName_TFileScanRange = map[int16]string{
	1: "ranges",
	2: "params",
	3: "split_source",
}

func (p *TFileScanRange) IsSetRanges() bool {
	return p.Ranges != nil
}

func (p *TFileScanRange) IsSetParams() bool {
	return p.Params != nil
}

func (p *TFileScanRange) IsSetSplitSource() bool {
	return p.SplitSource != nil
}

func (p *TFileScanRange) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFileScanRange[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TFileScanRange) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TFileRangeDesc, 0, size)
	values := make([]TFileRangeDesc, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Ranges = _field
	return nil
}
func (p *TFileScanRange) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTFileScanRangeParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}
func (p *TFileScanRange) ReadField3(iprot thrift.TProtocol) error {
	_field := NewTSplitSource()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SplitSource = _field
	return nil
}

func (p *TFileScanRange) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFileScanRange"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFileScanRange) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRanges() {
		if err = oprot.WriteFieldBegin("ranges", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Ranges)); err != nil {
			return err
		}
		for _, v := range p.Ranges {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFileScanRange) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetParams() {
		if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Params.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFileScanRange) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSplitSource() {
		if err = oprot.WriteFieldBegin("split_source", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.SplitSource.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TFileScanRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFileScanRange(%+v)", *p)

}

func (p *TFileScanRange) DeepEqual(ano *TFileScanRange) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ranges) {
		return false
	}
	if !p.Field2DeepEqual(ano.Params) {
		return false
	}
	if !p.Field3DeepEqual(ano.SplitSource) {
		return false
	}
	return true
}

func (p *TFileScanRange) Field1DeepEqual(src []*TFileRangeDesc) bool {

	if len(p.Ranges) != len(src) {
		return false
	}
	for i, v := range p.Ranges {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TFileScanRange) Field2DeepEqual(src *TFileScanRangeParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFileScanRange) Field3DeepEqual(src *TSplitSource) bool {

	if !p.SplitSource.DeepEqual(src) {
		return false
	}
	return true
}

type TExternalScanRange struct {
	FileScanRange *TFileScanRange `thrift:"file_scan_range,1,optional" frugal:"1,optional,TFileScanRange" json:"file_scan_range,omitempty"`
}

func NewTExternalScanRange() *TExternalScanRange {
	return &TExternalScanRange{}
}

func (p *TExternalScanRange) InitDefault() {
}

var TExternalScanRange_FileScanRange_DEFAULT *TFileScanRange

func (p *TExternalScanRange) GetFileScanRange() (v *TFileScanRange) {
	if !p.IsSetFileScanRange() {
		return TExternalScanRange_FileScanRange_DEFAULT
	}
	return p.FileScanRange
}
func (p *TExternalScanRange) SetFileScanRange(val *TFileScanRange) {
	p.FileScanRange = val
}

var fieldIDToName_TExternalScanRange = map[int16]string{
	1: "file_scan_range",
}

func (p *TExternalScanRange) IsSetFileScanRange() bool {
	return p.FileScanRange != nil
}

func (p *TExternalScanRange) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExternalScanRange[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TExternalScanRange) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTFileScanRange()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FileScanRange = _field
	return nil
}

func (p *TExternalScanRange) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TExternalScanRange"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TExternalScanRange) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileScanRange() {
		if err = oprot.WriteFieldBegin("file_scan_range", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FileScanRange.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TExternalScanRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExternalScanRange(%+v)", *p)

}

func (p *TExternalScanRange) DeepEqual(ano *TExternalScanRange) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FileScanRange) {
		return false
	}
	return true
}

func (p *TExternalScanRange) Field1DeepEqual(src *TFileScanRange) bool {

	if !p.FileScanRange.DeepEqual(src) {
		return false
	}
	return true
}

type TTVFNumbersScanRange struct {
	TotalNumbers *int64 `thrift:"totalNumbers,1,optional" frugal:"1,optional,i64" json:"totalNumbers,omitempty"`
	UseConst     *bool  `thrift:"useConst,2,optional" frugal:"2,optional,bool" json:"useConst,omitempty"`
	ConstValue   *int64 `thrift:"constValue,3,optional" frugal:"3,optional,i64" json:"constValue,omitempty"`
}

func NewTTVFNumbersScanRange() *TTVFNumbersScanRange {
	return &TTVFNumbersScanRange{}
}

func (p *TTVFNumbersScanRange) InitDefault() {
}

var TTVFNumbersScanRange_TotalNumbers_DEFAULT int64

func (p *TTVFNumbersScanRange) GetTotalNumbers() (v int64) {
	if !p.IsSetTotalNumbers() {
		return TTVFNumbersScanRange_TotalNumbers_DEFAULT
	}
	return *p.TotalNumbers
}

var TTVFNumbersScanRange_UseConst_DEFAULT bool

func (p *TTVFNumbersScanRange) GetUseConst() (v bool) {
	if !p.IsSetUseConst() {
		return TTVFNumbersScanRange_UseConst_DEFAULT
	}
	return *p.UseConst
}

var TTVFNumbersScanRange_ConstValue_DEFAULT int64

func (p *TTVFNumbersScanRange) GetConstValue() (v int64) {
	if !p.IsSetConstValue() {
		return TTVFNumbersScanRange_ConstValue_DEFAULT
	}
	return *p.ConstValue
}
func (p *TTVFNumbersScanRange) SetTotalNumbers(val *int64) {
	p.TotalNumbers = val
}
func (p *TTVFNumbersScanRange) SetUseConst(val *bool) {
	p.UseConst = val
}
func (p *TTVFNumbersScanRange) SetConstValue(val *int64) {
	p.ConstValue = val
}

var fieldIDToName_TTVFNumbersScanRange = map[int16]string{
	1: "totalNumbers",
	2: "useConst",
	3: "constValue",
}

func (p *TTVFNumbersScanRange) IsSetTotalNumbers() bool {
	return p.TotalNumbers != nil
}

func (p *TTVFNumbersScanRange) IsSetUseConst() bool {
	return p.UseConst != nil
}

func (p *TTVFNumbersScanRange) IsSetConstValue() bool {
	return p.ConstValue != nil
}

func (p *TTVFNumbersScanRange) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTVFNumbersScanRange[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTVFNumbersScanRange) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TotalNumbers = _field
	return nil
}
func (p *TTVFNumbersScanRange) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UseConst = _field
	return nil
}
func (p *TTVFNumbersScanRange) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ConstValue = _field
	return nil
}

func (p *TTVFNumbersScanRange) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTVFNumbersScanRange"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTVFNumbersScanRange) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalNumbers() {
		if err = oprot.WriteFieldBegin("totalNumbers", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TotalNumbers); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTVFNumbersScanRange) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUseConst() {
		if err = oprot.WriteFieldBegin("useConst", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.UseConst); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTVFNumbersScanRange) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetConstValue() {
		if err = oprot.WriteFieldBegin("constValue", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ConstValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTVFNumbersScanRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTVFNumbersScanRange(%+v)", *p)

}

func (p *TTVFNumbersScanRange) DeepEqual(ano *TTVFNumbersScanRange) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TotalNumbers) {
		return false
	}
	if !p.Field2DeepEqual(ano.UseConst) {
		return false
	}
	if !p.Field3DeepEqual(ano.ConstValue) {
		return false
	}
	return true
}

func (p *TTVFNumbersScanRange) Field1DeepEqual(src *int64) bool {

	if p.TotalNumbers == src {
		return true
	} else if p.TotalNumbers == nil || src == nil {
		return false
	}
	if *p.TotalNumbers != *src {
		return false
	}
	return true
}
func (p *TTVFNumbersScanRange) Field2DeepEqual(src *bool) bool {

	if p.UseConst == src {
		return true
	} else if p.UseConst == nil || src == nil {
		return false
	}
	if *p.UseConst != *src {
		return false
	}
	return true
}
func (p *TTVFNumbersScanRange) Field3DeepEqual(src *int64) bool {

	if p.ConstValue == src {
		return true
	} else if p.ConstValue == nil || src == nil {
		return false
	}
	if *p.ConstValue != *src {
		return false
	}
	return true
}

type TDataGenScanRange struct {
	NumbersParams *TTVFNumbersScanRange `thrift:"numbers_params,1,optional" frugal:"1,optional,TTVFNumbersScanRange" json:"numbers_params,omitempty"`
}

func NewTDataGenScanRange() *TDataGenScanRange {
	return &TDataGenScanRange{}
}

func (p *TDataGenScanRange) InitDefault() {
}

var TDataGenScanRange_NumbersParams_DEFAULT *TTVFNumbersScanRange

func (p *TDataGenScanRange) GetNumbersParams() (v *TTVFNumbersScanRange) {
	if !p.IsSetNumbersParams() {
		return TDataGenScanRange_NumbersParams_DEFAULT
	}
	return p.NumbersParams
}
func (p *TDataGenScanRange) SetNumbersParams(val *TTVFNumbersScanRange) {
	p.NumbersParams = val
}

var fieldIDToName_TDataGenScanRange = map[int16]string{
	1: "numbers_params",
}

func (p *TDataGenScanRange) IsSetNumbersParams() bool {
	return p.NumbersParams != nil
}

func (p *TDataGenScanRange) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDataGenScanRange[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TDataGenScanRange) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTTVFNumbersScanRange()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.NumbersParams = _field
	return nil
}

func (p *TDataGenScanRange) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDataGenScanRange"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDataGenScanRange) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumbersParams() {
		if err = oprot.WriteFieldBegin("numbers_params", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.NumbersParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDataGenScanRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDataGenScanRange(%+v)", *p)

}

func (p *TDataGenScanRange) DeepEqual(ano *TDataGenScanRange) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.NumbersParams) {
		return false
	}
	return true
}

func (p *TDataGenScanRange) Field1DeepEqual(src *TTVFNumbersScanRange) bool {

	if !p.NumbersParams.DeepEqual(src) {
		return false
	}
	return true
}

type TIcebergMetadataParams struct {
	IcebergQueryType *types.TIcebergQueryType `thrift:"iceberg_query_type,1,optional" frugal:"1,optional,TIcebergQueryType" json:"iceberg_query_type,omitempty"`
	Catalog          *string                  `thrift:"catalog,2,optional" frugal:"2,optional,string" json:"catalog,omitempty"`
	Database         *string                  `thrift:"database,3,optional" frugal:"3,optional,string" json:"database,omitempty"`
	Table            *string                  `thrift:"table,4,optional" frugal:"4,optional,string" json:"table,omitempty"`
}

func NewTIcebergMetadataParams() *TIcebergMetadataParams {
	return &TIcebergMetadataParams{}
}

func (p *TIcebergMetadataParams) InitDefault() {
}

var TIcebergMetadataParams_IcebergQueryType_DEFAULT types.TIcebergQueryType

func (p *TIcebergMetadataParams) GetIcebergQueryType() (v types.TIcebergQueryType) {
	if !p.IsSetIcebergQueryType() {
		return TIcebergMetadataParams_IcebergQueryType_DEFAULT
	}
	return *p.IcebergQueryType
}

var TIcebergMetadataParams_Catalog_DEFAULT string

func (p *TIcebergMetadataParams) GetCatalog() (v string) {
	if !p.IsSetCatalog() {
		return TIcebergMetadataParams_Catalog_DEFAULT
	}
	return *p.Catalog
}

var TIcebergMetadataParams_Database_DEFAULT string

func (p *TIcebergMetadataParams) GetDatabase() (v string) {
	if !p.IsSetDatabase() {
		return TIcebergMetadataParams_Database_DEFAULT
	}
	return *p.Database
}

var TIcebergMetadataParams_Table_DEFAULT string

func (p *TIcebergMetadataParams) GetTable() (v string) {
	if !p.IsSetTable() {
		return TIcebergMetadataParams_Table_DEFAULT
	}
	return *p.Table
}
func (p *TIcebergMetadataParams) SetIcebergQueryType(val *types.TIcebergQueryType) {
	p.IcebergQueryType = val
}
func (p *TIcebergMetadataParams) SetCatalog(val *string) {
	p.Catalog = val
}
func (p *TIcebergMetadataParams) SetDatabase(val *string) {
	p.Database = val
}
func (p *TIcebergMetadataParams) SetTable(val *string) {
	p.Table = val
}

var fieldIDToName_TIcebergMetadataParams = map[int16]string{
	1: "iceberg_query_type",
	2: "catalog",
	3: "database",
	4: "table",
}

func (p *TIcebergMetadataParams) IsSetIcebergQueryType() bool {
	return p.IcebergQueryType != nil
}

func (p *TIcebergMetadataParams) IsSetCatalog() bool {
	return p.Catalog != nil
}

func (p *TIcebergMetadataParams) IsSetDatabase() bool {
	return p.Database != nil
}

func (p *TIcebergMetadataParams) IsSetTable() bool {
	return p.Table != nil
}

func (p *TIcebergMetadataParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TIcebergMetadataParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TIcebergMetadataParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *types.TIcebergQueryType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TIcebergQueryType(v)
		_field = &tmp
	}
	p.IcebergQueryType = _field
	return nil
}
func (p *TIcebergMetadataParams) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Catalog = _field
	return nil
}
func (p *TIcebergMetadataParams) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Database = _field
	return nil
}
func (p *TIcebergMetadataParams) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Table = _field
	return nil
}

func (p *TIcebergMetadataParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TIcebergMetadataParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TIcebergMetadataParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIcebergQueryType() {
		if err = oprot.WriteFieldBegin("iceberg_query_type", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.IcebergQueryType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TIcebergMetadataParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalog() {
		if err = oprot.WriteFieldBegin("catalog", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Catalog); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TIcebergMetadataParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDatabase() {
		if err = oprot.WriteFieldBegin("database", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Database); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TIcebergMetadataParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTable() {
		if err = oprot.WriteFieldBegin("table", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Table); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TIcebergMetadataParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIcebergMetadataParams(%+v)", *p)

}

func (p *TIcebergMetadataParams) DeepEqual(ano *TIcebergMetadataParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IcebergQueryType) {
		return false
	}
	if !p.Field2DeepEqual(ano.Catalog) {
		return false
	}
	if !p.Field3DeepEqual(ano.Database) {
		return false
	}
	if !p.Field4DeepEqual(ano.Table) {
		return false
	}
	return true
}

func (p *TIcebergMetadataParams) Field1DeepEqual(src *types.TIcebergQueryType) bool {

	if p.IcebergQueryType == src {
		return true
	} else if p.IcebergQueryType == nil || src == nil {
		return false
	}
	if *p.IcebergQueryType != *src {
		return false
	}
	return true
}
func (p *TIcebergMetadataParams) Field2DeepEqual(src *string) bool {

	if p.Catalog == src {
		return true
	} else if p.Catalog == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Catalog, *src) != 0 {
		return false
	}
	return true
}
func (p *TIcebergMetadataParams) Field3DeepEqual(src *string) bool {

	if p.Database == src {
		return true
	} else if p.Database == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Database, *src) != 0 {
		return false
	}
	return true
}
func (p *TIcebergMetadataParams) Field4DeepEqual(src *string) bool {

	if p.Table == src {
		return true
	} else if p.Table == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Table, *src) != 0 {
		return false
	}
	return true
}

type TBackendsMetadataParams struct {
	ClusterName *string `thrift:"cluster_name,1,optional" frugal:"1,optional,string" json:"cluster_name,omitempty"`
}

func NewTBackendsMetadataParams() *TBackendsMetadataParams {
	return &TBackendsMetadataParams{}
}

func (p *TBackendsMetadataParams) InitDefault() {
}

var TBackendsMetadataParams_ClusterName_DEFAULT string

func (p *TBackendsMetadataParams) GetClusterName() (v string) {
	if !p.IsSetClusterName() {
		return TBackendsMetadataParams_ClusterName_DEFAULT
	}
	return *p.ClusterName
}
func (p *TBackendsMetadataParams) SetClusterName(val *string) {
	p.ClusterName = val
}

var fieldIDToName_TBackendsMetadataParams = map[int16]string{
	1: "cluster_name",
}

func (p *TBackendsMetadataParams) IsSetClusterName() bool {
	return p.ClusterName != nil
}

func (p *TBackendsMetadataParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TBackendsMetadataParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TBackendsMetadataParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ClusterName = _field
	return nil
}

func (p *TBackendsMetadataParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TBackendsMetadataParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TBackendsMetadataParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetClusterName() {
		if err = oprot.WriteFieldBegin("cluster_name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ClusterName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TBackendsMetadataParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBackendsMetadataParams(%+v)", *p)

}

func (p *TBackendsMetadataParams) DeepEqual(ano *TBackendsMetadataParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterName) {
		return false
	}
	return true
}

func (p *TBackendsMetadataParams) Field1DeepEqual(src *string) bool {

	if p.ClusterName == src {
		return true
	} else if p.ClusterName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ClusterName, *src) != 0 {
		return false
	}
	return true
}

type TFrontendsMetadataParams struct {
	ClusterName *string `thrift:"cluster_name,1,optional" frugal:"1,optional,string" json:"cluster_name,omitempty"`
}

func NewTFrontendsMetadataParams() *TFrontendsMetadataParams {
	return &TFrontendsMetadataParams{}
}

func (p *TFrontendsMetadataParams) InitDefault() {
}

var TFrontendsMetadataParams_ClusterName_DEFAULT string

func (p *TFrontendsMetadataParams) GetClusterName() (v string) {
	if !p.IsSetClusterName() {
		return TFrontendsMetadataParams_ClusterName_DEFAULT
	}
	return *p.ClusterName
}
func (p *TFrontendsMetadataParams) SetClusterName(val *string) {
	p.ClusterName = val
}

var fieldIDToName_TFrontendsMetadataParams = map[int16]string{
	1: "cluster_name",
}

func (p *TFrontendsMetadataParams) IsSetClusterName() bool {
	return p.ClusterName != nil
}

func (p *TFrontendsMetadataParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFrontendsMetadataParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TFrontendsMetadataParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ClusterName = _field
	return nil
}

func (p *TFrontendsMetadataParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFrontendsMetadataParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFrontendsMetadataParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetClusterName() {
		if err = oprot.WriteFieldBegin("cluster_name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ClusterName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFrontendsMetadataParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFrontendsMetadataParams(%+v)", *p)

}

func (p *TFrontendsMetadataParams) DeepEqual(ano *TFrontendsMetadataParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterName) {
		return false
	}
	return true
}

func (p *TFrontendsMetadataParams) Field1DeepEqual(src *string) bool {

	if p.ClusterName == src {
		return true
	} else if p.ClusterName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ClusterName, *src) != 0 {
		return false
	}
	return true
}

type TMaterializedViewsMetadataParams struct {
	Database         *string              `thrift:"database,1,optional" frugal:"1,optional,string" json:"database,omitempty"`
	CurrentUserIdent *types.TUserIdentity `thrift:"current_user_ident,2,optional" frugal:"2,optional,types.TUserIdentity" json:"current_user_ident,omitempty"`
}

func NewTMaterializedViewsMetadataParams() *TMaterializedViewsMetadataParams {
	return &TMaterializedViewsMetadataParams{}
}

func (p *TMaterializedViewsMetadataParams) InitDefault() {
}

var TMaterializedViewsMetadataParams_Database_DEFAULT string

func (p *TMaterializedViewsMetadataParams) GetDatabase() (v string) {
	if !p.IsSetDatabase() {
		return TMaterializedViewsMetadataParams_Database_DEFAULT
	}
	return *p.Database
}

var TMaterializedViewsMetadataParams_CurrentUserIdent_DEFAULT *types.TUserIdentity

func (p *TMaterializedViewsMetadataParams) GetCurrentUserIdent() (v *types.TUserIdentity) {
	if !p.IsSetCurrentUserIdent() {
		return TMaterializedViewsMetadataParams_CurrentUserIdent_DEFAULT
	}
	return p.CurrentUserIdent
}
func (p *TMaterializedViewsMetadataParams) SetDatabase(val *string) {
	p.Database = val
}
func (p *TMaterializedViewsMetadataParams) SetCurrentUserIdent(val *types.TUserIdentity) {
	p.CurrentUserIdent = val
}

var fieldIDToName_TMaterializedViewsMetadataParams = map[int16]string{
	1: "database",
	2: "current_user_ident",
}

func (p *TMaterializedViewsMetadataParams) IsSetDatabase() bool {
	return p.Database != nil
}

func (p *TMaterializedViewsMetadataParams) IsSetCurrentUserIdent() bool {
	return p.CurrentUserIdent != nil
}

func (p *TMaterializedViewsMetadataParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMaterializedViewsMetadataParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TMaterializedViewsMetadataParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Database = _field
	return nil
}
func (p *TMaterializedViewsMetadataParams) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTUserIdentity()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CurrentUserIdent = _field
	return nil
}

func (p *TMaterializedViewsMetadataParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMaterializedViewsMetadataParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMaterializedViewsMetadataParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDatabase() {
		if err = oprot.WriteFieldBegin("database", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Database); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMaterializedViewsMetadataParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentUserIdent() {
		if err = oprot.WriteFieldBegin("current_user_ident", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CurrentUserIdent.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TMaterializedViewsMetadataParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMaterializedViewsMetadataParams(%+v)", *p)

}

func (p *TMaterializedViewsMetadataParams) DeepEqual(ano *TMaterializedViewsMetadataParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Database) {
		return false
	}
	if !p.Field2DeepEqual(ano.CurrentUserIdent) {
		return false
	}
	return true
}

func (p *TMaterializedViewsMetadataParams) Field1DeepEqual(src *string) bool {

	if p.Database == src {
		return true
	} else if p.Database == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Database, *src) != 0 {
		return false
	}
	return true
}
func (p *TMaterializedViewsMetadataParams) Field2DeepEqual(src *types.TUserIdentity) bool {

	if !p.CurrentUserIdent.DeepEqual(src) {
		return false
	}
	return true
}

type TPartitionsMetadataParams struct {
	Catalog  *string `thrift:"catalog,1,optional" frugal:"1,optional,string" json:"catalog,omitempty"`
	Database *string `thrift:"database,2,optional" frugal:"2,optional,string" json:"database,omitempty"`
	Table    *string `thrift:"table,3,optional" frugal:"3,optional,string" json:"table,omitempty"`
}

func NewTPartitionsMetadataParams() *TPartitionsMetadataParams {
	return &TPartitionsMetadataParams{}
}

func (p *TPartitionsMetadataParams) InitDefault() {
}

var TPartitionsMetadataParams_Catalog_DEFAULT string

func (p *TPartitionsMetadataParams) GetCatalog() (v string) {
	if !p.IsSetCatalog() {
		return TPartitionsMetadataParams_Catalog_DEFAULT
	}
	return *p.Catalog
}

var TPartitionsMetadataParams_Database_DEFAULT string

func (p *TPartitionsMetadataParams) GetDatabase() (v string) {
	if !p.IsSetDatabase() {
		return TPartitionsMetadataParams_Database_DEFAULT
	}
	return *p.Database
}

var TPartitionsMetadataParams_Table_DEFAULT string

func (p *TPartitionsMetadataParams) GetTable() (v string) {
	if !p.IsSetTable() {
		return TPartitionsMetadataParams_Table_DEFAULT
	}
	return *p.Table
}
func (p *TPartitionsMetadataParams) SetCatalog(val *string) {
	p.Catalog = val
}
func (p *TPartitionsMetadataParams) SetDatabase(val *string) {
	p.Database = val
}
func (p *TPartitionsMetadataParams) SetTable(val *string) {
	p.Table = val
}

var fieldIDToName_TPartitionsMetadataParams = map[int16]string{
	1: "catalog",
	2: "database",
	3: "table",
}

func (p *TPartitionsMetadataParams) IsSetCatalog() bool {
	return p.Catalog != nil
}

func (p *TPartitionsMetadataParams) IsSetDatabase() bool {
	return p.Database != nil
}

func (p *TPartitionsMetadataParams) IsSetTable() bool {
	return p.Table != nil
}

func (p *TPartitionsMetadataParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPartitionsMetadataParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TPartitionsMetadataParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Catalog = _field
	return nil
}
func (p *TPartitionsMetadataParams) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Database = _field
	return nil
}
func (p *TPartitionsMetadataParams) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Table = _field
	return nil
}

func (p *TPartitionsMetadataParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPartitionsMetadataParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPartitionsMetadataParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalog() {
		if err = oprot.WriteFieldBegin("catalog", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Catalog); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPartitionsMetadataParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDatabase() {
		if err = oprot.WriteFieldBegin("database", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Database); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPartitionsMetadataParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTable() {
		if err = oprot.WriteFieldBegin("table", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Table); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPartitionsMetadataParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPartitionsMetadataParams(%+v)", *p)

}

func (p *TPartitionsMetadataParams) DeepEqual(ano *TPartitionsMetadataParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Catalog) {
		return false
	}
	if !p.Field2DeepEqual(ano.Database) {
		return false
	}
	if !p.Field3DeepEqual(ano.Table) {
		return false
	}
	return true
}

func (p *TPartitionsMetadataParams) Field1DeepEqual(src *string) bool {

	if p.Catalog == src {
		return true
	} else if p.Catalog == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Catalog, *src) != 0 {
		return false
	}
	return true
}
func (p *TPartitionsMetadataParams) Field2DeepEqual(src *string) bool {

	if p.Database == src {
		return true
	} else if p.Database == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Database, *src) != 0 {
		return false
	}
	return true
}
func (p *TPartitionsMetadataParams) Field3DeepEqual(src *string) bool {

	if p.Table == src {
		return true
	} else if p.Table == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Table, *src) != 0 {
		return false
	}
	return true
}

type TJobsMetadataParams struct {
	Type             *string              `thrift:"type,1,optional" frugal:"1,optional,string" json:"type,omitempty"`
	CurrentUserIdent *types.TUserIdentity `thrift:"current_user_ident,2,optional" frugal:"2,optional,types.TUserIdentity" json:"current_user_ident,omitempty"`
}

func NewTJobsMetadataParams() *TJobsMetadataParams {
	return &TJobsMetadataParams{}
}

func (p *TJobsMetadataParams) InitDefault() {
}

var TJobsMetadataParams_Type_DEFAULT string

func (p *TJobsMetadataParams) GetType() (v string) {
	if !p.IsSetType() {
		return TJobsMetadataParams_Type_DEFAULT
	}
	return *p.Type
}

var TJobsMetadataParams_CurrentUserIdent_DEFAULT *types.TUserIdentity

func (p *TJobsMetadataParams) GetCurrentUserIdent() (v *types.TUserIdentity) {
	if !p.IsSetCurrentUserIdent() {
		return TJobsMetadataParams_CurrentUserIdent_DEFAULT
	}
	return p.CurrentUserIdent
}
func (p *TJobsMetadataParams) SetType(val *string) {
	p.Type = val
}
func (p *TJobsMetadataParams) SetCurrentUserIdent(val *types.TUserIdentity) {
	p.CurrentUserIdent = val
}

var fieldIDToName_TJobsMetadataParams = map[int16]string{
	1: "type",
	2: "current_user_ident",
}

func (p *TJobsMetadataParams) IsSetType() bool {
	return p.Type != nil
}

func (p *TJobsMetadataParams) IsSetCurrentUserIdent() bool {
	return p.CurrentUserIdent != nil
}

func (p *TJobsMetadataParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TJobsMetadataParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TJobsMetadataParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}
func (p *TJobsMetadataParams) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTUserIdentity()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CurrentUserIdent = _field
	return nil
}

func (p *TJobsMetadataParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TJobsMetadataParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TJobsMetadataParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TJobsMetadataParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentUserIdent() {
		if err = oprot.WriteFieldBegin("current_user_ident", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CurrentUserIdent.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TJobsMetadataParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TJobsMetadataParams(%+v)", *p)

}

func (p *TJobsMetadataParams) DeepEqual(ano *TJobsMetadataParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.CurrentUserIdent) {
		return false
	}
	return true
}

func (p *TJobsMetadataParams) Field1DeepEqual(src *string) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}
func (p *TJobsMetadataParams) Field2DeepEqual(src *types.TUserIdentity) bool {

	if !p.CurrentUserIdent.DeepEqual(src) {
		return false
	}
	return true
}

type TTasksMetadataParams struct {
	Type             *string              `thrift:"type,1,optional" frugal:"1,optional,string" json:"type,omitempty"`
	CurrentUserIdent *types.TUserIdentity `thrift:"current_user_ident,2,optional" frugal:"2,optional,types.TUserIdentity" json:"current_user_ident,omitempty"`
}

func NewTTasksMetadataParams() *TTasksMetadataParams {
	return &TTasksMetadataParams{}
}

func (p *TTasksMetadataParams) InitDefault() {
}

var TTasksMetadataParams_Type_DEFAULT string

func (p *TTasksMetadataParams) GetType() (v string) {
	if !p.IsSetType() {
		return TTasksMetadataParams_Type_DEFAULT
	}
	return *p.Type
}

var TTasksMetadataParams_CurrentUserIdent_DEFAULT *types.TUserIdentity

func (p *TTasksMetadataParams) GetCurrentUserIdent() (v *types.TUserIdentity) {
	if !p.IsSetCurrentUserIdent() {
		return TTasksMetadataParams_CurrentUserIdent_DEFAULT
	}
	return p.CurrentUserIdent
}
func (p *TTasksMetadataParams) SetType(val *string) {
	p.Type = val
}
func (p *TTasksMetadataParams) SetCurrentUserIdent(val *types.TUserIdentity) {
	p.CurrentUserIdent = val
}

var fieldIDToName_TTasksMetadataParams = map[int16]string{
	1: "type",
	2: "current_user_ident",
}

func (p *TTasksMetadataParams) IsSetType() bool {
	return p.Type != nil
}

func (p *TTasksMetadataParams) IsSetCurrentUserIdent() bool {
	return p.CurrentUserIdent != nil
}

func (p *TTasksMetadataParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTasksMetadataParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTasksMetadataParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}
func (p *TTasksMetadataParams) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTUserIdentity()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CurrentUserIdent = _field
	return nil
}

func (p *TTasksMetadataParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTasksMetadataParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTasksMetadataParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTasksMetadataParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentUserIdent() {
		if err = oprot.WriteFieldBegin("current_user_ident", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CurrentUserIdent.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTasksMetadataParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTasksMetadataParams(%+v)", *p)

}

func (p *TTasksMetadataParams) DeepEqual(ano *TTasksMetadataParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.CurrentUserIdent) {
		return false
	}
	return true
}

func (p *TTasksMetadataParams) Field1DeepEqual(src *string) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}
func (p *TTasksMetadataParams) Field2DeepEqual(src *types.TUserIdentity) bool {

	if !p.CurrentUserIdent.DeepEqual(src) {
		return false
	}
	return true
}

type TQueriesMetadataParams struct {
	ClusterName             *string                           `thrift:"cluster_name,1,optional" frugal:"1,optional,string" json:"cluster_name,omitempty"`
	RelayToOtherFe          *bool                             `thrift:"relay_to_other_fe,2,optional" frugal:"2,optional,bool" json:"relay_to_other_fe,omitempty"`
	MaterializedViewsParams *TMaterializedViewsMetadataParams `thrift:"materialized_views_params,3,optional" frugal:"3,optional,TMaterializedViewsMetadataParams" json:"materialized_views_params,omitempty"`
	JobsParams              *TJobsMetadataParams              `thrift:"jobs_params,4,optional" frugal:"4,optional,TJobsMetadataParams" json:"jobs_params,omitempty"`
	TasksParams             *TTasksMetadataParams             `thrift:"tasks_params,5,optional" frugal:"5,optional,TTasksMetadataParams" json:"tasks_params,omitempty"`
	PartitionsParams        *TPartitionsMetadataParams        `thrift:"partitions_params,6,optional" frugal:"6,optional,TPartitionsMetadataParams" json:"partitions_params,omitempty"`
}

func NewTQueriesMetadataParams() *TQueriesMetadataParams {
	return &TQueriesMetadataParams{}
}

func (p *TQueriesMetadataParams) InitDefault() {
}

var TQueriesMetadataParams_ClusterName_DEFAULT string

func (p *TQueriesMetadataParams) GetClusterName() (v string) {
	if !p.IsSetClusterName() {
		return TQueriesMetadataParams_ClusterName_DEFAULT
	}
	return *p.ClusterName
}

var TQueriesMetadataParams_RelayToOtherFe_DEFAULT bool

func (p *TQueriesMetadataParams) GetRelayToOtherFe() (v bool) {
	if !p.IsSetRelayToOtherFe() {
		return TQueriesMetadataParams_RelayToOtherFe_DEFAULT
	}
	return *p.RelayToOtherFe
}

var TQueriesMetadataParams_MaterializedViewsParams_DEFAULT *TMaterializedViewsMetadataParams

func (p *TQueriesMetadataParams) GetMaterializedViewsParams() (v *TMaterializedViewsMetadataParams) {
	if !p.IsSetMaterializedViewsParams() {
		return TQueriesMetadataParams_MaterializedViewsParams_DEFAULT
	}
	return p.MaterializedViewsParams
}

var TQueriesMetadataParams_JobsParams_DEFAULT *TJobsMetadataParams

func (p *TQueriesMetadataParams) GetJobsParams() (v *TJobsMetadataParams) {
	if !p.IsSetJobsParams() {
		return TQueriesMetadataParams_JobsParams_DEFAULT
	}
	return p.JobsParams
}

var TQueriesMetadataParams_TasksParams_DEFAULT *TTasksMetadataParams

func (p *TQueriesMetadataParams) GetTasksParams() (v *TTasksMetadataParams) {
	if !p.IsSetTasksParams() {
		return TQueriesMetadataParams_TasksParams_DEFAULT
	}
	return p.TasksParams
}

var TQueriesMetadataParams_PartitionsParams_DEFAULT *TPartitionsMetadataParams

func (p *TQueriesMetadataParams) GetPartitionsParams() (v *TPartitionsMetadataParams) {
	if !p.IsSetPartitionsParams() {
		return TQueriesMetadataParams_PartitionsParams_DEFAULT
	}
	return p.PartitionsParams
}
func (p *TQueriesMetadataParams) SetClusterName(val *string) {
	p.ClusterName = val
}
func (p *TQueriesMetadataParams) SetRelayToOtherFe(val *bool) {
	p.RelayToOtherFe = val
}
func (p *TQueriesMetadataParams) SetMaterializedViewsParams(val *TMaterializedViewsMetadataParams) {
	p.MaterializedViewsParams = val
}
func (p *TQueriesMetadataParams) SetJobsParams(val *TJobsMetadataParams) {
	p.JobsParams = val
}
func (p *TQueriesMetadataParams) SetTasksParams(val *TTasksMetadataParams) {
	p.TasksParams = val
}
func (p *TQueriesMetadataParams) SetPartitionsParams(val *TPartitionsMetadataParams) {
	p.PartitionsParams = val
}

var fieldIDToName_TQueriesMetadataParams = map[int16]string{
	1: "cluster_name",
	2: "relay_to_other_fe",
	3: "materialized_views_params",
	4: "jobs_params",
	5: "tasks_params",
	6: "partitions_params",
}

func (p *TQueriesMetadataParams) IsSetClusterName() bool {
	return p.ClusterName != nil
}

func (p *TQueriesMetadataParams) IsSetRelayToOtherFe() bool {
	return p.RelayToOtherFe != nil
}

func (p *TQueriesMetadataParams) IsSetMaterializedViewsParams() bool {
	return p.MaterializedViewsParams != nil
}

func (p *TQueriesMetadataParams) IsSetJobsParams() bool {
	return p.JobsParams != nil
}

func (p *TQueriesMetadataParams) IsSetTasksParams() bool {
	return p.TasksParams != nil
}

func (p *TQueriesMetadataParams) IsSetPartitionsParams() bool {
	return p.PartitionsParams != nil
}

func (p *TQueriesMetadataParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TQueriesMetadataParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TQueriesMetadataParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ClusterName = _field
	return nil
}
func (p *TQueriesMetadataParams) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RelayToOtherFe = _field
	return nil
}
func (p *TQueriesMetadataParams) ReadField3(iprot thrift.TProtocol) error {
	_field := NewTMaterializedViewsMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MaterializedViewsParams = _field
	return nil
}
func (p *TQueriesMetadataParams) ReadField4(iprot thrift.TProtocol) error {
	_field := NewTJobsMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.JobsParams = _field
	return nil
}
func (p *TQueriesMetadataParams) ReadField5(iprot thrift.TProtocol) error {
	_field := NewTTasksMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TasksParams = _field
	return nil
}
func (p *TQueriesMetadataParams) ReadField6(iprot thrift.TProtocol) error {
	_field := NewTPartitionsMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PartitionsParams = _field
	return nil
}

func (p *TQueriesMetadataParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TQueriesMetadataParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TQueriesMetadataParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetClusterName() {
		if err = oprot.WriteFieldBegin("cluster_name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ClusterName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TQueriesMetadataParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelayToOtherFe() {
		if err = oprot.WriteFieldBegin("relay_to_other_fe", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.RelayToOtherFe); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TQueriesMetadataParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaterializedViewsParams() {
		if err = oprot.WriteFieldBegin("materialized_views_params", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MaterializedViewsParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TQueriesMetadataParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobsParams() {
		if err = oprot.WriteFieldBegin("jobs_params", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.JobsParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TQueriesMetadataParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTasksParams() {
		if err = oprot.WriteFieldBegin("tasks_params", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TasksParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TQueriesMetadataParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionsParams() {
		if err = oprot.WriteFieldBegin("partitions_params", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PartitionsParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TQueriesMetadataParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TQueriesMetadataParams(%+v)", *p)

}

func (p *TQueriesMetadataParams) DeepEqual(ano *TQueriesMetadataParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterName) {
		return false
	}
	if !p.Field2DeepEqual(ano.RelayToOtherFe) {
		return false
	}
	if !p.Field3DeepEqual(ano.MaterializedViewsParams) {
		return false
	}
	if !p.Field4DeepEqual(ano.JobsParams) {
		return false
	}
	if !p.Field5DeepEqual(ano.TasksParams) {
		return false
	}
	if !p.Field6DeepEqual(ano.PartitionsParams) {
		return false
	}
	return true
}

func (p *TQueriesMetadataParams) Field1DeepEqual(src *string) bool {

	if p.ClusterName == src {
		return true
	} else if p.ClusterName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ClusterName, *src) != 0 {
		return false
	}
	return true
}
func (p *TQueriesMetadataParams) Field2DeepEqual(src *bool) bool {

	if p.RelayToOtherFe == src {
		return true
	} else if p.RelayToOtherFe == nil || src == nil {
		return false
	}
	if *p.RelayToOtherFe != *src {
		return false
	}
	return true
}
func (p *TQueriesMetadataParams) Field3DeepEqual(src *TMaterializedViewsMetadataParams) bool {

	if !p.MaterializedViewsParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TQueriesMetadataParams) Field4DeepEqual(src *TJobsMetadataParams) bool {

	if !p.JobsParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TQueriesMetadataParams) Field5DeepEqual(src *TTasksMetadataParams) bool {

	if !p.TasksParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TQueriesMetadataParams) Field6DeepEqual(src *TPartitionsMetadataParams) bool {

	if !p.PartitionsParams.DeepEqual(src) {
		return false
	}
	return true
}

type TMetaScanRange struct {
	MetadataType            *types.TMetadataType              `thrift:"metadata_type,1,optional" frugal:"1,optional,TMetadataType" json:"metadata_type,omitempty"`
	IcebergParams           *TIcebergMetadataParams           `thrift:"iceberg_params,2,optional" frugal:"2,optional,TIcebergMetadataParams" json:"iceberg_params,omitempty"`
	BackendsParams          *TBackendsMetadataParams          `thrift:"backends_params,3,optional" frugal:"3,optional,TBackendsMetadataParams" json:"backends_params,omitempty"`
	FrontendsParams         *TFrontendsMetadataParams         `thrift:"frontends_params,4,optional" frugal:"4,optional,TFrontendsMetadataParams" json:"frontends_params,omitempty"`
	QueriesParams           *TQueriesMetadataParams           `thrift:"queries_params,5,optional" frugal:"5,optional,TQueriesMetadataParams" json:"queries_params,omitempty"`
	MaterializedViewsParams *TMaterializedViewsMetadataParams `thrift:"materialized_views_params,6,optional" frugal:"6,optional,TMaterializedViewsMetadataParams" json:"materialized_views_params,omitempty"`
	JobsParams              *TJobsMetadataParams              `thrift:"jobs_params,7,optional" frugal:"7,optional,TJobsMetadataParams" json:"jobs_params,omitempty"`
	TasksParams             *TTasksMetadataParams             `thrift:"tasks_params,8,optional" frugal:"8,optional,TTasksMetadataParams" json:"tasks_params,omitempty"`
	PartitionsParams        *TPartitionsMetadataParams        `thrift:"partitions_params,9,optional" frugal:"9,optional,TPartitionsMetadataParams" json:"partitions_params,omitempty"`
}

func NewTMetaScanRange() *TMetaScanRange {
	return &TMetaScanRange{}
}

func (p *TMetaScanRange) InitDefault() {
}

var TMetaScanRange_MetadataType_DEFAULT types.TMetadataType

func (p *TMetaScanRange) GetMetadataType() (v types.TMetadataType) {
	if !p.IsSetMetadataType() {
		return TMetaScanRange_MetadataType_DEFAULT
	}
	return *p.MetadataType
}

var TMetaScanRange_IcebergParams_DEFAULT *TIcebergMetadataParams

func (p *TMetaScanRange) GetIcebergParams() (v *TIcebergMetadataParams) {
	if !p.IsSetIcebergParams() {
		return TMetaScanRange_IcebergParams_DEFAULT
	}
	return p.IcebergParams
}

var TMetaScanRange_BackendsParams_DEFAULT *TBackendsMetadataParams

func (p *TMetaScanRange) GetBackendsParams() (v *TBackendsMetadataParams) {
	if !p.IsSetBackendsParams() {
		return TMetaScanRange_BackendsParams_DEFAULT
	}
	return p.BackendsParams
}

var TMetaScanRange_FrontendsParams_DEFAULT *TFrontendsMetadataParams

func (p *TMetaScanRange) GetFrontendsParams() (v *TFrontendsMetadataParams) {
	if !p.IsSetFrontendsParams() {
		return TMetaScanRange_FrontendsParams_DEFAULT
	}
	return p.FrontendsParams
}

var TMetaScanRange_QueriesParams_DEFAULT *TQueriesMetadataParams

func (p *TMetaScanRange) GetQueriesParams() (v *TQueriesMetadataParams) {
	if !p.IsSetQueriesParams() {
		return TMetaScanRange_QueriesParams_DEFAULT
	}
	return p.QueriesParams
}

var TMetaScanRange_MaterializedViewsParams_DEFAULT *TMaterializedViewsMetadataParams

func (p *TMetaScanRange) GetMaterializedViewsParams() (v *TMaterializedViewsMetadataParams) {
	if !p.IsSetMaterializedViewsParams() {
		return TMetaScanRange_MaterializedViewsParams_DEFAULT
	}
	return p.MaterializedViewsParams
}

var TMetaScanRange_JobsParams_DEFAULT *TJobsMetadataParams

func (p *TMetaScanRange) GetJobsParams() (v *TJobsMetadataParams) {
	if !p.IsSetJobsParams() {
		return TMetaScanRange_JobsParams_DEFAULT
	}
	return p.JobsParams
}

var TMetaScanRange_TasksParams_DEFAULT *TTasksMetadataParams

func (p *TMetaScanRange) GetTasksParams() (v *TTasksMetadataParams) {
	if !p.IsSetTasksParams() {
		return TMetaScanRange_TasksParams_DEFAULT
	}
	return p.TasksParams
}

var TMetaScanRange_PartitionsParams_DEFAULT *TPartitionsMetadataParams

func (p *TMetaScanRange) GetPartitionsParams() (v *TPartitionsMetadataParams) {
	if !p.IsSetPartitionsParams() {
		return TMetaScanRange_PartitionsParams_DEFAULT
	}
	return p.PartitionsParams
}
func (p *TMetaScanRange) SetMetadataType(val *types.TMetadataType) {
	p.MetadataType = val
}
func (p *TMetaScanRange) SetIcebergParams(val *TIcebergMetadataParams) {
	p.IcebergParams = val
}
func (p *TMetaScanRange) SetBackendsParams(val *TBackendsMetadataParams) {
	p.BackendsParams = val
}
func (p *TMetaScanRange) SetFrontendsParams(val *TFrontendsMetadataParams) {
	p.FrontendsParams = val
}
func (p *TMetaScanRange) SetQueriesParams(val *TQueriesMetadataParams) {
	p.QueriesParams = val
}
func (p *TMetaScanRange) SetMaterializedViewsParams(val *TMaterializedViewsMetadataParams) {
	p.MaterializedViewsParams = val
}
func (p *TMetaScanRange) SetJobsParams(val *TJobsMetadataParams) {
	p.JobsParams = val
}
func (p *TMetaScanRange) SetTasksParams(val *TTasksMetadataParams) {
	p.TasksParams = val
}
func (p *TMetaScanRange) SetPartitionsParams(val *TPartitionsMetadataParams) {
	p.PartitionsParams = val
}

var fieldIDToName_TMetaScanRange = map[int16]string{
	1: "metadata_type",
	2: "iceberg_params",
	3: "backends_params",
	4: "frontends_params",
	5: "queries_params",
	6: "materialized_views_params",
	7: "jobs_params",
	8: "tasks_params",
	9: "partitions_params",
}

func (p *TMetaScanRange) IsSetMetadataType() bool {
	return p.MetadataType != nil
}

func (p *TMetaScanRange) IsSetIcebergParams() bool {
	return p.IcebergParams != nil
}

func (p *TMetaScanRange) IsSetBackendsParams() bool {
	return p.BackendsParams != nil
}

func (p *TMetaScanRange) IsSetFrontendsParams() bool {
	return p.FrontendsParams != nil
}

func (p *TMetaScanRange) IsSetQueriesParams() bool {
	return p.QueriesParams != nil
}

func (p *TMetaScanRange) IsSetMaterializedViewsParams() bool {
	return p.MaterializedViewsParams != nil
}

func (p *TMetaScanRange) IsSetJobsParams() bool {
	return p.JobsParams != nil
}

func (p *TMetaScanRange) IsSetTasksParams() bool {
	return p.TasksParams != nil
}

func (p *TMetaScanRange) IsSetPartitionsParams() bool {
	return p.PartitionsParams != nil
}

func (p *TMetaScanRange) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMetaScanRange[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TMetaScanRange) ReadField1(iprot thrift.TProtocol) error {

	var _field *types.TMetadataType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TMetadataType(v)
		_field = &tmp
	}
	p.MetadataType = _field
	return nil
}
func (p *TMetaScanRange) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTIcebergMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.IcebergParams = _field
	return nil
}
func (p *TMetaScanRange) ReadField3(iprot thrift.TProtocol) error {
	_field := NewTBackendsMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BackendsParams = _field
	return nil
}
func (p *TMetaScanRange) ReadField4(iprot thrift.TProtocol) error {
	_field := NewTFrontendsMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FrontendsParams = _field
	return nil
}
func (p *TMetaScanRange) ReadField5(iprot thrift.TProtocol) error {
	_field := NewTQueriesMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueriesParams = _field
	return nil
}
func (p *TMetaScanRange) ReadField6(iprot thrift.TProtocol) error {
	_field := NewTMaterializedViewsMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MaterializedViewsParams = _field
	return nil
}
func (p *TMetaScanRange) ReadField7(iprot thrift.TProtocol) error {
	_field := NewTJobsMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.JobsParams = _field
	return nil
}
func (p *TMetaScanRange) ReadField8(iprot thrift.TProtocol) error {
	_field := NewTTasksMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TasksParams = _field
	return nil
}
func (p *TMetaScanRange) ReadField9(iprot thrift.TProtocol) error {
	_field := NewTPartitionsMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PartitionsParams = _field
	return nil
}

func (p *TMetaScanRange) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMetaScanRange"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMetaScanRange) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetadataType() {
		if err = oprot.WriteFieldBegin("metadata_type", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.MetadataType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMetaScanRange) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIcebergParams() {
		if err = oprot.WriteFieldBegin("iceberg_params", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.IcebergParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TMetaScanRange) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackendsParams() {
		if err = oprot.WriteFieldBegin("backends_params", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BackendsParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TMetaScanRange) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFrontendsParams() {
		if err = oprot.WriteFieldBegin("frontends_params", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FrontendsParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TMetaScanRange) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueriesParams() {
		if err = oprot.WriteFieldBegin("queries_params", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.QueriesParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TMetaScanRange) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaterializedViewsParams() {
		if err = oprot.WriteFieldBegin("materialized_views_params", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MaterializedViewsParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TMetaScanRange) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobsParams() {
		if err = oprot.WriteFieldBegin("jobs_params", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.JobsParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TMetaScanRange) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTasksParams() {
		if err = oprot.WriteFieldBegin("tasks_params", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TasksParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TMetaScanRange) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionsParams() {
		if err = oprot.WriteFieldBegin("partitions_params", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PartitionsParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TMetaScanRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMetaScanRange(%+v)", *p)

}

func (p *TMetaScanRange) DeepEqual(ano *TMetaScanRange) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MetadataType) {
		return false
	}
	if !p.Field2DeepEqual(ano.IcebergParams) {
		return false
	}
	if !p.Field3DeepEqual(ano.BackendsParams) {
		return false
	}
	if !p.Field4DeepEqual(ano.FrontendsParams) {
		return false
	}
	if !p.Field5DeepEqual(ano.QueriesParams) {
		return false
	}
	if !p.Field6DeepEqual(ano.MaterializedViewsParams) {
		return false
	}
	if !p.Field7DeepEqual(ano.JobsParams) {
		return false
	}
	if !p.Field8DeepEqual(ano.TasksParams) {
		return false
	}
	if !p.Field9DeepEqual(ano.PartitionsParams) {
		return false
	}
	return true
}

func (p *TMetaScanRange) Field1DeepEqual(src *types.TMetadataType) bool {

	if p.MetadataType == src {
		return true
	} else if p.MetadataType == nil || src == nil {
		return false
	}
	if *p.MetadataType != *src {
		return false
	}
	return true
}
func (p *TMetaScanRange) Field2DeepEqual(src *TIcebergMetadataParams) bool {

	if !p.IcebergParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMetaScanRange) Field3DeepEqual(src *TBackendsMetadataParams) bool {

	if !p.BackendsParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMetaScanRange) Field4DeepEqual(src *TFrontendsMetadataParams) bool {

	if !p.FrontendsParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMetaScanRange) Field5DeepEqual(src *TQueriesMetadataParams) bool {

	if !p.QueriesParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMetaScanRange) Field6DeepEqual(src *TMaterializedViewsMetadataParams) bool {

	if !p.MaterializedViewsParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMetaScanRange) Field7DeepEqual(src *TJobsMetadataParams) bool {

	if !p.JobsParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMetaScanRange) Field8DeepEqual(src *TTasksMetadataParams) bool {

	if !p.TasksParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMetaScanRange) Field9DeepEqual(src *TPartitionsMetadataParams) bool {

	if !p.PartitionsParams.DeepEqual(src) {
		return false
	}
	return true
}

type TScanRange struct {
	PaloScanRange    *TPaloScanRange     `thrift:"palo_scan_range,4,optional" frugal:"4,optional,TPaloScanRange" json:"palo_scan_range,omitempty"`
	KuduScanToken    []byte              `thrift:"kudu_scan_token,5,optional" frugal:"5,optional,binary" json:"kudu_scan_token,omitempty"`
	BrokerScanRange  *TBrokerScanRange   `thrift:"broker_scan_range,6,optional" frugal:"6,optional,TBrokerScanRange" json:"broker_scan_range,omitempty"`
	EsScanRange      *TEsScanRange       `thrift:"es_scan_range,7,optional" frugal:"7,optional,TEsScanRange" json:"es_scan_range,omitempty"`
	ExtScanRange     *TExternalScanRange `thrift:"ext_scan_range,8,optional" frugal:"8,optional,TExternalScanRange" json:"ext_scan_range,omitempty"`
	DataGenScanRange *TDataGenScanRange  `thrift:"data_gen_scan_range,9,optional" frugal:"9,optional,TDataGenScanRange" json:"data_gen_scan_range,omitempty"`
	MetaScanRange    *TMetaScanRange     `thrift:"meta_scan_range,10,optional" frugal:"10,optional,TMetaScanRange" json:"meta_scan_range,omitempty"`
}

func NewTScanRange() *TScanRange {
	return &TScanRange{}
}

func (p *TScanRange) InitDefault() {
}

var TScanRange_PaloScanRange_DEFAULT *TPaloScanRange

func (p *TScanRange) GetPaloScanRange() (v *TPaloScanRange) {
	if !p.IsSetPaloScanRange() {
		return TScanRange_PaloScanRange_DEFAULT
	}
	return p.PaloScanRange
}

var TScanRange_KuduScanToken_DEFAULT []byte

func (p *TScanRange) GetKuduScanToken() (v []byte) {
	if !p.IsSetKuduScanToken() {
		return TScanRange_KuduScanToken_DEFAULT
	}
	return p.KuduScanToken
}

var TScanRange_BrokerScanRange_DEFAULT *TBrokerScanRange

func (p *TScanRange) GetBrokerScanRange() (v *TBrokerScanRange) {
	if !p.IsSetBrokerScanRange() {
		return TScanRange_BrokerScanRange_DEFAULT
	}
	return p.BrokerScanRange
}

var TScanRange_EsScanRange_DEFAULT *TEsScanRange

func (p *TScanRange) GetEsScanRange() (v *TEsScanRange) {
	if !p.IsSetEsScanRange() {
		return TScanRange_EsScanRange_DEFAULT
	}
	return p.EsScanRange
}

var TScanRange_ExtScanRange_DEFAULT *TExternalScanRange

func (p *TScanRange) GetExtScanRange() (v *TExternalScanRange) {
	if !p.IsSetExtScanRange() {
		return TScanRange_ExtScanRange_DEFAULT
	}
	return p.ExtScanRange
}

var TScanRange_DataGenScanRange_DEFAULT *TDataGenScanRange

func (p *TScanRange) GetDataGenScanRange() (v *TDataGenScanRange) {
	if !p.IsSetDataGenScanRange() {
		return TScanRange_DataGenScanRange_DEFAULT
	}
	return p.DataGenScanRange
}

var TScanRange_MetaScanRange_DEFAULT *TMetaScanRange

func (p *TScanRange) GetMetaScanRange() (v *TMetaScanRange) {
	if !p.IsSetMetaScanRange() {
		return TScanRange_MetaScanRange_DEFAULT
	}
	return p.MetaScanRange
}
func (p *TScanRange) SetPaloScanRange(val *TPaloScanRange) {
	p.PaloScanRange = val
}
func (p *TScanRange) SetKuduScanToken(val []byte) {
	p.KuduScanToken = val
}
func (p *TScanRange) SetBrokerScanRange(val *TBrokerScanRange) {
	p.BrokerScanRange = val
}
func (p *TScanRange) SetEsScanRange(val *TEsScanRange) {
	p.EsScanRange = val
}
func (p *TScanRange) SetExtScanRange(val *TExternalScanRange) {
	p.ExtScanRange = val
}
func (p *TScanRange) SetDataGenScanRange(val *TDataGenScanRange) {
	p.DataGenScanRange = val
}
func (p *TScanRange) SetMetaScanRange(val *TMetaScanRange) {
	p.MetaScanRange = val
}

var fieldIDToName_TScanRange = map[int16]string{
	4:  "palo_scan_range",
	5:  "kudu_scan_token",
	6:  "broker_scan_range",
	7:  "es_scan_range",
	8:  "ext_scan_range",
	9:  "data_gen_scan_range",
	10: "meta_scan_range",
}

func (p *TScanRange) IsSetPaloScanRange() bool {
	return p.PaloScanRange != nil
}

func (p *TScanRange) IsSetKuduScanToken() bool {
	return p.KuduScanToken != nil
}

func (p *TScanRange) IsSetBrokerScanRange() bool {
	return p.BrokerScanRange != nil
}

func (p *TScanRange) IsSetEsScanRange() bool {
	return p.EsScanRange != nil
}

func (p *TScanRange) IsSetExtScanRange() bool {
	return p.ExtScanRange != nil
}

func (p *TScanRange) IsSetDataGenScanRange() bool {
	return p.DataGenScanRange != nil
}

func (p *TScanRange) IsSetMetaScanRange() bool {
	return p.MetaScanRange != nil
}

func (p *TScanRange) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TScanRange[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TScanRange) ReadField4(iprot thrift.TProtocol) error {
	_field := NewTPaloScanRange()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PaloScanRange = _field
	return nil
}
func (p *TScanRange) ReadField5(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.KuduScanToken = _field
	return nil
}
func (p *TScanRange) ReadField6(iprot thrift.TProtocol) error {
	_field := NewTBrokerScanRange()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BrokerScanRange = _field
	return nil
}
func (p *TScanRange) ReadField7(iprot thrift.TProtocol) error {
	_field := NewTEsScanRange()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EsScanRange = _field
	return nil
}
func (p *TScanRange) ReadField8(iprot thrift.TProtocol) error {
	_field := NewTExternalScanRange()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ExtScanRange = _field
	return nil
}
func (p *TScanRange) ReadField9(iprot thrift.TProtocol) error {
	_field := NewTDataGenScanRange()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DataGenScanRange = _field
	return nil
}
func (p *TScanRange) ReadField10(iprot thrift.TProtocol) error {
	_field := NewTMetaScanRange()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MetaScanRange = _field
	return nil
}

func (p *TScanRange) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TScanRange"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TScanRange) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaloScanRange() {
		if err = oprot.WriteFieldBegin("palo_scan_range", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PaloScanRange.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TScanRange) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetKuduScanToken() {
		if err = oprot.WriteFieldBegin("kudu_scan_token", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBinary([]byte(p.KuduScanToken)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TScanRange) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBrokerScanRange() {
		if err = oprot.WriteFieldBegin("broker_scan_range", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BrokerScanRange.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TScanRange) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEsScanRange() {
		if err = oprot.WriteFieldBegin("es_scan_range", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EsScanRange.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TScanRange) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtScanRange() {
		if err = oprot.WriteFieldBegin("ext_scan_range", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ExtScanRange.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TScanRange) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataGenScanRange() {
		if err = oprot.WriteFieldBegin("data_gen_scan_range", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DataGenScanRange.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TScanRange) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetaScanRange() {
		if err = oprot.WriteFieldBegin("meta_scan_range", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MetaScanRange.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TScanRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScanRange(%+v)", *p)

}

func (p *TScanRange) DeepEqual(ano *TScanRange) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field4DeepEqual(ano.PaloScanRange) {
		return false
	}
	if !p.Field5DeepEqual(ano.KuduScanToken) {
		return false
	}
	if !p.Field6DeepEqual(ano.BrokerScanRange) {
		return false
	}
	if !p.Field7DeepEqual(ano.EsScanRange) {
		return false
	}
	if !p.Field8DeepEqual(ano.ExtScanRange) {
		return false
	}
	if !p.Field9DeepEqual(ano.DataGenScanRange) {
		return false
	}
	if !p.Field10DeepEqual(ano.MetaScanRange) {
		return false
	}
	return true
}

func (p *TScanRange) Field4DeepEqual(src *TPaloScanRange) bool {

	if !p.PaloScanRange.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TScanRange) Field5DeepEqual(src []byte) bool {

	if bytes.Compare(p.KuduScanToken, src) != 0 {
		return false
	}
	return true
}
func (p *TScanRange) Field6DeepEqual(src *TBrokerScanRange) bool {

	if !p.BrokerScanRange.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TScanRange) Field7DeepEqual(src *TEsScanRange) bool {

	if !p.EsScanRange.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TScanRange) Field8DeepEqual(src *TExternalScanRange) bool {

	if !p.ExtScanRange.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TScanRange) Field9DeepEqual(src *TDataGenScanRange) bool {

	if !p.DataGenScanRange.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TScanRange) Field10DeepEqual(src *TMetaScanRange) bool {

	if !p.MetaScanRange.DeepEqual(src) {
		return false
	}
	return true
}

type TMySQLScanNode struct {
	TupleId   types.TTupleId `thrift:"tuple_id,1,required" frugal:"1,required,i32" json:"tuple_id"`
	TableName string         `thrift:"table_name,2,required" frugal:"2,required,string" json:"table_name"`
	Columns   []string       `thrift:"columns,3,required" frugal:"3,required,list<string>" json:"columns"`
	Filters   []string       `thrift:"filters,4,required" frugal:"4,required,list<string>" json:"filters"`
}

func NewTMySQLScanNode() *TMySQLScanNode {
	return &TMySQLScanNode{}
}

func (p *TMySQLScanNode) InitDefault() {
}

func (p *TMySQLScanNode) GetTupleId() (v types.TTupleId) {
	return p.TupleId
}

func (p *TMySQLScanNode) GetTableName() (v string) {
	return p.TableName
}

func (p *TMySQLScanNode) GetColumns() (v []string) {
	return p.Columns
}

func (p *TMySQLScanNode) GetFilters() (v []string) {
	return p.Filters
}
func (p *TMySQLScanNode) SetTupleId(val types.TTupleId) {
	p.TupleId = val
}
func (p *TMySQLScanNode) SetTableName(val string) {
	p.TableName = val
}
func (p *TMySQLScanNode) SetColumns(val []string) {
	p.Columns = val
}
func (p *TMySQLScanNode) SetFilters(val []string) {
	p.Filters = val
}

var fieldIDToName_TMySQLScanNode = map[int16]string{
	1: "tuple_id",
	2: "table_name",
	3: "columns",
	4: "filters",
}

func (p *TMySQLScanNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTupleId bool = false
	var issetTableName bool = false
	var issetColumns bool = false
	var issetFilters bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTableName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumns = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilters = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTupleId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTableName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetColumns {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetFilters {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMySQLScanNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TMySQLScanNode[fieldId]))
}

func (p *TMySQLScanNode) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TupleId = _field
	return nil
}
func (p *TMySQLScanNode) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TableName = _field
	return nil
}
func (p *TMySQLScanNode) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Columns = _field
	return nil
}
func (p *TMySQLScanNode) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Filters = _field
	return nil
}

func (p *TMySQLScanNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMySQLScanNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMySQLScanNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tuple_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMySQLScanNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TableName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TMySQLScanNode) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columns", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
		return err
	}
	for _, v := range p.Columns {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TMySQLScanNode) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filters", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Filters)); err != nil {
		return err
	}
	for _, v := range p.Filters {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TMySQLScanNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMySQLScanNode(%+v)", *p)

}

func (p *TMySQLScanNode) DeepEqual(ano *TMySQLScanNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TupleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableName) {
		return false
	}
	if !p.Field3DeepEqual(ano.Columns) {
		return false
	}
	if !p.Field4DeepEqual(ano.Filters) {
		return false
	}
	return true
}

func (p *TMySQLScanNode) Field1DeepEqual(src types.TTupleId) bool {

	if p.TupleId != src {
		return false
	}
	return true
}
func (p *TMySQLScanNode) Field2DeepEqual(src string) bool {

	if strings.Compare(p.TableName, src) != 0 {
		return false
	}
	return true
}
func (p *TMySQLScanNode) Field3DeepEqual(src []string) bool {

	if len(p.Columns) != len(src) {
		return false
	}
	for i, v := range p.Columns {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TMySQLScanNode) Field4DeepEqual(src []string) bool {

	if len(p.Filters) != len(src) {
		return false
	}
	for i, v := range p.Filters {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type TOdbcScanNode struct {
	TupleId       *types.TTupleId       `thrift:"tuple_id,1,optional" frugal:"1,optional,i32" json:"tuple_id,omitempty"`
	TableName     *string               `thrift:"table_name,2,optional" frugal:"2,optional,string" json:"table_name,omitempty"`
	Driver        *string               `thrift:"driver,3,optional" frugal:"3,optional,string" json:"driver,omitempty"`
	Type          *types.TOdbcTableType `thrift:"type,4,optional" frugal:"4,optional,TOdbcTableType" json:"type,omitempty"`
	Columns       []string              `thrift:"columns,5,optional" frugal:"5,optional,list<string>" json:"columns,omitempty"`
	Filters       []string              `thrift:"filters,6,optional" frugal:"6,optional,list<string>" json:"filters,omitempty"`
	ConnectString *string               `thrift:"connect_string,7,optional" frugal:"7,optional,string" json:"connect_string,omitempty"`
	QueryString   *string               `thrift:"query_string,8,optional" frugal:"8,optional,string" json:"query_string,omitempty"`
}

func NewTOdbcScanNode() *TOdbcScanNode {
	return &TOdbcScanNode{}
}

func (p *TOdbcScanNode) InitDefault() {
}

var TOdbcScanNode_TupleId_DEFAULT types.TTupleId

func (p *TOdbcScanNode) GetTupleId() (v types.TTupleId) {
	if !p.IsSetTupleId() {
		return TOdbcScanNode_TupleId_DEFAULT
	}
	return *p.TupleId
}

var TOdbcScanNode_TableName_DEFAULT string

func (p *TOdbcScanNode) GetTableName() (v string) {
	if !p.IsSetTableName() {
		return TOdbcScanNode_TableName_DEFAULT
	}
	return *p.TableName
}

var TOdbcScanNode_Driver_DEFAULT string

func (p *TOdbcScanNode) GetDriver() (v string) {
	if !p.IsSetDriver() {
		return TOdbcScanNode_Driver_DEFAULT
	}
	return *p.Driver
}

var TOdbcScanNode_Type_DEFAULT types.TOdbcTableType

func (p *TOdbcScanNode) GetType() (v types.TOdbcTableType) {
	if !p.IsSetType() {
		return TOdbcScanNode_Type_DEFAULT
	}
	return *p.Type
}

var TOdbcScanNode_Columns_DEFAULT []string

func (p *TOdbcScanNode) GetColumns() (v []string) {
	if !p.IsSetColumns() {
		return TOdbcScanNode_Columns_DEFAULT
	}
	return p.Columns
}

var TOdbcScanNode_Filters_DEFAULT []string

func (p *TOdbcScanNode) GetFilters() (v []string) {
	if !p.IsSetFilters() {
		return TOdbcScanNode_Filters_DEFAULT
	}
	return p.Filters
}

var TOdbcScanNode_ConnectString_DEFAULT string

func (p *TOdbcScanNode) GetConnectString() (v string) {
	if !p.IsSetConnectString() {
		return TOdbcScanNode_ConnectString_DEFAULT
	}
	return *p.ConnectString
}

var TOdbcScanNode_QueryString_DEFAULT string

func (p *TOdbcScanNode) GetQueryString() (v string) {
	if !p.IsSetQueryString() {
		return TOdbcScanNode_QueryString_DEFAULT
	}
	return *p.QueryString
}
func (p *TOdbcScanNode) SetTupleId(val *types.TTupleId) {
	p.TupleId = val
}
func (p *TOdbcScanNode) SetTableName(val *string) {
	p.TableName = val
}
func (p *TOdbcScanNode) SetDriver(val *string) {
	p.Driver = val
}
func (p *TOdbcScanNode) SetType(val *types.TOdbcTableType) {
	p.Type = val
}
func (p *TOdbcScanNode) SetColumns(val []string) {
	p.Columns = val
}
func (p *TOdbcScanNode) SetFilters(val []string) {
	p.Filters = val
}
func (p *TOdbcScanNode) SetConnectString(val *string) {
	p.ConnectString = val
}
func (p *TOdbcScanNode) SetQueryString(val *string) {
	p.QueryString = val
}

var fieldIDToName_TOdbcScanNode = map[int16]string{
	1: "tuple_id",
	2: "table_name",
	3: "driver",
	4: "type",
	5: "columns",
	6: "filters",
	7: "connect_string",
	8: "query_string",
}

func (p *TOdbcScanNode) IsSetTupleId() bool {
	return p.TupleId != nil
}

func (p *TOdbcScanNode) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *TOdbcScanNode) IsSetDriver() bool {
	return p.Driver != nil
}

func (p *TOdbcScanNode) IsSetType() bool {
	return p.Type != nil
}

func (p *TOdbcScanNode) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TOdbcScanNode) IsSetFilters() bool {
	return p.Filters != nil
}

func (p *TOdbcScanNode) IsSetConnectString() bool {
	return p.ConnectString != nil
}

func (p *TOdbcScanNode) IsSetQueryString() bool {
	return p.QueryString != nil
}

func (p *TOdbcScanNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TOdbcScanNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TOdbcScanNode) ReadField1(iprot thrift.TProtocol) error {

	var _field *types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TupleId = _field
	return nil
}
func (p *TOdbcScanNode) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableName = _field
	return nil
}
func (p *TOdbcScanNode) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Driver = _field
	return nil
}
func (p *TOdbcScanNode) ReadField4(iprot thrift.TProtocol) error {

	var _field *types.TOdbcTableType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TOdbcTableType(v)
		_field = &tmp
	}
	p.Type = _field
	return nil
}
func (p *TOdbcScanNode) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Columns = _field
	return nil
}
func (p *TOdbcScanNode) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Filters = _field
	return nil
}
func (p *TOdbcScanNode) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ConnectString = _field
	return nil
}
func (p *TOdbcScanNode) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.QueryString = _field
	return nil
}

func (p *TOdbcScanNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TOdbcScanNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TOdbcScanNode) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTupleId() {
		if err = oprot.WriteFieldBegin("tuple_id", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TupleId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TOdbcScanNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err = oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TableName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TOdbcScanNode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDriver() {
		if err = oprot.WriteFieldBegin("driver", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Driver); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TOdbcScanNode) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TOdbcScanNode) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err = oprot.WriteFieldBegin("columns", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
			return err
		}
		for _, v := range p.Columns {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TOdbcScanNode) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilters() {
		if err = oprot.WriteFieldBegin("filters", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Filters)); err != nil {
			return err
		}
		for _, v := range p.Filters {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TOdbcScanNode) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetConnectString() {
		if err = oprot.WriteFieldBegin("connect_string", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ConnectString); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TOdbcScanNode) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryString() {
		if err = oprot.WriteFieldBegin("query_string", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.QueryString); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TOdbcScanNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TOdbcScanNode(%+v)", *p)

}

func (p *TOdbcScanNode) DeepEqual(ano *TOdbcScanNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TupleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableName) {
		return false
	}
	if !p.Field3DeepEqual(ano.Driver) {
		return false
	}
	if !p.Field4DeepEqual(ano.Type) {
		return false
	}
	if !p.Field5DeepEqual(ano.Columns) {
		return false
	}
	if !p.Field6DeepEqual(ano.Filters) {
		return false
	}
	if !p.Field7DeepEqual(ano.ConnectString) {
		return false
	}
	if !p.Field8DeepEqual(ano.QueryString) {
		return false
	}
	return true
}

func (p *TOdbcScanNode) Field1DeepEqual(src *types.TTupleId) bool {

	if p.TupleId == src {
		return true
	} else if p.TupleId == nil || src == nil {
		return false
	}
	if *p.TupleId != *src {
		return false
	}
	return true
}
func (p *TOdbcScanNode) Field2DeepEqual(src *string) bool {

	if p.TableName == src {
		return true
	} else if p.TableName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TableName, *src) != 0 {
		return false
	}
	return true
}
func (p *TOdbcScanNode) Field3DeepEqual(src *string) bool {

	if p.Driver == src {
		return true
	} else if p.Driver == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Driver, *src) != 0 {
		return false
	}
	return true
}
func (p *TOdbcScanNode) Field4DeepEqual(src *types.TOdbcTableType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if *p.Type != *src {
		return false
	}
	return true
}
func (p *TOdbcScanNode) Field5DeepEqual(src []string) bool {

	if len(p.Columns) != len(src) {
		return false
	}
	for i, v := range p.Columns {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TOdbcScanNode) Field6DeepEqual(src []string) bool {

	if len(p.Filters) != len(src) {
		return false
	}
	for i, v := range p.Filters {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TOdbcScanNode) Field7DeepEqual(src *string) bool {

	if p.ConnectString == src {
		return true
	} else if p.ConnectString == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ConnectString, *src) != 0 {
		return false
	}
	return true
}
func (p *TOdbcScanNode) Field8DeepEqual(src *string) bool {

	if p.QueryString == src {
		return true
	} else if p.QueryString == nil || src == nil {
		return false
	}
	if strings.Compare(*p.QueryString, *src) != 0 {
		return false
	}
	return true
}

type TJdbcScanNode struct {
	TupleId     *types.TTupleId       `thrift:"tuple_id,1,optional" frugal:"1,optional,i32" json:"tuple_id,omitempty"`
	TableName   *string               `thrift:"table_name,2,optional" frugal:"2,optional,string" json:"table_name,omitempty"`
	QueryString *string               `thrift:"query_string,3,optional" frugal:"3,optional,string" json:"query_string,omitempty"`
	TableType   *types.TOdbcTableType `thrift:"table_type,4,optional" frugal:"4,optional,TOdbcTableType" json:"table_type,omitempty"`
}

func NewTJdbcScanNode() *TJdbcScanNode {
	return &TJdbcScanNode{}
}

func (p *TJdbcScanNode) InitDefault() {
}

var TJdbcScanNode_TupleId_DEFAULT types.TTupleId

func (p *TJdbcScanNode) GetTupleId() (v types.TTupleId) {
	if !p.IsSetTupleId() {
		return TJdbcScanNode_TupleId_DEFAULT
	}
	return *p.TupleId
}

var TJdbcScanNode_TableName_DEFAULT string

func (p *TJdbcScanNode) GetTableName() (v string) {
	if !p.IsSetTableName() {
		return TJdbcScanNode_TableName_DEFAULT
	}
	return *p.TableName
}

var TJdbcScanNode_QueryString_DEFAULT string

func (p *TJdbcScanNode) GetQueryString() (v string) {
	if !p.IsSetQueryString() {
		return TJdbcScanNode_QueryString_DEFAULT
	}
	return *p.QueryString
}

var TJdbcScanNode_TableType_DEFAULT types.TOdbcTableType

func (p *TJdbcScanNode) GetTableType() (v types.TOdbcTableType) {
	if !p.IsSetTableType() {
		return TJdbcScanNode_TableType_DEFAULT
	}
	return *p.TableType
}
func (p *TJdbcScanNode) SetTupleId(val *types.TTupleId) {
	p.TupleId = val
}
func (p *TJdbcScanNode) SetTableName(val *string) {
	p.TableName = val
}
func (p *TJdbcScanNode) SetQueryString(val *string) {
	p.QueryString = val
}
func (p *TJdbcScanNode) SetTableType(val *types.TOdbcTableType) {
	p.TableType = val
}

var fieldIDToName_TJdbcScanNode = map[int16]string{
	1: "tuple_id",
	2: "table_name",
	3: "query_string",
	4: "table_type",
}

func (p *TJdbcScanNode) IsSetTupleId() bool {
	return p.TupleId != nil
}

func (p *TJdbcScanNode) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *TJdbcScanNode) IsSetQueryString() bool {
	return p.QueryString != nil
}

func (p *TJdbcScanNode) IsSetTableType() bool {
	return p.TableType != nil
}

func (p *TJdbcScanNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TJdbcScanNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TJdbcScanNode) ReadField1(iprot thrift.TProtocol) error {

	var _field *types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TupleId = _field
	return nil
}
func (p *TJdbcScanNode) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableName = _field
	return nil
}
func (p *TJdbcScanNode) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.QueryString = _field
	return nil
}
func (p *TJdbcScanNode) ReadField4(iprot thrift.TProtocol) error {

	var _field *types.TOdbcTableType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TOdbcTableType(v)
		_field = &tmp
	}
	p.TableType = _field
	return nil
}

func (p *TJdbcScanNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TJdbcScanNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TJdbcScanNode) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTupleId() {
		if err = oprot.WriteFieldBegin("tuple_id", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TupleId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TJdbcScanNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err = oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TableName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TJdbcScanNode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryString() {
		if err = oprot.WriteFieldBegin("query_string", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.QueryString); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TJdbcScanNode) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableType() {
		if err = oprot.WriteFieldBegin("table_type", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.TableType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TJdbcScanNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TJdbcScanNode(%+v)", *p)

}

func (p *TJdbcScanNode) DeepEqual(ano *TJdbcScanNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TupleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableName) {
		return false
	}
	if !p.Field3DeepEqual(ano.QueryString) {
		return false
	}
	if !p.Field4DeepEqual(ano.TableType) {
		return false
	}
	return true
}

func (p *TJdbcScanNode) Field1DeepEqual(src *types.TTupleId) bool {

	if p.TupleId == src {
		return true
	} else if p.TupleId == nil || src == nil {
		return false
	}
	if *p.TupleId != *src {
		return false
	}
	return true
}
func (p *TJdbcScanNode) Field2DeepEqual(src *string) bool {

	if p.TableName == src {
		return true
	} else if p.TableName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TableName, *src) != 0 {
		return false
	}
	return true
}
func (p *TJdbcScanNode) Field3DeepEqual(src *string) bool {

	if p.QueryString == src {
		return true
	} else if p.QueryString == nil || src == nil {
		return false
	}
	if strings.Compare(*p.QueryString, *src) != 0 {
		return false
	}
	return true
}
func (p *TJdbcScanNode) Field4DeepEqual(src *types.TOdbcTableType) bool {

	if p.TableType == src {
		return true
	} else if p.TableType == nil || src == nil {
		return false
	}
	if *p.TableType != *src {
		return false
	}
	return true
}

type TBrokerScanNode struct {
	TupleId        types.TTupleId                `thrift:"tuple_id,1,required" frugal:"1,required,i32" json:"tuple_id"`
	PartitionExprs []*exprs.TExpr                `thrift:"partition_exprs,2,optional" frugal:"2,optional,list<exprs.TExpr>" json:"partition_exprs,omitempty"`
	PartitionInfos []*partitions.TRangePartition `thrift:"partition_infos,3,optional" frugal:"3,optional,list<partitions.TRangePartition>" json:"partition_infos,omitempty"`
	PreFilterExprs []*exprs.TExpr                `thrift:"pre_filter_exprs,4,optional" frugal:"4,optional,list<exprs.TExpr>" json:"pre_filter_exprs,omitempty"`
}

func NewTBrokerScanNode() *TBrokerScanNode {
	return &TBrokerScanNode{}
}

func (p *TBrokerScanNode) InitDefault() {
}

func (p *TBrokerScanNode) GetTupleId() (v types.TTupleId) {
	return p.TupleId
}

var TBrokerScanNode_PartitionExprs_DEFAULT []*exprs.TExpr

func (p *TBrokerScanNode) GetPartitionExprs() (v []*exprs.TExpr) {
	if !p.IsSetPartitionExprs() {
		return TBrokerScanNode_PartitionExprs_DEFAULT
	}
	return p.PartitionExprs
}

var TBrokerScanNode_PartitionInfos_DEFAULT []*partitions.TRangePartition

func (p *TBrokerScanNode) GetPartitionInfos() (v []*partitions.TRangePartition) {
	if !p.IsSetPartitionInfos() {
		return TBrokerScanNode_PartitionInfos_DEFAULT
	}
	return p.PartitionInfos
}

var TBrokerScanNode_PreFilterExprs_DEFAULT []*exprs.TExpr

func (p *TBrokerScanNode) GetPreFilterExprs() (v []*exprs.TExpr) {
	if !p.IsSetPreFilterExprs() {
		return TBrokerScanNode_PreFilterExprs_DEFAULT
	}
	return p.PreFilterExprs
}
func (p *TBrokerScanNode) SetTupleId(val types.TTupleId) {
	p.TupleId = val
}
func (p *TBrokerScanNode) SetPartitionExprs(val []*exprs.TExpr) {
	p.PartitionExprs = val
}
func (p *TBrokerScanNode) SetPartitionInfos(val []*partitions.TRangePartition) {
	p.PartitionInfos = val
}
func (p *TBrokerScanNode) SetPreFilterExprs(val []*exprs.TExpr) {
	p.PreFilterExprs = val
}

var fieldIDToName_TBrokerScanNode = map[int16]string{
	1: "tuple_id",
	2: "partition_exprs",
	3: "partition_infos",
	4: "pre_filter_exprs",
}

func (p *TBrokerScanNode) IsSetPartitionExprs() bool {
	return p.PartitionExprs != nil
}

func (p *TBrokerScanNode) IsSetPartitionInfos() bool {
	return p.PartitionInfos != nil
}

func (p *TBrokerScanNode) IsSetPreFilterExprs() bool {
	return p.PreFilterExprs != nil
}

func (p *TBrokerScanNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTupleId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTupleId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TBrokerScanNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TBrokerScanNode[fieldId]))
}

func (p *TBrokerScanNode) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TupleId = _field
	return nil
}
func (p *TBrokerScanNode) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PartitionExprs = _field
	return nil
}
func (p *TBrokerScanNode) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*partitions.TRangePartition, 0, size)
	values := make([]partitions.TRangePartition, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PartitionInfos = _field
	return nil
}
func (p *TBrokerScanNode) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PreFilterExprs = _field
	return nil
}

func (p *TBrokerScanNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TBrokerScanNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TBrokerScanNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tuple_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TBrokerScanNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionExprs() {
		if err = oprot.WriteFieldBegin("partition_exprs", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PartitionExprs)); err != nil {
			return err
		}
		for _, v := range p.PartitionExprs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TBrokerScanNode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionInfos() {
		if err = oprot.WriteFieldBegin("partition_infos", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PartitionInfos)); err != nil {
			return err
		}
		for _, v := range p.PartitionInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TBrokerScanNode) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreFilterExprs() {
		if err = oprot.WriteFieldBegin("pre_filter_exprs", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PreFilterExprs)); err != nil {
			return err
		}
		for _, v := range p.PreFilterExprs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TBrokerScanNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBrokerScanNode(%+v)", *p)

}

func (p *TBrokerScanNode) DeepEqual(ano *TBrokerScanNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TupleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.PartitionExprs) {
		return false
	}
	if !p.Field3DeepEqual(ano.PartitionInfos) {
		return false
	}
	if !p.Field4DeepEqual(ano.PreFilterExprs) {
		return false
	}
	return true
}

func (p *TBrokerScanNode) Field1DeepEqual(src types.TTupleId) bool {

	if p.TupleId != src {
		return false
	}
	return true
}
func (p *TBrokerScanNode) Field2DeepEqual(src []*exprs.TExpr) bool {

	if len(p.PartitionExprs) != len(src) {
		return false
	}
	for i, v := range p.PartitionExprs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TBrokerScanNode) Field3DeepEqual(src []*partitions.TRangePartition) bool {

	if len(p.PartitionInfos) != len(src) {
		return false
	}
	for i, v := range p.PartitionInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TBrokerScanNode) Field4DeepEqual(src []*exprs.TExpr) bool {

	if len(p.PreFilterExprs) != len(src) {
		return false
	}
	for i, v := range p.PreFilterExprs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TFileScanNode struct {
	TupleId   *types.TTupleId `thrift:"tuple_id,1,optional" frugal:"1,optional,i32" json:"tuple_id,omitempty"`
	TableName *string         `thrift:"table_name,2,optional" frugal:"2,optional,string" json:"table_name,omitempty"`
}

func NewTFileScanNode() *TFileScanNode {
	return &TFileScanNode{}
}

func (p *TFileScanNode) InitDefault() {
}

var TFileScanNode_TupleId_DEFAULT types.TTupleId

func (p *TFileScanNode) GetTupleId() (v types.TTupleId) {
	if !p.IsSetTupleId() {
		return TFileScanNode_TupleId_DEFAULT
	}
	return *p.TupleId
}

var TFileScanNode_TableName_DEFAULT string

func (p *TFileScanNode) GetTableName() (v string) {
	if !p.IsSetTableName() {
		return TFileScanNode_TableName_DEFAULT
	}
	return *p.TableName
}
func (p *TFileScanNode) SetTupleId(val *types.TTupleId) {
	p.TupleId = val
}
func (p *TFileScanNode) SetTableName(val *string) {
	p.TableName = val
}

var fieldIDToName_TFileScanNode = map[int16]string{
	1: "tuple_id",
	2: "table_name",
}

func (p *TFileScanNode) IsSetTupleId() bool {
	return p.TupleId != nil
}

func (p *TFileScanNode) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *TFileScanNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFileScanNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TFileScanNode) ReadField1(iprot thrift.TProtocol) error {

	var _field *types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TupleId = _field
	return nil
}
func (p *TFileScanNode) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableName = _field
	return nil
}

func (p *TFileScanNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFileScanNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFileScanNode) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTupleId() {
		if err = oprot.WriteFieldBegin("tuple_id", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TupleId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFileScanNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err = oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TableName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFileScanNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFileScanNode(%+v)", *p)

}

func (p *TFileScanNode) DeepEqual(ano *TFileScanNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TupleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableName) {
		return false
	}
	return true
}

func (p *TFileScanNode) Field1DeepEqual(src *types.TTupleId) bool {

	if p.TupleId == src {
		return true
	} else if p.TupleId == nil || src == nil {
		return false
	}
	if *p.TupleId != *src {
		return false
	}
	return true
}
func (p *TFileScanNode) Field2DeepEqual(src *string) bool {

	if p.TableName == src {
		return true
	} else if p.TableName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TableName, *src) != 0 {
		return false
	}
	return true
}

type TEsScanNode struct {
	TupleId         types.TTupleId    `thrift:"tuple_id,1,required" frugal:"1,required,i32" json:"tuple_id"`
	Properties      map[string]string `thrift:"properties,2,optional" frugal:"2,optional,map<string:string>" json:"properties,omitempty"`
	DocvalueContext map[string]string `thrift:"docvalue_context,3,optional" frugal:"3,optional,map<string:string>" json:"docvalue_context,omitempty"`
	FieldsContext   map[string]string `thrift:"fields_context,4,optional" frugal:"4,optional,map<string:string>" json:"fields_context,omitempty"`
}

func NewTEsScanNode() *TEsScanNode {
	return &TEsScanNode{}
}

func (p *TEsScanNode) InitDefault() {
}

func (p *TEsScanNode) GetTupleId() (v types.TTupleId) {
	return p.TupleId
}

var TEsScanNode_Properties_DEFAULT map[string]string

func (p *TEsScanNode) GetProperties() (v map[string]string) {
	if !p.IsSetProperties() {
		return TEsScanNode_Properties_DEFAULT
	}
	return p.Properties
}

var TEsScanNode_DocvalueContext_DEFAULT map[string]string

func (p *TEsScanNode) GetDocvalueContext() (v map[string]string) {
	if !p.IsSetDocvalueContext() {
		return TEsScanNode_DocvalueContext_DEFAULT
	}
	return p.DocvalueContext
}

var TEsScanNode_FieldsContext_DEFAULT map[string]string

func (p *TEsScanNode) GetFieldsContext() (v map[string]string) {
	if !p.IsSetFieldsContext() {
		return TEsScanNode_FieldsContext_DEFAULT
	}
	return p.FieldsContext
}
func (p *TEsScanNode) SetTupleId(val types.TTupleId) {
	p.TupleId = val
}
func (p *TEsScanNode) SetProperties(val map[string]string) {
	p.Properties = val
}
func (p *TEsScanNode) SetDocvalueContext(val map[string]string) {
	p.DocvalueContext = val
}
func (p *TEsScanNode) SetFieldsContext(val map[string]string) {
	p.FieldsContext = val
}

var fieldIDToName_TEsScanNode = map[int16]string{
	1: "tuple_id",
	2: "properties",
	3: "docvalue_context",
	4: "fields_context",
}

func (p *TEsScanNode) IsSetProperties() bool {
	return p.Properties != nil
}

func (p *TEsScanNode) IsSetDocvalueContext() bool {
	return p.DocvalueContext != nil
}

func (p *TEsScanNode) IsSetFieldsContext() bool {
	return p.FieldsContext != nil
}

func (p *TEsScanNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTupleId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTupleId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TEsScanNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TEsScanNode[fieldId]))
}

func (p *TEsScanNode) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TupleId = _field
	return nil
}
func (p *TEsScanNode) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Properties = _field
	return nil
}
func (p *TEsScanNode) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.DocvalueContext = _field
	return nil
}
func (p *TEsScanNode) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.FieldsContext = _field
	return nil
}

func (p *TEsScanNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TEsScanNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TEsScanNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tuple_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TEsScanNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperties() {
		if err = oprot.WriteFieldBegin("properties", thrift.MAP, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
			return err
		}
		for k, v := range p.Properties {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TEsScanNode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDocvalueContext() {
		if err = oprot.WriteFieldBegin("docvalue_context", thrift.MAP, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.DocvalueContext)); err != nil {
			return err
		}
		for k, v := range p.DocvalueContext {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TEsScanNode) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFieldsContext() {
		if err = oprot.WriteFieldBegin("fields_context", thrift.MAP, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.FieldsContext)); err != nil {
			return err
		}
		for k, v := range p.FieldsContext {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TEsScanNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TEsScanNode(%+v)", *p)

}

func (p *TEsScanNode) DeepEqual(ano *TEsScanNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TupleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Properties) {
		return false
	}
	if !p.Field3DeepEqual(ano.DocvalueContext) {
		return false
	}
	if !p.Field4DeepEqual(ano.FieldsContext) {
		return false
	}
	return true
}

func (p *TEsScanNode) Field1DeepEqual(src types.TTupleId) bool {

	if p.TupleId != src {
		return false
	}
	return true
}
func (p *TEsScanNode) Field2DeepEqual(src map[string]string) bool {

	if len(p.Properties) != len(src) {
		return false
	}
	for k, v := range p.Properties {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TEsScanNode) Field3DeepEqual(src map[string]string) bool {

	if len(p.DocvalueContext) != len(src) {
		return false
	}
	for k, v := range p.DocvalueContext {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TEsScanNode) Field4DeepEqual(src map[string]string) bool {

	if len(p.FieldsContext) != len(src) {
		return false
	}
	for k, v := range p.FieldsContext {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type TMiniLoadEtlFunction struct {
	FunctionName     string `thrift:"function_name,1,required" frugal:"1,required,string" json:"function_name"`
	ParamColumnIndex int32  `thrift:"param_column_index,2,required" frugal:"2,required,i32" json:"param_column_index"`
}

func NewTMiniLoadEtlFunction() *TMiniLoadEtlFunction {
	return &TMiniLoadEtlFunction{}
}

func (p *TMiniLoadEtlFunction) InitDefault() {
}

func (p *TMiniLoadEtlFunction) GetFunctionName() (v string) {
	return p.FunctionName
}

func (p *TMiniLoadEtlFunction) GetParamColumnIndex() (v int32) {
	return p.ParamColumnIndex
}
func (p *TMiniLoadEtlFunction) SetFunctionName(val string) {
	p.FunctionName = val
}
func (p *TMiniLoadEtlFunction) SetParamColumnIndex(val int32) {
	p.ParamColumnIndex = val
}

var fieldIDToName_TMiniLoadEtlFunction = map[int16]string{
	1: "function_name",
	2: "param_column_index",
}

func (p *TMiniLoadEtlFunction) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFunctionName bool = false
	var issetParamColumnIndex bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFunctionName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetParamColumnIndex = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFunctionName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetParamColumnIndex {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMiniLoadEtlFunction[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TMiniLoadEtlFunction[fieldId]))
}

func (p *TMiniLoadEtlFunction) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FunctionName = _field
	return nil
}
func (p *TMiniLoadEtlFunction) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ParamColumnIndex = _field
	return nil
}

func (p *TMiniLoadEtlFunction) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMiniLoadEtlFunction"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMiniLoadEtlFunction) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("function_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FunctionName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMiniLoadEtlFunction) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("param_column_index", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ParamColumnIndex); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TMiniLoadEtlFunction) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMiniLoadEtlFunction(%+v)", *p)

}

func (p *TMiniLoadEtlFunction) DeepEqual(ano *TMiniLoadEtlFunction) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FunctionName) {
		return false
	}
	if !p.Field2DeepEqual(ano.ParamColumnIndex) {
		return false
	}
	return true
}

func (p *TMiniLoadEtlFunction) Field1DeepEqual(src string) bool {

	if strings.Compare(p.FunctionName, src) != 0 {
		return false
	}
	return true
}
func (p *TMiniLoadEtlFunction) Field2DeepEqual(src int32) bool {

	if p.ParamColumnIndex != src {
		return false
	}
	return true
}

type TCsvScanNode struct {
	TupleId               types.TTupleId                   `thrift:"tuple_id,1,required" frugal:"1,required,i32" json:"tuple_id"`
	FilePaths             []string                         `thrift:"file_paths,2,required" frugal:"2,required,list<string>" json:"file_paths"`
	ColumnSeparator       *string                          `thrift:"column_separator,3,optional" frugal:"3,optional,string" json:"column_separator,omitempty"`
	LineDelimiter         *string                          `thrift:"line_delimiter,4,optional" frugal:"4,optional,string" json:"line_delimiter,omitempty"`
	ColumnTypeMapping     map[string]*types.TColumnType    `thrift:"column_type_mapping,5,optional" frugal:"5,optional,map<string:types.TColumnType>" json:"column_type_mapping,omitempty"`
	Columns               []string                         `thrift:"columns,6,optional" frugal:"6,optional,list<string>" json:"columns,omitempty"`
	UnspecifiedColumns    []string                         `thrift:"unspecified_columns,7,optional" frugal:"7,optional,list<string>" json:"unspecified_columns,omitempty"`
	DefaultValues         []string                         `thrift:"default_values,8,optional" frugal:"8,optional,list<string>" json:"default_values,omitempty"`
	MaxFilterRatio        *float64                         `thrift:"max_filter_ratio,9,optional" frugal:"9,optional,double" json:"max_filter_ratio,omitempty"`
	ColumnFunctionMapping map[string]*TMiniLoadEtlFunction `thrift:"column_function_mapping,10,optional" frugal:"10,optional,map<string:TMiniLoadEtlFunction>" json:"column_function_mapping,omitempty"`
}

func NewTCsvScanNode() *TCsvScanNode {
	return &TCsvScanNode{}
}

func (p *TCsvScanNode) InitDefault() {
}

func (p *TCsvScanNode) GetTupleId() (v types.TTupleId) {
	return p.TupleId
}

func (p *TCsvScanNode) GetFilePaths() (v []string) {
	return p.FilePaths
}

var TCsvScanNode_ColumnSeparator_DEFAULT string

func (p *TCsvScanNode) GetColumnSeparator() (v string) {
	if !p.IsSetColumnSeparator() {
		return TCsvScanNode_ColumnSeparator_DEFAULT
	}
	return *p.ColumnSeparator
}

var TCsvScanNode_LineDelimiter_DEFAULT string

func (p *TCsvScanNode) GetLineDelimiter() (v string) {
	if !p.IsSetLineDelimiter() {
		return TCsvScanNode_LineDelimiter_DEFAULT
	}
	return *p.LineDelimiter
}

var TCsvScanNode_ColumnTypeMapping_DEFAULT map[string]*types.TColumnType

func (p *TCsvScanNode) GetColumnTypeMapping() (v map[string]*types.TColumnType) {
	if !p.IsSetColumnTypeMapping() {
		return TCsvScanNode_ColumnTypeMapping_DEFAULT
	}
	return p.ColumnTypeMapping
}

var TCsvScanNode_Columns_DEFAULT []string

func (p *TCsvScanNode) GetColumns() (v []string) {
	if !p.IsSetColumns() {
		return TCsvScanNode_Columns_DEFAULT
	}
	return p.Columns
}

var TCsvScanNode_UnspecifiedColumns_DEFAULT []string

func (p *TCsvScanNode) GetUnspecifiedColumns() (v []string) {
	if !p.IsSetUnspecifiedColumns() {
		return TCsvScanNode_UnspecifiedColumns_DEFAULT
	}
	return p.UnspecifiedColumns
}

var TCsvScanNode_DefaultValues_DEFAULT []string

func (p *TCsvScanNode) GetDefaultValues() (v []string) {
	if !p.IsSetDefaultValues() {
		return TCsvScanNode_DefaultValues_DEFAULT
	}
	return p.DefaultValues
}

var TCsvScanNode_MaxFilterRatio_DEFAULT float64

func (p *TCsvScanNode) GetMaxFilterRatio() (v float64) {
	if !p.IsSetMaxFilterRatio() {
		return TCsvScanNode_MaxFilterRatio_DEFAULT
	}
	return *p.MaxFilterRatio
}

var TCsvScanNode_ColumnFunctionMapping_DEFAULT map[string]*TMiniLoadEtlFunction

func (p *TCsvScanNode) GetColumnFunctionMapping() (v map[string]*TMiniLoadEtlFunction) {
	if !p.IsSetColumnFunctionMapping() {
		return TCsvScanNode_ColumnFunctionMapping_DEFAULT
	}
	return p.ColumnFunctionMapping
}
func (p *TCsvScanNode) SetTupleId(val types.TTupleId) {
	p.TupleId = val
}
func (p *TCsvScanNode) SetFilePaths(val []string) {
	p.FilePaths = val
}
func (p *TCsvScanNode) SetColumnSeparator(val *string) {
	p.ColumnSeparator = val
}
func (p *TCsvScanNode) SetLineDelimiter(val *string) {
	p.LineDelimiter = val
}
func (p *TCsvScanNode) SetColumnTypeMapping(val map[string]*types.TColumnType) {
	p.ColumnTypeMapping = val
}
func (p *TCsvScanNode) SetColumns(val []string) {
	p.Columns = val
}
func (p *TCsvScanNode) SetUnspecifiedColumns(val []string) {
	p.UnspecifiedColumns = val
}
func (p *TCsvScanNode) SetDefaultValues(val []string) {
	p.DefaultValues = val
}
func (p *TCsvScanNode) SetMaxFilterRatio(val *float64) {
	p.MaxFilterRatio = val
}
func (p *TCsvScanNode) SetColumnFunctionMapping(val map[string]*TMiniLoadEtlFunction) {
	p.ColumnFunctionMapping = val
}

var fieldIDToName_TCsvScanNode = map[int16]string{
	1:  "tuple_id",
	2:  "file_paths",
	3:  "column_separator",
	4:  "line_delimiter",
	5:  "column_type_mapping",
	6:  "columns",
	7:  "unspecified_columns",
	8:  "default_values",
	9:  "max_filter_ratio",
	10: "column_function_mapping",
}

func (p *TCsvScanNode) IsSetColumnSeparator() bool {
	return p.ColumnSeparator != nil
}

func (p *TCsvScanNode) IsSetLineDelimiter() bool {
	return p.LineDelimiter != nil
}

func (p *TCsvScanNode) IsSetColumnTypeMapping() bool {
	return p.ColumnTypeMapping != nil
}

func (p *TCsvScanNode) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TCsvScanNode) IsSetUnspecifiedColumns() bool {
	return p.UnspecifiedColumns != nil
}

func (p *TCsvScanNode) IsSetDefaultValues() bool {
	return p.DefaultValues != nil
}

func (p *TCsvScanNode) IsSetMaxFilterRatio() bool {
	return p.MaxFilterRatio != nil
}

func (p *TCsvScanNode) IsSetColumnFunctionMapping() bool {
	return p.ColumnFunctionMapping != nil
}

func (p *TCsvScanNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTupleId bool = false
	var issetFilePaths bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilePaths = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTupleId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetFilePaths {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCsvScanNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCsvScanNode[fieldId]))
}

func (p *TCsvScanNode) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TupleId = _field
	return nil
}
func (p *TCsvScanNode) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FilePaths = _field
	return nil
}
func (p *TCsvScanNode) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ColumnSeparator = _field
	return nil
}
func (p *TCsvScanNode) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LineDelimiter = _field
	return nil
}
func (p *TCsvScanNode) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]*types.TColumnType, size)
	values := make([]types.TColumnType, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.ColumnTypeMapping = _field
	return nil
}
func (p *TCsvScanNode) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Columns = _field
	return nil
}
func (p *TCsvScanNode) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.UnspecifiedColumns = _field
	return nil
}
func (p *TCsvScanNode) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DefaultValues = _field
	return nil
}
func (p *TCsvScanNode) ReadField9(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxFilterRatio = _field
	return nil
}
func (p *TCsvScanNode) ReadField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]*TMiniLoadEtlFunction, size)
	values := make([]TMiniLoadEtlFunction, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.ColumnFunctionMapping = _field
	return nil
}

func (p *TCsvScanNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCsvScanNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCsvScanNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tuple_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCsvScanNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("file_paths", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.FilePaths)); err != nil {
		return err
	}
	for _, v := range p.FilePaths {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCsvScanNode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnSeparator() {
		if err = oprot.WriteFieldBegin("column_separator", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ColumnSeparator); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TCsvScanNode) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLineDelimiter() {
		if err = oprot.WriteFieldBegin("line_delimiter", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LineDelimiter); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TCsvScanNode) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnTypeMapping() {
		if err = oprot.WriteFieldBegin("column_type_mapping", thrift.MAP, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ColumnTypeMapping)); err != nil {
			return err
		}
		for k, v := range p.ColumnTypeMapping {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TCsvScanNode) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err = oprot.WriteFieldBegin("columns", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
			return err
		}
		for _, v := range p.Columns {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TCsvScanNode) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnspecifiedColumns() {
		if err = oprot.WriteFieldBegin("unspecified_columns", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.UnspecifiedColumns)); err != nil {
			return err
		}
		for _, v := range p.UnspecifiedColumns {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TCsvScanNode) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultValues() {
		if err = oprot.WriteFieldBegin("default_values", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.DefaultValues)); err != nil {
			return err
		}
		for _, v := range p.DefaultValues {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TCsvScanNode) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxFilterRatio() {
		if err = oprot.WriteFieldBegin("max_filter_ratio", thrift.DOUBLE, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.MaxFilterRatio); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TCsvScanNode) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnFunctionMapping() {
		if err = oprot.WriteFieldBegin("column_function_mapping", thrift.MAP, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ColumnFunctionMapping)); err != nil {
			return err
		}
		for k, v := range p.ColumnFunctionMapping {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TCsvScanNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCsvScanNode(%+v)", *p)

}

func (p *TCsvScanNode) DeepEqual(ano *TCsvScanNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TupleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.FilePaths) {
		return false
	}
	if !p.Field3DeepEqual(ano.ColumnSeparator) {
		return false
	}
	if !p.Field4DeepEqual(ano.LineDelimiter) {
		return false
	}
	if !p.Field5DeepEqual(ano.ColumnTypeMapping) {
		return false
	}
	if !p.Field6DeepEqual(ano.Columns) {
		return false
	}
	if !p.Field7DeepEqual(ano.UnspecifiedColumns) {
		return false
	}
	if !p.Field8DeepEqual(ano.DefaultValues) {
		return false
	}
	if !p.Field9DeepEqual(ano.MaxFilterRatio) {
		return false
	}
	if !p.Field10DeepEqual(ano.ColumnFunctionMapping) {
		return false
	}
	return true
}

func (p *TCsvScanNode) Field1DeepEqual(src types.TTupleId) bool {

	if p.TupleId != src {
		return false
	}
	return true
}
func (p *TCsvScanNode) Field2DeepEqual(src []string) bool {

	if len(p.FilePaths) != len(src) {
		return false
	}
	for i, v := range p.FilePaths {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TCsvScanNode) Field3DeepEqual(src *string) bool {

	if p.ColumnSeparator == src {
		return true
	} else if p.ColumnSeparator == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ColumnSeparator, *src) != 0 {
		return false
	}
	return true
}
func (p *TCsvScanNode) Field4DeepEqual(src *string) bool {

	if p.LineDelimiter == src {
		return true
	} else if p.LineDelimiter == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LineDelimiter, *src) != 0 {
		return false
	}
	return true
}
func (p *TCsvScanNode) Field5DeepEqual(src map[string]*types.TColumnType) bool {

	if len(p.ColumnTypeMapping) != len(src) {
		return false
	}
	for k, v := range p.ColumnTypeMapping {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TCsvScanNode) Field6DeepEqual(src []string) bool {

	if len(p.Columns) != len(src) {
		return false
	}
	for i, v := range p.Columns {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TCsvScanNode) Field7DeepEqual(src []string) bool {

	if len(p.UnspecifiedColumns) != len(src) {
		return false
	}
	for i, v := range p.UnspecifiedColumns {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TCsvScanNode) Field8DeepEqual(src []string) bool {

	if len(p.DefaultValues) != len(src) {
		return false
	}
	for i, v := range p.DefaultValues {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TCsvScanNode) Field9DeepEqual(src *float64) bool {

	if p.MaxFilterRatio == src {
		return true
	} else if p.MaxFilterRatio == nil || src == nil {
		return false
	}
	if *p.MaxFilterRatio != *src {
		return false
	}
	return true
}
func (p *TCsvScanNode) Field10DeepEqual(src map[string]*TMiniLoadEtlFunction) bool {

	if len(p.ColumnFunctionMapping) != len(src) {
		return false
	}
	for k, v := range p.ColumnFunctionMapping {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TSchemaScanNode struct {
	TupleId           types.TTupleId       `thrift:"tuple_id,1,required" frugal:"1,required,i32" json:"tuple_id"`
	TableName         string               `thrift:"table_name,2,required" frugal:"2,required,string" json:"table_name"`
	Db                *string              `thrift:"db,3,optional" frugal:"3,optional,string" json:"db,omitempty"`
	Table             *string              `thrift:"table,4,optional" frugal:"4,optional,string" json:"table,omitempty"`
	Wild              *string              `thrift:"wild,5,optional" frugal:"5,optional,string" json:"wild,omitempty"`
	User              *string              `thrift:"user,6,optional" frugal:"6,optional,string" json:"user,omitempty"`
	Ip                *string              `thrift:"ip,7,optional" frugal:"7,optional,string" json:"ip,omitempty"`
	Port              *int32               `thrift:"port,8,optional" frugal:"8,optional,i32" json:"port,omitempty"`
	ThreadId          *int64               `thrift:"thread_id,9,optional" frugal:"9,optional,i64" json:"thread_id,omitempty"`
	UserIp            *string              `thrift:"user_ip,10,optional" frugal:"10,optional,string" json:"user_ip,omitempty"`
	CurrentUserIdent  *types.TUserIdentity `thrift:"current_user_ident,11,optional" frugal:"11,optional,types.TUserIdentity" json:"current_user_ident,omitempty"`
	ShowHiddenCloumns bool                 `thrift:"show_hidden_cloumns,12,optional" frugal:"12,optional,bool" json:"show_hidden_cloumns,omitempty"`
	Catalog           *string              `thrift:"catalog,14,optional" frugal:"14,optional,string" json:"catalog,omitempty"`
}

func NewTSchemaScanNode() *TSchemaScanNode {
	return &TSchemaScanNode{

		ShowHiddenCloumns: false,
	}
}

func (p *TSchemaScanNode) InitDefault() {
	p.ShowHiddenCloumns = false
}

func (p *TSchemaScanNode) GetTupleId() (v types.TTupleId) {
	return p.TupleId
}

func (p *TSchemaScanNode) GetTableName() (v string) {
	return p.TableName
}

var TSchemaScanNode_Db_DEFAULT string

func (p *TSchemaScanNode) GetDb() (v string) {
	if !p.IsSetDb() {
		return TSchemaScanNode_Db_DEFAULT
	}
	return *p.Db
}

var TSchemaScanNode_Table_DEFAULT string

func (p *TSchemaScanNode) GetTable() (v string) {
	if !p.IsSetTable() {
		return TSchemaScanNode_Table_DEFAULT
	}
	return *p.Table
}

var TSchemaScanNode_Wild_DEFAULT string

func (p *TSchemaScanNode) GetWild() (v string) {
	if !p.IsSetWild() {
		return TSchemaScanNode_Wild_DEFAULT
	}
	return *p.Wild
}

var TSchemaScanNode_User_DEFAULT string

func (p *TSchemaScanNode) GetUser() (v string) {
	if !p.IsSetUser() {
		return TSchemaScanNode_User_DEFAULT
	}
	return *p.User
}

var TSchemaScanNode_Ip_DEFAULT string

func (p *TSchemaScanNode) GetIp() (v string) {
	if !p.IsSetIp() {
		return TSchemaScanNode_Ip_DEFAULT
	}
	return *p.Ip
}

var TSchemaScanNode_Port_DEFAULT int32

func (p *TSchemaScanNode) GetPort() (v int32) {
	if !p.IsSetPort() {
		return TSchemaScanNode_Port_DEFAULT
	}
	return *p.Port
}

var TSchemaScanNode_ThreadId_DEFAULT int64

func (p *TSchemaScanNode) GetThreadId() (v int64) {
	if !p.IsSetThreadId() {
		return TSchemaScanNode_ThreadId_DEFAULT
	}
	return *p.ThreadId
}

var TSchemaScanNode_UserIp_DEFAULT string

func (p *TSchemaScanNode) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TSchemaScanNode_UserIp_DEFAULT
	}
	return *p.UserIp
}

var TSchemaScanNode_CurrentUserIdent_DEFAULT *types.TUserIdentity

func (p *TSchemaScanNode) GetCurrentUserIdent() (v *types.TUserIdentity) {
	if !p.IsSetCurrentUserIdent() {
		return TSchemaScanNode_CurrentUserIdent_DEFAULT
	}
	return p.CurrentUserIdent
}

var TSchemaScanNode_ShowHiddenCloumns_DEFAULT bool = false

func (p *TSchemaScanNode) GetShowHiddenCloumns() (v bool) {
	if !p.IsSetShowHiddenCloumns() {
		return TSchemaScanNode_ShowHiddenCloumns_DEFAULT
	}
	return p.ShowHiddenCloumns
}

var TSchemaScanNode_Catalog_DEFAULT string

func (p *TSchemaScanNode) GetCatalog() (v string) {
	if !p.IsSetCatalog() {
		return TSchemaScanNode_Catalog_DEFAULT
	}
	return *p.Catalog
}
func (p *TSchemaScanNode) SetTupleId(val types.TTupleId) {
	p.TupleId = val
}
func (p *TSchemaScanNode) SetTableName(val string) {
	p.TableName = val
}
func (p *TSchemaScanNode) SetDb(val *string) {
	p.Db = val
}
func (p *TSchemaScanNode) SetTable(val *string) {
	p.Table = val
}
func (p *TSchemaScanNode) SetWild(val *string) {
	p.Wild = val
}
func (p *TSchemaScanNode) SetUser(val *string) {
	p.User = val
}
func (p *TSchemaScanNode) SetIp(val *string) {
	p.Ip = val
}
func (p *TSchemaScanNode) SetPort(val *int32) {
	p.Port = val
}
func (p *TSchemaScanNode) SetThreadId(val *int64) {
	p.ThreadId = val
}
func (p *TSchemaScanNode) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TSchemaScanNode) SetCurrentUserIdent(val *types.TUserIdentity) {
	p.CurrentUserIdent = val
}
func (p *TSchemaScanNode) SetShowHiddenCloumns(val bool) {
	p.ShowHiddenCloumns = val
}
func (p *TSchemaScanNode) SetCatalog(val *string) {
	p.Catalog = val
}

var fieldIDToName_TSchemaScanNode = map[int16]string{
	1:  "tuple_id",
	2:  "table_name",
	3:  "db",
	4:  "table",
	5:  "wild",
	6:  "user",
	7:  "ip",
	8:  "port",
	9:  "thread_id",
	10: "user_ip",
	11: "current_user_ident",
	12: "show_hidden_cloumns",
	14: "catalog",
}

func (p *TSchemaScanNode) IsSetDb() bool {
	return p.Db != nil
}

func (p *TSchemaScanNode) IsSetTable() bool {
	return p.Table != nil
}

func (p *TSchemaScanNode) IsSetWild() bool {
	return p.Wild != nil
}

func (p *TSchemaScanNode) IsSetUser() bool {
	return p.User != nil
}

func (p *TSchemaScanNode) IsSetIp() bool {
	return p.Ip != nil
}

func (p *TSchemaScanNode) IsSetPort() bool {
	return p.Port != nil
}

func (p *TSchemaScanNode) IsSetThreadId() bool {
	return p.ThreadId != nil
}

func (p *TSchemaScanNode) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TSchemaScanNode) IsSetCurrentUserIdent() bool {
	return p.CurrentUserIdent != nil
}

func (p *TSchemaScanNode) IsSetShowHiddenCloumns() bool {
	return p.ShowHiddenCloumns != TSchemaScanNode_ShowHiddenCloumns_DEFAULT
}

func (p *TSchemaScanNode) IsSetCatalog() bool {
	return p.Catalog != nil
}

func (p *TSchemaScanNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTupleId bool = false
	var issetTableName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTableName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTupleId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTableName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TSchemaScanNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TSchemaScanNode[fieldId]))
}

func (p *TSchemaScanNode) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TupleId = _field
	return nil
}
func (p *TSchemaScanNode) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TableName = _field
	return nil
}
func (p *TSchemaScanNode) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Db = _field
	return nil
}
func (p *TSchemaScanNode) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Table = _field
	return nil
}
func (p *TSchemaScanNode) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Wild = _field
	return nil
}
func (p *TSchemaScanNode) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *TSchemaScanNode) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Ip = _field
	return nil
}
func (p *TSchemaScanNode) ReadField8(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Port = _field
	return nil
}
func (p *TSchemaScanNode) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ThreadId = _field
	return nil
}
func (p *TSchemaScanNode) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TSchemaScanNode) ReadField11(iprot thrift.TProtocol) error {
	_field := types.NewTUserIdentity()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CurrentUserIdent = _field
	return nil
}
func (p *TSchemaScanNode) ReadField12(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShowHiddenCloumns = _field
	return nil
}
func (p *TSchemaScanNode) ReadField14(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Catalog = _field
	return nil
}

func (p *TSchemaScanNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TSchemaScanNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TSchemaScanNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tuple_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TSchemaScanNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TableName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TSchemaScanNode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDb() {
		if err = oprot.WriteFieldBegin("db", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Db); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TSchemaScanNode) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTable() {
		if err = oprot.WriteFieldBegin("table", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Table); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TSchemaScanNode) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetWild() {
		if err = oprot.WriteFieldBegin("wild", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Wild); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TSchemaScanNode) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TSchemaScanNode) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIp() {
		if err = oprot.WriteFieldBegin("ip", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Ip); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TSchemaScanNode) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPort() {
		if err = oprot.WriteFieldBegin("port", thrift.I32, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Port); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TSchemaScanNode) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetThreadId() {
		if err = oprot.WriteFieldBegin("thread_id", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ThreadId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TSchemaScanNode) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TSchemaScanNode) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentUserIdent() {
		if err = oprot.WriteFieldBegin("current_user_ident", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CurrentUserIdent.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TSchemaScanNode) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetShowHiddenCloumns() {
		if err = oprot.WriteFieldBegin("show_hidden_cloumns", thrift.BOOL, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.ShowHiddenCloumns); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TSchemaScanNode) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalog() {
		if err = oprot.WriteFieldBegin("catalog", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Catalog); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TSchemaScanNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSchemaScanNode(%+v)", *p)

}

func (p *TSchemaScanNode) DeepEqual(ano *TSchemaScanNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TupleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableName) {
		return false
	}
	if !p.Field3DeepEqual(ano.Db) {
		return false
	}
	if !p.Field4DeepEqual(ano.Table) {
		return false
	}
	if !p.Field5DeepEqual(ano.Wild) {
		return false
	}
	if !p.Field6DeepEqual(ano.User) {
		return false
	}
	if !p.Field7DeepEqual(ano.Ip) {
		return false
	}
	if !p.Field8DeepEqual(ano.Port) {
		return false
	}
	if !p.Field9DeepEqual(ano.ThreadId) {
		return false
	}
	if !p.Field10DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field11DeepEqual(ano.CurrentUserIdent) {
		return false
	}
	if !p.Field12DeepEqual(ano.ShowHiddenCloumns) {
		return false
	}
	if !p.Field14DeepEqual(ano.Catalog) {
		return false
	}
	return true
}

func (p *TSchemaScanNode) Field1DeepEqual(src types.TTupleId) bool {

	if p.TupleId != src {
		return false
	}
	return true
}
func (p *TSchemaScanNode) Field2DeepEqual(src string) bool {

	if strings.Compare(p.TableName, src) != 0 {
		return false
	}
	return true
}
func (p *TSchemaScanNode) Field3DeepEqual(src *string) bool {

	if p.Db == src {
		return true
	} else if p.Db == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Db, *src) != 0 {
		return false
	}
	return true
}
func (p *TSchemaScanNode) Field4DeepEqual(src *string) bool {

	if p.Table == src {
		return true
	} else if p.Table == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Table, *src) != 0 {
		return false
	}
	return true
}
func (p *TSchemaScanNode) Field5DeepEqual(src *string) bool {

	if p.Wild == src {
		return true
	} else if p.Wild == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Wild, *src) != 0 {
		return false
	}
	return true
}
func (p *TSchemaScanNode) Field6DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *TSchemaScanNode) Field7DeepEqual(src *string) bool {

	if p.Ip == src {
		return true
	} else if p.Ip == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Ip, *src) != 0 {
		return false
	}
	return true
}
func (p *TSchemaScanNode) Field8DeepEqual(src *int32) bool {

	if p.Port == src {
		return true
	} else if p.Port == nil || src == nil {
		return false
	}
	if *p.Port != *src {
		return false
	}
	return true
}
func (p *TSchemaScanNode) Field9DeepEqual(src *int64) bool {

	if p.ThreadId == src {
		return true
	} else if p.ThreadId == nil || src == nil {
		return false
	}
	if *p.ThreadId != *src {
		return false
	}
	return true
}
func (p *TSchemaScanNode) Field10DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TSchemaScanNode) Field11DeepEqual(src *types.TUserIdentity) bool {

	if !p.CurrentUserIdent.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TSchemaScanNode) Field12DeepEqual(src bool) bool {

	if p.ShowHiddenCloumns != src {
		return false
	}
	return true
}
func (p *TSchemaScanNode) Field14DeepEqual(src *string) bool {

	if p.Catalog == src {
		return true
	} else if p.Catalog == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Catalog, *src) != 0 {
		return false
	}
	return true
}

type TMetaScanNode struct {
	TupleId          types.TTupleId       `thrift:"tuple_id,1,required" frugal:"1,required,i32" json:"tuple_id"`
	MetadataType     *types.TMetadataType `thrift:"metadata_type,2,optional" frugal:"2,optional,TMetadataType" json:"metadata_type,omitempty"`
	CurrentUserIdent *types.TUserIdentity `thrift:"current_user_ident,3,optional" frugal:"3,optional,types.TUserIdentity" json:"current_user_ident,omitempty"`
}

func NewTMetaScanNode() *TMetaScanNode {
	return &TMetaScanNode{}
}

func (p *TMetaScanNode) InitDefault() {
}

func (p *TMetaScanNode) GetTupleId() (v types.TTupleId) {
	return p.TupleId
}

var TMetaScanNode_MetadataType_DEFAULT types.TMetadataType

func (p *TMetaScanNode) GetMetadataType() (v types.TMetadataType) {
	if !p.IsSetMetadataType() {
		return TMetaScanNode_MetadataType_DEFAULT
	}
	return *p.MetadataType
}

var TMetaScanNode_CurrentUserIdent_DEFAULT *types.TUserIdentity

func (p *TMetaScanNode) GetCurrentUserIdent() (v *types.TUserIdentity) {
	if !p.IsSetCurrentUserIdent() {
		return TMetaScanNode_CurrentUserIdent_DEFAULT
	}
	return p.CurrentUserIdent
}
func (p *TMetaScanNode) SetTupleId(val types.TTupleId) {
	p.TupleId = val
}
func (p *TMetaScanNode) SetMetadataType(val *types.TMetadataType) {
	p.MetadataType = val
}
func (p *TMetaScanNode) SetCurrentUserIdent(val *types.TUserIdentity) {
	p.CurrentUserIdent = val
}

var fieldIDToName_TMetaScanNode = map[int16]string{
	1: "tuple_id",
	2: "metadata_type",
	3: "current_user_ident",
}

func (p *TMetaScanNode) IsSetMetadataType() bool {
	return p.MetadataType != nil
}

func (p *TMetaScanNode) IsSetCurrentUserIdent() bool {
	return p.CurrentUserIdent != nil
}

func (p *TMetaScanNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTupleId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTupleId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMetaScanNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TMetaScanNode[fieldId]))
}

func (p *TMetaScanNode) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TupleId = _field
	return nil
}
func (p *TMetaScanNode) ReadField2(iprot thrift.TProtocol) error {

	var _field *types.TMetadataType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TMetadataType(v)
		_field = &tmp
	}
	p.MetadataType = _field
	return nil
}
func (p *TMetaScanNode) ReadField3(iprot thrift.TProtocol) error {
	_field := types.NewTUserIdentity()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CurrentUserIdent = _field
	return nil
}

func (p *TMetaScanNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMetaScanNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMetaScanNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tuple_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMetaScanNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetadataType() {
		if err = oprot.WriteFieldBegin("metadata_type", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.MetadataType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TMetaScanNode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentUserIdent() {
		if err = oprot.WriteFieldBegin("current_user_ident", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CurrentUserIdent.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TMetaScanNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMetaScanNode(%+v)", *p)

}

func (p *TMetaScanNode) DeepEqual(ano *TMetaScanNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TupleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.MetadataType) {
		return false
	}
	if !p.Field3DeepEqual(ano.CurrentUserIdent) {
		return false
	}
	return true
}

func (p *TMetaScanNode) Field1DeepEqual(src types.TTupleId) bool {

	if p.TupleId != src {
		return false
	}
	return true
}
func (p *TMetaScanNode) Field2DeepEqual(src *types.TMetadataType) bool {

	if p.MetadataType == src {
		return true
	} else if p.MetadataType == nil || src == nil {
		return false
	}
	if *p.MetadataType != *src {
		return false
	}
	return true
}
func (p *TMetaScanNode) Field3DeepEqual(src *types.TUserIdentity) bool {

	if !p.CurrentUserIdent.DeepEqual(src) {
		return false
	}
	return true
}

type TTestExternalScanNode struct {
	TupleId   *types.TTupleId `thrift:"tuple_id,1,optional" frugal:"1,optional,i32" json:"tuple_id,omitempty"`
	TableName *string         `thrift:"table_name,2,optional" frugal:"2,optional,string" json:"table_name,omitempty"`
}

func NewTTestExternalScanNode() *TTestExternalScanNode {
	return &TTestExternalScanNode{}
}

func (p *TTestExternalScanNode) InitDefault() {
}

var TTestExternalScanNode_TupleId_DEFAULT types.TTupleId

func (p *TTestExternalScanNode) GetTupleId() (v types.TTupleId) {
	if !p.IsSetTupleId() {
		return TTestExternalScanNode_TupleId_DEFAULT
	}
	return *p.TupleId
}

var TTestExternalScanNode_TableName_DEFAULT string

func (p *TTestExternalScanNode) GetTableName() (v string) {
	if !p.IsSetTableName() {
		return TTestExternalScanNode_TableName_DEFAULT
	}
	return *p.TableName
}
func (p *TTestExternalScanNode) SetTupleId(val *types.TTupleId) {
	p.TupleId = val
}
func (p *TTestExternalScanNode) SetTableName(val *string) {
	p.TableName = val
}

var fieldIDToName_TTestExternalScanNode = map[int16]string{
	1: "tuple_id",
	2: "table_name",
}

func (p *TTestExternalScanNode) IsSetTupleId() bool {
	return p.TupleId != nil
}

func (p *TTestExternalScanNode) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *TTestExternalScanNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTestExternalScanNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTestExternalScanNode) ReadField1(iprot thrift.TProtocol) error {

	var _field *types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TupleId = _field
	return nil
}
func (p *TTestExternalScanNode) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableName = _field
	return nil
}

func (p *TTestExternalScanNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTestExternalScanNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTestExternalScanNode) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTupleId() {
		if err = oprot.WriteFieldBegin("tuple_id", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TupleId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTestExternalScanNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err = oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TableName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTestExternalScanNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTestExternalScanNode(%+v)", *p)

}

func (p *TTestExternalScanNode) DeepEqual(ano *TTestExternalScanNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TupleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableName) {
		return false
	}
	return true
}

func (p *TTestExternalScanNode) Field1DeepEqual(src *types.TTupleId) bool {

	if p.TupleId == src {
		return true
	} else if p.TupleId == nil || src == nil {
		return false
	}
	if *p.TupleId != *src {
		return false
	}
	return true
}
func (p *TTestExternalScanNode) Field2DeepEqual(src *string) bool {

	if p.TableName == src {
		return true
	} else if p.TableName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TableName, *src) != 0 {
		return false
	}
	return true
}

type TSortInfo struct {
	OrderingExprs                    []*exprs.TExpr `thrift:"ordering_exprs,1,required" frugal:"1,required,list<exprs.TExpr>" json:"ordering_exprs"`
	IsAscOrder                       []bool         `thrift:"is_asc_order,2,required" frugal:"2,required,list<bool>" json:"is_asc_order"`
	NullsFirst                       []bool         `thrift:"nulls_first,3,required" frugal:"3,required,list<bool>" json:"nulls_first"`
	SortTupleSlotExprs               []*exprs.TExpr `thrift:"sort_tuple_slot_exprs,4,optional" frugal:"4,optional,list<exprs.TExpr>" json:"sort_tuple_slot_exprs,omitempty"`
	SlotExprsNullabilityChangedFlags []bool         `thrift:"slot_exprs_nullability_changed_flags,5,optional" frugal:"5,optional,list<bool>" json:"slot_exprs_nullability_changed_flags,omitempty"`
	UseTwoPhaseRead                  *bool          `thrift:"use_two_phase_read,6,optional" frugal:"6,optional,bool" json:"use_two_phase_read,omitempty"`
}

func NewTSortInfo() *TSortInfo {
	return &TSortInfo{}
}

func (p *TSortInfo) InitDefault() {
}

func (p *TSortInfo) GetOrderingExprs() (v []*exprs.TExpr) {
	return p.OrderingExprs
}

func (p *TSortInfo) GetIsAscOrder() (v []bool) {
	return p.IsAscOrder
}

func (p *TSortInfo) GetNullsFirst() (v []bool) {
	return p.NullsFirst
}

var TSortInfo_SortTupleSlotExprs_DEFAULT []*exprs.TExpr

func (p *TSortInfo) GetSortTupleSlotExprs() (v []*exprs.TExpr) {
	if !p.IsSetSortTupleSlotExprs() {
		return TSortInfo_SortTupleSlotExprs_DEFAULT
	}
	return p.SortTupleSlotExprs
}

var TSortInfo_SlotExprsNullabilityChangedFlags_DEFAULT []bool

func (p *TSortInfo) GetSlotExprsNullabilityChangedFlags() (v []bool) {
	if !p.IsSetSlotExprsNullabilityChangedFlags() {
		return TSortInfo_SlotExprsNullabilityChangedFlags_DEFAULT
	}
	return p.SlotExprsNullabilityChangedFlags
}

var TSortInfo_UseTwoPhaseRead_DEFAULT bool

func (p *TSortInfo) GetUseTwoPhaseRead() (v bool) {
	if !p.IsSetUseTwoPhaseRead() {
		return TSortInfo_UseTwoPhaseRead_DEFAULT
	}
	return *p.UseTwoPhaseRead
}
func (p *TSortInfo) SetOrderingExprs(val []*exprs.TExpr) {
	p.OrderingExprs = val
}
func (p *TSortInfo) SetIsAscOrder(val []bool) {
	p.IsAscOrder = val
}
func (p *TSortInfo) SetNullsFirst(val []bool) {
	p.NullsFirst = val
}
func (p *TSortInfo) SetSortTupleSlotExprs(val []*exprs.TExpr) {
	p.SortTupleSlotExprs = val
}
func (p *TSortInfo) SetSlotExprsNullabilityChangedFlags(val []bool) {
	p.SlotExprsNullabilityChangedFlags = val
}
func (p *TSortInfo) SetUseTwoPhaseRead(val *bool) {
	p.UseTwoPhaseRead = val
}

var fieldIDToName_TSortInfo = map[int16]string{
	1: "ordering_exprs",
	2: "is_asc_order",
	3: "nulls_first",
	4: "sort_tuple_slot_exprs",
	5: "slot_exprs_nullability_changed_flags",
	6: "use_two_phase_read",
}

func (p *TSortInfo) IsSetSortTupleSlotExprs() bool {
	return p.SortTupleSlotExprs != nil
}

func (p *TSortInfo) IsSetSlotExprsNullabilityChangedFlags() bool {
	return p.SlotExprsNullabilityChangedFlags != nil
}

func (p *TSortInfo) IsSetUseTwoPhaseRead() bool {
	return p.UseTwoPhaseRead != nil
}

func (p *TSortInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetOrderingExprs bool = false
	var issetIsAscOrder bool = false
	var issetNullsFirst bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetOrderingExprs = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsAscOrder = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetNullsFirst = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetOrderingExprs {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetIsAscOrder {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetNullsFirst {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TSortInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TSortInfo[fieldId]))
}

func (p *TSortInfo) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OrderingExprs = _field
	return nil
}
func (p *TSortInfo) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]bool, 0, size)
	for i := 0; i < size; i++ {

		var _elem bool
		if v, err := iprot.ReadBool(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.IsAscOrder = _field
	return nil
}
func (p *TSortInfo) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]bool, 0, size)
	for i := 0; i < size; i++ {

		var _elem bool
		if v, err := iprot.ReadBool(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.NullsFirst = _field
	return nil
}
func (p *TSortInfo) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SortTupleSlotExprs = _field
	return nil
}
func (p *TSortInfo) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]bool, 0, size)
	for i := 0; i < size; i++ {

		var _elem bool
		if v, err := iprot.ReadBool(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SlotExprsNullabilityChangedFlags = _field
	return nil
}
func (p *TSortInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UseTwoPhaseRead = _field
	return nil
}

func (p *TSortInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TSortInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TSortInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ordering_exprs", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrderingExprs)); err != nil {
		return err
	}
	for _, v := range p.OrderingExprs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TSortInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_asc_order", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.BOOL, len(p.IsAscOrder)); err != nil {
		return err
	}
	for _, v := range p.IsAscOrder {
		if err := oprot.WriteBool(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TSortInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nulls_first", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.BOOL, len(p.NullsFirst)); err != nil {
		return err
	}
	for _, v := range p.NullsFirst {
		if err := oprot.WriteBool(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TSortInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSortTupleSlotExprs() {
		if err = oprot.WriteFieldBegin("sort_tuple_slot_exprs", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SortTupleSlotExprs)); err != nil {
			return err
		}
		for _, v := range p.SortTupleSlotExprs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TSortInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSlotExprsNullabilityChangedFlags() {
		if err = oprot.WriteFieldBegin("slot_exprs_nullability_changed_flags", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.BOOL, len(p.SlotExprsNullabilityChangedFlags)); err != nil {
			return err
		}
		for _, v := range p.SlotExprsNullabilityChangedFlags {
			if err := oprot.WriteBool(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TSortInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUseTwoPhaseRead() {
		if err = oprot.WriteFieldBegin("use_two_phase_read", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.UseTwoPhaseRead); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TSortInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSortInfo(%+v)", *p)

}

func (p *TSortInfo) DeepEqual(ano *TSortInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OrderingExprs) {
		return false
	}
	if !p.Field2DeepEqual(ano.IsAscOrder) {
		return false
	}
	if !p.Field3DeepEqual(ano.NullsFirst) {
		return false
	}
	if !p.Field4DeepEqual(ano.SortTupleSlotExprs) {
		return false
	}
	if !p.Field5DeepEqual(ano.SlotExprsNullabilityChangedFlags) {
		return false
	}
	if !p.Field6DeepEqual(ano.UseTwoPhaseRead) {
		return false
	}
	return true
}

func (p *TSortInfo) Field1DeepEqual(src []*exprs.TExpr) bool {

	if len(p.OrderingExprs) != len(src) {
		return false
	}
	for i, v := range p.OrderingExprs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TSortInfo) Field2DeepEqual(src []bool) bool {

	if len(p.IsAscOrder) != len(src) {
		return false
	}
	for i, v := range p.IsAscOrder {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TSortInfo) Field3DeepEqual(src []bool) bool {

	if len(p.NullsFirst) != len(src) {
		return false
	}
	for i, v := range p.NullsFirst {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TSortInfo) Field4DeepEqual(src []*exprs.TExpr) bool {

	if len(p.SortTupleSlotExprs) != len(src) {
		return false
	}
	for i, v := range p.SortTupleSlotExprs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TSortInfo) Field5DeepEqual(src []bool) bool {

	if len(p.SlotExprsNullabilityChangedFlags) != len(src) {
		return false
	}
	for i, v := range p.SlotExprsNullabilityChangedFlags {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TSortInfo) Field6DeepEqual(src *bool) bool {

	if p.UseTwoPhaseRead == src {
		return true
	} else if p.UseTwoPhaseRead == nil || src == nil {
		return false
	}
	if *p.UseTwoPhaseRead != *src {
		return false
	}
	return true
}

type TOlapScanNode struct {
	TupleId                     types.TTupleId                 `thrift:"tuple_id,1,required" frugal:"1,required,i32" json:"tuple_id"`
	KeyColumnName               []string                       `thrift:"key_column_name,2,required" frugal:"2,required,list<string>" json:"key_column_name"`
	KeyColumnType               []types.TPrimitiveType         `thrift:"key_column_type,3,required" frugal:"3,required,list<TPrimitiveType>" json:"key_column_type"`
	IsPreaggregation            bool                           `thrift:"is_preaggregation,4,required" frugal:"4,required,bool" json:"is_preaggregation"`
	SortColumn                  *string                        `thrift:"sort_column,5,optional" frugal:"5,optional,string" json:"sort_column,omitempty"`
	KeyType                     *types.TKeysType               `thrift:"keyType,6,optional" frugal:"6,optional,TKeysType" json:"keyType,omitempty"`
	TableName                   *string                        `thrift:"table_name,7,optional" frugal:"7,optional,string" json:"table_name,omitempty"`
	ColumnsDesc                 []*descriptors.TColumn         `thrift:"columns_desc,8,optional" frugal:"8,optional,list<descriptors.TColumn>" json:"columns_desc,omitempty"`
	SortInfo                    *TSortInfo                     `thrift:"sort_info,9,optional" frugal:"9,optional,TSortInfo" json:"sort_info,omitempty"`
	SortLimit                   *int64                         `thrift:"sort_limit,10,optional" frugal:"10,optional,i64" json:"sort_limit,omitempty"`
	EnableUniqueKeyMergeOnWrite *bool                          `thrift:"enable_unique_key_merge_on_write,11,optional" frugal:"11,optional,bool" json:"enable_unique_key_merge_on_write,omitempty"`
	PushDownAggTypeOpt          *TPushAggOp                    `thrift:"push_down_agg_type_opt,12,optional" frugal:"12,optional,TPushAggOp" json:"push_down_agg_type_opt,omitempty"`
	UseTopnOpt                  *bool                          `thrift:"use_topn_opt,13,optional" frugal:"13,optional,bool" json:"use_topn_opt,omitempty"`
	IndexesDesc                 []*descriptors.TOlapTableIndex `thrift:"indexes_desc,14,optional" frugal:"14,optional,list<descriptors.TOlapTableIndex>" json:"indexes_desc,omitempty"`
	OutputColumnUniqueIds       []int32                        `thrift:"output_column_unique_ids,15,optional" frugal:"15,optional,set<i32>" json:"output_column_unique_ids,omitempty"`
	DistributeColumnIds         []int32                        `thrift:"distribute_column_ids,16,optional" frugal:"16,optional,list<i32>" json:"distribute_column_ids,omitempty"`
	SchemaVersion               *int32                         `thrift:"schema_version,17,optional" frugal:"17,optional,i32" json:"schema_version,omitempty"`
	TopnFilterSourceNodeIds     []int32                        `thrift:"topn_filter_source_node_ids,18,optional" frugal:"18,optional,list<i32>" json:"topn_filter_source_node_ids,omitempty"`
}

func NewTOlapScanNode() *TOlapScanNode {
	return &TOlapScanNode{}
}

func (p *TOlapScanNode) InitDefault() {
}

func (p *TOlapScanNode) GetTupleId() (v types.TTupleId) {
	return p.TupleId
}

func (p *TOlapScanNode) GetKeyColumnName() (v []string) {
	return p.KeyColumnName
}

func (p *TOlapScanNode) GetKeyColumnType() (v []types.TPrimitiveType) {
	return p.KeyColumnType
}

func (p *TOlapScanNode) GetIsPreaggregation() (v bool) {
	return p.IsPreaggregation
}

var TOlapScanNode_SortColumn_DEFAULT string

func (p *TOlapScanNode) GetSortColumn() (v string) {
	if !p.IsSetSortColumn() {
		return TOlapScanNode_SortColumn_DEFAULT
	}
	return *p.SortColumn
}

var TOlapScanNode_KeyType_DEFAULT types.TKeysType

func (p *TOlapScanNode) GetKeyType() (v types.TKeysType) {
	if !p.IsSetKeyType() {
		return TOlapScanNode_KeyType_DEFAULT
	}
	return *p.KeyType
}

var TOlapScanNode_TableName_DEFAULT string

func (p *TOlapScanNode) GetTableName() (v string) {
	if !p.IsSetTableName() {
		return TOlapScanNode_TableName_DEFAULT
	}
	return *p.TableName
}

var TOlapScanNode_ColumnsDesc_DEFAULT []*descriptors.TColumn

func (p *TOlapScanNode) GetColumnsDesc() (v []*descriptors.TColumn) {
	if !p.IsSetColumnsDesc() {
		return TOlapScanNode_ColumnsDesc_DEFAULT
	}
	return p.ColumnsDesc
}

var TOlapScanNode_SortInfo_DEFAULT *TSortInfo

func (p *TOlapScanNode) GetSortInfo() (v *TSortInfo) {
	if !p.IsSetSortInfo() {
		return TOlapScanNode_SortInfo_DEFAULT
	}
	return p.SortInfo
}

var TOlapScanNode_SortLimit_DEFAULT int64

func (p *TOlapScanNode) GetSortLimit() (v int64) {
	if !p.IsSetSortLimit() {
		return TOlapScanNode_SortLimit_DEFAULT
	}
	return *p.SortLimit
}

var TOlapScanNode_EnableUniqueKeyMergeOnWrite_DEFAULT bool

func (p *TOlapScanNode) GetEnableUniqueKeyMergeOnWrite() (v bool) {
	if !p.IsSetEnableUniqueKeyMergeOnWrite() {
		return TOlapScanNode_EnableUniqueKeyMergeOnWrite_DEFAULT
	}
	return *p.EnableUniqueKeyMergeOnWrite
}

var TOlapScanNode_PushDownAggTypeOpt_DEFAULT TPushAggOp

func (p *TOlapScanNode) GetPushDownAggTypeOpt() (v TPushAggOp) {
	if !p.IsSetPushDownAggTypeOpt() {
		return TOlapScanNode_PushDownAggTypeOpt_DEFAULT
	}
	return *p.PushDownAggTypeOpt
}

var TOlapScanNode_UseTopnOpt_DEFAULT bool

func (p *TOlapScanNode) GetUseTopnOpt() (v bool) {
	if !p.IsSetUseTopnOpt() {
		return TOlapScanNode_UseTopnOpt_DEFAULT
	}
	return *p.UseTopnOpt
}

var TOlapScanNode_IndexesDesc_DEFAULT []*descriptors.TOlapTableIndex

func (p *TOlapScanNode) GetIndexesDesc() (v []*descriptors.TOlapTableIndex) {
	if !p.IsSetIndexesDesc() {
		return TOlapScanNode_IndexesDesc_DEFAULT
	}
	return p.IndexesDesc
}

var TOlapScanNode_OutputColumnUniqueIds_DEFAULT []int32

func (p *TOlapScanNode) GetOutputColumnUniqueIds() (v []int32) {
	if !p.IsSetOutputColumnUniqueIds() {
		return TOlapScanNode_OutputColumnUniqueIds_DEFAULT
	}
	return p.OutputColumnUniqueIds
}

var TOlapScanNode_DistributeColumnIds_DEFAULT []int32

func (p *TOlapScanNode) GetDistributeColumnIds() (v []int32) {
	if !p.IsSetDistributeColumnIds() {
		return TOlapScanNode_DistributeColumnIds_DEFAULT
	}
	return p.DistributeColumnIds
}

var TOlapScanNode_SchemaVersion_DEFAULT int32

func (p *TOlapScanNode) GetSchemaVersion() (v int32) {
	if !p.IsSetSchemaVersion() {
		return TOlapScanNode_SchemaVersion_DEFAULT
	}
	return *p.SchemaVersion
}

var TOlapScanNode_TopnFilterSourceNodeIds_DEFAULT []int32

func (p *TOlapScanNode) GetTopnFilterSourceNodeIds() (v []int32) {
	if !p.IsSetTopnFilterSourceNodeIds() {
		return TOlapScanNode_TopnFilterSourceNodeIds_DEFAULT
	}
	return p.TopnFilterSourceNodeIds
}
func (p *TOlapScanNode) SetTupleId(val types.TTupleId) {
	p.TupleId = val
}
func (p *TOlapScanNode) SetKeyColumnName(val []string) {
	p.KeyColumnName = val
}
func (p *TOlapScanNode) SetKeyColumnType(val []types.TPrimitiveType) {
	p.KeyColumnType = val
}
func (p *TOlapScanNode) SetIsPreaggregation(val bool) {
	p.IsPreaggregation = val
}
func (p *TOlapScanNode) SetSortColumn(val *string) {
	p.SortColumn = val
}
func (p *TOlapScanNode) SetKeyType(val *types.TKeysType) {
	p.KeyType = val
}
func (p *TOlapScanNode) SetTableName(val *string) {
	p.TableName = val
}
func (p *TOlapScanNode) SetColumnsDesc(val []*descriptors.TColumn) {
	p.ColumnsDesc = val
}
func (p *TOlapScanNode) SetSortInfo(val *TSortInfo) {
	p.SortInfo = val
}
func (p *TOlapScanNode) SetSortLimit(val *int64) {
	p.SortLimit = val
}
func (p *TOlapScanNode) SetEnableUniqueKeyMergeOnWrite(val *bool) {
	p.EnableUniqueKeyMergeOnWrite = val
}
func (p *TOlapScanNode) SetPushDownAggTypeOpt(val *TPushAggOp) {
	p.PushDownAggTypeOpt = val
}
func (p *TOlapScanNode) SetUseTopnOpt(val *bool) {
	p.UseTopnOpt = val
}
func (p *TOlapScanNode) SetIndexesDesc(val []*descriptors.TOlapTableIndex) {
	p.IndexesDesc = val
}
func (p *TOlapScanNode) SetOutputColumnUniqueIds(val []int32) {
	p.OutputColumnUniqueIds = val
}
func (p *TOlapScanNode) SetDistributeColumnIds(val []int32) {
	p.DistributeColumnIds = val
}
func (p *TOlapScanNode) SetSchemaVersion(val *int32) {
	p.SchemaVersion = val
}
func (p *TOlapScanNode) SetTopnFilterSourceNodeIds(val []int32) {
	p.TopnFilterSourceNodeIds = val
}

var fieldIDToName_TOlapScanNode = map[int16]string{
	1:  "tuple_id",
	2:  "key_column_name",
	3:  "key_column_type",
	4:  "is_preaggregation",
	5:  "sort_column",
	6:  "keyType",
	7:  "table_name",
	8:  "columns_desc",
	9:  "sort_info",
	10: "sort_limit",
	11: "enable_unique_key_merge_on_write",
	12: "push_down_agg_type_opt",
	13: "use_topn_opt",
	14: "indexes_desc",
	15: "output_column_unique_ids",
	16: "distribute_column_ids",
	17: "schema_version",
	18: "topn_filter_source_node_ids",
}

func (p *TOlapScanNode) IsSetSortColumn() bool {
	return p.SortColumn != nil
}

func (p *TOlapScanNode) IsSetKeyType() bool {
	return p.KeyType != nil
}

func (p *TOlapScanNode) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *TOlapScanNode) IsSetColumnsDesc() bool {
	return p.ColumnsDesc != nil
}

func (p *TOlapScanNode) IsSetSortInfo() bool {
	return p.SortInfo != nil
}

func (p *TOlapScanNode) IsSetSortLimit() bool {
	return p.SortLimit != nil
}

func (p *TOlapScanNode) IsSetEnableUniqueKeyMergeOnWrite() bool {
	return p.EnableUniqueKeyMergeOnWrite != nil
}

func (p *TOlapScanNode) IsSetPushDownAggTypeOpt() bool {
	return p.PushDownAggTypeOpt != nil
}

func (p *TOlapScanNode) IsSetUseTopnOpt() bool {
	return p.UseTopnOpt != nil
}

func (p *TOlapScanNode) IsSetIndexesDesc() bool {
	return p.IndexesDesc != nil
}

func (p *TOlapScanNode) IsSetOutputColumnUniqueIds() bool {
	return p.OutputColumnUniqueIds != nil
}

func (p *TOlapScanNode) IsSetDistributeColumnIds() bool {
	return p.DistributeColumnIds != nil
}

func (p *TOlapScanNode) IsSetSchemaVersion() bool {
	return p.SchemaVersion != nil
}

func (p *TOlapScanNode) IsSetTopnFilterSourceNodeIds() bool {
	return p.TopnFilterSourceNodeIds != nil
}

func (p *TOlapScanNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTupleId bool = false
	var issetKeyColumnName bool = false
	var issetKeyColumnType bool = false
	var issetIsPreaggregation bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetKeyColumnName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetKeyColumnType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsPreaggregation = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTupleId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetKeyColumnName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetKeyColumnType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetIsPreaggregation {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TOlapScanNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TOlapScanNode[fieldId]))
}

func (p *TOlapScanNode) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TupleId = _field
	return nil
}
func (p *TOlapScanNode) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.KeyColumnName = _field
	return nil
}
func (p *TOlapScanNode) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TPrimitiveType, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TPrimitiveType
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = types.TPrimitiveType(v)
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.KeyColumnType = _field
	return nil
}
func (p *TOlapScanNode) ReadField4(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsPreaggregation = _field
	return nil
}
func (p *TOlapScanNode) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SortColumn = _field
	return nil
}
func (p *TOlapScanNode) ReadField6(iprot thrift.TProtocol) error {

	var _field *types.TKeysType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TKeysType(v)
		_field = &tmp
	}
	p.KeyType = _field
	return nil
}
func (p *TOlapScanNode) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableName = _field
	return nil
}
func (p *TOlapScanNode) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*descriptors.TColumn, 0, size)
	values := make([]descriptors.TColumn, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnsDesc = _field
	return nil
}
func (p *TOlapScanNode) ReadField9(iprot thrift.TProtocol) error {
	_field := NewTSortInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SortInfo = _field
	return nil
}
func (p *TOlapScanNode) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SortLimit = _field
	return nil
}
func (p *TOlapScanNode) ReadField11(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnableUniqueKeyMergeOnWrite = _field
	return nil
}
func (p *TOlapScanNode) ReadField12(iprot thrift.TProtocol) error {

	var _field *TPushAggOp
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TPushAggOp(v)
		_field = &tmp
	}
	p.PushDownAggTypeOpt = _field
	return nil
}
func (p *TOlapScanNode) ReadField13(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UseTopnOpt = _field
	return nil
}
func (p *TOlapScanNode) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*descriptors.TOlapTableIndex, 0, size)
	values := make([]descriptors.TOlapTableIndex, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.IndexesDesc = _field
	return nil
}
func (p *TOlapScanNode) ReadField15(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	p.OutputColumnUniqueIds = _field
	return nil
}
func (p *TOlapScanNode) ReadField16(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DistributeColumnIds = _field
	return nil
}
func (p *TOlapScanNode) ReadField17(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SchemaVersion = _field
	return nil
}
func (p *TOlapScanNode) ReadField18(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TopnFilterSourceNodeIds = _field
	return nil
}

func (p *TOlapScanNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TOlapScanNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TOlapScanNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tuple_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TOlapScanNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("key_column_name", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.KeyColumnName)); err != nil {
		return err
	}
	for _, v := range p.KeyColumnName {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TOlapScanNode) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("key_column_type", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.KeyColumnType)); err != nil {
		return err
	}
	for _, v := range p.KeyColumnType {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TOlapScanNode) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_preaggregation", thrift.BOOL, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsPreaggregation); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TOlapScanNode) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSortColumn() {
		if err = oprot.WriteFieldBegin("sort_column", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SortColumn); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TOlapScanNode) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyType() {
		if err = oprot.WriteFieldBegin("keyType", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.KeyType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TOlapScanNode) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err = oprot.WriteFieldBegin("table_name", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TableName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TOlapScanNode) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnsDesc() {
		if err = oprot.WriteFieldBegin("columns_desc", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnsDesc)); err != nil {
			return err
		}
		for _, v := range p.ColumnsDesc {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TOlapScanNode) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSortInfo() {
		if err = oprot.WriteFieldBegin("sort_info", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.SortInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TOlapScanNode) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSortLimit() {
		if err = oprot.WriteFieldBegin("sort_limit", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SortLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TOlapScanNode) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableUniqueKeyMergeOnWrite() {
		if err = oprot.WriteFieldBegin("enable_unique_key_merge_on_write", thrift.BOOL, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableUniqueKeyMergeOnWrite); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TOlapScanNode) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetPushDownAggTypeOpt() {
		if err = oprot.WriteFieldBegin("push_down_agg_type_opt", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.PushDownAggTypeOpt)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TOlapScanNode) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetUseTopnOpt() {
		if err = oprot.WriteFieldBegin("use_topn_opt", thrift.BOOL, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.UseTopnOpt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TOlapScanNode) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndexesDesc() {
		if err = oprot.WriteFieldBegin("indexes_desc", thrift.LIST, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.IndexesDesc)); err != nil {
			return err
		}
		for _, v := range p.IndexesDesc {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TOlapScanNode) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputColumnUniqueIds() {
		if err = oprot.WriteFieldBegin("output_column_unique_ids", thrift.SET, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteSetBegin(thrift.I32, len(p.OutputColumnUniqueIds)); err != nil {
			return err
		}
		for i := 0; i < len(p.OutputColumnUniqueIds); i++ {
			for j := i + 1; j < len(p.OutputColumnUniqueIds); j++ {
				if func(tgt, src int32) bool {
					if tgt != src {
						return false
					}
					return true
				}(p.OutputColumnUniqueIds[i], p.OutputColumnUniqueIds[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.OutputColumnUniqueIds[i]))
				}
			}
		}
		for _, v := range p.OutputColumnUniqueIds {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TOlapScanNode) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetDistributeColumnIds() {
		if err = oprot.WriteFieldBegin("distribute_column_ids", thrift.LIST, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.DistributeColumnIds)); err != nil {
			return err
		}
		for _, v := range p.DistributeColumnIds {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TOlapScanNode) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaVersion() {
		if err = oprot.WriteFieldBegin("schema_version", thrift.I32, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SchemaVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TOlapScanNode) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopnFilterSourceNodeIds() {
		if err = oprot.WriteFieldBegin("topn_filter_source_node_ids", thrift.LIST, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.TopnFilterSourceNodeIds)); err != nil {
			return err
		}
		for _, v := range p.TopnFilterSourceNodeIds {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TOlapScanNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TOlapScanNode(%+v)", *p)

}

func (p *TOlapScanNode) DeepEqual(ano *TOlapScanNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TupleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.KeyColumnName) {
		return false
	}
	if !p.Field3DeepEqual(ano.KeyColumnType) {
		return false
	}
	if !p.Field4DeepEqual(ano.IsPreaggregation) {
		return false
	}
	if !p.Field5DeepEqual(ano.SortColumn) {
		return false
	}
	if !p.Field6DeepEqual(ano.KeyType) {
		return false
	}
	if !p.Field7DeepEqual(ano.TableName) {
		return false
	}
	if !p.Field8DeepEqual(ano.ColumnsDesc) {
		return false
	}
	if !p.Field9DeepEqual(ano.SortInfo) {
		return false
	}
	if !p.Field10DeepEqual(ano.SortLimit) {
		return false
	}
	if !p.Field11DeepEqual(ano.EnableUniqueKeyMergeOnWrite) {
		return false
	}
	if !p.Field12DeepEqual(ano.PushDownAggTypeOpt) {
		return false
	}
	if !p.Field13DeepEqual(ano.UseTopnOpt) {
		return false
	}
	if !p.Field14DeepEqual(ano.IndexesDesc) {
		return false
	}
	if !p.Field15DeepEqual(ano.OutputColumnUniqueIds) {
		return false
	}
	if !p.Field16DeepEqual(ano.DistributeColumnIds) {
		return false
	}
	if !p.Field17DeepEqual(ano.SchemaVersion) {
		return false
	}
	if !p.Field18DeepEqual(ano.TopnFilterSourceNodeIds) {
		return false
	}
	return true
}

func (p *TOlapScanNode) Field1DeepEqual(src types.TTupleId) bool {

	if p.TupleId != src {
		return false
	}
	return true
}
func (p *TOlapScanNode) Field2DeepEqual(src []string) bool {

	if len(p.KeyColumnName) != len(src) {
		return false
	}
	for i, v := range p.KeyColumnName {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TOlapScanNode) Field3DeepEqual(src []types.TPrimitiveType) bool {

	if len(p.KeyColumnType) != len(src) {
		return false
	}
	for i, v := range p.KeyColumnType {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TOlapScanNode) Field4DeepEqual(src bool) bool {

	if p.IsPreaggregation != src {
		return false
	}
	return true
}
func (p *TOlapScanNode) Field5DeepEqual(src *string) bool {

	if p.SortColumn == src {
		return true
	} else if p.SortColumn == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SortColumn, *src) != 0 {
		return false
	}
	return true
}
func (p *TOlapScanNode) Field6DeepEqual(src *types.TKeysType) bool {

	if p.KeyType == src {
		return true
	} else if p.KeyType == nil || src == nil {
		return false
	}
	if *p.KeyType != *src {
		return false
	}
	return true
}
func (p *TOlapScanNode) Field7DeepEqual(src *string) bool {

	if p.TableName == src {
		return true
	} else if p.TableName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TableName, *src) != 0 {
		return false
	}
	return true
}
func (p *TOlapScanNode) Field8DeepEqual(src []*descriptors.TColumn) bool {

	if len(p.ColumnsDesc) != len(src) {
		return false
	}
	for i, v := range p.ColumnsDesc {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TOlapScanNode) Field9DeepEqual(src *TSortInfo) bool {

	if !p.SortInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TOlapScanNode) Field10DeepEqual(src *int64) bool {

	if p.SortLimit == src {
		return true
	} else if p.SortLimit == nil || src == nil {
		return false
	}
	if *p.SortLimit != *src {
		return false
	}
	return true
}
func (p *TOlapScanNode) Field11DeepEqual(src *bool) bool {

	if p.EnableUniqueKeyMergeOnWrite == src {
		return true
	} else if p.EnableUniqueKeyMergeOnWrite == nil || src == nil {
		return false
	}
	if *p.EnableUniqueKeyMergeOnWrite != *src {
		return false
	}
	return true
}
func (p *TOlapScanNode) Field12DeepEqual(src *TPushAggOp) bool {

	if p.PushDownAggTypeOpt == src {
		return true
	} else if p.PushDownAggTypeOpt == nil || src == nil {
		return false
	}
	if *p.PushDownAggTypeOpt != *src {
		return false
	}
	return true
}
func (p *TOlapScanNode) Field13DeepEqual(src *bool) bool {

	if p.UseTopnOpt == src {
		return true
	} else if p.UseTopnOpt == nil || src == nil {
		return false
	}
	if *p.UseTopnOpt != *src {
		return false
	}
	return true
}
func (p *TOlapScanNode) Field14DeepEqual(src []*descriptors.TOlapTableIndex) bool {

	if len(p.IndexesDesc) != len(src) {
		return false
	}
	for i, v := range p.IndexesDesc {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TOlapScanNode) Field15DeepEqual(src []int32) bool {

	if len(p.OutputColumnUniqueIds) != len(src) {
		return false
	}
	for i, v := range p.OutputColumnUniqueIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TOlapScanNode) Field16DeepEqual(src []int32) bool {

	if len(p.DistributeColumnIds) != len(src) {
		return false
	}
	for i, v := range p.DistributeColumnIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TOlapScanNode) Field17DeepEqual(src *int32) bool {

	if p.SchemaVersion == src {
		return true
	} else if p.SchemaVersion == nil || src == nil {
		return false
	}
	if *p.SchemaVersion != *src {
		return false
	}
	return true
}
func (p *TOlapScanNode) Field18DeepEqual(src []int32) bool {

	if len(p.TopnFilterSourceNodeIds) != len(src) {
		return false
	}
	for i, v := range p.TopnFilterSourceNodeIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type TEqJoinCondition struct {
	Left   *exprs.TExpr         `thrift:"left,1,required" frugal:"1,required,exprs.TExpr" json:"left"`
	Right  *exprs.TExpr         `thrift:"right,2,required" frugal:"2,required,exprs.TExpr" json:"right"`
	Opcode *opcodes.TExprOpcode `thrift:"opcode,3,optional" frugal:"3,optional,TExprOpcode" json:"opcode,omitempty"`
}

func NewTEqJoinCondition() *TEqJoinCondition {
	return &TEqJoinCondition{}
}

func (p *TEqJoinCondition) InitDefault() {
}

var TEqJoinCondition_Left_DEFAULT *exprs.TExpr

func (p *TEqJoinCondition) GetLeft() (v *exprs.TExpr) {
	if !p.IsSetLeft() {
		return TEqJoinCondition_Left_DEFAULT
	}
	return p.Left
}

var TEqJoinCondition_Right_DEFAULT *exprs.TExpr

func (p *TEqJoinCondition) GetRight() (v *exprs.TExpr) {
	if !p.IsSetRight() {
		return TEqJoinCondition_Right_DEFAULT
	}
	return p.Right
}

var TEqJoinCondition_Opcode_DEFAULT opcodes.TExprOpcode

func (p *TEqJoinCondition) GetOpcode() (v opcodes.TExprOpcode) {
	if !p.IsSetOpcode() {
		return TEqJoinCondition_Opcode_DEFAULT
	}
	return *p.Opcode
}
func (p *TEqJoinCondition) SetLeft(val *exprs.TExpr) {
	p.Left = val
}
func (p *TEqJoinCondition) SetRight(val *exprs.TExpr) {
	p.Right = val
}
func (p *TEqJoinCondition) SetOpcode(val *opcodes.TExprOpcode) {
	p.Opcode = val
}

var fieldIDToName_TEqJoinCondition = map[int16]string{
	1: "left",
	2: "right",
	3: "opcode",
}

func (p *TEqJoinCondition) IsSetLeft() bool {
	return p.Left != nil
}

func (p *TEqJoinCondition) IsSetRight() bool {
	return p.Right != nil
}

func (p *TEqJoinCondition) IsSetOpcode() bool {
	return p.Opcode != nil
}

func (p *TEqJoinCondition) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetLeft bool = false
	var issetRight bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetLeft = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetRight = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetLeft {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetRight {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TEqJoinCondition[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TEqJoinCondition[fieldId]))
}

func (p *TEqJoinCondition) ReadField1(iprot thrift.TProtocol) error {
	_field := exprs.NewTExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Left = _field
	return nil
}
func (p *TEqJoinCondition) ReadField2(iprot thrift.TProtocol) error {
	_field := exprs.NewTExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Right = _field
	return nil
}
func (p *TEqJoinCondition) ReadField3(iprot thrift.TProtocol) error {

	var _field *opcodes.TExprOpcode
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := opcodes.TExprOpcode(v)
		_field = &tmp
	}
	p.Opcode = _field
	return nil
}

func (p *TEqJoinCondition) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TEqJoinCondition"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TEqJoinCondition) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("left", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Left.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TEqJoinCondition) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("right", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Right.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TEqJoinCondition) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOpcode() {
		if err = oprot.WriteFieldBegin("opcode", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Opcode)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TEqJoinCondition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TEqJoinCondition(%+v)", *p)

}

func (p *TEqJoinCondition) DeepEqual(ano *TEqJoinCondition) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Left) {
		return false
	}
	if !p.Field2DeepEqual(ano.Right) {
		return false
	}
	if !p.Field3DeepEqual(ano.Opcode) {
		return false
	}
	return true
}

func (p *TEqJoinCondition) Field1DeepEqual(src *exprs.TExpr) bool {

	if !p.Left.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TEqJoinCondition) Field2DeepEqual(src *exprs.TExpr) bool {

	if !p.Right.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TEqJoinCondition) Field3DeepEqual(src *opcodes.TExprOpcode) bool {

	if p.Opcode == src {
		return true
	} else if p.Opcode == nil || src == nil {
		return false
	}
	if *p.Opcode != *src {
		return false
	}
	return true
}

type THashJoinNode struct {
	JoinOp                   TJoinOp                `thrift:"join_op,1,required" frugal:"1,required,TJoinOp" json:"join_op"`
	EqJoinConjuncts          []*TEqJoinCondition    `thrift:"eq_join_conjuncts,2,required" frugal:"2,required,list<TEqJoinCondition>" json:"eq_join_conjuncts"`
	OtherJoinConjuncts       []*exprs.TExpr         `thrift:"other_join_conjuncts,3,optional" frugal:"3,optional,list<exprs.TExpr>" json:"other_join_conjuncts,omitempty"`
	AddProbeFilters          *bool                  `thrift:"add_probe_filters,4,optional" frugal:"4,optional,bool" json:"add_probe_filters,omitempty"`
	VotherJoinConjunct       *exprs.TExpr           `thrift:"vother_join_conjunct,5,optional" frugal:"5,optional,exprs.TExpr" json:"vother_join_conjunct,omitempty"`
	HashOutputSlotIds        []types.TSlotId        `thrift:"hash_output_slot_ids,6,optional" frugal:"6,optional,list<i32>" json:"hash_output_slot_ids,omitempty"`
	SrcExprList              []*exprs.TExpr         `thrift:"srcExprList,7,optional" frugal:"7,optional,list<exprs.TExpr>" json:"srcExprList,omitempty"`
	VoutputTupleId           *types.TTupleId        `thrift:"voutput_tuple_id,8,optional" frugal:"8,optional,i32" json:"voutput_tuple_id,omitempty"`
	VintermediateTupleIdList []types.TTupleId       `thrift:"vintermediate_tuple_id_list,9,optional" frugal:"9,optional,list<i32>" json:"vintermediate_tuple_id_list,omitempty"`
	IsBroadcastJoin          *bool                  `thrift:"is_broadcast_join,10,optional" frugal:"10,optional,bool" json:"is_broadcast_join,omitempty"`
	IsMark                   *bool                  `thrift:"is_mark,11,optional" frugal:"11,optional,bool" json:"is_mark,omitempty"`
	DistType                 *TJoinDistributionType `thrift:"dist_type,12,optional" frugal:"12,optional,TJoinDistributionType" json:"dist_type,omitempty"`
	MarkJoinConjuncts        []*exprs.TExpr         `thrift:"mark_join_conjuncts,13,optional" frugal:"13,optional,list<exprs.TExpr>" json:"mark_join_conjuncts,omitempty"`
	UseSpecificProjections   *bool                  `thrift:"use_specific_projections,14,optional" frugal:"14,optional,bool" json:"use_specific_projections,omitempty"`
}

func NewTHashJoinNode() *THashJoinNode {
	return &THashJoinNode{}
}

func (p *THashJoinNode) InitDefault() {
}

func (p *THashJoinNode) GetJoinOp() (v TJoinOp) {
	return p.JoinOp
}

func (p *THashJoinNode) GetEqJoinConjuncts() (v []*TEqJoinCondition) {
	return p.EqJoinConjuncts
}

var THashJoinNode_OtherJoinConjuncts_DEFAULT []*exprs.TExpr

func (p *THashJoinNode) GetOtherJoinConjuncts() (v []*exprs.TExpr) {
	if !p.IsSetOtherJoinConjuncts() {
		return THashJoinNode_OtherJoinConjuncts_DEFAULT
	}
	return p.OtherJoinConjuncts
}

var THashJoinNode_AddProbeFilters_DEFAULT bool

func (p *THashJoinNode) GetAddProbeFilters() (v bool) {
	if !p.IsSetAddProbeFilters() {
		return THashJoinNode_AddProbeFilters_DEFAULT
	}
	return *p.AddProbeFilters
}

var THashJoinNode_VotherJoinConjunct_DEFAULT *exprs.TExpr

func (p *THashJoinNode) GetVotherJoinConjunct() (v *exprs.TExpr) {
	if !p.IsSetVotherJoinConjunct() {
		return THashJoinNode_VotherJoinConjunct_DEFAULT
	}
	return p.VotherJoinConjunct
}

var THashJoinNode_HashOutputSlotIds_DEFAULT []types.TSlotId

func (p *THashJoinNode) GetHashOutputSlotIds() (v []types.TSlotId) {
	if !p.IsSetHashOutputSlotIds() {
		return THashJoinNode_HashOutputSlotIds_DEFAULT
	}
	return p.HashOutputSlotIds
}

var THashJoinNode_SrcExprList_DEFAULT []*exprs.TExpr

func (p *THashJoinNode) GetSrcExprList() (v []*exprs.TExpr) {
	if !p.IsSetSrcExprList() {
		return THashJoinNode_SrcExprList_DEFAULT
	}
	return p.SrcExprList
}

var THashJoinNode_VoutputTupleId_DEFAULT types.TTupleId

func (p *THashJoinNode) GetVoutputTupleId() (v types.TTupleId) {
	if !p.IsSetVoutputTupleId() {
		return THashJoinNode_VoutputTupleId_DEFAULT
	}
	return *p.VoutputTupleId
}

var THashJoinNode_VintermediateTupleIdList_DEFAULT []types.TTupleId

func (p *THashJoinNode) GetVintermediateTupleIdList() (v []types.TTupleId) {
	if !p.IsSetVintermediateTupleIdList() {
		return THashJoinNode_VintermediateTupleIdList_DEFAULT
	}
	return p.VintermediateTupleIdList
}

var THashJoinNode_IsBroadcastJoin_DEFAULT bool

func (p *THashJoinNode) GetIsBroadcastJoin() (v bool) {
	if !p.IsSetIsBroadcastJoin() {
		return THashJoinNode_IsBroadcastJoin_DEFAULT
	}
	return *p.IsBroadcastJoin
}

var THashJoinNode_IsMark_DEFAULT bool

func (p *THashJoinNode) GetIsMark() (v bool) {
	if !p.IsSetIsMark() {
		return THashJoinNode_IsMark_DEFAULT
	}
	return *p.IsMark
}

var THashJoinNode_DistType_DEFAULT TJoinDistributionType

func (p *THashJoinNode) GetDistType() (v TJoinDistributionType) {
	if !p.IsSetDistType() {
		return THashJoinNode_DistType_DEFAULT
	}
	return *p.DistType
}

var THashJoinNode_MarkJoinConjuncts_DEFAULT []*exprs.TExpr

func (p *THashJoinNode) GetMarkJoinConjuncts() (v []*exprs.TExpr) {
	if !p.IsSetMarkJoinConjuncts() {
		return THashJoinNode_MarkJoinConjuncts_DEFAULT
	}
	return p.MarkJoinConjuncts
}

var THashJoinNode_UseSpecificProjections_DEFAULT bool

func (p *THashJoinNode) GetUseSpecificProjections() (v bool) {
	if !p.IsSetUseSpecificProjections() {
		return THashJoinNode_UseSpecificProjections_DEFAULT
	}
	return *p.UseSpecificProjections
}
func (p *THashJoinNode) SetJoinOp(val TJoinOp) {
	p.JoinOp = val
}
func (p *THashJoinNode) SetEqJoinConjuncts(val []*TEqJoinCondition) {
	p.EqJoinConjuncts = val
}
func (p *THashJoinNode) SetOtherJoinConjuncts(val []*exprs.TExpr) {
	p.OtherJoinConjuncts = val
}
func (p *THashJoinNode) SetAddProbeFilters(val *bool) {
	p.AddProbeFilters = val
}
func (p *THashJoinNode) SetVotherJoinConjunct(val *exprs.TExpr) {
	p.VotherJoinConjunct = val
}
func (p *THashJoinNode) SetHashOutputSlotIds(val []types.TSlotId) {
	p.HashOutputSlotIds = val
}
func (p *THashJoinNode) SetSrcExprList(val []*exprs.TExpr) {
	p.SrcExprList = val
}
func (p *THashJoinNode) SetVoutputTupleId(val *types.TTupleId) {
	p.VoutputTupleId = val
}
func (p *THashJoinNode) SetVintermediateTupleIdList(val []types.TTupleId) {
	p.VintermediateTupleIdList = val
}
func (p *THashJoinNode) SetIsBroadcastJoin(val *bool) {
	p.IsBroadcastJoin = val
}
func (p *THashJoinNode) SetIsMark(val *bool) {
	p.IsMark = val
}
func (p *THashJoinNode) SetDistType(val *TJoinDistributionType) {
	p.DistType = val
}
func (p *THashJoinNode) SetMarkJoinConjuncts(val []*exprs.TExpr) {
	p.MarkJoinConjuncts = val
}
func (p *THashJoinNode) SetUseSpecificProjections(val *bool) {
	p.UseSpecificProjections = val
}

var fieldIDToName_THashJoinNode = map[int16]string{
	1:  "join_op",
	2:  "eq_join_conjuncts",
	3:  "other_join_conjuncts",
	4:  "add_probe_filters",
	5:  "vother_join_conjunct",
	6:  "hash_output_slot_ids",
	7:  "srcExprList",
	8:  "voutput_tuple_id",
	9:  "vintermediate_tuple_id_list",
	10: "is_broadcast_join",
	11: "is_mark",
	12: "dist_type",
	13: "mark_join_conjuncts",
	14: "use_specific_projections",
}

func (p *THashJoinNode) IsSetOtherJoinConjuncts() bool {
	return p.OtherJoinConjuncts != nil
}

func (p *THashJoinNode) IsSetAddProbeFilters() bool {
	return p.AddProbeFilters != nil
}

func (p *THashJoinNode) IsSetVotherJoinConjunct() bool {
	return p.VotherJoinConjunct != nil
}

func (p *THashJoinNode) IsSetHashOutputSlotIds() bool {
	return p.HashOutputSlotIds != nil
}

func (p *THashJoinNode) IsSetSrcExprList() bool {
	return p.SrcExprList != nil
}

func (p *THashJoinNode) IsSetVoutputTupleId() bool {
	return p.VoutputTupleId != nil
}

func (p *THashJoinNode) IsSetVintermediateTupleIdList() bool {
	return p.VintermediateTupleIdList != nil
}

func (p *THashJoinNode) IsSetIsBroadcastJoin() bool {
	return p.IsBroadcastJoin != nil
}

func (p *THashJoinNode) IsSetIsMark() bool {
	return p.IsMark != nil
}

func (p *THashJoinNode) IsSetDistType() bool {
	return p.DistType != nil
}

func (p *THashJoinNode) IsSetMarkJoinConjuncts() bool {
	return p.MarkJoinConjuncts != nil
}

func (p *THashJoinNode) IsSetUseSpecificProjections() bool {
	return p.UseSpecificProjections != nil
}

func (p *THashJoinNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetJoinOp bool = false
	var issetEqJoinConjuncts bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetJoinOp = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEqJoinConjuncts = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetJoinOp {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEqJoinConjuncts {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_THashJoinNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_THashJoinNode[fieldId]))
}

func (p *THashJoinNode) ReadField1(iprot thrift.TProtocol) error {

	var _field TJoinOp
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TJoinOp(v)
	}
	p.JoinOp = _field
	return nil
}
func (p *THashJoinNode) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TEqJoinCondition, 0, size)
	values := make([]TEqJoinCondition, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EqJoinConjuncts = _field
	return nil
}
func (p *THashJoinNode) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OtherJoinConjuncts = _field
	return nil
}
func (p *THashJoinNode) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AddProbeFilters = _field
	return nil
}
func (p *THashJoinNode) ReadField5(iprot thrift.TProtocol) error {
	_field := exprs.NewTExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.VotherJoinConjunct = _field
	return nil
}
func (p *THashJoinNode) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TSlotId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TSlotId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.HashOutputSlotIds = _field
	return nil
}
func (p *THashJoinNode) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SrcExprList = _field
	return nil
}
func (p *THashJoinNode) ReadField8(iprot thrift.TProtocol) error {

	var _field *types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VoutputTupleId = _field
	return nil
}
func (p *THashJoinNode) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TTupleId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TTupleId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.VintermediateTupleIdList = _field
	return nil
}
func (p *THashJoinNode) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsBroadcastJoin = _field
	return nil
}
func (p *THashJoinNode) ReadField11(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsMark = _field
	return nil
}
func (p *THashJoinNode) ReadField12(iprot thrift.TProtocol) error {

	var _field *TJoinDistributionType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TJoinDistributionType(v)
		_field = &tmp
	}
	p.DistType = _field
	return nil
}
func (p *THashJoinNode) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MarkJoinConjuncts = _field
	return nil
}
func (p *THashJoinNode) ReadField14(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UseSpecificProjections = _field
	return nil
}

func (p *THashJoinNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("THashJoinNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *THashJoinNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("join_op", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.JoinOp)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *THashJoinNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eq_join_conjuncts", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EqJoinConjuncts)); err != nil {
		return err
	}
	for _, v := range p.EqJoinConjuncts {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *THashJoinNode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOtherJoinConjuncts() {
		if err = oprot.WriteFieldBegin("other_join_conjuncts", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OtherJoinConjuncts)); err != nil {
			return err
		}
		for _, v := range p.OtherJoinConjuncts {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *THashJoinNode) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddProbeFilters() {
		if err = oprot.WriteFieldBegin("add_probe_filters", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.AddProbeFilters); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *THashJoinNode) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetVotherJoinConjunct() {
		if err = oprot.WriteFieldBegin("vother_join_conjunct", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.VotherJoinConjunct.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *THashJoinNode) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetHashOutputSlotIds() {
		if err = oprot.WriteFieldBegin("hash_output_slot_ids", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.HashOutputSlotIds)); err != nil {
			return err
		}
		for _, v := range p.HashOutputSlotIds {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *THashJoinNode) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSrcExprList() {
		if err = oprot.WriteFieldBegin("srcExprList", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SrcExprList)); err != nil {
			return err
		}
		for _, v := range p.SrcExprList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *THashJoinNode) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetVoutputTupleId() {
		if err = oprot.WriteFieldBegin("voutput_tuple_id", thrift.I32, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.VoutputTupleId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *THashJoinNode) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetVintermediateTupleIdList() {
		if err = oprot.WriteFieldBegin("vintermediate_tuple_id_list", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.VintermediateTupleIdList)); err != nil {
			return err
		}
		for _, v := range p.VintermediateTupleIdList {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *THashJoinNode) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsBroadcastJoin() {
		if err = oprot.WriteFieldBegin("is_broadcast_join", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsBroadcastJoin); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *THashJoinNode) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsMark() {
		if err = oprot.WriteFieldBegin("is_mark", thrift.BOOL, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsMark); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *THashJoinNode) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetDistType() {
		if err = oprot.WriteFieldBegin("dist_type", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.DistType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *THashJoinNode) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetMarkJoinConjuncts() {
		if err = oprot.WriteFieldBegin("mark_join_conjuncts", thrift.LIST, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MarkJoinConjuncts)); err != nil {
			return err
		}
		for _, v := range p.MarkJoinConjuncts {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *THashJoinNode) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetUseSpecificProjections() {
		if err = oprot.WriteFieldBegin("use_specific_projections", thrift.BOOL, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.UseSpecificProjections); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *THashJoinNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("THashJoinNode(%+v)", *p)

}

func (p *THashJoinNode) DeepEqual(ano *THashJoinNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.JoinOp) {
		return false
	}
	if !p.Field2DeepEqual(ano.EqJoinConjuncts) {
		return false
	}
	if !p.Field3DeepEqual(ano.OtherJoinConjuncts) {
		return false
	}
	if !p.Field4DeepEqual(ano.AddProbeFilters) {
		return false
	}
	if !p.Field5DeepEqual(ano.VotherJoinConjunct) {
		return false
	}
	if !p.Field6DeepEqual(ano.HashOutputSlotIds) {
		return false
	}
	if !p.Field7DeepEqual(ano.SrcExprList) {
		return false
	}
	if !p.Field8DeepEqual(ano.VoutputTupleId) {
		return false
	}
	if !p.Field9DeepEqual(ano.VintermediateTupleIdList) {
		return false
	}
	if !p.Field10DeepEqual(ano.IsBroadcastJoin) {
		return false
	}
	if !p.Field11DeepEqual(ano.IsMark) {
		return false
	}
	if !p.Field12DeepEqual(ano.DistType) {
		return false
	}
	if !p.Field13DeepEqual(ano.MarkJoinConjuncts) {
		return false
	}
	if !p.Field14DeepEqual(ano.UseSpecificProjections) {
		return false
	}
	return true
}

func (p *THashJoinNode) Field1DeepEqual(src TJoinOp) bool {

	if p.JoinOp != src {
		return false
	}
	return true
}
func (p *THashJoinNode) Field2DeepEqual(src []*TEqJoinCondition) bool {

	if len(p.EqJoinConjuncts) != len(src) {
		return false
	}
	for i, v := range p.EqJoinConjuncts {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *THashJoinNode) Field3DeepEqual(src []*exprs.TExpr) bool {

	if len(p.OtherJoinConjuncts) != len(src) {
		return false
	}
	for i, v := range p.OtherJoinConjuncts {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *THashJoinNode) Field4DeepEqual(src *bool) bool {

	if p.AddProbeFilters == src {
		return true
	} else if p.AddProbeFilters == nil || src == nil {
		return false
	}
	if *p.AddProbeFilters != *src {
		return false
	}
	return true
}
func (p *THashJoinNode) Field5DeepEqual(src *exprs.TExpr) bool {

	if !p.VotherJoinConjunct.DeepEqual(src) {
		return false
	}
	return true
}
func (p *THashJoinNode) Field6DeepEqual(src []types.TSlotId) bool {

	if len(p.HashOutputSlotIds) != len(src) {
		return false
	}
	for i, v := range p.HashOutputSlotIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *THashJoinNode) Field7DeepEqual(src []*exprs.TExpr) bool {

	if len(p.SrcExprList) != len(src) {
		return false
	}
	for i, v := range p.SrcExprList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *THashJoinNode) Field8DeepEqual(src *types.TTupleId) bool {

	if p.VoutputTupleId == src {
		return true
	} else if p.VoutputTupleId == nil || src == nil {
		return false
	}
	if *p.VoutputTupleId != *src {
		return false
	}
	return true
}
func (p *THashJoinNode) Field9DeepEqual(src []types.TTupleId) bool {

	if len(p.VintermediateTupleIdList) != len(src) {
		return false
	}
	for i, v := range p.VintermediateTupleIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *THashJoinNode) Field10DeepEqual(src *bool) bool {

	if p.IsBroadcastJoin == src {
		return true
	} else if p.IsBroadcastJoin == nil || src == nil {
		return false
	}
	if *p.IsBroadcastJoin != *src {
		return false
	}
	return true
}
func (p *THashJoinNode) Field11DeepEqual(src *bool) bool {

	if p.IsMark == src {
		return true
	} else if p.IsMark == nil || src == nil {
		return false
	}
	if *p.IsMark != *src {
		return false
	}
	return true
}
func (p *THashJoinNode) Field12DeepEqual(src *TJoinDistributionType) bool {

	if p.DistType == src {
		return true
	} else if p.DistType == nil || src == nil {
		return false
	}
	if *p.DistType != *src {
		return false
	}
	return true
}
func (p *THashJoinNode) Field13DeepEqual(src []*exprs.TExpr) bool {

	if len(p.MarkJoinConjuncts) != len(src) {
		return false
	}
	for i, v := range p.MarkJoinConjuncts {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *THashJoinNode) Field14DeepEqual(src *bool) bool {

	if p.UseSpecificProjections == src {
		return true
	} else if p.UseSpecificProjections == nil || src == nil {
		return false
	}
	if *p.UseSpecificProjections != *src {
		return false
	}
	return true
}

type TNestedLoopJoinNode struct {
	JoinOp                   TJoinOp          `thrift:"join_op,1,required" frugal:"1,required,TJoinOp" json:"join_op"`
	SrcExprList              []*exprs.TExpr   `thrift:"srcExprList,2,optional" frugal:"2,optional,list<exprs.TExpr>" json:"srcExprList,omitempty"`
	VoutputTupleId           *types.TTupleId  `thrift:"voutput_tuple_id,3,optional" frugal:"3,optional,i32" json:"voutput_tuple_id,omitempty"`
	VintermediateTupleIdList []types.TTupleId `thrift:"vintermediate_tuple_id_list,4,optional" frugal:"4,optional,list<i32>" json:"vintermediate_tuple_id_list,omitempty"`
	IsOutputLeftSideOnly     *bool            `thrift:"is_output_left_side_only,5,optional" frugal:"5,optional,bool" json:"is_output_left_side_only,omitempty"`
	VjoinConjunct            *exprs.TExpr     `thrift:"vjoin_conjunct,6,optional" frugal:"6,optional,exprs.TExpr" json:"vjoin_conjunct,omitempty"`
	IsMark                   *bool            `thrift:"is_mark,7,optional" frugal:"7,optional,bool" json:"is_mark,omitempty"`
	JoinConjuncts            []*exprs.TExpr   `thrift:"join_conjuncts,8,optional" frugal:"8,optional,list<exprs.TExpr>" json:"join_conjuncts,omitempty"`
	MarkJoinConjuncts        []*exprs.TExpr   `thrift:"mark_join_conjuncts,9,optional" frugal:"9,optional,list<exprs.TExpr>" json:"mark_join_conjuncts,omitempty"`
	UseSpecificProjections   *bool            `thrift:"use_specific_projections,10,optional" frugal:"10,optional,bool" json:"use_specific_projections,omitempty"`
}

func NewTNestedLoopJoinNode() *TNestedLoopJoinNode {
	return &TNestedLoopJoinNode{}
}

func (p *TNestedLoopJoinNode) InitDefault() {
}

func (p *TNestedLoopJoinNode) GetJoinOp() (v TJoinOp) {
	return p.JoinOp
}

var TNestedLoopJoinNode_SrcExprList_DEFAULT []*exprs.TExpr

func (p *TNestedLoopJoinNode) GetSrcExprList() (v []*exprs.TExpr) {
	if !p.IsSetSrcExprList() {
		return TNestedLoopJoinNode_SrcExprList_DEFAULT
	}
	return p.SrcExprList
}

var TNestedLoopJoinNode_VoutputTupleId_DEFAULT types.TTupleId

func (p *TNestedLoopJoinNode) GetVoutputTupleId() (v types.TTupleId) {
	if !p.IsSetVoutputTupleId() {
		return TNestedLoopJoinNode_VoutputTupleId_DEFAULT
	}
	return *p.VoutputTupleId
}

var TNestedLoopJoinNode_VintermediateTupleIdList_DEFAULT []types.TTupleId

func (p *TNestedLoopJoinNode) GetVintermediateTupleIdList() (v []types.TTupleId) {
	if !p.IsSetVintermediateTupleIdList() {
		return TNestedLoopJoinNode_VintermediateTupleIdList_DEFAULT
	}
	return p.VintermediateTupleIdList
}

var TNestedLoopJoinNode_IsOutputLeftSideOnly_DEFAULT bool

func (p *TNestedLoopJoinNode) GetIsOutputLeftSideOnly() (v bool) {
	if !p.IsSetIsOutputLeftSideOnly() {
		return TNestedLoopJoinNode_IsOutputLeftSideOnly_DEFAULT
	}
	return *p.IsOutputLeftSideOnly
}

var TNestedLoopJoinNode_VjoinConjunct_DEFAULT *exprs.TExpr

func (p *TNestedLoopJoinNode) GetVjoinConjunct() (v *exprs.TExpr) {
	if !p.IsSetVjoinConjunct() {
		return TNestedLoopJoinNode_VjoinConjunct_DEFAULT
	}
	return p.VjoinConjunct
}

var TNestedLoopJoinNode_IsMark_DEFAULT bool

func (p *TNestedLoopJoinNode) GetIsMark() (v bool) {
	if !p.IsSetIsMark() {
		return TNestedLoopJoinNode_IsMark_DEFAULT
	}
	return *p.IsMark
}

var TNestedLoopJoinNode_JoinConjuncts_DEFAULT []*exprs.TExpr

func (p *TNestedLoopJoinNode) GetJoinConjuncts() (v []*exprs.TExpr) {
	if !p.IsSetJoinConjuncts() {
		return TNestedLoopJoinNode_JoinConjuncts_DEFAULT
	}
	return p.JoinConjuncts
}

var TNestedLoopJoinNode_MarkJoinConjuncts_DEFAULT []*exprs.TExpr

func (p *TNestedLoopJoinNode) GetMarkJoinConjuncts() (v []*exprs.TExpr) {
	if !p.IsSetMarkJoinConjuncts() {
		return TNestedLoopJoinNode_MarkJoinConjuncts_DEFAULT
	}
	return p.MarkJoinConjuncts
}

var TNestedLoopJoinNode_UseSpecificProjections_DEFAULT bool

func (p *TNestedLoopJoinNode) GetUseSpecificProjections() (v bool) {
	if !p.IsSetUseSpecificProjections() {
		return TNestedLoopJoinNode_UseSpecificProjections_DEFAULT
	}
	return *p.UseSpecificProjections
}
func (p *TNestedLoopJoinNode) SetJoinOp(val TJoinOp) {
	p.JoinOp = val
}
func (p *TNestedLoopJoinNode) SetSrcExprList(val []*exprs.TExpr) {
	p.SrcExprList = val
}
func (p *TNestedLoopJoinNode) SetVoutputTupleId(val *types.TTupleId) {
	p.VoutputTupleId = val
}
func (p *TNestedLoopJoinNode) SetVintermediateTupleIdList(val []types.TTupleId) {
	p.VintermediateTupleIdList = val
}
func (p *TNestedLoopJoinNode) SetIsOutputLeftSideOnly(val *bool) {
	p.IsOutputLeftSideOnly = val
}
func (p *TNestedLoopJoinNode) SetVjoinConjunct(val *exprs.TExpr) {
	p.VjoinConjunct = val
}
func (p *TNestedLoopJoinNode) SetIsMark(val *bool) {
	p.IsMark = val
}
func (p *TNestedLoopJoinNode) SetJoinConjuncts(val []*exprs.TExpr) {
	p.JoinConjuncts = val
}
func (p *TNestedLoopJoinNode) SetMarkJoinConjuncts(val []*exprs.TExpr) {
	p.MarkJoinConjuncts = val
}
func (p *TNestedLoopJoinNode) SetUseSpecificProjections(val *bool) {
	p.UseSpecificProjections = val
}

var fieldIDToName_TNestedLoopJoinNode = map[int16]string{
	1:  "join_op",
	2:  "srcExprList",
	3:  "voutput_tuple_id",
	4:  "vintermediate_tuple_id_list",
	5:  "is_output_left_side_only",
	6:  "vjoin_conjunct",
	7:  "is_mark",
	8:  "join_conjuncts",
	9:  "mark_join_conjuncts",
	10: "use_specific_projections",
}

func (p *TNestedLoopJoinNode) IsSetSrcExprList() bool {
	return p.SrcExprList != nil
}

func (p *TNestedLoopJoinNode) IsSetVoutputTupleId() bool {
	return p.VoutputTupleId != nil
}

func (p *TNestedLoopJoinNode) IsSetVintermediateTupleIdList() bool {
	return p.VintermediateTupleIdList != nil
}

func (p *TNestedLoopJoinNode) IsSetIsOutputLeftSideOnly() bool {
	return p.IsOutputLeftSideOnly != nil
}

func (p *TNestedLoopJoinNode) IsSetVjoinConjunct() bool {
	return p.VjoinConjunct != nil
}

func (p *TNestedLoopJoinNode) IsSetIsMark() bool {
	return p.IsMark != nil
}

func (p *TNestedLoopJoinNode) IsSetJoinConjuncts() bool {
	return p.JoinConjuncts != nil
}

func (p *TNestedLoopJoinNode) IsSetMarkJoinConjuncts() bool {
	return p.MarkJoinConjuncts != nil
}

func (p *TNestedLoopJoinNode) IsSetUseSpecificProjections() bool {
	return p.UseSpecificProjections != nil
}

func (p *TNestedLoopJoinNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetJoinOp bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetJoinOp = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetJoinOp {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TNestedLoopJoinNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TNestedLoopJoinNode[fieldId]))
}

func (p *TNestedLoopJoinNode) ReadField1(iprot thrift.TProtocol) error {

	var _field TJoinOp
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TJoinOp(v)
	}
	p.JoinOp = _field
	return nil
}
func (p *TNestedLoopJoinNode) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SrcExprList = _field
	return nil
}
func (p *TNestedLoopJoinNode) ReadField3(iprot thrift.TProtocol) error {

	var _field *types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VoutputTupleId = _field
	return nil
}
func (p *TNestedLoopJoinNode) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TTupleId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TTupleId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.VintermediateTupleIdList = _field
	return nil
}
func (p *TNestedLoopJoinNode) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsOutputLeftSideOnly = _field
	return nil
}
func (p *TNestedLoopJoinNode) ReadField6(iprot thrift.TProtocol) error {
	_field := exprs.NewTExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.VjoinConjunct = _field
	return nil
}
func (p *TNestedLoopJoinNode) ReadField7(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsMark = _field
	return nil
}
func (p *TNestedLoopJoinNode) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.JoinConjuncts = _field
	return nil
}
func (p *TNestedLoopJoinNode) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MarkJoinConjuncts = _field
	return nil
}
func (p *TNestedLoopJoinNode) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UseSpecificProjections = _field
	return nil
}

func (p *TNestedLoopJoinNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TNestedLoopJoinNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TNestedLoopJoinNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("join_op", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.JoinOp)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TNestedLoopJoinNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSrcExprList() {
		if err = oprot.WriteFieldBegin("srcExprList", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SrcExprList)); err != nil {
			return err
		}
		for _, v := range p.SrcExprList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TNestedLoopJoinNode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVoutputTupleId() {
		if err = oprot.WriteFieldBegin("voutput_tuple_id", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.VoutputTupleId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TNestedLoopJoinNode) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVintermediateTupleIdList() {
		if err = oprot.WriteFieldBegin("vintermediate_tuple_id_list", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.VintermediateTupleIdList)); err != nil {
			return err
		}
		for _, v := range p.VintermediateTupleIdList {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TNestedLoopJoinNode) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsOutputLeftSideOnly() {
		if err = oprot.WriteFieldBegin("is_output_left_side_only", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsOutputLeftSideOnly); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TNestedLoopJoinNode) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetVjoinConjunct() {
		if err = oprot.WriteFieldBegin("vjoin_conjunct", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.VjoinConjunct.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TNestedLoopJoinNode) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsMark() {
		if err = oprot.WriteFieldBegin("is_mark", thrift.BOOL, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsMark); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TNestedLoopJoinNode) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetJoinConjuncts() {
		if err = oprot.WriteFieldBegin("join_conjuncts", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.JoinConjuncts)); err != nil {
			return err
		}
		for _, v := range p.JoinConjuncts {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TNestedLoopJoinNode) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetMarkJoinConjuncts() {
		if err = oprot.WriteFieldBegin("mark_join_conjuncts", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MarkJoinConjuncts)); err != nil {
			return err
		}
		for _, v := range p.MarkJoinConjuncts {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TNestedLoopJoinNode) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetUseSpecificProjections() {
		if err = oprot.WriteFieldBegin("use_specific_projections", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.UseSpecificProjections); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TNestedLoopJoinNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TNestedLoopJoinNode(%+v)", *p)

}

func (p *TNestedLoopJoinNode) DeepEqual(ano *TNestedLoopJoinNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.JoinOp) {
		return false
	}
	if !p.Field2DeepEqual(ano.SrcExprList) {
		return false
	}
	if !p.Field3DeepEqual(ano.VoutputTupleId) {
		return false
	}
	if !p.Field4DeepEqual(ano.VintermediateTupleIdList) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsOutputLeftSideOnly) {
		return false
	}
	if !p.Field6DeepEqual(ano.VjoinConjunct) {
		return false
	}
	if !p.Field7DeepEqual(ano.IsMark) {
		return false
	}
	if !p.Field8DeepEqual(ano.JoinConjuncts) {
		return false
	}
	if !p.Field9DeepEqual(ano.MarkJoinConjuncts) {
		return false
	}
	if !p.Field10DeepEqual(ano.UseSpecificProjections) {
		return false
	}
	return true
}

func (p *TNestedLoopJoinNode) Field1DeepEqual(src TJoinOp) bool {

	if p.JoinOp != src {
		return false
	}
	return true
}
func (p *TNestedLoopJoinNode) Field2DeepEqual(src []*exprs.TExpr) bool {

	if len(p.SrcExprList) != len(src) {
		return false
	}
	for i, v := range p.SrcExprList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TNestedLoopJoinNode) Field3DeepEqual(src *types.TTupleId) bool {

	if p.VoutputTupleId == src {
		return true
	} else if p.VoutputTupleId == nil || src == nil {
		return false
	}
	if *p.VoutputTupleId != *src {
		return false
	}
	return true
}
func (p *TNestedLoopJoinNode) Field4DeepEqual(src []types.TTupleId) bool {

	if len(p.VintermediateTupleIdList) != len(src) {
		return false
	}
	for i, v := range p.VintermediateTupleIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TNestedLoopJoinNode) Field5DeepEqual(src *bool) bool {

	if p.IsOutputLeftSideOnly == src {
		return true
	} else if p.IsOutputLeftSideOnly == nil || src == nil {
		return false
	}
	if *p.IsOutputLeftSideOnly != *src {
		return false
	}
	return true
}
func (p *TNestedLoopJoinNode) Field6DeepEqual(src *exprs.TExpr) bool {

	if !p.VjoinConjunct.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TNestedLoopJoinNode) Field7DeepEqual(src *bool) bool {

	if p.IsMark == src {
		return true
	} else if p.IsMark == nil || src == nil {
		return false
	}
	if *p.IsMark != *src {
		return false
	}
	return true
}
func (p *TNestedLoopJoinNode) Field8DeepEqual(src []*exprs.TExpr) bool {

	if len(p.JoinConjuncts) != len(src) {
		return false
	}
	for i, v := range p.JoinConjuncts {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TNestedLoopJoinNode) Field9DeepEqual(src []*exprs.TExpr) bool {

	if len(p.MarkJoinConjuncts) != len(src) {
		return false
	}
	for i, v := range p.MarkJoinConjuncts {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TNestedLoopJoinNode) Field10DeepEqual(src *bool) bool {

	if p.UseSpecificProjections == src {
		return true
	} else if p.UseSpecificProjections == nil || src == nil {
		return false
	}
	if *p.UseSpecificProjections != *src {
		return false
	}
	return true
}

type TMergeJoinNode struct {
	CmpConjuncts       []*TEqJoinCondition `thrift:"cmp_conjuncts,1,required" frugal:"1,required,list<TEqJoinCondition>" json:"cmp_conjuncts"`
	OtherJoinConjuncts []*exprs.TExpr      `thrift:"other_join_conjuncts,2,optional" frugal:"2,optional,list<exprs.TExpr>" json:"other_join_conjuncts,omitempty"`
}

func NewTMergeJoinNode() *TMergeJoinNode {
	return &TMergeJoinNode{}
}

func (p *TMergeJoinNode) InitDefault() {
}

func (p *TMergeJoinNode) GetCmpConjuncts() (v []*TEqJoinCondition) {
	return p.CmpConjuncts
}

var TMergeJoinNode_OtherJoinConjuncts_DEFAULT []*exprs.TExpr

func (p *TMergeJoinNode) GetOtherJoinConjuncts() (v []*exprs.TExpr) {
	if !p.IsSetOtherJoinConjuncts() {
		return TMergeJoinNode_OtherJoinConjuncts_DEFAULT
	}
	return p.OtherJoinConjuncts
}
func (p *TMergeJoinNode) SetCmpConjuncts(val []*TEqJoinCondition) {
	p.CmpConjuncts = val
}
func (p *TMergeJoinNode) SetOtherJoinConjuncts(val []*exprs.TExpr) {
	p.OtherJoinConjuncts = val
}

var fieldIDToName_TMergeJoinNode = map[int16]string{
	1: "cmp_conjuncts",
	2: "other_join_conjuncts",
}

func (p *TMergeJoinNode) IsSetOtherJoinConjuncts() bool {
	return p.OtherJoinConjuncts != nil
}

func (p *TMergeJoinNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCmpConjuncts bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCmpConjuncts = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCmpConjuncts {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMergeJoinNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TMergeJoinNode[fieldId]))
}

func (p *TMergeJoinNode) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TEqJoinCondition, 0, size)
	values := make([]TEqJoinCondition, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.CmpConjuncts = _field
	return nil
}
func (p *TMergeJoinNode) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OtherJoinConjuncts = _field
	return nil
}

func (p *TMergeJoinNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMergeJoinNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMergeJoinNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cmp_conjuncts", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CmpConjuncts)); err != nil {
		return err
	}
	for _, v := range p.CmpConjuncts {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMergeJoinNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOtherJoinConjuncts() {
		if err = oprot.WriteFieldBegin("other_join_conjuncts", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OtherJoinConjuncts)); err != nil {
			return err
		}
		for _, v := range p.OtherJoinConjuncts {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TMergeJoinNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMergeJoinNode(%+v)", *p)

}

func (p *TMergeJoinNode) DeepEqual(ano *TMergeJoinNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CmpConjuncts) {
		return false
	}
	if !p.Field2DeepEqual(ano.OtherJoinConjuncts) {
		return false
	}
	return true
}

func (p *TMergeJoinNode) Field1DeepEqual(src []*TEqJoinCondition) bool {

	if len(p.CmpConjuncts) != len(src) {
		return false
	}
	for i, v := range p.CmpConjuncts {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TMergeJoinNode) Field2DeepEqual(src []*exprs.TExpr) bool {

	if len(p.OtherJoinConjuncts) != len(src) {
		return false
	}
	for i, v := range p.OtherJoinConjuncts {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TAggregationNode struct {
	GroupingExprs              []*exprs.TExpr `thrift:"grouping_exprs,1,optional" frugal:"1,optional,list<exprs.TExpr>" json:"grouping_exprs,omitempty"`
	AggregateFunctions         []*exprs.TExpr `thrift:"aggregate_functions,2,required" frugal:"2,required,list<exprs.TExpr>" json:"aggregate_functions"`
	IntermediateTupleId        types.TTupleId `thrift:"intermediate_tuple_id,3,required" frugal:"3,required,i32" json:"intermediate_tuple_id"`
	OutputTupleId              types.TTupleId `thrift:"output_tuple_id,4,required" frugal:"4,required,i32" json:"output_tuple_id"`
	NeedFinalize               bool           `thrift:"need_finalize,5,required" frugal:"5,required,bool" json:"need_finalize"`
	UseStreamingPreaggregation *bool          `thrift:"use_streaming_preaggregation,6,optional" frugal:"6,optional,bool" json:"use_streaming_preaggregation,omitempty"`
	AggSortInfos               []*TSortInfo   `thrift:"agg_sort_infos,7,optional" frugal:"7,optional,list<TSortInfo>" json:"agg_sort_infos,omitempty"`
	IsFirstPhase               *bool          `thrift:"is_first_phase,8,optional" frugal:"8,optional,bool" json:"is_first_phase,omitempty"`
	IsColocate                 *bool          `thrift:"is_colocate,9,optional" frugal:"9,optional,bool" json:"is_colocate,omitempty"`
	AggSortInfoByGroupKey      *TSortInfo     `thrift:"agg_sort_info_by_group_key,10,optional" frugal:"10,optional,TSortInfo" json:"agg_sort_info_by_group_key,omitempty"`
}

func NewTAggregationNode() *TAggregationNode {
	return &TAggregationNode{}
}

func (p *TAggregationNode) InitDefault() {
}

var TAggregationNode_GroupingExprs_DEFAULT []*exprs.TExpr

func (p *TAggregationNode) GetGroupingExprs() (v []*exprs.TExpr) {
	if !p.IsSetGroupingExprs() {
		return TAggregationNode_GroupingExprs_DEFAULT
	}
	return p.GroupingExprs
}

func (p *TAggregationNode) GetAggregateFunctions() (v []*exprs.TExpr) {
	return p.AggregateFunctions
}

func (p *TAggregationNode) GetIntermediateTupleId() (v types.TTupleId) {
	return p.IntermediateTupleId
}

func (p *TAggregationNode) GetOutputTupleId() (v types.TTupleId) {
	return p.OutputTupleId
}

func (p *TAggregationNode) GetNeedFinalize() (v bool) {
	return p.NeedFinalize
}

var TAggregationNode_UseStreamingPreaggregation_DEFAULT bool

func (p *TAggregationNode) GetUseStreamingPreaggregation() (v bool) {
	if !p.IsSetUseStreamingPreaggregation() {
		return TAggregationNode_UseStreamingPreaggregation_DEFAULT
	}
	return *p.UseStreamingPreaggregation
}

var TAggregationNode_AggSortInfos_DEFAULT []*TSortInfo

func (p *TAggregationNode) GetAggSortInfos() (v []*TSortInfo) {
	if !p.IsSetAggSortInfos() {
		return TAggregationNode_AggSortInfos_DEFAULT
	}
	return p.AggSortInfos
}

var TAggregationNode_IsFirstPhase_DEFAULT bool

func (p *TAggregationNode) GetIsFirstPhase() (v bool) {
	if !p.IsSetIsFirstPhase() {
		return TAggregationNode_IsFirstPhase_DEFAULT
	}
	return *p.IsFirstPhase
}

var TAggregationNode_IsColocate_DEFAULT bool

func (p *TAggregationNode) GetIsColocate() (v bool) {
	if !p.IsSetIsColocate() {
		return TAggregationNode_IsColocate_DEFAULT
	}
	return *p.IsColocate
}

var TAggregationNode_AggSortInfoByGroupKey_DEFAULT *TSortInfo

func (p *TAggregationNode) GetAggSortInfoByGroupKey() (v *TSortInfo) {
	if !p.IsSetAggSortInfoByGroupKey() {
		return TAggregationNode_AggSortInfoByGroupKey_DEFAULT
	}
	return p.AggSortInfoByGroupKey
}
func (p *TAggregationNode) SetGroupingExprs(val []*exprs.TExpr) {
	p.GroupingExprs = val
}
func (p *TAggregationNode) SetAggregateFunctions(val []*exprs.TExpr) {
	p.AggregateFunctions = val
}
func (p *TAggregationNode) SetIntermediateTupleId(val types.TTupleId) {
	p.IntermediateTupleId = val
}
func (p *TAggregationNode) SetOutputTupleId(val types.TTupleId) {
	p.OutputTupleId = val
}
func (p *TAggregationNode) SetNeedFinalize(val bool) {
	p.NeedFinalize = val
}
func (p *TAggregationNode) SetUseStreamingPreaggregation(val *bool) {
	p.UseStreamingPreaggregation = val
}
func (p *TAggregationNode) SetAggSortInfos(val []*TSortInfo) {
	p.AggSortInfos = val
}
func (p *TAggregationNode) SetIsFirstPhase(val *bool) {
	p.IsFirstPhase = val
}
func (p *TAggregationNode) SetIsColocate(val *bool) {
	p.IsColocate = val
}
func (p *TAggregationNode) SetAggSortInfoByGroupKey(val *TSortInfo) {
	p.AggSortInfoByGroupKey = val
}

var fieldIDToName_TAggregationNode = map[int16]string{
	1:  "grouping_exprs",
	2:  "aggregate_functions",
	3:  "intermediate_tuple_id",
	4:  "output_tuple_id",
	5:  "need_finalize",
	6:  "use_streaming_preaggregation",
	7:  "agg_sort_infos",
	8:  "is_first_phase",
	9:  "is_colocate",
	10: "agg_sort_info_by_group_key",
}

func (p *TAggregationNode) IsSetGroupingExprs() bool {
	return p.GroupingExprs != nil
}

func (p *TAggregationNode) IsSetUseStreamingPreaggregation() bool {
	return p.UseStreamingPreaggregation != nil
}

func (p *TAggregationNode) IsSetAggSortInfos() bool {
	return p.AggSortInfos != nil
}

func (p *TAggregationNode) IsSetIsFirstPhase() bool {
	return p.IsFirstPhase != nil
}

func (p *TAggregationNode) IsSetIsColocate() bool {
	return p.IsColocate != nil
}

func (p *TAggregationNode) IsSetAggSortInfoByGroupKey() bool {
	return p.AggSortInfoByGroupKey != nil
}

func (p *TAggregationNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAggregateFunctions bool = false
	var issetIntermediateTupleId bool = false
	var issetOutputTupleId bool = false
	var issetNeedFinalize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetAggregateFunctions = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetIntermediateTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetOutputTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetNeedFinalize = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAggregateFunctions {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetIntermediateTupleId {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetOutputTupleId {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetNeedFinalize {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAggregationNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAggregationNode[fieldId]))
}

func (p *TAggregationNode) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.GroupingExprs = _field
	return nil
}
func (p *TAggregationNode) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.AggregateFunctions = _field
	return nil
}
func (p *TAggregationNode) ReadField3(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IntermediateTupleId = _field
	return nil
}
func (p *TAggregationNode) ReadField4(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OutputTupleId = _field
	return nil
}
func (p *TAggregationNode) ReadField5(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NeedFinalize = _field
	return nil
}
func (p *TAggregationNode) ReadField6(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UseStreamingPreaggregation = _field
	return nil
}
func (p *TAggregationNode) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TSortInfo, 0, size)
	values := make([]TSortInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.AggSortInfos = _field
	return nil
}
func (p *TAggregationNode) ReadField8(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsFirstPhase = _field
	return nil
}
func (p *TAggregationNode) ReadField9(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsColocate = _field
	return nil
}
func (p *TAggregationNode) ReadField10(iprot thrift.TProtocol) error {
	_field := NewTSortInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AggSortInfoByGroupKey = _field
	return nil
}

func (p *TAggregationNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAggregationNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAggregationNode) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupingExprs() {
		if err = oprot.WriteFieldBegin("grouping_exprs", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.GroupingExprs)); err != nil {
			return err
		}
		for _, v := range p.GroupingExprs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAggregationNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("aggregate_functions", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AggregateFunctions)); err != nil {
		return err
	}
	for _, v := range p.AggregateFunctions {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAggregationNode) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("intermediate_tuple_id", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.IntermediateTupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TAggregationNode) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("output_tuple_id", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.OutputTupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TAggregationNode) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("need_finalize", thrift.BOOL, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.NeedFinalize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TAggregationNode) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUseStreamingPreaggregation() {
		if err = oprot.WriteFieldBegin("use_streaming_preaggregation", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.UseStreamingPreaggregation); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TAggregationNode) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAggSortInfos() {
		if err = oprot.WriteFieldBegin("agg_sort_infos", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AggSortInfos)); err != nil {
			return err
		}
		for _, v := range p.AggSortInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TAggregationNode) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsFirstPhase() {
		if err = oprot.WriteFieldBegin("is_first_phase", thrift.BOOL, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsFirstPhase); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TAggregationNode) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsColocate() {
		if err = oprot.WriteFieldBegin("is_colocate", thrift.BOOL, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsColocate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TAggregationNode) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetAggSortInfoByGroupKey() {
		if err = oprot.WriteFieldBegin("agg_sort_info_by_group_key", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.AggSortInfoByGroupKey.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TAggregationNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAggregationNode(%+v)", *p)

}

func (p *TAggregationNode) DeepEqual(ano *TAggregationNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.GroupingExprs) {
		return false
	}
	if !p.Field2DeepEqual(ano.AggregateFunctions) {
		return false
	}
	if !p.Field3DeepEqual(ano.IntermediateTupleId) {
		return false
	}
	if !p.Field4DeepEqual(ano.OutputTupleId) {
		return false
	}
	if !p.Field5DeepEqual(ano.NeedFinalize) {
		return false
	}
	if !p.Field6DeepEqual(ano.UseStreamingPreaggregation) {
		return false
	}
	if !p.Field7DeepEqual(ano.AggSortInfos) {
		return false
	}
	if !p.Field8DeepEqual(ano.IsFirstPhase) {
		return false
	}
	if !p.Field9DeepEqual(ano.IsColocate) {
		return false
	}
	if !p.Field10DeepEqual(ano.AggSortInfoByGroupKey) {
		return false
	}
	return true
}

func (p *TAggregationNode) Field1DeepEqual(src []*exprs.TExpr) bool {

	if len(p.GroupingExprs) != len(src) {
		return false
	}
	for i, v := range p.GroupingExprs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TAggregationNode) Field2DeepEqual(src []*exprs.TExpr) bool {

	if len(p.AggregateFunctions) != len(src) {
		return false
	}
	for i, v := range p.AggregateFunctions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TAggregationNode) Field3DeepEqual(src types.TTupleId) bool {

	if p.IntermediateTupleId != src {
		return false
	}
	return true
}
func (p *TAggregationNode) Field4DeepEqual(src types.TTupleId) bool {

	if p.OutputTupleId != src {
		return false
	}
	return true
}
func (p *TAggregationNode) Field5DeepEqual(src bool) bool {

	if p.NeedFinalize != src {
		return false
	}
	return true
}
func (p *TAggregationNode) Field6DeepEqual(src *bool) bool {

	if p.UseStreamingPreaggregation == src {
		return true
	} else if p.UseStreamingPreaggregation == nil || src == nil {
		return false
	}
	if *p.UseStreamingPreaggregation != *src {
		return false
	}
	return true
}
func (p *TAggregationNode) Field7DeepEqual(src []*TSortInfo) bool {

	if len(p.AggSortInfos) != len(src) {
		return false
	}
	for i, v := range p.AggSortInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TAggregationNode) Field8DeepEqual(src *bool) bool {

	if p.IsFirstPhase == src {
		return true
	} else if p.IsFirstPhase == nil || src == nil {
		return false
	}
	if *p.IsFirstPhase != *src {
		return false
	}
	return true
}
func (p *TAggregationNode) Field9DeepEqual(src *bool) bool {

	if p.IsColocate == src {
		return true
	} else if p.IsColocate == nil || src == nil {
		return false
	}
	if *p.IsColocate != *src {
		return false
	}
	return true
}
func (p *TAggregationNode) Field10DeepEqual(src *TSortInfo) bool {

	if !p.AggSortInfoByGroupKey.DeepEqual(src) {
		return false
	}
	return true
}

type TRepeatNode struct {
	OutputTupleId types.TTupleId    `thrift:"output_tuple_id,1,required" frugal:"1,required,i32" json:"output_tuple_id"`
	SlotIdSetList [][]types.TSlotId `thrift:"slot_id_set_list,2,required" frugal:"2,required,list<set<i32>>" json:"slot_id_set_list"`
	RepeatIdList  []int64           `thrift:"repeat_id_list,3,required" frugal:"3,required,list<i64>" json:"repeat_id_list"`
	GroupingList  [][]int64         `thrift:"grouping_list,4,required" frugal:"4,required,list<list<i64>>" json:"grouping_list"`
	AllSlotIds    []types.TSlotId   `thrift:"all_slot_ids,5,required" frugal:"5,required,set<i32>" json:"all_slot_ids"`
	Exprs         []*exprs.TExpr    `thrift:"exprs,6,required" frugal:"6,required,list<exprs.TExpr>" json:"exprs"`
}

func NewTRepeatNode() *TRepeatNode {
	return &TRepeatNode{}
}

func (p *TRepeatNode) InitDefault() {
}

func (p *TRepeatNode) GetOutputTupleId() (v types.TTupleId) {
	return p.OutputTupleId
}

func (p *TRepeatNode) GetSlotIdSetList() (v [][]types.TSlotId) {
	return p.SlotIdSetList
}

func (p *TRepeatNode) GetRepeatIdList() (v []int64) {
	return p.RepeatIdList
}

func (p *TRepeatNode) GetGroupingList() (v [][]int64) {
	return p.GroupingList
}

func (p *TRepeatNode) GetAllSlotIds() (v []types.TSlotId) {
	return p.AllSlotIds
}

func (p *TRepeatNode) GetExprs() (v []*exprs.TExpr) {
	return p.Exprs
}
func (p *TRepeatNode) SetOutputTupleId(val types.TTupleId) {
	p.OutputTupleId = val
}
func (p *TRepeatNode) SetSlotIdSetList(val [][]types.TSlotId) {
	p.SlotIdSetList = val
}
func (p *TRepeatNode) SetRepeatIdList(val []int64) {
	p.RepeatIdList = val
}
func (p *TRepeatNode) SetGroupingList(val [][]int64) {
	p.GroupingList = val
}
func (p *TRepeatNode) SetAllSlotIds(val []types.TSlotId) {
	p.AllSlotIds = val
}
func (p *TRepeatNode) SetExprs(val []*exprs.TExpr) {
	p.Exprs = val
}

var fieldIDToName_TRepeatNode = map[int16]string{
	1: "output_tuple_id",
	2: "slot_id_set_list",
	3: "repeat_id_list",
	4: "grouping_list",
	5: "all_slot_ids",
	6: "exprs",
}

func (p *TRepeatNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetOutputTupleId bool = false
	var issetSlotIdSetList bool = false
	var issetRepeatIdList bool = false
	var issetGroupingList bool = false
	var issetAllSlotIds bool = false
	var issetExprs bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetOutputTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSlotIdSetList = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetRepeatIdList = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetGroupingList = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetAllSlotIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetExprs = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetOutputTupleId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSlotIdSetList {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetRepeatIdList {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetGroupingList {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetAllSlotIds {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetExprs {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRepeatNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TRepeatNode[fieldId]))
}

func (p *TRepeatNode) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OutputTupleId = _field
	return nil
}
func (p *TRepeatNode) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]types.TSlotId, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return err
		}
		_elem := make([]types.TSlotId, 0, size)
		for i := 0; i < size; i++ {

			var _elem1 types.TSlotId
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_elem1 = v
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SlotIdSetList = _field
	return nil
}
func (p *TRepeatNode) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.RepeatIdList = _field
	return nil
}
func (p *TRepeatNode) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]int64, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]int64, 0, size)
		for i := 0; i < size; i++ {

			var _elem1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_elem1 = v
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.GroupingList = _field
	return nil
}
func (p *TRepeatNode) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TSlotId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TSlotId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	p.AllSlotIds = _field
	return nil
}
func (p *TRepeatNode) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Exprs = _field
	return nil
}

func (p *TRepeatNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TRepeatNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TRepeatNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("output_tuple_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.OutputTupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TRepeatNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("slot_id_set_list", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.SET, len(p.SlotIdSetList)); err != nil {
		return err
	}
	for _, v := range p.SlotIdSetList {
		if err := oprot.WriteSetBegin(thrift.I32, len(v)); err != nil {
			return err
		}
		for i := 0; i < len(v); i++ {
			for j := i + 1; j < len(v); j++ {
				if func(tgt, src types.TSlotId) bool {
					if tgt != src {
						return false
					}
					return true
				}(v[i], v[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
				}
			}
		}
		for _, v := range v {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TRepeatNode) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("repeat_id_list", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.RepeatIdList)); err != nil {
		return err
	}
	for _, v := range p.RepeatIdList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TRepeatNode) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("grouping_list", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.GroupingList)); err != nil {
		return err
	}
	for _, v := range p.GroupingList {
		if err := oprot.WriteListBegin(thrift.I64, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TRepeatNode) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("all_slot_ids", thrift.SET, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteSetBegin(thrift.I32, len(p.AllSlotIds)); err != nil {
		return err
	}
	for i := 0; i < len(p.AllSlotIds); i++ {
		for j := i + 1; j < len(p.AllSlotIds); j++ {
			if func(tgt, src types.TSlotId) bool {
				if tgt != src {
					return false
				}
				return true
			}(p.AllSlotIds[i], p.AllSlotIds[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AllSlotIds[i]))
			}
		}
	}
	for _, v := range p.AllSlotIds {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TRepeatNode) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("exprs", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Exprs)); err != nil {
		return err
	}
	for _, v := range p.Exprs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TRepeatNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRepeatNode(%+v)", *p)

}

func (p *TRepeatNode) DeepEqual(ano *TRepeatNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OutputTupleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SlotIdSetList) {
		return false
	}
	if !p.Field3DeepEqual(ano.RepeatIdList) {
		return false
	}
	if !p.Field4DeepEqual(ano.GroupingList) {
		return false
	}
	if !p.Field5DeepEqual(ano.AllSlotIds) {
		return false
	}
	if !p.Field6DeepEqual(ano.Exprs) {
		return false
	}
	return true
}

func (p *TRepeatNode) Field1DeepEqual(src types.TTupleId) bool {

	if p.OutputTupleId != src {
		return false
	}
	return true
}
func (p *TRepeatNode) Field2DeepEqual(src [][]types.TSlotId) bool {

	if len(p.SlotIdSetList) != len(src) {
		return false
	}
	for i, v := range p.SlotIdSetList {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}
func (p *TRepeatNode) Field3DeepEqual(src []int64) bool {

	if len(p.RepeatIdList) != len(src) {
		return false
	}
	for i, v := range p.RepeatIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TRepeatNode) Field4DeepEqual(src [][]int64) bool {

	if len(p.GroupingList) != len(src) {
		return false
	}
	for i, v := range p.GroupingList {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if v != _src1 {
				return false
			}
		}
	}
	return true
}
func (p *TRepeatNode) Field5DeepEqual(src []types.TSlotId) bool {

	if len(p.AllSlotIds) != len(src) {
		return false
	}
	for i, v := range p.AllSlotIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TRepeatNode) Field6DeepEqual(src []*exprs.TExpr) bool {

	if len(p.Exprs) != len(src) {
		return false
	}
	for i, v := range p.Exprs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TPreAggregationNode struct {
	GroupExprs     []*exprs.TExpr `thrift:"group_exprs,1,required" frugal:"1,required,list<exprs.TExpr>" json:"group_exprs"`
	AggregateExprs []*exprs.TExpr `thrift:"aggregate_exprs,2,required" frugal:"2,required,list<exprs.TExpr>" json:"aggregate_exprs"`
}

func NewTPreAggregationNode() *TPreAggregationNode {
	return &TPreAggregationNode{}
}

func (p *TPreAggregationNode) InitDefault() {
}

func (p *TPreAggregationNode) GetGroupExprs() (v []*exprs.TExpr) {
	return p.GroupExprs
}

func (p *TPreAggregationNode) GetAggregateExprs() (v []*exprs.TExpr) {
	return p.AggregateExprs
}
func (p *TPreAggregationNode) SetGroupExprs(val []*exprs.TExpr) {
	p.GroupExprs = val
}
func (p *TPreAggregationNode) SetAggregateExprs(val []*exprs.TExpr) {
	p.AggregateExprs = val
}

var fieldIDToName_TPreAggregationNode = map[int16]string{
	1: "group_exprs",
	2: "aggregate_exprs",
}

func (p *TPreAggregationNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetGroupExprs bool = false
	var issetAggregateExprs bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetGroupExprs = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetAggregateExprs = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetGroupExprs {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetAggregateExprs {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPreAggregationNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPreAggregationNode[fieldId]))
}

func (p *TPreAggregationNode) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.GroupExprs = _field
	return nil
}
func (p *TPreAggregationNode) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.AggregateExprs = _field
	return nil
}

func (p *TPreAggregationNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPreAggregationNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPreAggregationNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("group_exprs", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.GroupExprs)); err != nil {
		return err
	}
	for _, v := range p.GroupExprs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPreAggregationNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("aggregate_exprs", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AggregateExprs)); err != nil {
		return err
	}
	for _, v := range p.AggregateExprs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPreAggregationNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPreAggregationNode(%+v)", *p)

}

func (p *TPreAggregationNode) DeepEqual(ano *TPreAggregationNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.GroupExprs) {
		return false
	}
	if !p.Field2DeepEqual(ano.AggregateExprs) {
		return false
	}
	return true
}

func (p *TPreAggregationNode) Field1DeepEqual(src []*exprs.TExpr) bool {

	if len(p.GroupExprs) != len(src) {
		return false
	}
	for i, v := range p.GroupExprs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPreAggregationNode) Field2DeepEqual(src []*exprs.TExpr) bool {

	if len(p.AggregateExprs) != len(src) {
		return false
	}
	for i, v := range p.AggregateExprs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TSortNode struct {
	SortInfo        *TSortInfo      `thrift:"sort_info,1,required" frugal:"1,required,TSortInfo" json:"sort_info"`
	UseTopN         bool            `thrift:"use_top_n,2,required" frugal:"2,required,bool" json:"use_top_n"`
	Offset          *int64          `thrift:"offset,3,optional" frugal:"3,optional,i64" json:"offset,omitempty"`
	IsDefaultLimit  *bool           `thrift:"is_default_limit,6,optional" frugal:"6,optional,bool" json:"is_default_limit,omitempty"`
	UseTopnOpt      *bool           `thrift:"use_topn_opt,7,optional" frugal:"7,optional,bool" json:"use_topn_opt,omitempty"`
	MergeByExchange *bool           `thrift:"merge_by_exchange,8,optional" frugal:"8,optional,bool" json:"merge_by_exchange,omitempty"`
	IsAnalyticSort  *bool           `thrift:"is_analytic_sort,9,optional" frugal:"9,optional,bool" json:"is_analytic_sort,omitempty"`
	IsColocate      *bool           `thrift:"is_colocate,10,optional" frugal:"10,optional,bool" json:"is_colocate,omitempty"`
	Algorithm       *TSortAlgorithm `thrift:"algorithm,11,optional" frugal:"11,optional,TSortAlgorithm" json:"algorithm,omitempty"`
}

func NewTSortNode() *TSortNode {
	return &TSortNode{}
}

func (p *TSortNode) InitDefault() {
}

var TSortNode_SortInfo_DEFAULT *TSortInfo

func (p *TSortNode) GetSortInfo() (v *TSortInfo) {
	if !p.IsSetSortInfo() {
		return TSortNode_SortInfo_DEFAULT
	}
	return p.SortInfo
}

func (p *TSortNode) GetUseTopN() (v bool) {
	return p.UseTopN
}

var TSortNode_Offset_DEFAULT int64

func (p *TSortNode) GetOffset() (v int64) {
	if !p.IsSetOffset() {
		return TSortNode_Offset_DEFAULT
	}
	return *p.Offset
}

var TSortNode_IsDefaultLimit_DEFAULT bool

func (p *TSortNode) GetIsDefaultLimit() (v bool) {
	if !p.IsSetIsDefaultLimit() {
		return TSortNode_IsDefaultLimit_DEFAULT
	}
	return *p.IsDefaultLimit
}

var TSortNode_UseTopnOpt_DEFAULT bool

func (p *TSortNode) GetUseTopnOpt() (v bool) {
	if !p.IsSetUseTopnOpt() {
		return TSortNode_UseTopnOpt_DEFAULT
	}
	return *p.UseTopnOpt
}

var TSortNode_MergeByExchange_DEFAULT bool

func (p *TSortNode) GetMergeByExchange() (v bool) {
	if !p.IsSetMergeByExchange() {
		return TSortNode_MergeByExchange_DEFAULT
	}
	return *p.MergeByExchange
}

var TSortNode_IsAnalyticSort_DEFAULT bool

func (p *TSortNode) GetIsAnalyticSort() (v bool) {
	if !p.IsSetIsAnalyticSort() {
		return TSortNode_IsAnalyticSort_DEFAULT
	}
	return *p.IsAnalyticSort
}

var TSortNode_IsColocate_DEFAULT bool

func (p *TSortNode) GetIsColocate() (v bool) {
	if !p.IsSetIsColocate() {
		return TSortNode_IsColocate_DEFAULT
	}
	return *p.IsColocate
}

var TSortNode_Algorithm_DEFAULT TSortAlgorithm

func (p *TSortNode) GetAlgorithm() (v TSortAlgorithm) {
	if !p.IsSetAlgorithm() {
		return TSortNode_Algorithm_DEFAULT
	}
	return *p.Algorithm
}
func (p *TSortNode) SetSortInfo(val *TSortInfo) {
	p.SortInfo = val
}
func (p *TSortNode) SetUseTopN(val bool) {
	p.UseTopN = val
}
func (p *TSortNode) SetOffset(val *int64) {
	p.Offset = val
}
func (p *TSortNode) SetIsDefaultLimit(val *bool) {
	p.IsDefaultLimit = val
}
func (p *TSortNode) SetUseTopnOpt(val *bool) {
	p.UseTopnOpt = val
}
func (p *TSortNode) SetMergeByExchange(val *bool) {
	p.MergeByExchange = val
}
func (p *TSortNode) SetIsAnalyticSort(val *bool) {
	p.IsAnalyticSort = val
}
func (p *TSortNode) SetIsColocate(val *bool) {
	p.IsColocate = val
}
func (p *TSortNode) SetAlgorithm(val *TSortAlgorithm) {
	p.Algorithm = val
}

var fieldIDToName_TSortNode = map[int16]string{
	1:  "sort_info",
	2:  "use_top_n",
	3:  "offset",
	6:  "is_default_limit",
	7:  "use_topn_opt",
	8:  "merge_by_exchange",
	9:  "is_analytic_sort",
	10: "is_colocate",
	11: "algorithm",
}

func (p *TSortNode) IsSetSortInfo() bool {
	return p.SortInfo != nil
}

func (p *TSortNode) IsSetOffset() bool {
	return p.Offset != nil
}

func (p *TSortNode) IsSetIsDefaultLimit() bool {
	return p.IsDefaultLimit != nil
}

func (p *TSortNode) IsSetUseTopnOpt() bool {
	return p.UseTopnOpt != nil
}

func (p *TSortNode) IsSetMergeByExchange() bool {
	return p.MergeByExchange != nil
}

func (p *TSortNode) IsSetIsAnalyticSort() bool {
	return p.IsAnalyticSort != nil
}

func (p *TSortNode) IsSetIsColocate() bool {
	return p.IsColocate != nil
}

func (p *TSortNode) IsSetAlgorithm() bool {
	return p.Algorithm != nil
}

func (p *TSortNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSortInfo bool = false
	var issetUseTopN bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetSortInfo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUseTopN = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSortInfo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUseTopN {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TSortNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TSortNode[fieldId]))
}

func (p *TSortNode) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTSortInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SortInfo = _field
	return nil
}
func (p *TSortNode) ReadField2(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UseTopN = _field
	return nil
}
func (p *TSortNode) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Offset = _field
	return nil
}
func (p *TSortNode) ReadField6(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsDefaultLimit = _field
	return nil
}
func (p *TSortNode) ReadField7(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UseTopnOpt = _field
	return nil
}
func (p *TSortNode) ReadField8(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MergeByExchange = _field
	return nil
}
func (p *TSortNode) ReadField9(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsAnalyticSort = _field
	return nil
}
func (p *TSortNode) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsColocate = _field
	return nil
}
func (p *TSortNode) ReadField11(iprot thrift.TProtocol) error {

	var _field *TSortAlgorithm
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TSortAlgorithm(v)
		_field = &tmp
	}
	p.Algorithm = _field
	return nil
}

func (p *TSortNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TSortNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TSortNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sort_info", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.SortInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TSortNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("use_top_n", thrift.BOOL, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.UseTopN); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TSortNode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOffset() {
		if err = oprot.WriteFieldBegin("offset", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Offset); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TSortNode) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsDefaultLimit() {
		if err = oprot.WriteFieldBegin("is_default_limit", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsDefaultLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TSortNode) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetUseTopnOpt() {
		if err = oprot.WriteFieldBegin("use_topn_opt", thrift.BOOL, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.UseTopnOpt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TSortNode) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMergeByExchange() {
		if err = oprot.WriteFieldBegin("merge_by_exchange", thrift.BOOL, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.MergeByExchange); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TSortNode) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsAnalyticSort() {
		if err = oprot.WriteFieldBegin("is_analytic_sort", thrift.BOOL, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsAnalyticSort); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TSortNode) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsColocate() {
		if err = oprot.WriteFieldBegin("is_colocate", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsColocate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TSortNode) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlgorithm() {
		if err = oprot.WriteFieldBegin("algorithm", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Algorithm)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TSortNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSortNode(%+v)", *p)

}

func (p *TSortNode) DeepEqual(ano *TSortNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SortInfo) {
		return false
	}
	if !p.Field2DeepEqual(ano.UseTopN) {
		return false
	}
	if !p.Field3DeepEqual(ano.Offset) {
		return false
	}
	if !p.Field6DeepEqual(ano.IsDefaultLimit) {
		return false
	}
	if !p.Field7DeepEqual(ano.UseTopnOpt) {
		return false
	}
	if !p.Field8DeepEqual(ano.MergeByExchange) {
		return false
	}
	if !p.Field9DeepEqual(ano.IsAnalyticSort) {
		return false
	}
	if !p.Field10DeepEqual(ano.IsColocate) {
		return false
	}
	if !p.Field11DeepEqual(ano.Algorithm) {
		return false
	}
	return true
}

func (p *TSortNode) Field1DeepEqual(src *TSortInfo) bool {

	if !p.SortInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TSortNode) Field2DeepEqual(src bool) bool {

	if p.UseTopN != src {
		return false
	}
	return true
}
func (p *TSortNode) Field3DeepEqual(src *int64) bool {

	if p.Offset == src {
		return true
	} else if p.Offset == nil || src == nil {
		return false
	}
	if *p.Offset != *src {
		return false
	}
	return true
}
func (p *TSortNode) Field6DeepEqual(src *bool) bool {

	if p.IsDefaultLimit == src {
		return true
	} else if p.IsDefaultLimit == nil || src == nil {
		return false
	}
	if *p.IsDefaultLimit != *src {
		return false
	}
	return true
}
func (p *TSortNode) Field7DeepEqual(src *bool) bool {

	if p.UseTopnOpt == src {
		return true
	} else if p.UseTopnOpt == nil || src == nil {
		return false
	}
	if *p.UseTopnOpt != *src {
		return false
	}
	return true
}
func (p *TSortNode) Field8DeepEqual(src *bool) bool {

	if p.MergeByExchange == src {
		return true
	} else if p.MergeByExchange == nil || src == nil {
		return false
	}
	if *p.MergeByExchange != *src {
		return false
	}
	return true
}
func (p *TSortNode) Field9DeepEqual(src *bool) bool {

	if p.IsAnalyticSort == src {
		return true
	} else if p.IsAnalyticSort == nil || src == nil {
		return false
	}
	if *p.IsAnalyticSort != *src {
		return false
	}
	return true
}
func (p *TSortNode) Field10DeepEqual(src *bool) bool {

	if p.IsColocate == src {
		return true
	} else if p.IsColocate == nil || src == nil {
		return false
	}
	if *p.IsColocate != *src {
		return false
	}
	return true
}
func (p *TSortNode) Field11DeepEqual(src *TSortAlgorithm) bool {

	if p.Algorithm == src {
		return true
	} else if p.Algorithm == nil || src == nil {
		return false
	}
	if *p.Algorithm != *src {
		return false
	}
	return true
}

type TPartitionSortNode struct {
	PartitionExprs      []*exprs.TExpr  `thrift:"partition_exprs,1,optional" frugal:"1,optional,list<exprs.TExpr>" json:"partition_exprs,omitempty"`
	SortInfo            *TSortInfo      `thrift:"sort_info,2,optional" frugal:"2,optional,TSortInfo" json:"sort_info,omitempty"`
	HasGlobalLimit      *bool           `thrift:"has_global_limit,3,optional" frugal:"3,optional,bool" json:"has_global_limit,omitempty"`
	TopNAlgorithm       *TopNAlgorithm  `thrift:"top_n_algorithm,4,optional" frugal:"4,optional,TopNAlgorithm" json:"top_n_algorithm,omitempty"`
	PartitionInnerLimit *int64          `thrift:"partition_inner_limit,5,optional" frugal:"5,optional,i64" json:"partition_inner_limit,omitempty"`
	PtopnPhase          *TPartTopNPhase `thrift:"ptopn_phase,6,optional" frugal:"6,optional,TPartTopNPhase" json:"ptopn_phase,omitempty"`
}

func NewTPartitionSortNode() *TPartitionSortNode {
	return &TPartitionSortNode{}
}

func (p *TPartitionSortNode) InitDefault() {
}

var TPartitionSortNode_PartitionExprs_DEFAULT []*exprs.TExpr

func (p *TPartitionSortNode) GetPartitionExprs() (v []*exprs.TExpr) {
	if !p.IsSetPartitionExprs() {
		return TPartitionSortNode_PartitionExprs_DEFAULT
	}
	return p.PartitionExprs
}

var TPartitionSortNode_SortInfo_DEFAULT *TSortInfo

func (p *TPartitionSortNode) GetSortInfo() (v *TSortInfo) {
	if !p.IsSetSortInfo() {
		return TPartitionSortNode_SortInfo_DEFAULT
	}
	return p.SortInfo
}

var TPartitionSortNode_HasGlobalLimit_DEFAULT bool

func (p *TPartitionSortNode) GetHasGlobalLimit() (v bool) {
	if !p.IsSetHasGlobalLimit() {
		return TPartitionSortNode_HasGlobalLimit_DEFAULT
	}
	return *p.HasGlobalLimit
}

var TPartitionSortNode_TopNAlgorithm_DEFAULT TopNAlgorithm

func (p *TPartitionSortNode) GetTopNAlgorithm() (v TopNAlgorithm) {
	if !p.IsSetTopNAlgorithm() {
		return TPartitionSortNode_TopNAlgorithm_DEFAULT
	}
	return *p.TopNAlgorithm
}

var TPartitionSortNode_PartitionInnerLimit_DEFAULT int64

func (p *TPartitionSortNode) GetPartitionInnerLimit() (v int64) {
	if !p.IsSetPartitionInnerLimit() {
		return TPartitionSortNode_PartitionInnerLimit_DEFAULT
	}
	return *p.PartitionInnerLimit
}

var TPartitionSortNode_PtopnPhase_DEFAULT TPartTopNPhase

func (p *TPartitionSortNode) GetPtopnPhase() (v TPartTopNPhase) {
	if !p.IsSetPtopnPhase() {
		return TPartitionSortNode_PtopnPhase_DEFAULT
	}
	return *p.PtopnPhase
}
func (p *TPartitionSortNode) SetPartitionExprs(val []*exprs.TExpr) {
	p.PartitionExprs = val
}
func (p *TPartitionSortNode) SetSortInfo(val *TSortInfo) {
	p.SortInfo = val
}
func (p *TPartitionSortNode) SetHasGlobalLimit(val *bool) {
	p.HasGlobalLimit = val
}
func (p *TPartitionSortNode) SetTopNAlgorithm(val *TopNAlgorithm) {
	p.TopNAlgorithm = val
}
func (p *TPartitionSortNode) SetPartitionInnerLimit(val *int64) {
	p.PartitionInnerLimit = val
}
func (p *TPartitionSortNode) SetPtopnPhase(val *TPartTopNPhase) {
	p.PtopnPhase = val
}

var fieldIDToName_TPartitionSortNode = map[int16]string{
	1: "partition_exprs",
	2: "sort_info",
	3: "has_global_limit",
	4: "top_n_algorithm",
	5: "partition_inner_limit",
	6: "ptopn_phase",
}

func (p *TPartitionSortNode) IsSetPartitionExprs() bool {
	return p.PartitionExprs != nil
}

func (p *TPartitionSortNode) IsSetSortInfo() bool {
	return p.SortInfo != nil
}

func (p *TPartitionSortNode) IsSetHasGlobalLimit() bool {
	return p.HasGlobalLimit != nil
}

func (p *TPartitionSortNode) IsSetTopNAlgorithm() bool {
	return p.TopNAlgorithm != nil
}

func (p *TPartitionSortNode) IsSetPartitionInnerLimit() bool {
	return p.PartitionInnerLimit != nil
}

func (p *TPartitionSortNode) IsSetPtopnPhase() bool {
	return p.PtopnPhase != nil
}

func (p *TPartitionSortNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPartitionSortNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TPartitionSortNode) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PartitionExprs = _field
	return nil
}
func (p *TPartitionSortNode) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTSortInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SortInfo = _field
	return nil
}
func (p *TPartitionSortNode) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HasGlobalLimit = _field
	return nil
}
func (p *TPartitionSortNode) ReadField4(iprot thrift.TProtocol) error {

	var _field *TopNAlgorithm
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TopNAlgorithm(v)
		_field = &tmp
	}
	p.TopNAlgorithm = _field
	return nil
}
func (p *TPartitionSortNode) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PartitionInnerLimit = _field
	return nil
}
func (p *TPartitionSortNode) ReadField6(iprot thrift.TProtocol) error {

	var _field *TPartTopNPhase
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TPartTopNPhase(v)
		_field = &tmp
	}
	p.PtopnPhase = _field
	return nil
}

func (p *TPartitionSortNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPartitionSortNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPartitionSortNode) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionExprs() {
		if err = oprot.WriteFieldBegin("partition_exprs", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PartitionExprs)); err != nil {
			return err
		}
		for _, v := range p.PartitionExprs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPartitionSortNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSortInfo() {
		if err = oprot.WriteFieldBegin("sort_info", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.SortInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPartitionSortNode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasGlobalLimit() {
		if err = oprot.WriteFieldBegin("has_global_limit", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.HasGlobalLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPartitionSortNode) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopNAlgorithm() {
		if err = oprot.WriteFieldBegin("top_n_algorithm", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.TopNAlgorithm)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TPartitionSortNode) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionInnerLimit() {
		if err = oprot.WriteFieldBegin("partition_inner_limit", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PartitionInnerLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TPartitionSortNode) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPtopnPhase() {
		if err = oprot.WriteFieldBegin("ptopn_phase", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.PtopnPhase)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TPartitionSortNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPartitionSortNode(%+v)", *p)

}

func (p *TPartitionSortNode) DeepEqual(ano *TPartitionSortNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PartitionExprs) {
		return false
	}
	if !p.Field2DeepEqual(ano.SortInfo) {
		return false
	}
	if !p.Field3DeepEqual(ano.HasGlobalLimit) {
		return false
	}
	if !p.Field4DeepEqual(ano.TopNAlgorithm) {
		return false
	}
	if !p.Field5DeepEqual(ano.PartitionInnerLimit) {
		return false
	}
	if !p.Field6DeepEqual(ano.PtopnPhase) {
		return false
	}
	return true
}

func (p *TPartitionSortNode) Field1DeepEqual(src []*exprs.TExpr) bool {

	if len(p.PartitionExprs) != len(src) {
		return false
	}
	for i, v := range p.PartitionExprs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPartitionSortNode) Field2DeepEqual(src *TSortInfo) bool {

	if !p.SortInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPartitionSortNode) Field3DeepEqual(src *bool) bool {

	if p.HasGlobalLimit == src {
		return true
	} else if p.HasGlobalLimit == nil || src == nil {
		return false
	}
	if *p.HasGlobalLimit != *src {
		return false
	}
	return true
}
func (p *TPartitionSortNode) Field4DeepEqual(src *TopNAlgorithm) bool {

	if p.TopNAlgorithm == src {
		return true
	} else if p.TopNAlgorithm == nil || src == nil {
		return false
	}
	if *p.TopNAlgorithm != *src {
		return false
	}
	return true
}
func (p *TPartitionSortNode) Field5DeepEqual(src *int64) bool {

	if p.PartitionInnerLimit == src {
		return true
	} else if p.PartitionInnerLimit == nil || src == nil {
		return false
	}
	if *p.PartitionInnerLimit != *src {
		return false
	}
	return true
}
func (p *TPartitionSortNode) Field6DeepEqual(src *TPartTopNPhase) bool {

	if p.PtopnPhase == src {
		return true
	} else if p.PtopnPhase == nil || src == nil {
		return false
	}
	if *p.PtopnPhase != *src {
		return false
	}
	return true
}

type TAnalyticWindowBoundary struct {
	Type                 TAnalyticWindowBoundaryType `thrift:"type,1,required" frugal:"1,required,TAnalyticWindowBoundaryType" json:"type"`
	RangeOffsetPredicate *exprs.TExpr                `thrift:"range_offset_predicate,2,optional" frugal:"2,optional,exprs.TExpr" json:"range_offset_predicate,omitempty"`
	RowsOffsetValue      *int64                      `thrift:"rows_offset_value,3,optional" frugal:"3,optional,i64" json:"rows_offset_value,omitempty"`
}

func NewTAnalyticWindowBoundary() *TAnalyticWindowBoundary {
	return &TAnalyticWindowBoundary{}
}

func (p *TAnalyticWindowBoundary) InitDefault() {
}

func (p *TAnalyticWindowBoundary) GetType() (v TAnalyticWindowBoundaryType) {
	return p.Type
}

var TAnalyticWindowBoundary_RangeOffsetPredicate_DEFAULT *exprs.TExpr

func (p *TAnalyticWindowBoundary) GetRangeOffsetPredicate() (v *exprs.TExpr) {
	if !p.IsSetRangeOffsetPredicate() {
		return TAnalyticWindowBoundary_RangeOffsetPredicate_DEFAULT
	}
	return p.RangeOffsetPredicate
}

var TAnalyticWindowBoundary_RowsOffsetValue_DEFAULT int64

func (p *TAnalyticWindowBoundary) GetRowsOffsetValue() (v int64) {
	if !p.IsSetRowsOffsetValue() {
		return TAnalyticWindowBoundary_RowsOffsetValue_DEFAULT
	}
	return *p.RowsOffsetValue
}
func (p *TAnalyticWindowBoundary) SetType(val TAnalyticWindowBoundaryType) {
	p.Type = val
}
func (p *TAnalyticWindowBoundary) SetRangeOffsetPredicate(val *exprs.TExpr) {
	p.RangeOffsetPredicate = val
}
func (p *TAnalyticWindowBoundary) SetRowsOffsetValue(val *int64) {
	p.RowsOffsetValue = val
}

var fieldIDToName_TAnalyticWindowBoundary = map[int16]string{
	1: "type",
	2: "range_offset_predicate",
	3: "rows_offset_value",
}

func (p *TAnalyticWindowBoundary) IsSetRangeOffsetPredicate() bool {
	return p.RangeOffsetPredicate != nil
}

func (p *TAnalyticWindowBoundary) IsSetRowsOffsetValue() bool {
	return p.RowsOffsetValue != nil
}

func (p *TAnalyticWindowBoundary) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAnalyticWindowBoundary[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAnalyticWindowBoundary[fieldId]))
}

func (p *TAnalyticWindowBoundary) ReadField1(iprot thrift.TProtocol) error {

	var _field TAnalyticWindowBoundaryType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TAnalyticWindowBoundaryType(v)
	}
	p.Type = _field
	return nil
}
func (p *TAnalyticWindowBoundary) ReadField2(iprot thrift.TProtocol) error {
	_field := exprs.NewTExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.RangeOffsetPredicate = _field
	return nil
}
func (p *TAnalyticWindowBoundary) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RowsOffsetValue = _field
	return nil
}

func (p *TAnalyticWindowBoundary) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAnalyticWindowBoundary"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAnalyticWindowBoundary) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAnalyticWindowBoundary) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRangeOffsetPredicate() {
		if err = oprot.WriteFieldBegin("range_offset_predicate", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.RangeOffsetPredicate.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAnalyticWindowBoundary) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRowsOffsetValue() {
		if err = oprot.WriteFieldBegin("rows_offset_value", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.RowsOffsetValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TAnalyticWindowBoundary) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAnalyticWindowBoundary(%+v)", *p)

}

func (p *TAnalyticWindowBoundary) DeepEqual(ano *TAnalyticWindowBoundary) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.RangeOffsetPredicate) {
		return false
	}
	if !p.Field3DeepEqual(ano.RowsOffsetValue) {
		return false
	}
	return true
}

func (p *TAnalyticWindowBoundary) Field1DeepEqual(src TAnalyticWindowBoundaryType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *TAnalyticWindowBoundary) Field2DeepEqual(src *exprs.TExpr) bool {

	if !p.RangeOffsetPredicate.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAnalyticWindowBoundary) Field3DeepEqual(src *int64) bool {

	if p.RowsOffsetValue == src {
		return true
	} else if p.RowsOffsetValue == nil || src == nil {
		return false
	}
	if *p.RowsOffsetValue != *src {
		return false
	}
	return true
}

type TAnalyticWindow struct {
	Type        TAnalyticWindowType      `thrift:"type,1,required" frugal:"1,required,TAnalyticWindowType" json:"type"`
	WindowStart *TAnalyticWindowBoundary `thrift:"window_start,2,optional" frugal:"2,optional,TAnalyticWindowBoundary" json:"window_start,omitempty"`
	WindowEnd   *TAnalyticWindowBoundary `thrift:"window_end,3,optional" frugal:"3,optional,TAnalyticWindowBoundary" json:"window_end,omitempty"`
}

func NewTAnalyticWindow() *TAnalyticWindow {
	return &TAnalyticWindow{}
}

func (p *TAnalyticWindow) InitDefault() {
}

func (p *TAnalyticWindow) GetType() (v TAnalyticWindowType) {
	return p.Type
}

var TAnalyticWindow_WindowStart_DEFAULT *TAnalyticWindowBoundary

func (p *TAnalyticWindow) GetWindowStart() (v *TAnalyticWindowBoundary) {
	if !p.IsSetWindowStart() {
		return TAnalyticWindow_WindowStart_DEFAULT
	}
	return p.WindowStart
}

var TAnalyticWindow_WindowEnd_DEFAULT *TAnalyticWindowBoundary

func (p *TAnalyticWindow) GetWindowEnd() (v *TAnalyticWindowBoundary) {
	if !p.IsSetWindowEnd() {
		return TAnalyticWindow_WindowEnd_DEFAULT
	}
	return p.WindowEnd
}
func (p *TAnalyticWindow) SetType(val TAnalyticWindowType) {
	p.Type = val
}
func (p *TAnalyticWindow) SetWindowStart(val *TAnalyticWindowBoundary) {
	p.WindowStart = val
}
func (p *TAnalyticWindow) SetWindowEnd(val *TAnalyticWindowBoundary) {
	p.WindowEnd = val
}

var fieldIDToName_TAnalyticWindow = map[int16]string{
	1: "type",
	2: "window_start",
	3: "window_end",
}

func (p *TAnalyticWindow) IsSetWindowStart() bool {
	return p.WindowStart != nil
}

func (p *TAnalyticWindow) IsSetWindowEnd() bool {
	return p.WindowEnd != nil
}

func (p *TAnalyticWindow) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAnalyticWindow[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAnalyticWindow[fieldId]))
}

func (p *TAnalyticWindow) ReadField1(iprot thrift.TProtocol) error {

	var _field TAnalyticWindowType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TAnalyticWindowType(v)
	}
	p.Type = _field
	return nil
}
func (p *TAnalyticWindow) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTAnalyticWindowBoundary()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.WindowStart = _field
	return nil
}
func (p *TAnalyticWindow) ReadField3(iprot thrift.TProtocol) error {
	_field := NewTAnalyticWindowBoundary()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.WindowEnd = _field
	return nil
}

func (p *TAnalyticWindow) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAnalyticWindow"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAnalyticWindow) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAnalyticWindow) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWindowStart() {
		if err = oprot.WriteFieldBegin("window_start", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.WindowStart.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAnalyticWindow) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWindowEnd() {
		if err = oprot.WriteFieldBegin("window_end", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.WindowEnd.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TAnalyticWindow) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAnalyticWindow(%+v)", *p)

}

func (p *TAnalyticWindow) DeepEqual(ano *TAnalyticWindow) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.WindowStart) {
		return false
	}
	if !p.Field3DeepEqual(ano.WindowEnd) {
		return false
	}
	return true
}

func (p *TAnalyticWindow) Field1DeepEqual(src TAnalyticWindowType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *TAnalyticWindow) Field2DeepEqual(src *TAnalyticWindowBoundary) bool {

	if !p.WindowStart.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAnalyticWindow) Field3DeepEqual(src *TAnalyticWindowBoundary) bool {

	if !p.WindowEnd.DeepEqual(src) {
		return false
	}
	return true
}

type TAnalyticNode struct {
	PartitionExprs      []*exprs.TExpr   `thrift:"partition_exprs,1,required" frugal:"1,required,list<exprs.TExpr>" json:"partition_exprs"`
	OrderByExprs        []*exprs.TExpr   `thrift:"order_by_exprs,2,required" frugal:"2,required,list<exprs.TExpr>" json:"order_by_exprs"`
	AnalyticFunctions   []*exprs.TExpr   `thrift:"analytic_functions,3,required" frugal:"3,required,list<exprs.TExpr>" json:"analytic_functions"`
	Window              *TAnalyticWindow `thrift:"window,4,optional" frugal:"4,optional,TAnalyticWindow" json:"window,omitempty"`
	IntermediateTupleId types.TTupleId   `thrift:"intermediate_tuple_id,5,required" frugal:"5,required,i32" json:"intermediate_tuple_id"`
	OutputTupleId       types.TTupleId   `thrift:"output_tuple_id,6,required" frugal:"6,required,i32" json:"output_tuple_id"`
	BufferedTupleId     *types.TTupleId  `thrift:"buffered_tuple_id,7,optional" frugal:"7,optional,i32" json:"buffered_tuple_id,omitempty"`
	PartitionByEq       *exprs.TExpr     `thrift:"partition_by_eq,8,optional" frugal:"8,optional,exprs.TExpr" json:"partition_by_eq,omitempty"`
	OrderByEq           *exprs.TExpr     `thrift:"order_by_eq,9,optional" frugal:"9,optional,exprs.TExpr" json:"order_by_eq,omitempty"`
	IsColocate          *bool            `thrift:"is_colocate,10,optional" frugal:"10,optional,bool" json:"is_colocate,omitempty"`
}

func NewTAnalyticNode() *TAnalyticNode {
	return &TAnalyticNode{}
}

func (p *TAnalyticNode) InitDefault() {
}

func (p *TAnalyticNode) GetPartitionExprs() (v []*exprs.TExpr) {
	return p.PartitionExprs
}

func (p *TAnalyticNode) GetOrderByExprs() (v []*exprs.TExpr) {
	return p.OrderByExprs
}

func (p *TAnalyticNode) GetAnalyticFunctions() (v []*exprs.TExpr) {
	return p.AnalyticFunctions
}

var TAnalyticNode_Window_DEFAULT *TAnalyticWindow

func (p *TAnalyticNode) GetWindow() (v *TAnalyticWindow) {
	if !p.IsSetWindow() {
		return TAnalyticNode_Window_DEFAULT
	}
	return p.Window
}

func (p *TAnalyticNode) GetIntermediateTupleId() (v types.TTupleId) {
	return p.IntermediateTupleId
}

func (p *TAnalyticNode) GetOutputTupleId() (v types.TTupleId) {
	return p.OutputTupleId
}

var TAnalyticNode_BufferedTupleId_DEFAULT types.TTupleId

func (p *TAnalyticNode) GetBufferedTupleId() (v types.TTupleId) {
	if !p.IsSetBufferedTupleId() {
		return TAnalyticNode_BufferedTupleId_DEFAULT
	}
	return *p.BufferedTupleId
}

var TAnalyticNode_PartitionByEq_DEFAULT *exprs.TExpr

func (p *TAnalyticNode) GetPartitionByEq() (v *exprs.TExpr) {
	if !p.IsSetPartitionByEq() {
		return TAnalyticNode_PartitionByEq_DEFAULT
	}
	return p.PartitionByEq
}

var TAnalyticNode_OrderByEq_DEFAULT *exprs.TExpr

func (p *TAnalyticNode) GetOrderByEq() (v *exprs.TExpr) {
	if !p.IsSetOrderByEq() {
		return TAnalyticNode_OrderByEq_DEFAULT
	}
	return p.OrderByEq
}

var TAnalyticNode_IsColocate_DEFAULT bool

func (p *TAnalyticNode) GetIsColocate() (v bool) {
	if !p.IsSetIsColocate() {
		return TAnalyticNode_IsColocate_DEFAULT
	}
	return *p.IsColocate
}
func (p *TAnalyticNode) SetPartitionExprs(val []*exprs.TExpr) {
	p.PartitionExprs = val
}
func (p *TAnalyticNode) SetOrderByExprs(val []*exprs.TExpr) {
	p.OrderByExprs = val
}
func (p *TAnalyticNode) SetAnalyticFunctions(val []*exprs.TExpr) {
	p.AnalyticFunctions = val
}
func (p *TAnalyticNode) SetWindow(val *TAnalyticWindow) {
	p.Window = val
}
func (p *TAnalyticNode) SetIntermediateTupleId(val types.TTupleId) {
	p.IntermediateTupleId = val
}
func (p *TAnalyticNode) SetOutputTupleId(val types.TTupleId) {
	p.OutputTupleId = val
}
func (p *TAnalyticNode) SetBufferedTupleId(val *types.TTupleId) {
	p.BufferedTupleId = val
}
func (p *TAnalyticNode) SetPartitionByEq(val *exprs.TExpr) {
	p.PartitionByEq = val
}
func (p *TAnalyticNode) SetOrderByEq(val *exprs.TExpr) {
	p.OrderByEq = val
}
func (p *TAnalyticNode) SetIsColocate(val *bool) {
	p.IsColocate = val
}

var fieldIDToName_TAnalyticNode = map[int16]string{
	1:  "partition_exprs",
	2:  "order_by_exprs",
	3:  "analytic_functions",
	4:  "window",
	5:  "intermediate_tuple_id",
	6:  "output_tuple_id",
	7:  "buffered_tuple_id",
	8:  "partition_by_eq",
	9:  "order_by_eq",
	10: "is_colocate",
}

func (p *TAnalyticNode) IsSetWindow() bool {
	return p.Window != nil
}

func (p *TAnalyticNode) IsSetBufferedTupleId() bool {
	return p.BufferedTupleId != nil
}

func (p *TAnalyticNode) IsSetPartitionByEq() bool {
	return p.PartitionByEq != nil
}

func (p *TAnalyticNode) IsSetOrderByEq() bool {
	return p.OrderByEq != nil
}

func (p *TAnalyticNode) IsSetIsColocate() bool {
	return p.IsColocate != nil
}

func (p *TAnalyticNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPartitionExprs bool = false
	var issetOrderByExprs bool = false
	var issetAnalyticFunctions bool = false
	var issetIntermediateTupleId bool = false
	var issetOutputTupleId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPartitionExprs = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetOrderByExprs = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetAnalyticFunctions = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetIntermediateTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetOutputTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPartitionExprs {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetOrderByExprs {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetAnalyticFunctions {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetIntermediateTupleId {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetOutputTupleId {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAnalyticNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAnalyticNode[fieldId]))
}

func (p *TAnalyticNode) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PartitionExprs = _field
	return nil
}
func (p *TAnalyticNode) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OrderByExprs = _field
	return nil
}
func (p *TAnalyticNode) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.AnalyticFunctions = _field
	return nil
}
func (p *TAnalyticNode) ReadField4(iprot thrift.TProtocol) error {
	_field := NewTAnalyticWindow()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Window = _field
	return nil
}
func (p *TAnalyticNode) ReadField5(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IntermediateTupleId = _field
	return nil
}
func (p *TAnalyticNode) ReadField6(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OutputTupleId = _field
	return nil
}
func (p *TAnalyticNode) ReadField7(iprot thrift.TProtocol) error {

	var _field *types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BufferedTupleId = _field
	return nil
}
func (p *TAnalyticNode) ReadField8(iprot thrift.TProtocol) error {
	_field := exprs.NewTExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PartitionByEq = _field
	return nil
}
func (p *TAnalyticNode) ReadField9(iprot thrift.TProtocol) error {
	_field := exprs.NewTExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.OrderByEq = _field
	return nil
}
func (p *TAnalyticNode) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsColocate = _field
	return nil
}

func (p *TAnalyticNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAnalyticNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAnalyticNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("partition_exprs", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PartitionExprs)); err != nil {
		return err
	}
	for _, v := range p.PartitionExprs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAnalyticNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("order_by_exprs", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrderByExprs)); err != nil {
		return err
	}
	for _, v := range p.OrderByExprs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAnalyticNode) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("analytic_functions", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AnalyticFunctions)); err != nil {
		return err
	}
	for _, v := range p.AnalyticFunctions {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TAnalyticNode) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetWindow() {
		if err = oprot.WriteFieldBegin("window", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Window.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TAnalyticNode) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("intermediate_tuple_id", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.IntermediateTupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TAnalyticNode) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("output_tuple_id", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.OutputTupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TAnalyticNode) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetBufferedTupleId() {
		if err = oprot.WriteFieldBegin("buffered_tuple_id", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BufferedTupleId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TAnalyticNode) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionByEq() {
		if err = oprot.WriteFieldBegin("partition_by_eq", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PartitionByEq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TAnalyticNode) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderByEq() {
		if err = oprot.WriteFieldBegin("order_by_eq", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.OrderByEq.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TAnalyticNode) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsColocate() {
		if err = oprot.WriteFieldBegin("is_colocate", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsColocate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TAnalyticNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAnalyticNode(%+v)", *p)

}

func (p *TAnalyticNode) DeepEqual(ano *TAnalyticNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PartitionExprs) {
		return false
	}
	if !p.Field2DeepEqual(ano.OrderByExprs) {
		return false
	}
	if !p.Field3DeepEqual(ano.AnalyticFunctions) {
		return false
	}
	if !p.Field4DeepEqual(ano.Window) {
		return false
	}
	if !p.Field5DeepEqual(ano.IntermediateTupleId) {
		return false
	}
	if !p.Field6DeepEqual(ano.OutputTupleId) {
		return false
	}
	if !p.Field7DeepEqual(ano.BufferedTupleId) {
		return false
	}
	if !p.Field8DeepEqual(ano.PartitionByEq) {
		return false
	}
	if !p.Field9DeepEqual(ano.OrderByEq) {
		return false
	}
	if !p.Field10DeepEqual(ano.IsColocate) {
		return false
	}
	return true
}

func (p *TAnalyticNode) Field1DeepEqual(src []*exprs.TExpr) bool {

	if len(p.PartitionExprs) != len(src) {
		return false
	}
	for i, v := range p.PartitionExprs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TAnalyticNode) Field2DeepEqual(src []*exprs.TExpr) bool {

	if len(p.OrderByExprs) != len(src) {
		return false
	}
	for i, v := range p.OrderByExprs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TAnalyticNode) Field3DeepEqual(src []*exprs.TExpr) bool {

	if len(p.AnalyticFunctions) != len(src) {
		return false
	}
	for i, v := range p.AnalyticFunctions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TAnalyticNode) Field4DeepEqual(src *TAnalyticWindow) bool {

	if !p.Window.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAnalyticNode) Field5DeepEqual(src types.TTupleId) bool {

	if p.IntermediateTupleId != src {
		return false
	}
	return true
}
func (p *TAnalyticNode) Field6DeepEqual(src types.TTupleId) bool {

	if p.OutputTupleId != src {
		return false
	}
	return true
}
func (p *TAnalyticNode) Field7DeepEqual(src *types.TTupleId) bool {

	if p.BufferedTupleId == src {
		return true
	} else if p.BufferedTupleId == nil || src == nil {
		return false
	}
	if *p.BufferedTupleId != *src {
		return false
	}
	return true
}
func (p *TAnalyticNode) Field8DeepEqual(src *exprs.TExpr) bool {

	if !p.PartitionByEq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAnalyticNode) Field9DeepEqual(src *exprs.TExpr) bool {

	if !p.OrderByEq.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAnalyticNode) Field10DeepEqual(src *bool) bool {

	if p.IsColocate == src {
		return true
	} else if p.IsColocate == nil || src == nil {
		return false
	}
	if *p.IsColocate != *src {
		return false
	}
	return true
}

type TMergeNode struct {
	TupleId         types.TTupleId   `thrift:"tuple_id,1,required" frugal:"1,required,i32" json:"tuple_id"`
	ResultExprLists [][]*exprs.TExpr `thrift:"result_expr_lists,2,required" frugal:"2,required,list<list<exprs.TExpr>>" json:"result_expr_lists"`
	ConstExprLists  [][]*exprs.TExpr `thrift:"const_expr_lists,3,required" frugal:"3,required,list<list<exprs.TExpr>>" json:"const_expr_lists"`
}

func NewTMergeNode() *TMergeNode {
	return &TMergeNode{}
}

func (p *TMergeNode) InitDefault() {
}

func (p *TMergeNode) GetTupleId() (v types.TTupleId) {
	return p.TupleId
}

func (p *TMergeNode) GetResultExprLists() (v [][]*exprs.TExpr) {
	return p.ResultExprLists
}

func (p *TMergeNode) GetConstExprLists() (v [][]*exprs.TExpr) {
	return p.ConstExprLists
}
func (p *TMergeNode) SetTupleId(val types.TTupleId) {
	p.TupleId = val
}
func (p *TMergeNode) SetResultExprLists(val [][]*exprs.TExpr) {
	p.ResultExprLists = val
}
func (p *TMergeNode) SetConstExprLists(val [][]*exprs.TExpr) {
	p.ConstExprLists = val
}

var fieldIDToName_TMergeNode = map[int16]string{
	1: "tuple_id",
	2: "result_expr_lists",
	3: "const_expr_lists",
}

func (p *TMergeNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTupleId bool = false
	var issetResultExprLists bool = false
	var issetConstExprLists bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetResultExprLists = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetConstExprLists = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTupleId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetResultExprLists {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetConstExprLists {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMergeNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TMergeNode[fieldId]))
}

func (p *TMergeNode) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TupleId = _field
	return nil
}
func (p *TMergeNode) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]*exprs.TExpr, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]*exprs.TExpr, 0, size)
		values := make([]exprs.TExpr, size)
		for i := 0; i < size; i++ {
			_elem1 := &values[i]
			_elem1.InitDefault()

			if err := _elem1.Read(iprot); err != nil {
				return err
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ResultExprLists = _field
	return nil
}
func (p *TMergeNode) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]*exprs.TExpr, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]*exprs.TExpr, 0, size)
		values := make([]exprs.TExpr, size)
		for i := 0; i < size; i++ {
			_elem1 := &values[i]
			_elem1.InitDefault()

			if err := _elem1.Read(iprot); err != nil {
				return err
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ConstExprLists = _field
	return nil
}

func (p *TMergeNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMergeNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMergeNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tuple_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMergeNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("result_expr_lists", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.ResultExprLists)); err != nil {
		return err
	}
	for _, v := range p.ResultExprLists {
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TMergeNode) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("const_expr_lists", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.ConstExprLists)); err != nil {
		return err
	}
	for _, v := range p.ConstExprLists {
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TMergeNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMergeNode(%+v)", *p)

}

func (p *TMergeNode) DeepEqual(ano *TMergeNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TupleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ResultExprLists) {
		return false
	}
	if !p.Field3DeepEqual(ano.ConstExprLists) {
		return false
	}
	return true
}

func (p *TMergeNode) Field1DeepEqual(src types.TTupleId) bool {

	if p.TupleId != src {
		return false
	}
	return true
}
func (p *TMergeNode) Field2DeepEqual(src [][]*exprs.TExpr) bool {

	if len(p.ResultExprLists) != len(src) {
		return false
	}
	for i, v := range p.ResultExprLists {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *TMergeNode) Field3DeepEqual(src [][]*exprs.TExpr) bool {

	if len(p.ConstExprLists) != len(src) {
		return false
	}
	for i, v := range p.ConstExprLists {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}

type TUnionNode struct {
	TupleId                   types.TTupleId   `thrift:"tuple_id,1,required" frugal:"1,required,i32" json:"tuple_id"`
	ResultExprLists           [][]*exprs.TExpr `thrift:"result_expr_lists,2,required" frugal:"2,required,list<list<exprs.TExpr>>" json:"result_expr_lists"`
	ConstExprLists            [][]*exprs.TExpr `thrift:"const_expr_lists,3,required" frugal:"3,required,list<list<exprs.TExpr>>" json:"const_expr_lists"`
	FirstMaterializedChildIdx int64            `thrift:"first_materialized_child_idx,4,required" frugal:"4,required,i64" json:"first_materialized_child_idx"`
}

func NewTUnionNode() *TUnionNode {
	return &TUnionNode{}
}

func (p *TUnionNode) InitDefault() {
}

func (p *TUnionNode) GetTupleId() (v types.TTupleId) {
	return p.TupleId
}

func (p *TUnionNode) GetResultExprLists() (v [][]*exprs.TExpr) {
	return p.ResultExprLists
}

func (p *TUnionNode) GetConstExprLists() (v [][]*exprs.TExpr) {
	return p.ConstExprLists
}

func (p *TUnionNode) GetFirstMaterializedChildIdx() (v int64) {
	return p.FirstMaterializedChildIdx
}
func (p *TUnionNode) SetTupleId(val types.TTupleId) {
	p.TupleId = val
}
func (p *TUnionNode) SetResultExprLists(val [][]*exprs.TExpr) {
	p.ResultExprLists = val
}
func (p *TUnionNode) SetConstExprLists(val [][]*exprs.TExpr) {
	p.ConstExprLists = val
}
func (p *TUnionNode) SetFirstMaterializedChildIdx(val int64) {
	p.FirstMaterializedChildIdx = val
}

var fieldIDToName_TUnionNode = map[int16]string{
	1: "tuple_id",
	2: "result_expr_lists",
	3: "const_expr_lists",
	4: "first_materialized_child_idx",
}

func (p *TUnionNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTupleId bool = false
	var issetResultExprLists bool = false
	var issetConstExprLists bool = false
	var issetFirstMaterializedChildIdx bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetResultExprLists = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetConstExprLists = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetFirstMaterializedChildIdx = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTupleId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetResultExprLists {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetConstExprLists {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetFirstMaterializedChildIdx {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TUnionNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TUnionNode[fieldId]))
}

func (p *TUnionNode) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TupleId = _field
	return nil
}
func (p *TUnionNode) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]*exprs.TExpr, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]*exprs.TExpr, 0, size)
		values := make([]exprs.TExpr, size)
		for i := 0; i < size; i++ {
			_elem1 := &values[i]
			_elem1.InitDefault()

			if err := _elem1.Read(iprot); err != nil {
				return err
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ResultExprLists = _field
	return nil
}
func (p *TUnionNode) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]*exprs.TExpr, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]*exprs.TExpr, 0, size)
		values := make([]exprs.TExpr, size)
		for i := 0; i < size; i++ {
			_elem1 := &values[i]
			_elem1.InitDefault()

			if err := _elem1.Read(iprot); err != nil {
				return err
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ConstExprLists = _field
	return nil
}
func (p *TUnionNode) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FirstMaterializedChildIdx = _field
	return nil
}

func (p *TUnionNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TUnionNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TUnionNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tuple_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TUnionNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("result_expr_lists", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.ResultExprLists)); err != nil {
		return err
	}
	for _, v := range p.ResultExprLists {
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TUnionNode) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("const_expr_lists", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.ConstExprLists)); err != nil {
		return err
	}
	for _, v := range p.ConstExprLists {
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TUnionNode) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("first_materialized_child_idx", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.FirstMaterializedChildIdx); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TUnionNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TUnionNode(%+v)", *p)

}

func (p *TUnionNode) DeepEqual(ano *TUnionNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TupleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ResultExprLists) {
		return false
	}
	if !p.Field3DeepEqual(ano.ConstExprLists) {
		return false
	}
	if !p.Field4DeepEqual(ano.FirstMaterializedChildIdx) {
		return false
	}
	return true
}

func (p *TUnionNode) Field1DeepEqual(src types.TTupleId) bool {

	if p.TupleId != src {
		return false
	}
	return true
}
func (p *TUnionNode) Field2DeepEqual(src [][]*exprs.TExpr) bool {

	if len(p.ResultExprLists) != len(src) {
		return false
	}
	for i, v := range p.ResultExprLists {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *TUnionNode) Field3DeepEqual(src [][]*exprs.TExpr) bool {

	if len(p.ConstExprLists) != len(src) {
		return false
	}
	for i, v := range p.ConstExprLists {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *TUnionNode) Field4DeepEqual(src int64) bool {

	if p.FirstMaterializedChildIdx != src {
		return false
	}
	return true
}

type TIntersectNode struct {
	TupleId                   types.TTupleId   `thrift:"tuple_id,1,required" frugal:"1,required,i32" json:"tuple_id"`
	ResultExprLists           [][]*exprs.TExpr `thrift:"result_expr_lists,2,required" frugal:"2,required,list<list<exprs.TExpr>>" json:"result_expr_lists"`
	ConstExprLists            [][]*exprs.TExpr `thrift:"const_expr_lists,3,required" frugal:"3,required,list<list<exprs.TExpr>>" json:"const_expr_lists"`
	FirstMaterializedChildIdx int64            `thrift:"first_materialized_child_idx,4,required" frugal:"4,required,i64" json:"first_materialized_child_idx"`
	IsColocate                *bool            `thrift:"is_colocate,5,optional" frugal:"5,optional,bool" json:"is_colocate,omitempty"`
}

func NewTIntersectNode() *TIntersectNode {
	return &TIntersectNode{}
}

func (p *TIntersectNode) InitDefault() {
}

func (p *TIntersectNode) GetTupleId() (v types.TTupleId) {
	return p.TupleId
}

func (p *TIntersectNode) GetResultExprLists() (v [][]*exprs.TExpr) {
	return p.ResultExprLists
}

func (p *TIntersectNode) GetConstExprLists() (v [][]*exprs.TExpr) {
	return p.ConstExprLists
}

func (p *TIntersectNode) GetFirstMaterializedChildIdx() (v int64) {
	return p.FirstMaterializedChildIdx
}

var TIntersectNode_IsColocate_DEFAULT bool

func (p *TIntersectNode) GetIsColocate() (v bool) {
	if !p.IsSetIsColocate() {
		return TIntersectNode_IsColocate_DEFAULT
	}
	return *p.IsColocate
}
func (p *TIntersectNode) SetTupleId(val types.TTupleId) {
	p.TupleId = val
}
func (p *TIntersectNode) SetResultExprLists(val [][]*exprs.TExpr) {
	p.ResultExprLists = val
}
func (p *TIntersectNode) SetConstExprLists(val [][]*exprs.TExpr) {
	p.ConstExprLists = val
}
func (p *TIntersectNode) SetFirstMaterializedChildIdx(val int64) {
	p.FirstMaterializedChildIdx = val
}
func (p *TIntersectNode) SetIsColocate(val *bool) {
	p.IsColocate = val
}

var fieldIDToName_TIntersectNode = map[int16]string{
	1: "tuple_id",
	2: "result_expr_lists",
	3: "const_expr_lists",
	4: "first_materialized_child_idx",
	5: "is_colocate",
}

func (p *TIntersectNode) IsSetIsColocate() bool {
	return p.IsColocate != nil
}

func (p *TIntersectNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTupleId bool = false
	var issetResultExprLists bool = false
	var issetConstExprLists bool = false
	var issetFirstMaterializedChildIdx bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetResultExprLists = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetConstExprLists = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetFirstMaterializedChildIdx = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTupleId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetResultExprLists {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetConstExprLists {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetFirstMaterializedChildIdx {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TIntersectNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TIntersectNode[fieldId]))
}

func (p *TIntersectNode) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TupleId = _field
	return nil
}
func (p *TIntersectNode) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]*exprs.TExpr, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]*exprs.TExpr, 0, size)
		values := make([]exprs.TExpr, size)
		for i := 0; i < size; i++ {
			_elem1 := &values[i]
			_elem1.InitDefault()

			if err := _elem1.Read(iprot); err != nil {
				return err
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ResultExprLists = _field
	return nil
}
func (p *TIntersectNode) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]*exprs.TExpr, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]*exprs.TExpr, 0, size)
		values := make([]exprs.TExpr, size)
		for i := 0; i < size; i++ {
			_elem1 := &values[i]
			_elem1.InitDefault()

			if err := _elem1.Read(iprot); err != nil {
				return err
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ConstExprLists = _field
	return nil
}
func (p *TIntersectNode) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FirstMaterializedChildIdx = _field
	return nil
}
func (p *TIntersectNode) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsColocate = _field
	return nil
}

func (p *TIntersectNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TIntersectNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TIntersectNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tuple_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TIntersectNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("result_expr_lists", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.ResultExprLists)); err != nil {
		return err
	}
	for _, v := range p.ResultExprLists {
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TIntersectNode) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("const_expr_lists", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.ConstExprLists)); err != nil {
		return err
	}
	for _, v := range p.ConstExprLists {
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TIntersectNode) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("first_materialized_child_idx", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.FirstMaterializedChildIdx); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TIntersectNode) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsColocate() {
		if err = oprot.WriteFieldBegin("is_colocate", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsColocate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TIntersectNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIntersectNode(%+v)", *p)

}

func (p *TIntersectNode) DeepEqual(ano *TIntersectNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TupleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ResultExprLists) {
		return false
	}
	if !p.Field3DeepEqual(ano.ConstExprLists) {
		return false
	}
	if !p.Field4DeepEqual(ano.FirstMaterializedChildIdx) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsColocate) {
		return false
	}
	return true
}

func (p *TIntersectNode) Field1DeepEqual(src types.TTupleId) bool {

	if p.TupleId != src {
		return false
	}
	return true
}
func (p *TIntersectNode) Field2DeepEqual(src [][]*exprs.TExpr) bool {

	if len(p.ResultExprLists) != len(src) {
		return false
	}
	for i, v := range p.ResultExprLists {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *TIntersectNode) Field3DeepEqual(src [][]*exprs.TExpr) bool {

	if len(p.ConstExprLists) != len(src) {
		return false
	}
	for i, v := range p.ConstExprLists {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *TIntersectNode) Field4DeepEqual(src int64) bool {

	if p.FirstMaterializedChildIdx != src {
		return false
	}
	return true
}
func (p *TIntersectNode) Field5DeepEqual(src *bool) bool {

	if p.IsColocate == src {
		return true
	} else if p.IsColocate == nil || src == nil {
		return false
	}
	if *p.IsColocate != *src {
		return false
	}
	return true
}

type TExceptNode struct {
	TupleId                   types.TTupleId   `thrift:"tuple_id,1,required" frugal:"1,required,i32" json:"tuple_id"`
	ResultExprLists           [][]*exprs.TExpr `thrift:"result_expr_lists,2,required" frugal:"2,required,list<list<exprs.TExpr>>" json:"result_expr_lists"`
	ConstExprLists            [][]*exprs.TExpr `thrift:"const_expr_lists,3,required" frugal:"3,required,list<list<exprs.TExpr>>" json:"const_expr_lists"`
	FirstMaterializedChildIdx int64            `thrift:"first_materialized_child_idx,4,required" frugal:"4,required,i64" json:"first_materialized_child_idx"`
	IsColocate                *bool            `thrift:"is_colocate,5,optional" frugal:"5,optional,bool" json:"is_colocate,omitempty"`
}

func NewTExceptNode() *TExceptNode {
	return &TExceptNode{}
}

func (p *TExceptNode) InitDefault() {
}

func (p *TExceptNode) GetTupleId() (v types.TTupleId) {
	return p.TupleId
}

func (p *TExceptNode) GetResultExprLists() (v [][]*exprs.TExpr) {
	return p.ResultExprLists
}

func (p *TExceptNode) GetConstExprLists() (v [][]*exprs.TExpr) {
	return p.ConstExprLists
}

func (p *TExceptNode) GetFirstMaterializedChildIdx() (v int64) {
	return p.FirstMaterializedChildIdx
}

var TExceptNode_IsColocate_DEFAULT bool

func (p *TExceptNode) GetIsColocate() (v bool) {
	if !p.IsSetIsColocate() {
		return TExceptNode_IsColocate_DEFAULT
	}
	return *p.IsColocate
}
func (p *TExceptNode) SetTupleId(val types.TTupleId) {
	p.TupleId = val
}
func (p *TExceptNode) SetResultExprLists(val [][]*exprs.TExpr) {
	p.ResultExprLists = val
}
func (p *TExceptNode) SetConstExprLists(val [][]*exprs.TExpr) {
	p.ConstExprLists = val
}
func (p *TExceptNode) SetFirstMaterializedChildIdx(val int64) {
	p.FirstMaterializedChildIdx = val
}
func (p *TExceptNode) SetIsColocate(val *bool) {
	p.IsColocate = val
}

var fieldIDToName_TExceptNode = map[int16]string{
	1: "tuple_id",
	2: "result_expr_lists",
	3: "const_expr_lists",
	4: "first_materialized_child_idx",
	5: "is_colocate",
}

func (p *TExceptNode) IsSetIsColocate() bool {
	return p.IsColocate != nil
}

func (p *TExceptNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTupleId bool = false
	var issetResultExprLists bool = false
	var issetConstExprLists bool = false
	var issetFirstMaterializedChildIdx bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetResultExprLists = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetConstExprLists = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetFirstMaterializedChildIdx = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTupleId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetResultExprLists {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetConstExprLists {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetFirstMaterializedChildIdx {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExceptNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TExceptNode[fieldId]))
}

func (p *TExceptNode) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TupleId = _field
	return nil
}
func (p *TExceptNode) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]*exprs.TExpr, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]*exprs.TExpr, 0, size)
		values := make([]exprs.TExpr, size)
		for i := 0; i < size; i++ {
			_elem1 := &values[i]
			_elem1.InitDefault()

			if err := _elem1.Read(iprot); err != nil {
				return err
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ResultExprLists = _field
	return nil
}
func (p *TExceptNode) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]*exprs.TExpr, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]*exprs.TExpr, 0, size)
		values := make([]exprs.TExpr, size)
		for i := 0; i < size; i++ {
			_elem1 := &values[i]
			_elem1.InitDefault()

			if err := _elem1.Read(iprot); err != nil {
				return err
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ConstExprLists = _field
	return nil
}
func (p *TExceptNode) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FirstMaterializedChildIdx = _field
	return nil
}
func (p *TExceptNode) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsColocate = _field
	return nil
}

func (p *TExceptNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TExceptNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TExceptNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tuple_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TExceptNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("result_expr_lists", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.ResultExprLists)); err != nil {
		return err
	}
	for _, v := range p.ResultExprLists {
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TExceptNode) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("const_expr_lists", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.ConstExprLists)); err != nil {
		return err
	}
	for _, v := range p.ConstExprLists {
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TExceptNode) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("first_materialized_child_idx", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.FirstMaterializedChildIdx); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TExceptNode) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsColocate() {
		if err = oprot.WriteFieldBegin("is_colocate", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsColocate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TExceptNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExceptNode(%+v)", *p)

}

func (p *TExceptNode) DeepEqual(ano *TExceptNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TupleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ResultExprLists) {
		return false
	}
	if !p.Field3DeepEqual(ano.ConstExprLists) {
		return false
	}
	if !p.Field4DeepEqual(ano.FirstMaterializedChildIdx) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsColocate) {
		return false
	}
	return true
}

func (p *TExceptNode) Field1DeepEqual(src types.TTupleId) bool {

	if p.TupleId != src {
		return false
	}
	return true
}
func (p *TExceptNode) Field2DeepEqual(src [][]*exprs.TExpr) bool {

	if len(p.ResultExprLists) != len(src) {
		return false
	}
	for i, v := range p.ResultExprLists {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *TExceptNode) Field3DeepEqual(src [][]*exprs.TExpr) bool {

	if len(p.ConstExprLists) != len(src) {
		return false
	}
	for i, v := range p.ConstExprLists {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *TExceptNode) Field4DeepEqual(src int64) bool {

	if p.FirstMaterializedChildIdx != src {
		return false
	}
	return true
}
func (p *TExceptNode) Field5DeepEqual(src *bool) bool {

	if p.IsColocate == src {
		return true
	} else if p.IsColocate == nil || src == nil {
		return false
	}
	if *p.IsColocate != *src {
		return false
	}
	return true
}

type TExchangeNode struct {
	InputRowTuples []types.TTupleId           `thrift:"input_row_tuples,1,required" frugal:"1,required,list<i32>" json:"input_row_tuples"`
	SortInfo       *TSortInfo                 `thrift:"sort_info,2,optional" frugal:"2,optional,TSortInfo" json:"sort_info,omitempty"`
	Offset         *int64                     `thrift:"offset,3,optional" frugal:"3,optional,i64" json:"offset,omitempty"`
	PartitionType  *partitions.TPartitionType `thrift:"partition_type,4,optional" frugal:"4,optional,TPartitionType" json:"partition_type,omitempty"`
}

func NewTExchangeNode() *TExchangeNode {
	return &TExchangeNode{}
}

func (p *TExchangeNode) InitDefault() {
}

func (p *TExchangeNode) GetInputRowTuples() (v []types.TTupleId) {
	return p.InputRowTuples
}

var TExchangeNode_SortInfo_DEFAULT *TSortInfo

func (p *TExchangeNode) GetSortInfo() (v *TSortInfo) {
	if !p.IsSetSortInfo() {
		return TExchangeNode_SortInfo_DEFAULT
	}
	return p.SortInfo
}

var TExchangeNode_Offset_DEFAULT int64

func (p *TExchangeNode) GetOffset() (v int64) {
	if !p.IsSetOffset() {
		return TExchangeNode_Offset_DEFAULT
	}
	return *p.Offset
}

var TExchangeNode_PartitionType_DEFAULT partitions.TPartitionType

func (p *TExchangeNode) GetPartitionType() (v partitions.TPartitionType) {
	if !p.IsSetPartitionType() {
		return TExchangeNode_PartitionType_DEFAULT
	}
	return *p.PartitionType
}
func (p *TExchangeNode) SetInputRowTuples(val []types.TTupleId) {
	p.InputRowTuples = val
}
func (p *TExchangeNode) SetSortInfo(val *TSortInfo) {
	p.SortInfo = val
}
func (p *TExchangeNode) SetOffset(val *int64) {
	p.Offset = val
}
func (p *TExchangeNode) SetPartitionType(val *partitions.TPartitionType) {
	p.PartitionType = val
}

var fieldIDToName_TExchangeNode = map[int16]string{
	1: "input_row_tuples",
	2: "sort_info",
	3: "offset",
	4: "partition_type",
}

func (p *TExchangeNode) IsSetSortInfo() bool {
	return p.SortInfo != nil
}

func (p *TExchangeNode) IsSetOffset() bool {
	return p.Offset != nil
}

func (p *TExchangeNode) IsSetPartitionType() bool {
	return p.PartitionType != nil
}

func (p *TExchangeNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetInputRowTuples bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetInputRowTuples = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetInputRowTuples {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExchangeNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TExchangeNode[fieldId]))
}

func (p *TExchangeNode) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TTupleId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TTupleId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.InputRowTuples = _field
	return nil
}
func (p *TExchangeNode) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTSortInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SortInfo = _field
	return nil
}
func (p *TExchangeNode) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Offset = _field
	return nil
}
func (p *TExchangeNode) ReadField4(iprot thrift.TProtocol) error {

	var _field *partitions.TPartitionType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := partitions.TPartitionType(v)
		_field = &tmp
	}
	p.PartitionType = _field
	return nil
}

func (p *TExchangeNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TExchangeNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TExchangeNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("input_row_tuples", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.InputRowTuples)); err != nil {
		return err
	}
	for _, v := range p.InputRowTuples {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TExchangeNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSortInfo() {
		if err = oprot.WriteFieldBegin("sort_info", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.SortInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TExchangeNode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOffset() {
		if err = oprot.WriteFieldBegin("offset", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Offset); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TExchangeNode) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionType() {
		if err = oprot.WriteFieldBegin("partition_type", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.PartitionType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TExchangeNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExchangeNode(%+v)", *p)

}

func (p *TExchangeNode) DeepEqual(ano *TExchangeNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.InputRowTuples) {
		return false
	}
	if !p.Field2DeepEqual(ano.SortInfo) {
		return false
	}
	if !p.Field3DeepEqual(ano.Offset) {
		return false
	}
	if !p.Field4DeepEqual(ano.PartitionType) {
		return false
	}
	return true
}

func (p *TExchangeNode) Field1DeepEqual(src []types.TTupleId) bool {

	if len(p.InputRowTuples) != len(src) {
		return false
	}
	for i, v := range p.InputRowTuples {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TExchangeNode) Field2DeepEqual(src *TSortInfo) bool {

	if !p.SortInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExchangeNode) Field3DeepEqual(src *int64) bool {

	if p.Offset == src {
		return true
	} else if p.Offset == nil || src == nil {
		return false
	}
	if *p.Offset != *src {
		return false
	}
	return true
}
func (p *TExchangeNode) Field4DeepEqual(src *partitions.TPartitionType) bool {

	if p.PartitionType == src {
		return true
	} else if p.PartitionType == nil || src == nil {
		return false
	}
	if *p.PartitionType != *src {
		return false
	}
	return true
}

type TOlapRewriteNode struct {
	Columns       []*exprs.TExpr       `thrift:"columns,1,required" frugal:"1,required,list<exprs.TExpr>" json:"columns"`
	ColumnTypes   []*types.TColumnType `thrift:"column_types,2,required" frugal:"2,required,list<types.TColumnType>" json:"column_types"`
	OutputTupleId types.TTupleId       `thrift:"output_tuple_id,3,required" frugal:"3,required,i32" json:"output_tuple_id"`
}

func NewTOlapRewriteNode() *TOlapRewriteNode {
	return &TOlapRewriteNode{}
}

func (p *TOlapRewriteNode) InitDefault() {
}

func (p *TOlapRewriteNode) GetColumns() (v []*exprs.TExpr) {
	return p.Columns
}

func (p *TOlapRewriteNode) GetColumnTypes() (v []*types.TColumnType) {
	return p.ColumnTypes
}

func (p *TOlapRewriteNode) GetOutputTupleId() (v types.TTupleId) {
	return p.OutputTupleId
}
func (p *TOlapRewriteNode) SetColumns(val []*exprs.TExpr) {
	p.Columns = val
}
func (p *TOlapRewriteNode) SetColumnTypes(val []*types.TColumnType) {
	p.ColumnTypes = val
}
func (p *TOlapRewriteNode) SetOutputTupleId(val types.TTupleId) {
	p.OutputTupleId = val
}

var fieldIDToName_TOlapRewriteNode = map[int16]string{
	1: "columns",
	2: "column_types",
	3: "output_tuple_id",
}

func (p *TOlapRewriteNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetColumns bool = false
	var issetColumnTypes bool = false
	var issetOutputTupleId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumns = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumnTypes = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetOutputTupleId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetColumns {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetColumnTypes {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetOutputTupleId {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TOlapRewriteNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TOlapRewriteNode[fieldId]))
}

func (p *TOlapRewriteNode) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Columns = _field
	return nil
}
func (p *TOlapRewriteNode) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*types.TColumnType, 0, size)
	values := make([]types.TColumnType, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnTypes = _field
	return nil
}
func (p *TOlapRewriteNode) ReadField3(iprot thrift.TProtocol) error {

	var _field types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OutputTupleId = _field
	return nil
}

func (p *TOlapRewriteNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TOlapRewriteNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TOlapRewriteNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columns", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
		return err
	}
	for _, v := range p.Columns {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TOlapRewriteNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("column_types", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnTypes)); err != nil {
		return err
	}
	for _, v := range p.ColumnTypes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TOlapRewriteNode) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("output_tuple_id", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.OutputTupleId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TOlapRewriteNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TOlapRewriteNode(%+v)", *p)

}

func (p *TOlapRewriteNode) DeepEqual(ano *TOlapRewriteNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Columns) {
		return false
	}
	if !p.Field2DeepEqual(ano.ColumnTypes) {
		return false
	}
	if !p.Field3DeepEqual(ano.OutputTupleId) {
		return false
	}
	return true
}

func (p *TOlapRewriteNode) Field1DeepEqual(src []*exprs.TExpr) bool {

	if len(p.Columns) != len(src) {
		return false
	}
	for i, v := range p.Columns {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TOlapRewriteNode) Field2DeepEqual(src []*types.TColumnType) bool {

	if len(p.ColumnTypes) != len(src) {
		return false
	}
	for i, v := range p.ColumnTypes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TOlapRewriteNode) Field3DeepEqual(src types.TTupleId) bool {

	if p.OutputTupleId != src {
		return false
	}
	return true
}

type TTableFunctionNode struct {
	FnCallExprList []*exprs.TExpr  `thrift:"fnCallExprList,1,optional" frugal:"1,optional,list<exprs.TExpr>" json:"fnCallExprList,omitempty"`
	OutputSlotIds  []types.TSlotId `thrift:"outputSlotIds,2,optional" frugal:"2,optional,list<i32>" json:"outputSlotIds,omitempty"`
}

func NewTTableFunctionNode() *TTableFunctionNode {
	return &TTableFunctionNode{}
}

func (p *TTableFunctionNode) InitDefault() {
}

var TTableFunctionNode_FnCallExprList_DEFAULT []*exprs.TExpr

func (p *TTableFunctionNode) GetFnCallExprList() (v []*exprs.TExpr) {
	if !p.IsSetFnCallExprList() {
		return TTableFunctionNode_FnCallExprList_DEFAULT
	}
	return p.FnCallExprList
}

var TTableFunctionNode_OutputSlotIds_DEFAULT []types.TSlotId

func (p *TTableFunctionNode) GetOutputSlotIds() (v []types.TSlotId) {
	if !p.IsSetOutputSlotIds() {
		return TTableFunctionNode_OutputSlotIds_DEFAULT
	}
	return p.OutputSlotIds
}
func (p *TTableFunctionNode) SetFnCallExprList(val []*exprs.TExpr) {
	p.FnCallExprList = val
}
func (p *TTableFunctionNode) SetOutputSlotIds(val []types.TSlotId) {
	p.OutputSlotIds = val
}

var fieldIDToName_TTableFunctionNode = map[int16]string{
	1: "fnCallExprList",
	2: "outputSlotIds",
}

func (p *TTableFunctionNode) IsSetFnCallExprList() bool {
	return p.FnCallExprList != nil
}

func (p *TTableFunctionNode) IsSetOutputSlotIds() bool {
	return p.OutputSlotIds != nil
}

func (p *TTableFunctionNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTableFunctionNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTableFunctionNode) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FnCallExprList = _field
	return nil
}
func (p *TTableFunctionNode) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TSlotId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TSlotId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OutputSlotIds = _field
	return nil
}

func (p *TTableFunctionNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTableFunctionNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTableFunctionNode) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFnCallExprList() {
		if err = oprot.WriteFieldBegin("fnCallExprList", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FnCallExprList)); err != nil {
			return err
		}
		for _, v := range p.FnCallExprList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTableFunctionNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputSlotIds() {
		if err = oprot.WriteFieldBegin("outputSlotIds", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.OutputSlotIds)); err != nil {
			return err
		}
		for _, v := range p.OutputSlotIds {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTableFunctionNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTableFunctionNode(%+v)", *p)

}

func (p *TTableFunctionNode) DeepEqual(ano *TTableFunctionNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FnCallExprList) {
		return false
	}
	if !p.Field2DeepEqual(ano.OutputSlotIds) {
		return false
	}
	return true
}

func (p *TTableFunctionNode) Field1DeepEqual(src []*exprs.TExpr) bool {

	if len(p.FnCallExprList) != len(src) {
		return false
	}
	for i, v := range p.FnCallExprList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TTableFunctionNode) Field2DeepEqual(src []types.TSlotId) bool {

	if len(p.OutputSlotIds) != len(src) {
		return false
	}
	for i, v := range p.OutputSlotIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type TBackendResourceProfile struct {
	MinReservation      int64 `thrift:"min_reservation,1,required" frugal:"1,required,i64" json:"min_reservation"`
	MaxReservation      int64 `thrift:"max_reservation,2,required" frugal:"2,required,i64" json:"max_reservation"`
	SpillableBufferSize int64 `thrift:"spillable_buffer_size,3,optional" frugal:"3,optional,i64" json:"spillable_buffer_size,omitempty"`
	MaxRowBufferSize    int64 `thrift:"max_row_buffer_size,4,optional" frugal:"4,optional,i64" json:"max_row_buffer_size,omitempty"`
}

func NewTBackendResourceProfile() *TBackendResourceProfile {
	return &TBackendResourceProfile{

		MinReservation:      0,
		MaxReservation:      12188490189880,
		SpillableBufferSize: 2097152,
		MaxRowBufferSize:    4294967296,
	}
}

func (p *TBackendResourceProfile) InitDefault() {
	p.MinReservation = 0
	p.MaxReservation = 12188490189880
	p.SpillableBufferSize = 2097152
	p.MaxRowBufferSize = 4294967296
}

func (p *TBackendResourceProfile) GetMinReservation() (v int64) {
	return p.MinReservation
}

func (p *TBackendResourceProfile) GetMaxReservation() (v int64) {
	return p.MaxReservation
}

var TBackendResourceProfile_SpillableBufferSize_DEFAULT int64 = 2097152

func (p *TBackendResourceProfile) GetSpillableBufferSize() (v int64) {
	if !p.IsSetSpillableBufferSize() {
		return TBackendResourceProfile_SpillableBufferSize_DEFAULT
	}
	return p.SpillableBufferSize
}

var TBackendResourceProfile_MaxRowBufferSize_DEFAULT int64 = 4294967296

func (p *TBackendResourceProfile) GetMaxRowBufferSize() (v int64) {
	if !p.IsSetMaxRowBufferSize() {
		return TBackendResourceProfile_MaxRowBufferSize_DEFAULT
	}
	return p.MaxRowBufferSize
}
func (p *TBackendResourceProfile) SetMinReservation(val int64) {
	p.MinReservation = val
}
func (p *TBackendResourceProfile) SetMaxReservation(val int64) {
	p.MaxReservation = val
}
func (p *TBackendResourceProfile) SetSpillableBufferSize(val int64) {
	p.SpillableBufferSize = val
}
func (p *TBackendResourceProfile) SetMaxRowBufferSize(val int64) {
	p.MaxRowBufferSize = val
}

var fieldIDToName_TBackendResourceProfile = map[int16]string{
	1: "min_reservation",
	2: "max_reservation",
	3: "spillable_buffer_size",
	4: "max_row_buffer_size",
}

func (p *TBackendResourceProfile) IsSetSpillableBufferSize() bool {
	return p.SpillableBufferSize != TBackendResourceProfile_SpillableBufferSize_DEFAULT
}

func (p *TBackendResourceProfile) IsSetMaxRowBufferSize() bool {
	return p.MaxRowBufferSize != TBackendResourceProfile_MaxRowBufferSize_DEFAULT
}

func (p *TBackendResourceProfile) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetMinReservation bool = false
	var issetMaxReservation bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetMinReservation = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetMaxReservation = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetMinReservation {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMaxReservation {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TBackendResourceProfile[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TBackendResourceProfile[fieldId]))
}

func (p *TBackendResourceProfile) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MinReservation = _field
	return nil
}
func (p *TBackendResourceProfile) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxReservation = _field
	return nil
}
func (p *TBackendResourceProfile) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SpillableBufferSize = _field
	return nil
}
func (p *TBackendResourceProfile) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxRowBufferSize = _field
	return nil
}

func (p *TBackendResourceProfile) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TBackendResourceProfile"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TBackendResourceProfile) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("min_reservation", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MinReservation); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TBackendResourceProfile) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("max_reservation", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MaxReservation); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TBackendResourceProfile) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpillableBufferSize() {
		if err = oprot.WriteFieldBegin("spillable_buffer_size", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.SpillableBufferSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TBackendResourceProfile) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxRowBufferSize() {
		if err = oprot.WriteFieldBegin("max_row_buffer_size", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MaxRowBufferSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TBackendResourceProfile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBackendResourceProfile(%+v)", *p)

}

func (p *TBackendResourceProfile) DeepEqual(ano *TBackendResourceProfile) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MinReservation) {
		return false
	}
	if !p.Field2DeepEqual(ano.MaxReservation) {
		return false
	}
	if !p.Field3DeepEqual(ano.SpillableBufferSize) {
		return false
	}
	if !p.Field4DeepEqual(ano.MaxRowBufferSize) {
		return false
	}
	return true
}

func (p *TBackendResourceProfile) Field1DeepEqual(src int64) bool {

	if p.MinReservation != src {
		return false
	}
	return true
}
func (p *TBackendResourceProfile) Field2DeepEqual(src int64) bool {

	if p.MaxReservation != src {
		return false
	}
	return true
}
func (p *TBackendResourceProfile) Field3DeepEqual(src int64) bool {

	if p.SpillableBufferSize != src {
		return false
	}
	return true
}
func (p *TBackendResourceProfile) Field4DeepEqual(src int64) bool {

	if p.MaxRowBufferSize != src {
		return false
	}
	return true
}

type TAssertNumRowsNode struct {
	DesiredNumRows                *int64      `thrift:"desired_num_rows,1,optional" frugal:"1,optional,i64" json:"desired_num_rows,omitempty"`
	SubqueryString                *string     `thrift:"subquery_string,2,optional" frugal:"2,optional,string" json:"subquery_string,omitempty"`
	Assertion                     *TAssertion `thrift:"assertion,3,optional" frugal:"3,optional,TAssertion" json:"assertion,omitempty"`
	ShouldConvertOutputToNullable *bool       `thrift:"should_convert_output_to_nullable,4,optional" frugal:"4,optional,bool" json:"should_convert_output_to_nullable,omitempty"`
}

func NewTAssertNumRowsNode() *TAssertNumRowsNode {
	return &TAssertNumRowsNode{}
}

func (p *TAssertNumRowsNode) InitDefault() {
}

var TAssertNumRowsNode_DesiredNumRows_DEFAULT int64

func (p *TAssertNumRowsNode) GetDesiredNumRows() (v int64) {
	if !p.IsSetDesiredNumRows() {
		return TAssertNumRowsNode_DesiredNumRows_DEFAULT
	}
	return *p.DesiredNumRows
}

var TAssertNumRowsNode_SubqueryString_DEFAULT string

func (p *TAssertNumRowsNode) GetSubqueryString() (v string) {
	if !p.IsSetSubqueryString() {
		return TAssertNumRowsNode_SubqueryString_DEFAULT
	}
	return *p.SubqueryString
}

var TAssertNumRowsNode_Assertion_DEFAULT TAssertion

func (p *TAssertNumRowsNode) GetAssertion() (v TAssertion) {
	if !p.IsSetAssertion() {
		return TAssertNumRowsNode_Assertion_DEFAULT
	}
	return *p.Assertion
}

var TAssertNumRowsNode_ShouldConvertOutputToNullable_DEFAULT bool

func (p *TAssertNumRowsNode) GetShouldConvertOutputToNullable() (v bool) {
	if !p.IsSetShouldConvertOutputToNullable() {
		return TAssertNumRowsNode_ShouldConvertOutputToNullable_DEFAULT
	}
	return *p.ShouldConvertOutputToNullable
}
func (p *TAssertNumRowsNode) SetDesiredNumRows(val *int64) {
	p.DesiredNumRows = val
}
func (p *TAssertNumRowsNode) SetSubqueryString(val *string) {
	p.SubqueryString = val
}
func (p *TAssertNumRowsNode) SetAssertion(val *TAssertion) {
	p.Assertion = val
}
func (p *TAssertNumRowsNode) SetShouldConvertOutputToNullable(val *bool) {
	p.ShouldConvertOutputToNullable = val
}

var fieldIDToName_TAssertNumRowsNode = map[int16]string{
	1: "desired_num_rows",
	2: "subquery_string",
	3: "assertion",
	4: "should_convert_output_to_nullable",
}

func (p *TAssertNumRowsNode) IsSetDesiredNumRows() bool {
	return p.DesiredNumRows != nil
}

func (p *TAssertNumRowsNode) IsSetSubqueryString() bool {
	return p.SubqueryString != nil
}

func (p *TAssertNumRowsNode) IsSetAssertion() bool {
	return p.Assertion != nil
}

func (p *TAssertNumRowsNode) IsSetShouldConvertOutputToNullable() bool {
	return p.ShouldConvertOutputToNullable != nil
}

func (p *TAssertNumRowsNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAssertNumRowsNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TAssertNumRowsNode) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DesiredNumRows = _field
	return nil
}
func (p *TAssertNumRowsNode) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SubqueryString = _field
	return nil
}
func (p *TAssertNumRowsNode) ReadField3(iprot thrift.TProtocol) error {

	var _field *TAssertion
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TAssertion(v)
		_field = &tmp
	}
	p.Assertion = _field
	return nil
}
func (p *TAssertNumRowsNode) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ShouldConvertOutputToNullable = _field
	return nil
}

func (p *TAssertNumRowsNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAssertNumRowsNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAssertNumRowsNode) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesiredNumRows() {
		if err = oprot.WriteFieldBegin("desired_num_rows", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DesiredNumRows); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAssertNumRowsNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubqueryString() {
		if err = oprot.WriteFieldBegin("subquery_string", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SubqueryString); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAssertNumRowsNode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAssertion() {
		if err = oprot.WriteFieldBegin("assertion", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Assertion)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TAssertNumRowsNode) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetShouldConvertOutputToNullable() {
		if err = oprot.WriteFieldBegin("should_convert_output_to_nullable", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ShouldConvertOutputToNullable); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TAssertNumRowsNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAssertNumRowsNode(%+v)", *p)

}

func (p *TAssertNumRowsNode) DeepEqual(ano *TAssertNumRowsNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DesiredNumRows) {
		return false
	}
	if !p.Field2DeepEqual(ano.SubqueryString) {
		return false
	}
	if !p.Field3DeepEqual(ano.Assertion) {
		return false
	}
	if !p.Field4DeepEqual(ano.ShouldConvertOutputToNullable) {
		return false
	}
	return true
}

func (p *TAssertNumRowsNode) Field1DeepEqual(src *int64) bool {

	if p.DesiredNumRows == src {
		return true
	} else if p.DesiredNumRows == nil || src == nil {
		return false
	}
	if *p.DesiredNumRows != *src {
		return false
	}
	return true
}
func (p *TAssertNumRowsNode) Field2DeepEqual(src *string) bool {

	if p.SubqueryString == src {
		return true
	} else if p.SubqueryString == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SubqueryString, *src) != 0 {
		return false
	}
	return true
}
func (p *TAssertNumRowsNode) Field3DeepEqual(src *TAssertion) bool {

	if p.Assertion == src {
		return true
	} else if p.Assertion == nil || src == nil {
		return false
	}
	if *p.Assertion != *src {
		return false
	}
	return true
}
func (p *TAssertNumRowsNode) Field4DeepEqual(src *bool) bool {

	if p.ShouldConvertOutputToNullable == src {
		return true
	} else if p.ShouldConvertOutputToNullable == nil || src == nil {
		return false
	}
	if *p.ShouldConvertOutputToNullable != *src {
		return false
	}
	return true
}

type TTopnFilterDesc struct {
	SourceNodeId             int32                              `thrift:"source_node_id,1,required" frugal:"1,required,i32" json:"source_node_id"`
	IsAsc                    bool                               `thrift:"is_asc,2,required" frugal:"2,required,bool" json:"is_asc"`
	NullFirst                bool                               `thrift:"null_first,3,required" frugal:"3,required,bool" json:"null_first"`
	TargetNodeIdToTargetExpr map[types.TPlanNodeId]*exprs.TExpr `thrift:"target_node_id_to_target_expr,4,required" frugal:"4,required,map<i32:exprs.TExpr>" json:"target_node_id_to_target_expr"`
}

func NewTTopnFilterDesc() *TTopnFilterDesc {
	return &TTopnFilterDesc{}
}

func (p *TTopnFilterDesc) InitDefault() {
}

func (p *TTopnFilterDesc) GetSourceNodeId() (v int32) {
	return p.SourceNodeId
}

func (p *TTopnFilterDesc) GetIsAsc() (v bool) {
	return p.IsAsc
}

func (p *TTopnFilterDesc) GetNullFirst() (v bool) {
	return p.NullFirst
}

func (p *TTopnFilterDesc) GetTargetNodeIdToTargetExpr() (v map[types.TPlanNodeId]*exprs.TExpr) {
	return p.TargetNodeIdToTargetExpr
}
func (p *TTopnFilterDesc) SetSourceNodeId(val int32) {
	p.SourceNodeId = val
}
func (p *TTopnFilterDesc) SetIsAsc(val bool) {
	p.IsAsc = val
}
func (p *TTopnFilterDesc) SetNullFirst(val bool) {
	p.NullFirst = val
}
func (p *TTopnFilterDesc) SetTargetNodeIdToTargetExpr(val map[types.TPlanNodeId]*exprs.TExpr) {
	p.TargetNodeIdToTargetExpr = val
}

var fieldIDToName_TTopnFilterDesc = map[int16]string{
	1: "source_node_id",
	2: "is_asc",
	3: "null_first",
	4: "target_node_id_to_target_expr",
}

func (p *TTopnFilterDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSourceNodeId bool = false
	var issetIsAsc bool = false
	var issetNullFirst bool = false
	var issetTargetNodeIdToTargetExpr bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetSourceNodeId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsAsc = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetNullFirst = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetTargetNodeIdToTargetExpr = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSourceNodeId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetIsAsc {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetNullFirst {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetTargetNodeIdToTargetExpr {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTopnFilterDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTopnFilterDesc[fieldId]))
}

func (p *TTopnFilterDesc) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SourceNodeId = _field
	return nil
}
func (p *TTopnFilterDesc) ReadField2(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsAsc = _field
	return nil
}
func (p *TTopnFilterDesc) ReadField3(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NullFirst = _field
	return nil
}
func (p *TTopnFilterDesc) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TPlanNodeId]*exprs.TExpr, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.TargetNodeIdToTargetExpr = _field
	return nil
}

func (p *TTopnFilterDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTopnFilterDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTopnFilterDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("source_node_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SourceNodeId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTopnFilterDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_asc", thrift.BOOL, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsAsc); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTopnFilterDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("null_first", thrift.BOOL, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.NullFirst); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTopnFilterDesc) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("target_node_id_to_target_expr", thrift.MAP, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.TargetNodeIdToTargetExpr)); err != nil {
		return err
	}
	for k, v := range p.TargetNodeIdToTargetExpr {
		if err := oprot.WriteI32(k); err != nil {
			return err
		}
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TTopnFilterDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTopnFilterDesc(%+v)", *p)

}

func (p *TTopnFilterDesc) DeepEqual(ano *TTopnFilterDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SourceNodeId) {
		return false
	}
	if !p.Field2DeepEqual(ano.IsAsc) {
		return false
	}
	if !p.Field3DeepEqual(ano.NullFirst) {
		return false
	}
	if !p.Field4DeepEqual(ano.TargetNodeIdToTargetExpr) {
		return false
	}
	return true
}

func (p *TTopnFilterDesc) Field1DeepEqual(src int32) bool {

	if p.SourceNodeId != src {
		return false
	}
	return true
}
func (p *TTopnFilterDesc) Field2DeepEqual(src bool) bool {

	if p.IsAsc != src {
		return false
	}
	return true
}
func (p *TTopnFilterDesc) Field3DeepEqual(src bool) bool {

	if p.NullFirst != src {
		return false
	}
	return true
}
func (p *TTopnFilterDesc) Field4DeepEqual(src map[types.TPlanNodeId]*exprs.TExpr) bool {

	if len(p.TargetNodeIdToTargetExpr) != len(src) {
		return false
	}
	for k, v := range p.TargetNodeIdToTargetExpr {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TRuntimeFilterDesc struct {
	FilterId                       int32                              `thrift:"filter_id,1,required" frugal:"1,required,i32" json:"filter_id"`
	SrcExpr                        *exprs.TExpr                       `thrift:"src_expr,2,required" frugal:"2,required,exprs.TExpr" json:"src_expr"`
	ExprOrder                      int32                              `thrift:"expr_order,3,required" frugal:"3,required,i32" json:"expr_order"`
	PlanIdToTargetExpr             map[types.TPlanNodeId]*exprs.TExpr `thrift:"planId_to_target_expr,4,required" frugal:"4,required,map<i32:exprs.TExpr>" json:"planId_to_target_expr"`
	IsBroadcastJoin                bool                               `thrift:"is_broadcast_join,5,required" frugal:"5,required,bool" json:"is_broadcast_join"`
	HasLocalTargets                bool                               `thrift:"has_local_targets,6,required" frugal:"6,required,bool" json:"has_local_targets"`
	HasRemoteTargets               bool                               `thrift:"has_remote_targets,7,required" frugal:"7,required,bool" json:"has_remote_targets"`
	Type                           TRuntimeFilterType                 `thrift:"type,8,required" frugal:"8,required,TRuntimeFilterType" json:"type"`
	BloomFilterSizeBytes           *int64                             `thrift:"bloom_filter_size_bytes,9,optional" frugal:"9,optional,i64" json:"bloom_filter_size_bytes,omitempty"`
	BitmapTargetExpr               *exprs.TExpr                       `thrift:"bitmap_target_expr,10,optional" frugal:"10,optional,exprs.TExpr" json:"bitmap_target_expr,omitempty"`
	BitmapFilterNotIn              *bool                              `thrift:"bitmap_filter_not_in,11,optional" frugal:"11,optional,bool" json:"bitmap_filter_not_in,omitempty"`
	OptRemoteRf                    *bool                              `thrift:"opt_remote_rf,12,optional" frugal:"12,optional,bool" json:"opt_remote_rf,omitempty"`
	MinMaxType                     *TMinMaxRuntimeFilterType          `thrift:"min_max_type,13,optional" frugal:"13,optional,TMinMaxRuntimeFilterType" json:"min_max_type,omitempty"`
	BloomFilterSizeCalculatedByNdv *bool                              `thrift:"bloom_filter_size_calculated_by_ndv,14,optional" frugal:"14,optional,bool" json:"bloom_filter_size_calculated_by_ndv,omitempty"`
	NullAware                      *bool                              `thrift:"null_aware,15,optional" frugal:"15,optional,bool" json:"null_aware,omitempty"`
	SyncFilterSize                 *bool                              `thrift:"sync_filter_size,16,optional" frugal:"16,optional,bool" json:"sync_filter_size,omitempty"`
}

func NewTRuntimeFilterDesc() *TRuntimeFilterDesc {
	return &TRuntimeFilterDesc{}
}

func (p *TRuntimeFilterDesc) InitDefault() {
}

func (p *TRuntimeFilterDesc) GetFilterId() (v int32) {
	return p.FilterId
}

var TRuntimeFilterDesc_SrcExpr_DEFAULT *exprs.TExpr

func (p *TRuntimeFilterDesc) GetSrcExpr() (v *exprs.TExpr) {
	if !p.IsSetSrcExpr() {
		return TRuntimeFilterDesc_SrcExpr_DEFAULT
	}
	return p.SrcExpr
}

func (p *TRuntimeFilterDesc) GetExprOrder() (v int32) {
	return p.ExprOrder
}

func (p *TRuntimeFilterDesc) GetPlanIdToTargetExpr() (v map[types.TPlanNodeId]*exprs.TExpr) {
	return p.PlanIdToTargetExpr
}

func (p *TRuntimeFilterDesc) GetIsBroadcastJoin() (v bool) {
	return p.IsBroadcastJoin
}

func (p *TRuntimeFilterDesc) GetHasLocalTargets() (v bool) {
	return p.HasLocalTargets
}

func (p *TRuntimeFilterDesc) GetHasRemoteTargets() (v bool) {
	return p.HasRemoteTargets
}

func (p *TRuntimeFilterDesc) GetType() (v TRuntimeFilterType) {
	return p.Type
}

var TRuntimeFilterDesc_BloomFilterSizeBytes_DEFAULT int64

func (p *TRuntimeFilterDesc) GetBloomFilterSizeBytes() (v int64) {
	if !p.IsSetBloomFilterSizeBytes() {
		return TRuntimeFilterDesc_BloomFilterSizeBytes_DEFAULT
	}
	return *p.BloomFilterSizeBytes
}

var TRuntimeFilterDesc_BitmapTargetExpr_DEFAULT *exprs.TExpr

func (p *TRuntimeFilterDesc) GetBitmapTargetExpr() (v *exprs.TExpr) {
	if !p.IsSetBitmapTargetExpr() {
		return TRuntimeFilterDesc_BitmapTargetExpr_DEFAULT
	}
	return p.BitmapTargetExpr
}

var TRuntimeFilterDesc_BitmapFilterNotIn_DEFAULT bool

func (p *TRuntimeFilterDesc) GetBitmapFilterNotIn() (v bool) {
	if !p.IsSetBitmapFilterNotIn() {
		return TRuntimeFilterDesc_BitmapFilterNotIn_DEFAULT
	}
	return *p.BitmapFilterNotIn
}

var TRuntimeFilterDesc_OptRemoteRf_DEFAULT bool

func (p *TRuntimeFilterDesc) GetOptRemoteRf() (v bool) {
	if !p.IsSetOptRemoteRf() {
		return TRuntimeFilterDesc_OptRemoteRf_DEFAULT
	}
	return *p.OptRemoteRf
}

var TRuntimeFilterDesc_MinMaxType_DEFAULT TMinMaxRuntimeFilterType

func (p *TRuntimeFilterDesc) GetMinMaxType() (v TMinMaxRuntimeFilterType) {
	if !p.IsSetMinMaxType() {
		return TRuntimeFilterDesc_MinMaxType_DEFAULT
	}
	return *p.MinMaxType
}

var TRuntimeFilterDesc_BloomFilterSizeCalculatedByNdv_DEFAULT bool

func (p *TRuntimeFilterDesc) GetBloomFilterSizeCalculatedByNdv() (v bool) {
	if !p.IsSetBloomFilterSizeCalculatedByNdv() {
		return TRuntimeFilterDesc_BloomFilterSizeCalculatedByNdv_DEFAULT
	}
	return *p.BloomFilterSizeCalculatedByNdv
}

var TRuntimeFilterDesc_NullAware_DEFAULT bool

func (p *TRuntimeFilterDesc) GetNullAware() (v bool) {
	if !p.IsSetNullAware() {
		return TRuntimeFilterDesc_NullAware_DEFAULT
	}
	return *p.NullAware
}

var TRuntimeFilterDesc_SyncFilterSize_DEFAULT bool

func (p *TRuntimeFilterDesc) GetSyncFilterSize() (v bool) {
	if !p.IsSetSyncFilterSize() {
		return TRuntimeFilterDesc_SyncFilterSize_DEFAULT
	}
	return *p.SyncFilterSize
}
func (p *TRuntimeFilterDesc) SetFilterId(val int32) {
	p.FilterId = val
}
func (p *TRuntimeFilterDesc) SetSrcExpr(val *exprs.TExpr) {
	p.SrcExpr = val
}
func (p *TRuntimeFilterDesc) SetExprOrder(val int32) {
	p.ExprOrder = val
}
func (p *TRuntimeFilterDesc) SetPlanIdToTargetExpr(val map[types.TPlanNodeId]*exprs.TExpr) {
	p.PlanIdToTargetExpr = val
}
func (p *TRuntimeFilterDesc) SetIsBroadcastJoin(val bool) {
	p.IsBroadcastJoin = val
}
func (p *TRuntimeFilterDesc) SetHasLocalTargets(val bool) {
	p.HasLocalTargets = val
}
func (p *TRuntimeFilterDesc) SetHasRemoteTargets(val bool) {
	p.HasRemoteTargets = val
}
func (p *TRuntimeFilterDesc) SetType(val TRuntimeFilterType) {
	p.Type = val
}
func (p *TRuntimeFilterDesc) SetBloomFilterSizeBytes(val *int64) {
	p.BloomFilterSizeBytes = val
}
func (p *TRuntimeFilterDesc) SetBitmapTargetExpr(val *exprs.TExpr) {
	p.BitmapTargetExpr = val
}
func (p *TRuntimeFilterDesc) SetBitmapFilterNotIn(val *bool) {
	p.BitmapFilterNotIn = val
}
func (p *TRuntimeFilterDesc) SetOptRemoteRf(val *bool) {
	p.OptRemoteRf = val
}
func (p *TRuntimeFilterDesc) SetMinMaxType(val *TMinMaxRuntimeFilterType) {
	p.MinMaxType = val
}
func (p *TRuntimeFilterDesc) SetBloomFilterSizeCalculatedByNdv(val *bool) {
	p.BloomFilterSizeCalculatedByNdv = val
}
func (p *TRuntimeFilterDesc) SetNullAware(val *bool) {
	p.NullAware = val
}
func (p *TRuntimeFilterDesc) SetSyncFilterSize(val *bool) {
	p.SyncFilterSize = val
}

var fieldIDToName_TRuntimeFilterDesc = map[int16]string{
	1:  "filter_id",
	2:  "src_expr",
	3:  "expr_order",
	4:  "planId_to_target_expr",
	5:  "is_broadcast_join",
	6:  "has_local_targets",
	7:  "has_remote_targets",
	8:  "type",
	9:  "bloom_filter_size_bytes",
	10: "bitmap_target_expr",
	11: "bitmap_filter_not_in",
	12: "opt_remote_rf",
	13: "min_max_type",
	14: "bloom_filter_size_calculated_by_ndv",
	15: "null_aware",
	16: "sync_filter_size",
}

func (p *TRuntimeFilterDesc) IsSetSrcExpr() bool {
	return p.SrcExpr != nil
}

func (p *TRuntimeFilterDesc) IsSetBloomFilterSizeBytes() bool {
	return p.BloomFilterSizeBytes != nil
}

func (p *TRuntimeFilterDesc) IsSetBitmapTargetExpr() bool {
	return p.BitmapTargetExpr != nil
}

func (p *TRuntimeFilterDesc) IsSetBitmapFilterNotIn() bool {
	return p.BitmapFilterNotIn != nil
}

func (p *TRuntimeFilterDesc) IsSetOptRemoteRf() bool {
	return p.OptRemoteRf != nil
}

func (p *TRuntimeFilterDesc) IsSetMinMaxType() bool {
	return p.MinMaxType != nil
}

func (p *TRuntimeFilterDesc) IsSetBloomFilterSizeCalculatedByNdv() bool {
	return p.BloomFilterSizeCalculatedByNdv != nil
}

func (p *TRuntimeFilterDesc) IsSetNullAware() bool {
	return p.NullAware != nil
}

func (p *TRuntimeFilterDesc) IsSetSyncFilterSize() bool {
	return p.SyncFilterSize != nil
}

func (p *TRuntimeFilterDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFilterId bool = false
	var issetSrcExpr bool = false
	var issetExprOrder bool = false
	var issetPlanIdToTargetExpr bool = false
	var issetIsBroadcastJoin bool = false
	var issetHasLocalTargets bool = false
	var issetHasRemoteTargets bool = false
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilterId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSrcExpr = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetExprOrder = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlanIdToTargetExpr = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsBroadcastJoin = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetHasLocalTargets = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetHasRemoteTargets = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFilterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSrcExpr {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetExprOrder {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPlanIdToTargetExpr {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetIsBroadcastJoin {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetHasLocalTargets {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetHasRemoteTargets {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRuntimeFilterDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TRuntimeFilterDesc[fieldId]))
}

func (p *TRuntimeFilterDesc) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FilterId = _field
	return nil
}
func (p *TRuntimeFilterDesc) ReadField2(iprot thrift.TProtocol) error {
	_field := exprs.NewTExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SrcExpr = _field
	return nil
}
func (p *TRuntimeFilterDesc) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExprOrder = _field
	return nil
}
func (p *TRuntimeFilterDesc) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TPlanNodeId]*exprs.TExpr, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.PlanIdToTargetExpr = _field
	return nil
}
func (p *TRuntimeFilterDesc) ReadField5(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsBroadcastJoin = _field
	return nil
}
func (p *TRuntimeFilterDesc) ReadField6(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HasLocalTargets = _field
	return nil
}
func (p *TRuntimeFilterDesc) ReadField7(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HasRemoteTargets = _field
	return nil
}
func (p *TRuntimeFilterDesc) ReadField8(iprot thrift.TProtocol) error {

	var _field TRuntimeFilterType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TRuntimeFilterType(v)
	}
	p.Type = _field
	return nil
}
func (p *TRuntimeFilterDesc) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BloomFilterSizeBytes = _field
	return nil
}
func (p *TRuntimeFilterDesc) ReadField10(iprot thrift.TProtocol) error {
	_field := exprs.NewTExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BitmapTargetExpr = _field
	return nil
}
func (p *TRuntimeFilterDesc) ReadField11(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BitmapFilterNotIn = _field
	return nil
}
func (p *TRuntimeFilterDesc) ReadField12(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OptRemoteRf = _field
	return nil
}
func (p *TRuntimeFilterDesc) ReadField13(iprot thrift.TProtocol) error {

	var _field *TMinMaxRuntimeFilterType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TMinMaxRuntimeFilterType(v)
		_field = &tmp
	}
	p.MinMaxType = _field
	return nil
}
func (p *TRuntimeFilterDesc) ReadField14(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BloomFilterSizeCalculatedByNdv = _field
	return nil
}
func (p *TRuntimeFilterDesc) ReadField15(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NullAware = _field
	return nil
}
func (p *TRuntimeFilterDesc) ReadField16(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SyncFilterSize = _field
	return nil
}

func (p *TRuntimeFilterDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TRuntimeFilterDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TRuntimeFilterDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filter_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.FilterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TRuntimeFilterDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("src_expr", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.SrcExpr.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TRuntimeFilterDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("expr_order", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ExprOrder); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TRuntimeFilterDesc) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("planId_to_target_expr", thrift.MAP, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.PlanIdToTargetExpr)); err != nil {
		return err
	}
	for k, v := range p.PlanIdToTargetExpr {
		if err := oprot.WriteI32(k); err != nil {
			return err
		}
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TRuntimeFilterDesc) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_broadcast_join", thrift.BOOL, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsBroadcastJoin); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TRuntimeFilterDesc) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("has_local_targets", thrift.BOOL, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.HasLocalTargets); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TRuntimeFilterDesc) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("has_remote_targets", thrift.BOOL, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.HasRemoteTargets); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TRuntimeFilterDesc) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TRuntimeFilterDesc) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetBloomFilterSizeBytes() {
		if err = oprot.WriteFieldBegin("bloom_filter_size_bytes", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BloomFilterSizeBytes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TRuntimeFilterDesc) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetBitmapTargetExpr() {
		if err = oprot.WriteFieldBegin("bitmap_target_expr", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BitmapTargetExpr.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TRuntimeFilterDesc) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetBitmapFilterNotIn() {
		if err = oprot.WriteFieldBegin("bitmap_filter_not_in", thrift.BOOL, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.BitmapFilterNotIn); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TRuntimeFilterDesc) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetOptRemoteRf() {
		if err = oprot.WriteFieldBegin("opt_remote_rf", thrift.BOOL, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.OptRemoteRf); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TRuntimeFilterDesc) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetMinMaxType() {
		if err = oprot.WriteFieldBegin("min_max_type", thrift.I32, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.MinMaxType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TRuntimeFilterDesc) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetBloomFilterSizeCalculatedByNdv() {
		if err = oprot.WriteFieldBegin("bloom_filter_size_calculated_by_ndv", thrift.BOOL, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.BloomFilterSizeCalculatedByNdv); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TRuntimeFilterDesc) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetNullAware() {
		if err = oprot.WriteFieldBegin("null_aware", thrift.BOOL, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.NullAware); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TRuntimeFilterDesc) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetSyncFilterSize() {
		if err = oprot.WriteFieldBegin("sync_filter_size", thrift.BOOL, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.SyncFilterSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TRuntimeFilterDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRuntimeFilterDesc(%+v)", *p)

}

func (p *TRuntimeFilterDesc) DeepEqual(ano *TRuntimeFilterDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FilterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SrcExpr) {
		return false
	}
	if !p.Field3DeepEqual(ano.ExprOrder) {
		return false
	}
	if !p.Field4DeepEqual(ano.PlanIdToTargetExpr) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsBroadcastJoin) {
		return false
	}
	if !p.Field6DeepEqual(ano.HasLocalTargets) {
		return false
	}
	if !p.Field7DeepEqual(ano.HasRemoteTargets) {
		return false
	}
	if !p.Field8DeepEqual(ano.Type) {
		return false
	}
	if !p.Field9DeepEqual(ano.BloomFilterSizeBytes) {
		return false
	}
	if !p.Field10DeepEqual(ano.BitmapTargetExpr) {
		return false
	}
	if !p.Field11DeepEqual(ano.BitmapFilterNotIn) {
		return false
	}
	if !p.Field12DeepEqual(ano.OptRemoteRf) {
		return false
	}
	if !p.Field13DeepEqual(ano.MinMaxType) {
		return false
	}
	if !p.Field14DeepEqual(ano.BloomFilterSizeCalculatedByNdv) {
		return false
	}
	if !p.Field15DeepEqual(ano.NullAware) {
		return false
	}
	if !p.Field16DeepEqual(ano.SyncFilterSize) {
		return false
	}
	return true
}

func (p *TRuntimeFilterDesc) Field1DeepEqual(src int32) bool {

	if p.FilterId != src {
		return false
	}
	return true
}
func (p *TRuntimeFilterDesc) Field2DeepEqual(src *exprs.TExpr) bool {

	if !p.SrcExpr.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TRuntimeFilterDesc) Field3DeepEqual(src int32) bool {

	if p.ExprOrder != src {
		return false
	}
	return true
}
func (p *TRuntimeFilterDesc) Field4DeepEqual(src map[types.TPlanNodeId]*exprs.TExpr) bool {

	if len(p.PlanIdToTargetExpr) != len(src) {
		return false
	}
	for k, v := range p.PlanIdToTargetExpr {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TRuntimeFilterDesc) Field5DeepEqual(src bool) bool {

	if p.IsBroadcastJoin != src {
		return false
	}
	return true
}
func (p *TRuntimeFilterDesc) Field6DeepEqual(src bool) bool {

	if p.HasLocalTargets != src {
		return false
	}
	return true
}
func (p *TRuntimeFilterDesc) Field7DeepEqual(src bool) bool {

	if p.HasRemoteTargets != src {
		return false
	}
	return true
}
func (p *TRuntimeFilterDesc) Field8DeepEqual(src TRuntimeFilterType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *TRuntimeFilterDesc) Field9DeepEqual(src *int64) bool {

	if p.BloomFilterSizeBytes == src {
		return true
	} else if p.BloomFilterSizeBytes == nil || src == nil {
		return false
	}
	if *p.BloomFilterSizeBytes != *src {
		return false
	}
	return true
}
func (p *TRuntimeFilterDesc) Field10DeepEqual(src *exprs.TExpr) bool {

	if !p.BitmapTargetExpr.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TRuntimeFilterDesc) Field11DeepEqual(src *bool) bool {

	if p.BitmapFilterNotIn == src {
		return true
	} else if p.BitmapFilterNotIn == nil || src == nil {
		return false
	}
	if *p.BitmapFilterNotIn != *src {
		return false
	}
	return true
}
func (p *TRuntimeFilterDesc) Field12DeepEqual(src *bool) bool {

	if p.OptRemoteRf == src {
		return true
	} else if p.OptRemoteRf == nil || src == nil {
		return false
	}
	if *p.OptRemoteRf != *src {
		return false
	}
	return true
}
func (p *TRuntimeFilterDesc) Field13DeepEqual(src *TMinMaxRuntimeFilterType) bool {

	if p.MinMaxType == src {
		return true
	} else if p.MinMaxType == nil || src == nil {
		return false
	}
	if *p.MinMaxType != *src {
		return false
	}
	return true
}
func (p *TRuntimeFilterDesc) Field14DeepEqual(src *bool) bool {

	if p.BloomFilterSizeCalculatedByNdv == src {
		return true
	} else if p.BloomFilterSizeCalculatedByNdv == nil || src == nil {
		return false
	}
	if *p.BloomFilterSizeCalculatedByNdv != *src {
		return false
	}
	return true
}
func (p *TRuntimeFilterDesc) Field15DeepEqual(src *bool) bool {

	if p.NullAware == src {
		return true
	} else if p.NullAware == nil || src == nil {
		return false
	}
	if *p.NullAware != *src {
		return false
	}
	return true
}
func (p *TRuntimeFilterDesc) Field16DeepEqual(src *bool) bool {

	if p.SyncFilterSize == src {
		return true
	} else if p.SyncFilterSize == nil || src == nil {
		return false
	}
	if *p.SyncFilterSize != *src {
		return false
	}
	return true
}

type TDataGenScanNode struct {
	TupleId  *types.TTupleId       `thrift:"tuple_id,1,optional" frugal:"1,optional,i32" json:"tuple_id,omitempty"`
	FuncName *TDataGenFunctionName `thrift:"func_name,2,optional" frugal:"2,optional,TDataGenFunctionName" json:"func_name,omitempty"`
}

func NewTDataGenScanNode() *TDataGenScanNode {
	return &TDataGenScanNode{}
}

func (p *TDataGenScanNode) InitDefault() {
}

var TDataGenScanNode_TupleId_DEFAULT types.TTupleId

func (p *TDataGenScanNode) GetTupleId() (v types.TTupleId) {
	if !p.IsSetTupleId() {
		return TDataGenScanNode_TupleId_DEFAULT
	}
	return *p.TupleId
}

var TDataGenScanNode_FuncName_DEFAULT TDataGenFunctionName

func (p *TDataGenScanNode) GetFuncName() (v TDataGenFunctionName) {
	if !p.IsSetFuncName() {
		return TDataGenScanNode_FuncName_DEFAULT
	}
	return *p.FuncName
}
func (p *TDataGenScanNode) SetTupleId(val *types.TTupleId) {
	p.TupleId = val
}
func (p *TDataGenScanNode) SetFuncName(val *TDataGenFunctionName) {
	p.FuncName = val
}

var fieldIDToName_TDataGenScanNode = map[int16]string{
	1: "tuple_id",
	2: "func_name",
}

func (p *TDataGenScanNode) IsSetTupleId() bool {
	return p.TupleId != nil
}

func (p *TDataGenScanNode) IsSetFuncName() bool {
	return p.FuncName != nil
}

func (p *TDataGenScanNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDataGenScanNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TDataGenScanNode) ReadField1(iprot thrift.TProtocol) error {

	var _field *types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TupleId = _field
	return nil
}
func (p *TDataGenScanNode) ReadField2(iprot thrift.TProtocol) error {

	var _field *TDataGenFunctionName
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TDataGenFunctionName(v)
		_field = &tmp
	}
	p.FuncName = _field
	return nil
}

func (p *TDataGenScanNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDataGenScanNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDataGenScanNode) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTupleId() {
		if err = oprot.WriteFieldBegin("tuple_id", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TupleId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDataGenScanNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFuncName() {
		if err = oprot.WriteFieldBegin("func_name", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.FuncName)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TDataGenScanNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDataGenScanNode(%+v)", *p)

}

func (p *TDataGenScanNode) DeepEqual(ano *TDataGenScanNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TupleId) {
		return false
	}
	if !p.Field2DeepEqual(ano.FuncName) {
		return false
	}
	return true
}

func (p *TDataGenScanNode) Field1DeepEqual(src *types.TTupleId) bool {

	if p.TupleId == src {
		return true
	} else if p.TupleId == nil || src == nil {
		return false
	}
	if *p.TupleId != *src {
		return false
	}
	return true
}
func (p *TDataGenScanNode) Field2DeepEqual(src *TDataGenFunctionName) bool {

	if p.FuncName == src {
		return true
	} else if p.FuncName == nil || src == nil {
		return false
	}
	if *p.FuncName != *src {
		return false
	}
	return true
}

type TGroupCommitScanNode struct {
	TableId *int64 `thrift:"table_id,1,optional" frugal:"1,optional,i64" json:"table_id,omitempty"`
}

func NewTGroupCommitScanNode() *TGroupCommitScanNode {
	return &TGroupCommitScanNode{}
}

func (p *TGroupCommitScanNode) InitDefault() {
}

var TGroupCommitScanNode_TableId_DEFAULT int64

func (p *TGroupCommitScanNode) GetTableId() (v int64) {
	if !p.IsSetTableId() {
		return TGroupCommitScanNode_TableId_DEFAULT
	}
	return *p.TableId
}
func (p *TGroupCommitScanNode) SetTableId(val *int64) {
	p.TableId = val
}

var fieldIDToName_TGroupCommitScanNode = map[int16]string{
	1: "table_id",
}

func (p *TGroupCommitScanNode) IsSetTableId() bool {
	return p.TableId != nil
}

func (p *TGroupCommitScanNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGroupCommitScanNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGroupCommitScanNode) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableId = _field
	return nil
}

func (p *TGroupCommitScanNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGroupCommitScanNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGroupCommitScanNode) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err = oprot.WriteFieldBegin("table_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGroupCommitScanNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGroupCommitScanNode(%+v)", *p)

}

func (p *TGroupCommitScanNode) DeepEqual(ano *TGroupCommitScanNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TableId) {
		return false
	}
	return true
}

func (p *TGroupCommitScanNode) Field1DeepEqual(src *int64) bool {

	if p.TableId == src {
		return true
	} else if p.TableId == nil || src == nil {
		return false
	}
	if *p.TableId != *src {
		return false
	}
	return true
}

type TPlanNode struct {
	NodeId                        types.TPlanNodeId        `thrift:"node_id,1,required" frugal:"1,required,i32" json:"node_id"`
	NodeType                      TPlanNodeType            `thrift:"node_type,2,required" frugal:"2,required,TPlanNodeType" json:"node_type"`
	NumChildren                   int32                    `thrift:"num_children,3,required" frugal:"3,required,i32" json:"num_children"`
	Limit                         int64                    `thrift:"limit,4,required" frugal:"4,required,i64" json:"limit"`
	RowTuples                     []types.TTupleId         `thrift:"row_tuples,5,required" frugal:"5,required,list<i32>" json:"row_tuples"`
	NullableTuples                []bool                   `thrift:"nullable_tuples,6,required" frugal:"6,required,list<bool>" json:"nullable_tuples"`
	Conjuncts                     []*exprs.TExpr           `thrift:"conjuncts,7,optional" frugal:"7,optional,list<exprs.TExpr>" json:"conjuncts,omitempty"`
	CompactData                   bool                     `thrift:"compact_data,8,required" frugal:"8,required,bool" json:"compact_data"`
	HashJoinNode                  *THashJoinNode           `thrift:"hash_join_node,11,optional" frugal:"11,optional,THashJoinNode" json:"hash_join_node,omitempty"`
	AggNode                       *TAggregationNode        `thrift:"agg_node,12,optional" frugal:"12,optional,TAggregationNode" json:"agg_node,omitempty"`
	SortNode                      *TSortNode               `thrift:"sort_node,13,optional" frugal:"13,optional,TSortNode" json:"sort_node,omitempty"`
	MergeNode                     *TMergeNode              `thrift:"merge_node,14,optional" frugal:"14,optional,TMergeNode" json:"merge_node,omitempty"`
	ExchangeNode                  *TExchangeNode           `thrift:"exchange_node,15,optional" frugal:"15,optional,TExchangeNode" json:"exchange_node,omitempty"`
	MysqlScanNode                 *TMySQLScanNode          `thrift:"mysql_scan_node,17,optional" frugal:"17,optional,TMySQLScanNode" json:"mysql_scan_node,omitempty"`
	OlapScanNode                  *TOlapScanNode           `thrift:"olap_scan_node,18,optional" frugal:"18,optional,TOlapScanNode" json:"olap_scan_node,omitempty"`
	CsvScanNode                   *TCsvScanNode            `thrift:"csv_scan_node,19,optional" frugal:"19,optional,TCsvScanNode" json:"csv_scan_node,omitempty"`
	BrokerScanNode                *TBrokerScanNode         `thrift:"broker_scan_node,20,optional" frugal:"20,optional,TBrokerScanNode" json:"broker_scan_node,omitempty"`
	PreAggNode                    *TPreAggregationNode     `thrift:"pre_agg_node,21,optional" frugal:"21,optional,TPreAggregationNode" json:"pre_agg_node,omitempty"`
	SchemaScanNode                *TSchemaScanNode         `thrift:"schema_scan_node,22,optional" frugal:"22,optional,TSchemaScanNode" json:"schema_scan_node,omitempty"`
	MergeJoinNode                 *TMergeJoinNode          `thrift:"merge_join_node,23,optional" frugal:"23,optional,TMergeJoinNode" json:"merge_join_node,omitempty"`
	MetaScanNode                  *TMetaScanNode           `thrift:"meta_scan_node,24,optional" frugal:"24,optional,TMetaScanNode" json:"meta_scan_node,omitempty"`
	AnalyticNode                  *TAnalyticNode           `thrift:"analytic_node,25,optional" frugal:"25,optional,TAnalyticNode" json:"analytic_node,omitempty"`
	OlapRewriteNode               *TOlapRewriteNode        `thrift:"olap_rewrite_node,26,optional" frugal:"26,optional,TOlapRewriteNode" json:"olap_rewrite_node,omitempty"`
	UnionNode                     *TUnionNode              `thrift:"union_node,28,optional" frugal:"28,optional,TUnionNode" json:"union_node,omitempty"`
	ResourceProfile               *TBackendResourceProfile `thrift:"resource_profile,29,optional" frugal:"29,optional,TBackendResourceProfile" json:"resource_profile,omitempty"`
	EsScanNode                    *TEsScanNode             `thrift:"es_scan_node,30,optional" frugal:"30,optional,TEsScanNode" json:"es_scan_node,omitempty"`
	RepeatNode                    *TRepeatNode             `thrift:"repeat_node,31,optional" frugal:"31,optional,TRepeatNode" json:"repeat_node,omitempty"`
	AssertNumRowsNode             *TAssertNumRowsNode      `thrift:"assert_num_rows_node,32,optional" frugal:"32,optional,TAssertNumRowsNode" json:"assert_num_rows_node,omitempty"`
	IntersectNode                 *TIntersectNode          `thrift:"intersect_node,33,optional" frugal:"33,optional,TIntersectNode" json:"intersect_node,omitempty"`
	ExceptNode                    *TExceptNode             `thrift:"except_node,34,optional" frugal:"34,optional,TExceptNode" json:"except_node,omitempty"`
	OdbcScanNode                  *TOdbcScanNode           `thrift:"odbc_scan_node,35,optional" frugal:"35,optional,TOdbcScanNode" json:"odbc_scan_node,omitempty"`
	RuntimeFilters                []*TRuntimeFilterDesc    `thrift:"runtime_filters,36,optional" frugal:"36,optional,list<TRuntimeFilterDesc>" json:"runtime_filters,omitempty"`
	GroupCommitScanNode           *TGroupCommitScanNode    `thrift:"group_commit_scan_node,37,optional" frugal:"37,optional,TGroupCommitScanNode" json:"group_commit_scan_node,omitempty"`
	Vconjunct                     *exprs.TExpr             `thrift:"vconjunct,40,optional" frugal:"40,optional,exprs.TExpr" json:"vconjunct,omitempty"`
	TableFunctionNode             *TTableFunctionNode      `thrift:"table_function_node,41,optional" frugal:"41,optional,TTableFunctionNode" json:"table_function_node,omitempty"`
	OutputSlotIds                 []types.TSlotId          `thrift:"output_slot_ids,42,optional" frugal:"42,optional,list<i32>" json:"output_slot_ids,omitempty"`
	DataGenScanNode               *TDataGenScanNode        `thrift:"data_gen_scan_node,43,optional" frugal:"43,optional,TDataGenScanNode" json:"data_gen_scan_node,omitempty"`
	FileScanNode                  *TFileScanNode           `thrift:"file_scan_node,44,optional" frugal:"44,optional,TFileScanNode" json:"file_scan_node,omitempty"`
	JdbcScanNode                  *TJdbcScanNode           `thrift:"jdbc_scan_node,45,optional" frugal:"45,optional,TJdbcScanNode" json:"jdbc_scan_node,omitempty"`
	NestedLoopJoinNode            *TNestedLoopJoinNode     `thrift:"nested_loop_join_node,46,optional" frugal:"46,optional,TNestedLoopJoinNode" json:"nested_loop_join_node,omitempty"`
	TestExternalScanNode          *TTestExternalScanNode   `thrift:"test_external_scan_node,47,optional" frugal:"47,optional,TTestExternalScanNode" json:"test_external_scan_node,omitempty"`
	PushDownAggTypeOpt            *TPushAggOp              `thrift:"push_down_agg_type_opt,48,optional" frugal:"48,optional,TPushAggOp" json:"push_down_agg_type_opt,omitempty"`
	PushDownCount                 *int64                   `thrift:"push_down_count,49,optional" frugal:"49,optional,i64" json:"push_down_count,omitempty"`
	DistributeExprLists           [][]*exprs.TExpr         `thrift:"distribute_expr_lists,50,optional" frugal:"50,optional,list<list<exprs.TExpr>>" json:"distribute_expr_lists,omitempty"`
	Projections                   []*exprs.TExpr           `thrift:"projections,101,optional" frugal:"101,optional,list<exprs.TExpr>" json:"projections,omitempty"`
	OutputTupleId                 *types.TTupleId          `thrift:"output_tuple_id,102,optional" frugal:"102,optional,i32" json:"output_tuple_id,omitempty"`
	PartitionSortNode             *TPartitionSortNode      `thrift:"partition_sort_node,103,optional" frugal:"103,optional,TPartitionSortNode" json:"partition_sort_node,omitempty"`
	IntermediateProjectionsList   [][]*exprs.TExpr         `thrift:"intermediate_projections_list,104,optional" frugal:"104,optional,list<list<exprs.TExpr>>" json:"intermediate_projections_list,omitempty"`
	IntermediateOutputTupleIdList []types.TTupleId         `thrift:"intermediate_output_tuple_id_list,105,optional" frugal:"105,optional,list<i32>" json:"intermediate_output_tuple_id_list,omitempty"`
	TopnFilterSourceNodeIds       []int32                  `thrift:"topn_filter_source_node_ids,106,optional" frugal:"106,optional,list<i32>" json:"topn_filter_source_node_ids,omitempty"`
	NereidsId                     *int32                   `thrift:"nereids_id,107,optional" frugal:"107,optional,i32" json:"nereids_id,omitempty"`
}

func NewTPlanNode() *TPlanNode {
	return &TPlanNode{}
}

func (p *TPlanNode) InitDefault() {
}

func (p *TPlanNode) GetNodeId() (v types.TPlanNodeId) {
	return p.NodeId
}

func (p *TPlanNode) GetNodeType() (v TPlanNodeType) {
	return p.NodeType
}

func (p *TPlanNode) GetNumChildren() (v int32) {
	return p.NumChildren
}

func (p *TPlanNode) GetLimit() (v int64) {
	return p.Limit
}

func (p *TPlanNode) GetRowTuples() (v []types.TTupleId) {
	return p.RowTuples
}

func (p *TPlanNode) GetNullableTuples() (v []bool) {
	return p.NullableTuples
}

var TPlanNode_Conjuncts_DEFAULT []*exprs.TExpr

func (p *TPlanNode) GetConjuncts() (v []*exprs.TExpr) {
	if !p.IsSetConjuncts() {
		return TPlanNode_Conjuncts_DEFAULT
	}
	return p.Conjuncts
}

func (p *TPlanNode) GetCompactData() (v bool) {
	return p.CompactData
}

var TPlanNode_HashJoinNode_DEFAULT *THashJoinNode

func (p *TPlanNode) GetHashJoinNode() (v *THashJoinNode) {
	if !p.IsSetHashJoinNode() {
		return TPlanNode_HashJoinNode_DEFAULT
	}
	return p.HashJoinNode
}

var TPlanNode_AggNode_DEFAULT *TAggregationNode

func (p *TPlanNode) GetAggNode() (v *TAggregationNode) {
	if !p.IsSetAggNode() {
		return TPlanNode_AggNode_DEFAULT
	}
	return p.AggNode
}

var TPlanNode_SortNode_DEFAULT *TSortNode

func (p *TPlanNode) GetSortNode() (v *TSortNode) {
	if !p.IsSetSortNode() {
		return TPlanNode_SortNode_DEFAULT
	}
	return p.SortNode
}

var TPlanNode_MergeNode_DEFAULT *TMergeNode

func (p *TPlanNode) GetMergeNode() (v *TMergeNode) {
	if !p.IsSetMergeNode() {
		return TPlanNode_MergeNode_DEFAULT
	}
	return p.MergeNode
}

var TPlanNode_ExchangeNode_DEFAULT *TExchangeNode

func (p *TPlanNode) GetExchangeNode() (v *TExchangeNode) {
	if !p.IsSetExchangeNode() {
		return TPlanNode_ExchangeNode_DEFAULT
	}
	return p.ExchangeNode
}

var TPlanNode_MysqlScanNode_DEFAULT *TMySQLScanNode

func (p *TPlanNode) GetMysqlScanNode() (v *TMySQLScanNode) {
	if !p.IsSetMysqlScanNode() {
		return TPlanNode_MysqlScanNode_DEFAULT
	}
	return p.MysqlScanNode
}

var TPlanNode_OlapScanNode_DEFAULT *TOlapScanNode

func (p *TPlanNode) GetOlapScanNode() (v *TOlapScanNode) {
	if !p.IsSetOlapScanNode() {
		return TPlanNode_OlapScanNode_DEFAULT
	}
	return p.OlapScanNode
}

var TPlanNode_CsvScanNode_DEFAULT *TCsvScanNode

func (p *TPlanNode) GetCsvScanNode() (v *TCsvScanNode) {
	if !p.IsSetCsvScanNode() {
		return TPlanNode_CsvScanNode_DEFAULT
	}
	return p.CsvScanNode
}

var TPlanNode_BrokerScanNode_DEFAULT *TBrokerScanNode

func (p *TPlanNode) GetBrokerScanNode() (v *TBrokerScanNode) {
	if !p.IsSetBrokerScanNode() {
		return TPlanNode_BrokerScanNode_DEFAULT
	}
	return p.BrokerScanNode
}

var TPlanNode_PreAggNode_DEFAULT *TPreAggregationNode

func (p *TPlanNode) GetPreAggNode() (v *TPreAggregationNode) {
	if !p.IsSetPreAggNode() {
		return TPlanNode_PreAggNode_DEFAULT
	}
	return p.PreAggNode
}

var TPlanNode_SchemaScanNode_DEFAULT *TSchemaScanNode

func (p *TPlanNode) GetSchemaScanNode() (v *TSchemaScanNode) {
	if !p.IsSetSchemaScanNode() {
		return TPlanNode_SchemaScanNode_DEFAULT
	}
	return p.SchemaScanNode
}

var TPlanNode_MergeJoinNode_DEFAULT *TMergeJoinNode

func (p *TPlanNode) GetMergeJoinNode() (v *TMergeJoinNode) {
	if !p.IsSetMergeJoinNode() {
		return TPlanNode_MergeJoinNode_DEFAULT
	}
	return p.MergeJoinNode
}

var TPlanNode_MetaScanNode_DEFAULT *TMetaScanNode

func (p *TPlanNode) GetMetaScanNode() (v *TMetaScanNode) {
	if !p.IsSetMetaScanNode() {
		return TPlanNode_MetaScanNode_DEFAULT
	}
	return p.MetaScanNode
}

var TPlanNode_AnalyticNode_DEFAULT *TAnalyticNode

func (p *TPlanNode) GetAnalyticNode() (v *TAnalyticNode) {
	if !p.IsSetAnalyticNode() {
		return TPlanNode_AnalyticNode_DEFAULT
	}
	return p.AnalyticNode
}

var TPlanNode_OlapRewriteNode_DEFAULT *TOlapRewriteNode

func (p *TPlanNode) GetOlapRewriteNode() (v *TOlapRewriteNode) {
	if !p.IsSetOlapRewriteNode() {
		return TPlanNode_OlapRewriteNode_DEFAULT
	}
	return p.OlapRewriteNode
}

var TPlanNode_UnionNode_DEFAULT *TUnionNode

func (p *TPlanNode) GetUnionNode() (v *TUnionNode) {
	if !p.IsSetUnionNode() {
		return TPlanNode_UnionNode_DEFAULT
	}
	return p.UnionNode
}

var TPlanNode_ResourceProfile_DEFAULT *TBackendResourceProfile

func (p *TPlanNode) GetResourceProfile() (v *TBackendResourceProfile) {
	if !p.IsSetResourceProfile() {
		return TPlanNode_ResourceProfile_DEFAULT
	}
	return p.ResourceProfile
}

var TPlanNode_EsScanNode_DEFAULT *TEsScanNode

func (p *TPlanNode) GetEsScanNode() (v *TEsScanNode) {
	if !p.IsSetEsScanNode() {
		return TPlanNode_EsScanNode_DEFAULT
	}
	return p.EsScanNode
}

var TPlanNode_RepeatNode_DEFAULT *TRepeatNode

func (p *TPlanNode) GetRepeatNode() (v *TRepeatNode) {
	if !p.IsSetRepeatNode() {
		return TPlanNode_RepeatNode_DEFAULT
	}
	return p.RepeatNode
}

var TPlanNode_AssertNumRowsNode_DEFAULT *TAssertNumRowsNode

func (p *TPlanNode) GetAssertNumRowsNode() (v *TAssertNumRowsNode) {
	if !p.IsSetAssertNumRowsNode() {
		return TPlanNode_AssertNumRowsNode_DEFAULT
	}
	return p.AssertNumRowsNode
}

var TPlanNode_IntersectNode_DEFAULT *TIntersectNode

func (p *TPlanNode) GetIntersectNode() (v *TIntersectNode) {
	if !p.IsSetIntersectNode() {
		return TPlanNode_IntersectNode_DEFAULT
	}
	return p.IntersectNode
}

var TPlanNode_ExceptNode_DEFAULT *TExceptNode

func (p *TPlanNode) GetExceptNode() (v *TExceptNode) {
	if !p.IsSetExceptNode() {
		return TPlanNode_ExceptNode_DEFAULT
	}
	return p.ExceptNode
}

var TPlanNode_OdbcScanNode_DEFAULT *TOdbcScanNode

func (p *TPlanNode) GetOdbcScanNode() (v *TOdbcScanNode) {
	if !p.IsSetOdbcScanNode() {
		return TPlanNode_OdbcScanNode_DEFAULT
	}
	return p.OdbcScanNode
}

var TPlanNode_RuntimeFilters_DEFAULT []*TRuntimeFilterDesc

func (p *TPlanNode) GetRuntimeFilters() (v []*TRuntimeFilterDesc) {
	if !p.IsSetRuntimeFilters() {
		return TPlanNode_RuntimeFilters_DEFAULT
	}
	return p.RuntimeFilters
}

var TPlanNode_GroupCommitScanNode_DEFAULT *TGroupCommitScanNode

func (p *TPlanNode) GetGroupCommitScanNode() (v *TGroupCommitScanNode) {
	if !p.IsSetGroupCommitScanNode() {
		return TPlanNode_GroupCommitScanNode_DEFAULT
	}
	return p.GroupCommitScanNode
}

var TPlanNode_Vconjunct_DEFAULT *exprs.TExpr

func (p *TPlanNode) GetVconjunct() (v *exprs.TExpr) {
	if !p.IsSetVconjunct() {
		return TPlanNode_Vconjunct_DEFAULT
	}
	return p.Vconjunct
}

var TPlanNode_TableFunctionNode_DEFAULT *TTableFunctionNode

func (p *TPlanNode) GetTableFunctionNode() (v *TTableFunctionNode) {
	if !p.IsSetTableFunctionNode() {
		return TPlanNode_TableFunctionNode_DEFAULT
	}
	return p.TableFunctionNode
}

var TPlanNode_OutputSlotIds_DEFAULT []types.TSlotId

func (p *TPlanNode) GetOutputSlotIds() (v []types.TSlotId) {
	if !p.IsSetOutputSlotIds() {
		return TPlanNode_OutputSlotIds_DEFAULT
	}
	return p.OutputSlotIds
}

var TPlanNode_DataGenScanNode_DEFAULT *TDataGenScanNode

func (p *TPlanNode) GetDataGenScanNode() (v *TDataGenScanNode) {
	if !p.IsSetDataGenScanNode() {
		return TPlanNode_DataGenScanNode_DEFAULT
	}
	return p.DataGenScanNode
}

var TPlanNode_FileScanNode_DEFAULT *TFileScanNode

func (p *TPlanNode) GetFileScanNode() (v *TFileScanNode) {
	if !p.IsSetFileScanNode() {
		return TPlanNode_FileScanNode_DEFAULT
	}
	return p.FileScanNode
}

var TPlanNode_JdbcScanNode_DEFAULT *TJdbcScanNode

func (p *TPlanNode) GetJdbcScanNode() (v *TJdbcScanNode) {
	if !p.IsSetJdbcScanNode() {
		return TPlanNode_JdbcScanNode_DEFAULT
	}
	return p.JdbcScanNode
}

var TPlanNode_NestedLoopJoinNode_DEFAULT *TNestedLoopJoinNode

func (p *TPlanNode) GetNestedLoopJoinNode() (v *TNestedLoopJoinNode) {
	if !p.IsSetNestedLoopJoinNode() {
		return TPlanNode_NestedLoopJoinNode_DEFAULT
	}
	return p.NestedLoopJoinNode
}

var TPlanNode_TestExternalScanNode_DEFAULT *TTestExternalScanNode

func (p *TPlanNode) GetTestExternalScanNode() (v *TTestExternalScanNode) {
	if !p.IsSetTestExternalScanNode() {
		return TPlanNode_TestExternalScanNode_DEFAULT
	}
	return p.TestExternalScanNode
}

var TPlanNode_PushDownAggTypeOpt_DEFAULT TPushAggOp

func (p *TPlanNode) GetPushDownAggTypeOpt() (v TPushAggOp) {
	if !p.IsSetPushDownAggTypeOpt() {
		return TPlanNode_PushDownAggTypeOpt_DEFAULT
	}
	return *p.PushDownAggTypeOpt
}

var TPlanNode_PushDownCount_DEFAULT int64

func (p *TPlanNode) GetPushDownCount() (v int64) {
	if !p.IsSetPushDownCount() {
		return TPlanNode_PushDownCount_DEFAULT
	}
	return *p.PushDownCount
}

var TPlanNode_DistributeExprLists_DEFAULT [][]*exprs.TExpr

func (p *TPlanNode) GetDistributeExprLists() (v [][]*exprs.TExpr) {
	if !p.IsSetDistributeExprLists() {
		return TPlanNode_DistributeExprLists_DEFAULT
	}
	return p.DistributeExprLists
}

var TPlanNode_Projections_DEFAULT []*exprs.TExpr

func (p *TPlanNode) GetProjections() (v []*exprs.TExpr) {
	if !p.IsSetProjections() {
		return TPlanNode_Projections_DEFAULT
	}
	return p.Projections
}

var TPlanNode_OutputTupleId_DEFAULT types.TTupleId

func (p *TPlanNode) GetOutputTupleId() (v types.TTupleId) {
	if !p.IsSetOutputTupleId() {
		return TPlanNode_OutputTupleId_DEFAULT
	}
	return *p.OutputTupleId
}

var TPlanNode_PartitionSortNode_DEFAULT *TPartitionSortNode

func (p *TPlanNode) GetPartitionSortNode() (v *TPartitionSortNode) {
	if !p.IsSetPartitionSortNode() {
		return TPlanNode_PartitionSortNode_DEFAULT
	}
	return p.PartitionSortNode
}

var TPlanNode_IntermediateProjectionsList_DEFAULT [][]*exprs.TExpr

func (p *TPlanNode) GetIntermediateProjectionsList() (v [][]*exprs.TExpr) {
	if !p.IsSetIntermediateProjectionsList() {
		return TPlanNode_IntermediateProjectionsList_DEFAULT
	}
	return p.IntermediateProjectionsList
}

var TPlanNode_IntermediateOutputTupleIdList_DEFAULT []types.TTupleId

func (p *TPlanNode) GetIntermediateOutputTupleIdList() (v []types.TTupleId) {
	if !p.IsSetIntermediateOutputTupleIdList() {
		return TPlanNode_IntermediateOutputTupleIdList_DEFAULT
	}
	return p.IntermediateOutputTupleIdList
}

var TPlanNode_TopnFilterSourceNodeIds_DEFAULT []int32

func (p *TPlanNode) GetTopnFilterSourceNodeIds() (v []int32) {
	if !p.IsSetTopnFilterSourceNodeIds() {
		return TPlanNode_TopnFilterSourceNodeIds_DEFAULT
	}
	return p.TopnFilterSourceNodeIds
}

var TPlanNode_NereidsId_DEFAULT int32

func (p *TPlanNode) GetNereidsId() (v int32) {
	if !p.IsSetNereidsId() {
		return TPlanNode_NereidsId_DEFAULT
	}
	return *p.NereidsId
}
func (p *TPlanNode) SetNodeId(val types.TPlanNodeId) {
	p.NodeId = val
}
func (p *TPlanNode) SetNodeType(val TPlanNodeType) {
	p.NodeType = val
}
func (p *TPlanNode) SetNumChildren(val int32) {
	p.NumChildren = val
}
func (p *TPlanNode) SetLimit(val int64) {
	p.Limit = val
}
func (p *TPlanNode) SetRowTuples(val []types.TTupleId) {
	p.RowTuples = val
}
func (p *TPlanNode) SetNullableTuples(val []bool) {
	p.NullableTuples = val
}
func (p *TPlanNode) SetConjuncts(val []*exprs.TExpr) {
	p.Conjuncts = val
}
func (p *TPlanNode) SetCompactData(val bool) {
	p.CompactData = val
}
func (p *TPlanNode) SetHashJoinNode(val *THashJoinNode) {
	p.HashJoinNode = val
}
func (p *TPlanNode) SetAggNode(val *TAggregationNode) {
	p.AggNode = val
}
func (p *TPlanNode) SetSortNode(val *TSortNode) {
	p.SortNode = val
}
func (p *TPlanNode) SetMergeNode(val *TMergeNode) {
	p.MergeNode = val
}
func (p *TPlanNode) SetExchangeNode(val *TExchangeNode) {
	p.ExchangeNode = val
}
func (p *TPlanNode) SetMysqlScanNode(val *TMySQLScanNode) {
	p.MysqlScanNode = val
}
func (p *TPlanNode) SetOlapScanNode(val *TOlapScanNode) {
	p.OlapScanNode = val
}
func (p *TPlanNode) SetCsvScanNode(val *TCsvScanNode) {
	p.CsvScanNode = val
}
func (p *TPlanNode) SetBrokerScanNode(val *TBrokerScanNode) {
	p.BrokerScanNode = val
}
func (p *TPlanNode) SetPreAggNode(val *TPreAggregationNode) {
	p.PreAggNode = val
}
func (p *TPlanNode) SetSchemaScanNode(val *TSchemaScanNode) {
	p.SchemaScanNode = val
}
func (p *TPlanNode) SetMergeJoinNode(val *TMergeJoinNode) {
	p.MergeJoinNode = val
}
func (p *TPlanNode) SetMetaScanNode(val *TMetaScanNode) {
	p.MetaScanNode = val
}
func (p *TPlanNode) SetAnalyticNode(val *TAnalyticNode) {
	p.AnalyticNode = val
}
func (p *TPlanNode) SetOlapRewriteNode(val *TOlapRewriteNode) {
	p.OlapRewriteNode = val
}
func (p *TPlanNode) SetUnionNode(val *TUnionNode) {
	p.UnionNode = val
}
func (p *TPlanNode) SetResourceProfile(val *TBackendResourceProfile) {
	p.ResourceProfile = val
}
func (p *TPlanNode) SetEsScanNode(val *TEsScanNode) {
	p.EsScanNode = val
}
func (p *TPlanNode) SetRepeatNode(val *TRepeatNode) {
	p.RepeatNode = val
}
func (p *TPlanNode) SetAssertNumRowsNode(val *TAssertNumRowsNode) {
	p.AssertNumRowsNode = val
}
func (p *TPlanNode) SetIntersectNode(val *TIntersectNode) {
	p.IntersectNode = val
}
func (p *TPlanNode) SetExceptNode(val *TExceptNode) {
	p.ExceptNode = val
}
func (p *TPlanNode) SetOdbcScanNode(val *TOdbcScanNode) {
	p.OdbcScanNode = val
}
func (p *TPlanNode) SetRuntimeFilters(val []*TRuntimeFilterDesc) {
	p.RuntimeFilters = val
}
func (p *TPlanNode) SetGroupCommitScanNode(val *TGroupCommitScanNode) {
	p.GroupCommitScanNode = val
}
func (p *TPlanNode) SetVconjunct(val *exprs.TExpr) {
	p.Vconjunct = val
}
func (p *TPlanNode) SetTableFunctionNode(val *TTableFunctionNode) {
	p.TableFunctionNode = val
}
func (p *TPlanNode) SetOutputSlotIds(val []types.TSlotId) {
	p.OutputSlotIds = val
}
func (p *TPlanNode) SetDataGenScanNode(val *TDataGenScanNode) {
	p.DataGenScanNode = val
}
func (p *TPlanNode) SetFileScanNode(val *TFileScanNode) {
	p.FileScanNode = val
}
func (p *TPlanNode) SetJdbcScanNode(val *TJdbcScanNode) {
	p.JdbcScanNode = val
}
func (p *TPlanNode) SetNestedLoopJoinNode(val *TNestedLoopJoinNode) {
	p.NestedLoopJoinNode = val
}
func (p *TPlanNode) SetTestExternalScanNode(val *TTestExternalScanNode) {
	p.TestExternalScanNode = val
}
func (p *TPlanNode) SetPushDownAggTypeOpt(val *TPushAggOp) {
	p.PushDownAggTypeOpt = val
}
func (p *TPlanNode) SetPushDownCount(val *int64) {
	p.PushDownCount = val
}
func (p *TPlanNode) SetDistributeExprLists(val [][]*exprs.TExpr) {
	p.DistributeExprLists = val
}
func (p *TPlanNode) SetProjections(val []*exprs.TExpr) {
	p.Projections = val
}
func (p *TPlanNode) SetOutputTupleId(val *types.TTupleId) {
	p.OutputTupleId = val
}
func (p *TPlanNode) SetPartitionSortNode(val *TPartitionSortNode) {
	p.PartitionSortNode = val
}
func (p *TPlanNode) SetIntermediateProjectionsList(val [][]*exprs.TExpr) {
	p.IntermediateProjectionsList = val
}
func (p *TPlanNode) SetIntermediateOutputTupleIdList(val []types.TTupleId) {
	p.IntermediateOutputTupleIdList = val
}
func (p *TPlanNode) SetTopnFilterSourceNodeIds(val []int32) {
	p.TopnFilterSourceNodeIds = val
}
func (p *TPlanNode) SetNereidsId(val *int32) {
	p.NereidsId = val
}

var fieldIDToName_TPlanNode = map[int16]string{
	1:   "node_id",
	2:   "node_type",
	3:   "num_children",
	4:   "limit",
	5:   "row_tuples",
	6:   "nullable_tuples",
	7:   "conjuncts",
	8:   "compact_data",
	11:  "hash_join_node",
	12:  "agg_node",
	13:  "sort_node",
	14:  "merge_node",
	15:  "exchange_node",
	17:  "mysql_scan_node",
	18:  "olap_scan_node",
	19:  "csv_scan_node",
	20:  "broker_scan_node",
	21:  "pre_agg_node",
	22:  "schema_scan_node",
	23:  "merge_join_node",
	24:  "meta_scan_node",
	25:  "analytic_node",
	26:  "olap_rewrite_node",
	28:  "union_node",
	29:  "resource_profile",
	30:  "es_scan_node",
	31:  "repeat_node",
	32:  "assert_num_rows_node",
	33:  "intersect_node",
	34:  "except_node",
	35:  "odbc_scan_node",
	36:  "runtime_filters",
	37:  "group_commit_scan_node",
	40:  "vconjunct",
	41:  "table_function_node",
	42:  "output_slot_ids",
	43:  "data_gen_scan_node",
	44:  "file_scan_node",
	45:  "jdbc_scan_node",
	46:  "nested_loop_join_node",
	47:  "test_external_scan_node",
	48:  "push_down_agg_type_opt",
	49:  "push_down_count",
	50:  "distribute_expr_lists",
	101: "projections",
	102: "output_tuple_id",
	103: "partition_sort_node",
	104: "intermediate_projections_list",
	105: "intermediate_output_tuple_id_list",
	106: "topn_filter_source_node_ids",
	107: "nereids_id",
}

func (p *TPlanNode) IsSetConjuncts() bool {
	return p.Conjuncts != nil
}

func (p *TPlanNode) IsSetHashJoinNode() bool {
	return p.HashJoinNode != nil
}

func (p *TPlanNode) IsSetAggNode() bool {
	return p.AggNode != nil
}

func (p *TPlanNode) IsSetSortNode() bool {
	return p.SortNode != nil
}

func (p *TPlanNode) IsSetMergeNode() bool {
	return p.MergeNode != nil
}

func (p *TPlanNode) IsSetExchangeNode() bool {
	return p.ExchangeNode != nil
}

func (p *TPlanNode) IsSetMysqlScanNode() bool {
	return p.MysqlScanNode != nil
}

func (p *TPlanNode) IsSetOlapScanNode() bool {
	return p.OlapScanNode != nil
}

func (p *TPlanNode) IsSetCsvScanNode() bool {
	return p.CsvScanNode != nil
}

func (p *TPlanNode) IsSetBrokerScanNode() bool {
	return p.BrokerScanNode != nil
}

func (p *TPlanNode) IsSetPreAggNode() bool {
	return p.PreAggNode != nil
}

func (p *TPlanNode) IsSetSchemaScanNode() bool {
	return p.SchemaScanNode != nil
}

func (p *TPlanNode) IsSetMergeJoinNode() bool {
	return p.MergeJoinNode != nil
}

func (p *TPlanNode) IsSetMetaScanNode() bool {
	return p.MetaScanNode != nil
}

func (p *TPlanNode) IsSetAnalyticNode() bool {
	return p.AnalyticNode != nil
}

func (p *TPlanNode) IsSetOlapRewriteNode() bool {
	return p.OlapRewriteNode != nil
}

func (p *TPlanNode) IsSetUnionNode() bool {
	return p.UnionNode != nil
}

func (p *TPlanNode) IsSetResourceProfile() bool {
	return p.ResourceProfile != nil
}

func (p *TPlanNode) IsSetEsScanNode() bool {
	return p.EsScanNode != nil
}

func (p *TPlanNode) IsSetRepeatNode() bool {
	return p.RepeatNode != nil
}

func (p *TPlanNode) IsSetAssertNumRowsNode() bool {
	return p.AssertNumRowsNode != nil
}

func (p *TPlanNode) IsSetIntersectNode() bool {
	return p.IntersectNode != nil
}

func (p *TPlanNode) IsSetExceptNode() bool {
	return p.ExceptNode != nil
}

func (p *TPlanNode) IsSetOdbcScanNode() bool {
	return p.OdbcScanNode != nil
}

func (p *TPlanNode) IsSetRuntimeFilters() bool {
	return p.RuntimeFilters != nil
}

func (p *TPlanNode) IsSetGroupCommitScanNode() bool {
	return p.GroupCommitScanNode != nil
}

func (p *TPlanNode) IsSetVconjunct() bool {
	return p.Vconjunct != nil
}

func (p *TPlanNode) IsSetTableFunctionNode() bool {
	return p.TableFunctionNode != nil
}

func (p *TPlanNode) IsSetOutputSlotIds() bool {
	return p.OutputSlotIds != nil
}

func (p *TPlanNode) IsSetDataGenScanNode() bool {
	return p.DataGenScanNode != nil
}

func (p *TPlanNode) IsSetFileScanNode() bool {
	return p.FileScanNode != nil
}

func (p *TPlanNode) IsSetJdbcScanNode() bool {
	return p.JdbcScanNode != nil
}

func (p *TPlanNode) IsSetNestedLoopJoinNode() bool {
	return p.NestedLoopJoinNode != nil
}

func (p *TPlanNode) IsSetTestExternalScanNode() bool {
	return p.TestExternalScanNode != nil
}

func (p *TPlanNode) IsSetPushDownAggTypeOpt() bool {
	return p.PushDownAggTypeOpt != nil
}

func (p *TPlanNode) IsSetPushDownCount() bool {
	return p.PushDownCount != nil
}

func (p *TPlanNode) IsSetDistributeExprLists() bool {
	return p.DistributeExprLists != nil
}

func (p *TPlanNode) IsSetProjections() bool {
	return p.Projections != nil
}

func (p *TPlanNode) IsSetOutputTupleId() bool {
	return p.OutputTupleId != nil
}

func (p *TPlanNode) IsSetPartitionSortNode() bool {
	return p.PartitionSortNode != nil
}

func (p *TPlanNode) IsSetIntermediateProjectionsList() bool {
	return p.IntermediateProjectionsList != nil
}

func (p *TPlanNode) IsSetIntermediateOutputTupleIdList() bool {
	return p.IntermediateOutputTupleIdList != nil
}

func (p *TPlanNode) IsSetTopnFilterSourceNodeIds() bool {
	return p.TopnFilterSourceNodeIds != nil
}

func (p *TPlanNode) IsSetNereidsId() bool {
	return p.NereidsId != nil
}

func (p *TPlanNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNodeId bool = false
	var issetNodeType bool = false
	var issetNumChildren bool = false
	var issetLimit bool = false
	var issetRowTuples bool = false
	var issetNullableTuples bool = false
	var issetCompactData bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodeId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodeType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetNumChildren = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetLimit = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetRowTuples = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetNullableTuples = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompactData = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 29:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 30:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 32:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 33:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField33(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 34:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField34(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 35:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField35(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 36:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField36(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 37:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField37(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 40:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField40(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 41:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField41(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 42:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField42(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 43:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField43(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 44:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField44(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 45:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField45(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 46:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField46(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 47:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField47(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 48:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField48(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 49:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField49(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 50:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField50(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 104:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField104(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 105:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField105(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 106:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField106(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 107:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField107(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNodeId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNodeType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetNumChildren {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetLimit {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetRowTuples {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetNullableTuples {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetCompactData {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPlanNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPlanNode[fieldId]))
}

func (p *TPlanNode) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TPlanNodeId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NodeId = _field
	return nil
}
func (p *TPlanNode) ReadField2(iprot thrift.TProtocol) error {

	var _field TPlanNodeType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TPlanNodeType(v)
	}
	p.NodeType = _field
	return nil
}
func (p *TPlanNode) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumChildren = _field
	return nil
}
func (p *TPlanNode) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Limit = _field
	return nil
}
func (p *TPlanNode) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TTupleId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TTupleId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.RowTuples = _field
	return nil
}
func (p *TPlanNode) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]bool, 0, size)
	for i := 0; i < size; i++ {

		var _elem bool
		if v, err := iprot.ReadBool(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.NullableTuples = _field
	return nil
}
func (p *TPlanNode) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Conjuncts = _field
	return nil
}
func (p *TPlanNode) ReadField8(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CompactData = _field
	return nil
}
func (p *TPlanNode) ReadField11(iprot thrift.TProtocol) error {
	_field := NewTHashJoinNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.HashJoinNode = _field
	return nil
}
func (p *TPlanNode) ReadField12(iprot thrift.TProtocol) error {
	_field := NewTAggregationNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AggNode = _field
	return nil
}
func (p *TPlanNode) ReadField13(iprot thrift.TProtocol) error {
	_field := NewTSortNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SortNode = _field
	return nil
}
func (p *TPlanNode) ReadField14(iprot thrift.TProtocol) error {
	_field := NewTMergeNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MergeNode = _field
	return nil
}
func (p *TPlanNode) ReadField15(iprot thrift.TProtocol) error {
	_field := NewTExchangeNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ExchangeNode = _field
	return nil
}
func (p *TPlanNode) ReadField17(iprot thrift.TProtocol) error {
	_field := NewTMySQLScanNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MysqlScanNode = _field
	return nil
}
func (p *TPlanNode) ReadField18(iprot thrift.TProtocol) error {
	_field := NewTOlapScanNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.OlapScanNode = _field
	return nil
}
func (p *TPlanNode) ReadField19(iprot thrift.TProtocol) error {
	_field := NewTCsvScanNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CsvScanNode = _field
	return nil
}
func (p *TPlanNode) ReadField20(iprot thrift.TProtocol) error {
	_field := NewTBrokerScanNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BrokerScanNode = _field
	return nil
}
func (p *TPlanNode) ReadField21(iprot thrift.TProtocol) error {
	_field := NewTPreAggregationNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PreAggNode = _field
	return nil
}
func (p *TPlanNode) ReadField22(iprot thrift.TProtocol) error {
	_field := NewTSchemaScanNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SchemaScanNode = _field
	return nil
}
func (p *TPlanNode) ReadField23(iprot thrift.TProtocol) error {
	_field := NewTMergeJoinNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MergeJoinNode = _field
	return nil
}
func (p *TPlanNode) ReadField24(iprot thrift.TProtocol) error {
	_field := NewTMetaScanNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MetaScanNode = _field
	return nil
}
func (p *TPlanNode) ReadField25(iprot thrift.TProtocol) error {
	_field := NewTAnalyticNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AnalyticNode = _field
	return nil
}
func (p *TPlanNode) ReadField26(iprot thrift.TProtocol) error {
	_field := NewTOlapRewriteNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.OlapRewriteNode = _field
	return nil
}
func (p *TPlanNode) ReadField28(iprot thrift.TProtocol) error {
	_field := NewTUnionNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.UnionNode = _field
	return nil
}
func (p *TPlanNode) ReadField29(iprot thrift.TProtocol) error {
	_field := NewTBackendResourceProfile()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ResourceProfile = _field
	return nil
}
func (p *TPlanNode) ReadField30(iprot thrift.TProtocol) error {
	_field := NewTEsScanNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EsScanNode = _field
	return nil
}
func (p *TPlanNode) ReadField31(iprot thrift.TProtocol) error {
	_field := NewTRepeatNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.RepeatNode = _field
	return nil
}
func (p *TPlanNode) ReadField32(iprot thrift.TProtocol) error {
	_field := NewTAssertNumRowsNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AssertNumRowsNode = _field
	return nil
}
func (p *TPlanNode) ReadField33(iprot thrift.TProtocol) error {
	_field := NewTIntersectNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.IntersectNode = _field
	return nil
}
func (p *TPlanNode) ReadField34(iprot thrift.TProtocol) error {
	_field := NewTExceptNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ExceptNode = _field
	return nil
}
func (p *TPlanNode) ReadField35(iprot thrift.TProtocol) error {
	_field := NewTOdbcScanNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.OdbcScanNode = _field
	return nil
}
func (p *TPlanNode) ReadField36(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TRuntimeFilterDesc, 0, size)
	values := make([]TRuntimeFilterDesc, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.RuntimeFilters = _field
	return nil
}
func (p *TPlanNode) ReadField37(iprot thrift.TProtocol) error {
	_field := NewTGroupCommitScanNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.GroupCommitScanNode = _field
	return nil
}
func (p *TPlanNode) ReadField40(iprot thrift.TProtocol) error {
	_field := exprs.NewTExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Vconjunct = _field
	return nil
}
func (p *TPlanNode) ReadField41(iprot thrift.TProtocol) error {
	_field := NewTTableFunctionNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TableFunctionNode = _field
	return nil
}
func (p *TPlanNode) ReadField42(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TSlotId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TSlotId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OutputSlotIds = _field
	return nil
}
func (p *TPlanNode) ReadField43(iprot thrift.TProtocol) error {
	_field := NewTDataGenScanNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DataGenScanNode = _field
	return nil
}
func (p *TPlanNode) ReadField44(iprot thrift.TProtocol) error {
	_field := NewTFileScanNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FileScanNode = _field
	return nil
}
func (p *TPlanNode) ReadField45(iprot thrift.TProtocol) error {
	_field := NewTJdbcScanNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.JdbcScanNode = _field
	return nil
}
func (p *TPlanNode) ReadField46(iprot thrift.TProtocol) error {
	_field := NewTNestedLoopJoinNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.NestedLoopJoinNode = _field
	return nil
}
func (p *TPlanNode) ReadField47(iprot thrift.TProtocol) error {
	_field := NewTTestExternalScanNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TestExternalScanNode = _field
	return nil
}
func (p *TPlanNode) ReadField48(iprot thrift.TProtocol) error {

	var _field *TPushAggOp
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TPushAggOp(v)
		_field = &tmp
	}
	p.PushDownAggTypeOpt = _field
	return nil
}
func (p *TPlanNode) ReadField49(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PushDownCount = _field
	return nil
}
func (p *TPlanNode) ReadField50(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]*exprs.TExpr, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]*exprs.TExpr, 0, size)
		values := make([]exprs.TExpr, size)
		for i := 0; i < size; i++ {
			_elem1 := &values[i]
			_elem1.InitDefault()

			if err := _elem1.Read(iprot); err != nil {
				return err
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DistributeExprLists = _field
	return nil
}
func (p *TPlanNode) ReadField101(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Projections = _field
	return nil
}
func (p *TPlanNode) ReadField102(iprot thrift.TProtocol) error {

	var _field *types.TTupleId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OutputTupleId = _field
	return nil
}
func (p *TPlanNode) ReadField103(iprot thrift.TProtocol) error {
	_field := NewTPartitionSortNode()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PartitionSortNode = _field
	return nil
}
func (p *TPlanNode) ReadField104(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]*exprs.TExpr, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]*exprs.TExpr, 0, size)
		values := make([]exprs.TExpr, size)
		for i := 0; i < size; i++ {
			_elem1 := &values[i]
			_elem1.InitDefault()

			if err := _elem1.Read(iprot); err != nil {
				return err
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.IntermediateProjectionsList = _field
	return nil
}
func (p *TPlanNode) ReadField105(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TTupleId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TTupleId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.IntermediateOutputTupleIdList = _field
	return nil
}
func (p *TPlanNode) ReadField106(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TopnFilterSourceNodeIds = _field
	return nil
}
func (p *TPlanNode) ReadField107(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NereidsId = _field
	return nil
}

func (p *TPlanNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPlanNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField33(oprot); err != nil {
			fieldId = 33
			goto WriteFieldError
		}
		if err = p.writeField34(oprot); err != nil {
			fieldId = 34
			goto WriteFieldError
		}
		if err = p.writeField35(oprot); err != nil {
			fieldId = 35
			goto WriteFieldError
		}
		if err = p.writeField36(oprot); err != nil {
			fieldId = 36
			goto WriteFieldError
		}
		if err = p.writeField37(oprot); err != nil {
			fieldId = 37
			goto WriteFieldError
		}
		if err = p.writeField40(oprot); err != nil {
			fieldId = 40
			goto WriteFieldError
		}
		if err = p.writeField41(oprot); err != nil {
			fieldId = 41
			goto WriteFieldError
		}
		if err = p.writeField42(oprot); err != nil {
			fieldId = 42
			goto WriteFieldError
		}
		if err = p.writeField43(oprot); err != nil {
			fieldId = 43
			goto WriteFieldError
		}
		if err = p.writeField44(oprot); err != nil {
			fieldId = 44
			goto WriteFieldError
		}
		if err = p.writeField45(oprot); err != nil {
			fieldId = 45
			goto WriteFieldError
		}
		if err = p.writeField46(oprot); err != nil {
			fieldId = 46
			goto WriteFieldError
		}
		if err = p.writeField47(oprot); err != nil {
			fieldId = 47
			goto WriteFieldError
		}
		if err = p.writeField48(oprot); err != nil {
			fieldId = 48
			goto WriteFieldError
		}
		if err = p.writeField49(oprot); err != nil {
			fieldId = 49
			goto WriteFieldError
		}
		if err = p.writeField50(oprot); err != nil {
			fieldId = 50
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField104(oprot); err != nil {
			fieldId = 104
			goto WriteFieldError
		}
		if err = p.writeField105(oprot); err != nil {
			fieldId = 105
			goto WriteFieldError
		}
		if err = p.writeField106(oprot); err != nil {
			fieldId = 106
			goto WriteFieldError
		}
		if err = p.writeField107(oprot); err != nil {
			fieldId = 107
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPlanNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("node_id", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NodeId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPlanNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("node_type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.NodeType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPlanNode) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("num_children", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NumChildren); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPlanNode) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("limit", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Limit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TPlanNode) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("row_tuples", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.RowTuples)); err != nil {
		return err
	}
	for _, v := range p.RowTuples {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TPlanNode) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nullable_tuples", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.BOOL, len(p.NullableTuples)); err != nil {
		return err
	}
	for _, v := range p.NullableTuples {
		if err := oprot.WriteBool(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TPlanNode) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetConjuncts() {
		if err = oprot.WriteFieldBegin("conjuncts", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Conjuncts)); err != nil {
			return err
		}
		for _, v := range p.Conjuncts {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TPlanNode) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("compact_data", thrift.BOOL, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.CompactData); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TPlanNode) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetHashJoinNode() {
		if err = oprot.WriteFieldBegin("hash_join_node", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.HashJoinNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TPlanNode) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetAggNode() {
		if err = oprot.WriteFieldBegin("agg_node", thrift.STRUCT, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.AggNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TPlanNode) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetSortNode() {
		if err = oprot.WriteFieldBegin("sort_node", thrift.STRUCT, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.SortNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TPlanNode) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetMergeNode() {
		if err = oprot.WriteFieldBegin("merge_node", thrift.STRUCT, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MergeNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TPlanNode) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetExchangeNode() {
		if err = oprot.WriteFieldBegin("exchange_node", thrift.STRUCT, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ExchangeNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TPlanNode) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetMysqlScanNode() {
		if err = oprot.WriteFieldBegin("mysql_scan_node", thrift.STRUCT, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MysqlScanNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TPlanNode) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetOlapScanNode() {
		if err = oprot.WriteFieldBegin("olap_scan_node", thrift.STRUCT, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.OlapScanNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TPlanNode) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetCsvScanNode() {
		if err = oprot.WriteFieldBegin("csv_scan_node", thrift.STRUCT, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CsvScanNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TPlanNode) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetBrokerScanNode() {
		if err = oprot.WriteFieldBegin("broker_scan_node", thrift.STRUCT, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BrokerScanNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *TPlanNode) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreAggNode() {
		if err = oprot.WriteFieldBegin("pre_agg_node", thrift.STRUCT, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PreAggNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *TPlanNode) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaScanNode() {
		if err = oprot.WriteFieldBegin("schema_scan_node", thrift.STRUCT, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.SchemaScanNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *TPlanNode) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetMergeJoinNode() {
		if err = oprot.WriteFieldBegin("merge_join_node", thrift.STRUCT, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MergeJoinNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *TPlanNode) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetaScanNode() {
		if err = oprot.WriteFieldBegin("meta_scan_node", thrift.STRUCT, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MetaScanNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *TPlanNode) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnalyticNode() {
		if err = oprot.WriteFieldBegin("analytic_node", thrift.STRUCT, 25); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.AnalyticNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *TPlanNode) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetOlapRewriteNode() {
		if err = oprot.WriteFieldBegin("olap_rewrite_node", thrift.STRUCT, 26); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.OlapRewriteNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *TPlanNode) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnionNode() {
		if err = oprot.WriteFieldBegin("union_node", thrift.STRUCT, 28); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.UnionNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *TPlanNode) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetResourceProfile() {
		if err = oprot.WriteFieldBegin("resource_profile", thrift.STRUCT, 29); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ResourceProfile.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}

func (p *TPlanNode) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetEsScanNode() {
		if err = oprot.WriteFieldBegin("es_scan_node", thrift.STRUCT, 30); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EsScanNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}

func (p *TPlanNode) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetRepeatNode() {
		if err = oprot.WriteFieldBegin("repeat_node", thrift.STRUCT, 31); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.RepeatNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}

func (p *TPlanNode) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetAssertNumRowsNode() {
		if err = oprot.WriteFieldBegin("assert_num_rows_node", thrift.STRUCT, 32); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.AssertNumRowsNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}

func (p *TPlanNode) writeField33(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntersectNode() {
		if err = oprot.WriteFieldBegin("intersect_node", thrift.STRUCT, 33); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.IntersectNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 end error: ", p), err)
}

func (p *TPlanNode) writeField34(oprot thrift.TProtocol) (err error) {
	if p.IsSetExceptNode() {
		if err = oprot.WriteFieldBegin("except_node", thrift.STRUCT, 34); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ExceptNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 end error: ", p), err)
}

func (p *TPlanNode) writeField35(oprot thrift.TProtocol) (err error) {
	if p.IsSetOdbcScanNode() {
		if err = oprot.WriteFieldBegin("odbc_scan_node", thrift.STRUCT, 35); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.OdbcScanNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 end error: ", p), err)
}

func (p *TPlanNode) writeField36(oprot thrift.TProtocol) (err error) {
	if p.IsSetRuntimeFilters() {
		if err = oprot.WriteFieldBegin("runtime_filters", thrift.LIST, 36); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RuntimeFilters)); err != nil {
			return err
		}
		for _, v := range p.RuntimeFilters {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 end error: ", p), err)
}

func (p *TPlanNode) writeField37(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupCommitScanNode() {
		if err = oprot.WriteFieldBegin("group_commit_scan_node", thrift.STRUCT, 37); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.GroupCommitScanNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 end error: ", p), err)
}

func (p *TPlanNode) writeField40(oprot thrift.TProtocol) (err error) {
	if p.IsSetVconjunct() {
		if err = oprot.WriteFieldBegin("vconjunct", thrift.STRUCT, 40); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Vconjunct.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 40 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 40 end error: ", p), err)
}

func (p *TPlanNode) writeField41(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableFunctionNode() {
		if err = oprot.WriteFieldBegin("table_function_node", thrift.STRUCT, 41); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TableFunctionNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 41 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 41 end error: ", p), err)
}

func (p *TPlanNode) writeField42(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputSlotIds() {
		if err = oprot.WriteFieldBegin("output_slot_ids", thrift.LIST, 42); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.OutputSlotIds)); err != nil {
			return err
		}
		for _, v := range p.OutputSlotIds {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 42 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 42 end error: ", p), err)
}

func (p *TPlanNode) writeField43(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataGenScanNode() {
		if err = oprot.WriteFieldBegin("data_gen_scan_node", thrift.STRUCT, 43); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DataGenScanNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 43 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 43 end error: ", p), err)
}

func (p *TPlanNode) writeField44(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileScanNode() {
		if err = oprot.WriteFieldBegin("file_scan_node", thrift.STRUCT, 44); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FileScanNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 44 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 44 end error: ", p), err)
}

func (p *TPlanNode) writeField45(oprot thrift.TProtocol) (err error) {
	if p.IsSetJdbcScanNode() {
		if err = oprot.WriteFieldBegin("jdbc_scan_node", thrift.STRUCT, 45); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.JdbcScanNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 45 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 45 end error: ", p), err)
}

func (p *TPlanNode) writeField46(oprot thrift.TProtocol) (err error) {
	if p.IsSetNestedLoopJoinNode() {
		if err = oprot.WriteFieldBegin("nested_loop_join_node", thrift.STRUCT, 46); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.NestedLoopJoinNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 46 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 46 end error: ", p), err)
}

func (p *TPlanNode) writeField47(oprot thrift.TProtocol) (err error) {
	if p.IsSetTestExternalScanNode() {
		if err = oprot.WriteFieldBegin("test_external_scan_node", thrift.STRUCT, 47); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TestExternalScanNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 47 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 47 end error: ", p), err)
}

func (p *TPlanNode) writeField48(oprot thrift.TProtocol) (err error) {
	if p.IsSetPushDownAggTypeOpt() {
		if err = oprot.WriteFieldBegin("push_down_agg_type_opt", thrift.I32, 48); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.PushDownAggTypeOpt)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 48 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 48 end error: ", p), err)
}

func (p *TPlanNode) writeField49(oprot thrift.TProtocol) (err error) {
	if p.IsSetPushDownCount() {
		if err = oprot.WriteFieldBegin("push_down_count", thrift.I64, 49); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PushDownCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 49 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 49 end error: ", p), err)
}

func (p *TPlanNode) writeField50(oprot thrift.TProtocol) (err error) {
	if p.IsSetDistributeExprLists() {
		if err = oprot.WriteFieldBegin("distribute_expr_lists", thrift.LIST, 50); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.LIST, len(p.DistributeExprLists)); err != nil {
			return err
		}
		for _, v := range p.DistributeExprLists {
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 50 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 50 end error: ", p), err)
}

func (p *TPlanNode) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetProjections() {
		if err = oprot.WriteFieldBegin("projections", thrift.LIST, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Projections)); err != nil {
			return err
		}
		for _, v := range p.Projections {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}

func (p *TPlanNode) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputTupleId() {
		if err = oprot.WriteFieldBegin("output_tuple_id", thrift.I32, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.OutputTupleId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}

func (p *TPlanNode) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionSortNode() {
		if err = oprot.WriteFieldBegin("partition_sort_node", thrift.STRUCT, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PartitionSortNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}

func (p *TPlanNode) writeField104(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntermediateProjectionsList() {
		if err = oprot.WriteFieldBegin("intermediate_projections_list", thrift.LIST, 104); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.LIST, len(p.IntermediateProjectionsList)); err != nil {
			return err
		}
		for _, v := range p.IntermediateProjectionsList {
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 104 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 104 end error: ", p), err)
}

func (p *TPlanNode) writeField105(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntermediateOutputTupleIdList() {
		if err = oprot.WriteFieldBegin("intermediate_output_tuple_id_list", thrift.LIST, 105); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.IntermediateOutputTupleIdList)); err != nil {
			return err
		}
		for _, v := range p.IntermediateOutputTupleIdList {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 105 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 105 end error: ", p), err)
}

func (p *TPlanNode) writeField106(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopnFilterSourceNodeIds() {
		if err = oprot.WriteFieldBegin("topn_filter_source_node_ids", thrift.LIST, 106); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.TopnFilterSourceNodeIds)); err != nil {
			return err
		}
		for _, v := range p.TopnFilterSourceNodeIds {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 106 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 106 end error: ", p), err)
}

func (p *TPlanNode) writeField107(oprot thrift.TProtocol) (err error) {
	if p.IsSetNereidsId() {
		if err = oprot.WriteFieldBegin("nereids_id", thrift.I32, 107); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.NereidsId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 107 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 107 end error: ", p), err)
}

func (p *TPlanNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPlanNode(%+v)", *p)

}

func (p *TPlanNode) DeepEqual(ano *TPlanNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.NodeId) {
		return false
	}
	if !p.Field2DeepEqual(ano.NodeType) {
		return false
	}
	if !p.Field3DeepEqual(ano.NumChildren) {
		return false
	}
	if !p.Field4DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field5DeepEqual(ano.RowTuples) {
		return false
	}
	if !p.Field6DeepEqual(ano.NullableTuples) {
		return false
	}
	if !p.Field7DeepEqual(ano.Conjuncts) {
		return false
	}
	if !p.Field8DeepEqual(ano.CompactData) {
		return false
	}
	if !p.Field11DeepEqual(ano.HashJoinNode) {
		return false
	}
	if !p.Field12DeepEqual(ano.AggNode) {
		return false
	}
	if !p.Field13DeepEqual(ano.SortNode) {
		return false
	}
	if !p.Field14DeepEqual(ano.MergeNode) {
		return false
	}
	if !p.Field15DeepEqual(ano.ExchangeNode) {
		return false
	}
	if !p.Field17DeepEqual(ano.MysqlScanNode) {
		return false
	}
	if !p.Field18DeepEqual(ano.OlapScanNode) {
		return false
	}
	if !p.Field19DeepEqual(ano.CsvScanNode) {
		return false
	}
	if !p.Field20DeepEqual(ano.BrokerScanNode) {
		return false
	}
	if !p.Field21DeepEqual(ano.PreAggNode) {
		return false
	}
	if !p.Field22DeepEqual(ano.SchemaScanNode) {
		return false
	}
	if !p.Field23DeepEqual(ano.MergeJoinNode) {
		return false
	}
	if !p.Field24DeepEqual(ano.MetaScanNode) {
		return false
	}
	if !p.Field25DeepEqual(ano.AnalyticNode) {
		return false
	}
	if !p.Field26DeepEqual(ano.OlapRewriteNode) {
		return false
	}
	if !p.Field28DeepEqual(ano.UnionNode) {
		return false
	}
	if !p.Field29DeepEqual(ano.ResourceProfile) {
		return false
	}
	if !p.Field30DeepEqual(ano.EsScanNode) {
		return false
	}
	if !p.Field31DeepEqual(ano.RepeatNode) {
		return false
	}
	if !p.Field32DeepEqual(ano.AssertNumRowsNode) {
		return false
	}
	if !p.Field33DeepEqual(ano.IntersectNode) {
		return false
	}
	if !p.Field34DeepEqual(ano.ExceptNode) {
		return false
	}
	if !p.Field35DeepEqual(ano.OdbcScanNode) {
		return false
	}
	if !p.Field36DeepEqual(ano.RuntimeFilters) {
		return false
	}
	if !p.Field37DeepEqual(ano.GroupCommitScanNode) {
		return false
	}
	if !p.Field40DeepEqual(ano.Vconjunct) {
		return false
	}
	if !p.Field41DeepEqual(ano.TableFunctionNode) {
		return false
	}
	if !p.Field42DeepEqual(ano.OutputSlotIds) {
		return false
	}
	if !p.Field43DeepEqual(ano.DataGenScanNode) {
		return false
	}
	if !p.Field44DeepEqual(ano.FileScanNode) {
		return false
	}
	if !p.Field45DeepEqual(ano.JdbcScanNode) {
		return false
	}
	if !p.Field46DeepEqual(ano.NestedLoopJoinNode) {
		return false
	}
	if !p.Field47DeepEqual(ano.TestExternalScanNode) {
		return false
	}
	if !p.Field48DeepEqual(ano.PushDownAggTypeOpt) {
		return false
	}
	if !p.Field49DeepEqual(ano.PushDownCount) {
		return false
	}
	if !p.Field50DeepEqual(ano.DistributeExprLists) {
		return false
	}
	if !p.Field101DeepEqual(ano.Projections) {
		return false
	}
	if !p.Field102DeepEqual(ano.OutputTupleId) {
		return false
	}
	if !p.Field103DeepEqual(ano.PartitionSortNode) {
		return false
	}
	if !p.Field104DeepEqual(ano.IntermediateProjectionsList) {
		return false
	}
	if !p.Field105DeepEqual(ano.IntermediateOutputTupleIdList) {
		return false
	}
	if !p.Field106DeepEqual(ano.TopnFilterSourceNodeIds) {
		return false
	}
	if !p.Field107DeepEqual(ano.NereidsId) {
		return false
	}
	return true
}

func (p *TPlanNode) Field1DeepEqual(src types.TPlanNodeId) bool {

	if p.NodeId != src {
		return false
	}
	return true
}
func (p *TPlanNode) Field2DeepEqual(src TPlanNodeType) bool {

	if p.NodeType != src {
		return false
	}
	return true
}
func (p *TPlanNode) Field3DeepEqual(src int32) bool {

	if p.NumChildren != src {
		return false
	}
	return true
}
func (p *TPlanNode) Field4DeepEqual(src int64) bool {

	if p.Limit != src {
		return false
	}
	return true
}
func (p *TPlanNode) Field5DeepEqual(src []types.TTupleId) bool {

	if len(p.RowTuples) != len(src) {
		return false
	}
	for i, v := range p.RowTuples {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TPlanNode) Field6DeepEqual(src []bool) bool {

	if len(p.NullableTuples) != len(src) {
		return false
	}
	for i, v := range p.NullableTuples {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TPlanNode) Field7DeepEqual(src []*exprs.TExpr) bool {

	if len(p.Conjuncts) != len(src) {
		return false
	}
	for i, v := range p.Conjuncts {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPlanNode) Field8DeepEqual(src bool) bool {

	if p.CompactData != src {
		return false
	}
	return true
}
func (p *TPlanNode) Field11DeepEqual(src *THashJoinNode) bool {

	if !p.HashJoinNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field12DeepEqual(src *TAggregationNode) bool {

	if !p.AggNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field13DeepEqual(src *TSortNode) bool {

	if !p.SortNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field14DeepEqual(src *TMergeNode) bool {

	if !p.MergeNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field15DeepEqual(src *TExchangeNode) bool {

	if !p.ExchangeNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field17DeepEqual(src *TMySQLScanNode) bool {

	if !p.MysqlScanNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field18DeepEqual(src *TOlapScanNode) bool {

	if !p.OlapScanNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field19DeepEqual(src *TCsvScanNode) bool {

	if !p.CsvScanNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field20DeepEqual(src *TBrokerScanNode) bool {

	if !p.BrokerScanNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field21DeepEqual(src *TPreAggregationNode) bool {

	if !p.PreAggNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field22DeepEqual(src *TSchemaScanNode) bool {

	if !p.SchemaScanNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field23DeepEqual(src *TMergeJoinNode) bool {

	if !p.MergeJoinNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field24DeepEqual(src *TMetaScanNode) bool {

	if !p.MetaScanNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field25DeepEqual(src *TAnalyticNode) bool {

	if !p.AnalyticNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field26DeepEqual(src *TOlapRewriteNode) bool {

	if !p.OlapRewriteNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field28DeepEqual(src *TUnionNode) bool {

	if !p.UnionNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field29DeepEqual(src *TBackendResourceProfile) bool {

	if !p.ResourceProfile.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field30DeepEqual(src *TEsScanNode) bool {

	if !p.EsScanNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field31DeepEqual(src *TRepeatNode) bool {

	if !p.RepeatNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field32DeepEqual(src *TAssertNumRowsNode) bool {

	if !p.AssertNumRowsNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field33DeepEqual(src *TIntersectNode) bool {

	if !p.IntersectNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field34DeepEqual(src *TExceptNode) bool {

	if !p.ExceptNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field35DeepEqual(src *TOdbcScanNode) bool {

	if !p.OdbcScanNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field36DeepEqual(src []*TRuntimeFilterDesc) bool {

	if len(p.RuntimeFilters) != len(src) {
		return false
	}
	for i, v := range p.RuntimeFilters {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPlanNode) Field37DeepEqual(src *TGroupCommitScanNode) bool {

	if !p.GroupCommitScanNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field40DeepEqual(src *exprs.TExpr) bool {

	if !p.Vconjunct.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field41DeepEqual(src *TTableFunctionNode) bool {

	if !p.TableFunctionNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field42DeepEqual(src []types.TSlotId) bool {

	if len(p.OutputSlotIds) != len(src) {
		return false
	}
	for i, v := range p.OutputSlotIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TPlanNode) Field43DeepEqual(src *TDataGenScanNode) bool {

	if !p.DataGenScanNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field44DeepEqual(src *TFileScanNode) bool {

	if !p.FileScanNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field45DeepEqual(src *TJdbcScanNode) bool {

	if !p.JdbcScanNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field46DeepEqual(src *TNestedLoopJoinNode) bool {

	if !p.NestedLoopJoinNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field47DeepEqual(src *TTestExternalScanNode) bool {

	if !p.TestExternalScanNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field48DeepEqual(src *TPushAggOp) bool {

	if p.PushDownAggTypeOpt == src {
		return true
	} else if p.PushDownAggTypeOpt == nil || src == nil {
		return false
	}
	if *p.PushDownAggTypeOpt != *src {
		return false
	}
	return true
}
func (p *TPlanNode) Field49DeepEqual(src *int64) bool {

	if p.PushDownCount == src {
		return true
	} else if p.PushDownCount == nil || src == nil {
		return false
	}
	if *p.PushDownCount != *src {
		return false
	}
	return true
}
func (p *TPlanNode) Field50DeepEqual(src [][]*exprs.TExpr) bool {

	if len(p.DistributeExprLists) != len(src) {
		return false
	}
	for i, v := range p.DistributeExprLists {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *TPlanNode) Field101DeepEqual(src []*exprs.TExpr) bool {

	if len(p.Projections) != len(src) {
		return false
	}
	for i, v := range p.Projections {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPlanNode) Field102DeepEqual(src *types.TTupleId) bool {

	if p.OutputTupleId == src {
		return true
	} else if p.OutputTupleId == nil || src == nil {
		return false
	}
	if *p.OutputTupleId != *src {
		return false
	}
	return true
}
func (p *TPlanNode) Field103DeepEqual(src *TPartitionSortNode) bool {

	if !p.PartitionSortNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanNode) Field104DeepEqual(src [][]*exprs.TExpr) bool {

	if len(p.IntermediateProjectionsList) != len(src) {
		return false
	}
	for i, v := range p.IntermediateProjectionsList {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *TPlanNode) Field105DeepEqual(src []types.TTupleId) bool {

	if len(p.IntermediateOutputTupleIdList) != len(src) {
		return false
	}
	for i, v := range p.IntermediateOutputTupleIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TPlanNode) Field106DeepEqual(src []int32) bool {

	if len(p.TopnFilterSourceNodeIds) != len(src) {
		return false
	}
	for i, v := range p.TopnFilterSourceNodeIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TPlanNode) Field107DeepEqual(src *int32) bool {

	if p.NereidsId == src {
		return true
	} else if p.NereidsId == nil || src == nil {
		return false
	}
	if *p.NereidsId != *src {
		return false
	}
	return true
}

type TPlan struct {
	Nodes []*TPlanNode `thrift:"nodes,1,required" frugal:"1,required,list<TPlanNode>" json:"nodes"`
}

func NewTPlan() *TPlan {
	return &TPlan{}
}

func (p *TPlan) InitDefault() {
}

func (p *TPlan) GetNodes() (v []*TPlanNode) {
	return p.Nodes
}
func (p *TPlan) SetNodes(val []*TPlanNode) {
	p.Nodes = val
}

var fieldIDToName_TPlan = map[int16]string{
	1: "nodes",
}

func (p *TPlan) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNodes bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodes = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNodes {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPlan[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPlan[fieldId]))
}

func (p *TPlan) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TPlanNode, 0, size)
	values := make([]TPlanNode, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Nodes = _field
	return nil
}

func (p *TPlan) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPlan"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPlan) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nodes", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Nodes)); err != nil {
		return err
	}
	for _, v := range p.Nodes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPlan) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPlan(%+v)", *p)

}

func (p *TPlan) DeepEqual(ano *TPlan) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Nodes) {
		return false
	}
	return true
}

func (p *TPlan) Field1DeepEqual(src []*TPlanNode) bool {

	if len(p.Nodes) != len(src) {
		return false
	}
	for i, v := range p.Nodes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
