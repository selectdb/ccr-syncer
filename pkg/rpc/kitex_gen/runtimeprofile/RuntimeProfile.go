// Code generated by thriftgo (0.3.13). DO NOT EDIT.

package runtimeprofile

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/metrics"
	"strings"
)

type TCounter struct {
	Name  string        `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	Type  metrics.TUnit `thrift:"type,2,required" frugal:"2,required,TUnit" json:"type"`
	Value int64         `thrift:"value,3,required" frugal:"3,required,i64" json:"value"`
	Level *int64        `thrift:"level,4,optional" frugal:"4,optional,i64" json:"level,omitempty"`
}

func NewTCounter() *TCounter {
	return &TCounter{}
}

func (p *TCounter) InitDefault() {
}

func (p *TCounter) GetName() (v string) {
	return p.Name
}

func (p *TCounter) GetType() (v metrics.TUnit) {
	return p.Type
}

func (p *TCounter) GetValue() (v int64) {
	return p.Value
}

var TCounter_Level_DEFAULT int64

func (p *TCounter) GetLevel() (v int64) {
	if !p.IsSetLevel() {
		return TCounter_Level_DEFAULT
	}
	return *p.Level
}
func (p *TCounter) SetName(val string) {
	p.Name = val
}
func (p *TCounter) SetType(val metrics.TUnit) {
	p.Type = val
}
func (p *TCounter) SetValue(val int64) {
	p.Value = val
}
func (p *TCounter) SetLevel(val *int64) {
	p.Level = val
}

var fieldIDToName_TCounter = map[int16]string{
	1: "name",
	2: "type",
	3: "value",
	4: "level",
}

func (p *TCounter) IsSetLevel() bool {
	return p.Level != nil
}

func (p *TCounter) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetType bool = false
	var issetValue bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetValue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetValue {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCounter[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCounter[fieldId]))
}

func (p *TCounter) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *TCounter) ReadField2(iprot thrift.TProtocol) error {

	var _field metrics.TUnit
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = metrics.TUnit(v)
	}
	p.Type = _field
	return nil
}
func (p *TCounter) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}
func (p *TCounter) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Level = _field
	return nil
}

func (p *TCounter) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCounter"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCounter) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCounter) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCounter) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TCounter) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLevel() {
		if err = oprot.WriteFieldBegin("level", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Level); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TCounter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCounter(%+v)", *p)

}

func (p *TCounter) DeepEqual(ano *TCounter) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	if !p.Field3DeepEqual(ano.Value) {
		return false
	}
	if !p.Field4DeepEqual(ano.Level) {
		return false
	}
	return true
}

func (p *TCounter) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *TCounter) Field2DeepEqual(src metrics.TUnit) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *TCounter) Field3DeepEqual(src int64) bool {

	if p.Value != src {
		return false
	}
	return true
}
func (p *TCounter) Field4DeepEqual(src *int64) bool {

	if p.Level == src {
		return true
	} else if p.Level == nil || src == nil {
		return false
	}
	if *p.Level != *src {
		return false
	}
	return true
}

type TRuntimeProfileNode struct {
	Name                    string              `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	NumChildren             int32               `thrift:"num_children,2,required" frugal:"2,required,i32" json:"num_children"`
	Counters                []*TCounter         `thrift:"counters,3,required" frugal:"3,required,list<TCounter>" json:"counters"`
	Metadata                int64               `thrift:"metadata,4,required" frugal:"4,required,i64" json:"metadata"`
	Indent                  bool                `thrift:"indent,5,required" frugal:"5,required,bool" json:"indent"`
	InfoStrings             map[string]string   `thrift:"info_strings,6,required" frugal:"6,required,map<string:string>" json:"info_strings"`
	InfoStringsDisplayOrder []string            `thrift:"info_strings_display_order,7,required" frugal:"7,required,list<string>" json:"info_strings_display_order"`
	ChildCountersMap        map[string][]string `thrift:"child_counters_map,8,required" frugal:"8,required,map<string:set<string>>" json:"child_counters_map"`
	Timestamp               int64               `thrift:"timestamp,9,required" frugal:"9,required,i64" json:"timestamp"`
	IsSink                  *bool               `thrift:"is_sink,10,optional" frugal:"10,optional,bool" json:"is_sink,omitempty"`
}

func NewTRuntimeProfileNode() *TRuntimeProfileNode {
	return &TRuntimeProfileNode{}
}

func (p *TRuntimeProfileNode) InitDefault() {
}

func (p *TRuntimeProfileNode) GetName() (v string) {
	return p.Name
}

func (p *TRuntimeProfileNode) GetNumChildren() (v int32) {
	return p.NumChildren
}

func (p *TRuntimeProfileNode) GetCounters() (v []*TCounter) {
	return p.Counters
}

func (p *TRuntimeProfileNode) GetMetadata() (v int64) {
	return p.Metadata
}

func (p *TRuntimeProfileNode) GetIndent() (v bool) {
	return p.Indent
}

func (p *TRuntimeProfileNode) GetInfoStrings() (v map[string]string) {
	return p.InfoStrings
}

func (p *TRuntimeProfileNode) GetInfoStringsDisplayOrder() (v []string) {
	return p.InfoStringsDisplayOrder
}

func (p *TRuntimeProfileNode) GetChildCountersMap() (v map[string][]string) {
	return p.ChildCountersMap
}

func (p *TRuntimeProfileNode) GetTimestamp() (v int64) {
	return p.Timestamp
}

var TRuntimeProfileNode_IsSink_DEFAULT bool

func (p *TRuntimeProfileNode) GetIsSink() (v bool) {
	if !p.IsSetIsSink() {
		return TRuntimeProfileNode_IsSink_DEFAULT
	}
	return *p.IsSink
}
func (p *TRuntimeProfileNode) SetName(val string) {
	p.Name = val
}
func (p *TRuntimeProfileNode) SetNumChildren(val int32) {
	p.NumChildren = val
}
func (p *TRuntimeProfileNode) SetCounters(val []*TCounter) {
	p.Counters = val
}
func (p *TRuntimeProfileNode) SetMetadata(val int64) {
	p.Metadata = val
}
func (p *TRuntimeProfileNode) SetIndent(val bool) {
	p.Indent = val
}
func (p *TRuntimeProfileNode) SetInfoStrings(val map[string]string) {
	p.InfoStrings = val
}
func (p *TRuntimeProfileNode) SetInfoStringsDisplayOrder(val []string) {
	p.InfoStringsDisplayOrder = val
}
func (p *TRuntimeProfileNode) SetChildCountersMap(val map[string][]string) {
	p.ChildCountersMap = val
}
func (p *TRuntimeProfileNode) SetTimestamp(val int64) {
	p.Timestamp = val
}
func (p *TRuntimeProfileNode) SetIsSink(val *bool) {
	p.IsSink = val
}

var fieldIDToName_TRuntimeProfileNode = map[int16]string{
	1:  "name",
	2:  "num_children",
	3:  "counters",
	4:  "metadata",
	5:  "indent",
	6:  "info_strings",
	7:  "info_strings_display_order",
	8:  "child_counters_map",
	9:  "timestamp",
	10: "is_sink",
}

func (p *TRuntimeProfileNode) IsSetIsSink() bool {
	return p.IsSink != nil
}

func (p *TRuntimeProfileNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetNumChildren bool = false
	var issetCounters bool = false
	var issetMetadata bool = false
	var issetIndent bool = false
	var issetInfoStrings bool = false
	var issetInfoStringsDisplayOrder bool = false
	var issetChildCountersMap bool = false
	var issetTimestamp bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNumChildren = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetCounters = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetMetadata = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetIndent = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetInfoStrings = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetInfoStringsDisplayOrder = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetChildCountersMap = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetTimestamp = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNumChildren {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetCounters {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetMetadata {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetIndent {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetInfoStrings {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetInfoStringsDisplayOrder {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetChildCountersMap {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetTimestamp {
		fieldId = 9
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRuntimeProfileNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TRuntimeProfileNode[fieldId]))
}

func (p *TRuntimeProfileNode) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *TRuntimeProfileNode) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumChildren = _field
	return nil
}
func (p *TRuntimeProfileNode) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TCounter, 0, size)
	values := make([]TCounter, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Counters = _field
	return nil
}
func (p *TRuntimeProfileNode) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Metadata = _field
	return nil
}
func (p *TRuntimeProfileNode) ReadField5(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Indent = _field
	return nil
}
func (p *TRuntimeProfileNode) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.InfoStrings = _field
	return nil
}
func (p *TRuntimeProfileNode) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.InfoStringsDisplayOrder = _field
	return nil
}
func (p *TRuntimeProfileNode) ReadField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string][]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return err
		}
		_val := make([]string, 0, size)
		for i := 0; i < size; i++ {

			var _elem string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.ChildCountersMap = _field
	return nil
}
func (p *TRuntimeProfileNode) ReadField9(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Timestamp = _field
	return nil
}
func (p *TRuntimeProfileNode) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsSink = _field
	return nil
}

func (p *TRuntimeProfileNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TRuntimeProfileNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TRuntimeProfileNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TRuntimeProfileNode) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("num_children", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NumChildren); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TRuntimeProfileNode) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("counters", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Counters)); err != nil {
		return err
	}
	for _, v := range p.Counters {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TRuntimeProfileNode) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("metadata", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Metadata); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TRuntimeProfileNode) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("indent", thrift.BOOL, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Indent); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TRuntimeProfileNode) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("info_strings", thrift.MAP, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.InfoStrings)); err != nil {
		return err
	}
	for k, v := range p.InfoStrings {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TRuntimeProfileNode) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("info_strings_display_order", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.InfoStringsDisplayOrder)); err != nil {
		return err
	}
	for _, v := range p.InfoStringsDisplayOrder {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TRuntimeProfileNode) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("child_counters_map", thrift.MAP, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.SET, len(p.ChildCountersMap)); err != nil {
		return err
	}
	for k, v := range p.ChildCountersMap {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(v)); err != nil {
			return err
		}
		for i := 0; i < len(v); i++ {
			for j := i + 1; j < len(v); j++ {
				if func(tgt, src string) bool {
					if strings.Compare(tgt, src) != 0 {
						return false
					}
					return true
				}(v[i], v[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
				}
			}
		}
		for _, v := range v {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TRuntimeProfileNode) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("timestamp", thrift.I64, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Timestamp); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TRuntimeProfileNode) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsSink() {
		if err = oprot.WriteFieldBegin("is_sink", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsSink); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TRuntimeProfileNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRuntimeProfileNode(%+v)", *p)

}

func (p *TRuntimeProfileNode) DeepEqual(ano *TRuntimeProfileNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.NumChildren) {
		return false
	}
	if !p.Field3DeepEqual(ano.Counters) {
		return false
	}
	if !p.Field4DeepEqual(ano.Metadata) {
		return false
	}
	if !p.Field5DeepEqual(ano.Indent) {
		return false
	}
	if !p.Field6DeepEqual(ano.InfoStrings) {
		return false
	}
	if !p.Field7DeepEqual(ano.InfoStringsDisplayOrder) {
		return false
	}
	if !p.Field8DeepEqual(ano.ChildCountersMap) {
		return false
	}
	if !p.Field9DeepEqual(ano.Timestamp) {
		return false
	}
	if !p.Field10DeepEqual(ano.IsSink) {
		return false
	}
	return true
}

func (p *TRuntimeProfileNode) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *TRuntimeProfileNode) Field2DeepEqual(src int32) bool {

	if p.NumChildren != src {
		return false
	}
	return true
}
func (p *TRuntimeProfileNode) Field3DeepEqual(src []*TCounter) bool {

	if len(p.Counters) != len(src) {
		return false
	}
	for i, v := range p.Counters {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TRuntimeProfileNode) Field4DeepEqual(src int64) bool {

	if p.Metadata != src {
		return false
	}
	return true
}
func (p *TRuntimeProfileNode) Field5DeepEqual(src bool) bool {

	if p.Indent != src {
		return false
	}
	return true
}
func (p *TRuntimeProfileNode) Field6DeepEqual(src map[string]string) bool {

	if len(p.InfoStrings) != len(src) {
		return false
	}
	for k, v := range p.InfoStrings {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TRuntimeProfileNode) Field7DeepEqual(src []string) bool {

	if len(p.InfoStringsDisplayOrder) != len(src) {
		return false
	}
	for i, v := range p.InfoStringsDisplayOrder {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TRuntimeProfileNode) Field8DeepEqual(src map[string][]string) bool {

	if len(p.ChildCountersMap) != len(src) {
		return false
	}
	for k, v := range p.ChildCountersMap {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if strings.Compare(v, _src1) != 0 {
				return false
			}
		}
	}
	return true
}
func (p *TRuntimeProfileNode) Field9DeepEqual(src int64) bool {

	if p.Timestamp != src {
		return false
	}
	return true
}
func (p *TRuntimeProfileNode) Field10DeepEqual(src *bool) bool {

	if p.IsSink == src {
		return true
	} else if p.IsSink == nil || src == nil {
		return false
	}
	if *p.IsSink != *src {
		return false
	}
	return true
}

type TRuntimeProfileTree struct {
	Nodes []*TRuntimeProfileNode `thrift:"nodes,1,required" frugal:"1,required,list<TRuntimeProfileNode>" json:"nodes"`
}

func NewTRuntimeProfileTree() *TRuntimeProfileTree {
	return &TRuntimeProfileTree{}
}

func (p *TRuntimeProfileTree) InitDefault() {
}

func (p *TRuntimeProfileTree) GetNodes() (v []*TRuntimeProfileNode) {
	return p.Nodes
}
func (p *TRuntimeProfileTree) SetNodes(val []*TRuntimeProfileNode) {
	p.Nodes = val
}

var fieldIDToName_TRuntimeProfileTree = map[int16]string{
	1: "nodes",
}

func (p *TRuntimeProfileTree) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNodes bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodes = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNodes {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRuntimeProfileTree[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TRuntimeProfileTree[fieldId]))
}

func (p *TRuntimeProfileTree) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TRuntimeProfileNode, 0, size)
	values := make([]TRuntimeProfileNode, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Nodes = _field
	return nil
}

func (p *TRuntimeProfileTree) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TRuntimeProfileTree"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TRuntimeProfileTree) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nodes", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Nodes)); err != nil {
		return err
	}
	for _, v := range p.Nodes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TRuntimeProfileTree) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRuntimeProfileTree(%+v)", *p)

}

func (p *TRuntimeProfileTree) DeepEqual(ano *TRuntimeProfileTree) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Nodes) {
		return false
	}
	return true
}

func (p *TRuntimeProfileTree) Field1DeepEqual(src []*TRuntimeProfileNode) bool {

	if len(p.Nodes) != len(src) {
		return false
	}
	for i, v := range p.Nodes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
