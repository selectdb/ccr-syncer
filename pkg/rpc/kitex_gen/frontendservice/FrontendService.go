// Code generated by thriftgo (0.3.13). DO NOT EDIT.

package frontendservice

import (
	"bytes"
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/data"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/datasinks"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/descriptors"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/exprs"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/masterservice"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/palointernalservice"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/planner"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/plannodes"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/runtimeprofile"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/status"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/types"
	"strings"
)

type TFileFormat int64

const (
	TFileFormat_PARQUETFILE  TFileFormat = 0
	TFileFormat_RCFILE       TFileFormat = 1
	TFileFormat_SEQUENCEFILE TFileFormat = 2
	TFileFormat_TEXTFILE     TFileFormat = 3
)

func (p TFileFormat) String() string {
	switch p {
	case TFileFormat_PARQUETFILE:
		return "PARQUETFILE"
	case TFileFormat_RCFILE:
		return "RCFILE"
	case TFileFormat_SEQUENCEFILE:
		return "SEQUENCEFILE"
	case TFileFormat_TEXTFILE:
		return "TEXTFILE"
	}
	return "<UNSET>"
}

func TFileFormatFromString(s string) (TFileFormat, error) {
	switch s {
	case "PARQUETFILE":
		return TFileFormat_PARQUETFILE, nil
	case "RCFILE":
		return TFileFormat_RCFILE, nil
	case "SEQUENCEFILE":
		return TFileFormat_SEQUENCEFILE, nil
	case "TEXTFILE":
		return TFileFormat_TEXTFILE, nil
	}
	return TFileFormat(0), fmt.Errorf("not a valid TFileFormat string")
}

func TFileFormatPtr(v TFileFormat) *TFileFormat { return &v }
func (p *TFileFormat) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TFileFormat(result.Int64)
	return
}

func (p *TFileFormat) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TSetType int64

const (
	TSetType_OPT_DEFAULT TSetType = 0
	TSetType_OPT_GLOBAL  TSetType = 1
	TSetType_OPT_SESSION TSetType = 2
)

func (p TSetType) String() string {
	switch p {
	case TSetType_OPT_DEFAULT:
		return "OPT_DEFAULT"
	case TSetType_OPT_GLOBAL:
		return "OPT_GLOBAL"
	case TSetType_OPT_SESSION:
		return "OPT_SESSION"
	}
	return "<UNSET>"
}

func TSetTypeFromString(s string) (TSetType, error) {
	switch s {
	case "OPT_DEFAULT":
		return TSetType_OPT_DEFAULT, nil
	case "OPT_GLOBAL":
		return TSetType_OPT_GLOBAL, nil
	case "OPT_SESSION":
		return TSetType_OPT_SESSION, nil
	}
	return TSetType(0), fmt.Errorf("not a valid TSetType string")
}

func TSetTypePtr(v TSetType) *TSetType { return &v }
func (p *TSetType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TSetType(result.Int64)
	return
}

func (p *TSetType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TDdlType int64

const (
	TDdlType_USE      TDdlType = 0
	TDdlType_DESCRIBE TDdlType = 1
	TDdlType_SET      TDdlType = 2
	TDdlType_EXPLAIN  TDdlType = 3
	TDdlType_KILL     TDdlType = 4
	TDdlType_COMMON   TDdlType = 5
)

func (p TDdlType) String() string {
	switch p {
	case TDdlType_USE:
		return "USE"
	case TDdlType_DESCRIBE:
		return "DESCRIBE"
	case TDdlType_SET:
		return "SET"
	case TDdlType_EXPLAIN:
		return "EXPLAIN"
	case TDdlType_KILL:
		return "KILL"
	case TDdlType_COMMON:
		return "COMMON"
	}
	return "<UNSET>"
}

func TDdlTypeFromString(s string) (TDdlType, error) {
	switch s {
	case "USE":
		return TDdlType_USE, nil
	case "DESCRIBE":
		return TDdlType_DESCRIBE, nil
	case "SET":
		return TDdlType_SET, nil
	case "EXPLAIN":
		return TDdlType_EXPLAIN, nil
	case "KILL":
		return TDdlType_KILL, nil
	case "COMMON":
		return TDdlType_COMMON, nil
	}
	return TDdlType(0), fmt.Errorf("not a valid TDdlType string")
}

func TDdlTypePtr(v TDdlType) *TDdlType { return &v }
func (p *TDdlType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TDdlType(result.Int64)
	return
}

func (p *TDdlType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type FrontendServiceVersion int64

const (
	FrontendServiceVersion_V1 FrontendServiceVersion = 0
)

func (p FrontendServiceVersion) String() string {
	switch p {
	case FrontendServiceVersion_V1:
		return "V1"
	}
	return "<UNSET>"
}

func FrontendServiceVersionFromString(s string) (FrontendServiceVersion, error) {
	switch s {
	case "V1":
		return FrontendServiceVersion_V1, nil
	}
	return FrontendServiceVersion(0), fmt.Errorf("not a valid FrontendServiceVersion string")
}

func FrontendServiceVersionPtr(v FrontendServiceVersion) *FrontendServiceVersion { return &v }
func (p *FrontendServiceVersion) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = FrontendServiceVersion(result.Int64)
	return
}

func (p *FrontendServiceVersion) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TSubTxnType int64

const (
	TSubTxnType_INSERT TSubTxnType = 0
	TSubTxnType_DELETE TSubTxnType = 1
)

func (p TSubTxnType) String() string {
	switch p {
	case TSubTxnType_INSERT:
		return "INSERT"
	case TSubTxnType_DELETE:
		return "DELETE"
	}
	return "<UNSET>"
}

func TSubTxnTypeFromString(s string) (TSubTxnType, error) {
	switch s {
	case "INSERT":
		return TSubTxnType_INSERT, nil
	case "DELETE":
		return TSubTxnType_DELETE, nil
	}
	return TSubTxnType(0), fmt.Errorf("not a valid TSubTxnType string")
}

func TSubTxnTypePtr(v TSubTxnType) *TSubTxnType { return &v }
func (p *TSubTxnType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TSubTxnType(result.Int64)
	return
}

func (p *TSubTxnType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TFrontendPingFrontendStatusCode int64

const (
	TFrontendPingFrontendStatusCode_OK     TFrontendPingFrontendStatusCode = 0
	TFrontendPingFrontendStatusCode_FAILED TFrontendPingFrontendStatusCode = 1
)

func (p TFrontendPingFrontendStatusCode) String() string {
	switch p {
	case TFrontendPingFrontendStatusCode_OK:
		return "OK"
	case TFrontendPingFrontendStatusCode_FAILED:
		return "FAILED"
	}
	return "<UNSET>"
}

func TFrontendPingFrontendStatusCodeFromString(s string) (TFrontendPingFrontendStatusCode, error) {
	switch s {
	case "OK":
		return TFrontendPingFrontendStatusCode_OK, nil
	case "FAILED":
		return TFrontendPingFrontendStatusCode_FAILED, nil
	}
	return TFrontendPingFrontendStatusCode(0), fmt.Errorf("not a valid TFrontendPingFrontendStatusCode string")
}

func TFrontendPingFrontendStatusCodePtr(v TFrontendPingFrontendStatusCode) *TFrontendPingFrontendStatusCode {
	return &v
}
func (p *TFrontendPingFrontendStatusCode) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TFrontendPingFrontendStatusCode(result.Int64)
	return
}

func (p *TFrontendPingFrontendStatusCode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TSchemaTableName int64

const (
	TSchemaTableName_METADATA_TABLE            TSchemaTableName = 1
	TSchemaTableName_ACTIVE_QUERIES            TSchemaTableName = 2
	TSchemaTableName_WORKLOAD_GROUPS           TSchemaTableName = 3
	TSchemaTableName_ROUTINES_INFO             TSchemaTableName = 4
	TSchemaTableName_WORKLOAD_SCHEDULE_POLICY  TSchemaTableName = 5
	TSchemaTableName_TABLE_OPTIONS             TSchemaTableName = 6
	TSchemaTableName_WORKLOAD_GROUP_PRIVILEGES TSchemaTableName = 7
	TSchemaTableName_TABLE_PROPERTIES          TSchemaTableName = 8
	TSchemaTableName_CATALOG_META_CACHE_STATS  TSchemaTableName = 9
	TSchemaTableName_PARTITIONS                TSchemaTableName = 10
)

func (p TSchemaTableName) String() string {
	switch p {
	case TSchemaTableName_METADATA_TABLE:
		return "METADATA_TABLE"
	case TSchemaTableName_ACTIVE_QUERIES:
		return "ACTIVE_QUERIES"
	case TSchemaTableName_WORKLOAD_GROUPS:
		return "WORKLOAD_GROUPS"
	case TSchemaTableName_ROUTINES_INFO:
		return "ROUTINES_INFO"
	case TSchemaTableName_WORKLOAD_SCHEDULE_POLICY:
		return "WORKLOAD_SCHEDULE_POLICY"
	case TSchemaTableName_TABLE_OPTIONS:
		return "TABLE_OPTIONS"
	case TSchemaTableName_WORKLOAD_GROUP_PRIVILEGES:
		return "WORKLOAD_GROUP_PRIVILEGES"
	case TSchemaTableName_TABLE_PROPERTIES:
		return "TABLE_PROPERTIES"
	case TSchemaTableName_CATALOG_META_CACHE_STATS:
		return "CATALOG_META_CACHE_STATS"
	case TSchemaTableName_PARTITIONS:
		return "PARTITIONS"
	}
	return "<UNSET>"
}

func TSchemaTableNameFromString(s string) (TSchemaTableName, error) {
	switch s {
	case "METADATA_TABLE":
		return TSchemaTableName_METADATA_TABLE, nil
	case "ACTIVE_QUERIES":
		return TSchemaTableName_ACTIVE_QUERIES, nil
	case "WORKLOAD_GROUPS":
		return TSchemaTableName_WORKLOAD_GROUPS, nil
	case "ROUTINES_INFO":
		return TSchemaTableName_ROUTINES_INFO, nil
	case "WORKLOAD_SCHEDULE_POLICY":
		return TSchemaTableName_WORKLOAD_SCHEDULE_POLICY, nil
	case "TABLE_OPTIONS":
		return TSchemaTableName_TABLE_OPTIONS, nil
	case "WORKLOAD_GROUP_PRIVILEGES":
		return TSchemaTableName_WORKLOAD_GROUP_PRIVILEGES, nil
	case "TABLE_PROPERTIES":
		return TSchemaTableName_TABLE_PROPERTIES, nil
	case "CATALOG_META_CACHE_STATS":
		return TSchemaTableName_CATALOG_META_CACHE_STATS, nil
	case "PARTITIONS":
		return TSchemaTableName_PARTITIONS, nil
	}
	return TSchemaTableName(0), fmt.Errorf("not a valid TSchemaTableName string")
}

func TSchemaTableNamePtr(v TSchemaTableName) *TSchemaTableName { return &v }
func (p *TSchemaTableName) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TSchemaTableName(result.Int64)
	return
}

func (p *TSchemaTableName) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TPrivilegeHier int64

const (
	TPrivilegeHier_GLOBAL   TPrivilegeHier = 0
	TPrivilegeHier_CATALOG  TPrivilegeHier = 1
	TPrivilegeHier_DATABASE TPrivilegeHier = 2
	TPrivilegeHier_TABLE    TPrivilegeHier = 3
	TPrivilegeHier_COLUMNS  TPrivilegeHier = 4
	TPrivilegeHier_RESOURSE TPrivilegeHier = 5
)

func (p TPrivilegeHier) String() string {
	switch p {
	case TPrivilegeHier_GLOBAL:
		return "GLOBAL"
	case TPrivilegeHier_CATALOG:
		return "CATALOG"
	case TPrivilegeHier_DATABASE:
		return "DATABASE"
	case TPrivilegeHier_TABLE:
		return "TABLE"
	case TPrivilegeHier_COLUMNS:
		return "COLUMNS"
	case TPrivilegeHier_RESOURSE:
		return "RESOURSE"
	}
	return "<UNSET>"
}

func TPrivilegeHierFromString(s string) (TPrivilegeHier, error) {
	switch s {
	case "GLOBAL":
		return TPrivilegeHier_GLOBAL, nil
	case "CATALOG":
		return TPrivilegeHier_CATALOG, nil
	case "DATABASE":
		return TPrivilegeHier_DATABASE, nil
	case "TABLE":
		return TPrivilegeHier_TABLE, nil
	case "COLUMNS":
		return TPrivilegeHier_COLUMNS, nil
	case "RESOURSE":
		return TPrivilegeHier_RESOURSE, nil
	}
	return TPrivilegeHier(0), fmt.Errorf("not a valid TPrivilegeHier string")
}

func TPrivilegeHierPtr(v TPrivilegeHier) *TPrivilegeHier { return &v }
func (p *TPrivilegeHier) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TPrivilegeHier(result.Int64)
	return
}

func (p *TPrivilegeHier) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TPrivilegeType int64

const (
	TPrivilegeType_NONE           TPrivilegeType = -1
	TPrivilegeType_SHOW           TPrivilegeType = 0
	TPrivilegeType_SHOW_RESOURCES TPrivilegeType = 1
	TPrivilegeType_GRANT          TPrivilegeType = 2
	TPrivilegeType_ADMIN          TPrivilegeType = 3
	TPrivilegeType_LOAD           TPrivilegeType = 4
	TPrivilegeType_ALTER          TPrivilegeType = 5
	TPrivilegeType_USAGE          TPrivilegeType = 6
	TPrivilegeType_CREATE         TPrivilegeType = 7
	TPrivilegeType_ALL            TPrivilegeType = 8
	TPrivilegeType_OPERATOR       TPrivilegeType = 9
	TPrivilegeType_DROP           TPrivilegeType = 10
)

func (p TPrivilegeType) String() string {
	switch p {
	case TPrivilegeType_NONE:
		return "NONE"
	case TPrivilegeType_SHOW:
		return "SHOW"
	case TPrivilegeType_SHOW_RESOURCES:
		return "SHOW_RESOURCES"
	case TPrivilegeType_GRANT:
		return "GRANT"
	case TPrivilegeType_ADMIN:
		return "ADMIN"
	case TPrivilegeType_LOAD:
		return "LOAD"
	case TPrivilegeType_ALTER:
		return "ALTER"
	case TPrivilegeType_USAGE:
		return "USAGE"
	case TPrivilegeType_CREATE:
		return "CREATE"
	case TPrivilegeType_ALL:
		return "ALL"
	case TPrivilegeType_OPERATOR:
		return "OPERATOR"
	case TPrivilegeType_DROP:
		return "DROP"
	}
	return "<UNSET>"
}

func TPrivilegeTypeFromString(s string) (TPrivilegeType, error) {
	switch s {
	case "NONE":
		return TPrivilegeType_NONE, nil
	case "SHOW":
		return TPrivilegeType_SHOW, nil
	case "SHOW_RESOURCES":
		return TPrivilegeType_SHOW_RESOURCES, nil
	case "GRANT":
		return TPrivilegeType_GRANT, nil
	case "ADMIN":
		return TPrivilegeType_ADMIN, nil
	case "LOAD":
		return TPrivilegeType_LOAD, nil
	case "ALTER":
		return TPrivilegeType_ALTER, nil
	case "USAGE":
		return TPrivilegeType_USAGE, nil
	case "CREATE":
		return TPrivilegeType_CREATE, nil
	case "ALL":
		return TPrivilegeType_ALL, nil
	case "OPERATOR":
		return TPrivilegeType_OPERATOR, nil
	case "DROP":
		return TPrivilegeType_DROP, nil
	}
	return TPrivilegeType(0), fmt.Errorf("not a valid TPrivilegeType string")
}

func TPrivilegeTypePtr(v TPrivilegeType) *TPrivilegeType { return &v }
func (p *TPrivilegeType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TPrivilegeType(result.Int64)
	return
}

func (p *TPrivilegeType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TQueryStatsType int64

const (
	TQueryStatsType_CATALOG           TQueryStatsType = 0
	TQueryStatsType_DATABASE          TQueryStatsType = 1
	TQueryStatsType_TABLE             TQueryStatsType = 2
	TQueryStatsType_TABLE_ALL         TQueryStatsType = 3
	TQueryStatsType_TABLE_ALL_VERBOSE TQueryStatsType = 4
	TQueryStatsType_TABLET            TQueryStatsType = 5
	TQueryStatsType_TABLETS           TQueryStatsType = 6
)

func (p TQueryStatsType) String() string {
	switch p {
	case TQueryStatsType_CATALOG:
		return "CATALOG"
	case TQueryStatsType_DATABASE:
		return "DATABASE"
	case TQueryStatsType_TABLE:
		return "TABLE"
	case TQueryStatsType_TABLE_ALL:
		return "TABLE_ALL"
	case TQueryStatsType_TABLE_ALL_VERBOSE:
		return "TABLE_ALL_VERBOSE"
	case TQueryStatsType_TABLET:
		return "TABLET"
	case TQueryStatsType_TABLETS:
		return "TABLETS"
	}
	return "<UNSET>"
}

func TQueryStatsTypeFromString(s string) (TQueryStatsType, error) {
	switch s {
	case "CATALOG":
		return TQueryStatsType_CATALOG, nil
	case "DATABASE":
		return TQueryStatsType_DATABASE, nil
	case "TABLE":
		return TQueryStatsType_TABLE, nil
	case "TABLE_ALL":
		return TQueryStatsType_TABLE_ALL, nil
	case "TABLE_ALL_VERBOSE":
		return TQueryStatsType_TABLE_ALL_VERBOSE, nil
	case "TABLET":
		return TQueryStatsType_TABLET, nil
	case "TABLETS":
		return TQueryStatsType_TABLETS, nil
	}
	return TQueryStatsType(0), fmt.Errorf("not a valid TQueryStatsType string")
}

func TQueryStatsTypePtr(v TQueryStatsType) *TQueryStatsType { return &v }
func (p *TQueryStatsType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TQueryStatsType(result.Int64)
	return
}

func (p *TQueryStatsType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TBinlogType int64

const (
	TBinlogType_UPSERT                           TBinlogType = 0
	TBinlogType_ADD_PARTITION                    TBinlogType = 1
	TBinlogType_CREATE_TABLE                     TBinlogType = 2
	TBinlogType_DROP_PARTITION                   TBinlogType = 3
	TBinlogType_DROP_TABLE                       TBinlogType = 4
	TBinlogType_ALTER_JOB                        TBinlogType = 5
	TBinlogType_MODIFY_TABLE_ADD_OR_DROP_COLUMNS TBinlogType = 6
	TBinlogType_DUMMY                            TBinlogType = 7
	TBinlogType_ALTER_DATABASE_PROPERTY          TBinlogType = 8
	TBinlogType_MODIFY_TABLE_PROPERTY            TBinlogType = 9
	TBinlogType_BARRIER                          TBinlogType = 10
	TBinlogType_MODIFY_PARTITIONS                TBinlogType = 11
	TBinlogType_REPLACE_PARTITIONS               TBinlogType = 12
	TBinlogType_TRUNCATE_TABLE                   TBinlogType = 13
	TBinlogType_RENAME_TABLE                     TBinlogType = 14
	TBinlogType_RENAME_COLUMN                    TBinlogType = 15
)

func (p TBinlogType) String() string {
	switch p {
	case TBinlogType_UPSERT:
		return "UPSERT"
	case TBinlogType_ADD_PARTITION:
		return "ADD_PARTITION"
	case TBinlogType_CREATE_TABLE:
		return "CREATE_TABLE"
	case TBinlogType_DROP_PARTITION:
		return "DROP_PARTITION"
	case TBinlogType_DROP_TABLE:
		return "DROP_TABLE"
	case TBinlogType_ALTER_JOB:
		return "ALTER_JOB"
	case TBinlogType_MODIFY_TABLE_ADD_OR_DROP_COLUMNS:
		return "MODIFY_TABLE_ADD_OR_DROP_COLUMNS"
	case TBinlogType_DUMMY:
		return "DUMMY"
	case TBinlogType_ALTER_DATABASE_PROPERTY:
		return "ALTER_DATABASE_PROPERTY"
	case TBinlogType_MODIFY_TABLE_PROPERTY:
		return "MODIFY_TABLE_PROPERTY"
	case TBinlogType_BARRIER:
		return "BARRIER"
	case TBinlogType_MODIFY_PARTITIONS:
		return "MODIFY_PARTITIONS"
	case TBinlogType_REPLACE_PARTITIONS:
		return "REPLACE_PARTITIONS"
	case TBinlogType_TRUNCATE_TABLE:
		return "TRUNCATE_TABLE"
	case TBinlogType_RENAME_TABLE:
		return "RENAME_TABLE"
	case TBinlogType_RENAME_COLUMN:
		return "RENAME_COLUMN"
	}
	return "<UNSET>"
}

func TBinlogTypeFromString(s string) (TBinlogType, error) {
	switch s {
	case "UPSERT":
		return TBinlogType_UPSERT, nil
	case "ADD_PARTITION":
		return TBinlogType_ADD_PARTITION, nil
	case "CREATE_TABLE":
		return TBinlogType_CREATE_TABLE, nil
	case "DROP_PARTITION":
		return TBinlogType_DROP_PARTITION, nil
	case "DROP_TABLE":
		return TBinlogType_DROP_TABLE, nil
	case "ALTER_JOB":
		return TBinlogType_ALTER_JOB, nil
	case "MODIFY_TABLE_ADD_OR_DROP_COLUMNS":
		return TBinlogType_MODIFY_TABLE_ADD_OR_DROP_COLUMNS, nil
	case "DUMMY":
		return TBinlogType_DUMMY, nil
	case "ALTER_DATABASE_PROPERTY":
		return TBinlogType_ALTER_DATABASE_PROPERTY, nil
	case "MODIFY_TABLE_PROPERTY":
		return TBinlogType_MODIFY_TABLE_PROPERTY, nil
	case "BARRIER":
		return TBinlogType_BARRIER, nil
	case "MODIFY_PARTITIONS":
		return TBinlogType_MODIFY_PARTITIONS, nil
	case "REPLACE_PARTITIONS":
		return TBinlogType_REPLACE_PARTITIONS, nil
	case "TRUNCATE_TABLE":
		return TBinlogType_TRUNCATE_TABLE, nil
	case "RENAME_TABLE":
		return TBinlogType_RENAME_TABLE, nil
	case "RENAME_COLUMN":
		return TBinlogType_RENAME_COLUMN, nil
	}
	return TBinlogType(0), fmt.Errorf("not a valid TBinlogType string")
}

func TBinlogTypePtr(v TBinlogType) *TBinlogType { return &v }
func (p *TBinlogType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TBinlogType(result.Int64)
	return
}

func (p *TBinlogType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TSnapshotType int64

const (
	TSnapshotType_REMOTE TSnapshotType = 0
	TSnapshotType_LOCAL  TSnapshotType = 1
)

func (p TSnapshotType) String() string {
	switch p {
	case TSnapshotType_REMOTE:
		return "REMOTE"
	case TSnapshotType_LOCAL:
		return "LOCAL"
	}
	return "<UNSET>"
}

func TSnapshotTypeFromString(s string) (TSnapshotType, error) {
	switch s {
	case "REMOTE":
		return TSnapshotType_REMOTE, nil
	case "LOCAL":
		return TSnapshotType_LOCAL, nil
	}
	return TSnapshotType(0), fmt.Errorf("not a valid TSnapshotType string")
}

func TSnapshotTypePtr(v TSnapshotType) *TSnapshotType { return &v }
func (p *TSnapshotType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TSnapshotType(result.Int64)
	return
}

func (p *TSnapshotType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TGetBinlogLagRequest = TGetBinlogRequest

func NewTGetBinlogLagRequest() *TGetBinlogLagRequest {
	return (*TGetBinlogLagRequest)(NewTGetBinlogRequest())
}

type TSetSessionParams struct {
	User string `thrift:"user,1,required" frugal:"1,required,string" json:"user"`
}

func NewTSetSessionParams() *TSetSessionParams {
	return &TSetSessionParams{}
}

func (p *TSetSessionParams) InitDefault() {
}

func (p *TSetSessionParams) GetUser() (v string) {
	return p.User
}
func (p *TSetSessionParams) SetUser(val string) {
	p.User = val
}

var fieldIDToName_TSetSessionParams = map[int16]string{
	1: "user",
}

func (p *TSetSessionParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUser bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUser = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUser {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TSetSessionParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TSetSessionParams[fieldId]))
}

func (p *TSetSessionParams) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.User = _field
	return nil
}

func (p *TSetSessionParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TSetSessionParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TSetSessionParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.User); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TSetSessionParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSetSessionParams(%+v)", *p)

}

func (p *TSetSessionParams) DeepEqual(ano *TSetSessionParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.User) {
		return false
	}
	return true
}

func (p *TSetSessionParams) Field1DeepEqual(src string) bool {

	if strings.Compare(p.User, src) != 0 {
		return false
	}
	return true
}

type TAuthenticateParams struct {
	User   string `thrift:"user,1,required" frugal:"1,required,string" json:"user"`
	Passwd string `thrift:"passwd,2,required" frugal:"2,required,string" json:"passwd"`
}

func NewTAuthenticateParams() *TAuthenticateParams {
	return &TAuthenticateParams{}
}

func (p *TAuthenticateParams) InitDefault() {
}

func (p *TAuthenticateParams) GetUser() (v string) {
	return p.User
}

func (p *TAuthenticateParams) GetPasswd() (v string) {
	return p.Passwd
}
func (p *TAuthenticateParams) SetUser(val string) {
	p.User = val
}
func (p *TAuthenticateParams) SetPasswd(val string) {
	p.Passwd = val
}

var fieldIDToName_TAuthenticateParams = map[int16]string{
	1: "user",
	2: "passwd",
}

func (p *TAuthenticateParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUser bool = false
	var issetPasswd bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUser = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPasswd = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUser {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPasswd {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAuthenticateParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TAuthenticateParams[fieldId]))
}

func (p *TAuthenticateParams) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.User = _field
	return nil
}
func (p *TAuthenticateParams) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Passwd = _field
	return nil
}

func (p *TAuthenticateParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAuthenticateParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAuthenticateParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.User); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAuthenticateParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Passwd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAuthenticateParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAuthenticateParams(%+v)", *p)

}

func (p *TAuthenticateParams) DeepEqual(ano *TAuthenticateParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.User) {
		return false
	}
	if !p.Field2DeepEqual(ano.Passwd) {
		return false
	}
	return true
}

func (p *TAuthenticateParams) Field1DeepEqual(src string) bool {

	if strings.Compare(p.User, src) != 0 {
		return false
	}
	return true
}
func (p *TAuthenticateParams) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Passwd, src) != 0 {
		return false
	}
	return true
}

type TColumnDesc struct {
	ColumnName      string               `thrift:"columnName,1,required" frugal:"1,required,string" json:"columnName"`
	ColumnType      types.TPrimitiveType `thrift:"columnType,2,required" frugal:"2,required,TPrimitiveType" json:"columnType"`
	ColumnLength    *int32               `thrift:"columnLength,3,optional" frugal:"3,optional,i32" json:"columnLength,omitempty"`
	ColumnPrecision *int32               `thrift:"columnPrecision,4,optional" frugal:"4,optional,i32" json:"columnPrecision,omitempty"`
	ColumnScale     *int32               `thrift:"columnScale,5,optional" frugal:"5,optional,i32" json:"columnScale,omitempty"`
	IsAllowNull     *bool                `thrift:"isAllowNull,6,optional" frugal:"6,optional,bool" json:"isAllowNull,omitempty"`
	ColumnKey       *string              `thrift:"columnKey,7,optional" frugal:"7,optional,string" json:"columnKey,omitempty"`
	Children        []*TColumnDesc       `thrift:"children,8,optional" frugal:"8,optional,list<TColumnDesc>" json:"children,omitempty"`
}

func NewTColumnDesc() *TColumnDesc {
	return &TColumnDesc{}
}

func (p *TColumnDesc) InitDefault() {
}

func (p *TColumnDesc) GetColumnName() (v string) {
	return p.ColumnName
}

func (p *TColumnDesc) GetColumnType() (v types.TPrimitiveType) {
	return p.ColumnType
}

var TColumnDesc_ColumnLength_DEFAULT int32

func (p *TColumnDesc) GetColumnLength() (v int32) {
	if !p.IsSetColumnLength() {
		return TColumnDesc_ColumnLength_DEFAULT
	}
	return *p.ColumnLength
}

var TColumnDesc_ColumnPrecision_DEFAULT int32

func (p *TColumnDesc) GetColumnPrecision() (v int32) {
	if !p.IsSetColumnPrecision() {
		return TColumnDesc_ColumnPrecision_DEFAULT
	}
	return *p.ColumnPrecision
}

var TColumnDesc_ColumnScale_DEFAULT int32

func (p *TColumnDesc) GetColumnScale() (v int32) {
	if !p.IsSetColumnScale() {
		return TColumnDesc_ColumnScale_DEFAULT
	}
	return *p.ColumnScale
}

var TColumnDesc_IsAllowNull_DEFAULT bool

func (p *TColumnDesc) GetIsAllowNull() (v bool) {
	if !p.IsSetIsAllowNull() {
		return TColumnDesc_IsAllowNull_DEFAULT
	}
	return *p.IsAllowNull
}

var TColumnDesc_ColumnKey_DEFAULT string

func (p *TColumnDesc) GetColumnKey() (v string) {
	if !p.IsSetColumnKey() {
		return TColumnDesc_ColumnKey_DEFAULT
	}
	return *p.ColumnKey
}

var TColumnDesc_Children_DEFAULT []*TColumnDesc

func (p *TColumnDesc) GetChildren() (v []*TColumnDesc) {
	if !p.IsSetChildren() {
		return TColumnDesc_Children_DEFAULT
	}
	return p.Children
}
func (p *TColumnDesc) SetColumnName(val string) {
	p.ColumnName = val
}
func (p *TColumnDesc) SetColumnType(val types.TPrimitiveType) {
	p.ColumnType = val
}
func (p *TColumnDesc) SetColumnLength(val *int32) {
	p.ColumnLength = val
}
func (p *TColumnDesc) SetColumnPrecision(val *int32) {
	p.ColumnPrecision = val
}
func (p *TColumnDesc) SetColumnScale(val *int32) {
	p.ColumnScale = val
}
func (p *TColumnDesc) SetIsAllowNull(val *bool) {
	p.IsAllowNull = val
}
func (p *TColumnDesc) SetColumnKey(val *string) {
	p.ColumnKey = val
}
func (p *TColumnDesc) SetChildren(val []*TColumnDesc) {
	p.Children = val
}

var fieldIDToName_TColumnDesc = map[int16]string{
	1: "columnName",
	2: "columnType",
	3: "columnLength",
	4: "columnPrecision",
	5: "columnScale",
	6: "isAllowNull",
	7: "columnKey",
	8: "children",
}

func (p *TColumnDesc) IsSetColumnLength() bool {
	return p.ColumnLength != nil
}

func (p *TColumnDesc) IsSetColumnPrecision() bool {
	return p.ColumnPrecision != nil
}

func (p *TColumnDesc) IsSetColumnScale() bool {
	return p.ColumnScale != nil
}

func (p *TColumnDesc) IsSetIsAllowNull() bool {
	return p.IsAllowNull != nil
}

func (p *TColumnDesc) IsSetColumnKey() bool {
	return p.ColumnKey != nil
}

func (p *TColumnDesc) IsSetChildren() bool {
	return p.Children != nil
}

func (p *TColumnDesc) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetColumnName bool = false
	var issetColumnType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumnName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumnType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetColumnName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetColumnType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TColumnDesc[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TColumnDesc[fieldId]))
}

func (p *TColumnDesc) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ColumnName = _field
	return nil
}
func (p *TColumnDesc) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TPrimitiveType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TPrimitiveType(v)
	}
	p.ColumnType = _field
	return nil
}
func (p *TColumnDesc) ReadField3(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ColumnLength = _field
	return nil
}
func (p *TColumnDesc) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ColumnPrecision = _field
	return nil
}
func (p *TColumnDesc) ReadField5(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ColumnScale = _field
	return nil
}
func (p *TColumnDesc) ReadField6(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsAllowNull = _field
	return nil
}
func (p *TColumnDesc) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ColumnKey = _field
	return nil
}
func (p *TColumnDesc) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TColumnDesc, 0, size)
	values := make([]TColumnDesc, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Children = _field
	return nil
}

func (p *TColumnDesc) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TColumnDesc"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TColumnDesc) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columnName", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ColumnName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TColumnDesc) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columnType", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ColumnType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TColumnDesc) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnLength() {
		if err = oprot.WriteFieldBegin("columnLength", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ColumnLength); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TColumnDesc) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnPrecision() {
		if err = oprot.WriteFieldBegin("columnPrecision", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ColumnPrecision); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TColumnDesc) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnScale() {
		if err = oprot.WriteFieldBegin("columnScale", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ColumnScale); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TColumnDesc) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsAllowNull() {
		if err = oprot.WriteFieldBegin("isAllowNull", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsAllowNull); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TColumnDesc) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnKey() {
		if err = oprot.WriteFieldBegin("columnKey", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ColumnKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TColumnDesc) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetChildren() {
		if err = oprot.WriteFieldBegin("children", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Children)); err != nil {
			return err
		}
		for _, v := range p.Children {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TColumnDesc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumnDesc(%+v)", *p)

}

func (p *TColumnDesc) DeepEqual(ano *TColumnDesc) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnName) {
		return false
	}
	if !p.Field2DeepEqual(ano.ColumnType) {
		return false
	}
	if !p.Field3DeepEqual(ano.ColumnLength) {
		return false
	}
	if !p.Field4DeepEqual(ano.ColumnPrecision) {
		return false
	}
	if !p.Field5DeepEqual(ano.ColumnScale) {
		return false
	}
	if !p.Field6DeepEqual(ano.IsAllowNull) {
		return false
	}
	if !p.Field7DeepEqual(ano.ColumnKey) {
		return false
	}
	if !p.Field8DeepEqual(ano.Children) {
		return false
	}
	return true
}

func (p *TColumnDesc) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ColumnName, src) != 0 {
		return false
	}
	return true
}
func (p *TColumnDesc) Field2DeepEqual(src types.TPrimitiveType) bool {

	if p.ColumnType != src {
		return false
	}
	return true
}
func (p *TColumnDesc) Field3DeepEqual(src *int32) bool {

	if p.ColumnLength == src {
		return true
	} else if p.ColumnLength == nil || src == nil {
		return false
	}
	if *p.ColumnLength != *src {
		return false
	}
	return true
}
func (p *TColumnDesc) Field4DeepEqual(src *int32) bool {

	if p.ColumnPrecision == src {
		return true
	} else if p.ColumnPrecision == nil || src == nil {
		return false
	}
	if *p.ColumnPrecision != *src {
		return false
	}
	return true
}
func (p *TColumnDesc) Field5DeepEqual(src *int32) bool {

	if p.ColumnScale == src {
		return true
	} else if p.ColumnScale == nil || src == nil {
		return false
	}
	if *p.ColumnScale != *src {
		return false
	}
	return true
}
func (p *TColumnDesc) Field6DeepEqual(src *bool) bool {

	if p.IsAllowNull == src {
		return true
	} else if p.IsAllowNull == nil || src == nil {
		return false
	}
	if *p.IsAllowNull != *src {
		return false
	}
	return true
}
func (p *TColumnDesc) Field7DeepEqual(src *string) bool {

	if p.ColumnKey == src {
		return true
	} else if p.ColumnKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ColumnKey, *src) != 0 {
		return false
	}
	return true
}
func (p *TColumnDesc) Field8DeepEqual(src []*TColumnDesc) bool {

	if len(p.Children) != len(src) {
		return false
	}
	for i, v := range p.Children {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TColumnDef struct {
	ColumnDesc *TColumnDesc `thrift:"columnDesc,1,required" frugal:"1,required,TColumnDesc" json:"columnDesc"`
	Comment    *string      `thrift:"comment,2,optional" frugal:"2,optional,string" json:"comment,omitempty"`
}

func NewTColumnDef() *TColumnDef {
	return &TColumnDef{}
}

func (p *TColumnDef) InitDefault() {
}

var TColumnDef_ColumnDesc_DEFAULT *TColumnDesc

func (p *TColumnDef) GetColumnDesc() (v *TColumnDesc) {
	if !p.IsSetColumnDesc() {
		return TColumnDef_ColumnDesc_DEFAULT
	}
	return p.ColumnDesc
}

var TColumnDef_Comment_DEFAULT string

func (p *TColumnDef) GetComment() (v string) {
	if !p.IsSetComment() {
		return TColumnDef_Comment_DEFAULT
	}
	return *p.Comment
}
func (p *TColumnDef) SetColumnDesc(val *TColumnDesc) {
	p.ColumnDesc = val
}
func (p *TColumnDef) SetComment(val *string) {
	p.Comment = val
}

var fieldIDToName_TColumnDef = map[int16]string{
	1: "columnDesc",
	2: "comment",
}

func (p *TColumnDef) IsSetColumnDesc() bool {
	return p.ColumnDesc != nil
}

func (p *TColumnDef) IsSetComment() bool {
	return p.Comment != nil
}

func (p *TColumnDef) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetColumnDesc bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumnDesc = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetColumnDesc {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TColumnDef[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TColumnDef[fieldId]))
}

func (p *TColumnDef) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTColumnDesc()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ColumnDesc = _field
	return nil
}
func (p *TColumnDef) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Comment = _field
	return nil
}

func (p *TColumnDef) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TColumnDef"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TColumnDef) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columnDesc", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ColumnDesc.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TColumnDef) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetComment() {
		if err = oprot.WriteFieldBegin("comment", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Comment); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TColumnDef) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumnDef(%+v)", *p)

}

func (p *TColumnDef) DeepEqual(ano *TColumnDef) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnDesc) {
		return false
	}
	if !p.Field2DeepEqual(ano.Comment) {
		return false
	}
	return true
}

func (p *TColumnDef) Field1DeepEqual(src *TColumnDesc) bool {

	if !p.ColumnDesc.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TColumnDef) Field2DeepEqual(src *string) bool {

	if p.Comment == src {
		return true
	} else if p.Comment == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Comment, *src) != 0 {
		return false
	}
	return true
}

type TDescribeTableParams struct {
	Db                *string              `thrift:"db,1,optional" frugal:"1,optional,string" json:"db,omitempty"`
	TableName         string               `thrift:"table_name,2,required" frugal:"2,required,string" json:"table_name"`
	User              *string              `thrift:"user,3,optional" frugal:"3,optional,string" json:"user,omitempty"`
	UserIp            *string              `thrift:"user_ip,4,optional" frugal:"4,optional,string" json:"user_ip,omitempty"`
	CurrentUserIdent  *types.TUserIdentity `thrift:"current_user_ident,5,optional" frugal:"5,optional,types.TUserIdentity" json:"current_user_ident,omitempty"`
	ShowHiddenColumns bool                 `thrift:"show_hidden_columns,6,optional" frugal:"6,optional,bool" json:"show_hidden_columns,omitempty"`
	Catalog           *string              `thrift:"catalog,7,optional" frugal:"7,optional,string" json:"catalog,omitempty"`
}

func NewTDescribeTableParams() *TDescribeTableParams {
	return &TDescribeTableParams{

		ShowHiddenColumns: false,
	}
}

func (p *TDescribeTableParams) InitDefault() {
	p.ShowHiddenColumns = false
}

var TDescribeTableParams_Db_DEFAULT string

func (p *TDescribeTableParams) GetDb() (v string) {
	if !p.IsSetDb() {
		return TDescribeTableParams_Db_DEFAULT
	}
	return *p.Db
}

func (p *TDescribeTableParams) GetTableName() (v string) {
	return p.TableName
}

var TDescribeTableParams_User_DEFAULT string

func (p *TDescribeTableParams) GetUser() (v string) {
	if !p.IsSetUser() {
		return TDescribeTableParams_User_DEFAULT
	}
	return *p.User
}

var TDescribeTableParams_UserIp_DEFAULT string

func (p *TDescribeTableParams) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TDescribeTableParams_UserIp_DEFAULT
	}
	return *p.UserIp
}

var TDescribeTableParams_CurrentUserIdent_DEFAULT *types.TUserIdentity

func (p *TDescribeTableParams) GetCurrentUserIdent() (v *types.TUserIdentity) {
	if !p.IsSetCurrentUserIdent() {
		return TDescribeTableParams_CurrentUserIdent_DEFAULT
	}
	return p.CurrentUserIdent
}

var TDescribeTableParams_ShowHiddenColumns_DEFAULT bool = false

func (p *TDescribeTableParams) GetShowHiddenColumns() (v bool) {
	if !p.IsSetShowHiddenColumns() {
		return TDescribeTableParams_ShowHiddenColumns_DEFAULT
	}
	return p.ShowHiddenColumns
}

var TDescribeTableParams_Catalog_DEFAULT string

func (p *TDescribeTableParams) GetCatalog() (v string) {
	if !p.IsSetCatalog() {
		return TDescribeTableParams_Catalog_DEFAULT
	}
	return *p.Catalog
}
func (p *TDescribeTableParams) SetDb(val *string) {
	p.Db = val
}
func (p *TDescribeTableParams) SetTableName(val string) {
	p.TableName = val
}
func (p *TDescribeTableParams) SetUser(val *string) {
	p.User = val
}
func (p *TDescribeTableParams) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TDescribeTableParams) SetCurrentUserIdent(val *types.TUserIdentity) {
	p.CurrentUserIdent = val
}
func (p *TDescribeTableParams) SetShowHiddenColumns(val bool) {
	p.ShowHiddenColumns = val
}
func (p *TDescribeTableParams) SetCatalog(val *string) {
	p.Catalog = val
}

var fieldIDToName_TDescribeTableParams = map[int16]string{
	1: "db",
	2: "table_name",
	3: "user",
	4: "user_ip",
	5: "current_user_ident",
	6: "show_hidden_columns",
	7: "catalog",
}

func (p *TDescribeTableParams) IsSetDb() bool {
	return p.Db != nil
}

func (p *TDescribeTableParams) IsSetUser() bool {
	return p.User != nil
}

func (p *TDescribeTableParams) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TDescribeTableParams) IsSetCurrentUserIdent() bool {
	return p.CurrentUserIdent != nil
}

func (p *TDescribeTableParams) IsSetShowHiddenColumns() bool {
	return p.ShowHiddenColumns != TDescribeTableParams_ShowHiddenColumns_DEFAULT
}

func (p *TDescribeTableParams) IsSetCatalog() bool {
	return p.Catalog != nil
}

func (p *TDescribeTableParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTableName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTableName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTableName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDescribeTableParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TDescribeTableParams[fieldId]))
}

func (p *TDescribeTableParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Db = _field
	return nil
}
func (p *TDescribeTableParams) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TableName = _field
	return nil
}
func (p *TDescribeTableParams) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *TDescribeTableParams) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TDescribeTableParams) ReadField5(iprot thrift.TProtocol) error {
	_field := types.NewTUserIdentity()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CurrentUserIdent = _field
	return nil
}
func (p *TDescribeTableParams) ReadField6(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShowHiddenColumns = _field
	return nil
}
func (p *TDescribeTableParams) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Catalog = _field
	return nil
}

func (p *TDescribeTableParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDescribeTableParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDescribeTableParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDb() {
		if err = oprot.WriteFieldBegin("db", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Db); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDescribeTableParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TableName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TDescribeTableParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TDescribeTableParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TDescribeTableParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentUserIdent() {
		if err = oprot.WriteFieldBegin("current_user_ident", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CurrentUserIdent.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TDescribeTableParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetShowHiddenColumns() {
		if err = oprot.WriteFieldBegin("show_hidden_columns", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.ShowHiddenColumns); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TDescribeTableParams) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalog() {
		if err = oprot.WriteFieldBegin("catalog", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Catalog); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TDescribeTableParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDescribeTableParams(%+v)", *p)

}

func (p *TDescribeTableParams) DeepEqual(ano *TDescribeTableParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Db) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableName) {
		return false
	}
	if !p.Field3DeepEqual(ano.User) {
		return false
	}
	if !p.Field4DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field5DeepEqual(ano.CurrentUserIdent) {
		return false
	}
	if !p.Field6DeepEqual(ano.ShowHiddenColumns) {
		return false
	}
	if !p.Field7DeepEqual(ano.Catalog) {
		return false
	}
	return true
}

func (p *TDescribeTableParams) Field1DeepEqual(src *string) bool {

	if p.Db == src {
		return true
	} else if p.Db == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Db, *src) != 0 {
		return false
	}
	return true
}
func (p *TDescribeTableParams) Field2DeepEqual(src string) bool {

	if strings.Compare(p.TableName, src) != 0 {
		return false
	}
	return true
}
func (p *TDescribeTableParams) Field3DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *TDescribeTableParams) Field4DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TDescribeTableParams) Field5DeepEqual(src *types.TUserIdentity) bool {

	if !p.CurrentUserIdent.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TDescribeTableParams) Field6DeepEqual(src bool) bool {

	if p.ShowHiddenColumns != src {
		return false
	}
	return true
}
func (p *TDescribeTableParams) Field7DeepEqual(src *string) bool {

	if p.Catalog == src {
		return true
	} else if p.Catalog == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Catalog, *src) != 0 {
		return false
	}
	return true
}

type TDescribeTableResult_ struct {
	Columns []*TColumnDef `thrift:"columns,1,required" frugal:"1,required,list<TColumnDef>" json:"columns"`
}

func NewTDescribeTableResult_() *TDescribeTableResult_ {
	return &TDescribeTableResult_{}
}

func (p *TDescribeTableResult_) InitDefault() {
}

func (p *TDescribeTableResult_) GetColumns() (v []*TColumnDef) {
	return p.Columns
}
func (p *TDescribeTableResult_) SetColumns(val []*TColumnDef) {
	p.Columns = val
}

var fieldIDToName_TDescribeTableResult_ = map[int16]string{
	1: "columns",
}

func (p *TDescribeTableResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetColumns bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumns = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetColumns {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDescribeTableResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TDescribeTableResult_[fieldId]))
}

func (p *TDescribeTableResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TColumnDef, 0, size)
	values := make([]TColumnDef, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Columns = _field
	return nil
}

func (p *TDescribeTableResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDescribeTableResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDescribeTableResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columns", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
		return err
	}
	for _, v := range p.Columns {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDescribeTableResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDescribeTableResult_(%+v)", *p)

}

func (p *TDescribeTableResult_) DeepEqual(ano *TDescribeTableResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Columns) {
		return false
	}
	return true
}

func (p *TDescribeTableResult_) Field1DeepEqual(src []*TColumnDef) bool {

	if len(p.Columns) != len(src) {
		return false
	}
	for i, v := range p.Columns {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TDescribeTablesParams struct {
	Db                *string              `thrift:"db,1,optional" frugal:"1,optional,string" json:"db,omitempty"`
	TablesName        []string             `thrift:"tables_name,2,required" frugal:"2,required,list<string>" json:"tables_name"`
	User              *string              `thrift:"user,3,optional" frugal:"3,optional,string" json:"user,omitempty"`
	UserIp            *string              `thrift:"user_ip,4,optional" frugal:"4,optional,string" json:"user_ip,omitempty"`
	CurrentUserIdent  *types.TUserIdentity `thrift:"current_user_ident,5,optional" frugal:"5,optional,types.TUserIdentity" json:"current_user_ident,omitempty"`
	ShowHiddenColumns bool                 `thrift:"show_hidden_columns,6,optional" frugal:"6,optional,bool" json:"show_hidden_columns,omitempty"`
	Catalog           *string              `thrift:"catalog,7,optional" frugal:"7,optional,string" json:"catalog,omitempty"`
}

func NewTDescribeTablesParams() *TDescribeTablesParams {
	return &TDescribeTablesParams{

		ShowHiddenColumns: false,
	}
}

func (p *TDescribeTablesParams) InitDefault() {
	p.ShowHiddenColumns = false
}

var TDescribeTablesParams_Db_DEFAULT string

func (p *TDescribeTablesParams) GetDb() (v string) {
	if !p.IsSetDb() {
		return TDescribeTablesParams_Db_DEFAULT
	}
	return *p.Db
}

func (p *TDescribeTablesParams) GetTablesName() (v []string) {
	return p.TablesName
}

var TDescribeTablesParams_User_DEFAULT string

func (p *TDescribeTablesParams) GetUser() (v string) {
	if !p.IsSetUser() {
		return TDescribeTablesParams_User_DEFAULT
	}
	return *p.User
}

var TDescribeTablesParams_UserIp_DEFAULT string

func (p *TDescribeTablesParams) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TDescribeTablesParams_UserIp_DEFAULT
	}
	return *p.UserIp
}

var TDescribeTablesParams_CurrentUserIdent_DEFAULT *types.TUserIdentity

func (p *TDescribeTablesParams) GetCurrentUserIdent() (v *types.TUserIdentity) {
	if !p.IsSetCurrentUserIdent() {
		return TDescribeTablesParams_CurrentUserIdent_DEFAULT
	}
	return p.CurrentUserIdent
}

var TDescribeTablesParams_ShowHiddenColumns_DEFAULT bool = false

func (p *TDescribeTablesParams) GetShowHiddenColumns() (v bool) {
	if !p.IsSetShowHiddenColumns() {
		return TDescribeTablesParams_ShowHiddenColumns_DEFAULT
	}
	return p.ShowHiddenColumns
}

var TDescribeTablesParams_Catalog_DEFAULT string

func (p *TDescribeTablesParams) GetCatalog() (v string) {
	if !p.IsSetCatalog() {
		return TDescribeTablesParams_Catalog_DEFAULT
	}
	return *p.Catalog
}
func (p *TDescribeTablesParams) SetDb(val *string) {
	p.Db = val
}
func (p *TDescribeTablesParams) SetTablesName(val []string) {
	p.TablesName = val
}
func (p *TDescribeTablesParams) SetUser(val *string) {
	p.User = val
}
func (p *TDescribeTablesParams) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TDescribeTablesParams) SetCurrentUserIdent(val *types.TUserIdentity) {
	p.CurrentUserIdent = val
}
func (p *TDescribeTablesParams) SetShowHiddenColumns(val bool) {
	p.ShowHiddenColumns = val
}
func (p *TDescribeTablesParams) SetCatalog(val *string) {
	p.Catalog = val
}

var fieldIDToName_TDescribeTablesParams = map[int16]string{
	1: "db",
	2: "tables_name",
	3: "user",
	4: "user_ip",
	5: "current_user_ident",
	6: "show_hidden_columns",
	7: "catalog",
}

func (p *TDescribeTablesParams) IsSetDb() bool {
	return p.Db != nil
}

func (p *TDescribeTablesParams) IsSetUser() bool {
	return p.User != nil
}

func (p *TDescribeTablesParams) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TDescribeTablesParams) IsSetCurrentUserIdent() bool {
	return p.CurrentUserIdent != nil
}

func (p *TDescribeTablesParams) IsSetShowHiddenColumns() bool {
	return p.ShowHiddenColumns != TDescribeTablesParams_ShowHiddenColumns_DEFAULT
}

func (p *TDescribeTablesParams) IsSetCatalog() bool {
	return p.Catalog != nil
}

func (p *TDescribeTablesParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTablesName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTablesName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTablesName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDescribeTablesParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TDescribeTablesParams[fieldId]))
}

func (p *TDescribeTablesParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Db = _field
	return nil
}
func (p *TDescribeTablesParams) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TablesName = _field
	return nil
}
func (p *TDescribeTablesParams) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *TDescribeTablesParams) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TDescribeTablesParams) ReadField5(iprot thrift.TProtocol) error {
	_field := types.NewTUserIdentity()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CurrentUserIdent = _field
	return nil
}
func (p *TDescribeTablesParams) ReadField6(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShowHiddenColumns = _field
	return nil
}
func (p *TDescribeTablesParams) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Catalog = _field
	return nil
}

func (p *TDescribeTablesParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDescribeTablesParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDescribeTablesParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDb() {
		if err = oprot.WriteFieldBegin("db", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Db); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDescribeTablesParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tables_name", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.TablesName)); err != nil {
		return err
	}
	for _, v := range p.TablesName {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TDescribeTablesParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TDescribeTablesParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TDescribeTablesParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentUserIdent() {
		if err = oprot.WriteFieldBegin("current_user_ident", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CurrentUserIdent.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TDescribeTablesParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetShowHiddenColumns() {
		if err = oprot.WriteFieldBegin("show_hidden_columns", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.ShowHiddenColumns); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TDescribeTablesParams) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalog() {
		if err = oprot.WriteFieldBegin("catalog", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Catalog); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TDescribeTablesParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDescribeTablesParams(%+v)", *p)

}

func (p *TDescribeTablesParams) DeepEqual(ano *TDescribeTablesParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Db) {
		return false
	}
	if !p.Field2DeepEqual(ano.TablesName) {
		return false
	}
	if !p.Field3DeepEqual(ano.User) {
		return false
	}
	if !p.Field4DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field5DeepEqual(ano.CurrentUserIdent) {
		return false
	}
	if !p.Field6DeepEqual(ano.ShowHiddenColumns) {
		return false
	}
	if !p.Field7DeepEqual(ano.Catalog) {
		return false
	}
	return true
}

func (p *TDescribeTablesParams) Field1DeepEqual(src *string) bool {

	if p.Db == src {
		return true
	} else if p.Db == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Db, *src) != 0 {
		return false
	}
	return true
}
func (p *TDescribeTablesParams) Field2DeepEqual(src []string) bool {

	if len(p.TablesName) != len(src) {
		return false
	}
	for i, v := range p.TablesName {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TDescribeTablesParams) Field3DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *TDescribeTablesParams) Field4DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TDescribeTablesParams) Field5DeepEqual(src *types.TUserIdentity) bool {

	if !p.CurrentUserIdent.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TDescribeTablesParams) Field6DeepEqual(src bool) bool {

	if p.ShowHiddenColumns != src {
		return false
	}
	return true
}
func (p *TDescribeTablesParams) Field7DeepEqual(src *string) bool {

	if p.Catalog == src {
		return true
	} else if p.Catalog == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Catalog, *src) != 0 {
		return false
	}
	return true
}

type TDescribeTablesResult_ struct {
	TablesOffset []int32       `thrift:"tables_offset,1,required" frugal:"1,required,list<i32>" json:"tables_offset"`
	Columns      []*TColumnDef `thrift:"columns,2,required" frugal:"2,required,list<TColumnDef>" json:"columns"`
}

func NewTDescribeTablesResult_() *TDescribeTablesResult_ {
	return &TDescribeTablesResult_{}
}

func (p *TDescribeTablesResult_) InitDefault() {
}

func (p *TDescribeTablesResult_) GetTablesOffset() (v []int32) {
	return p.TablesOffset
}

func (p *TDescribeTablesResult_) GetColumns() (v []*TColumnDef) {
	return p.Columns
}
func (p *TDescribeTablesResult_) SetTablesOffset(val []int32) {
	p.TablesOffset = val
}
func (p *TDescribeTablesResult_) SetColumns(val []*TColumnDef) {
	p.Columns = val
}

var fieldIDToName_TDescribeTablesResult_ = map[int16]string{
	1: "tables_offset",
	2: "columns",
}

func (p *TDescribeTablesResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTablesOffset bool = false
	var issetColumns bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTablesOffset = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumns = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTablesOffset {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetColumns {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDescribeTablesResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TDescribeTablesResult_[fieldId]))
}

func (p *TDescribeTablesResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TablesOffset = _field
	return nil
}
func (p *TDescribeTablesResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TColumnDef, 0, size)
	values := make([]TColumnDef, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Columns = _field
	return nil
}

func (p *TDescribeTablesResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDescribeTablesResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDescribeTablesResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tables_offset", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.TablesOffset)); err != nil {
		return err
	}
	for _, v := range p.TablesOffset {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDescribeTablesResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
		return err
	}
	for _, v := range p.Columns {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TDescribeTablesResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDescribeTablesResult_(%+v)", *p)

}

func (p *TDescribeTablesResult_) DeepEqual(ano *TDescribeTablesResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TablesOffset) {
		return false
	}
	if !p.Field2DeepEqual(ano.Columns) {
		return false
	}
	return true
}

func (p *TDescribeTablesResult_) Field1DeepEqual(src []int32) bool {

	if len(p.TablesOffset) != len(src) {
		return false
	}
	for i, v := range p.TablesOffset {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TDescribeTablesResult_) Field2DeepEqual(src []*TColumnDef) bool {

	if len(p.Columns) != len(src) {
		return false
	}
	for i, v := range p.Columns {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TShowVariableRequest struct {
	ThreadId int64          `thrift:"threadId,1,required" frugal:"1,required,i64" json:"threadId"`
	VarType  types.TVarType `thrift:"varType,2,required" frugal:"2,required,TVarType" json:"varType"`
}

func NewTShowVariableRequest() *TShowVariableRequest {
	return &TShowVariableRequest{}
}

func (p *TShowVariableRequest) InitDefault() {
}

func (p *TShowVariableRequest) GetThreadId() (v int64) {
	return p.ThreadId
}

func (p *TShowVariableRequest) GetVarType() (v types.TVarType) {
	return p.VarType
}
func (p *TShowVariableRequest) SetThreadId(val int64) {
	p.ThreadId = val
}
func (p *TShowVariableRequest) SetVarType(val types.TVarType) {
	p.VarType = val
}

var fieldIDToName_TShowVariableRequest = map[int16]string{
	1: "threadId",
	2: "varType",
}

func (p *TShowVariableRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetThreadId bool = false
	var issetVarType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetThreadId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetVarType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetThreadId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetVarType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TShowVariableRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TShowVariableRequest[fieldId]))
}

func (p *TShowVariableRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ThreadId = _field
	return nil
}
func (p *TShowVariableRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TVarType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TVarType(v)
	}
	p.VarType = _field
	return nil
}

func (p *TShowVariableRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TShowVariableRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TShowVariableRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("threadId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ThreadId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TShowVariableRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("varType", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.VarType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TShowVariableRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TShowVariableRequest(%+v)", *p)

}

func (p *TShowVariableRequest) DeepEqual(ano *TShowVariableRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ThreadId) {
		return false
	}
	if !p.Field2DeepEqual(ano.VarType) {
		return false
	}
	return true
}

func (p *TShowVariableRequest) Field1DeepEqual(src int64) bool {

	if p.ThreadId != src {
		return false
	}
	return true
}
func (p *TShowVariableRequest) Field2DeepEqual(src types.TVarType) bool {

	if p.VarType != src {
		return false
	}
	return true
}

type TShowVariableResult_ struct {
	Variables [][]string `thrift:"variables,1,required" frugal:"1,required,list<list<string>>" json:"variables"`
}

func NewTShowVariableResult_() *TShowVariableResult_ {
	return &TShowVariableResult_{}
}

func (p *TShowVariableResult_) InitDefault() {
}

func (p *TShowVariableResult_) GetVariables() (v [][]string) {
	return p.Variables
}
func (p *TShowVariableResult_) SetVariables(val [][]string) {
	p.Variables = val
}

var fieldIDToName_TShowVariableResult_ = map[int16]string{
	1: "variables",
}

func (p *TShowVariableResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetVariables bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetVariables = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetVariables {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TShowVariableResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TShowVariableResult_[fieldId]))
}

func (p *TShowVariableResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]string, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]string, 0, size)
		for i := 0; i < size; i++ {

			var _elem1 string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem1 = v
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Variables = _field
	return nil
}

func (p *TShowVariableResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TShowVariableResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TShowVariableResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("variables", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.Variables)); err != nil {
		return err
	}
	for _, v := range p.Variables {
		if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TShowVariableResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TShowVariableResult_(%+v)", *p)

}

func (p *TShowVariableResult_) DeepEqual(ano *TShowVariableResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Variables) {
		return false
	}
	return true
}

func (p *TShowVariableResult_) Field1DeepEqual(src [][]string) bool {

	if len(p.Variables) != len(src) {
		return false
	}
	for i, v := range p.Variables {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if strings.Compare(v, _src1) != 0 {
				return false
			}
		}
	}
	return true
}

type TTableRowFormat struct {
	FieldTerminator *string `thrift:"field_terminator,1,optional" frugal:"1,optional,string" json:"field_terminator,omitempty"`
	LineTerminator  *string `thrift:"line_terminator,2,optional" frugal:"2,optional,string" json:"line_terminator,omitempty"`
	EscapedBy       *string `thrift:"escaped_by,3,optional" frugal:"3,optional,string" json:"escaped_by,omitempty"`
}

func NewTTableRowFormat() *TTableRowFormat {
	return &TTableRowFormat{}
}

func (p *TTableRowFormat) InitDefault() {
}

var TTableRowFormat_FieldTerminator_DEFAULT string

func (p *TTableRowFormat) GetFieldTerminator() (v string) {
	if !p.IsSetFieldTerminator() {
		return TTableRowFormat_FieldTerminator_DEFAULT
	}
	return *p.FieldTerminator
}

var TTableRowFormat_LineTerminator_DEFAULT string

func (p *TTableRowFormat) GetLineTerminator() (v string) {
	if !p.IsSetLineTerminator() {
		return TTableRowFormat_LineTerminator_DEFAULT
	}
	return *p.LineTerminator
}

var TTableRowFormat_EscapedBy_DEFAULT string

func (p *TTableRowFormat) GetEscapedBy() (v string) {
	if !p.IsSetEscapedBy() {
		return TTableRowFormat_EscapedBy_DEFAULT
	}
	return *p.EscapedBy
}
func (p *TTableRowFormat) SetFieldTerminator(val *string) {
	p.FieldTerminator = val
}
func (p *TTableRowFormat) SetLineTerminator(val *string) {
	p.LineTerminator = val
}
func (p *TTableRowFormat) SetEscapedBy(val *string) {
	p.EscapedBy = val
}

var fieldIDToName_TTableRowFormat = map[int16]string{
	1: "field_terminator",
	2: "line_terminator",
	3: "escaped_by",
}

func (p *TTableRowFormat) IsSetFieldTerminator() bool {
	return p.FieldTerminator != nil
}

func (p *TTableRowFormat) IsSetLineTerminator() bool {
	return p.LineTerminator != nil
}

func (p *TTableRowFormat) IsSetEscapedBy() bool {
	return p.EscapedBy != nil
}

func (p *TTableRowFormat) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTableRowFormat[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTableRowFormat) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FieldTerminator = _field
	return nil
}
func (p *TTableRowFormat) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LineTerminator = _field
	return nil
}
func (p *TTableRowFormat) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EscapedBy = _field
	return nil
}

func (p *TTableRowFormat) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTableRowFormat"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTableRowFormat) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFieldTerminator() {
		if err = oprot.WriteFieldBegin("field_terminator", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FieldTerminator); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTableRowFormat) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLineTerminator() {
		if err = oprot.WriteFieldBegin("line_terminator", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LineTerminator); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTableRowFormat) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEscapedBy() {
		if err = oprot.WriteFieldBegin("escaped_by", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EscapedBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTableRowFormat) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTableRowFormat(%+v)", *p)

}

func (p *TTableRowFormat) DeepEqual(ano *TTableRowFormat) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FieldTerminator) {
		return false
	}
	if !p.Field2DeepEqual(ano.LineTerminator) {
		return false
	}
	if !p.Field3DeepEqual(ano.EscapedBy) {
		return false
	}
	return true
}

func (p *TTableRowFormat) Field1DeepEqual(src *string) bool {

	if p.FieldTerminator == src {
		return true
	} else if p.FieldTerminator == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FieldTerminator, *src) != 0 {
		return false
	}
	return true
}
func (p *TTableRowFormat) Field2DeepEqual(src *string) bool {

	if p.LineTerminator == src {
		return true
	} else if p.LineTerminator == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LineTerminator, *src) != 0 {
		return false
	}
	return true
}
func (p *TTableRowFormat) Field3DeepEqual(src *string) bool {

	if p.EscapedBy == src {
		return true
	} else if p.EscapedBy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EscapedBy, *src) != 0 {
		return false
	}
	return true
}

type TPartitionKeyValue struct {
	Name  string `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	Value string `thrift:"value,2,required" frugal:"2,required,string" json:"value"`
}

func NewTPartitionKeyValue() *TPartitionKeyValue {
	return &TPartitionKeyValue{}
}

func (p *TPartitionKeyValue) InitDefault() {
}

func (p *TPartitionKeyValue) GetName() (v string) {
	return p.Name
}

func (p *TPartitionKeyValue) GetValue() (v string) {
	return p.Value
}
func (p *TPartitionKeyValue) SetName(val string) {
	p.Name = val
}
func (p *TPartitionKeyValue) SetValue(val string) {
	p.Value = val
}

var fieldIDToName_TPartitionKeyValue = map[int16]string{
	1: "name",
	2: "value",
}

func (p *TPartitionKeyValue) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetValue bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetValue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetValue {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPartitionKeyValue[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPartitionKeyValue[fieldId]))
}

func (p *TPartitionKeyValue) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *TPartitionKeyValue) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}

func (p *TPartitionKeyValue) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPartitionKeyValue"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPartitionKeyValue) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPartitionKeyValue) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPartitionKeyValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPartitionKeyValue(%+v)", *p)

}

func (p *TPartitionKeyValue) DeepEqual(ano *TPartitionKeyValue) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Value) {
		return false
	}
	return true
}

func (p *TPartitionKeyValue) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *TPartitionKeyValue) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Value, src) != 0 {
		return false
	}
	return true
}

type TSessionState struct {
	Database     string `thrift:"database,1,required" frugal:"1,required,string" json:"database"`
	User         string `thrift:"user,2,required" frugal:"2,required,string" json:"user"`
	ConnectionId int64  `thrift:"connection_id,3,required" frugal:"3,required,i64" json:"connection_id"`
}

func NewTSessionState() *TSessionState {
	return &TSessionState{}
}

func (p *TSessionState) InitDefault() {
}

func (p *TSessionState) GetDatabase() (v string) {
	return p.Database
}

func (p *TSessionState) GetUser() (v string) {
	return p.User
}

func (p *TSessionState) GetConnectionId() (v int64) {
	return p.ConnectionId
}
func (p *TSessionState) SetDatabase(val string) {
	p.Database = val
}
func (p *TSessionState) SetUser(val string) {
	p.User = val
}
func (p *TSessionState) SetConnectionId(val int64) {
	p.ConnectionId = val
}

var fieldIDToName_TSessionState = map[int16]string{
	1: "database",
	2: "user",
	3: "connection_id",
}

func (p *TSessionState) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatabase bool = false
	var issetUser bool = false
	var issetConnectionId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatabase = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUser = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetConnectionId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatabase {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUser {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetConnectionId {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TSessionState[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TSessionState[fieldId]))
}

func (p *TSessionState) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Database = _field
	return nil
}
func (p *TSessionState) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.User = _field
	return nil
}
func (p *TSessionState) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ConnectionId = _field
	return nil
}

func (p *TSessionState) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TSessionState"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TSessionState) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("database", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Database); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TSessionState) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.User); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TSessionState) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("connection_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ConnectionId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TSessionState) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSessionState(%+v)", *p)

}

func (p *TSessionState) DeepEqual(ano *TSessionState) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Database) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.ConnectionId) {
		return false
	}
	return true
}

func (p *TSessionState) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Database, src) != 0 {
		return false
	}
	return true
}
func (p *TSessionState) Field2DeepEqual(src string) bool {

	if strings.Compare(p.User, src) != 0 {
		return false
	}
	return true
}
func (p *TSessionState) Field3DeepEqual(src int64) bool {

	if p.ConnectionId != src {
		return false
	}
	return true
}

type TClientRequest struct {
	Stmt         string                             `thrift:"stmt,1,required" frugal:"1,required,string" json:"stmt"`
	QueryOptions *palointernalservice.TQueryOptions `thrift:"queryOptions,2,required" frugal:"2,required,palointernalservice.TQueryOptions" json:"queryOptions"`
	SessionState *TSessionState                     `thrift:"sessionState,3,required" frugal:"3,required,TSessionState" json:"sessionState"`
}

func NewTClientRequest() *TClientRequest {
	return &TClientRequest{}
}

func (p *TClientRequest) InitDefault() {
}

func (p *TClientRequest) GetStmt() (v string) {
	return p.Stmt
}

var TClientRequest_QueryOptions_DEFAULT *palointernalservice.TQueryOptions

func (p *TClientRequest) GetQueryOptions() (v *palointernalservice.TQueryOptions) {
	if !p.IsSetQueryOptions() {
		return TClientRequest_QueryOptions_DEFAULT
	}
	return p.QueryOptions
}

var TClientRequest_SessionState_DEFAULT *TSessionState

func (p *TClientRequest) GetSessionState() (v *TSessionState) {
	if !p.IsSetSessionState() {
		return TClientRequest_SessionState_DEFAULT
	}
	return p.SessionState
}
func (p *TClientRequest) SetStmt(val string) {
	p.Stmt = val
}
func (p *TClientRequest) SetQueryOptions(val *palointernalservice.TQueryOptions) {
	p.QueryOptions = val
}
func (p *TClientRequest) SetSessionState(val *TSessionState) {
	p.SessionState = val
}

var fieldIDToName_TClientRequest = map[int16]string{
	1: "stmt",
	2: "queryOptions",
	3: "sessionState",
}

func (p *TClientRequest) IsSetQueryOptions() bool {
	return p.QueryOptions != nil
}

func (p *TClientRequest) IsSetSessionState() bool {
	return p.SessionState != nil
}

func (p *TClientRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStmt bool = false
	var issetQueryOptions bool = false
	var issetSessionState bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStmt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetQueryOptions = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSessionState = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStmt {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetQueryOptions {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSessionState {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TClientRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TClientRequest[fieldId]))
}

func (p *TClientRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Stmt = _field
	return nil
}
func (p *TClientRequest) ReadField2(iprot thrift.TProtocol) error {
	_field := palointernalservice.NewTQueryOptions()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryOptions = _field
	return nil
}
func (p *TClientRequest) ReadField3(iprot thrift.TProtocol) error {
	_field := NewTSessionState()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SessionState = _field
	return nil
}

func (p *TClientRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TClientRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TClientRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("stmt", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Stmt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TClientRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("queryOptions", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.QueryOptions.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TClientRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sessionState", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.SessionState.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TClientRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TClientRequest(%+v)", *p)

}

func (p *TClientRequest) DeepEqual(ano *TClientRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Stmt) {
		return false
	}
	if !p.Field2DeepEqual(ano.QueryOptions) {
		return false
	}
	if !p.Field3DeepEqual(ano.SessionState) {
		return false
	}
	return true
}

func (p *TClientRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Stmt, src) != 0 {
		return false
	}
	return true
}
func (p *TClientRequest) Field2DeepEqual(src *palointernalservice.TQueryOptions) bool {

	if !p.QueryOptions.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TClientRequest) Field3DeepEqual(src *TSessionState) bool {

	if !p.SessionState.DeepEqual(src) {
		return false
	}
	return true
}

type TExplainParams struct {
	Explain string `thrift:"explain,1,required" frugal:"1,required,string" json:"explain"`
}

func NewTExplainParams() *TExplainParams {
	return &TExplainParams{}
}

func (p *TExplainParams) InitDefault() {
}

func (p *TExplainParams) GetExplain() (v string) {
	return p.Explain
}
func (p *TExplainParams) SetExplain(val string) {
	p.Explain = val
}

var fieldIDToName_TExplainParams = map[int16]string{
	1: "explain",
}

func (p *TExplainParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetExplain bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetExplain = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetExplain {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExplainParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TExplainParams[fieldId]))
}

func (p *TExplainParams) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Explain = _field
	return nil
}

func (p *TExplainParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TExplainParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TExplainParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("explain", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Explain); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TExplainParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExplainParams(%+v)", *p)

}

func (p *TExplainParams) DeepEqual(ano *TExplainParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Explain) {
		return false
	}
	return true
}

func (p *TExplainParams) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Explain, src) != 0 {
		return false
	}
	return true
}

type TSetVar struct {
	Type     TSetType     `thrift:"type,1,required" frugal:"1,required,TSetType" json:"type"`
	Variable string       `thrift:"variable,2,required" frugal:"2,required,string" json:"variable"`
	Value    *exprs.TExpr `thrift:"value,3,required" frugal:"3,required,exprs.TExpr" json:"value"`
}

func NewTSetVar() *TSetVar {
	return &TSetVar{}
}

func (p *TSetVar) InitDefault() {
}

func (p *TSetVar) GetType() (v TSetType) {
	return p.Type
}

func (p *TSetVar) GetVariable() (v string) {
	return p.Variable
}

var TSetVar_Value_DEFAULT *exprs.TExpr

func (p *TSetVar) GetValue() (v *exprs.TExpr) {
	if !p.IsSetValue() {
		return TSetVar_Value_DEFAULT
	}
	return p.Value
}
func (p *TSetVar) SetType(val TSetType) {
	p.Type = val
}
func (p *TSetVar) SetVariable(val string) {
	p.Variable = val
}
func (p *TSetVar) SetValue(val *exprs.TExpr) {
	p.Value = val
}

var fieldIDToName_TSetVar = map[int16]string{
	1: "type",
	2: "variable",
	3: "value",
}

func (p *TSetVar) IsSetValue() bool {
	return p.Value != nil
}

func (p *TSetVar) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false
	var issetVariable bool = false
	var issetValue bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetVariable = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetValue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetVariable {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetValue {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TSetVar[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TSetVar[fieldId]))
}

func (p *TSetVar) ReadField1(iprot thrift.TProtocol) error {

	var _field TSetType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TSetType(v)
	}
	p.Type = _field
	return nil
}
func (p *TSetVar) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Variable = _field
	return nil
}
func (p *TSetVar) ReadField3(iprot thrift.TProtocol) error {
	_field := exprs.NewTExpr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Value = _field
	return nil
}

func (p *TSetVar) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TSetVar"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TSetVar) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TSetVar) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("variable", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Variable); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TSetVar) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Value.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TSetVar) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSetVar(%+v)", *p)

}

func (p *TSetVar) DeepEqual(ano *TSetVar) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.Variable) {
		return false
	}
	if !p.Field3DeepEqual(ano.Value) {
		return false
	}
	return true
}

func (p *TSetVar) Field1DeepEqual(src TSetType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *TSetVar) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Variable, src) != 0 {
		return false
	}
	return true
}
func (p *TSetVar) Field3DeepEqual(src *exprs.TExpr) bool {

	if !p.Value.DeepEqual(src) {
		return false
	}
	return true
}

type TSetParams struct {
	SetVars []*TSetVar `thrift:"set_vars,1,required" frugal:"1,required,list<TSetVar>" json:"set_vars"`
}

func NewTSetParams() *TSetParams {
	return &TSetParams{}
}

func (p *TSetParams) InitDefault() {
}

func (p *TSetParams) GetSetVars() (v []*TSetVar) {
	return p.SetVars
}
func (p *TSetParams) SetSetVars(val []*TSetVar) {
	p.SetVars = val
}

var fieldIDToName_TSetParams = map[int16]string{
	1: "set_vars",
}

func (p *TSetParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSetVars bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetSetVars = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSetVars {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TSetParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TSetParams[fieldId]))
}

func (p *TSetParams) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TSetVar, 0, size)
	values := make([]TSetVar, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SetVars = _field
	return nil
}

func (p *TSetParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TSetParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TSetParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("set_vars", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SetVars)); err != nil {
		return err
	}
	for _, v := range p.SetVars {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TSetParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSetParams(%+v)", *p)

}

func (p *TSetParams) DeepEqual(ano *TSetParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SetVars) {
		return false
	}
	return true
}

func (p *TSetParams) Field1DeepEqual(src []*TSetVar) bool {

	if len(p.SetVars) != len(src) {
		return false
	}
	for i, v := range p.SetVars {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TKillParams struct {
	IsKillConnection bool  `thrift:"is_kill_connection,1,required" frugal:"1,required,bool" json:"is_kill_connection"`
	ConnectionId     int64 `thrift:"connection_id,2,required" frugal:"2,required,i64" json:"connection_id"`
}

func NewTKillParams() *TKillParams {
	return &TKillParams{}
}

func (p *TKillParams) InitDefault() {
}

func (p *TKillParams) GetIsKillConnection() (v bool) {
	return p.IsKillConnection
}

func (p *TKillParams) GetConnectionId() (v int64) {
	return p.ConnectionId
}
func (p *TKillParams) SetIsKillConnection(val bool) {
	p.IsKillConnection = val
}
func (p *TKillParams) SetConnectionId(val int64) {
	p.ConnectionId = val
}

var fieldIDToName_TKillParams = map[int16]string{
	1: "is_kill_connection",
	2: "connection_id",
}

func (p *TKillParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetIsKillConnection bool = false
	var issetConnectionId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsKillConnection = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetConnectionId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetIsKillConnection {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetConnectionId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TKillParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TKillParams[fieldId]))
}

func (p *TKillParams) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsKillConnection = _field
	return nil
}
func (p *TKillParams) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ConnectionId = _field
	return nil
}

func (p *TKillParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TKillParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TKillParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_kill_connection", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsKillConnection); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TKillParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("connection_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ConnectionId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TKillParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TKillParams(%+v)", *p)

}

func (p *TKillParams) DeepEqual(ano *TKillParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IsKillConnection) {
		return false
	}
	if !p.Field2DeepEqual(ano.ConnectionId) {
		return false
	}
	return true
}

func (p *TKillParams) Field1DeepEqual(src bool) bool {

	if p.IsKillConnection != src {
		return false
	}
	return true
}
func (p *TKillParams) Field2DeepEqual(src int64) bool {

	if p.ConnectionId != src {
		return false
	}
	return true
}

type TCommonDdlParams struct {
}

func NewTCommonDdlParams() *TCommonDdlParams {
	return &TCommonDdlParams{}
}

func (p *TCommonDdlParams) InitDefault() {
}

var fieldIDToName_TCommonDdlParams = map[int16]string{}

func (p *TCommonDdlParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TCommonDdlParams) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("TCommonDdlParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCommonDdlParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCommonDdlParams(%+v)", *p)

}

func (p *TCommonDdlParams) DeepEqual(ano *TCommonDdlParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type TUseDbParams struct {
	Db string `thrift:"db,1,required" frugal:"1,required,string" json:"db"`
}

func NewTUseDbParams() *TUseDbParams {
	return &TUseDbParams{}
}

func (p *TUseDbParams) InitDefault() {
}

func (p *TUseDbParams) GetDb() (v string) {
	return p.Db
}
func (p *TUseDbParams) SetDb(val string) {
	p.Db = val
}

var fieldIDToName_TUseDbParams = map[int16]string{
	1: "db",
}

func (p *TUseDbParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDb bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetDb = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDb {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TUseDbParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TUseDbParams[fieldId]))
}

func (p *TUseDbParams) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Db = _field
	return nil
}

func (p *TUseDbParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TUseDbParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TUseDbParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("db", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Db); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TUseDbParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TUseDbParams(%+v)", *p)

}

func (p *TUseDbParams) DeepEqual(ano *TUseDbParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Db) {
		return false
	}
	return true
}

func (p *TUseDbParams) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Db, src) != 0 {
		return false
	}
	return true
}

type TResultSetMetadata struct {
	ColumnDescs []*TColumnDesc `thrift:"columnDescs,1,required" frugal:"1,required,list<TColumnDesc>" json:"columnDescs"`
}

func NewTResultSetMetadata() *TResultSetMetadata {
	return &TResultSetMetadata{}
}

func (p *TResultSetMetadata) InitDefault() {
}

func (p *TResultSetMetadata) GetColumnDescs() (v []*TColumnDesc) {
	return p.ColumnDescs
}
func (p *TResultSetMetadata) SetColumnDescs(val []*TColumnDesc) {
	p.ColumnDescs = val
}

var fieldIDToName_TResultSetMetadata = map[int16]string{
	1: "columnDescs",
}

func (p *TResultSetMetadata) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetColumnDescs bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumnDescs = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetColumnDescs {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TResultSetMetadata[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TResultSetMetadata[fieldId]))
}

func (p *TResultSetMetadata) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TColumnDesc, 0, size)
	values := make([]TColumnDesc, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnDescs = _field
	return nil
}

func (p *TResultSetMetadata) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TResultSetMetadata"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TResultSetMetadata) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columnDescs", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnDescs)); err != nil {
		return err
	}
	for _, v := range p.ColumnDescs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TResultSetMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TResultSetMetadata(%+v)", *p)

}

func (p *TResultSetMetadata) DeepEqual(ano *TResultSetMetadata) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnDescs) {
		return false
	}
	return true
}

func (p *TResultSetMetadata) Field1DeepEqual(src []*TColumnDesc) bool {

	if len(p.ColumnDescs) != len(src) {
		return false
	}
	for i, v := range p.ColumnDescs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TQueryExecRequest struct {
	DescTbl           *descriptors.TDescriptorTable                        `thrift:"desc_tbl,1,optional" frugal:"1,optional,descriptors.TDescriptorTable" json:"desc_tbl,omitempty"`
	Fragments         []*planner.TPlanFragment                             `thrift:"fragments,2,required" frugal:"2,required,list<planner.TPlanFragment>" json:"fragments"`
	DestFragmentIdx   []int32                                              `thrift:"dest_fragment_idx,3,optional" frugal:"3,optional,list<i32>" json:"dest_fragment_idx,omitempty"`
	PerNodeScanRanges map[types.TPlanNodeId][]*planner.TScanRangeLocations `thrift:"per_node_scan_ranges,4,optional" frugal:"4,optional,map<i32:list<planner.TScanRangeLocations>>" json:"per_node_scan_ranges,omitempty"`
	ResultSetMetadata *TResultSetMetadata                                  `thrift:"result_set_metadata,5,optional" frugal:"5,optional,TResultSetMetadata" json:"result_set_metadata,omitempty"`
	QueryGlobals      *palointernalservice.TQueryGlobals                   `thrift:"query_globals,7,required" frugal:"7,required,palointernalservice.TQueryGlobals" json:"query_globals"`
	StmtType          types.TStmtType                                      `thrift:"stmt_type,9,required" frugal:"9,required,TStmtType" json:"stmt_type"`
	IsBlockQuery      *bool                                                `thrift:"is_block_query,10,optional" frugal:"10,optional,bool" json:"is_block_query,omitempty"`
}

func NewTQueryExecRequest() *TQueryExecRequest {
	return &TQueryExecRequest{}
}

func (p *TQueryExecRequest) InitDefault() {
}

var TQueryExecRequest_DescTbl_DEFAULT *descriptors.TDescriptorTable

func (p *TQueryExecRequest) GetDescTbl() (v *descriptors.TDescriptorTable) {
	if !p.IsSetDescTbl() {
		return TQueryExecRequest_DescTbl_DEFAULT
	}
	return p.DescTbl
}

func (p *TQueryExecRequest) GetFragments() (v []*planner.TPlanFragment) {
	return p.Fragments
}

var TQueryExecRequest_DestFragmentIdx_DEFAULT []int32

func (p *TQueryExecRequest) GetDestFragmentIdx() (v []int32) {
	if !p.IsSetDestFragmentIdx() {
		return TQueryExecRequest_DestFragmentIdx_DEFAULT
	}
	return p.DestFragmentIdx
}

var TQueryExecRequest_PerNodeScanRanges_DEFAULT map[types.TPlanNodeId][]*planner.TScanRangeLocations

func (p *TQueryExecRequest) GetPerNodeScanRanges() (v map[types.TPlanNodeId][]*planner.TScanRangeLocations) {
	if !p.IsSetPerNodeScanRanges() {
		return TQueryExecRequest_PerNodeScanRanges_DEFAULT
	}
	return p.PerNodeScanRanges
}

var TQueryExecRequest_ResultSetMetadata_DEFAULT *TResultSetMetadata

func (p *TQueryExecRequest) GetResultSetMetadata() (v *TResultSetMetadata) {
	if !p.IsSetResultSetMetadata() {
		return TQueryExecRequest_ResultSetMetadata_DEFAULT
	}
	return p.ResultSetMetadata
}

var TQueryExecRequest_QueryGlobals_DEFAULT *palointernalservice.TQueryGlobals

func (p *TQueryExecRequest) GetQueryGlobals() (v *palointernalservice.TQueryGlobals) {
	if !p.IsSetQueryGlobals() {
		return TQueryExecRequest_QueryGlobals_DEFAULT
	}
	return p.QueryGlobals
}

func (p *TQueryExecRequest) GetStmtType() (v types.TStmtType) {
	return p.StmtType
}

var TQueryExecRequest_IsBlockQuery_DEFAULT bool

func (p *TQueryExecRequest) GetIsBlockQuery() (v bool) {
	if !p.IsSetIsBlockQuery() {
		return TQueryExecRequest_IsBlockQuery_DEFAULT
	}
	return *p.IsBlockQuery
}
func (p *TQueryExecRequest) SetDescTbl(val *descriptors.TDescriptorTable) {
	p.DescTbl = val
}
func (p *TQueryExecRequest) SetFragments(val []*planner.TPlanFragment) {
	p.Fragments = val
}
func (p *TQueryExecRequest) SetDestFragmentIdx(val []int32) {
	p.DestFragmentIdx = val
}
func (p *TQueryExecRequest) SetPerNodeScanRanges(val map[types.TPlanNodeId][]*planner.TScanRangeLocations) {
	p.PerNodeScanRanges = val
}
func (p *TQueryExecRequest) SetResultSetMetadata(val *TResultSetMetadata) {
	p.ResultSetMetadata = val
}
func (p *TQueryExecRequest) SetQueryGlobals(val *palointernalservice.TQueryGlobals) {
	p.QueryGlobals = val
}
func (p *TQueryExecRequest) SetStmtType(val types.TStmtType) {
	p.StmtType = val
}
func (p *TQueryExecRequest) SetIsBlockQuery(val *bool) {
	p.IsBlockQuery = val
}

var fieldIDToName_TQueryExecRequest = map[int16]string{
	1:  "desc_tbl",
	2:  "fragments",
	3:  "dest_fragment_idx",
	4:  "per_node_scan_ranges",
	5:  "result_set_metadata",
	7:  "query_globals",
	9:  "stmt_type",
	10: "is_block_query",
}

func (p *TQueryExecRequest) IsSetDescTbl() bool {
	return p.DescTbl != nil
}

func (p *TQueryExecRequest) IsSetDestFragmentIdx() bool {
	return p.DestFragmentIdx != nil
}

func (p *TQueryExecRequest) IsSetPerNodeScanRanges() bool {
	return p.PerNodeScanRanges != nil
}

func (p *TQueryExecRequest) IsSetResultSetMetadata() bool {
	return p.ResultSetMetadata != nil
}

func (p *TQueryExecRequest) IsSetQueryGlobals() bool {
	return p.QueryGlobals != nil
}

func (p *TQueryExecRequest) IsSetIsBlockQuery() bool {
	return p.IsBlockQuery != nil
}

func (p *TQueryExecRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFragments bool = false
	var issetQueryGlobals bool = false
	var issetStmtType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetFragments = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetQueryGlobals = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetStmtType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFragments {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetQueryGlobals {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetStmtType {
		fieldId = 9
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TQueryExecRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TQueryExecRequest[fieldId]))
}

func (p *TQueryExecRequest) ReadField1(iprot thrift.TProtocol) error {
	_field := descriptors.NewTDescriptorTable()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DescTbl = _field
	return nil
}
func (p *TQueryExecRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*planner.TPlanFragment, 0, size)
	values := make([]planner.TPlanFragment, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Fragments = _field
	return nil
}
func (p *TQueryExecRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DestFragmentIdx = _field
	return nil
}
func (p *TQueryExecRequest) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TPlanNodeId][]*planner.TScanRangeLocations, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]*planner.TScanRangeLocations, 0, size)
		values := make([]planner.TScanRangeLocations, size)
		for i := 0; i < size; i++ {
			_elem := &values[i]
			_elem.InitDefault()

			if err := _elem.Read(iprot); err != nil {
				return err
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.PerNodeScanRanges = _field
	return nil
}
func (p *TQueryExecRequest) ReadField5(iprot thrift.TProtocol) error {
	_field := NewTResultSetMetadata()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ResultSetMetadata = _field
	return nil
}
func (p *TQueryExecRequest) ReadField7(iprot thrift.TProtocol) error {
	_field := palointernalservice.NewTQueryGlobals()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryGlobals = _field
	return nil
}
func (p *TQueryExecRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field types.TStmtType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TStmtType(v)
	}
	p.StmtType = _field
	return nil
}
func (p *TQueryExecRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsBlockQuery = _field
	return nil
}

func (p *TQueryExecRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TQueryExecRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TQueryExecRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescTbl() {
		if err = oprot.WriteFieldBegin("desc_tbl", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DescTbl.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TQueryExecRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fragments", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fragments)); err != nil {
		return err
	}
	for _, v := range p.Fragments {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TQueryExecRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestFragmentIdx() {
		if err = oprot.WriteFieldBegin("dest_fragment_idx", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.DestFragmentIdx)); err != nil {
			return err
		}
		for _, v := range p.DestFragmentIdx {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TQueryExecRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPerNodeScanRanges() {
		if err = oprot.WriteFieldBegin("per_node_scan_ranges", thrift.MAP, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.PerNodeScanRanges)); err != nil {
			return err
		}
		for k, v := range p.PerNodeScanRanges {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TQueryExecRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetResultSetMetadata() {
		if err = oprot.WriteFieldBegin("result_set_metadata", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ResultSetMetadata.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TQueryExecRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("query_globals", thrift.STRUCT, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.QueryGlobals.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TQueryExecRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("stmt_type", thrift.I32, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.StmtType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TQueryExecRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsBlockQuery() {
		if err = oprot.WriteFieldBegin("is_block_query", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsBlockQuery); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TQueryExecRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TQueryExecRequest(%+v)", *p)

}

func (p *TQueryExecRequest) DeepEqual(ano *TQueryExecRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DescTbl) {
		return false
	}
	if !p.Field2DeepEqual(ano.Fragments) {
		return false
	}
	if !p.Field3DeepEqual(ano.DestFragmentIdx) {
		return false
	}
	if !p.Field4DeepEqual(ano.PerNodeScanRanges) {
		return false
	}
	if !p.Field5DeepEqual(ano.ResultSetMetadata) {
		return false
	}
	if !p.Field7DeepEqual(ano.QueryGlobals) {
		return false
	}
	if !p.Field9DeepEqual(ano.StmtType) {
		return false
	}
	if !p.Field10DeepEqual(ano.IsBlockQuery) {
		return false
	}
	return true
}

func (p *TQueryExecRequest) Field1DeepEqual(src *descriptors.TDescriptorTable) bool {

	if !p.DescTbl.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TQueryExecRequest) Field2DeepEqual(src []*planner.TPlanFragment) bool {

	if len(p.Fragments) != len(src) {
		return false
	}
	for i, v := range p.Fragments {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TQueryExecRequest) Field3DeepEqual(src []int32) bool {

	if len(p.DestFragmentIdx) != len(src) {
		return false
	}
	for i, v := range p.DestFragmentIdx {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TQueryExecRequest) Field4DeepEqual(src map[types.TPlanNodeId][]*planner.TScanRangeLocations) bool {

	if len(p.PerNodeScanRanges) != len(src) {
		return false
	}
	for k, v := range p.PerNodeScanRanges {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *TQueryExecRequest) Field5DeepEqual(src *TResultSetMetadata) bool {

	if !p.ResultSetMetadata.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TQueryExecRequest) Field7DeepEqual(src *palointernalservice.TQueryGlobals) bool {

	if !p.QueryGlobals.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TQueryExecRequest) Field9DeepEqual(src types.TStmtType) bool {

	if p.StmtType != src {
		return false
	}
	return true
}
func (p *TQueryExecRequest) Field10DeepEqual(src *bool) bool {

	if p.IsBlockQuery == src {
		return true
	} else if p.IsBlockQuery == nil || src == nil {
		return false
	}
	if *p.IsBlockQuery != *src {
		return false
	}
	return true
}

type TDdlExecRequest struct {
	DdlType             TDdlType              `thrift:"ddl_type,1,required" frugal:"1,required,TDdlType" json:"ddl_type"`
	UseDbParams         *TUseDbParams         `thrift:"use_db_params,2,optional" frugal:"2,optional,TUseDbParams" json:"use_db_params,omitempty"`
	DescribeTableParams *TDescribeTableParams `thrift:"describe_table_params,3,optional" frugal:"3,optional,TDescribeTableParams" json:"describe_table_params,omitempty"`
	ExplainParams       *TExplainParams       `thrift:"explain_params,10,optional" frugal:"10,optional,TExplainParams" json:"explain_params,omitempty"`
	SetParams           *TSetParams           `thrift:"set_params,11,optional" frugal:"11,optional,TSetParams" json:"set_params,omitempty"`
	KillParams          *TKillParams          `thrift:"kill_params,12,optional" frugal:"12,optional,TKillParams" json:"kill_params,omitempty"`
}

func NewTDdlExecRequest() *TDdlExecRequest {
	return &TDdlExecRequest{}
}

func (p *TDdlExecRequest) InitDefault() {
}

func (p *TDdlExecRequest) GetDdlType() (v TDdlType) {
	return p.DdlType
}

var TDdlExecRequest_UseDbParams_DEFAULT *TUseDbParams

func (p *TDdlExecRequest) GetUseDbParams() (v *TUseDbParams) {
	if !p.IsSetUseDbParams() {
		return TDdlExecRequest_UseDbParams_DEFAULT
	}
	return p.UseDbParams
}

var TDdlExecRequest_DescribeTableParams_DEFAULT *TDescribeTableParams

func (p *TDdlExecRequest) GetDescribeTableParams() (v *TDescribeTableParams) {
	if !p.IsSetDescribeTableParams() {
		return TDdlExecRequest_DescribeTableParams_DEFAULT
	}
	return p.DescribeTableParams
}

var TDdlExecRequest_ExplainParams_DEFAULT *TExplainParams

func (p *TDdlExecRequest) GetExplainParams() (v *TExplainParams) {
	if !p.IsSetExplainParams() {
		return TDdlExecRequest_ExplainParams_DEFAULT
	}
	return p.ExplainParams
}

var TDdlExecRequest_SetParams_DEFAULT *TSetParams

func (p *TDdlExecRequest) GetSetParams() (v *TSetParams) {
	if !p.IsSetSetParams() {
		return TDdlExecRequest_SetParams_DEFAULT
	}
	return p.SetParams
}

var TDdlExecRequest_KillParams_DEFAULT *TKillParams

func (p *TDdlExecRequest) GetKillParams() (v *TKillParams) {
	if !p.IsSetKillParams() {
		return TDdlExecRequest_KillParams_DEFAULT
	}
	return p.KillParams
}
func (p *TDdlExecRequest) SetDdlType(val TDdlType) {
	p.DdlType = val
}
func (p *TDdlExecRequest) SetUseDbParams(val *TUseDbParams) {
	p.UseDbParams = val
}
func (p *TDdlExecRequest) SetDescribeTableParams(val *TDescribeTableParams) {
	p.DescribeTableParams = val
}
func (p *TDdlExecRequest) SetExplainParams(val *TExplainParams) {
	p.ExplainParams = val
}
func (p *TDdlExecRequest) SetSetParams(val *TSetParams) {
	p.SetParams = val
}
func (p *TDdlExecRequest) SetKillParams(val *TKillParams) {
	p.KillParams = val
}

var fieldIDToName_TDdlExecRequest = map[int16]string{
	1:  "ddl_type",
	2:  "use_db_params",
	3:  "describe_table_params",
	10: "explain_params",
	11: "set_params",
	12: "kill_params",
}

func (p *TDdlExecRequest) IsSetUseDbParams() bool {
	return p.UseDbParams != nil
}

func (p *TDdlExecRequest) IsSetDescribeTableParams() bool {
	return p.DescribeTableParams != nil
}

func (p *TDdlExecRequest) IsSetExplainParams() bool {
	return p.ExplainParams != nil
}

func (p *TDdlExecRequest) IsSetSetParams() bool {
	return p.SetParams != nil
}

func (p *TDdlExecRequest) IsSetKillParams() bool {
	return p.KillParams != nil
}

func (p *TDdlExecRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDdlType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetDdlType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDdlType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDdlExecRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TDdlExecRequest[fieldId]))
}

func (p *TDdlExecRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field TDdlType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TDdlType(v)
	}
	p.DdlType = _field
	return nil
}
func (p *TDdlExecRequest) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTUseDbParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.UseDbParams = _field
	return nil
}
func (p *TDdlExecRequest) ReadField3(iprot thrift.TProtocol) error {
	_field := NewTDescribeTableParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DescribeTableParams = _field
	return nil
}
func (p *TDdlExecRequest) ReadField10(iprot thrift.TProtocol) error {
	_field := NewTExplainParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ExplainParams = _field
	return nil
}
func (p *TDdlExecRequest) ReadField11(iprot thrift.TProtocol) error {
	_field := NewTSetParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SetParams = _field
	return nil
}
func (p *TDdlExecRequest) ReadField12(iprot thrift.TProtocol) error {
	_field := NewTKillParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.KillParams = _field
	return nil
}

func (p *TDdlExecRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDdlExecRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDdlExecRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ddl_type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.DdlType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDdlExecRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUseDbParams() {
		if err = oprot.WriteFieldBegin("use_db_params", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.UseDbParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TDdlExecRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescribeTableParams() {
		if err = oprot.WriteFieldBegin("describe_table_params", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DescribeTableParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TDdlExecRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetExplainParams() {
		if err = oprot.WriteFieldBegin("explain_params", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ExplainParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TDdlExecRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSetParams() {
		if err = oprot.WriteFieldBegin("set_params", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.SetParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TDdlExecRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetKillParams() {
		if err = oprot.WriteFieldBegin("kill_params", thrift.STRUCT, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.KillParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TDdlExecRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDdlExecRequest(%+v)", *p)

}

func (p *TDdlExecRequest) DeepEqual(ano *TDdlExecRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DdlType) {
		return false
	}
	if !p.Field2DeepEqual(ano.UseDbParams) {
		return false
	}
	if !p.Field3DeepEqual(ano.DescribeTableParams) {
		return false
	}
	if !p.Field10DeepEqual(ano.ExplainParams) {
		return false
	}
	if !p.Field11DeepEqual(ano.SetParams) {
		return false
	}
	if !p.Field12DeepEqual(ano.KillParams) {
		return false
	}
	return true
}

func (p *TDdlExecRequest) Field1DeepEqual(src TDdlType) bool {

	if p.DdlType != src {
		return false
	}
	return true
}
func (p *TDdlExecRequest) Field2DeepEqual(src *TUseDbParams) bool {

	if !p.UseDbParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TDdlExecRequest) Field3DeepEqual(src *TDescribeTableParams) bool {

	if !p.DescribeTableParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TDdlExecRequest) Field10DeepEqual(src *TExplainParams) bool {

	if !p.ExplainParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TDdlExecRequest) Field11DeepEqual(src *TSetParams) bool {

	if !p.SetParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TDdlExecRequest) Field12DeepEqual(src *TKillParams) bool {

	if !p.KillParams.DeepEqual(src) {
		return false
	}
	return true
}

type TExplainResult_ struct {
	Results []*data.TResultRow `thrift:"results,1,required" frugal:"1,required,list<data.TResultRow>" json:"results"`
}

func NewTExplainResult_() *TExplainResult_ {
	return &TExplainResult_{}
}

func (p *TExplainResult_) InitDefault() {
}

func (p *TExplainResult_) GetResults() (v []*data.TResultRow) {
	return p.Results
}
func (p *TExplainResult_) SetResults(val []*data.TResultRow) {
	p.Results = val
}

var fieldIDToName_TExplainResult_ = map[int16]string{
	1: "results",
}

func (p *TExplainResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetResults bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetResults = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetResults {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExplainResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TExplainResult_[fieldId]))
}

func (p *TExplainResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*data.TResultRow, 0, size)
	values := make([]data.TResultRow, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Results = _field
	return nil
}

func (p *TExplainResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TExplainResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TExplainResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("results", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Results)); err != nil {
		return err
	}
	for _, v := range p.Results {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TExplainResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExplainResult_(%+v)", *p)

}

func (p *TExplainResult_) DeepEqual(ano *TExplainResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Results) {
		return false
	}
	return true
}

func (p *TExplainResult_) Field1DeepEqual(src []*data.TResultRow) bool {

	if len(p.Results) != len(src) {
		return false
	}
	for i, v := range p.Results {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TExecRequest struct {
	StmtType          types.TStmtType                    `thrift:"stmt_type,1,required" frugal:"1,required,TStmtType" json:"stmt_type"`
	SqlStmt           *string                            `thrift:"sql_stmt,2,optional" frugal:"2,optional,string" json:"sql_stmt,omitempty"`
	RequestId         *types.TUniqueId                   `thrift:"request_id,3,required" frugal:"3,required,types.TUniqueId" json:"request_id"`
	QueryOptions      *palointernalservice.TQueryOptions `thrift:"query_options,4,required" frugal:"4,required,palointernalservice.TQueryOptions" json:"query_options"`
	QueryExecRequest  *TQueryExecRequest                 `thrift:"query_exec_request,5,optional" frugal:"5,optional,TQueryExecRequest" json:"query_exec_request,omitempty"`
	DdlExecRequest    *TDdlExecRequest                   `thrift:"ddl_exec_request,6,optional" frugal:"6,optional,TDdlExecRequest" json:"ddl_exec_request,omitempty"`
	ResultSetMetadata *TResultSetMetadata                `thrift:"result_set_metadata,7,optional" frugal:"7,optional,TResultSetMetadata" json:"result_set_metadata,omitempty"`
	ExplainResult_    *TExplainResult_                   `thrift:"explain_result,8,optional" frugal:"8,optional,TExplainResult_" json:"explain_result,omitempty"`
}

func NewTExecRequest() *TExecRequest {
	return &TExecRequest{}
}

func (p *TExecRequest) InitDefault() {
}

func (p *TExecRequest) GetStmtType() (v types.TStmtType) {
	return p.StmtType
}

var TExecRequest_SqlStmt_DEFAULT string

func (p *TExecRequest) GetSqlStmt() (v string) {
	if !p.IsSetSqlStmt() {
		return TExecRequest_SqlStmt_DEFAULT
	}
	return *p.SqlStmt
}

var TExecRequest_RequestId_DEFAULT *types.TUniqueId

func (p *TExecRequest) GetRequestId() (v *types.TUniqueId) {
	if !p.IsSetRequestId() {
		return TExecRequest_RequestId_DEFAULT
	}
	return p.RequestId
}

var TExecRequest_QueryOptions_DEFAULT *palointernalservice.TQueryOptions

func (p *TExecRequest) GetQueryOptions() (v *palointernalservice.TQueryOptions) {
	if !p.IsSetQueryOptions() {
		return TExecRequest_QueryOptions_DEFAULT
	}
	return p.QueryOptions
}

var TExecRequest_QueryExecRequest_DEFAULT *TQueryExecRequest

func (p *TExecRequest) GetQueryExecRequest() (v *TQueryExecRequest) {
	if !p.IsSetQueryExecRequest() {
		return TExecRequest_QueryExecRequest_DEFAULT
	}
	return p.QueryExecRequest
}

var TExecRequest_DdlExecRequest_DEFAULT *TDdlExecRequest

func (p *TExecRequest) GetDdlExecRequest() (v *TDdlExecRequest) {
	if !p.IsSetDdlExecRequest() {
		return TExecRequest_DdlExecRequest_DEFAULT
	}
	return p.DdlExecRequest
}

var TExecRequest_ResultSetMetadata_DEFAULT *TResultSetMetadata

func (p *TExecRequest) GetResultSetMetadata() (v *TResultSetMetadata) {
	if !p.IsSetResultSetMetadata() {
		return TExecRequest_ResultSetMetadata_DEFAULT
	}
	return p.ResultSetMetadata
}

var TExecRequest_ExplainResult__DEFAULT *TExplainResult_

func (p *TExecRequest) GetExplainResult_() (v *TExplainResult_) {
	if !p.IsSetExplainResult_() {
		return TExecRequest_ExplainResult__DEFAULT
	}
	return p.ExplainResult_
}
func (p *TExecRequest) SetStmtType(val types.TStmtType) {
	p.StmtType = val
}
func (p *TExecRequest) SetSqlStmt(val *string) {
	p.SqlStmt = val
}
func (p *TExecRequest) SetRequestId(val *types.TUniqueId) {
	p.RequestId = val
}
func (p *TExecRequest) SetQueryOptions(val *palointernalservice.TQueryOptions) {
	p.QueryOptions = val
}
func (p *TExecRequest) SetQueryExecRequest(val *TQueryExecRequest) {
	p.QueryExecRequest = val
}
func (p *TExecRequest) SetDdlExecRequest(val *TDdlExecRequest) {
	p.DdlExecRequest = val
}
func (p *TExecRequest) SetResultSetMetadata(val *TResultSetMetadata) {
	p.ResultSetMetadata = val
}
func (p *TExecRequest) SetExplainResult_(val *TExplainResult_) {
	p.ExplainResult_ = val
}

var fieldIDToName_TExecRequest = map[int16]string{
	1: "stmt_type",
	2: "sql_stmt",
	3: "request_id",
	4: "query_options",
	5: "query_exec_request",
	6: "ddl_exec_request",
	7: "result_set_metadata",
	8: "explain_result",
}

func (p *TExecRequest) IsSetSqlStmt() bool {
	return p.SqlStmt != nil
}

func (p *TExecRequest) IsSetRequestId() bool {
	return p.RequestId != nil
}

func (p *TExecRequest) IsSetQueryOptions() bool {
	return p.QueryOptions != nil
}

func (p *TExecRequest) IsSetQueryExecRequest() bool {
	return p.QueryExecRequest != nil
}

func (p *TExecRequest) IsSetDdlExecRequest() bool {
	return p.DdlExecRequest != nil
}

func (p *TExecRequest) IsSetResultSetMetadata() bool {
	return p.ResultSetMetadata != nil
}

func (p *TExecRequest) IsSetExplainResult_() bool {
	return p.ExplainResult_ != nil
}

func (p *TExecRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStmtType bool = false
	var issetRequestId bool = false
	var issetQueryOptions bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStmtType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetRequestId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetQueryOptions = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStmtType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetRequestId {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetQueryOptions {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExecRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TExecRequest[fieldId]))
}

func (p *TExecRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TStmtType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TStmtType(v)
	}
	p.StmtType = _field
	return nil
}
func (p *TExecRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SqlStmt = _field
	return nil
}
func (p *TExecRequest) ReadField3(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.RequestId = _field
	return nil
}
func (p *TExecRequest) ReadField4(iprot thrift.TProtocol) error {
	_field := palointernalservice.NewTQueryOptions()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryOptions = _field
	return nil
}
func (p *TExecRequest) ReadField5(iprot thrift.TProtocol) error {
	_field := NewTQueryExecRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryExecRequest = _field
	return nil
}
func (p *TExecRequest) ReadField6(iprot thrift.TProtocol) error {
	_field := NewTDdlExecRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DdlExecRequest = _field
	return nil
}
func (p *TExecRequest) ReadField7(iprot thrift.TProtocol) error {
	_field := NewTResultSetMetadata()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ResultSetMetadata = _field
	return nil
}
func (p *TExecRequest) ReadField8(iprot thrift.TProtocol) error {
	_field := NewTExplainResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ExplainResult_ = _field
	return nil
}

func (p *TExecRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TExecRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TExecRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("stmt_type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.StmtType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TExecRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSqlStmt() {
		if err = oprot.WriteFieldBegin("sql_stmt", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SqlStmt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TExecRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request_id", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.RequestId.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TExecRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("query_options", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.QueryOptions.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TExecRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryExecRequest() {
		if err = oprot.WriteFieldBegin("query_exec_request", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.QueryExecRequest.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TExecRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDdlExecRequest() {
		if err = oprot.WriteFieldBegin("ddl_exec_request", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DdlExecRequest.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TExecRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetResultSetMetadata() {
		if err = oprot.WriteFieldBegin("result_set_metadata", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ResultSetMetadata.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TExecRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetExplainResult_() {
		if err = oprot.WriteFieldBegin("explain_result", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ExplainResult_.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TExecRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExecRequest(%+v)", *p)

}

func (p *TExecRequest) DeepEqual(ano *TExecRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.StmtType) {
		return false
	}
	if !p.Field2DeepEqual(ano.SqlStmt) {
		return false
	}
	if !p.Field3DeepEqual(ano.RequestId) {
		return false
	}
	if !p.Field4DeepEqual(ano.QueryOptions) {
		return false
	}
	if !p.Field5DeepEqual(ano.QueryExecRequest) {
		return false
	}
	if !p.Field6DeepEqual(ano.DdlExecRequest) {
		return false
	}
	if !p.Field7DeepEqual(ano.ResultSetMetadata) {
		return false
	}
	if !p.Field8DeepEqual(ano.ExplainResult_) {
		return false
	}
	return true
}

func (p *TExecRequest) Field1DeepEqual(src types.TStmtType) bool {

	if p.StmtType != src {
		return false
	}
	return true
}
func (p *TExecRequest) Field2DeepEqual(src *string) bool {

	if p.SqlStmt == src {
		return true
	} else if p.SqlStmt == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SqlStmt, *src) != 0 {
		return false
	}
	return true
}
func (p *TExecRequest) Field3DeepEqual(src *types.TUniqueId) bool {

	if !p.RequestId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExecRequest) Field4DeepEqual(src *palointernalservice.TQueryOptions) bool {

	if !p.QueryOptions.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExecRequest) Field5DeepEqual(src *TQueryExecRequest) bool {

	if !p.QueryExecRequest.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExecRequest) Field6DeepEqual(src *TDdlExecRequest) bool {

	if !p.DdlExecRequest.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExecRequest) Field7DeepEqual(src *TResultSetMetadata) bool {

	if !p.ResultSetMetadata.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExecRequest) Field8DeepEqual(src *TExplainResult_) bool {

	if !p.ExplainResult_.DeepEqual(src) {
		return false
	}
	return true
}

type TGetDbsParams struct {
	Pattern          *string              `thrift:"pattern,1,optional" frugal:"1,optional,string" json:"pattern,omitempty"`
	User             *string              `thrift:"user,2,optional" frugal:"2,optional,string" json:"user,omitempty"`
	UserIp           *string              `thrift:"user_ip,3,optional" frugal:"3,optional,string" json:"user_ip,omitempty"`
	CurrentUserIdent *types.TUserIdentity `thrift:"current_user_ident,4,optional" frugal:"4,optional,types.TUserIdentity" json:"current_user_ident,omitempty"`
	Catalog          *string              `thrift:"catalog,5,optional" frugal:"5,optional,string" json:"catalog,omitempty"`
	GetNullCatalog   *bool                `thrift:"get_null_catalog,6,optional" frugal:"6,optional,bool" json:"get_null_catalog,omitempty"`
}

func NewTGetDbsParams() *TGetDbsParams {
	return &TGetDbsParams{}
}

func (p *TGetDbsParams) InitDefault() {
}

var TGetDbsParams_Pattern_DEFAULT string

func (p *TGetDbsParams) GetPattern() (v string) {
	if !p.IsSetPattern() {
		return TGetDbsParams_Pattern_DEFAULT
	}
	return *p.Pattern
}

var TGetDbsParams_User_DEFAULT string

func (p *TGetDbsParams) GetUser() (v string) {
	if !p.IsSetUser() {
		return TGetDbsParams_User_DEFAULT
	}
	return *p.User
}

var TGetDbsParams_UserIp_DEFAULT string

func (p *TGetDbsParams) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TGetDbsParams_UserIp_DEFAULT
	}
	return *p.UserIp
}

var TGetDbsParams_CurrentUserIdent_DEFAULT *types.TUserIdentity

func (p *TGetDbsParams) GetCurrentUserIdent() (v *types.TUserIdentity) {
	if !p.IsSetCurrentUserIdent() {
		return TGetDbsParams_CurrentUserIdent_DEFAULT
	}
	return p.CurrentUserIdent
}

var TGetDbsParams_Catalog_DEFAULT string

func (p *TGetDbsParams) GetCatalog() (v string) {
	if !p.IsSetCatalog() {
		return TGetDbsParams_Catalog_DEFAULT
	}
	return *p.Catalog
}

var TGetDbsParams_GetNullCatalog_DEFAULT bool

func (p *TGetDbsParams) GetGetNullCatalog() (v bool) {
	if !p.IsSetGetNullCatalog() {
		return TGetDbsParams_GetNullCatalog_DEFAULT
	}
	return *p.GetNullCatalog
}
func (p *TGetDbsParams) SetPattern(val *string) {
	p.Pattern = val
}
func (p *TGetDbsParams) SetUser(val *string) {
	p.User = val
}
func (p *TGetDbsParams) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TGetDbsParams) SetCurrentUserIdent(val *types.TUserIdentity) {
	p.CurrentUserIdent = val
}
func (p *TGetDbsParams) SetCatalog(val *string) {
	p.Catalog = val
}
func (p *TGetDbsParams) SetGetNullCatalog(val *bool) {
	p.GetNullCatalog = val
}

var fieldIDToName_TGetDbsParams = map[int16]string{
	1: "pattern",
	2: "user",
	3: "user_ip",
	4: "current_user_ident",
	5: "catalog",
	6: "get_null_catalog",
}

func (p *TGetDbsParams) IsSetPattern() bool {
	return p.Pattern != nil
}

func (p *TGetDbsParams) IsSetUser() bool {
	return p.User != nil
}

func (p *TGetDbsParams) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TGetDbsParams) IsSetCurrentUserIdent() bool {
	return p.CurrentUserIdent != nil
}

func (p *TGetDbsParams) IsSetCatalog() bool {
	return p.Catalog != nil
}

func (p *TGetDbsParams) IsSetGetNullCatalog() bool {
	return p.GetNullCatalog != nil
}

func (p *TGetDbsParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetDbsParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetDbsParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Pattern = _field
	return nil
}
func (p *TGetDbsParams) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *TGetDbsParams) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TGetDbsParams) ReadField4(iprot thrift.TProtocol) error {
	_field := types.NewTUserIdentity()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CurrentUserIdent = _field
	return nil
}
func (p *TGetDbsParams) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Catalog = _field
	return nil
}
func (p *TGetDbsParams) ReadField6(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.GetNullCatalog = _field
	return nil
}

func (p *TGetDbsParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetDbsParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetDbsParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPattern() {
		if err = oprot.WriteFieldBegin("pattern", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Pattern); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetDbsParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetDbsParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetDbsParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentUserIdent() {
		if err = oprot.WriteFieldBegin("current_user_ident", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CurrentUserIdent.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TGetDbsParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalog() {
		if err = oprot.WriteFieldBegin("catalog", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Catalog); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TGetDbsParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetGetNullCatalog() {
		if err = oprot.WriteFieldBegin("get_null_catalog", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.GetNullCatalog); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TGetDbsParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetDbsParams(%+v)", *p)

}

func (p *TGetDbsParams) DeepEqual(ano *TGetDbsParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Pattern) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field4DeepEqual(ano.CurrentUserIdent) {
		return false
	}
	if !p.Field5DeepEqual(ano.Catalog) {
		return false
	}
	if !p.Field6DeepEqual(ano.GetNullCatalog) {
		return false
	}
	return true
}

func (p *TGetDbsParams) Field1DeepEqual(src *string) bool {

	if p.Pattern == src {
		return true
	} else if p.Pattern == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Pattern, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetDbsParams) Field2DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetDbsParams) Field3DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetDbsParams) Field4DeepEqual(src *types.TUserIdentity) bool {

	if !p.CurrentUserIdent.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TGetDbsParams) Field5DeepEqual(src *string) bool {

	if p.Catalog == src {
		return true
	} else if p.Catalog == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Catalog, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetDbsParams) Field6DeepEqual(src *bool) bool {

	if p.GetNullCatalog == src {
		return true
	} else if p.GetNullCatalog == nil || src == nil {
		return false
	}
	if *p.GetNullCatalog != *src {
		return false
	}
	return true
}

type TGetDbsResult_ struct {
	Dbs        []string `thrift:"dbs,1,optional" frugal:"1,optional,list<string>" json:"dbs,omitempty"`
	Catalogs   []string `thrift:"catalogs,2,optional" frugal:"2,optional,list<string>" json:"catalogs,omitempty"`
	DbIds      []int64  `thrift:"db_ids,3,optional" frugal:"3,optional,list<i64>" json:"db_ids,omitempty"`
	CatalogIds []int64  `thrift:"catalog_ids,4,optional" frugal:"4,optional,list<i64>" json:"catalog_ids,omitempty"`
}

func NewTGetDbsResult_() *TGetDbsResult_ {
	return &TGetDbsResult_{}
}

func (p *TGetDbsResult_) InitDefault() {
}

var TGetDbsResult__Dbs_DEFAULT []string

func (p *TGetDbsResult_) GetDbs() (v []string) {
	if !p.IsSetDbs() {
		return TGetDbsResult__Dbs_DEFAULT
	}
	return p.Dbs
}

var TGetDbsResult__Catalogs_DEFAULT []string

func (p *TGetDbsResult_) GetCatalogs() (v []string) {
	if !p.IsSetCatalogs() {
		return TGetDbsResult__Catalogs_DEFAULT
	}
	return p.Catalogs
}

var TGetDbsResult__DbIds_DEFAULT []int64

func (p *TGetDbsResult_) GetDbIds() (v []int64) {
	if !p.IsSetDbIds() {
		return TGetDbsResult__DbIds_DEFAULT
	}
	return p.DbIds
}

var TGetDbsResult__CatalogIds_DEFAULT []int64

func (p *TGetDbsResult_) GetCatalogIds() (v []int64) {
	if !p.IsSetCatalogIds() {
		return TGetDbsResult__CatalogIds_DEFAULT
	}
	return p.CatalogIds
}
func (p *TGetDbsResult_) SetDbs(val []string) {
	p.Dbs = val
}
func (p *TGetDbsResult_) SetCatalogs(val []string) {
	p.Catalogs = val
}
func (p *TGetDbsResult_) SetDbIds(val []int64) {
	p.DbIds = val
}
func (p *TGetDbsResult_) SetCatalogIds(val []int64) {
	p.CatalogIds = val
}

var fieldIDToName_TGetDbsResult_ = map[int16]string{
	1: "dbs",
	2: "catalogs",
	3: "db_ids",
	4: "catalog_ids",
}

func (p *TGetDbsResult_) IsSetDbs() bool {
	return p.Dbs != nil
}

func (p *TGetDbsResult_) IsSetCatalogs() bool {
	return p.Catalogs != nil
}

func (p *TGetDbsResult_) IsSetDbIds() bool {
	return p.DbIds != nil
}

func (p *TGetDbsResult_) IsSetCatalogIds() bool {
	return p.CatalogIds != nil
}

func (p *TGetDbsResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetDbsResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetDbsResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Dbs = _field
	return nil
}
func (p *TGetDbsResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Catalogs = _field
	return nil
}
func (p *TGetDbsResult_) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DbIds = _field
	return nil
}
func (p *TGetDbsResult_) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.CatalogIds = _field
	return nil
}

func (p *TGetDbsResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetDbsResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetDbsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbs() {
		if err = oprot.WriteFieldBegin("dbs", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Dbs)); err != nil {
			return err
		}
		for _, v := range p.Dbs {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetDbsResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalogs() {
		if err = oprot.WriteFieldBegin("catalogs", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Catalogs)); err != nil {
			return err
		}
		for _, v := range p.Catalogs {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetDbsResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbIds() {
		if err = oprot.WriteFieldBegin("db_ids", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.DbIds)); err != nil {
			return err
		}
		for _, v := range p.DbIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetDbsResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalogIds() {
		if err = oprot.WriteFieldBegin("catalog_ids", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.CatalogIds)); err != nil {
			return err
		}
		for _, v := range p.CatalogIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TGetDbsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetDbsResult_(%+v)", *p)

}

func (p *TGetDbsResult_) DeepEqual(ano *TGetDbsResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Dbs) {
		return false
	}
	if !p.Field2DeepEqual(ano.Catalogs) {
		return false
	}
	if !p.Field3DeepEqual(ano.DbIds) {
		return false
	}
	if !p.Field4DeepEqual(ano.CatalogIds) {
		return false
	}
	return true
}

func (p *TGetDbsResult_) Field1DeepEqual(src []string) bool {

	if len(p.Dbs) != len(src) {
		return false
	}
	for i, v := range p.Dbs {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TGetDbsResult_) Field2DeepEqual(src []string) bool {

	if len(p.Catalogs) != len(src) {
		return false
	}
	for i, v := range p.Catalogs {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TGetDbsResult_) Field3DeepEqual(src []int64) bool {

	if len(p.DbIds) != len(src) {
		return false
	}
	for i, v := range p.DbIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TGetDbsResult_) Field4DeepEqual(src []int64) bool {

	if len(p.CatalogIds) != len(src) {
		return false
	}
	for i, v := range p.CatalogIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type TGetTablesParams struct {
	Db               *string              `thrift:"db,1,optional" frugal:"1,optional,string" json:"db,omitempty"`
	Pattern          *string              `thrift:"pattern,2,optional" frugal:"2,optional,string" json:"pattern,omitempty"`
	User             *string              `thrift:"user,3,optional" frugal:"3,optional,string" json:"user,omitempty"`
	UserIp           *string              `thrift:"user_ip,4,optional" frugal:"4,optional,string" json:"user_ip,omitempty"`
	CurrentUserIdent *types.TUserIdentity `thrift:"current_user_ident,5,optional" frugal:"5,optional,types.TUserIdentity" json:"current_user_ident,omitempty"`
	Type             *string              `thrift:"type,6,optional" frugal:"6,optional,string" json:"type,omitempty"`
	Catalog          *string              `thrift:"catalog,7,optional" frugal:"7,optional,string" json:"catalog,omitempty"`
}

func NewTGetTablesParams() *TGetTablesParams {
	return &TGetTablesParams{}
}

func (p *TGetTablesParams) InitDefault() {
}

var TGetTablesParams_Db_DEFAULT string

func (p *TGetTablesParams) GetDb() (v string) {
	if !p.IsSetDb() {
		return TGetTablesParams_Db_DEFAULT
	}
	return *p.Db
}

var TGetTablesParams_Pattern_DEFAULT string

func (p *TGetTablesParams) GetPattern() (v string) {
	if !p.IsSetPattern() {
		return TGetTablesParams_Pattern_DEFAULT
	}
	return *p.Pattern
}

var TGetTablesParams_User_DEFAULT string

func (p *TGetTablesParams) GetUser() (v string) {
	if !p.IsSetUser() {
		return TGetTablesParams_User_DEFAULT
	}
	return *p.User
}

var TGetTablesParams_UserIp_DEFAULT string

func (p *TGetTablesParams) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TGetTablesParams_UserIp_DEFAULT
	}
	return *p.UserIp
}

var TGetTablesParams_CurrentUserIdent_DEFAULT *types.TUserIdentity

func (p *TGetTablesParams) GetCurrentUserIdent() (v *types.TUserIdentity) {
	if !p.IsSetCurrentUserIdent() {
		return TGetTablesParams_CurrentUserIdent_DEFAULT
	}
	return p.CurrentUserIdent
}

var TGetTablesParams_Type_DEFAULT string

func (p *TGetTablesParams) GetType() (v string) {
	if !p.IsSetType() {
		return TGetTablesParams_Type_DEFAULT
	}
	return *p.Type
}

var TGetTablesParams_Catalog_DEFAULT string

func (p *TGetTablesParams) GetCatalog() (v string) {
	if !p.IsSetCatalog() {
		return TGetTablesParams_Catalog_DEFAULT
	}
	return *p.Catalog
}
func (p *TGetTablesParams) SetDb(val *string) {
	p.Db = val
}
func (p *TGetTablesParams) SetPattern(val *string) {
	p.Pattern = val
}
func (p *TGetTablesParams) SetUser(val *string) {
	p.User = val
}
func (p *TGetTablesParams) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TGetTablesParams) SetCurrentUserIdent(val *types.TUserIdentity) {
	p.CurrentUserIdent = val
}
func (p *TGetTablesParams) SetType(val *string) {
	p.Type = val
}
func (p *TGetTablesParams) SetCatalog(val *string) {
	p.Catalog = val
}

var fieldIDToName_TGetTablesParams = map[int16]string{
	1: "db",
	2: "pattern",
	3: "user",
	4: "user_ip",
	5: "current_user_ident",
	6: "type",
	7: "catalog",
}

func (p *TGetTablesParams) IsSetDb() bool {
	return p.Db != nil
}

func (p *TGetTablesParams) IsSetPattern() bool {
	return p.Pattern != nil
}

func (p *TGetTablesParams) IsSetUser() bool {
	return p.User != nil
}

func (p *TGetTablesParams) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TGetTablesParams) IsSetCurrentUserIdent() bool {
	return p.CurrentUserIdent != nil
}

func (p *TGetTablesParams) IsSetType() bool {
	return p.Type != nil
}

func (p *TGetTablesParams) IsSetCatalog() bool {
	return p.Catalog != nil
}

func (p *TGetTablesParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetTablesParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetTablesParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Db = _field
	return nil
}
func (p *TGetTablesParams) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Pattern = _field
	return nil
}
func (p *TGetTablesParams) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *TGetTablesParams) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TGetTablesParams) ReadField5(iprot thrift.TProtocol) error {
	_field := types.NewTUserIdentity()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CurrentUserIdent = _field
	return nil
}
func (p *TGetTablesParams) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}
func (p *TGetTablesParams) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Catalog = _field
	return nil
}

func (p *TGetTablesParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetTablesParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetTablesParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDb() {
		if err = oprot.WriteFieldBegin("db", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Db); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetTablesParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPattern() {
		if err = oprot.WriteFieldBegin("pattern", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Pattern); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetTablesParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetTablesParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TGetTablesParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentUserIdent() {
		if err = oprot.WriteFieldBegin("current_user_ident", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CurrentUserIdent.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TGetTablesParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TGetTablesParams) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalog() {
		if err = oprot.WriteFieldBegin("catalog", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Catalog); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TGetTablesParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetTablesParams(%+v)", *p)

}

func (p *TGetTablesParams) DeepEqual(ano *TGetTablesParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Db) {
		return false
	}
	if !p.Field2DeepEqual(ano.Pattern) {
		return false
	}
	if !p.Field3DeepEqual(ano.User) {
		return false
	}
	if !p.Field4DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field5DeepEqual(ano.CurrentUserIdent) {
		return false
	}
	if !p.Field6DeepEqual(ano.Type) {
		return false
	}
	if !p.Field7DeepEqual(ano.Catalog) {
		return false
	}
	return true
}

func (p *TGetTablesParams) Field1DeepEqual(src *string) bool {

	if p.Db == src {
		return true
	} else if p.Db == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Db, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetTablesParams) Field2DeepEqual(src *string) bool {

	if p.Pattern == src {
		return true
	} else if p.Pattern == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Pattern, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetTablesParams) Field3DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetTablesParams) Field4DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetTablesParams) Field5DeepEqual(src *types.TUserIdentity) bool {

	if !p.CurrentUserIdent.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TGetTablesParams) Field6DeepEqual(src *string) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetTablesParams) Field7DeepEqual(src *string) bool {

	if p.Catalog == src {
		return true
	} else if p.Catalog == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Catalog, *src) != 0 {
		return false
	}
	return true
}

type TTableStatus struct {
	Name          string  `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	Type          string  `thrift:"type,2,required" frugal:"2,required,string" json:"type"`
	Comment       string  `thrift:"comment,3,required" frugal:"3,required,string" json:"comment"`
	Engine        *string `thrift:"engine,4,optional" frugal:"4,optional,string" json:"engine,omitempty"`
	LastCheckTime *int64  `thrift:"last_check_time,5,optional" frugal:"5,optional,i64" json:"last_check_time,omitempty"`
	CreateTime    *int64  `thrift:"create_time,6,optional" frugal:"6,optional,i64" json:"create_time,omitempty"`
	DdlSql        *string `thrift:"ddl_sql,7,optional" frugal:"7,optional,string" json:"ddl_sql,omitempty"`
	UpdateTime    *int64  `thrift:"update_time,8,optional" frugal:"8,optional,i64" json:"update_time,omitempty"`
	CheckTime     *int64  `thrift:"check_time,9,optional" frugal:"9,optional,i64" json:"check_time,omitempty"`
	Collation     *string `thrift:"collation,10,optional" frugal:"10,optional,string" json:"collation,omitempty"`
	Rows          *int64  `thrift:"rows,11,optional" frugal:"11,optional,i64" json:"rows,omitempty"`
	AvgRowLength  *int64  `thrift:"avg_row_length,12,optional" frugal:"12,optional,i64" json:"avg_row_length,omitempty"`
	DataLength    *int64  `thrift:"data_length,13,optional" frugal:"13,optional,i64" json:"data_length,omitempty"`
}

func NewTTableStatus() *TTableStatus {
	return &TTableStatus{}
}

func (p *TTableStatus) InitDefault() {
}

func (p *TTableStatus) GetName() (v string) {
	return p.Name
}

func (p *TTableStatus) GetType() (v string) {
	return p.Type
}

func (p *TTableStatus) GetComment() (v string) {
	return p.Comment
}

var TTableStatus_Engine_DEFAULT string

func (p *TTableStatus) GetEngine() (v string) {
	if !p.IsSetEngine() {
		return TTableStatus_Engine_DEFAULT
	}
	return *p.Engine
}

var TTableStatus_LastCheckTime_DEFAULT int64

func (p *TTableStatus) GetLastCheckTime() (v int64) {
	if !p.IsSetLastCheckTime() {
		return TTableStatus_LastCheckTime_DEFAULT
	}
	return *p.LastCheckTime
}

var TTableStatus_CreateTime_DEFAULT int64

func (p *TTableStatus) GetCreateTime() (v int64) {
	if !p.IsSetCreateTime() {
		return TTableStatus_CreateTime_DEFAULT
	}
	return *p.CreateTime
}

var TTableStatus_DdlSql_DEFAULT string

func (p *TTableStatus) GetDdlSql() (v string) {
	if !p.IsSetDdlSql() {
		return TTableStatus_DdlSql_DEFAULT
	}
	return *p.DdlSql
}

var TTableStatus_UpdateTime_DEFAULT int64

func (p *TTableStatus) GetUpdateTime() (v int64) {
	if !p.IsSetUpdateTime() {
		return TTableStatus_UpdateTime_DEFAULT
	}
	return *p.UpdateTime
}

var TTableStatus_CheckTime_DEFAULT int64

func (p *TTableStatus) GetCheckTime() (v int64) {
	if !p.IsSetCheckTime() {
		return TTableStatus_CheckTime_DEFAULT
	}
	return *p.CheckTime
}

var TTableStatus_Collation_DEFAULT string

func (p *TTableStatus) GetCollation() (v string) {
	if !p.IsSetCollation() {
		return TTableStatus_Collation_DEFAULT
	}
	return *p.Collation
}

var TTableStatus_Rows_DEFAULT int64

func (p *TTableStatus) GetRows() (v int64) {
	if !p.IsSetRows() {
		return TTableStatus_Rows_DEFAULT
	}
	return *p.Rows
}

var TTableStatus_AvgRowLength_DEFAULT int64

func (p *TTableStatus) GetAvgRowLength() (v int64) {
	if !p.IsSetAvgRowLength() {
		return TTableStatus_AvgRowLength_DEFAULT
	}
	return *p.AvgRowLength
}

var TTableStatus_DataLength_DEFAULT int64

func (p *TTableStatus) GetDataLength() (v int64) {
	if !p.IsSetDataLength() {
		return TTableStatus_DataLength_DEFAULT
	}
	return *p.DataLength
}
func (p *TTableStatus) SetName(val string) {
	p.Name = val
}
func (p *TTableStatus) SetType(val string) {
	p.Type = val
}
func (p *TTableStatus) SetComment(val string) {
	p.Comment = val
}
func (p *TTableStatus) SetEngine(val *string) {
	p.Engine = val
}
func (p *TTableStatus) SetLastCheckTime(val *int64) {
	p.LastCheckTime = val
}
func (p *TTableStatus) SetCreateTime(val *int64) {
	p.CreateTime = val
}
func (p *TTableStatus) SetDdlSql(val *string) {
	p.DdlSql = val
}
func (p *TTableStatus) SetUpdateTime(val *int64) {
	p.UpdateTime = val
}
func (p *TTableStatus) SetCheckTime(val *int64) {
	p.CheckTime = val
}
func (p *TTableStatus) SetCollation(val *string) {
	p.Collation = val
}
func (p *TTableStatus) SetRows(val *int64) {
	p.Rows = val
}
func (p *TTableStatus) SetAvgRowLength(val *int64) {
	p.AvgRowLength = val
}
func (p *TTableStatus) SetDataLength(val *int64) {
	p.DataLength = val
}

var fieldIDToName_TTableStatus = map[int16]string{
	1:  "name",
	2:  "type",
	3:  "comment",
	4:  "engine",
	5:  "last_check_time",
	6:  "create_time",
	7:  "ddl_sql",
	8:  "update_time",
	9:  "check_time",
	10: "collation",
	11: "rows",
	12: "avg_row_length",
	13: "data_length",
}

func (p *TTableStatus) IsSetEngine() bool {
	return p.Engine != nil
}

func (p *TTableStatus) IsSetLastCheckTime() bool {
	return p.LastCheckTime != nil
}

func (p *TTableStatus) IsSetCreateTime() bool {
	return p.CreateTime != nil
}

func (p *TTableStatus) IsSetDdlSql() bool {
	return p.DdlSql != nil
}

func (p *TTableStatus) IsSetUpdateTime() bool {
	return p.UpdateTime != nil
}

func (p *TTableStatus) IsSetCheckTime() bool {
	return p.CheckTime != nil
}

func (p *TTableStatus) IsSetCollation() bool {
	return p.Collation != nil
}

func (p *TTableStatus) IsSetRows() bool {
	return p.Rows != nil
}

func (p *TTableStatus) IsSetAvgRowLength() bool {
	return p.AvgRowLength != nil
}

func (p *TTableStatus) IsSetDataLength() bool {
	return p.DataLength != nil
}

func (p *TTableStatus) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetType bool = false
	var issetComment bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetComment = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetComment {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTableStatus[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTableStatus[fieldId]))
}

func (p *TTableStatus) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *TTableStatus) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *TTableStatus) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Comment = _field
	return nil
}
func (p *TTableStatus) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Engine = _field
	return nil
}
func (p *TTableStatus) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LastCheckTime = _field
	return nil
}
func (p *TTableStatus) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreateTime = _field
	return nil
}
func (p *TTableStatus) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DdlSql = _field
	return nil
}
func (p *TTableStatus) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdateTime = _field
	return nil
}
func (p *TTableStatus) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CheckTime = _field
	return nil
}
func (p *TTableStatus) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Collation = _field
	return nil
}
func (p *TTableStatus) ReadField11(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Rows = _field
	return nil
}
func (p *TTableStatus) ReadField12(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AvgRowLength = _field
	return nil
}
func (p *TTableStatus) ReadField13(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DataLength = _field
	return nil
}

func (p *TTableStatus) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTableStatus"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTableStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTableStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTableStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("comment", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Comment); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTableStatus) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEngine() {
		if err = oprot.WriteFieldBegin("engine", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Engine); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TTableStatus) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastCheckTime() {
		if err = oprot.WriteFieldBegin("last_check_time", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LastCheckTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TTableStatus) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err = oprot.WriteFieldBegin("create_time", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreateTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TTableStatus) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDdlSql() {
		if err = oprot.WriteFieldBegin("ddl_sql", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DdlSql); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TTableStatus) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateTime() {
		if err = oprot.WriteFieldBegin("update_time", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UpdateTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TTableStatus) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetCheckTime() {
		if err = oprot.WriteFieldBegin("check_time", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CheckTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TTableStatus) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCollation() {
		if err = oprot.WriteFieldBegin("collation", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Collation); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TTableStatus) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetRows() {
		if err = oprot.WriteFieldBegin("rows", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Rows); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TTableStatus) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvgRowLength() {
		if err = oprot.WriteFieldBegin("avg_row_length", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AvgRowLength); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TTableStatus) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataLength() {
		if err = oprot.WriteFieldBegin("data_length", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DataLength); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TTableStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTableStatus(%+v)", *p)

}

func (p *TTableStatus) DeepEqual(ano *TTableStatus) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	if !p.Field3DeepEqual(ano.Comment) {
		return false
	}
	if !p.Field4DeepEqual(ano.Engine) {
		return false
	}
	if !p.Field5DeepEqual(ano.LastCheckTime) {
		return false
	}
	if !p.Field6DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field7DeepEqual(ano.DdlSql) {
		return false
	}
	if !p.Field8DeepEqual(ano.UpdateTime) {
		return false
	}
	if !p.Field9DeepEqual(ano.CheckTime) {
		return false
	}
	if !p.Field10DeepEqual(ano.Collation) {
		return false
	}
	if !p.Field11DeepEqual(ano.Rows) {
		return false
	}
	if !p.Field12DeepEqual(ano.AvgRowLength) {
		return false
	}
	if !p.Field13DeepEqual(ano.DataLength) {
		return false
	}
	return true
}

func (p *TTableStatus) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *TTableStatus) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *TTableStatus) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Comment, src) != 0 {
		return false
	}
	return true
}
func (p *TTableStatus) Field4DeepEqual(src *string) bool {

	if p.Engine == src {
		return true
	} else if p.Engine == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Engine, *src) != 0 {
		return false
	}
	return true
}
func (p *TTableStatus) Field5DeepEqual(src *int64) bool {

	if p.LastCheckTime == src {
		return true
	} else if p.LastCheckTime == nil || src == nil {
		return false
	}
	if *p.LastCheckTime != *src {
		return false
	}
	return true
}
func (p *TTableStatus) Field6DeepEqual(src *int64) bool {

	if p.CreateTime == src {
		return true
	} else if p.CreateTime == nil || src == nil {
		return false
	}
	if *p.CreateTime != *src {
		return false
	}
	return true
}
func (p *TTableStatus) Field7DeepEqual(src *string) bool {

	if p.DdlSql == src {
		return true
	} else if p.DdlSql == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DdlSql, *src) != 0 {
		return false
	}
	return true
}
func (p *TTableStatus) Field8DeepEqual(src *int64) bool {

	if p.UpdateTime == src {
		return true
	} else if p.UpdateTime == nil || src == nil {
		return false
	}
	if *p.UpdateTime != *src {
		return false
	}
	return true
}
func (p *TTableStatus) Field9DeepEqual(src *int64) bool {

	if p.CheckTime == src {
		return true
	} else if p.CheckTime == nil || src == nil {
		return false
	}
	if *p.CheckTime != *src {
		return false
	}
	return true
}
func (p *TTableStatus) Field10DeepEqual(src *string) bool {

	if p.Collation == src {
		return true
	} else if p.Collation == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Collation, *src) != 0 {
		return false
	}
	return true
}
func (p *TTableStatus) Field11DeepEqual(src *int64) bool {

	if p.Rows == src {
		return true
	} else if p.Rows == nil || src == nil {
		return false
	}
	if *p.Rows != *src {
		return false
	}
	return true
}
func (p *TTableStatus) Field12DeepEqual(src *int64) bool {

	if p.AvgRowLength == src {
		return true
	} else if p.AvgRowLength == nil || src == nil {
		return false
	}
	if *p.AvgRowLength != *src {
		return false
	}
	return true
}
func (p *TTableStatus) Field13DeepEqual(src *int64) bool {

	if p.DataLength == src {
		return true
	} else if p.DataLength == nil || src == nil {
		return false
	}
	if *p.DataLength != *src {
		return false
	}
	return true
}

type TListTableStatusResult_ struct {
	Tables []*TTableStatus `thrift:"tables,1,required" frugal:"1,required,list<TTableStatus>" json:"tables"`
}

func NewTListTableStatusResult_() *TListTableStatusResult_ {
	return &TListTableStatusResult_{}
}

func (p *TListTableStatusResult_) InitDefault() {
}

func (p *TListTableStatusResult_) GetTables() (v []*TTableStatus) {
	return p.Tables
}
func (p *TListTableStatusResult_) SetTables(val []*TTableStatus) {
	p.Tables = val
}

var fieldIDToName_TListTableStatusResult_ = map[int16]string{
	1: "tables",
}

func (p *TListTableStatusResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTables bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTables = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTables {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TListTableStatusResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TListTableStatusResult_[fieldId]))
}

func (p *TListTableStatusResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTableStatus, 0, size)
	values := make([]TTableStatus, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tables = _field
	return nil
}

func (p *TListTableStatusResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TListTableStatusResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TListTableStatusResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tables", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tables)); err != nil {
		return err
	}
	for _, v := range p.Tables {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TListTableStatusResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListTableStatusResult_(%+v)", *p)

}

func (p *TListTableStatusResult_) DeepEqual(ano *TListTableStatusResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Tables) {
		return false
	}
	return true
}

func (p *TListTableStatusResult_) Field1DeepEqual(src []*TTableStatus) bool {

	if len(p.Tables) != len(src) {
		return false
	}
	for i, v := range p.Tables {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TTableMetadataNameIds struct {
	Name *string `thrift:"name,1,optional" frugal:"1,optional,string" json:"name,omitempty"`
	Id   *int64  `thrift:"id,2,optional" frugal:"2,optional,i64" json:"id,omitempty"`
}

func NewTTableMetadataNameIds() *TTableMetadataNameIds {
	return &TTableMetadataNameIds{}
}

func (p *TTableMetadataNameIds) InitDefault() {
}

var TTableMetadataNameIds_Name_DEFAULT string

func (p *TTableMetadataNameIds) GetName() (v string) {
	if !p.IsSetName() {
		return TTableMetadataNameIds_Name_DEFAULT
	}
	return *p.Name
}

var TTableMetadataNameIds_Id_DEFAULT int64

func (p *TTableMetadataNameIds) GetId() (v int64) {
	if !p.IsSetId() {
		return TTableMetadataNameIds_Id_DEFAULT
	}
	return *p.Id
}
func (p *TTableMetadataNameIds) SetName(val *string) {
	p.Name = val
}
func (p *TTableMetadataNameIds) SetId(val *int64) {
	p.Id = val
}

var fieldIDToName_TTableMetadataNameIds = map[int16]string{
	1: "name",
	2: "id",
}

func (p *TTableMetadataNameIds) IsSetName() bool {
	return p.Name != nil
}

func (p *TTableMetadataNameIds) IsSetId() bool {
	return p.Id != nil
}

func (p *TTableMetadataNameIds) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTableMetadataNameIds[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTableMetadataNameIds) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *TTableMetadataNameIds) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}

func (p *TTableMetadataNameIds) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTableMetadataNameIds"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTableMetadataNameIds) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTableMetadataNameIds) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTableMetadataNameIds) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTableMetadataNameIds(%+v)", *p)

}

func (p *TTableMetadataNameIds) DeepEqual(ano *TTableMetadataNameIds) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *TTableMetadataNameIds) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *TTableMetadataNameIds) Field2DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}

type TListTableMetadataNameIdsResult_ struct {
	Tables []*TTableMetadataNameIds `thrift:"tables,1,optional" frugal:"1,optional,list<TTableMetadataNameIds>" json:"tables,omitempty"`
}

func NewTListTableMetadataNameIdsResult_() *TListTableMetadataNameIdsResult_ {
	return &TListTableMetadataNameIdsResult_{}
}

func (p *TListTableMetadataNameIdsResult_) InitDefault() {
}

var TListTableMetadataNameIdsResult__Tables_DEFAULT []*TTableMetadataNameIds

func (p *TListTableMetadataNameIdsResult_) GetTables() (v []*TTableMetadataNameIds) {
	if !p.IsSetTables() {
		return TListTableMetadataNameIdsResult__Tables_DEFAULT
	}
	return p.Tables
}
func (p *TListTableMetadataNameIdsResult_) SetTables(val []*TTableMetadataNameIds) {
	p.Tables = val
}

var fieldIDToName_TListTableMetadataNameIdsResult_ = map[int16]string{
	1: "tables",
}

func (p *TListTableMetadataNameIdsResult_) IsSetTables() bool {
	return p.Tables != nil
}

func (p *TListTableMetadataNameIdsResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TListTableMetadataNameIdsResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TListTableMetadataNameIdsResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTableMetadataNameIds, 0, size)
	values := make([]TTableMetadataNameIds, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tables = _field
	return nil
}

func (p *TListTableMetadataNameIdsResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TListTableMetadataNameIdsResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TListTableMetadataNameIdsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTables() {
		if err = oprot.WriteFieldBegin("tables", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tables)); err != nil {
			return err
		}
		for _, v := range p.Tables {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TListTableMetadataNameIdsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListTableMetadataNameIdsResult_(%+v)", *p)

}

func (p *TListTableMetadataNameIdsResult_) DeepEqual(ano *TListTableMetadataNameIdsResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Tables) {
		return false
	}
	return true
}

func (p *TListTableMetadataNameIdsResult_) Field1DeepEqual(src []*TTableMetadataNameIds) bool {

	if len(p.Tables) != len(src) {
		return false
	}
	for i, v := range p.Tables {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TGetTablesResult_ struct {
	Tables []string `thrift:"tables,1" frugal:"1,default,list<string>" json:"tables"`
}

func NewTGetTablesResult_() *TGetTablesResult_ {
	return &TGetTablesResult_{}
}

func (p *TGetTablesResult_) InitDefault() {
}

func (p *TGetTablesResult_) GetTables() (v []string) {
	return p.Tables
}
func (p *TGetTablesResult_) SetTables(val []string) {
	p.Tables = val
}

var fieldIDToName_TGetTablesResult_ = map[int16]string{
	1: "tables",
}

func (p *TGetTablesResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetTablesResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetTablesResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tables = _field
	return nil
}

func (p *TGetTablesResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetTablesResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetTablesResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tables", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Tables)); err != nil {
		return err
	}
	for _, v := range p.Tables {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetTablesResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetTablesResult_(%+v)", *p)

}

func (p *TGetTablesResult_) DeepEqual(ano *TGetTablesResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Tables) {
		return false
	}
	return true
}

func (p *TGetTablesResult_) Field1DeepEqual(src []string) bool {

	if len(p.Tables) != len(src) {
		return false
	}
	for i, v := range p.Tables {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type TPrivilegeStatus struct {
	TableName     *string `thrift:"table_name,1,optional" frugal:"1,optional,string" json:"table_name,omitempty"`
	PrivilegeType *string `thrift:"privilege_type,2,optional" frugal:"2,optional,string" json:"privilege_type,omitempty"`
	Grantee       *string `thrift:"grantee,3,optional" frugal:"3,optional,string" json:"grantee,omitempty"`
	Schema        *string `thrift:"schema,4,optional" frugal:"4,optional,string" json:"schema,omitempty"`
	IsGrantable   *string `thrift:"is_grantable,5,optional" frugal:"5,optional,string" json:"is_grantable,omitempty"`
}

func NewTPrivilegeStatus() *TPrivilegeStatus {
	return &TPrivilegeStatus{}
}

func (p *TPrivilegeStatus) InitDefault() {
}

var TPrivilegeStatus_TableName_DEFAULT string

func (p *TPrivilegeStatus) GetTableName() (v string) {
	if !p.IsSetTableName() {
		return TPrivilegeStatus_TableName_DEFAULT
	}
	return *p.TableName
}

var TPrivilegeStatus_PrivilegeType_DEFAULT string

func (p *TPrivilegeStatus) GetPrivilegeType() (v string) {
	if !p.IsSetPrivilegeType() {
		return TPrivilegeStatus_PrivilegeType_DEFAULT
	}
	return *p.PrivilegeType
}

var TPrivilegeStatus_Grantee_DEFAULT string

func (p *TPrivilegeStatus) GetGrantee() (v string) {
	if !p.IsSetGrantee() {
		return TPrivilegeStatus_Grantee_DEFAULT
	}
	return *p.Grantee
}

var TPrivilegeStatus_Schema_DEFAULT string

func (p *TPrivilegeStatus) GetSchema() (v string) {
	if !p.IsSetSchema() {
		return TPrivilegeStatus_Schema_DEFAULT
	}
	return *p.Schema
}

var TPrivilegeStatus_IsGrantable_DEFAULT string

func (p *TPrivilegeStatus) GetIsGrantable() (v string) {
	if !p.IsSetIsGrantable() {
		return TPrivilegeStatus_IsGrantable_DEFAULT
	}
	return *p.IsGrantable
}
func (p *TPrivilegeStatus) SetTableName(val *string) {
	p.TableName = val
}
func (p *TPrivilegeStatus) SetPrivilegeType(val *string) {
	p.PrivilegeType = val
}
func (p *TPrivilegeStatus) SetGrantee(val *string) {
	p.Grantee = val
}
func (p *TPrivilegeStatus) SetSchema(val *string) {
	p.Schema = val
}
func (p *TPrivilegeStatus) SetIsGrantable(val *string) {
	p.IsGrantable = val
}

var fieldIDToName_TPrivilegeStatus = map[int16]string{
	1: "table_name",
	2: "privilege_type",
	3: "grantee",
	4: "schema",
	5: "is_grantable",
}

func (p *TPrivilegeStatus) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *TPrivilegeStatus) IsSetPrivilegeType() bool {
	return p.PrivilegeType != nil
}

func (p *TPrivilegeStatus) IsSetGrantee() bool {
	return p.Grantee != nil
}

func (p *TPrivilegeStatus) IsSetSchema() bool {
	return p.Schema != nil
}

func (p *TPrivilegeStatus) IsSetIsGrantable() bool {
	return p.IsGrantable != nil
}

func (p *TPrivilegeStatus) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPrivilegeStatus[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TPrivilegeStatus) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableName = _field
	return nil
}
func (p *TPrivilegeStatus) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PrivilegeType = _field
	return nil
}
func (p *TPrivilegeStatus) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Grantee = _field
	return nil
}
func (p *TPrivilegeStatus) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Schema = _field
	return nil
}
func (p *TPrivilegeStatus) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsGrantable = _field
	return nil
}

func (p *TPrivilegeStatus) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPrivilegeStatus"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPrivilegeStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err = oprot.WriteFieldBegin("table_name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TableName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPrivilegeStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilegeType() {
		if err = oprot.WriteFieldBegin("privilege_type", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PrivilegeType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPrivilegeStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetGrantee() {
		if err = oprot.WriteFieldBegin("grantee", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Grantee); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPrivilegeStatus) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchema() {
		if err = oprot.WriteFieldBegin("schema", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Schema); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TPrivilegeStatus) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsGrantable() {
		if err = oprot.WriteFieldBegin("is_grantable", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.IsGrantable); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TPrivilegeStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPrivilegeStatus(%+v)", *p)

}

func (p *TPrivilegeStatus) DeepEqual(ano *TPrivilegeStatus) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TableName) {
		return false
	}
	if !p.Field2DeepEqual(ano.PrivilegeType) {
		return false
	}
	if !p.Field3DeepEqual(ano.Grantee) {
		return false
	}
	if !p.Field4DeepEqual(ano.Schema) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsGrantable) {
		return false
	}
	return true
}

func (p *TPrivilegeStatus) Field1DeepEqual(src *string) bool {

	if p.TableName == src {
		return true
	} else if p.TableName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TableName, *src) != 0 {
		return false
	}
	return true
}
func (p *TPrivilegeStatus) Field2DeepEqual(src *string) bool {

	if p.PrivilegeType == src {
		return true
	} else if p.PrivilegeType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PrivilegeType, *src) != 0 {
		return false
	}
	return true
}
func (p *TPrivilegeStatus) Field3DeepEqual(src *string) bool {

	if p.Grantee == src {
		return true
	} else if p.Grantee == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Grantee, *src) != 0 {
		return false
	}
	return true
}
func (p *TPrivilegeStatus) Field4DeepEqual(src *string) bool {

	if p.Schema == src {
		return true
	} else if p.Schema == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Schema, *src) != 0 {
		return false
	}
	return true
}
func (p *TPrivilegeStatus) Field5DeepEqual(src *string) bool {

	if p.IsGrantable == src {
		return true
	} else if p.IsGrantable == nil || src == nil {
		return false
	}
	if strings.Compare(*p.IsGrantable, *src) != 0 {
		return false
	}
	return true
}

type TListPrivilegesResult_ struct {
	Privileges []*TPrivilegeStatus `thrift:"privileges,1,required" frugal:"1,required,list<TPrivilegeStatus>" json:"privileges"`
}

func NewTListPrivilegesResult_() *TListPrivilegesResult_ {
	return &TListPrivilegesResult_{}
}

func (p *TListPrivilegesResult_) InitDefault() {
}

func (p *TListPrivilegesResult_) GetPrivileges() (v []*TPrivilegeStatus) {
	return p.Privileges
}
func (p *TListPrivilegesResult_) SetPrivileges(val []*TPrivilegeStatus) {
	p.Privileges = val
}

var fieldIDToName_TListPrivilegesResult_ = map[int16]string{
	1: "privileges",
}

func (p *TListPrivilegesResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPrivileges bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPrivileges = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPrivileges {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TListPrivilegesResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TListPrivilegesResult_[fieldId]))
}

func (p *TListPrivilegesResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TPrivilegeStatus, 0, size)
	values := make([]TPrivilegeStatus, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Privileges = _field
	return nil
}

func (p *TListPrivilegesResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TListPrivilegesResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TListPrivilegesResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("privileges", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Privileges)); err != nil {
		return err
	}
	for _, v := range p.Privileges {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TListPrivilegesResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListPrivilegesResult_(%+v)", *p)

}

func (p *TListPrivilegesResult_) DeepEqual(ano *TListPrivilegesResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Privileges) {
		return false
	}
	return true
}

func (p *TListPrivilegesResult_) Field1DeepEqual(src []*TPrivilegeStatus) bool {

	if len(p.Privileges) != len(src) {
		return false
	}
	for i, v := range p.Privileges {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TReportExecStatusResult_ struct {
	Status *status.TStatus `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
}

func NewTReportExecStatusResult_() *TReportExecStatusResult_ {
	return &TReportExecStatusResult_{}
}

func (p *TReportExecStatusResult_) InitDefault() {
}

var TReportExecStatusResult__Status_DEFAULT *status.TStatus

func (p *TReportExecStatusResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TReportExecStatusResult__Status_DEFAULT
	}
	return p.Status
}
func (p *TReportExecStatusResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}

var fieldIDToName_TReportExecStatusResult_ = map[int16]string{
	1: "status",
}

func (p *TReportExecStatusResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TReportExecStatusResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TReportExecStatusResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TReportExecStatusResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}

func (p *TReportExecStatusResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TReportExecStatusResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TReportExecStatusResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TReportExecStatusResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TReportExecStatusResult_(%+v)", *p)

}

func (p *TReportExecStatusResult_) DeepEqual(ano *TReportExecStatusResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *TReportExecStatusResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type TDetailedReportParams struct {
	FragmentInstanceId *types.TUniqueId                    `thrift:"fragment_instance_id,1,optional" frugal:"1,optional,types.TUniqueId" json:"fragment_instance_id,omitempty"`
	Profile            *runtimeprofile.TRuntimeProfileTree `thrift:"profile,2,optional" frugal:"2,optional,runtimeprofile.TRuntimeProfileTree" json:"profile,omitempty"`
	LoadChannelProfile *runtimeprofile.TRuntimeProfileTree `thrift:"loadChannelProfile,3,optional" frugal:"3,optional,runtimeprofile.TRuntimeProfileTree" json:"loadChannelProfile,omitempty"`
	IsFragmentLevel    *bool                               `thrift:"is_fragment_level,4,optional" frugal:"4,optional,bool" json:"is_fragment_level,omitempty"`
}

func NewTDetailedReportParams() *TDetailedReportParams {
	return &TDetailedReportParams{}
}

func (p *TDetailedReportParams) InitDefault() {
}

var TDetailedReportParams_FragmentInstanceId_DEFAULT *types.TUniqueId

func (p *TDetailedReportParams) GetFragmentInstanceId() (v *types.TUniqueId) {
	if !p.IsSetFragmentInstanceId() {
		return TDetailedReportParams_FragmentInstanceId_DEFAULT
	}
	return p.FragmentInstanceId
}

var TDetailedReportParams_Profile_DEFAULT *runtimeprofile.TRuntimeProfileTree

func (p *TDetailedReportParams) GetProfile() (v *runtimeprofile.TRuntimeProfileTree) {
	if !p.IsSetProfile() {
		return TDetailedReportParams_Profile_DEFAULT
	}
	return p.Profile
}

var TDetailedReportParams_LoadChannelProfile_DEFAULT *runtimeprofile.TRuntimeProfileTree

func (p *TDetailedReportParams) GetLoadChannelProfile() (v *runtimeprofile.TRuntimeProfileTree) {
	if !p.IsSetLoadChannelProfile() {
		return TDetailedReportParams_LoadChannelProfile_DEFAULT
	}
	return p.LoadChannelProfile
}

var TDetailedReportParams_IsFragmentLevel_DEFAULT bool

func (p *TDetailedReportParams) GetIsFragmentLevel() (v bool) {
	if !p.IsSetIsFragmentLevel() {
		return TDetailedReportParams_IsFragmentLevel_DEFAULT
	}
	return *p.IsFragmentLevel
}
func (p *TDetailedReportParams) SetFragmentInstanceId(val *types.TUniqueId) {
	p.FragmentInstanceId = val
}
func (p *TDetailedReportParams) SetProfile(val *runtimeprofile.TRuntimeProfileTree) {
	p.Profile = val
}
func (p *TDetailedReportParams) SetLoadChannelProfile(val *runtimeprofile.TRuntimeProfileTree) {
	p.LoadChannelProfile = val
}
func (p *TDetailedReportParams) SetIsFragmentLevel(val *bool) {
	p.IsFragmentLevel = val
}

var fieldIDToName_TDetailedReportParams = map[int16]string{
	1: "fragment_instance_id",
	2: "profile",
	3: "loadChannelProfile",
	4: "is_fragment_level",
}

func (p *TDetailedReportParams) IsSetFragmentInstanceId() bool {
	return p.FragmentInstanceId != nil
}

func (p *TDetailedReportParams) IsSetProfile() bool {
	return p.Profile != nil
}

func (p *TDetailedReportParams) IsSetLoadChannelProfile() bool {
	return p.LoadChannelProfile != nil
}

func (p *TDetailedReportParams) IsSetIsFragmentLevel() bool {
	return p.IsFragmentLevel != nil
}

func (p *TDetailedReportParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDetailedReportParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TDetailedReportParams) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FragmentInstanceId = _field
	return nil
}
func (p *TDetailedReportParams) ReadField2(iprot thrift.TProtocol) error {
	_field := runtimeprofile.NewTRuntimeProfileTree()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Profile = _field
	return nil
}
func (p *TDetailedReportParams) ReadField3(iprot thrift.TProtocol) error {
	_field := runtimeprofile.NewTRuntimeProfileTree()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.LoadChannelProfile = _field
	return nil
}
func (p *TDetailedReportParams) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsFragmentLevel = _field
	return nil
}

func (p *TDetailedReportParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDetailedReportParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDetailedReportParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFragmentInstanceId() {
		if err = oprot.WriteFieldBegin("fragment_instance_id", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FragmentInstanceId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDetailedReportParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetProfile() {
		if err = oprot.WriteFieldBegin("profile", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Profile.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TDetailedReportParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadChannelProfile() {
		if err = oprot.WriteFieldBegin("loadChannelProfile", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.LoadChannelProfile.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TDetailedReportParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsFragmentLevel() {
		if err = oprot.WriteFieldBegin("is_fragment_level", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsFragmentLevel); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TDetailedReportParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDetailedReportParams(%+v)", *p)

}

func (p *TDetailedReportParams) DeepEqual(ano *TDetailedReportParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FragmentInstanceId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Profile) {
		return false
	}
	if !p.Field3DeepEqual(ano.LoadChannelProfile) {
		return false
	}
	if !p.Field4DeepEqual(ano.IsFragmentLevel) {
		return false
	}
	return true
}

func (p *TDetailedReportParams) Field1DeepEqual(src *types.TUniqueId) bool {

	if !p.FragmentInstanceId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TDetailedReportParams) Field2DeepEqual(src *runtimeprofile.TRuntimeProfileTree) bool {

	if !p.Profile.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TDetailedReportParams) Field3DeepEqual(src *runtimeprofile.TRuntimeProfileTree) bool {

	if !p.LoadChannelProfile.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TDetailedReportParams) Field4DeepEqual(src *bool) bool {

	if p.IsFragmentLevel == src {
		return true
	} else if p.IsFragmentLevel == nil || src == nil {
		return false
	}
	if *p.IsFragmentLevel != *src {
		return false
	}
	return true
}

type TQueryStatistics struct {
	ScanRows                   *int64 `thrift:"scan_rows,1,optional" frugal:"1,optional,i64" json:"scan_rows,omitempty"`
	ScanBytes                  *int64 `thrift:"scan_bytes,2,optional" frugal:"2,optional,i64" json:"scan_bytes,omitempty"`
	ReturnedRows               *int64 `thrift:"returned_rows,3,optional" frugal:"3,optional,i64" json:"returned_rows,omitempty"`
	CpuMs                      *int64 `thrift:"cpu_ms,4,optional" frugal:"4,optional,i64" json:"cpu_ms,omitempty"`
	MaxPeakMemoryBytes         *int64 `thrift:"max_peak_memory_bytes,5,optional" frugal:"5,optional,i64" json:"max_peak_memory_bytes,omitempty"`
	CurrentUsedMemoryBytes     *int64 `thrift:"current_used_memory_bytes,6,optional" frugal:"6,optional,i64" json:"current_used_memory_bytes,omitempty"`
	WorkloadGroupId            *int64 `thrift:"workload_group_id,7,optional" frugal:"7,optional,i64" json:"workload_group_id,omitempty"`
	ShuffleSendBytes           *int64 `thrift:"shuffle_send_bytes,8,optional" frugal:"8,optional,i64" json:"shuffle_send_bytes,omitempty"`
	ShuffleSendRows            *int64 `thrift:"shuffle_send_rows,9,optional" frugal:"9,optional,i64" json:"shuffle_send_rows,omitempty"`
	ScanBytesFromLocalStorage  *int64 `thrift:"scan_bytes_from_local_storage,10,optional" frugal:"10,optional,i64" json:"scan_bytes_from_local_storage,omitempty"`
	ScanBytesFromRemoteStorage *int64 `thrift:"scan_bytes_from_remote_storage,11,optional" frugal:"11,optional,i64" json:"scan_bytes_from_remote_storage,omitempty"`
}

func NewTQueryStatistics() *TQueryStatistics {
	return &TQueryStatistics{}
}

func (p *TQueryStatistics) InitDefault() {
}

var TQueryStatistics_ScanRows_DEFAULT int64

func (p *TQueryStatistics) GetScanRows() (v int64) {
	if !p.IsSetScanRows() {
		return TQueryStatistics_ScanRows_DEFAULT
	}
	return *p.ScanRows
}

var TQueryStatistics_ScanBytes_DEFAULT int64

func (p *TQueryStatistics) GetScanBytes() (v int64) {
	if !p.IsSetScanBytes() {
		return TQueryStatistics_ScanBytes_DEFAULT
	}
	return *p.ScanBytes
}

var TQueryStatistics_ReturnedRows_DEFAULT int64

func (p *TQueryStatistics) GetReturnedRows() (v int64) {
	if !p.IsSetReturnedRows() {
		return TQueryStatistics_ReturnedRows_DEFAULT
	}
	return *p.ReturnedRows
}

var TQueryStatistics_CpuMs_DEFAULT int64

func (p *TQueryStatistics) GetCpuMs() (v int64) {
	if !p.IsSetCpuMs() {
		return TQueryStatistics_CpuMs_DEFAULT
	}
	return *p.CpuMs
}

var TQueryStatistics_MaxPeakMemoryBytes_DEFAULT int64

func (p *TQueryStatistics) GetMaxPeakMemoryBytes() (v int64) {
	if !p.IsSetMaxPeakMemoryBytes() {
		return TQueryStatistics_MaxPeakMemoryBytes_DEFAULT
	}
	return *p.MaxPeakMemoryBytes
}

var TQueryStatistics_CurrentUsedMemoryBytes_DEFAULT int64

func (p *TQueryStatistics) GetCurrentUsedMemoryBytes() (v int64) {
	if !p.IsSetCurrentUsedMemoryBytes() {
		return TQueryStatistics_CurrentUsedMemoryBytes_DEFAULT
	}
	return *p.CurrentUsedMemoryBytes
}

var TQueryStatistics_WorkloadGroupId_DEFAULT int64

func (p *TQueryStatistics) GetWorkloadGroupId() (v int64) {
	if !p.IsSetWorkloadGroupId() {
		return TQueryStatistics_WorkloadGroupId_DEFAULT
	}
	return *p.WorkloadGroupId
}

var TQueryStatistics_ShuffleSendBytes_DEFAULT int64

func (p *TQueryStatistics) GetShuffleSendBytes() (v int64) {
	if !p.IsSetShuffleSendBytes() {
		return TQueryStatistics_ShuffleSendBytes_DEFAULT
	}
	return *p.ShuffleSendBytes
}

var TQueryStatistics_ShuffleSendRows_DEFAULT int64

func (p *TQueryStatistics) GetShuffleSendRows() (v int64) {
	if !p.IsSetShuffleSendRows() {
		return TQueryStatistics_ShuffleSendRows_DEFAULT
	}
	return *p.ShuffleSendRows
}

var TQueryStatistics_ScanBytesFromLocalStorage_DEFAULT int64

func (p *TQueryStatistics) GetScanBytesFromLocalStorage() (v int64) {
	if !p.IsSetScanBytesFromLocalStorage() {
		return TQueryStatistics_ScanBytesFromLocalStorage_DEFAULT
	}
	return *p.ScanBytesFromLocalStorage
}

var TQueryStatistics_ScanBytesFromRemoteStorage_DEFAULT int64

func (p *TQueryStatistics) GetScanBytesFromRemoteStorage() (v int64) {
	if !p.IsSetScanBytesFromRemoteStorage() {
		return TQueryStatistics_ScanBytesFromRemoteStorage_DEFAULT
	}
	return *p.ScanBytesFromRemoteStorage
}
func (p *TQueryStatistics) SetScanRows(val *int64) {
	p.ScanRows = val
}
func (p *TQueryStatistics) SetScanBytes(val *int64) {
	p.ScanBytes = val
}
func (p *TQueryStatistics) SetReturnedRows(val *int64) {
	p.ReturnedRows = val
}
func (p *TQueryStatistics) SetCpuMs(val *int64) {
	p.CpuMs = val
}
func (p *TQueryStatistics) SetMaxPeakMemoryBytes(val *int64) {
	p.MaxPeakMemoryBytes = val
}
func (p *TQueryStatistics) SetCurrentUsedMemoryBytes(val *int64) {
	p.CurrentUsedMemoryBytes = val
}
func (p *TQueryStatistics) SetWorkloadGroupId(val *int64) {
	p.WorkloadGroupId = val
}
func (p *TQueryStatistics) SetShuffleSendBytes(val *int64) {
	p.ShuffleSendBytes = val
}
func (p *TQueryStatistics) SetShuffleSendRows(val *int64) {
	p.ShuffleSendRows = val
}
func (p *TQueryStatistics) SetScanBytesFromLocalStorage(val *int64) {
	p.ScanBytesFromLocalStorage = val
}
func (p *TQueryStatistics) SetScanBytesFromRemoteStorage(val *int64) {
	p.ScanBytesFromRemoteStorage = val
}

var fieldIDToName_TQueryStatistics = map[int16]string{
	1:  "scan_rows",
	2:  "scan_bytes",
	3:  "returned_rows",
	4:  "cpu_ms",
	5:  "max_peak_memory_bytes",
	6:  "current_used_memory_bytes",
	7:  "workload_group_id",
	8:  "shuffle_send_bytes",
	9:  "shuffle_send_rows",
	10: "scan_bytes_from_local_storage",
	11: "scan_bytes_from_remote_storage",
}

func (p *TQueryStatistics) IsSetScanRows() bool {
	return p.ScanRows != nil
}

func (p *TQueryStatistics) IsSetScanBytes() bool {
	return p.ScanBytes != nil
}

func (p *TQueryStatistics) IsSetReturnedRows() bool {
	return p.ReturnedRows != nil
}

func (p *TQueryStatistics) IsSetCpuMs() bool {
	return p.CpuMs != nil
}

func (p *TQueryStatistics) IsSetMaxPeakMemoryBytes() bool {
	return p.MaxPeakMemoryBytes != nil
}

func (p *TQueryStatistics) IsSetCurrentUsedMemoryBytes() bool {
	return p.CurrentUsedMemoryBytes != nil
}

func (p *TQueryStatistics) IsSetWorkloadGroupId() bool {
	return p.WorkloadGroupId != nil
}

func (p *TQueryStatistics) IsSetShuffleSendBytes() bool {
	return p.ShuffleSendBytes != nil
}

func (p *TQueryStatistics) IsSetShuffleSendRows() bool {
	return p.ShuffleSendRows != nil
}

func (p *TQueryStatistics) IsSetScanBytesFromLocalStorage() bool {
	return p.ScanBytesFromLocalStorage != nil
}

func (p *TQueryStatistics) IsSetScanBytesFromRemoteStorage() bool {
	return p.ScanBytesFromRemoteStorage != nil
}

func (p *TQueryStatistics) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TQueryStatistics[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TQueryStatistics) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ScanRows = _field
	return nil
}
func (p *TQueryStatistics) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ScanBytes = _field
	return nil
}
func (p *TQueryStatistics) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReturnedRows = _field
	return nil
}
func (p *TQueryStatistics) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CpuMs = _field
	return nil
}
func (p *TQueryStatistics) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxPeakMemoryBytes = _field
	return nil
}
func (p *TQueryStatistics) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CurrentUsedMemoryBytes = _field
	return nil
}
func (p *TQueryStatistics) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkloadGroupId = _field
	return nil
}
func (p *TQueryStatistics) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ShuffleSendBytes = _field
	return nil
}
func (p *TQueryStatistics) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ShuffleSendRows = _field
	return nil
}
func (p *TQueryStatistics) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ScanBytesFromLocalStorage = _field
	return nil
}
func (p *TQueryStatistics) ReadField11(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ScanBytesFromRemoteStorage = _field
	return nil
}

func (p *TQueryStatistics) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TQueryStatistics"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TQueryStatistics) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetScanRows() {
		if err = oprot.WriteFieldBegin("scan_rows", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ScanRows); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TQueryStatistics) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetScanBytes() {
		if err = oprot.WriteFieldBegin("scan_bytes", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ScanBytes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TQueryStatistics) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReturnedRows() {
		if err = oprot.WriteFieldBegin("returned_rows", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ReturnedRows); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TQueryStatistics) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpuMs() {
		if err = oprot.WriteFieldBegin("cpu_ms", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CpuMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TQueryStatistics) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxPeakMemoryBytes() {
		if err = oprot.WriteFieldBegin("max_peak_memory_bytes", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxPeakMemoryBytes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TQueryStatistics) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentUsedMemoryBytes() {
		if err = oprot.WriteFieldBegin("current_used_memory_bytes", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CurrentUsedMemoryBytes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TQueryStatistics) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkloadGroupId() {
		if err = oprot.WriteFieldBegin("workload_group_id", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkloadGroupId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TQueryStatistics) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetShuffleSendBytes() {
		if err = oprot.WriteFieldBegin("shuffle_send_bytes", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ShuffleSendBytes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TQueryStatistics) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetShuffleSendRows() {
		if err = oprot.WriteFieldBegin("shuffle_send_rows", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ShuffleSendRows); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TQueryStatistics) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetScanBytesFromLocalStorage() {
		if err = oprot.WriteFieldBegin("scan_bytes_from_local_storage", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ScanBytesFromLocalStorage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TQueryStatistics) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetScanBytesFromRemoteStorage() {
		if err = oprot.WriteFieldBegin("scan_bytes_from_remote_storage", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ScanBytesFromRemoteStorage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TQueryStatistics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TQueryStatistics(%+v)", *p)

}

func (p *TQueryStatistics) DeepEqual(ano *TQueryStatistics) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ScanRows) {
		return false
	}
	if !p.Field2DeepEqual(ano.ScanBytes) {
		return false
	}
	if !p.Field3DeepEqual(ano.ReturnedRows) {
		return false
	}
	if !p.Field4DeepEqual(ano.CpuMs) {
		return false
	}
	if !p.Field5DeepEqual(ano.MaxPeakMemoryBytes) {
		return false
	}
	if !p.Field6DeepEqual(ano.CurrentUsedMemoryBytes) {
		return false
	}
	if !p.Field7DeepEqual(ano.WorkloadGroupId) {
		return false
	}
	if !p.Field8DeepEqual(ano.ShuffleSendBytes) {
		return false
	}
	if !p.Field9DeepEqual(ano.ShuffleSendRows) {
		return false
	}
	if !p.Field10DeepEqual(ano.ScanBytesFromLocalStorage) {
		return false
	}
	if !p.Field11DeepEqual(ano.ScanBytesFromRemoteStorage) {
		return false
	}
	return true
}

func (p *TQueryStatistics) Field1DeepEqual(src *int64) bool {

	if p.ScanRows == src {
		return true
	} else if p.ScanRows == nil || src == nil {
		return false
	}
	if *p.ScanRows != *src {
		return false
	}
	return true
}
func (p *TQueryStatistics) Field2DeepEqual(src *int64) bool {

	if p.ScanBytes == src {
		return true
	} else if p.ScanBytes == nil || src == nil {
		return false
	}
	if *p.ScanBytes != *src {
		return false
	}
	return true
}
func (p *TQueryStatistics) Field3DeepEqual(src *int64) bool {

	if p.ReturnedRows == src {
		return true
	} else if p.ReturnedRows == nil || src == nil {
		return false
	}
	if *p.ReturnedRows != *src {
		return false
	}
	return true
}
func (p *TQueryStatistics) Field4DeepEqual(src *int64) bool {

	if p.CpuMs == src {
		return true
	} else if p.CpuMs == nil || src == nil {
		return false
	}
	if *p.CpuMs != *src {
		return false
	}
	return true
}
func (p *TQueryStatistics) Field5DeepEqual(src *int64) bool {

	if p.MaxPeakMemoryBytes == src {
		return true
	} else if p.MaxPeakMemoryBytes == nil || src == nil {
		return false
	}
	if *p.MaxPeakMemoryBytes != *src {
		return false
	}
	return true
}
func (p *TQueryStatistics) Field6DeepEqual(src *int64) bool {

	if p.CurrentUsedMemoryBytes == src {
		return true
	} else if p.CurrentUsedMemoryBytes == nil || src == nil {
		return false
	}
	if *p.CurrentUsedMemoryBytes != *src {
		return false
	}
	return true
}
func (p *TQueryStatistics) Field7DeepEqual(src *int64) bool {

	if p.WorkloadGroupId == src {
		return true
	} else if p.WorkloadGroupId == nil || src == nil {
		return false
	}
	if *p.WorkloadGroupId != *src {
		return false
	}
	return true
}
func (p *TQueryStatistics) Field8DeepEqual(src *int64) bool {

	if p.ShuffleSendBytes == src {
		return true
	} else if p.ShuffleSendBytes == nil || src == nil {
		return false
	}
	if *p.ShuffleSendBytes != *src {
		return false
	}
	return true
}
func (p *TQueryStatistics) Field9DeepEqual(src *int64) bool {

	if p.ShuffleSendRows == src {
		return true
	} else if p.ShuffleSendRows == nil || src == nil {
		return false
	}
	if *p.ShuffleSendRows != *src {
		return false
	}
	return true
}
func (p *TQueryStatistics) Field10DeepEqual(src *int64) bool {

	if p.ScanBytesFromLocalStorage == src {
		return true
	} else if p.ScanBytesFromLocalStorage == nil || src == nil {
		return false
	}
	if *p.ScanBytesFromLocalStorage != *src {
		return false
	}
	return true
}
func (p *TQueryStatistics) Field11DeepEqual(src *int64) bool {

	if p.ScanBytesFromRemoteStorage == src {
		return true
	} else if p.ScanBytesFromRemoteStorage == nil || src == nil {
		return false
	}
	if *p.ScanBytesFromRemoteStorage != *src {
		return false
	}
	return true
}

type TReportWorkloadRuntimeStatusParams struct {
	BackendId          *int64                       `thrift:"backend_id,1,optional" frugal:"1,optional,i64" json:"backend_id,omitempty"`
	QueryStatisticsMap map[string]*TQueryStatistics `thrift:"query_statistics_map,2,optional" frugal:"2,optional,map<string:TQueryStatistics>" json:"query_statistics_map,omitempty"`
}

func NewTReportWorkloadRuntimeStatusParams() *TReportWorkloadRuntimeStatusParams {
	return &TReportWorkloadRuntimeStatusParams{}
}

func (p *TReportWorkloadRuntimeStatusParams) InitDefault() {
}

var TReportWorkloadRuntimeStatusParams_BackendId_DEFAULT int64

func (p *TReportWorkloadRuntimeStatusParams) GetBackendId() (v int64) {
	if !p.IsSetBackendId() {
		return TReportWorkloadRuntimeStatusParams_BackendId_DEFAULT
	}
	return *p.BackendId
}

var TReportWorkloadRuntimeStatusParams_QueryStatisticsMap_DEFAULT map[string]*TQueryStatistics

func (p *TReportWorkloadRuntimeStatusParams) GetQueryStatisticsMap() (v map[string]*TQueryStatistics) {
	if !p.IsSetQueryStatisticsMap() {
		return TReportWorkloadRuntimeStatusParams_QueryStatisticsMap_DEFAULT
	}
	return p.QueryStatisticsMap
}
func (p *TReportWorkloadRuntimeStatusParams) SetBackendId(val *int64) {
	p.BackendId = val
}
func (p *TReportWorkloadRuntimeStatusParams) SetQueryStatisticsMap(val map[string]*TQueryStatistics) {
	p.QueryStatisticsMap = val
}

var fieldIDToName_TReportWorkloadRuntimeStatusParams = map[int16]string{
	1: "backend_id",
	2: "query_statistics_map",
}

func (p *TReportWorkloadRuntimeStatusParams) IsSetBackendId() bool {
	return p.BackendId != nil
}

func (p *TReportWorkloadRuntimeStatusParams) IsSetQueryStatisticsMap() bool {
	return p.QueryStatisticsMap != nil
}

func (p *TReportWorkloadRuntimeStatusParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TReportWorkloadRuntimeStatusParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TReportWorkloadRuntimeStatusParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BackendId = _field
	return nil
}
func (p *TReportWorkloadRuntimeStatusParams) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]*TQueryStatistics, size)
	values := make([]TQueryStatistics, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.QueryStatisticsMap = _field
	return nil
}

func (p *TReportWorkloadRuntimeStatusParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TReportWorkloadRuntimeStatusParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TReportWorkloadRuntimeStatusParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackendId() {
		if err = oprot.WriteFieldBegin("backend_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BackendId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TReportWorkloadRuntimeStatusParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryStatisticsMap() {
		if err = oprot.WriteFieldBegin("query_statistics_map", thrift.MAP, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.QueryStatisticsMap)); err != nil {
			return err
		}
		for k, v := range p.QueryStatisticsMap {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TReportWorkloadRuntimeStatusParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TReportWorkloadRuntimeStatusParams(%+v)", *p)

}

func (p *TReportWorkloadRuntimeStatusParams) DeepEqual(ano *TReportWorkloadRuntimeStatusParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BackendId) {
		return false
	}
	if !p.Field2DeepEqual(ano.QueryStatisticsMap) {
		return false
	}
	return true
}

func (p *TReportWorkloadRuntimeStatusParams) Field1DeepEqual(src *int64) bool {

	if p.BackendId == src {
		return true
	} else if p.BackendId == nil || src == nil {
		return false
	}
	if *p.BackendId != *src {
		return false
	}
	return true
}
func (p *TReportWorkloadRuntimeStatusParams) Field2DeepEqual(src map[string]*TQueryStatistics) bool {

	if len(p.QueryStatisticsMap) != len(src) {
		return false
	}
	for k, v := range p.QueryStatisticsMap {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TQueryProfile struct {
	QueryId             *types.TUniqueId                      `thrift:"query_id,1,optional" frugal:"1,optional,types.TUniqueId" json:"query_id,omitempty"`
	FragmentIdToProfile map[int32][]*TDetailedReportParams    `thrift:"fragment_id_to_profile,2,optional" frugal:"2,optional,map<i32:list<TDetailedReportParams>>" json:"fragment_id_to_profile,omitempty"`
	FragmentInstanceIds []*types.TUniqueId                    `thrift:"fragment_instance_ids,3,optional" frugal:"3,optional,list<types.TUniqueId>" json:"fragment_instance_ids,omitempty"`
	InstanceProfiles    []*runtimeprofile.TRuntimeProfileTree `thrift:"instance_profiles,4,optional" frugal:"4,optional,list<runtimeprofile.TRuntimeProfileTree>" json:"instance_profiles,omitempty"`
	LoadChannelProfiles []*runtimeprofile.TRuntimeProfileTree `thrift:"load_channel_profiles,5,optional" frugal:"5,optional,list<runtimeprofile.TRuntimeProfileTree>" json:"load_channel_profiles,omitempty"`
}

func NewTQueryProfile() *TQueryProfile {
	return &TQueryProfile{}
}

func (p *TQueryProfile) InitDefault() {
}

var TQueryProfile_QueryId_DEFAULT *types.TUniqueId

func (p *TQueryProfile) GetQueryId() (v *types.TUniqueId) {
	if !p.IsSetQueryId() {
		return TQueryProfile_QueryId_DEFAULT
	}
	return p.QueryId
}

var TQueryProfile_FragmentIdToProfile_DEFAULT map[int32][]*TDetailedReportParams

func (p *TQueryProfile) GetFragmentIdToProfile() (v map[int32][]*TDetailedReportParams) {
	if !p.IsSetFragmentIdToProfile() {
		return TQueryProfile_FragmentIdToProfile_DEFAULT
	}
	return p.FragmentIdToProfile
}

var TQueryProfile_FragmentInstanceIds_DEFAULT []*types.TUniqueId

func (p *TQueryProfile) GetFragmentInstanceIds() (v []*types.TUniqueId) {
	if !p.IsSetFragmentInstanceIds() {
		return TQueryProfile_FragmentInstanceIds_DEFAULT
	}
	return p.FragmentInstanceIds
}

var TQueryProfile_InstanceProfiles_DEFAULT []*runtimeprofile.TRuntimeProfileTree

func (p *TQueryProfile) GetInstanceProfiles() (v []*runtimeprofile.TRuntimeProfileTree) {
	if !p.IsSetInstanceProfiles() {
		return TQueryProfile_InstanceProfiles_DEFAULT
	}
	return p.InstanceProfiles
}

var TQueryProfile_LoadChannelProfiles_DEFAULT []*runtimeprofile.TRuntimeProfileTree

func (p *TQueryProfile) GetLoadChannelProfiles() (v []*runtimeprofile.TRuntimeProfileTree) {
	if !p.IsSetLoadChannelProfiles() {
		return TQueryProfile_LoadChannelProfiles_DEFAULT
	}
	return p.LoadChannelProfiles
}
func (p *TQueryProfile) SetQueryId(val *types.TUniqueId) {
	p.QueryId = val
}
func (p *TQueryProfile) SetFragmentIdToProfile(val map[int32][]*TDetailedReportParams) {
	p.FragmentIdToProfile = val
}
func (p *TQueryProfile) SetFragmentInstanceIds(val []*types.TUniqueId) {
	p.FragmentInstanceIds = val
}
func (p *TQueryProfile) SetInstanceProfiles(val []*runtimeprofile.TRuntimeProfileTree) {
	p.InstanceProfiles = val
}
func (p *TQueryProfile) SetLoadChannelProfiles(val []*runtimeprofile.TRuntimeProfileTree) {
	p.LoadChannelProfiles = val
}

var fieldIDToName_TQueryProfile = map[int16]string{
	1: "query_id",
	2: "fragment_id_to_profile",
	3: "fragment_instance_ids",
	4: "instance_profiles",
	5: "load_channel_profiles",
}

func (p *TQueryProfile) IsSetQueryId() bool {
	return p.QueryId != nil
}

func (p *TQueryProfile) IsSetFragmentIdToProfile() bool {
	return p.FragmentIdToProfile != nil
}

func (p *TQueryProfile) IsSetFragmentInstanceIds() bool {
	return p.FragmentInstanceIds != nil
}

func (p *TQueryProfile) IsSetInstanceProfiles() bool {
	return p.InstanceProfiles != nil
}

func (p *TQueryProfile) IsSetLoadChannelProfiles() bool {
	return p.LoadChannelProfiles != nil
}

func (p *TQueryProfile) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TQueryProfile[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TQueryProfile) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryId = _field
	return nil
}
func (p *TQueryProfile) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int32][]*TDetailedReportParams, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]*TDetailedReportParams, 0, size)
		values := make([]TDetailedReportParams, size)
		for i := 0; i < size; i++ {
			_elem := &values[i]
			_elem.InitDefault()

			if err := _elem.Read(iprot); err != nil {
				return err
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.FragmentIdToProfile = _field
	return nil
}
func (p *TQueryProfile) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*types.TUniqueId, 0, size)
	values := make([]types.TUniqueId, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FragmentInstanceIds = _field
	return nil
}
func (p *TQueryProfile) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*runtimeprofile.TRuntimeProfileTree, 0, size)
	values := make([]runtimeprofile.TRuntimeProfileTree, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.InstanceProfiles = _field
	return nil
}
func (p *TQueryProfile) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*runtimeprofile.TRuntimeProfileTree, 0, size)
	values := make([]runtimeprofile.TRuntimeProfileTree, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.LoadChannelProfiles = _field
	return nil
}

func (p *TQueryProfile) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TQueryProfile"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TQueryProfile) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryId() {
		if err = oprot.WriteFieldBegin("query_id", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.QueryId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TQueryProfile) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFragmentIdToProfile() {
		if err = oprot.WriteFieldBegin("fragment_id_to_profile", thrift.MAP, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.FragmentIdToProfile)); err != nil {
			return err
		}
		for k, v := range p.FragmentIdToProfile {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TQueryProfile) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFragmentInstanceIds() {
		if err = oprot.WriteFieldBegin("fragment_instance_ids", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FragmentInstanceIds)); err != nil {
			return err
		}
		for _, v := range p.FragmentInstanceIds {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TQueryProfile) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetInstanceProfiles() {
		if err = oprot.WriteFieldBegin("instance_profiles", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InstanceProfiles)); err != nil {
			return err
		}
		for _, v := range p.InstanceProfiles {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TQueryProfile) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadChannelProfiles() {
		if err = oprot.WriteFieldBegin("load_channel_profiles", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LoadChannelProfiles)); err != nil {
			return err
		}
		for _, v := range p.LoadChannelProfiles {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TQueryProfile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TQueryProfile(%+v)", *p)

}

func (p *TQueryProfile) DeepEqual(ano *TQueryProfile) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.QueryId) {
		return false
	}
	if !p.Field2DeepEqual(ano.FragmentIdToProfile) {
		return false
	}
	if !p.Field3DeepEqual(ano.FragmentInstanceIds) {
		return false
	}
	if !p.Field4DeepEqual(ano.InstanceProfiles) {
		return false
	}
	if !p.Field5DeepEqual(ano.LoadChannelProfiles) {
		return false
	}
	return true
}

func (p *TQueryProfile) Field1DeepEqual(src *types.TUniqueId) bool {

	if !p.QueryId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TQueryProfile) Field2DeepEqual(src map[int32][]*TDetailedReportParams) bool {

	if len(p.FragmentIdToProfile) != len(src) {
		return false
	}
	for k, v := range p.FragmentIdToProfile {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *TQueryProfile) Field3DeepEqual(src []*types.TUniqueId) bool {

	if len(p.FragmentInstanceIds) != len(src) {
		return false
	}
	for i, v := range p.FragmentInstanceIds {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TQueryProfile) Field4DeepEqual(src []*runtimeprofile.TRuntimeProfileTree) bool {

	if len(p.InstanceProfiles) != len(src) {
		return false
	}
	for i, v := range p.InstanceProfiles {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TQueryProfile) Field5DeepEqual(src []*runtimeprofile.TRuntimeProfileTree) bool {

	if len(p.LoadChannelProfiles) != len(src) {
		return false
	}
	for i, v := range p.LoadChannelProfiles {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TFragmentInstanceReport struct {
	FragmentInstanceId *types.TUniqueId `thrift:"fragment_instance_id,1,optional" frugal:"1,optional,types.TUniqueId" json:"fragment_instance_id,omitempty"`
	NumFinishedRange   *int32           `thrift:"num_finished_range,2,optional" frugal:"2,optional,i32" json:"num_finished_range,omitempty"`
}

func NewTFragmentInstanceReport() *TFragmentInstanceReport {
	return &TFragmentInstanceReport{}
}

func (p *TFragmentInstanceReport) InitDefault() {
}

var TFragmentInstanceReport_FragmentInstanceId_DEFAULT *types.TUniqueId

func (p *TFragmentInstanceReport) GetFragmentInstanceId() (v *types.TUniqueId) {
	if !p.IsSetFragmentInstanceId() {
		return TFragmentInstanceReport_FragmentInstanceId_DEFAULT
	}
	return p.FragmentInstanceId
}

var TFragmentInstanceReport_NumFinishedRange_DEFAULT int32

func (p *TFragmentInstanceReport) GetNumFinishedRange() (v int32) {
	if !p.IsSetNumFinishedRange() {
		return TFragmentInstanceReport_NumFinishedRange_DEFAULT
	}
	return *p.NumFinishedRange
}
func (p *TFragmentInstanceReport) SetFragmentInstanceId(val *types.TUniqueId) {
	p.FragmentInstanceId = val
}
func (p *TFragmentInstanceReport) SetNumFinishedRange(val *int32) {
	p.NumFinishedRange = val
}

var fieldIDToName_TFragmentInstanceReport = map[int16]string{
	1: "fragment_instance_id",
	2: "num_finished_range",
}

func (p *TFragmentInstanceReport) IsSetFragmentInstanceId() bool {
	return p.FragmentInstanceId != nil
}

func (p *TFragmentInstanceReport) IsSetNumFinishedRange() bool {
	return p.NumFinishedRange != nil
}

func (p *TFragmentInstanceReport) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFragmentInstanceReport[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TFragmentInstanceReport) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FragmentInstanceId = _field
	return nil
}
func (p *TFragmentInstanceReport) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NumFinishedRange = _field
	return nil
}

func (p *TFragmentInstanceReport) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFragmentInstanceReport"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFragmentInstanceReport) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFragmentInstanceId() {
		if err = oprot.WriteFieldBegin("fragment_instance_id", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FragmentInstanceId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFragmentInstanceReport) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumFinishedRange() {
		if err = oprot.WriteFieldBegin("num_finished_range", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.NumFinishedRange); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFragmentInstanceReport) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFragmentInstanceReport(%+v)", *p)

}

func (p *TFragmentInstanceReport) DeepEqual(ano *TFragmentInstanceReport) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FragmentInstanceId) {
		return false
	}
	if !p.Field2DeepEqual(ano.NumFinishedRange) {
		return false
	}
	return true
}

func (p *TFragmentInstanceReport) Field1DeepEqual(src *types.TUniqueId) bool {

	if !p.FragmentInstanceId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFragmentInstanceReport) Field2DeepEqual(src *int32) bool {

	if p.NumFinishedRange == src {
		return true
	} else if p.NumFinishedRange == nil || src == nil {
		return false
	}
	if *p.NumFinishedRange != *src {
		return false
	}
	return true
}

type TReportExecStatusParams struct {
	ProtocolVersion             FrontendServiceVersion              `thrift:"protocol_version,1,required" frugal:"1,required,FrontendServiceVersion" json:"protocol_version"`
	QueryId                     *types.TUniqueId                    `thrift:"query_id,2,optional" frugal:"2,optional,types.TUniqueId" json:"query_id,omitempty"`
	BackendNum                  *int32                              `thrift:"backend_num,3,optional" frugal:"3,optional,i32" json:"backend_num,omitempty"`
	FragmentInstanceId          *types.TUniqueId                    `thrift:"fragment_instance_id,4,optional" frugal:"4,optional,types.TUniqueId" json:"fragment_instance_id,omitempty"`
	Status                      *status.TStatus                     `thrift:"status,5,optional" frugal:"5,optional,status.TStatus" json:"status,omitempty"`
	Done                        *bool                               `thrift:"done,6,optional" frugal:"6,optional,bool" json:"done,omitempty"`
	Profile                     *runtimeprofile.TRuntimeProfileTree `thrift:"profile,7,optional" frugal:"7,optional,runtimeprofile.TRuntimeProfileTree" json:"profile,omitempty"`
	ErrorLog                    []string                            `thrift:"error_log,9,optional" frugal:"9,optional,list<string>" json:"error_log,omitempty"`
	DeltaUrls                   []string                            `thrift:"delta_urls,10,optional" frugal:"10,optional,list<string>" json:"delta_urls,omitempty"`
	LoadCounters                map[string]string                   `thrift:"load_counters,11,optional" frugal:"11,optional,map<string:string>" json:"load_counters,omitempty"`
	TrackingUrl                 *string                             `thrift:"tracking_url,12,optional" frugal:"12,optional,string" json:"tracking_url,omitempty"`
	ExportFiles                 []string                            `thrift:"export_files,13,optional" frugal:"13,optional,list<string>" json:"export_files,omitempty"`
	CommitInfos                 []*types.TTabletCommitInfo          `thrift:"commitInfos,14,optional" frugal:"14,optional,list<types.TTabletCommitInfo>" json:"commitInfos,omitempty"`
	LoadedRows                  *int64                              `thrift:"loaded_rows,15,optional" frugal:"15,optional,i64" json:"loaded_rows,omitempty"`
	BackendId                   *int64                              `thrift:"backend_id,16,optional" frugal:"16,optional,i64" json:"backend_id,omitempty"`
	LoadedBytes                 *int64                              `thrift:"loaded_bytes,17,optional" frugal:"17,optional,i64" json:"loaded_bytes,omitempty"`
	ErrorTabletInfos            []*types.TErrorTabletInfo           `thrift:"errorTabletInfos,18,optional" frugal:"18,optional,list<types.TErrorTabletInfo>" json:"errorTabletInfos,omitempty"`
	FragmentId                  *int32                              `thrift:"fragment_id,19,optional" frugal:"19,optional,i32" json:"fragment_id,omitempty"`
	QueryType                   *palointernalservice.TQueryType     `thrift:"query_type,20,optional" frugal:"20,optional,TQueryType" json:"query_type,omitempty"`
	LoadChannelProfile          *runtimeprofile.TRuntimeProfileTree `thrift:"loadChannelProfile,21,optional" frugal:"21,optional,runtimeprofile.TRuntimeProfileTree" json:"loadChannelProfile,omitempty"`
	FinishedScanRanges          *int32                              `thrift:"finished_scan_ranges,22,optional" frugal:"22,optional,i32" json:"finished_scan_ranges,omitempty"`
	DetailedReport              []*TDetailedReportParams            `thrift:"detailed_report,23,optional" frugal:"23,optional,list<TDetailedReportParams>" json:"detailed_report,omitempty"`
	QueryStatistics             *TQueryStatistics                   `thrift:"query_statistics,24,optional" frugal:"24,optional,TQueryStatistics" json:"query_statistics,omitempty"`
	ReportWorkloadRuntimeStatus *TReportWorkloadRuntimeStatusParams `thrift:"report_workload_runtime_status,25,optional" frugal:"25,optional,TReportWorkloadRuntimeStatusParams" json:"report_workload_runtime_status,omitempty"`
	HivePartitionUpdates        []*datasinks.THivePartitionUpdate   `thrift:"hive_partition_updates,26,optional" frugal:"26,optional,list<datasinks.THivePartitionUpdate>" json:"hive_partition_updates,omitempty"`
	QueryProfile                *TQueryProfile                      `thrift:"query_profile,27,optional" frugal:"27,optional,TQueryProfile" json:"query_profile,omitempty"`
	IcebergCommitDatas          []*datasinks.TIcebergCommitData     `thrift:"iceberg_commit_datas,28,optional" frugal:"28,optional,list<datasinks.TIcebergCommitData>" json:"iceberg_commit_datas,omitempty"`
	TxnId                       *int64                              `thrift:"txn_id,29,optional" frugal:"29,optional,i64" json:"txn_id,omitempty"`
	Label                       *string                             `thrift:"label,30,optional" frugal:"30,optional,string" json:"label,omitempty"`
	FragmentInstanceReports     []*TFragmentInstanceReport          `thrift:"fragment_instance_reports,31,optional" frugal:"31,optional,list<TFragmentInstanceReport>" json:"fragment_instance_reports,omitempty"`
}

func NewTReportExecStatusParams() *TReportExecStatusParams {
	return &TReportExecStatusParams{}
}

func (p *TReportExecStatusParams) InitDefault() {
}

func (p *TReportExecStatusParams) GetProtocolVersion() (v FrontendServiceVersion) {
	return p.ProtocolVersion
}

var TReportExecStatusParams_QueryId_DEFAULT *types.TUniqueId

func (p *TReportExecStatusParams) GetQueryId() (v *types.TUniqueId) {
	if !p.IsSetQueryId() {
		return TReportExecStatusParams_QueryId_DEFAULT
	}
	return p.QueryId
}

var TReportExecStatusParams_BackendNum_DEFAULT int32

func (p *TReportExecStatusParams) GetBackendNum() (v int32) {
	if !p.IsSetBackendNum() {
		return TReportExecStatusParams_BackendNum_DEFAULT
	}
	return *p.BackendNum
}

var TReportExecStatusParams_FragmentInstanceId_DEFAULT *types.TUniqueId

func (p *TReportExecStatusParams) GetFragmentInstanceId() (v *types.TUniqueId) {
	if !p.IsSetFragmentInstanceId() {
		return TReportExecStatusParams_FragmentInstanceId_DEFAULT
	}
	return p.FragmentInstanceId
}

var TReportExecStatusParams_Status_DEFAULT *status.TStatus

func (p *TReportExecStatusParams) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TReportExecStatusParams_Status_DEFAULT
	}
	return p.Status
}

var TReportExecStatusParams_Done_DEFAULT bool

func (p *TReportExecStatusParams) GetDone() (v bool) {
	if !p.IsSetDone() {
		return TReportExecStatusParams_Done_DEFAULT
	}
	return *p.Done
}

var TReportExecStatusParams_Profile_DEFAULT *runtimeprofile.TRuntimeProfileTree

func (p *TReportExecStatusParams) GetProfile() (v *runtimeprofile.TRuntimeProfileTree) {
	if !p.IsSetProfile() {
		return TReportExecStatusParams_Profile_DEFAULT
	}
	return p.Profile
}

var TReportExecStatusParams_ErrorLog_DEFAULT []string

func (p *TReportExecStatusParams) GetErrorLog() (v []string) {
	if !p.IsSetErrorLog() {
		return TReportExecStatusParams_ErrorLog_DEFAULT
	}
	return p.ErrorLog
}

var TReportExecStatusParams_DeltaUrls_DEFAULT []string

func (p *TReportExecStatusParams) GetDeltaUrls() (v []string) {
	if !p.IsSetDeltaUrls() {
		return TReportExecStatusParams_DeltaUrls_DEFAULT
	}
	return p.DeltaUrls
}

var TReportExecStatusParams_LoadCounters_DEFAULT map[string]string

func (p *TReportExecStatusParams) GetLoadCounters() (v map[string]string) {
	if !p.IsSetLoadCounters() {
		return TReportExecStatusParams_LoadCounters_DEFAULT
	}
	return p.LoadCounters
}

var TReportExecStatusParams_TrackingUrl_DEFAULT string

func (p *TReportExecStatusParams) GetTrackingUrl() (v string) {
	if !p.IsSetTrackingUrl() {
		return TReportExecStatusParams_TrackingUrl_DEFAULT
	}
	return *p.TrackingUrl
}

var TReportExecStatusParams_ExportFiles_DEFAULT []string

func (p *TReportExecStatusParams) GetExportFiles() (v []string) {
	if !p.IsSetExportFiles() {
		return TReportExecStatusParams_ExportFiles_DEFAULT
	}
	return p.ExportFiles
}

var TReportExecStatusParams_CommitInfos_DEFAULT []*types.TTabletCommitInfo

func (p *TReportExecStatusParams) GetCommitInfos() (v []*types.TTabletCommitInfo) {
	if !p.IsSetCommitInfos() {
		return TReportExecStatusParams_CommitInfos_DEFAULT
	}
	return p.CommitInfos
}

var TReportExecStatusParams_LoadedRows_DEFAULT int64

func (p *TReportExecStatusParams) GetLoadedRows() (v int64) {
	if !p.IsSetLoadedRows() {
		return TReportExecStatusParams_LoadedRows_DEFAULT
	}
	return *p.LoadedRows
}

var TReportExecStatusParams_BackendId_DEFAULT int64

func (p *TReportExecStatusParams) GetBackendId() (v int64) {
	if !p.IsSetBackendId() {
		return TReportExecStatusParams_BackendId_DEFAULT
	}
	return *p.BackendId
}

var TReportExecStatusParams_LoadedBytes_DEFAULT int64

func (p *TReportExecStatusParams) GetLoadedBytes() (v int64) {
	if !p.IsSetLoadedBytes() {
		return TReportExecStatusParams_LoadedBytes_DEFAULT
	}
	return *p.LoadedBytes
}

var TReportExecStatusParams_ErrorTabletInfos_DEFAULT []*types.TErrorTabletInfo

func (p *TReportExecStatusParams) GetErrorTabletInfos() (v []*types.TErrorTabletInfo) {
	if !p.IsSetErrorTabletInfos() {
		return TReportExecStatusParams_ErrorTabletInfos_DEFAULT
	}
	return p.ErrorTabletInfos
}

var TReportExecStatusParams_FragmentId_DEFAULT int32

func (p *TReportExecStatusParams) GetFragmentId() (v int32) {
	if !p.IsSetFragmentId() {
		return TReportExecStatusParams_FragmentId_DEFAULT
	}
	return *p.FragmentId
}

var TReportExecStatusParams_QueryType_DEFAULT palointernalservice.TQueryType

func (p *TReportExecStatusParams) GetQueryType() (v palointernalservice.TQueryType) {
	if !p.IsSetQueryType() {
		return TReportExecStatusParams_QueryType_DEFAULT
	}
	return *p.QueryType
}

var TReportExecStatusParams_LoadChannelProfile_DEFAULT *runtimeprofile.TRuntimeProfileTree

func (p *TReportExecStatusParams) GetLoadChannelProfile() (v *runtimeprofile.TRuntimeProfileTree) {
	if !p.IsSetLoadChannelProfile() {
		return TReportExecStatusParams_LoadChannelProfile_DEFAULT
	}
	return p.LoadChannelProfile
}

var TReportExecStatusParams_FinishedScanRanges_DEFAULT int32

func (p *TReportExecStatusParams) GetFinishedScanRanges() (v int32) {
	if !p.IsSetFinishedScanRanges() {
		return TReportExecStatusParams_FinishedScanRanges_DEFAULT
	}
	return *p.FinishedScanRanges
}

var TReportExecStatusParams_DetailedReport_DEFAULT []*TDetailedReportParams

func (p *TReportExecStatusParams) GetDetailedReport() (v []*TDetailedReportParams) {
	if !p.IsSetDetailedReport() {
		return TReportExecStatusParams_DetailedReport_DEFAULT
	}
	return p.DetailedReport
}

var TReportExecStatusParams_QueryStatistics_DEFAULT *TQueryStatistics

func (p *TReportExecStatusParams) GetQueryStatistics() (v *TQueryStatistics) {
	if !p.IsSetQueryStatistics() {
		return TReportExecStatusParams_QueryStatistics_DEFAULT
	}
	return p.QueryStatistics
}

var TReportExecStatusParams_ReportWorkloadRuntimeStatus_DEFAULT *TReportWorkloadRuntimeStatusParams

func (p *TReportExecStatusParams) GetReportWorkloadRuntimeStatus() (v *TReportWorkloadRuntimeStatusParams) {
	if !p.IsSetReportWorkloadRuntimeStatus() {
		return TReportExecStatusParams_ReportWorkloadRuntimeStatus_DEFAULT
	}
	return p.ReportWorkloadRuntimeStatus
}

var TReportExecStatusParams_HivePartitionUpdates_DEFAULT []*datasinks.THivePartitionUpdate

func (p *TReportExecStatusParams) GetHivePartitionUpdates() (v []*datasinks.THivePartitionUpdate) {
	if !p.IsSetHivePartitionUpdates() {
		return TReportExecStatusParams_HivePartitionUpdates_DEFAULT
	}
	return p.HivePartitionUpdates
}

var TReportExecStatusParams_QueryProfile_DEFAULT *TQueryProfile

func (p *TReportExecStatusParams) GetQueryProfile() (v *TQueryProfile) {
	if !p.IsSetQueryProfile() {
		return TReportExecStatusParams_QueryProfile_DEFAULT
	}
	return p.QueryProfile
}

var TReportExecStatusParams_IcebergCommitDatas_DEFAULT []*datasinks.TIcebergCommitData

func (p *TReportExecStatusParams) GetIcebergCommitDatas() (v []*datasinks.TIcebergCommitData) {
	if !p.IsSetIcebergCommitDatas() {
		return TReportExecStatusParams_IcebergCommitDatas_DEFAULT
	}
	return p.IcebergCommitDatas
}

var TReportExecStatusParams_TxnId_DEFAULT int64

func (p *TReportExecStatusParams) GetTxnId() (v int64) {
	if !p.IsSetTxnId() {
		return TReportExecStatusParams_TxnId_DEFAULT
	}
	return *p.TxnId
}

var TReportExecStatusParams_Label_DEFAULT string

func (p *TReportExecStatusParams) GetLabel() (v string) {
	if !p.IsSetLabel() {
		return TReportExecStatusParams_Label_DEFAULT
	}
	return *p.Label
}

var TReportExecStatusParams_FragmentInstanceReports_DEFAULT []*TFragmentInstanceReport

func (p *TReportExecStatusParams) GetFragmentInstanceReports() (v []*TFragmentInstanceReport) {
	if !p.IsSetFragmentInstanceReports() {
		return TReportExecStatusParams_FragmentInstanceReports_DEFAULT
	}
	return p.FragmentInstanceReports
}
func (p *TReportExecStatusParams) SetProtocolVersion(val FrontendServiceVersion) {
	p.ProtocolVersion = val
}
func (p *TReportExecStatusParams) SetQueryId(val *types.TUniqueId) {
	p.QueryId = val
}
func (p *TReportExecStatusParams) SetBackendNum(val *int32) {
	p.BackendNum = val
}
func (p *TReportExecStatusParams) SetFragmentInstanceId(val *types.TUniqueId) {
	p.FragmentInstanceId = val
}
func (p *TReportExecStatusParams) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TReportExecStatusParams) SetDone(val *bool) {
	p.Done = val
}
func (p *TReportExecStatusParams) SetProfile(val *runtimeprofile.TRuntimeProfileTree) {
	p.Profile = val
}
func (p *TReportExecStatusParams) SetErrorLog(val []string) {
	p.ErrorLog = val
}
func (p *TReportExecStatusParams) SetDeltaUrls(val []string) {
	p.DeltaUrls = val
}
func (p *TReportExecStatusParams) SetLoadCounters(val map[string]string) {
	p.LoadCounters = val
}
func (p *TReportExecStatusParams) SetTrackingUrl(val *string) {
	p.TrackingUrl = val
}
func (p *TReportExecStatusParams) SetExportFiles(val []string) {
	p.ExportFiles = val
}
func (p *TReportExecStatusParams) SetCommitInfos(val []*types.TTabletCommitInfo) {
	p.CommitInfos = val
}
func (p *TReportExecStatusParams) SetLoadedRows(val *int64) {
	p.LoadedRows = val
}
func (p *TReportExecStatusParams) SetBackendId(val *int64) {
	p.BackendId = val
}
func (p *TReportExecStatusParams) SetLoadedBytes(val *int64) {
	p.LoadedBytes = val
}
func (p *TReportExecStatusParams) SetErrorTabletInfos(val []*types.TErrorTabletInfo) {
	p.ErrorTabletInfos = val
}
func (p *TReportExecStatusParams) SetFragmentId(val *int32) {
	p.FragmentId = val
}
func (p *TReportExecStatusParams) SetQueryType(val *palointernalservice.TQueryType) {
	p.QueryType = val
}
func (p *TReportExecStatusParams) SetLoadChannelProfile(val *runtimeprofile.TRuntimeProfileTree) {
	p.LoadChannelProfile = val
}
func (p *TReportExecStatusParams) SetFinishedScanRanges(val *int32) {
	p.FinishedScanRanges = val
}
func (p *TReportExecStatusParams) SetDetailedReport(val []*TDetailedReportParams) {
	p.DetailedReport = val
}
func (p *TReportExecStatusParams) SetQueryStatistics(val *TQueryStatistics) {
	p.QueryStatistics = val
}
func (p *TReportExecStatusParams) SetReportWorkloadRuntimeStatus(val *TReportWorkloadRuntimeStatusParams) {
	p.ReportWorkloadRuntimeStatus = val
}
func (p *TReportExecStatusParams) SetHivePartitionUpdates(val []*datasinks.THivePartitionUpdate) {
	p.HivePartitionUpdates = val
}
func (p *TReportExecStatusParams) SetQueryProfile(val *TQueryProfile) {
	p.QueryProfile = val
}
func (p *TReportExecStatusParams) SetIcebergCommitDatas(val []*datasinks.TIcebergCommitData) {
	p.IcebergCommitDatas = val
}
func (p *TReportExecStatusParams) SetTxnId(val *int64) {
	p.TxnId = val
}
func (p *TReportExecStatusParams) SetLabel(val *string) {
	p.Label = val
}
func (p *TReportExecStatusParams) SetFragmentInstanceReports(val []*TFragmentInstanceReport) {
	p.FragmentInstanceReports = val
}

var fieldIDToName_TReportExecStatusParams = map[int16]string{
	1:  "protocol_version",
	2:  "query_id",
	3:  "backend_num",
	4:  "fragment_instance_id",
	5:  "status",
	6:  "done",
	7:  "profile",
	9:  "error_log",
	10: "delta_urls",
	11: "load_counters",
	12: "tracking_url",
	13: "export_files",
	14: "commitInfos",
	15: "loaded_rows",
	16: "backend_id",
	17: "loaded_bytes",
	18: "errorTabletInfos",
	19: "fragment_id",
	20: "query_type",
	21: "loadChannelProfile",
	22: "finished_scan_ranges",
	23: "detailed_report",
	24: "query_statistics",
	25: "report_workload_runtime_status",
	26: "hive_partition_updates",
	27: "query_profile",
	28: "iceberg_commit_datas",
	29: "txn_id",
	30: "label",
	31: "fragment_instance_reports",
}

func (p *TReportExecStatusParams) IsSetQueryId() bool {
	return p.QueryId != nil
}

func (p *TReportExecStatusParams) IsSetBackendNum() bool {
	return p.BackendNum != nil
}

func (p *TReportExecStatusParams) IsSetFragmentInstanceId() bool {
	return p.FragmentInstanceId != nil
}

func (p *TReportExecStatusParams) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TReportExecStatusParams) IsSetDone() bool {
	return p.Done != nil
}

func (p *TReportExecStatusParams) IsSetProfile() bool {
	return p.Profile != nil
}

func (p *TReportExecStatusParams) IsSetErrorLog() bool {
	return p.ErrorLog != nil
}

func (p *TReportExecStatusParams) IsSetDeltaUrls() bool {
	return p.DeltaUrls != nil
}

func (p *TReportExecStatusParams) IsSetLoadCounters() bool {
	return p.LoadCounters != nil
}

func (p *TReportExecStatusParams) IsSetTrackingUrl() bool {
	return p.TrackingUrl != nil
}

func (p *TReportExecStatusParams) IsSetExportFiles() bool {
	return p.ExportFiles != nil
}

func (p *TReportExecStatusParams) IsSetCommitInfos() bool {
	return p.CommitInfos != nil
}

func (p *TReportExecStatusParams) IsSetLoadedRows() bool {
	return p.LoadedRows != nil
}

func (p *TReportExecStatusParams) IsSetBackendId() bool {
	return p.BackendId != nil
}

func (p *TReportExecStatusParams) IsSetLoadedBytes() bool {
	return p.LoadedBytes != nil
}

func (p *TReportExecStatusParams) IsSetErrorTabletInfos() bool {
	return p.ErrorTabletInfos != nil
}

func (p *TReportExecStatusParams) IsSetFragmentId() bool {
	return p.FragmentId != nil
}

func (p *TReportExecStatusParams) IsSetQueryType() bool {
	return p.QueryType != nil
}

func (p *TReportExecStatusParams) IsSetLoadChannelProfile() bool {
	return p.LoadChannelProfile != nil
}

func (p *TReportExecStatusParams) IsSetFinishedScanRanges() bool {
	return p.FinishedScanRanges != nil
}

func (p *TReportExecStatusParams) IsSetDetailedReport() bool {
	return p.DetailedReport != nil
}

func (p *TReportExecStatusParams) IsSetQueryStatistics() bool {
	return p.QueryStatistics != nil
}

func (p *TReportExecStatusParams) IsSetReportWorkloadRuntimeStatus() bool {
	return p.ReportWorkloadRuntimeStatus != nil
}

func (p *TReportExecStatusParams) IsSetHivePartitionUpdates() bool {
	return p.HivePartitionUpdates != nil
}

func (p *TReportExecStatusParams) IsSetQueryProfile() bool {
	return p.QueryProfile != nil
}

func (p *TReportExecStatusParams) IsSetIcebergCommitDatas() bool {
	return p.IcebergCommitDatas != nil
}

func (p *TReportExecStatusParams) IsSetTxnId() bool {
	return p.TxnId != nil
}

func (p *TReportExecStatusParams) IsSetLabel() bool {
	return p.Label != nil
}

func (p *TReportExecStatusParams) IsSetFragmentInstanceReports() bool {
	return p.FragmentInstanceReports != nil
}

func (p *TReportExecStatusParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 29:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 30:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TReportExecStatusParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TReportExecStatusParams[fieldId]))
}

func (p *TReportExecStatusParams) ReadField1(iprot thrift.TProtocol) error {

	var _field FrontendServiceVersion
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = FrontendServiceVersion(v)
	}
	p.ProtocolVersion = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryId = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField3(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BackendNum = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField4(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FragmentInstanceId = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField5(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField6(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Done = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField7(iprot thrift.TProtocol) error {
	_field := runtimeprofile.NewTRuntimeProfileTree()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Profile = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ErrorLog = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DeltaUrls = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField11(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.LoadCounters = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TrackingUrl = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ExportFiles = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*types.TTabletCommitInfo, 0, size)
	values := make([]types.TTabletCommitInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.CommitInfos = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField15(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LoadedRows = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField16(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BackendId = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField17(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LoadedBytes = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField18(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*types.TErrorTabletInfo, 0, size)
	values := make([]types.TErrorTabletInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ErrorTabletInfos = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField19(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FragmentId = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField20(iprot thrift.TProtocol) error {

	var _field *palointernalservice.TQueryType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := palointernalservice.TQueryType(v)
		_field = &tmp
	}
	p.QueryType = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField21(iprot thrift.TProtocol) error {
	_field := runtimeprofile.NewTRuntimeProfileTree()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.LoadChannelProfile = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField22(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FinishedScanRanges = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField23(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TDetailedReportParams, 0, size)
	values := make([]TDetailedReportParams, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DetailedReport = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField24(iprot thrift.TProtocol) error {
	_field := NewTQueryStatistics()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryStatistics = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField25(iprot thrift.TProtocol) error {
	_field := NewTReportWorkloadRuntimeStatusParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ReportWorkloadRuntimeStatus = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField26(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*datasinks.THivePartitionUpdate, 0, size)
	values := make([]datasinks.THivePartitionUpdate, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.HivePartitionUpdates = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField27(iprot thrift.TProtocol) error {
	_field := NewTQueryProfile()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryProfile = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField28(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*datasinks.TIcebergCommitData, 0, size)
	values := make([]datasinks.TIcebergCommitData, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.IcebergCommitDatas = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField29(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TxnId = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField30(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Label = _field
	return nil
}
func (p *TReportExecStatusParams) ReadField31(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TFragmentInstanceReport, 0, size)
	values := make([]TFragmentInstanceReport, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FragmentInstanceReports = _field
	return nil
}

func (p *TReportExecStatusParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TReportExecStatusParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryId() {
		if err = oprot.WriteFieldBegin("query_id", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.QueryId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackendNum() {
		if err = oprot.WriteFieldBegin("backend_num", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BackendNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFragmentInstanceId() {
		if err = oprot.WriteFieldBegin("fragment_instance_id", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FragmentInstanceId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDone() {
		if err = oprot.WriteFieldBegin("done", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Done); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetProfile() {
		if err = oprot.WriteFieldBegin("profile", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Profile.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorLog() {
		if err = oprot.WriteFieldBegin("error_log", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ErrorLog)); err != nil {
			return err
		}
		for _, v := range p.ErrorLog {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeltaUrls() {
		if err = oprot.WriteFieldBegin("delta_urls", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.DeltaUrls)); err != nil {
			return err
		}
		for _, v := range p.DeltaUrls {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadCounters() {
		if err = oprot.WriteFieldBegin("load_counters", thrift.MAP, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.LoadCounters)); err != nil {
			return err
		}
		for k, v := range p.LoadCounters {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrackingUrl() {
		if err = oprot.WriteFieldBegin("tracking_url", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TrackingUrl); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetExportFiles() {
		if err = oprot.WriteFieldBegin("export_files", thrift.LIST, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ExportFiles)); err != nil {
			return err
		}
		for _, v := range p.ExportFiles {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommitInfos() {
		if err = oprot.WriteFieldBegin("commitInfos", thrift.LIST, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CommitInfos)); err != nil {
			return err
		}
		for _, v := range p.CommitInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadedRows() {
		if err = oprot.WriteFieldBegin("loaded_rows", thrift.I64, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LoadedRows); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackendId() {
		if err = oprot.WriteFieldBegin("backend_id", thrift.I64, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BackendId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadedBytes() {
		if err = oprot.WriteFieldBegin("loaded_bytes", thrift.I64, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LoadedBytes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorTabletInfos() {
		if err = oprot.WriteFieldBegin("errorTabletInfos", thrift.LIST, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ErrorTabletInfos)); err != nil {
			return err
		}
		for _, v := range p.ErrorTabletInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetFragmentId() {
		if err = oprot.WriteFieldBegin("fragment_id", thrift.I32, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.FragmentId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryType() {
		if err = oprot.WriteFieldBegin("query_type", thrift.I32, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.QueryType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadChannelProfile() {
		if err = oprot.WriteFieldBegin("loadChannelProfile", thrift.STRUCT, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.LoadChannelProfile.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetFinishedScanRanges() {
		if err = oprot.WriteFieldBegin("finished_scan_ranges", thrift.I32, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.FinishedScanRanges); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetailedReport() {
		if err = oprot.WriteFieldBegin("detailed_report", thrift.LIST, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DetailedReport)); err != nil {
			return err
		}
		for _, v := range p.DetailedReport {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryStatistics() {
		if err = oprot.WriteFieldBegin("query_statistics", thrift.STRUCT, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.QueryStatistics.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetReportWorkloadRuntimeStatus() {
		if err = oprot.WriteFieldBegin("report_workload_runtime_status", thrift.STRUCT, 25); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ReportWorkloadRuntimeStatus.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetHivePartitionUpdates() {
		if err = oprot.WriteFieldBegin("hive_partition_updates", thrift.LIST, 26); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HivePartitionUpdates)); err != nil {
			return err
		}
		for _, v := range p.HivePartitionUpdates {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryProfile() {
		if err = oprot.WriteFieldBegin("query_profile", thrift.STRUCT, 27); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.QueryProfile.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetIcebergCommitDatas() {
		if err = oprot.WriteFieldBegin("iceberg_commit_datas", thrift.LIST, 28); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.IcebergCommitDatas)); err != nil {
			return err
		}
		for _, v := range p.IcebergCommitDatas {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnId() {
		if err = oprot.WriteFieldBegin("txn_id", thrift.I64, 29); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TxnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabel() {
		if err = oprot.WriteFieldBegin("label", thrift.STRING, 30); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Label); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}

func (p *TReportExecStatusParams) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetFragmentInstanceReports() {
		if err = oprot.WriteFieldBegin("fragment_instance_reports", thrift.LIST, 31); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FragmentInstanceReports)); err != nil {
			return err
		}
		for _, v := range p.FragmentInstanceReports {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}

func (p *TReportExecStatusParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TReportExecStatusParams(%+v)", *p)

}

func (p *TReportExecStatusParams) DeepEqual(ano *TReportExecStatusParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ProtocolVersion) {
		return false
	}
	if !p.Field2DeepEqual(ano.QueryId) {
		return false
	}
	if !p.Field3DeepEqual(ano.BackendNum) {
		return false
	}
	if !p.Field4DeepEqual(ano.FragmentInstanceId) {
		return false
	}
	if !p.Field5DeepEqual(ano.Status) {
		return false
	}
	if !p.Field6DeepEqual(ano.Done) {
		return false
	}
	if !p.Field7DeepEqual(ano.Profile) {
		return false
	}
	if !p.Field9DeepEqual(ano.ErrorLog) {
		return false
	}
	if !p.Field10DeepEqual(ano.DeltaUrls) {
		return false
	}
	if !p.Field11DeepEqual(ano.LoadCounters) {
		return false
	}
	if !p.Field12DeepEqual(ano.TrackingUrl) {
		return false
	}
	if !p.Field13DeepEqual(ano.ExportFiles) {
		return false
	}
	if !p.Field14DeepEqual(ano.CommitInfos) {
		return false
	}
	if !p.Field15DeepEqual(ano.LoadedRows) {
		return false
	}
	if !p.Field16DeepEqual(ano.BackendId) {
		return false
	}
	if !p.Field17DeepEqual(ano.LoadedBytes) {
		return false
	}
	if !p.Field18DeepEqual(ano.ErrorTabletInfos) {
		return false
	}
	if !p.Field19DeepEqual(ano.FragmentId) {
		return false
	}
	if !p.Field20DeepEqual(ano.QueryType) {
		return false
	}
	if !p.Field21DeepEqual(ano.LoadChannelProfile) {
		return false
	}
	if !p.Field22DeepEqual(ano.FinishedScanRanges) {
		return false
	}
	if !p.Field23DeepEqual(ano.DetailedReport) {
		return false
	}
	if !p.Field24DeepEqual(ano.QueryStatistics) {
		return false
	}
	if !p.Field25DeepEqual(ano.ReportWorkloadRuntimeStatus) {
		return false
	}
	if !p.Field26DeepEqual(ano.HivePartitionUpdates) {
		return false
	}
	if !p.Field27DeepEqual(ano.QueryProfile) {
		return false
	}
	if !p.Field28DeepEqual(ano.IcebergCommitDatas) {
		return false
	}
	if !p.Field29DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field30DeepEqual(ano.Label) {
		return false
	}
	if !p.Field31DeepEqual(ano.FragmentInstanceReports) {
		return false
	}
	return true
}

func (p *TReportExecStatusParams) Field1DeepEqual(src FrontendServiceVersion) bool {

	if p.ProtocolVersion != src {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field2DeepEqual(src *types.TUniqueId) bool {

	if !p.QueryId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field3DeepEqual(src *int32) bool {

	if p.BackendNum == src {
		return true
	} else if p.BackendNum == nil || src == nil {
		return false
	}
	if *p.BackendNum != *src {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field4DeepEqual(src *types.TUniqueId) bool {

	if !p.FragmentInstanceId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field5DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field6DeepEqual(src *bool) bool {

	if p.Done == src {
		return true
	} else if p.Done == nil || src == nil {
		return false
	}
	if *p.Done != *src {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field7DeepEqual(src *runtimeprofile.TRuntimeProfileTree) bool {

	if !p.Profile.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field9DeepEqual(src []string) bool {

	if len(p.ErrorLog) != len(src) {
		return false
	}
	for i, v := range p.ErrorLog {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TReportExecStatusParams) Field10DeepEqual(src []string) bool {

	if len(p.DeltaUrls) != len(src) {
		return false
	}
	for i, v := range p.DeltaUrls {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TReportExecStatusParams) Field11DeepEqual(src map[string]string) bool {

	if len(p.LoadCounters) != len(src) {
		return false
	}
	for k, v := range p.LoadCounters {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TReportExecStatusParams) Field12DeepEqual(src *string) bool {

	if p.TrackingUrl == src {
		return true
	} else if p.TrackingUrl == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TrackingUrl, *src) != 0 {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field13DeepEqual(src []string) bool {

	if len(p.ExportFiles) != len(src) {
		return false
	}
	for i, v := range p.ExportFiles {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TReportExecStatusParams) Field14DeepEqual(src []*types.TTabletCommitInfo) bool {

	if len(p.CommitInfos) != len(src) {
		return false
	}
	for i, v := range p.CommitInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TReportExecStatusParams) Field15DeepEqual(src *int64) bool {

	if p.LoadedRows == src {
		return true
	} else if p.LoadedRows == nil || src == nil {
		return false
	}
	if *p.LoadedRows != *src {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field16DeepEqual(src *int64) bool {

	if p.BackendId == src {
		return true
	} else if p.BackendId == nil || src == nil {
		return false
	}
	if *p.BackendId != *src {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field17DeepEqual(src *int64) bool {

	if p.LoadedBytes == src {
		return true
	} else if p.LoadedBytes == nil || src == nil {
		return false
	}
	if *p.LoadedBytes != *src {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field18DeepEqual(src []*types.TErrorTabletInfo) bool {

	if len(p.ErrorTabletInfos) != len(src) {
		return false
	}
	for i, v := range p.ErrorTabletInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TReportExecStatusParams) Field19DeepEqual(src *int32) bool {

	if p.FragmentId == src {
		return true
	} else if p.FragmentId == nil || src == nil {
		return false
	}
	if *p.FragmentId != *src {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field20DeepEqual(src *palointernalservice.TQueryType) bool {

	if p.QueryType == src {
		return true
	} else if p.QueryType == nil || src == nil {
		return false
	}
	if *p.QueryType != *src {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field21DeepEqual(src *runtimeprofile.TRuntimeProfileTree) bool {

	if !p.LoadChannelProfile.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field22DeepEqual(src *int32) bool {

	if p.FinishedScanRanges == src {
		return true
	} else if p.FinishedScanRanges == nil || src == nil {
		return false
	}
	if *p.FinishedScanRanges != *src {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field23DeepEqual(src []*TDetailedReportParams) bool {

	if len(p.DetailedReport) != len(src) {
		return false
	}
	for i, v := range p.DetailedReport {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TReportExecStatusParams) Field24DeepEqual(src *TQueryStatistics) bool {

	if !p.QueryStatistics.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field25DeepEqual(src *TReportWorkloadRuntimeStatusParams) bool {

	if !p.ReportWorkloadRuntimeStatus.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field26DeepEqual(src []*datasinks.THivePartitionUpdate) bool {

	if len(p.HivePartitionUpdates) != len(src) {
		return false
	}
	for i, v := range p.HivePartitionUpdates {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TReportExecStatusParams) Field27DeepEqual(src *TQueryProfile) bool {

	if !p.QueryProfile.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field28DeepEqual(src []*datasinks.TIcebergCommitData) bool {

	if len(p.IcebergCommitDatas) != len(src) {
		return false
	}
	for i, v := range p.IcebergCommitDatas {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TReportExecStatusParams) Field29DeepEqual(src *int64) bool {

	if p.TxnId == src {
		return true
	} else if p.TxnId == nil || src == nil {
		return false
	}
	if *p.TxnId != *src {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field30DeepEqual(src *string) bool {

	if p.Label == src {
		return true
	} else if p.Label == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Label, *src) != 0 {
		return false
	}
	return true
}
func (p *TReportExecStatusParams) Field31DeepEqual(src []*TFragmentInstanceReport) bool {

	if len(p.FragmentInstanceReports) != len(src) {
		return false
	}
	for i, v := range p.FragmentInstanceReports {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TFeResult_ struct {
	ProtocolVersion FrontendServiceVersion `thrift:"protocolVersion,1,required" frugal:"1,required,FrontendServiceVersion" json:"protocolVersion"`
	Status          *status.TStatus        `thrift:"status,2,required" frugal:"2,required,status.TStatus" json:"status"`
	CloudCluster    *string                `thrift:"cloud_cluster,1000,optional" frugal:"1000,optional,string" json:"cloud_cluster,omitempty"`
	NoAuth          *bool                  `thrift:"noAuth,1001,optional" frugal:"1001,optional,bool" json:"noAuth,omitempty"`
}

func NewTFeResult_() *TFeResult_ {
	return &TFeResult_{}
}

func (p *TFeResult_) InitDefault() {
}

func (p *TFeResult_) GetProtocolVersion() (v FrontendServiceVersion) {
	return p.ProtocolVersion
}

var TFeResult__Status_DEFAULT *status.TStatus

func (p *TFeResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TFeResult__Status_DEFAULT
	}
	return p.Status
}

var TFeResult__CloudCluster_DEFAULT string

func (p *TFeResult_) GetCloudCluster() (v string) {
	if !p.IsSetCloudCluster() {
		return TFeResult__CloudCluster_DEFAULT
	}
	return *p.CloudCluster
}

var TFeResult__NoAuth_DEFAULT bool

func (p *TFeResult_) GetNoAuth() (v bool) {
	if !p.IsSetNoAuth() {
		return TFeResult__NoAuth_DEFAULT
	}
	return *p.NoAuth
}
func (p *TFeResult_) SetProtocolVersion(val FrontendServiceVersion) {
	p.ProtocolVersion = val
}
func (p *TFeResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TFeResult_) SetCloudCluster(val *string) {
	p.CloudCluster = val
}
func (p *TFeResult_) SetNoAuth(val *bool) {
	p.NoAuth = val
}

var fieldIDToName_TFeResult_ = map[int16]string{
	1:    "protocolVersion",
	2:    "status",
	1000: "cloud_cluster",
	1001: "noAuth",
}

func (p *TFeResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TFeResult_) IsSetCloudCluster() bool {
	return p.CloudCluster != nil
}

func (p *TFeResult_) IsSetNoAuth() bool {
	return p.NoAuth != nil
}

func (p *TFeResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1000:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1000(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1001:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1001(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFeResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFeResult_[fieldId]))
}

func (p *TFeResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field FrontendServiceVersion
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = FrontendServiceVersion(v)
	}
	p.ProtocolVersion = _field
	return nil
}
func (p *TFeResult_) ReadField2(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TFeResult_) ReadField1000(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CloudCluster = _field
	return nil
}
func (p *TFeResult_) ReadField1001(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NoAuth = _field
	return nil
}

func (p *TFeResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFeResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField1000(oprot); err != nil {
			fieldId = 1000
			goto WriteFieldError
		}
		if err = p.writeField1001(oprot); err != nil {
			fieldId = 1001
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFeResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("protocolVersion", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFeResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFeResult_) writeField1000(oprot thrift.TProtocol) (err error) {
	if p.IsSetCloudCluster() {
		if err = oprot.WriteFieldBegin("cloud_cluster", thrift.STRING, 1000); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CloudCluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 end error: ", p), err)
}

func (p *TFeResult_) writeField1001(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoAuth() {
		if err = oprot.WriteFieldBegin("noAuth", thrift.BOOL, 1001); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.NoAuth); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1001 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1001 end error: ", p), err)
}

func (p *TFeResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFeResult_(%+v)", *p)

}

func (p *TFeResult_) DeepEqual(ano *TFeResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ProtocolVersion) {
		return false
	}
	if !p.Field2DeepEqual(ano.Status) {
		return false
	}
	if !p.Field1000DeepEqual(ano.CloudCluster) {
		return false
	}
	if !p.Field1001DeepEqual(ano.NoAuth) {
		return false
	}
	return true
}

func (p *TFeResult_) Field1DeepEqual(src FrontendServiceVersion) bool {

	if p.ProtocolVersion != src {
		return false
	}
	return true
}
func (p *TFeResult_) Field2DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFeResult_) Field1000DeepEqual(src *string) bool {

	if p.CloudCluster == src {
		return true
	} else if p.CloudCluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CloudCluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TFeResult_) Field1001DeepEqual(src *bool) bool {

	if p.NoAuth == src {
		return true
	} else if p.NoAuth == nil || src == nil {
		return false
	}
	if *p.NoAuth != *src {
		return false
	}
	return true
}

type TSubTxnInfo struct {
	SubTxnId          *int64                     `thrift:"sub_txn_id,1,optional" frugal:"1,optional,i64" json:"sub_txn_id,omitempty"`
	TableId           *int64                     `thrift:"table_id,2,optional" frugal:"2,optional,i64" json:"table_id,omitempty"`
	TabletCommitInfos []*types.TTabletCommitInfo `thrift:"tablet_commit_infos,3,optional" frugal:"3,optional,list<types.TTabletCommitInfo>" json:"tablet_commit_infos,omitempty"`
	SubTxnType        *TSubTxnType               `thrift:"sub_txn_type,4,optional" frugal:"4,optional,TSubTxnType" json:"sub_txn_type,omitempty"`
}

func NewTSubTxnInfo() *TSubTxnInfo {
	return &TSubTxnInfo{}
}

func (p *TSubTxnInfo) InitDefault() {
}

var TSubTxnInfo_SubTxnId_DEFAULT int64

func (p *TSubTxnInfo) GetSubTxnId() (v int64) {
	if !p.IsSetSubTxnId() {
		return TSubTxnInfo_SubTxnId_DEFAULT
	}
	return *p.SubTxnId
}

var TSubTxnInfo_TableId_DEFAULT int64

func (p *TSubTxnInfo) GetTableId() (v int64) {
	if !p.IsSetTableId() {
		return TSubTxnInfo_TableId_DEFAULT
	}
	return *p.TableId
}

var TSubTxnInfo_TabletCommitInfos_DEFAULT []*types.TTabletCommitInfo

func (p *TSubTxnInfo) GetTabletCommitInfos() (v []*types.TTabletCommitInfo) {
	if !p.IsSetTabletCommitInfos() {
		return TSubTxnInfo_TabletCommitInfos_DEFAULT
	}
	return p.TabletCommitInfos
}

var TSubTxnInfo_SubTxnType_DEFAULT TSubTxnType

func (p *TSubTxnInfo) GetSubTxnType() (v TSubTxnType) {
	if !p.IsSetSubTxnType() {
		return TSubTxnInfo_SubTxnType_DEFAULT
	}
	return *p.SubTxnType
}
func (p *TSubTxnInfo) SetSubTxnId(val *int64) {
	p.SubTxnId = val
}
func (p *TSubTxnInfo) SetTableId(val *int64) {
	p.TableId = val
}
func (p *TSubTxnInfo) SetTabletCommitInfos(val []*types.TTabletCommitInfo) {
	p.TabletCommitInfos = val
}
func (p *TSubTxnInfo) SetSubTxnType(val *TSubTxnType) {
	p.SubTxnType = val
}

var fieldIDToName_TSubTxnInfo = map[int16]string{
	1: "sub_txn_id",
	2: "table_id",
	3: "tablet_commit_infos",
	4: "sub_txn_type",
}

func (p *TSubTxnInfo) IsSetSubTxnId() bool {
	return p.SubTxnId != nil
}

func (p *TSubTxnInfo) IsSetTableId() bool {
	return p.TableId != nil
}

func (p *TSubTxnInfo) IsSetTabletCommitInfos() bool {
	return p.TabletCommitInfos != nil
}

func (p *TSubTxnInfo) IsSetSubTxnType() bool {
	return p.SubTxnType != nil
}

func (p *TSubTxnInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TSubTxnInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TSubTxnInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SubTxnId = _field
	return nil
}
func (p *TSubTxnInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableId = _field
	return nil
}
func (p *TSubTxnInfo) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*types.TTabletCommitInfo, 0, size)
	values := make([]types.TTabletCommitInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TabletCommitInfos = _field
	return nil
}
func (p *TSubTxnInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field *TSubTxnType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TSubTxnType(v)
		_field = &tmp
	}
	p.SubTxnType = _field
	return nil
}

func (p *TSubTxnInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TSubTxnInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TSubTxnInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubTxnId() {
		if err = oprot.WriteFieldBegin("sub_txn_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SubTxnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TSubTxnInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err = oprot.WriteFieldBegin("table_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TSubTxnInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletCommitInfos() {
		if err = oprot.WriteFieldBegin("tablet_commit_infos", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TabletCommitInfos)); err != nil {
			return err
		}
		for _, v := range p.TabletCommitInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TSubTxnInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubTxnType() {
		if err = oprot.WriteFieldBegin("sub_txn_type", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.SubTxnType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TSubTxnInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSubTxnInfo(%+v)", *p)

}

func (p *TSubTxnInfo) DeepEqual(ano *TSubTxnInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SubTxnId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableId) {
		return false
	}
	if !p.Field3DeepEqual(ano.TabletCommitInfos) {
		return false
	}
	if !p.Field4DeepEqual(ano.SubTxnType) {
		return false
	}
	return true
}

func (p *TSubTxnInfo) Field1DeepEqual(src *int64) bool {

	if p.SubTxnId == src {
		return true
	} else if p.SubTxnId == nil || src == nil {
		return false
	}
	if *p.SubTxnId != *src {
		return false
	}
	return true
}
func (p *TSubTxnInfo) Field2DeepEqual(src *int64) bool {

	if p.TableId == src {
		return true
	} else if p.TableId == nil || src == nil {
		return false
	}
	if *p.TableId != *src {
		return false
	}
	return true
}
func (p *TSubTxnInfo) Field3DeepEqual(src []*types.TTabletCommitInfo) bool {

	if len(p.TabletCommitInfos) != len(src) {
		return false
	}
	for i, v := range p.TabletCommitInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TSubTxnInfo) Field4DeepEqual(src *TSubTxnType) bool {

	if p.SubTxnType == src {
		return true
	} else if p.SubTxnType == nil || src == nil {
		return false
	}
	if *p.SubTxnType != *src {
		return false
	}
	return true
}

type TTxnLoadInfo struct {
	Label            *string        `thrift:"label,1,optional" frugal:"1,optional,string" json:"label,omitempty"`
	DbId             *int64         `thrift:"dbId,2,optional" frugal:"2,optional,i64" json:"dbId,omitempty"`
	TxnId            *int64         `thrift:"txnId,3,optional" frugal:"3,optional,i64" json:"txnId,omitempty"`
	TimeoutTimestamp *int64         `thrift:"timeoutTimestamp,4,optional" frugal:"4,optional,i64" json:"timeoutTimestamp,omitempty"`
	AllSubTxnNum     *int64         `thrift:"allSubTxnNum,5,optional" frugal:"5,optional,i64" json:"allSubTxnNum,omitempty"`
	SubTxnInfos      []*TSubTxnInfo `thrift:"subTxnInfos,6,optional" frugal:"6,optional,list<TSubTxnInfo>" json:"subTxnInfos,omitempty"`
}

func NewTTxnLoadInfo() *TTxnLoadInfo {
	return &TTxnLoadInfo{}
}

func (p *TTxnLoadInfo) InitDefault() {
}

var TTxnLoadInfo_Label_DEFAULT string

func (p *TTxnLoadInfo) GetLabel() (v string) {
	if !p.IsSetLabel() {
		return TTxnLoadInfo_Label_DEFAULT
	}
	return *p.Label
}

var TTxnLoadInfo_DbId_DEFAULT int64

func (p *TTxnLoadInfo) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TTxnLoadInfo_DbId_DEFAULT
	}
	return *p.DbId
}

var TTxnLoadInfo_TxnId_DEFAULT int64

func (p *TTxnLoadInfo) GetTxnId() (v int64) {
	if !p.IsSetTxnId() {
		return TTxnLoadInfo_TxnId_DEFAULT
	}
	return *p.TxnId
}

var TTxnLoadInfo_TimeoutTimestamp_DEFAULT int64

func (p *TTxnLoadInfo) GetTimeoutTimestamp() (v int64) {
	if !p.IsSetTimeoutTimestamp() {
		return TTxnLoadInfo_TimeoutTimestamp_DEFAULT
	}
	return *p.TimeoutTimestamp
}

var TTxnLoadInfo_AllSubTxnNum_DEFAULT int64

func (p *TTxnLoadInfo) GetAllSubTxnNum() (v int64) {
	if !p.IsSetAllSubTxnNum() {
		return TTxnLoadInfo_AllSubTxnNum_DEFAULT
	}
	return *p.AllSubTxnNum
}

var TTxnLoadInfo_SubTxnInfos_DEFAULT []*TSubTxnInfo

func (p *TTxnLoadInfo) GetSubTxnInfos() (v []*TSubTxnInfo) {
	if !p.IsSetSubTxnInfos() {
		return TTxnLoadInfo_SubTxnInfos_DEFAULT
	}
	return p.SubTxnInfos
}
func (p *TTxnLoadInfo) SetLabel(val *string) {
	p.Label = val
}
func (p *TTxnLoadInfo) SetDbId(val *int64) {
	p.DbId = val
}
func (p *TTxnLoadInfo) SetTxnId(val *int64) {
	p.TxnId = val
}
func (p *TTxnLoadInfo) SetTimeoutTimestamp(val *int64) {
	p.TimeoutTimestamp = val
}
func (p *TTxnLoadInfo) SetAllSubTxnNum(val *int64) {
	p.AllSubTxnNum = val
}
func (p *TTxnLoadInfo) SetSubTxnInfos(val []*TSubTxnInfo) {
	p.SubTxnInfos = val
}

var fieldIDToName_TTxnLoadInfo = map[int16]string{
	1: "label",
	2: "dbId",
	3: "txnId",
	4: "timeoutTimestamp",
	5: "allSubTxnNum",
	6: "subTxnInfos",
}

func (p *TTxnLoadInfo) IsSetLabel() bool {
	return p.Label != nil
}

func (p *TTxnLoadInfo) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TTxnLoadInfo) IsSetTxnId() bool {
	return p.TxnId != nil
}

func (p *TTxnLoadInfo) IsSetTimeoutTimestamp() bool {
	return p.TimeoutTimestamp != nil
}

func (p *TTxnLoadInfo) IsSetAllSubTxnNum() bool {
	return p.AllSubTxnNum != nil
}

func (p *TTxnLoadInfo) IsSetSubTxnInfos() bool {
	return p.SubTxnInfos != nil
}

func (p *TTxnLoadInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTxnLoadInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTxnLoadInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Label = _field
	return nil
}
func (p *TTxnLoadInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TTxnLoadInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TxnId = _field
	return nil
}
func (p *TTxnLoadInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TimeoutTimestamp = _field
	return nil
}
func (p *TTxnLoadInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AllSubTxnNum = _field
	return nil
}
func (p *TTxnLoadInfo) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TSubTxnInfo, 0, size)
	values := make([]TSubTxnInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SubTxnInfos = _field
	return nil
}

func (p *TTxnLoadInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTxnLoadInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTxnLoadInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabel() {
		if err = oprot.WriteFieldBegin("label", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Label); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTxnLoadInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("dbId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTxnLoadInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnId() {
		if err = oprot.WriteFieldBegin("txnId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TxnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTxnLoadInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeoutTimestamp() {
		if err = oprot.WriteFieldBegin("timeoutTimestamp", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TimeoutTimestamp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TTxnLoadInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllSubTxnNum() {
		if err = oprot.WriteFieldBegin("allSubTxnNum", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AllSubTxnNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TTxnLoadInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubTxnInfos() {
		if err = oprot.WriteFieldBegin("subTxnInfos", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SubTxnInfos)); err != nil {
			return err
		}
		for _, v := range p.SubTxnInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TTxnLoadInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTxnLoadInfo(%+v)", *p)

}

func (p *TTxnLoadInfo) DeepEqual(ano *TTxnLoadInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Label) {
		return false
	}
	if !p.Field2DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field3DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field4DeepEqual(ano.TimeoutTimestamp) {
		return false
	}
	if !p.Field5DeepEqual(ano.AllSubTxnNum) {
		return false
	}
	if !p.Field6DeepEqual(ano.SubTxnInfos) {
		return false
	}
	return true
}

func (p *TTxnLoadInfo) Field1DeepEqual(src *string) bool {

	if p.Label == src {
		return true
	} else if p.Label == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Label, *src) != 0 {
		return false
	}
	return true
}
func (p *TTxnLoadInfo) Field2DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}
func (p *TTxnLoadInfo) Field3DeepEqual(src *int64) bool {

	if p.TxnId == src {
		return true
	} else if p.TxnId == nil || src == nil {
		return false
	}
	if *p.TxnId != *src {
		return false
	}
	return true
}
func (p *TTxnLoadInfo) Field4DeepEqual(src *int64) bool {

	if p.TimeoutTimestamp == src {
		return true
	} else if p.TimeoutTimestamp == nil || src == nil {
		return false
	}
	if *p.TimeoutTimestamp != *src {
		return false
	}
	return true
}
func (p *TTxnLoadInfo) Field5DeepEqual(src *int64) bool {

	if p.AllSubTxnNum == src {
		return true
	} else if p.AllSubTxnNum == nil || src == nil {
		return false
	}
	if *p.AllSubTxnNum != *src {
		return false
	}
	return true
}
func (p *TTxnLoadInfo) Field6DeepEqual(src []*TSubTxnInfo) bool {

	if len(p.SubTxnInfos) != len(src) {
		return false
	}
	for i, v := range p.SubTxnInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TGroupCommitInfo struct {
	GetGroupCommitLoadBeId *bool   `thrift:"getGroupCommitLoadBeId,1,optional" frugal:"1,optional,bool" json:"getGroupCommitLoadBeId,omitempty"`
	GroupCommitLoadTableId *int64  `thrift:"groupCommitLoadTableId,2,optional" frugal:"2,optional,i64" json:"groupCommitLoadTableId,omitempty"`
	Cluster                *string `thrift:"cluster,3,optional" frugal:"3,optional,string" json:"cluster,omitempty"`
	UpdateLoadData         *bool   `thrift:"updateLoadData,5,optional" frugal:"5,optional,bool" json:"updateLoadData,omitempty"`
	TableId                *int64  `thrift:"tableId,6,optional" frugal:"6,optional,i64" json:"tableId,omitempty"`
	ReceiveData            *int64  `thrift:"receiveData,7,optional" frugal:"7,optional,i64" json:"receiveData,omitempty"`
}

func NewTGroupCommitInfo() *TGroupCommitInfo {
	return &TGroupCommitInfo{}
}

func (p *TGroupCommitInfo) InitDefault() {
}

var TGroupCommitInfo_GetGroupCommitLoadBeId_DEFAULT bool

func (p *TGroupCommitInfo) GetGetGroupCommitLoadBeId() (v bool) {
	if !p.IsSetGetGroupCommitLoadBeId() {
		return TGroupCommitInfo_GetGroupCommitLoadBeId_DEFAULT
	}
	return *p.GetGroupCommitLoadBeId
}

var TGroupCommitInfo_GroupCommitLoadTableId_DEFAULT int64

func (p *TGroupCommitInfo) GetGroupCommitLoadTableId() (v int64) {
	if !p.IsSetGroupCommitLoadTableId() {
		return TGroupCommitInfo_GroupCommitLoadTableId_DEFAULT
	}
	return *p.GroupCommitLoadTableId
}

var TGroupCommitInfo_Cluster_DEFAULT string

func (p *TGroupCommitInfo) GetCluster() (v string) {
	if !p.IsSetCluster() {
		return TGroupCommitInfo_Cluster_DEFAULT
	}
	return *p.Cluster
}

var TGroupCommitInfo_UpdateLoadData_DEFAULT bool

func (p *TGroupCommitInfo) GetUpdateLoadData() (v bool) {
	if !p.IsSetUpdateLoadData() {
		return TGroupCommitInfo_UpdateLoadData_DEFAULT
	}
	return *p.UpdateLoadData
}

var TGroupCommitInfo_TableId_DEFAULT int64

func (p *TGroupCommitInfo) GetTableId() (v int64) {
	if !p.IsSetTableId() {
		return TGroupCommitInfo_TableId_DEFAULT
	}
	return *p.TableId
}

var TGroupCommitInfo_ReceiveData_DEFAULT int64

func (p *TGroupCommitInfo) GetReceiveData() (v int64) {
	if !p.IsSetReceiveData() {
		return TGroupCommitInfo_ReceiveData_DEFAULT
	}
	return *p.ReceiveData
}
func (p *TGroupCommitInfo) SetGetGroupCommitLoadBeId(val *bool) {
	p.GetGroupCommitLoadBeId = val
}
func (p *TGroupCommitInfo) SetGroupCommitLoadTableId(val *int64) {
	p.GroupCommitLoadTableId = val
}
func (p *TGroupCommitInfo) SetCluster(val *string) {
	p.Cluster = val
}
func (p *TGroupCommitInfo) SetUpdateLoadData(val *bool) {
	p.UpdateLoadData = val
}
func (p *TGroupCommitInfo) SetTableId(val *int64) {
	p.TableId = val
}
func (p *TGroupCommitInfo) SetReceiveData(val *int64) {
	p.ReceiveData = val
}

var fieldIDToName_TGroupCommitInfo = map[int16]string{
	1: "getGroupCommitLoadBeId",
	2: "groupCommitLoadTableId",
	3: "cluster",
	5: "updateLoadData",
	6: "tableId",
	7: "receiveData",
}

func (p *TGroupCommitInfo) IsSetGetGroupCommitLoadBeId() bool {
	return p.GetGroupCommitLoadBeId != nil
}

func (p *TGroupCommitInfo) IsSetGroupCommitLoadTableId() bool {
	return p.GroupCommitLoadTableId != nil
}

func (p *TGroupCommitInfo) IsSetCluster() bool {
	return p.Cluster != nil
}

func (p *TGroupCommitInfo) IsSetUpdateLoadData() bool {
	return p.UpdateLoadData != nil
}

func (p *TGroupCommitInfo) IsSetTableId() bool {
	return p.TableId != nil
}

func (p *TGroupCommitInfo) IsSetReceiveData() bool {
	return p.ReceiveData != nil
}

func (p *TGroupCommitInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGroupCommitInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGroupCommitInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.GetGroupCommitLoadBeId = _field
	return nil
}
func (p *TGroupCommitInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.GroupCommitLoadTableId = _field
	return nil
}
func (p *TGroupCommitInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cluster = _field
	return nil
}
func (p *TGroupCommitInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdateLoadData = _field
	return nil
}
func (p *TGroupCommitInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableId = _field
	return nil
}
func (p *TGroupCommitInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReceiveData = _field
	return nil
}

func (p *TGroupCommitInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGroupCommitInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGroupCommitInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGetGroupCommitLoadBeId() {
		if err = oprot.WriteFieldBegin("getGroupCommitLoadBeId", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.GetGroupCommitLoadBeId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGroupCommitInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupCommitLoadTableId() {
		if err = oprot.WriteFieldBegin("groupCommitLoadTableId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.GroupCommitLoadTableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGroupCommitInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCluster() {
		if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGroupCommitInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateLoadData() {
		if err = oprot.WriteFieldBegin("updateLoadData", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.UpdateLoadData); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TGroupCommitInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err = oprot.WriteFieldBegin("tableId", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TGroupCommitInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetReceiveData() {
		if err = oprot.WriteFieldBegin("receiveData", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ReceiveData); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TGroupCommitInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGroupCommitInfo(%+v)", *p)

}

func (p *TGroupCommitInfo) DeepEqual(ano *TGroupCommitInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.GetGroupCommitLoadBeId) {
		return false
	}
	if !p.Field2DeepEqual(ano.GroupCommitLoadTableId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field5DeepEqual(ano.UpdateLoadData) {
		return false
	}
	if !p.Field6DeepEqual(ano.TableId) {
		return false
	}
	if !p.Field7DeepEqual(ano.ReceiveData) {
		return false
	}
	return true
}

func (p *TGroupCommitInfo) Field1DeepEqual(src *bool) bool {

	if p.GetGroupCommitLoadBeId == src {
		return true
	} else if p.GetGroupCommitLoadBeId == nil || src == nil {
		return false
	}
	if *p.GetGroupCommitLoadBeId != *src {
		return false
	}
	return true
}
func (p *TGroupCommitInfo) Field2DeepEqual(src *int64) bool {

	if p.GroupCommitLoadTableId == src {
		return true
	} else if p.GroupCommitLoadTableId == nil || src == nil {
		return false
	}
	if *p.GroupCommitLoadTableId != *src {
		return false
	}
	return true
}
func (p *TGroupCommitInfo) Field3DeepEqual(src *string) bool {

	if p.Cluster == src {
		return true
	} else if p.Cluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TGroupCommitInfo) Field5DeepEqual(src *bool) bool {

	if p.UpdateLoadData == src {
		return true
	} else if p.UpdateLoadData == nil || src == nil {
		return false
	}
	if *p.UpdateLoadData != *src {
		return false
	}
	return true
}
func (p *TGroupCommitInfo) Field6DeepEqual(src *int64) bool {

	if p.TableId == src {
		return true
	} else if p.TableId == nil || src == nil {
		return false
	}
	if *p.TableId != *src {
		return false
	}
	return true
}
func (p *TGroupCommitInfo) Field7DeepEqual(src *int64) bool {

	if p.ReceiveData == src {
		return true
	} else if p.ReceiveData == nil || src == nil {
		return false
	}
	if *p.ReceiveData != *src {
		return false
	}
	return true
}

type TMasterOpRequest struct {
	User                   string                             `thrift:"user,1,required" frugal:"1,required,string" json:"user"`
	Db                     string                             `thrift:"db,2,required" frugal:"2,required,string" json:"db"`
	Sql                    string                             `thrift:"sql,3,required" frugal:"3,required,string" json:"sql"`
	ResourceInfo           *types.TResourceInfo               `thrift:"resourceInfo,4,optional" frugal:"4,optional,types.TResourceInfo" json:"resourceInfo,omitempty"`
	Cluster                *string                            `thrift:"cluster,5,optional" frugal:"5,optional,string" json:"cluster,omitempty"`
	ExecMemLimit           *int64                             `thrift:"execMemLimit,6,optional" frugal:"6,optional,i64" json:"execMemLimit,omitempty"`
	QueryTimeout           *int32                             `thrift:"queryTimeout,7,optional" frugal:"7,optional,i32" json:"queryTimeout,omitempty"`
	UserIp                 *string                            `thrift:"user_ip,8,optional" frugal:"8,optional,string" json:"user_ip,omitempty"`
	TimeZone               *string                            `thrift:"time_zone,9,optional" frugal:"9,optional,string" json:"time_zone,omitempty"`
	StmtId                 *int64                             `thrift:"stmt_id,10,optional" frugal:"10,optional,i64" json:"stmt_id,omitempty"`
	SqlMode                *int64                             `thrift:"sqlMode,11,optional" frugal:"11,optional,i64" json:"sqlMode,omitempty"`
	LoadMemLimit           *int64                             `thrift:"loadMemLimit,12,optional" frugal:"12,optional,i64" json:"loadMemLimit,omitempty"`
	EnableStrictMode       *bool                              `thrift:"enableStrictMode,13,optional" frugal:"13,optional,bool" json:"enableStrictMode,omitempty"`
	CurrentUserIdent       *types.TUserIdentity               `thrift:"current_user_ident,14,optional" frugal:"14,optional,types.TUserIdentity" json:"current_user_ident,omitempty"`
	StmtIdx                *int32                             `thrift:"stmtIdx,15,optional" frugal:"15,optional,i32" json:"stmtIdx,omitempty"`
	QueryOptions           *palointernalservice.TQueryOptions `thrift:"query_options,16,optional" frugal:"16,optional,palointernalservice.TQueryOptions" json:"query_options,omitempty"`
	QueryId                *types.TUniqueId                   `thrift:"query_id,17,optional" frugal:"17,optional,types.TUniqueId" json:"query_id,omitempty"`
	InsertVisibleTimeoutMs *int64                             `thrift:"insert_visible_timeout_ms,18,optional" frugal:"18,optional,i64" json:"insert_visible_timeout_ms,omitempty"`
	SessionVariables       map[string]string                  `thrift:"session_variables,19,optional" frugal:"19,optional,map<string:string>" json:"session_variables,omitempty"`
	FoldConstantByBe       *bool                              `thrift:"foldConstantByBe,20,optional" frugal:"20,optional,bool" json:"foldConstantByBe,omitempty"`
	TraceCarrier           map[string]string                  `thrift:"trace_carrier,21,optional" frugal:"21,optional,map<string:string>" json:"trace_carrier,omitempty"`
	ClientNodeHost         *string                            `thrift:"clientNodeHost,22,optional" frugal:"22,optional,string" json:"clientNodeHost,omitempty"`
	ClientNodePort         *int32                             `thrift:"clientNodePort,23,optional" frugal:"23,optional,i32" json:"clientNodePort,omitempty"`
	SyncJournalOnly        *bool                              `thrift:"syncJournalOnly,24,optional" frugal:"24,optional,bool" json:"syncJournalOnly,omitempty"`
	DefaultCatalog         *string                            `thrift:"defaultCatalog,25,optional" frugal:"25,optional,string" json:"defaultCatalog,omitempty"`
	DefaultDatabase        *string                            `thrift:"defaultDatabase,26,optional" frugal:"26,optional,string" json:"defaultDatabase,omitempty"`
	CancelQeury            *bool                              `thrift:"cancel_qeury,27,optional" frugal:"27,optional,bool" json:"cancel_qeury,omitempty"`
	UserVariables          map[string]*exprs.TExprNode        `thrift:"user_variables,28,optional" frugal:"28,optional,map<string:exprs.TExprNode>" json:"user_variables,omitempty"`
	TxnLoadInfo            *TTxnLoadInfo                      `thrift:"txnLoadInfo,29,optional" frugal:"29,optional,TTxnLoadInfo" json:"txnLoadInfo,omitempty"`
	GroupCommitInfo        *TGroupCommitInfo                  `thrift:"groupCommitInfo,30,optional" frugal:"30,optional,TGroupCommitInfo" json:"groupCommitInfo,omitempty"`
	CloudCluster           *string                            `thrift:"cloud_cluster,1000,optional" frugal:"1000,optional,string" json:"cloud_cluster,omitempty"`
	NoAuth                 *bool                              `thrift:"noAuth,1001,optional" frugal:"1001,optional,bool" json:"noAuth,omitempty"`
}

func NewTMasterOpRequest() *TMasterOpRequest {
	return &TMasterOpRequest{}
}

func (p *TMasterOpRequest) InitDefault() {
}

func (p *TMasterOpRequest) GetUser() (v string) {
	return p.User
}

func (p *TMasterOpRequest) GetDb() (v string) {
	return p.Db
}

func (p *TMasterOpRequest) GetSql() (v string) {
	return p.Sql
}

var TMasterOpRequest_ResourceInfo_DEFAULT *types.TResourceInfo

func (p *TMasterOpRequest) GetResourceInfo() (v *types.TResourceInfo) {
	if !p.IsSetResourceInfo() {
		return TMasterOpRequest_ResourceInfo_DEFAULT
	}
	return p.ResourceInfo
}

var TMasterOpRequest_Cluster_DEFAULT string

func (p *TMasterOpRequest) GetCluster() (v string) {
	if !p.IsSetCluster() {
		return TMasterOpRequest_Cluster_DEFAULT
	}
	return *p.Cluster
}

var TMasterOpRequest_ExecMemLimit_DEFAULT int64

func (p *TMasterOpRequest) GetExecMemLimit() (v int64) {
	if !p.IsSetExecMemLimit() {
		return TMasterOpRequest_ExecMemLimit_DEFAULT
	}
	return *p.ExecMemLimit
}

var TMasterOpRequest_QueryTimeout_DEFAULT int32

func (p *TMasterOpRequest) GetQueryTimeout() (v int32) {
	if !p.IsSetQueryTimeout() {
		return TMasterOpRequest_QueryTimeout_DEFAULT
	}
	return *p.QueryTimeout
}

var TMasterOpRequest_UserIp_DEFAULT string

func (p *TMasterOpRequest) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TMasterOpRequest_UserIp_DEFAULT
	}
	return *p.UserIp
}

var TMasterOpRequest_TimeZone_DEFAULT string

func (p *TMasterOpRequest) GetTimeZone() (v string) {
	if !p.IsSetTimeZone() {
		return TMasterOpRequest_TimeZone_DEFAULT
	}
	return *p.TimeZone
}

var TMasterOpRequest_StmtId_DEFAULT int64

func (p *TMasterOpRequest) GetStmtId() (v int64) {
	if !p.IsSetStmtId() {
		return TMasterOpRequest_StmtId_DEFAULT
	}
	return *p.StmtId
}

var TMasterOpRequest_SqlMode_DEFAULT int64

func (p *TMasterOpRequest) GetSqlMode() (v int64) {
	if !p.IsSetSqlMode() {
		return TMasterOpRequest_SqlMode_DEFAULT
	}
	return *p.SqlMode
}

var TMasterOpRequest_LoadMemLimit_DEFAULT int64

func (p *TMasterOpRequest) GetLoadMemLimit() (v int64) {
	if !p.IsSetLoadMemLimit() {
		return TMasterOpRequest_LoadMemLimit_DEFAULT
	}
	return *p.LoadMemLimit
}

var TMasterOpRequest_EnableStrictMode_DEFAULT bool

func (p *TMasterOpRequest) GetEnableStrictMode() (v bool) {
	if !p.IsSetEnableStrictMode() {
		return TMasterOpRequest_EnableStrictMode_DEFAULT
	}
	return *p.EnableStrictMode
}

var TMasterOpRequest_CurrentUserIdent_DEFAULT *types.TUserIdentity

func (p *TMasterOpRequest) GetCurrentUserIdent() (v *types.TUserIdentity) {
	if !p.IsSetCurrentUserIdent() {
		return TMasterOpRequest_CurrentUserIdent_DEFAULT
	}
	return p.CurrentUserIdent
}

var TMasterOpRequest_StmtIdx_DEFAULT int32

func (p *TMasterOpRequest) GetStmtIdx() (v int32) {
	if !p.IsSetStmtIdx() {
		return TMasterOpRequest_StmtIdx_DEFAULT
	}
	return *p.StmtIdx
}

var TMasterOpRequest_QueryOptions_DEFAULT *palointernalservice.TQueryOptions

func (p *TMasterOpRequest) GetQueryOptions() (v *palointernalservice.TQueryOptions) {
	if !p.IsSetQueryOptions() {
		return TMasterOpRequest_QueryOptions_DEFAULT
	}
	return p.QueryOptions
}

var TMasterOpRequest_QueryId_DEFAULT *types.TUniqueId

func (p *TMasterOpRequest) GetQueryId() (v *types.TUniqueId) {
	if !p.IsSetQueryId() {
		return TMasterOpRequest_QueryId_DEFAULT
	}
	return p.QueryId
}

var TMasterOpRequest_InsertVisibleTimeoutMs_DEFAULT int64

func (p *TMasterOpRequest) GetInsertVisibleTimeoutMs() (v int64) {
	if !p.IsSetInsertVisibleTimeoutMs() {
		return TMasterOpRequest_InsertVisibleTimeoutMs_DEFAULT
	}
	return *p.InsertVisibleTimeoutMs
}

var TMasterOpRequest_SessionVariables_DEFAULT map[string]string

func (p *TMasterOpRequest) GetSessionVariables() (v map[string]string) {
	if !p.IsSetSessionVariables() {
		return TMasterOpRequest_SessionVariables_DEFAULT
	}
	return p.SessionVariables
}

var TMasterOpRequest_FoldConstantByBe_DEFAULT bool

func (p *TMasterOpRequest) GetFoldConstantByBe() (v bool) {
	if !p.IsSetFoldConstantByBe() {
		return TMasterOpRequest_FoldConstantByBe_DEFAULT
	}
	return *p.FoldConstantByBe
}

var TMasterOpRequest_TraceCarrier_DEFAULT map[string]string

func (p *TMasterOpRequest) GetTraceCarrier() (v map[string]string) {
	if !p.IsSetTraceCarrier() {
		return TMasterOpRequest_TraceCarrier_DEFAULT
	}
	return p.TraceCarrier
}

var TMasterOpRequest_ClientNodeHost_DEFAULT string

func (p *TMasterOpRequest) GetClientNodeHost() (v string) {
	if !p.IsSetClientNodeHost() {
		return TMasterOpRequest_ClientNodeHost_DEFAULT
	}
	return *p.ClientNodeHost
}

var TMasterOpRequest_ClientNodePort_DEFAULT int32

func (p *TMasterOpRequest) GetClientNodePort() (v int32) {
	if !p.IsSetClientNodePort() {
		return TMasterOpRequest_ClientNodePort_DEFAULT
	}
	return *p.ClientNodePort
}

var TMasterOpRequest_SyncJournalOnly_DEFAULT bool

func (p *TMasterOpRequest) GetSyncJournalOnly() (v bool) {
	if !p.IsSetSyncJournalOnly() {
		return TMasterOpRequest_SyncJournalOnly_DEFAULT
	}
	return *p.SyncJournalOnly
}

var TMasterOpRequest_DefaultCatalog_DEFAULT string

func (p *TMasterOpRequest) GetDefaultCatalog() (v string) {
	if !p.IsSetDefaultCatalog() {
		return TMasterOpRequest_DefaultCatalog_DEFAULT
	}
	return *p.DefaultCatalog
}

var TMasterOpRequest_DefaultDatabase_DEFAULT string

func (p *TMasterOpRequest) GetDefaultDatabase() (v string) {
	if !p.IsSetDefaultDatabase() {
		return TMasterOpRequest_DefaultDatabase_DEFAULT
	}
	return *p.DefaultDatabase
}

var TMasterOpRequest_CancelQeury_DEFAULT bool

func (p *TMasterOpRequest) GetCancelQeury() (v bool) {
	if !p.IsSetCancelQeury() {
		return TMasterOpRequest_CancelQeury_DEFAULT
	}
	return *p.CancelQeury
}

var TMasterOpRequest_UserVariables_DEFAULT map[string]*exprs.TExprNode

func (p *TMasterOpRequest) GetUserVariables() (v map[string]*exprs.TExprNode) {
	if !p.IsSetUserVariables() {
		return TMasterOpRequest_UserVariables_DEFAULT
	}
	return p.UserVariables
}

var TMasterOpRequest_TxnLoadInfo_DEFAULT *TTxnLoadInfo

func (p *TMasterOpRequest) GetTxnLoadInfo() (v *TTxnLoadInfo) {
	if !p.IsSetTxnLoadInfo() {
		return TMasterOpRequest_TxnLoadInfo_DEFAULT
	}
	return p.TxnLoadInfo
}

var TMasterOpRequest_GroupCommitInfo_DEFAULT *TGroupCommitInfo

func (p *TMasterOpRequest) GetGroupCommitInfo() (v *TGroupCommitInfo) {
	if !p.IsSetGroupCommitInfo() {
		return TMasterOpRequest_GroupCommitInfo_DEFAULT
	}
	return p.GroupCommitInfo
}

var TMasterOpRequest_CloudCluster_DEFAULT string

func (p *TMasterOpRequest) GetCloudCluster() (v string) {
	if !p.IsSetCloudCluster() {
		return TMasterOpRequest_CloudCluster_DEFAULT
	}
	return *p.CloudCluster
}

var TMasterOpRequest_NoAuth_DEFAULT bool

func (p *TMasterOpRequest) GetNoAuth() (v bool) {
	if !p.IsSetNoAuth() {
		return TMasterOpRequest_NoAuth_DEFAULT
	}
	return *p.NoAuth
}
func (p *TMasterOpRequest) SetUser(val string) {
	p.User = val
}
func (p *TMasterOpRequest) SetDb(val string) {
	p.Db = val
}
func (p *TMasterOpRequest) SetSql(val string) {
	p.Sql = val
}
func (p *TMasterOpRequest) SetResourceInfo(val *types.TResourceInfo) {
	p.ResourceInfo = val
}
func (p *TMasterOpRequest) SetCluster(val *string) {
	p.Cluster = val
}
func (p *TMasterOpRequest) SetExecMemLimit(val *int64) {
	p.ExecMemLimit = val
}
func (p *TMasterOpRequest) SetQueryTimeout(val *int32) {
	p.QueryTimeout = val
}
func (p *TMasterOpRequest) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TMasterOpRequest) SetTimeZone(val *string) {
	p.TimeZone = val
}
func (p *TMasterOpRequest) SetStmtId(val *int64) {
	p.StmtId = val
}
func (p *TMasterOpRequest) SetSqlMode(val *int64) {
	p.SqlMode = val
}
func (p *TMasterOpRequest) SetLoadMemLimit(val *int64) {
	p.LoadMemLimit = val
}
func (p *TMasterOpRequest) SetEnableStrictMode(val *bool) {
	p.EnableStrictMode = val
}
func (p *TMasterOpRequest) SetCurrentUserIdent(val *types.TUserIdentity) {
	p.CurrentUserIdent = val
}
func (p *TMasterOpRequest) SetStmtIdx(val *int32) {
	p.StmtIdx = val
}
func (p *TMasterOpRequest) SetQueryOptions(val *palointernalservice.TQueryOptions) {
	p.QueryOptions = val
}
func (p *TMasterOpRequest) SetQueryId(val *types.TUniqueId) {
	p.QueryId = val
}
func (p *TMasterOpRequest) SetInsertVisibleTimeoutMs(val *int64) {
	p.InsertVisibleTimeoutMs = val
}
func (p *TMasterOpRequest) SetSessionVariables(val map[string]string) {
	p.SessionVariables = val
}
func (p *TMasterOpRequest) SetFoldConstantByBe(val *bool) {
	p.FoldConstantByBe = val
}
func (p *TMasterOpRequest) SetTraceCarrier(val map[string]string) {
	p.TraceCarrier = val
}
func (p *TMasterOpRequest) SetClientNodeHost(val *string) {
	p.ClientNodeHost = val
}
func (p *TMasterOpRequest) SetClientNodePort(val *int32) {
	p.ClientNodePort = val
}
func (p *TMasterOpRequest) SetSyncJournalOnly(val *bool) {
	p.SyncJournalOnly = val
}
func (p *TMasterOpRequest) SetDefaultCatalog(val *string) {
	p.DefaultCatalog = val
}
func (p *TMasterOpRequest) SetDefaultDatabase(val *string) {
	p.DefaultDatabase = val
}
func (p *TMasterOpRequest) SetCancelQeury(val *bool) {
	p.CancelQeury = val
}
func (p *TMasterOpRequest) SetUserVariables(val map[string]*exprs.TExprNode) {
	p.UserVariables = val
}
func (p *TMasterOpRequest) SetTxnLoadInfo(val *TTxnLoadInfo) {
	p.TxnLoadInfo = val
}
func (p *TMasterOpRequest) SetGroupCommitInfo(val *TGroupCommitInfo) {
	p.GroupCommitInfo = val
}
func (p *TMasterOpRequest) SetCloudCluster(val *string) {
	p.CloudCluster = val
}
func (p *TMasterOpRequest) SetNoAuth(val *bool) {
	p.NoAuth = val
}

var fieldIDToName_TMasterOpRequest = map[int16]string{
	1:    "user",
	2:    "db",
	3:    "sql",
	4:    "resourceInfo",
	5:    "cluster",
	6:    "execMemLimit",
	7:    "queryTimeout",
	8:    "user_ip",
	9:    "time_zone",
	10:   "stmt_id",
	11:   "sqlMode",
	12:   "loadMemLimit",
	13:   "enableStrictMode",
	14:   "current_user_ident",
	15:   "stmtIdx",
	16:   "query_options",
	17:   "query_id",
	18:   "insert_visible_timeout_ms",
	19:   "session_variables",
	20:   "foldConstantByBe",
	21:   "trace_carrier",
	22:   "clientNodeHost",
	23:   "clientNodePort",
	24:   "syncJournalOnly",
	25:   "defaultCatalog",
	26:   "defaultDatabase",
	27:   "cancel_qeury",
	28:   "user_variables",
	29:   "txnLoadInfo",
	30:   "groupCommitInfo",
	1000: "cloud_cluster",
	1001: "noAuth",
}

func (p *TMasterOpRequest) IsSetResourceInfo() bool {
	return p.ResourceInfo != nil
}

func (p *TMasterOpRequest) IsSetCluster() bool {
	return p.Cluster != nil
}

func (p *TMasterOpRequest) IsSetExecMemLimit() bool {
	return p.ExecMemLimit != nil
}

func (p *TMasterOpRequest) IsSetQueryTimeout() bool {
	return p.QueryTimeout != nil
}

func (p *TMasterOpRequest) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TMasterOpRequest) IsSetTimeZone() bool {
	return p.TimeZone != nil
}

func (p *TMasterOpRequest) IsSetStmtId() bool {
	return p.StmtId != nil
}

func (p *TMasterOpRequest) IsSetSqlMode() bool {
	return p.SqlMode != nil
}

func (p *TMasterOpRequest) IsSetLoadMemLimit() bool {
	return p.LoadMemLimit != nil
}

func (p *TMasterOpRequest) IsSetEnableStrictMode() bool {
	return p.EnableStrictMode != nil
}

func (p *TMasterOpRequest) IsSetCurrentUserIdent() bool {
	return p.CurrentUserIdent != nil
}

func (p *TMasterOpRequest) IsSetStmtIdx() bool {
	return p.StmtIdx != nil
}

func (p *TMasterOpRequest) IsSetQueryOptions() bool {
	return p.QueryOptions != nil
}

func (p *TMasterOpRequest) IsSetQueryId() bool {
	return p.QueryId != nil
}

func (p *TMasterOpRequest) IsSetInsertVisibleTimeoutMs() bool {
	return p.InsertVisibleTimeoutMs != nil
}

func (p *TMasterOpRequest) IsSetSessionVariables() bool {
	return p.SessionVariables != nil
}

func (p *TMasterOpRequest) IsSetFoldConstantByBe() bool {
	return p.FoldConstantByBe != nil
}

func (p *TMasterOpRequest) IsSetTraceCarrier() bool {
	return p.TraceCarrier != nil
}

func (p *TMasterOpRequest) IsSetClientNodeHost() bool {
	return p.ClientNodeHost != nil
}

func (p *TMasterOpRequest) IsSetClientNodePort() bool {
	return p.ClientNodePort != nil
}

func (p *TMasterOpRequest) IsSetSyncJournalOnly() bool {
	return p.SyncJournalOnly != nil
}

func (p *TMasterOpRequest) IsSetDefaultCatalog() bool {
	return p.DefaultCatalog != nil
}

func (p *TMasterOpRequest) IsSetDefaultDatabase() bool {
	return p.DefaultDatabase != nil
}

func (p *TMasterOpRequest) IsSetCancelQeury() bool {
	return p.CancelQeury != nil
}

func (p *TMasterOpRequest) IsSetUserVariables() bool {
	return p.UserVariables != nil
}

func (p *TMasterOpRequest) IsSetTxnLoadInfo() bool {
	return p.TxnLoadInfo != nil
}

func (p *TMasterOpRequest) IsSetGroupCommitInfo() bool {
	return p.GroupCommitInfo != nil
}

func (p *TMasterOpRequest) IsSetCloudCluster() bool {
	return p.CloudCluster != nil
}

func (p *TMasterOpRequest) IsSetNoAuth() bool {
	return p.NoAuth != nil
}

func (p *TMasterOpRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUser bool = false
	var issetDb bool = false
	var issetSql bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUser = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDb = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSql = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 29:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 30:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1000:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1000(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1001:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1001(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUser {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetDb {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSql {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMasterOpRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TMasterOpRequest[fieldId]))
}

func (p *TMasterOpRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.User = _field
	return nil
}
func (p *TMasterOpRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Db = _field
	return nil
}
func (p *TMasterOpRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Sql = _field
	return nil
}
func (p *TMasterOpRequest) ReadField4(iprot thrift.TProtocol) error {
	_field := types.NewTResourceInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ResourceInfo = _field
	return nil
}
func (p *TMasterOpRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cluster = _field
	return nil
}
func (p *TMasterOpRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExecMemLimit = _field
	return nil
}
func (p *TMasterOpRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.QueryTimeout = _field
	return nil
}
func (p *TMasterOpRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TMasterOpRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TimeZone = _field
	return nil
}
func (p *TMasterOpRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StmtId = _field
	return nil
}
func (p *TMasterOpRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SqlMode = _field
	return nil
}
func (p *TMasterOpRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LoadMemLimit = _field
	return nil
}
func (p *TMasterOpRequest) ReadField13(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnableStrictMode = _field
	return nil
}
func (p *TMasterOpRequest) ReadField14(iprot thrift.TProtocol) error {
	_field := types.NewTUserIdentity()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CurrentUserIdent = _field
	return nil
}
func (p *TMasterOpRequest) ReadField15(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StmtIdx = _field
	return nil
}
func (p *TMasterOpRequest) ReadField16(iprot thrift.TProtocol) error {
	_field := palointernalservice.NewTQueryOptions()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryOptions = _field
	return nil
}
func (p *TMasterOpRequest) ReadField17(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryId = _field
	return nil
}
func (p *TMasterOpRequest) ReadField18(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InsertVisibleTimeoutMs = _field
	return nil
}
func (p *TMasterOpRequest) ReadField19(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.SessionVariables = _field
	return nil
}
func (p *TMasterOpRequest) ReadField20(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FoldConstantByBe = _field
	return nil
}
func (p *TMasterOpRequest) ReadField21(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.TraceCarrier = _field
	return nil
}
func (p *TMasterOpRequest) ReadField22(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ClientNodeHost = _field
	return nil
}
func (p *TMasterOpRequest) ReadField23(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ClientNodePort = _field
	return nil
}
func (p *TMasterOpRequest) ReadField24(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SyncJournalOnly = _field
	return nil
}
func (p *TMasterOpRequest) ReadField25(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DefaultCatalog = _field
	return nil
}
func (p *TMasterOpRequest) ReadField26(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DefaultDatabase = _field
	return nil
}
func (p *TMasterOpRequest) ReadField27(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CancelQeury = _field
	return nil
}
func (p *TMasterOpRequest) ReadField28(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]*exprs.TExprNode, size)
	values := make([]exprs.TExprNode, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.UserVariables = _field
	return nil
}
func (p *TMasterOpRequest) ReadField29(iprot thrift.TProtocol) error {
	_field := NewTTxnLoadInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TxnLoadInfo = _field
	return nil
}
func (p *TMasterOpRequest) ReadField30(iprot thrift.TProtocol) error {
	_field := NewTGroupCommitInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.GroupCommitInfo = _field
	return nil
}
func (p *TMasterOpRequest) ReadField1000(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CloudCluster = _field
	return nil
}
func (p *TMasterOpRequest) ReadField1001(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NoAuth = _field
	return nil
}

func (p *TMasterOpRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMasterOpRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField1000(oprot); err != nil {
			fieldId = 1000
			goto WriteFieldError
		}
		if err = p.writeField1001(oprot); err != nil {
			fieldId = 1001
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMasterOpRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.User); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("db", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Db); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sql", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Sql); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetResourceInfo() {
		if err = oprot.WriteFieldBegin("resourceInfo", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ResourceInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCluster() {
		if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetExecMemLimit() {
		if err = oprot.WriteFieldBegin("execMemLimit", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExecMemLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryTimeout() {
		if err = oprot.WriteFieldBegin("queryTimeout", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.QueryTimeout); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeZone() {
		if err = oprot.WriteFieldBegin("time_zone", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TimeZone); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetStmtId() {
		if err = oprot.WriteFieldBegin("stmt_id", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.StmtId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSqlMode() {
		if err = oprot.WriteFieldBegin("sqlMode", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SqlMode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadMemLimit() {
		if err = oprot.WriteFieldBegin("loadMemLimit", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LoadMemLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableStrictMode() {
		if err = oprot.WriteFieldBegin("enableStrictMode", thrift.BOOL, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableStrictMode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentUserIdent() {
		if err = oprot.WriteFieldBegin("current_user_ident", thrift.STRUCT, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CurrentUserIdent.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetStmtIdx() {
		if err = oprot.WriteFieldBegin("stmtIdx", thrift.I32, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.StmtIdx); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryOptions() {
		if err = oprot.WriteFieldBegin("query_options", thrift.STRUCT, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.QueryOptions.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryId() {
		if err = oprot.WriteFieldBegin("query_id", thrift.STRUCT, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.QueryId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetInsertVisibleTimeoutMs() {
		if err = oprot.WriteFieldBegin("insert_visible_timeout_ms", thrift.I64, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.InsertVisibleTimeoutMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessionVariables() {
		if err = oprot.WriteFieldBegin("session_variables", thrift.MAP, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.SessionVariables)); err != nil {
			return err
		}
		for k, v := range p.SessionVariables {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetFoldConstantByBe() {
		if err = oprot.WriteFieldBegin("foldConstantByBe", thrift.BOOL, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.FoldConstantByBe); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetTraceCarrier() {
		if err = oprot.WriteFieldBegin("trace_carrier", thrift.MAP, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.TraceCarrier)); err != nil {
			return err
		}
		for k, v := range p.TraceCarrier {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetClientNodeHost() {
		if err = oprot.WriteFieldBegin("clientNodeHost", thrift.STRING, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ClientNodeHost); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetClientNodePort() {
		if err = oprot.WriteFieldBegin("clientNodePort", thrift.I32, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ClientNodePort); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetSyncJournalOnly() {
		if err = oprot.WriteFieldBegin("syncJournalOnly", thrift.BOOL, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.SyncJournalOnly); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultCatalog() {
		if err = oprot.WriteFieldBegin("defaultCatalog", thrift.STRING, 25); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DefaultCatalog); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultDatabase() {
		if err = oprot.WriteFieldBegin("defaultDatabase", thrift.STRING, 26); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DefaultDatabase); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetCancelQeury() {
		if err = oprot.WriteFieldBegin("cancel_qeury", thrift.BOOL, 27); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.CancelQeury); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserVariables() {
		if err = oprot.WriteFieldBegin("user_variables", thrift.MAP, 28); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.UserVariables)); err != nil {
			return err
		}
		for k, v := range p.UserVariables {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnLoadInfo() {
		if err = oprot.WriteFieldBegin("txnLoadInfo", thrift.STRUCT, 29); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TxnLoadInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupCommitInfo() {
		if err = oprot.WriteFieldBegin("groupCommitInfo", thrift.STRUCT, 30); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.GroupCommitInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField1000(oprot thrift.TProtocol) (err error) {
	if p.IsSetCloudCluster() {
		if err = oprot.WriteFieldBegin("cloud_cluster", thrift.STRING, 1000); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CloudCluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 end error: ", p), err)
}

func (p *TMasterOpRequest) writeField1001(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoAuth() {
		if err = oprot.WriteFieldBegin("noAuth", thrift.BOOL, 1001); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.NoAuth); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1001 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1001 end error: ", p), err)
}

func (p *TMasterOpRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMasterOpRequest(%+v)", *p)

}

func (p *TMasterOpRequest) DeepEqual(ano *TMasterOpRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.User) {
		return false
	}
	if !p.Field2DeepEqual(ano.Db) {
		return false
	}
	if !p.Field3DeepEqual(ano.Sql) {
		return false
	}
	if !p.Field4DeepEqual(ano.ResourceInfo) {
		return false
	}
	if !p.Field5DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field6DeepEqual(ano.ExecMemLimit) {
		return false
	}
	if !p.Field7DeepEqual(ano.QueryTimeout) {
		return false
	}
	if !p.Field8DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field9DeepEqual(ano.TimeZone) {
		return false
	}
	if !p.Field10DeepEqual(ano.StmtId) {
		return false
	}
	if !p.Field11DeepEqual(ano.SqlMode) {
		return false
	}
	if !p.Field12DeepEqual(ano.LoadMemLimit) {
		return false
	}
	if !p.Field13DeepEqual(ano.EnableStrictMode) {
		return false
	}
	if !p.Field14DeepEqual(ano.CurrentUserIdent) {
		return false
	}
	if !p.Field15DeepEqual(ano.StmtIdx) {
		return false
	}
	if !p.Field16DeepEqual(ano.QueryOptions) {
		return false
	}
	if !p.Field17DeepEqual(ano.QueryId) {
		return false
	}
	if !p.Field18DeepEqual(ano.InsertVisibleTimeoutMs) {
		return false
	}
	if !p.Field19DeepEqual(ano.SessionVariables) {
		return false
	}
	if !p.Field20DeepEqual(ano.FoldConstantByBe) {
		return false
	}
	if !p.Field21DeepEqual(ano.TraceCarrier) {
		return false
	}
	if !p.Field22DeepEqual(ano.ClientNodeHost) {
		return false
	}
	if !p.Field23DeepEqual(ano.ClientNodePort) {
		return false
	}
	if !p.Field24DeepEqual(ano.SyncJournalOnly) {
		return false
	}
	if !p.Field25DeepEqual(ano.DefaultCatalog) {
		return false
	}
	if !p.Field26DeepEqual(ano.DefaultDatabase) {
		return false
	}
	if !p.Field27DeepEqual(ano.CancelQeury) {
		return false
	}
	if !p.Field28DeepEqual(ano.UserVariables) {
		return false
	}
	if !p.Field29DeepEqual(ano.TxnLoadInfo) {
		return false
	}
	if !p.Field30DeepEqual(ano.GroupCommitInfo) {
		return false
	}
	if !p.Field1000DeepEqual(ano.CloudCluster) {
		return false
	}
	if !p.Field1001DeepEqual(ano.NoAuth) {
		return false
	}
	return true
}

func (p *TMasterOpRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.User, src) != 0 {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Db, src) != 0 {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Sql, src) != 0 {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field4DeepEqual(src *types.TResourceInfo) bool {

	if !p.ResourceInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field5DeepEqual(src *string) bool {

	if p.Cluster == src {
		return true
	} else if p.Cluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field6DeepEqual(src *int64) bool {

	if p.ExecMemLimit == src {
		return true
	} else if p.ExecMemLimit == nil || src == nil {
		return false
	}
	if *p.ExecMemLimit != *src {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field7DeepEqual(src *int32) bool {

	if p.QueryTimeout == src {
		return true
	} else if p.QueryTimeout == nil || src == nil {
		return false
	}
	if *p.QueryTimeout != *src {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field8DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field9DeepEqual(src *string) bool {

	if p.TimeZone == src {
		return true
	} else if p.TimeZone == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TimeZone, *src) != 0 {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field10DeepEqual(src *int64) bool {

	if p.StmtId == src {
		return true
	} else if p.StmtId == nil || src == nil {
		return false
	}
	if *p.StmtId != *src {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field11DeepEqual(src *int64) bool {

	if p.SqlMode == src {
		return true
	} else if p.SqlMode == nil || src == nil {
		return false
	}
	if *p.SqlMode != *src {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field12DeepEqual(src *int64) bool {

	if p.LoadMemLimit == src {
		return true
	} else if p.LoadMemLimit == nil || src == nil {
		return false
	}
	if *p.LoadMemLimit != *src {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field13DeepEqual(src *bool) bool {

	if p.EnableStrictMode == src {
		return true
	} else if p.EnableStrictMode == nil || src == nil {
		return false
	}
	if *p.EnableStrictMode != *src {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field14DeepEqual(src *types.TUserIdentity) bool {

	if !p.CurrentUserIdent.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field15DeepEqual(src *int32) bool {

	if p.StmtIdx == src {
		return true
	} else if p.StmtIdx == nil || src == nil {
		return false
	}
	if *p.StmtIdx != *src {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field16DeepEqual(src *palointernalservice.TQueryOptions) bool {

	if !p.QueryOptions.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field17DeepEqual(src *types.TUniqueId) bool {

	if !p.QueryId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field18DeepEqual(src *int64) bool {

	if p.InsertVisibleTimeoutMs == src {
		return true
	} else if p.InsertVisibleTimeoutMs == nil || src == nil {
		return false
	}
	if *p.InsertVisibleTimeoutMs != *src {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field19DeepEqual(src map[string]string) bool {

	if len(p.SessionVariables) != len(src) {
		return false
	}
	for k, v := range p.SessionVariables {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TMasterOpRequest) Field20DeepEqual(src *bool) bool {

	if p.FoldConstantByBe == src {
		return true
	} else if p.FoldConstantByBe == nil || src == nil {
		return false
	}
	if *p.FoldConstantByBe != *src {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field21DeepEqual(src map[string]string) bool {

	if len(p.TraceCarrier) != len(src) {
		return false
	}
	for k, v := range p.TraceCarrier {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TMasterOpRequest) Field22DeepEqual(src *string) bool {

	if p.ClientNodeHost == src {
		return true
	} else if p.ClientNodeHost == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ClientNodeHost, *src) != 0 {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field23DeepEqual(src *int32) bool {

	if p.ClientNodePort == src {
		return true
	} else if p.ClientNodePort == nil || src == nil {
		return false
	}
	if *p.ClientNodePort != *src {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field24DeepEqual(src *bool) bool {

	if p.SyncJournalOnly == src {
		return true
	} else if p.SyncJournalOnly == nil || src == nil {
		return false
	}
	if *p.SyncJournalOnly != *src {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field25DeepEqual(src *string) bool {

	if p.DefaultCatalog == src {
		return true
	} else if p.DefaultCatalog == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DefaultCatalog, *src) != 0 {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field26DeepEqual(src *string) bool {

	if p.DefaultDatabase == src {
		return true
	} else if p.DefaultDatabase == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DefaultDatabase, *src) != 0 {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field27DeepEqual(src *bool) bool {

	if p.CancelQeury == src {
		return true
	} else if p.CancelQeury == nil || src == nil {
		return false
	}
	if *p.CancelQeury != *src {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field28DeepEqual(src map[string]*exprs.TExprNode) bool {

	if len(p.UserVariables) != len(src) {
		return false
	}
	for k, v := range p.UserVariables {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TMasterOpRequest) Field29DeepEqual(src *TTxnLoadInfo) bool {

	if !p.TxnLoadInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field30DeepEqual(src *TGroupCommitInfo) bool {

	if !p.GroupCommitInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field1000DeepEqual(src *string) bool {

	if p.CloudCluster == src {
		return true
	} else if p.CloudCluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CloudCluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TMasterOpRequest) Field1001DeepEqual(src *bool) bool {

	if p.NoAuth == src {
		return true
	} else if p.NoAuth == nil || src == nil {
		return false
	}
	if *p.NoAuth != *src {
		return false
	}
	return true
}

type TColumnDefinition struct {
	ColumnName   string                  `thrift:"columnName,1,required" frugal:"1,required,string" json:"columnName"`
	ColumnType   *types.TColumnType      `thrift:"columnType,2,required" frugal:"2,required,types.TColumnType" json:"columnType"`
	AggType      *types.TAggregationType `thrift:"aggType,3,optional" frugal:"3,optional,TAggregationType" json:"aggType,omitempty"`
	DefaultValue *string                 `thrift:"defaultValue,4,optional" frugal:"4,optional,string" json:"defaultValue,omitempty"`
}

func NewTColumnDefinition() *TColumnDefinition {
	return &TColumnDefinition{}
}

func (p *TColumnDefinition) InitDefault() {
}

func (p *TColumnDefinition) GetColumnName() (v string) {
	return p.ColumnName
}

var TColumnDefinition_ColumnType_DEFAULT *types.TColumnType

func (p *TColumnDefinition) GetColumnType() (v *types.TColumnType) {
	if !p.IsSetColumnType() {
		return TColumnDefinition_ColumnType_DEFAULT
	}
	return p.ColumnType
}

var TColumnDefinition_AggType_DEFAULT types.TAggregationType

func (p *TColumnDefinition) GetAggType() (v types.TAggregationType) {
	if !p.IsSetAggType() {
		return TColumnDefinition_AggType_DEFAULT
	}
	return *p.AggType
}

var TColumnDefinition_DefaultValue_DEFAULT string

func (p *TColumnDefinition) GetDefaultValue() (v string) {
	if !p.IsSetDefaultValue() {
		return TColumnDefinition_DefaultValue_DEFAULT
	}
	return *p.DefaultValue
}
func (p *TColumnDefinition) SetColumnName(val string) {
	p.ColumnName = val
}
func (p *TColumnDefinition) SetColumnType(val *types.TColumnType) {
	p.ColumnType = val
}
func (p *TColumnDefinition) SetAggType(val *types.TAggregationType) {
	p.AggType = val
}
func (p *TColumnDefinition) SetDefaultValue(val *string) {
	p.DefaultValue = val
}

var fieldIDToName_TColumnDefinition = map[int16]string{
	1: "columnName",
	2: "columnType",
	3: "aggType",
	4: "defaultValue",
}

func (p *TColumnDefinition) IsSetColumnType() bool {
	return p.ColumnType != nil
}

func (p *TColumnDefinition) IsSetAggType() bool {
	return p.AggType != nil
}

func (p *TColumnDefinition) IsSetDefaultValue() bool {
	return p.DefaultValue != nil
}

func (p *TColumnDefinition) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetColumnName bool = false
	var issetColumnType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumnName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumnType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetColumnName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetColumnType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TColumnDefinition[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TColumnDefinition[fieldId]))
}

func (p *TColumnDefinition) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ColumnName = _field
	return nil
}
func (p *TColumnDefinition) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTColumnType()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ColumnType = _field
	return nil
}
func (p *TColumnDefinition) ReadField3(iprot thrift.TProtocol) error {

	var _field *types.TAggregationType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TAggregationType(v)
		_field = &tmp
	}
	p.AggType = _field
	return nil
}
func (p *TColumnDefinition) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DefaultValue = _field
	return nil
}

func (p *TColumnDefinition) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TColumnDefinition"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TColumnDefinition) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columnName", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ColumnName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TColumnDefinition) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columnType", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ColumnType.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TColumnDefinition) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAggType() {
		if err = oprot.WriteFieldBegin("aggType", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.AggType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TColumnDefinition) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultValue() {
		if err = oprot.WriteFieldBegin("defaultValue", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DefaultValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TColumnDefinition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumnDefinition(%+v)", *p)

}

func (p *TColumnDefinition) DeepEqual(ano *TColumnDefinition) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnName) {
		return false
	}
	if !p.Field2DeepEqual(ano.ColumnType) {
		return false
	}
	if !p.Field3DeepEqual(ano.AggType) {
		return false
	}
	if !p.Field4DeepEqual(ano.DefaultValue) {
		return false
	}
	return true
}

func (p *TColumnDefinition) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ColumnName, src) != 0 {
		return false
	}
	return true
}
func (p *TColumnDefinition) Field2DeepEqual(src *types.TColumnType) bool {

	if !p.ColumnType.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TColumnDefinition) Field3DeepEqual(src *types.TAggregationType) bool {

	if p.AggType == src {
		return true
	} else if p.AggType == nil || src == nil {
		return false
	}
	if *p.AggType != *src {
		return false
	}
	return true
}
func (p *TColumnDefinition) Field4DeepEqual(src *string) bool {

	if p.DefaultValue == src {
		return true
	} else if p.DefaultValue == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DefaultValue, *src) != 0 {
		return false
	}
	return true
}

type TShowResultSetMetaData struct {
	Columns []*TColumnDefinition `thrift:"columns,1,required" frugal:"1,required,list<TColumnDefinition>" json:"columns"`
}

func NewTShowResultSetMetaData() *TShowResultSetMetaData {
	return &TShowResultSetMetaData{}
}

func (p *TShowResultSetMetaData) InitDefault() {
}

func (p *TShowResultSetMetaData) GetColumns() (v []*TColumnDefinition) {
	return p.Columns
}
func (p *TShowResultSetMetaData) SetColumns(val []*TColumnDefinition) {
	p.Columns = val
}

var fieldIDToName_TShowResultSetMetaData = map[int16]string{
	1: "columns",
}

func (p *TShowResultSetMetaData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetColumns bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumns = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetColumns {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TShowResultSetMetaData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TShowResultSetMetaData[fieldId]))
}

func (p *TShowResultSetMetaData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TColumnDefinition, 0, size)
	values := make([]TColumnDefinition, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Columns = _field
	return nil
}

func (p *TShowResultSetMetaData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TShowResultSetMetaData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TShowResultSetMetaData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("columns", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
		return err
	}
	for _, v := range p.Columns {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TShowResultSetMetaData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TShowResultSetMetaData(%+v)", *p)

}

func (p *TShowResultSetMetaData) DeepEqual(ano *TShowResultSetMetaData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Columns) {
		return false
	}
	return true
}

func (p *TShowResultSetMetaData) Field1DeepEqual(src []*TColumnDefinition) bool {

	if len(p.Columns) != len(src) {
		return false
	}
	for i, v := range p.Columns {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TShowResultSet struct {
	MetaData   *TShowResultSetMetaData `thrift:"metaData,1,required" frugal:"1,required,TShowResultSetMetaData" json:"metaData"`
	ResultRows [][]string              `thrift:"resultRows,2,required" frugal:"2,required,list<list<string>>" json:"resultRows"`
}

func NewTShowResultSet() *TShowResultSet {
	return &TShowResultSet{}
}

func (p *TShowResultSet) InitDefault() {
}

var TShowResultSet_MetaData_DEFAULT *TShowResultSetMetaData

func (p *TShowResultSet) GetMetaData() (v *TShowResultSetMetaData) {
	if !p.IsSetMetaData() {
		return TShowResultSet_MetaData_DEFAULT
	}
	return p.MetaData
}

func (p *TShowResultSet) GetResultRows() (v [][]string) {
	return p.ResultRows
}
func (p *TShowResultSet) SetMetaData(val *TShowResultSetMetaData) {
	p.MetaData = val
}
func (p *TShowResultSet) SetResultRows(val [][]string) {
	p.ResultRows = val
}

var fieldIDToName_TShowResultSet = map[int16]string{
	1: "metaData",
	2: "resultRows",
}

func (p *TShowResultSet) IsSetMetaData() bool {
	return p.MetaData != nil
}

func (p *TShowResultSet) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetMetaData bool = false
	var issetResultRows bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetMetaData = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetResultRows = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetMetaData {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetResultRows {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TShowResultSet[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TShowResultSet[fieldId]))
}

func (p *TShowResultSet) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTShowResultSetMetaData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MetaData = _field
	return nil
}
func (p *TShowResultSet) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]string, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]string, 0, size)
		for i := 0; i < size; i++ {

			var _elem1 string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem1 = v
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ResultRows = _field
	return nil
}

func (p *TShowResultSet) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TShowResultSet"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TShowResultSet) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("metaData", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.MetaData.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TShowResultSet) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resultRows", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.ResultRows)); err != nil {
		return err
	}
	for _, v := range p.ResultRows {
		if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TShowResultSet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TShowResultSet(%+v)", *p)

}

func (p *TShowResultSet) DeepEqual(ano *TShowResultSet) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MetaData) {
		return false
	}
	if !p.Field2DeepEqual(ano.ResultRows) {
		return false
	}
	return true
}

func (p *TShowResultSet) Field1DeepEqual(src *TShowResultSetMetaData) bool {

	if !p.MetaData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TShowResultSet) Field2DeepEqual(src [][]string) bool {

	if len(p.ResultRows) != len(src) {
		return false
	}
	for i, v := range p.ResultRows {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if strings.Compare(v, _src1) != 0 {
				return false
			}
		}
	}
	return true
}

type TMasterOpResult_ struct {
	MaxJournalId        int64            `thrift:"maxJournalId,1,required" frugal:"1,required,i64" json:"maxJournalId"`
	Packet              []byte           `thrift:"packet,2,required" frugal:"2,required,binary" json:"packet"`
	ResultSet           *TShowResultSet  `thrift:"resultSet,3,optional" frugal:"3,optional,TShowResultSet" json:"resultSet,omitempty"`
	QueryId             *types.TUniqueId `thrift:"queryId,4,optional" frugal:"4,optional,types.TUniqueId" json:"queryId,omitempty"`
	Status              *string          `thrift:"status,5,optional" frugal:"5,optional,string" json:"status,omitempty"`
	StatusCode          *int32           `thrift:"statusCode,6,optional" frugal:"6,optional,i32" json:"statusCode,omitempty"`
	ErrMessage          *string          `thrift:"errMessage,7,optional" frugal:"7,optional,string" json:"errMessage,omitempty"`
	QueryResultBufList  [][]byte         `thrift:"queryResultBufList,8,optional" frugal:"8,optional,list<binary>" json:"queryResultBufList,omitempty"`
	TxnLoadInfo         *TTxnLoadInfo    `thrift:"txnLoadInfo,9,optional" frugal:"9,optional,TTxnLoadInfo" json:"txnLoadInfo,omitempty"`
	GroupCommitLoadBeId *int64           `thrift:"groupCommitLoadBeId,10,optional" frugal:"10,optional,i64" json:"groupCommitLoadBeId,omitempty"`
}

func NewTMasterOpResult_() *TMasterOpResult_ {
	return &TMasterOpResult_{}
}

func (p *TMasterOpResult_) InitDefault() {
}

func (p *TMasterOpResult_) GetMaxJournalId() (v int64) {
	return p.MaxJournalId
}

func (p *TMasterOpResult_) GetPacket() (v []byte) {
	return p.Packet
}

var TMasterOpResult__ResultSet_DEFAULT *TShowResultSet

func (p *TMasterOpResult_) GetResultSet() (v *TShowResultSet) {
	if !p.IsSetResultSet() {
		return TMasterOpResult__ResultSet_DEFAULT
	}
	return p.ResultSet
}

var TMasterOpResult__QueryId_DEFAULT *types.TUniqueId

func (p *TMasterOpResult_) GetQueryId() (v *types.TUniqueId) {
	if !p.IsSetQueryId() {
		return TMasterOpResult__QueryId_DEFAULT
	}
	return p.QueryId
}

var TMasterOpResult__Status_DEFAULT string

func (p *TMasterOpResult_) GetStatus() (v string) {
	if !p.IsSetStatus() {
		return TMasterOpResult__Status_DEFAULT
	}
	return *p.Status
}

var TMasterOpResult__StatusCode_DEFAULT int32

func (p *TMasterOpResult_) GetStatusCode() (v int32) {
	if !p.IsSetStatusCode() {
		return TMasterOpResult__StatusCode_DEFAULT
	}
	return *p.StatusCode
}

var TMasterOpResult__ErrMessage_DEFAULT string

func (p *TMasterOpResult_) GetErrMessage() (v string) {
	if !p.IsSetErrMessage() {
		return TMasterOpResult__ErrMessage_DEFAULT
	}
	return *p.ErrMessage
}

var TMasterOpResult__QueryResultBufList_DEFAULT [][]byte

func (p *TMasterOpResult_) GetQueryResultBufList() (v [][]byte) {
	if !p.IsSetQueryResultBufList() {
		return TMasterOpResult__QueryResultBufList_DEFAULT
	}
	return p.QueryResultBufList
}

var TMasterOpResult__TxnLoadInfo_DEFAULT *TTxnLoadInfo

func (p *TMasterOpResult_) GetTxnLoadInfo() (v *TTxnLoadInfo) {
	if !p.IsSetTxnLoadInfo() {
		return TMasterOpResult__TxnLoadInfo_DEFAULT
	}
	return p.TxnLoadInfo
}

var TMasterOpResult__GroupCommitLoadBeId_DEFAULT int64

func (p *TMasterOpResult_) GetGroupCommitLoadBeId() (v int64) {
	if !p.IsSetGroupCommitLoadBeId() {
		return TMasterOpResult__GroupCommitLoadBeId_DEFAULT
	}
	return *p.GroupCommitLoadBeId
}
func (p *TMasterOpResult_) SetMaxJournalId(val int64) {
	p.MaxJournalId = val
}
func (p *TMasterOpResult_) SetPacket(val []byte) {
	p.Packet = val
}
func (p *TMasterOpResult_) SetResultSet(val *TShowResultSet) {
	p.ResultSet = val
}
func (p *TMasterOpResult_) SetQueryId(val *types.TUniqueId) {
	p.QueryId = val
}
func (p *TMasterOpResult_) SetStatus(val *string) {
	p.Status = val
}
func (p *TMasterOpResult_) SetStatusCode(val *int32) {
	p.StatusCode = val
}
func (p *TMasterOpResult_) SetErrMessage(val *string) {
	p.ErrMessage = val
}
func (p *TMasterOpResult_) SetQueryResultBufList(val [][]byte) {
	p.QueryResultBufList = val
}
func (p *TMasterOpResult_) SetTxnLoadInfo(val *TTxnLoadInfo) {
	p.TxnLoadInfo = val
}
func (p *TMasterOpResult_) SetGroupCommitLoadBeId(val *int64) {
	p.GroupCommitLoadBeId = val
}

var fieldIDToName_TMasterOpResult_ = map[int16]string{
	1:  "maxJournalId",
	2:  "packet",
	3:  "resultSet",
	4:  "queryId",
	5:  "status",
	6:  "statusCode",
	7:  "errMessage",
	8:  "queryResultBufList",
	9:  "txnLoadInfo",
	10: "groupCommitLoadBeId",
}

func (p *TMasterOpResult_) IsSetResultSet() bool {
	return p.ResultSet != nil
}

func (p *TMasterOpResult_) IsSetQueryId() bool {
	return p.QueryId != nil
}

func (p *TMasterOpResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TMasterOpResult_) IsSetStatusCode() bool {
	return p.StatusCode != nil
}

func (p *TMasterOpResult_) IsSetErrMessage() bool {
	return p.ErrMessage != nil
}

func (p *TMasterOpResult_) IsSetQueryResultBufList() bool {
	return p.QueryResultBufList != nil
}

func (p *TMasterOpResult_) IsSetTxnLoadInfo() bool {
	return p.TxnLoadInfo != nil
}

func (p *TMasterOpResult_) IsSetGroupCommitLoadBeId() bool {
	return p.GroupCommitLoadBeId != nil
}

func (p *TMasterOpResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetMaxJournalId bool = false
	var issetPacket bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetMaxJournalId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPacket = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetMaxJournalId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPacket {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMasterOpResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TMasterOpResult_[fieldId]))
}

func (p *TMasterOpResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxJournalId = _field
	return nil
}
func (p *TMasterOpResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Packet = _field
	return nil
}
func (p *TMasterOpResult_) ReadField3(iprot thrift.TProtocol) error {
	_field := NewTShowResultSet()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ResultSet = _field
	return nil
}
func (p *TMasterOpResult_) ReadField4(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryId = _field
	return nil
}
func (p *TMasterOpResult_) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}
func (p *TMasterOpResult_) ReadField6(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StatusCode = _field
	return nil
}
func (p *TMasterOpResult_) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ErrMessage = _field
	return nil
}
func (p *TMasterOpResult_) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]byte, 0, size)
	for i := 0; i < size; i++ {

		var _elem []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return err
		} else {
			_elem = []byte(v)
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.QueryResultBufList = _field
	return nil
}
func (p *TMasterOpResult_) ReadField9(iprot thrift.TProtocol) error {
	_field := NewTTxnLoadInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TxnLoadInfo = _field
	return nil
}
func (p *TMasterOpResult_) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.GroupCommitLoadBeId = _field
	return nil
}

func (p *TMasterOpResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMasterOpResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMasterOpResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("maxJournalId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MaxJournalId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMasterOpResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("packet", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Packet)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TMasterOpResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetResultSet() {
		if err = oprot.WriteFieldBegin("resultSet", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ResultSet.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TMasterOpResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryId() {
		if err = oprot.WriteFieldBegin("queryId", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.QueryId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TMasterOpResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TMasterOpResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatusCode() {
		if err = oprot.WriteFieldBegin("statusCode", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.StatusCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TMasterOpResult_) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrMessage() {
		if err = oprot.WriteFieldBegin("errMessage", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ErrMessage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TMasterOpResult_) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryResultBufList() {
		if err = oprot.WriteFieldBegin("queryResultBufList", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.QueryResultBufList)); err != nil {
			return err
		}
		for _, v := range p.QueryResultBufList {
			if err := oprot.WriteBinary([]byte(v)); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TMasterOpResult_) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnLoadInfo() {
		if err = oprot.WriteFieldBegin("txnLoadInfo", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TxnLoadInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TMasterOpResult_) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupCommitLoadBeId() {
		if err = oprot.WriteFieldBegin("groupCommitLoadBeId", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.GroupCommitLoadBeId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TMasterOpResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMasterOpResult_(%+v)", *p)

}

func (p *TMasterOpResult_) DeepEqual(ano *TMasterOpResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MaxJournalId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Packet) {
		return false
	}
	if !p.Field3DeepEqual(ano.ResultSet) {
		return false
	}
	if !p.Field4DeepEqual(ano.QueryId) {
		return false
	}
	if !p.Field5DeepEqual(ano.Status) {
		return false
	}
	if !p.Field6DeepEqual(ano.StatusCode) {
		return false
	}
	if !p.Field7DeepEqual(ano.ErrMessage) {
		return false
	}
	if !p.Field8DeepEqual(ano.QueryResultBufList) {
		return false
	}
	if !p.Field9DeepEqual(ano.TxnLoadInfo) {
		return false
	}
	if !p.Field10DeepEqual(ano.GroupCommitLoadBeId) {
		return false
	}
	return true
}

func (p *TMasterOpResult_) Field1DeepEqual(src int64) bool {

	if p.MaxJournalId != src {
		return false
	}
	return true
}
func (p *TMasterOpResult_) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.Packet, src) != 0 {
		return false
	}
	return true
}
func (p *TMasterOpResult_) Field3DeepEqual(src *TShowResultSet) bool {

	if !p.ResultSet.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMasterOpResult_) Field4DeepEqual(src *types.TUniqueId) bool {

	if !p.QueryId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMasterOpResult_) Field5DeepEqual(src *string) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Status, *src) != 0 {
		return false
	}
	return true
}
func (p *TMasterOpResult_) Field6DeepEqual(src *int32) bool {

	if p.StatusCode == src {
		return true
	} else if p.StatusCode == nil || src == nil {
		return false
	}
	if *p.StatusCode != *src {
		return false
	}
	return true
}
func (p *TMasterOpResult_) Field7DeepEqual(src *string) bool {

	if p.ErrMessage == src {
		return true
	} else if p.ErrMessage == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ErrMessage, *src) != 0 {
		return false
	}
	return true
}
func (p *TMasterOpResult_) Field8DeepEqual(src [][]byte) bool {

	if len(p.QueryResultBufList) != len(src) {
		return false
	}
	for i, v := range p.QueryResultBufList {
		_src := src[i]
		if bytes.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TMasterOpResult_) Field9DeepEqual(src *TTxnLoadInfo) bool {

	if !p.TxnLoadInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMasterOpResult_) Field10DeepEqual(src *int64) bool {

	if p.GroupCommitLoadBeId == src {
		return true
	} else if p.GroupCommitLoadBeId == nil || src == nil {
		return false
	}
	if *p.GroupCommitLoadBeId != *src {
		return false
	}
	return true
}

type TUpdateExportTaskStatusRequest struct {
	ProtocolVersion FrontendServiceVersion                    `thrift:"protocolVersion,1,required" frugal:"1,required,FrontendServiceVersion" json:"protocolVersion"`
	TaskId          *types.TUniqueId                          `thrift:"taskId,2,required" frugal:"2,required,types.TUniqueId" json:"taskId"`
	TaskStatus      *palointernalservice.TExportStatusResult_ `thrift:"taskStatus,3,required" frugal:"3,required,palointernalservice.TExportStatusResult_" json:"taskStatus"`
}

func NewTUpdateExportTaskStatusRequest() *TUpdateExportTaskStatusRequest {
	return &TUpdateExportTaskStatusRequest{}
}

func (p *TUpdateExportTaskStatusRequest) InitDefault() {
}

func (p *TUpdateExportTaskStatusRequest) GetProtocolVersion() (v FrontendServiceVersion) {
	return p.ProtocolVersion
}

var TUpdateExportTaskStatusRequest_TaskId_DEFAULT *types.TUniqueId

func (p *TUpdateExportTaskStatusRequest) GetTaskId() (v *types.TUniqueId) {
	if !p.IsSetTaskId() {
		return TUpdateExportTaskStatusRequest_TaskId_DEFAULT
	}
	return p.TaskId
}

var TUpdateExportTaskStatusRequest_TaskStatus_DEFAULT *palointernalservice.TExportStatusResult_

func (p *TUpdateExportTaskStatusRequest) GetTaskStatus() (v *palointernalservice.TExportStatusResult_) {
	if !p.IsSetTaskStatus() {
		return TUpdateExportTaskStatusRequest_TaskStatus_DEFAULT
	}
	return p.TaskStatus
}
func (p *TUpdateExportTaskStatusRequest) SetProtocolVersion(val FrontendServiceVersion) {
	p.ProtocolVersion = val
}
func (p *TUpdateExportTaskStatusRequest) SetTaskId(val *types.TUniqueId) {
	p.TaskId = val
}
func (p *TUpdateExportTaskStatusRequest) SetTaskStatus(val *palointernalservice.TExportStatusResult_) {
	p.TaskStatus = val
}

var fieldIDToName_TUpdateExportTaskStatusRequest = map[int16]string{
	1: "protocolVersion",
	2: "taskId",
	3: "taskStatus",
}

func (p *TUpdateExportTaskStatusRequest) IsSetTaskId() bool {
	return p.TaskId != nil
}

func (p *TUpdateExportTaskStatusRequest) IsSetTaskStatus() bool {
	return p.TaskStatus != nil
}

func (p *TUpdateExportTaskStatusRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false
	var issetTaskId bool = false
	var issetTaskStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTaskId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetTaskStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTaskId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTaskStatus {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TUpdateExportTaskStatusRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TUpdateExportTaskStatusRequest[fieldId]))
}

func (p *TUpdateExportTaskStatusRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field FrontendServiceVersion
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = FrontendServiceVersion(v)
	}
	p.ProtocolVersion = _field
	return nil
}
func (p *TUpdateExportTaskStatusRequest) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TaskId = _field
	return nil
}
func (p *TUpdateExportTaskStatusRequest) ReadField3(iprot thrift.TProtocol) error {
	_field := palointernalservice.NewTExportStatusResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TaskStatus = _field
	return nil
}

func (p *TUpdateExportTaskStatusRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TUpdateExportTaskStatusRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TUpdateExportTaskStatusRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("protocolVersion", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TUpdateExportTaskStatusRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("taskId", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.TaskId.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TUpdateExportTaskStatusRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("taskStatus", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.TaskStatus.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TUpdateExportTaskStatusRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TUpdateExportTaskStatusRequest(%+v)", *p)

}

func (p *TUpdateExportTaskStatusRequest) DeepEqual(ano *TUpdateExportTaskStatusRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ProtocolVersion) {
		return false
	}
	if !p.Field2DeepEqual(ano.TaskId) {
		return false
	}
	if !p.Field3DeepEqual(ano.TaskStatus) {
		return false
	}
	return true
}

func (p *TUpdateExportTaskStatusRequest) Field1DeepEqual(src FrontendServiceVersion) bool {

	if p.ProtocolVersion != src {
		return false
	}
	return true
}
func (p *TUpdateExportTaskStatusRequest) Field2DeepEqual(src *types.TUniqueId) bool {

	if !p.TaskId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TUpdateExportTaskStatusRequest) Field3DeepEqual(src *palointernalservice.TExportStatusResult_) bool {

	if !p.TaskStatus.DeepEqual(src) {
		return false
	}
	return true
}

type TLoadTxnBeginRequest struct {
	Cluster      *string          `thrift:"cluster,1,optional" frugal:"1,optional,string" json:"cluster,omitempty"`
	User         string           `thrift:"user,2,required" frugal:"2,required,string" json:"user"`
	Passwd       string           `thrift:"passwd,3,required" frugal:"3,required,string" json:"passwd"`
	Db           string           `thrift:"db,4,required" frugal:"4,required,string" json:"db"`
	Tbl          string           `thrift:"tbl,5,required" frugal:"5,required,string" json:"tbl"`
	UserIp       *string          `thrift:"user_ip,6,optional" frugal:"6,optional,string" json:"user_ip,omitempty"`
	Label        string           `thrift:"label,7,required" frugal:"7,required,string" json:"label"`
	Timestamp    *int64           `thrift:"timestamp,8,optional" frugal:"8,optional,i64" json:"timestamp,omitempty"`
	AuthCode     *int64           `thrift:"auth_code,9,optional" frugal:"9,optional,i64" json:"auth_code,omitempty"`
	Timeout      *int64           `thrift:"timeout,10,optional" frugal:"10,optional,i64" json:"timeout,omitempty"`
	RequestId    *types.TUniqueId `thrift:"request_id,11,optional" frugal:"11,optional,types.TUniqueId" json:"request_id,omitempty"`
	Token        *string          `thrift:"token,12,optional" frugal:"12,optional,string" json:"token,omitempty"`
	AuthCodeUuid *string          `thrift:"auth_code_uuid,13,optional" frugal:"13,optional,string" json:"auth_code_uuid,omitempty"`
	TableId      *int64           `thrift:"table_id,14,optional" frugal:"14,optional,i64" json:"table_id,omitempty"`
	BackendId    *int64           `thrift:"backend_id,15,optional" frugal:"15,optional,i64" json:"backend_id,omitempty"`
}

func NewTLoadTxnBeginRequest() *TLoadTxnBeginRequest {
	return &TLoadTxnBeginRequest{}
}

func (p *TLoadTxnBeginRequest) InitDefault() {
}

var TLoadTxnBeginRequest_Cluster_DEFAULT string

func (p *TLoadTxnBeginRequest) GetCluster() (v string) {
	if !p.IsSetCluster() {
		return TLoadTxnBeginRequest_Cluster_DEFAULT
	}
	return *p.Cluster
}

func (p *TLoadTxnBeginRequest) GetUser() (v string) {
	return p.User
}

func (p *TLoadTxnBeginRequest) GetPasswd() (v string) {
	return p.Passwd
}

func (p *TLoadTxnBeginRequest) GetDb() (v string) {
	return p.Db
}

func (p *TLoadTxnBeginRequest) GetTbl() (v string) {
	return p.Tbl
}

var TLoadTxnBeginRequest_UserIp_DEFAULT string

func (p *TLoadTxnBeginRequest) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TLoadTxnBeginRequest_UserIp_DEFAULT
	}
	return *p.UserIp
}

func (p *TLoadTxnBeginRequest) GetLabel() (v string) {
	return p.Label
}

var TLoadTxnBeginRequest_Timestamp_DEFAULT int64

func (p *TLoadTxnBeginRequest) GetTimestamp() (v int64) {
	if !p.IsSetTimestamp() {
		return TLoadTxnBeginRequest_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var TLoadTxnBeginRequest_AuthCode_DEFAULT int64

func (p *TLoadTxnBeginRequest) GetAuthCode() (v int64) {
	if !p.IsSetAuthCode() {
		return TLoadTxnBeginRequest_AuthCode_DEFAULT
	}
	return *p.AuthCode
}

var TLoadTxnBeginRequest_Timeout_DEFAULT int64

func (p *TLoadTxnBeginRequest) GetTimeout() (v int64) {
	if !p.IsSetTimeout() {
		return TLoadTxnBeginRequest_Timeout_DEFAULT
	}
	return *p.Timeout
}

var TLoadTxnBeginRequest_RequestId_DEFAULT *types.TUniqueId

func (p *TLoadTxnBeginRequest) GetRequestId() (v *types.TUniqueId) {
	if !p.IsSetRequestId() {
		return TLoadTxnBeginRequest_RequestId_DEFAULT
	}
	return p.RequestId
}

var TLoadTxnBeginRequest_Token_DEFAULT string

func (p *TLoadTxnBeginRequest) GetToken() (v string) {
	if !p.IsSetToken() {
		return TLoadTxnBeginRequest_Token_DEFAULT
	}
	return *p.Token
}

var TLoadTxnBeginRequest_AuthCodeUuid_DEFAULT string

func (p *TLoadTxnBeginRequest) GetAuthCodeUuid() (v string) {
	if !p.IsSetAuthCodeUuid() {
		return TLoadTxnBeginRequest_AuthCodeUuid_DEFAULT
	}
	return *p.AuthCodeUuid
}

var TLoadTxnBeginRequest_TableId_DEFAULT int64

func (p *TLoadTxnBeginRequest) GetTableId() (v int64) {
	if !p.IsSetTableId() {
		return TLoadTxnBeginRequest_TableId_DEFAULT
	}
	return *p.TableId
}

var TLoadTxnBeginRequest_BackendId_DEFAULT int64

func (p *TLoadTxnBeginRequest) GetBackendId() (v int64) {
	if !p.IsSetBackendId() {
		return TLoadTxnBeginRequest_BackendId_DEFAULT
	}
	return *p.BackendId
}
func (p *TLoadTxnBeginRequest) SetCluster(val *string) {
	p.Cluster = val
}
func (p *TLoadTxnBeginRequest) SetUser(val string) {
	p.User = val
}
func (p *TLoadTxnBeginRequest) SetPasswd(val string) {
	p.Passwd = val
}
func (p *TLoadTxnBeginRequest) SetDb(val string) {
	p.Db = val
}
func (p *TLoadTxnBeginRequest) SetTbl(val string) {
	p.Tbl = val
}
func (p *TLoadTxnBeginRequest) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TLoadTxnBeginRequest) SetLabel(val string) {
	p.Label = val
}
func (p *TLoadTxnBeginRequest) SetTimestamp(val *int64) {
	p.Timestamp = val
}
func (p *TLoadTxnBeginRequest) SetAuthCode(val *int64) {
	p.AuthCode = val
}
func (p *TLoadTxnBeginRequest) SetTimeout(val *int64) {
	p.Timeout = val
}
func (p *TLoadTxnBeginRequest) SetRequestId(val *types.TUniqueId) {
	p.RequestId = val
}
func (p *TLoadTxnBeginRequest) SetToken(val *string) {
	p.Token = val
}
func (p *TLoadTxnBeginRequest) SetAuthCodeUuid(val *string) {
	p.AuthCodeUuid = val
}
func (p *TLoadTxnBeginRequest) SetTableId(val *int64) {
	p.TableId = val
}
func (p *TLoadTxnBeginRequest) SetBackendId(val *int64) {
	p.BackendId = val
}

var fieldIDToName_TLoadTxnBeginRequest = map[int16]string{
	1:  "cluster",
	2:  "user",
	3:  "passwd",
	4:  "db",
	5:  "tbl",
	6:  "user_ip",
	7:  "label",
	8:  "timestamp",
	9:  "auth_code",
	10: "timeout",
	11: "request_id",
	12: "token",
	13: "auth_code_uuid",
	14: "table_id",
	15: "backend_id",
}

func (p *TLoadTxnBeginRequest) IsSetCluster() bool {
	return p.Cluster != nil
}

func (p *TLoadTxnBeginRequest) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TLoadTxnBeginRequest) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TLoadTxnBeginRequest) IsSetAuthCode() bool {
	return p.AuthCode != nil
}

func (p *TLoadTxnBeginRequest) IsSetTimeout() bool {
	return p.Timeout != nil
}

func (p *TLoadTxnBeginRequest) IsSetRequestId() bool {
	return p.RequestId != nil
}

func (p *TLoadTxnBeginRequest) IsSetToken() bool {
	return p.Token != nil
}

func (p *TLoadTxnBeginRequest) IsSetAuthCodeUuid() bool {
	return p.AuthCodeUuid != nil
}

func (p *TLoadTxnBeginRequest) IsSetTableId() bool {
	return p.TableId != nil
}

func (p *TLoadTxnBeginRequest) IsSetBackendId() bool {
	return p.BackendId != nil
}

func (p *TLoadTxnBeginRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUser bool = false
	var issetPasswd bool = false
	var issetDb bool = false
	var issetTbl bool = false
	var issetLabel bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUser = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPasswd = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDb = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetTbl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabel = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUser {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPasswd {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetDb {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTbl {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetLabel {
		fieldId = 7
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TLoadTxnBeginRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TLoadTxnBeginRequest[fieldId]))
}

func (p *TLoadTxnBeginRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cluster = _field
	return nil
}
func (p *TLoadTxnBeginRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.User = _field
	return nil
}
func (p *TLoadTxnBeginRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Passwd = _field
	return nil
}
func (p *TLoadTxnBeginRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Db = _field
	return nil
}
func (p *TLoadTxnBeginRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Tbl = _field
	return nil
}
func (p *TLoadTxnBeginRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TLoadTxnBeginRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Label = _field
	return nil
}
func (p *TLoadTxnBeginRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Timestamp = _field
	return nil
}
func (p *TLoadTxnBeginRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AuthCode = _field
	return nil
}
func (p *TLoadTxnBeginRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Timeout = _field
	return nil
}
func (p *TLoadTxnBeginRequest) ReadField11(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.RequestId = _field
	return nil
}
func (p *TLoadTxnBeginRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}
func (p *TLoadTxnBeginRequest) ReadField13(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AuthCodeUuid = _field
	return nil
}
func (p *TLoadTxnBeginRequest) ReadField14(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableId = _field
	return nil
}
func (p *TLoadTxnBeginRequest) ReadField15(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BackendId = _field
	return nil
}

func (p *TLoadTxnBeginRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TLoadTxnBeginRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TLoadTxnBeginRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCluster() {
		if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TLoadTxnBeginRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.User); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TLoadTxnBeginRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Passwd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TLoadTxnBeginRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("db", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Db); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TLoadTxnBeginRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tbl", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Tbl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TLoadTxnBeginRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TLoadTxnBeginRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("label", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Label); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TLoadTxnBeginRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err = oprot.WriteFieldBegin("timestamp", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Timestamp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TLoadTxnBeginRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthCode() {
		if err = oprot.WriteFieldBegin("auth_code", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AuthCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TLoadTxnBeginRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeout() {
		if err = oprot.WriteFieldBegin("timeout", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Timeout); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TLoadTxnBeginRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestId() {
		if err = oprot.WriteFieldBegin("request_id", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.RequestId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TLoadTxnBeginRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TLoadTxnBeginRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthCodeUuid() {
		if err = oprot.WriteFieldBegin("auth_code_uuid", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AuthCodeUuid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TLoadTxnBeginRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err = oprot.WriteFieldBegin("table_id", thrift.I64, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TLoadTxnBeginRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackendId() {
		if err = oprot.WriteFieldBegin("backend_id", thrift.I64, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BackendId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TLoadTxnBeginRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLoadTxnBeginRequest(%+v)", *p)

}

func (p *TLoadTxnBeginRequest) DeepEqual(ano *TLoadTxnBeginRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field4DeepEqual(ano.Db) {
		return false
	}
	if !p.Field5DeepEqual(ano.Tbl) {
		return false
	}
	if !p.Field6DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field7DeepEqual(ano.Label) {
		return false
	}
	if !p.Field8DeepEqual(ano.Timestamp) {
		return false
	}
	if !p.Field9DeepEqual(ano.AuthCode) {
		return false
	}
	if !p.Field10DeepEqual(ano.Timeout) {
		return false
	}
	if !p.Field11DeepEqual(ano.RequestId) {
		return false
	}
	if !p.Field12DeepEqual(ano.Token) {
		return false
	}
	if !p.Field13DeepEqual(ano.AuthCodeUuid) {
		return false
	}
	if !p.Field14DeepEqual(ano.TableId) {
		return false
	}
	if !p.Field15DeepEqual(ano.BackendId) {
		return false
	}
	return true
}

func (p *TLoadTxnBeginRequest) Field1DeepEqual(src *string) bool {

	if p.Cluster == src {
		return true
	} else if p.Cluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnBeginRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.User, src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnBeginRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Passwd, src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnBeginRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Db, src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnBeginRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Tbl, src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnBeginRequest) Field6DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnBeginRequest) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Label, src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnBeginRequest) Field8DeepEqual(src *int64) bool {

	if p.Timestamp == src {
		return true
	} else if p.Timestamp == nil || src == nil {
		return false
	}
	if *p.Timestamp != *src {
		return false
	}
	return true
}
func (p *TLoadTxnBeginRequest) Field9DeepEqual(src *int64) bool {

	if p.AuthCode == src {
		return true
	} else if p.AuthCode == nil || src == nil {
		return false
	}
	if *p.AuthCode != *src {
		return false
	}
	return true
}
func (p *TLoadTxnBeginRequest) Field10DeepEqual(src *int64) bool {

	if p.Timeout == src {
		return true
	} else if p.Timeout == nil || src == nil {
		return false
	}
	if *p.Timeout != *src {
		return false
	}
	return true
}
func (p *TLoadTxnBeginRequest) Field11DeepEqual(src *types.TUniqueId) bool {

	if !p.RequestId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TLoadTxnBeginRequest) Field12DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnBeginRequest) Field13DeepEqual(src *string) bool {

	if p.AuthCodeUuid == src {
		return true
	} else if p.AuthCodeUuid == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AuthCodeUuid, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnBeginRequest) Field14DeepEqual(src *int64) bool {

	if p.TableId == src {
		return true
	} else if p.TableId == nil || src == nil {
		return false
	}
	if *p.TableId != *src {
		return false
	}
	return true
}
func (p *TLoadTxnBeginRequest) Field15DeepEqual(src *int64) bool {

	if p.BackendId == src {
		return true
	} else if p.BackendId == nil || src == nil {
		return false
	}
	if *p.BackendId != *src {
		return false
	}
	return true
}

type TLoadTxnBeginResult_ struct {
	Status    *status.TStatus `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
	TxnId     *int64          `thrift:"txnId,2,optional" frugal:"2,optional,i64" json:"txnId,omitempty"`
	JobStatus *string         `thrift:"job_status,3,optional" frugal:"3,optional,string" json:"job_status,omitempty"`
	DbId      *int64          `thrift:"db_id,4,optional" frugal:"4,optional,i64" json:"db_id,omitempty"`
}

func NewTLoadTxnBeginResult_() *TLoadTxnBeginResult_ {
	return &TLoadTxnBeginResult_{}
}

func (p *TLoadTxnBeginResult_) InitDefault() {
}

var TLoadTxnBeginResult__Status_DEFAULT *status.TStatus

func (p *TLoadTxnBeginResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TLoadTxnBeginResult__Status_DEFAULT
	}
	return p.Status
}

var TLoadTxnBeginResult__TxnId_DEFAULT int64

func (p *TLoadTxnBeginResult_) GetTxnId() (v int64) {
	if !p.IsSetTxnId() {
		return TLoadTxnBeginResult__TxnId_DEFAULT
	}
	return *p.TxnId
}

var TLoadTxnBeginResult__JobStatus_DEFAULT string

func (p *TLoadTxnBeginResult_) GetJobStatus() (v string) {
	if !p.IsSetJobStatus() {
		return TLoadTxnBeginResult__JobStatus_DEFAULT
	}
	return *p.JobStatus
}

var TLoadTxnBeginResult__DbId_DEFAULT int64

func (p *TLoadTxnBeginResult_) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TLoadTxnBeginResult__DbId_DEFAULT
	}
	return *p.DbId
}
func (p *TLoadTxnBeginResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TLoadTxnBeginResult_) SetTxnId(val *int64) {
	p.TxnId = val
}
func (p *TLoadTxnBeginResult_) SetJobStatus(val *string) {
	p.JobStatus = val
}
func (p *TLoadTxnBeginResult_) SetDbId(val *int64) {
	p.DbId = val
}

var fieldIDToName_TLoadTxnBeginResult_ = map[int16]string{
	1: "status",
	2: "txnId",
	3: "job_status",
	4: "db_id",
}

func (p *TLoadTxnBeginResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TLoadTxnBeginResult_) IsSetTxnId() bool {
	return p.TxnId != nil
}

func (p *TLoadTxnBeginResult_) IsSetJobStatus() bool {
	return p.JobStatus != nil
}

func (p *TLoadTxnBeginResult_) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TLoadTxnBeginResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TLoadTxnBeginResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TLoadTxnBeginResult_[fieldId]))
}

func (p *TLoadTxnBeginResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TLoadTxnBeginResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TxnId = _field
	return nil
}
func (p *TLoadTxnBeginResult_) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JobStatus = _field
	return nil
}
func (p *TLoadTxnBeginResult_) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}

func (p *TLoadTxnBeginResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TLoadTxnBeginResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TLoadTxnBeginResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TLoadTxnBeginResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnId() {
		if err = oprot.WriteFieldBegin("txnId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TxnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TLoadTxnBeginResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobStatus() {
		if err = oprot.WriteFieldBegin("job_status", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JobStatus); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TLoadTxnBeginResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("db_id", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TLoadTxnBeginResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLoadTxnBeginResult_(%+v)", *p)

}

func (p *TLoadTxnBeginResult_) DeepEqual(ano *TLoadTxnBeginResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field3DeepEqual(ano.JobStatus) {
		return false
	}
	if !p.Field4DeepEqual(ano.DbId) {
		return false
	}
	return true
}

func (p *TLoadTxnBeginResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TLoadTxnBeginResult_) Field2DeepEqual(src *int64) bool {

	if p.TxnId == src {
		return true
	} else if p.TxnId == nil || src == nil {
		return false
	}
	if *p.TxnId != *src {
		return false
	}
	return true
}
func (p *TLoadTxnBeginResult_) Field3DeepEqual(src *string) bool {

	if p.JobStatus == src {
		return true
	} else if p.JobStatus == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JobStatus, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnBeginResult_) Field4DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}

type TBeginTxnRequest struct {
	Cluster   *string          `thrift:"cluster,1,optional" frugal:"1,optional,string" json:"cluster,omitempty"`
	User      *string          `thrift:"user,2,optional" frugal:"2,optional,string" json:"user,omitempty"`
	Passwd    *string          `thrift:"passwd,3,optional" frugal:"3,optional,string" json:"passwd,omitempty"`
	Db        *string          `thrift:"db,4,optional" frugal:"4,optional,string" json:"db,omitempty"`
	TableIds  []int64          `thrift:"table_ids,5,optional" frugal:"5,optional,list<i64>" json:"table_ids,omitempty"`
	UserIp    *string          `thrift:"user_ip,6,optional" frugal:"6,optional,string" json:"user_ip,omitempty"`
	Label     *string          `thrift:"label,7,optional" frugal:"7,optional,string" json:"label,omitempty"`
	AuthCode  *int64           `thrift:"auth_code,8,optional" frugal:"8,optional,i64" json:"auth_code,omitempty"`
	Timeout   *int64           `thrift:"timeout,9,optional" frugal:"9,optional,i64" json:"timeout,omitempty"`
	RequestId *types.TUniqueId `thrift:"request_id,10,optional" frugal:"10,optional,types.TUniqueId" json:"request_id,omitempty"`
	Token     *string          `thrift:"token,11,optional" frugal:"11,optional,string" json:"token,omitempty"`
	BackendId *int64           `thrift:"backend_id,12,optional" frugal:"12,optional,i64" json:"backend_id,omitempty"`
	SubTxnNum int64            `thrift:"sub_txn_num,13,optional" frugal:"13,optional,i64" json:"sub_txn_num,omitempty"`
}

func NewTBeginTxnRequest() *TBeginTxnRequest {
	return &TBeginTxnRequest{

		SubTxnNum: 0,
	}
}

func (p *TBeginTxnRequest) InitDefault() {
	p.SubTxnNum = 0
}

var TBeginTxnRequest_Cluster_DEFAULT string

func (p *TBeginTxnRequest) GetCluster() (v string) {
	if !p.IsSetCluster() {
		return TBeginTxnRequest_Cluster_DEFAULT
	}
	return *p.Cluster
}

var TBeginTxnRequest_User_DEFAULT string

func (p *TBeginTxnRequest) GetUser() (v string) {
	if !p.IsSetUser() {
		return TBeginTxnRequest_User_DEFAULT
	}
	return *p.User
}

var TBeginTxnRequest_Passwd_DEFAULT string

func (p *TBeginTxnRequest) GetPasswd() (v string) {
	if !p.IsSetPasswd() {
		return TBeginTxnRequest_Passwd_DEFAULT
	}
	return *p.Passwd
}

var TBeginTxnRequest_Db_DEFAULT string

func (p *TBeginTxnRequest) GetDb() (v string) {
	if !p.IsSetDb() {
		return TBeginTxnRequest_Db_DEFAULT
	}
	return *p.Db
}

var TBeginTxnRequest_TableIds_DEFAULT []int64

func (p *TBeginTxnRequest) GetTableIds() (v []int64) {
	if !p.IsSetTableIds() {
		return TBeginTxnRequest_TableIds_DEFAULT
	}
	return p.TableIds
}

var TBeginTxnRequest_UserIp_DEFAULT string

func (p *TBeginTxnRequest) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TBeginTxnRequest_UserIp_DEFAULT
	}
	return *p.UserIp
}

var TBeginTxnRequest_Label_DEFAULT string

func (p *TBeginTxnRequest) GetLabel() (v string) {
	if !p.IsSetLabel() {
		return TBeginTxnRequest_Label_DEFAULT
	}
	return *p.Label
}

var TBeginTxnRequest_AuthCode_DEFAULT int64

func (p *TBeginTxnRequest) GetAuthCode() (v int64) {
	if !p.IsSetAuthCode() {
		return TBeginTxnRequest_AuthCode_DEFAULT
	}
	return *p.AuthCode
}

var TBeginTxnRequest_Timeout_DEFAULT int64

func (p *TBeginTxnRequest) GetTimeout() (v int64) {
	if !p.IsSetTimeout() {
		return TBeginTxnRequest_Timeout_DEFAULT
	}
	return *p.Timeout
}

var TBeginTxnRequest_RequestId_DEFAULT *types.TUniqueId

func (p *TBeginTxnRequest) GetRequestId() (v *types.TUniqueId) {
	if !p.IsSetRequestId() {
		return TBeginTxnRequest_RequestId_DEFAULT
	}
	return p.RequestId
}

var TBeginTxnRequest_Token_DEFAULT string

func (p *TBeginTxnRequest) GetToken() (v string) {
	if !p.IsSetToken() {
		return TBeginTxnRequest_Token_DEFAULT
	}
	return *p.Token
}

var TBeginTxnRequest_BackendId_DEFAULT int64

func (p *TBeginTxnRequest) GetBackendId() (v int64) {
	if !p.IsSetBackendId() {
		return TBeginTxnRequest_BackendId_DEFAULT
	}
	return *p.BackendId
}

var TBeginTxnRequest_SubTxnNum_DEFAULT int64 = 0

func (p *TBeginTxnRequest) GetSubTxnNum() (v int64) {
	if !p.IsSetSubTxnNum() {
		return TBeginTxnRequest_SubTxnNum_DEFAULT
	}
	return p.SubTxnNum
}
func (p *TBeginTxnRequest) SetCluster(val *string) {
	p.Cluster = val
}
func (p *TBeginTxnRequest) SetUser(val *string) {
	p.User = val
}
func (p *TBeginTxnRequest) SetPasswd(val *string) {
	p.Passwd = val
}
func (p *TBeginTxnRequest) SetDb(val *string) {
	p.Db = val
}
func (p *TBeginTxnRequest) SetTableIds(val []int64) {
	p.TableIds = val
}
func (p *TBeginTxnRequest) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TBeginTxnRequest) SetLabel(val *string) {
	p.Label = val
}
func (p *TBeginTxnRequest) SetAuthCode(val *int64) {
	p.AuthCode = val
}
func (p *TBeginTxnRequest) SetTimeout(val *int64) {
	p.Timeout = val
}
func (p *TBeginTxnRequest) SetRequestId(val *types.TUniqueId) {
	p.RequestId = val
}
func (p *TBeginTxnRequest) SetToken(val *string) {
	p.Token = val
}
func (p *TBeginTxnRequest) SetBackendId(val *int64) {
	p.BackendId = val
}
func (p *TBeginTxnRequest) SetSubTxnNum(val int64) {
	p.SubTxnNum = val
}

var fieldIDToName_TBeginTxnRequest = map[int16]string{
	1:  "cluster",
	2:  "user",
	3:  "passwd",
	4:  "db",
	5:  "table_ids",
	6:  "user_ip",
	7:  "label",
	8:  "auth_code",
	9:  "timeout",
	10: "request_id",
	11: "token",
	12: "backend_id",
	13: "sub_txn_num",
}

func (p *TBeginTxnRequest) IsSetCluster() bool {
	return p.Cluster != nil
}

func (p *TBeginTxnRequest) IsSetUser() bool {
	return p.User != nil
}

func (p *TBeginTxnRequest) IsSetPasswd() bool {
	return p.Passwd != nil
}

func (p *TBeginTxnRequest) IsSetDb() bool {
	return p.Db != nil
}

func (p *TBeginTxnRequest) IsSetTableIds() bool {
	return p.TableIds != nil
}

func (p *TBeginTxnRequest) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TBeginTxnRequest) IsSetLabel() bool {
	return p.Label != nil
}

func (p *TBeginTxnRequest) IsSetAuthCode() bool {
	return p.AuthCode != nil
}

func (p *TBeginTxnRequest) IsSetTimeout() bool {
	return p.Timeout != nil
}

func (p *TBeginTxnRequest) IsSetRequestId() bool {
	return p.RequestId != nil
}

func (p *TBeginTxnRequest) IsSetToken() bool {
	return p.Token != nil
}

func (p *TBeginTxnRequest) IsSetBackendId() bool {
	return p.BackendId != nil
}

func (p *TBeginTxnRequest) IsSetSubTxnNum() bool {
	return p.SubTxnNum != TBeginTxnRequest_SubTxnNum_DEFAULT
}

func (p *TBeginTxnRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TBeginTxnRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TBeginTxnRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cluster = _field
	return nil
}
func (p *TBeginTxnRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *TBeginTxnRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Passwd = _field
	return nil
}
func (p *TBeginTxnRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Db = _field
	return nil
}
func (p *TBeginTxnRequest) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TableIds = _field
	return nil
}
func (p *TBeginTxnRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TBeginTxnRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Label = _field
	return nil
}
func (p *TBeginTxnRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AuthCode = _field
	return nil
}
func (p *TBeginTxnRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Timeout = _field
	return nil
}
func (p *TBeginTxnRequest) ReadField10(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.RequestId = _field
	return nil
}
func (p *TBeginTxnRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}
func (p *TBeginTxnRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BackendId = _field
	return nil
}
func (p *TBeginTxnRequest) ReadField13(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SubTxnNum = _field
	return nil
}

func (p *TBeginTxnRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TBeginTxnRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TBeginTxnRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCluster() {
		if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TBeginTxnRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TBeginTxnRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPasswd() {
		if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Passwd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TBeginTxnRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDb() {
		if err = oprot.WriteFieldBegin("db", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Db); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TBeginTxnRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableIds() {
		if err = oprot.WriteFieldBegin("table_ids", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.TableIds)); err != nil {
			return err
		}
		for _, v := range p.TableIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TBeginTxnRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TBeginTxnRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabel() {
		if err = oprot.WriteFieldBegin("label", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Label); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TBeginTxnRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthCode() {
		if err = oprot.WriteFieldBegin("auth_code", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AuthCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TBeginTxnRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeout() {
		if err = oprot.WriteFieldBegin("timeout", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Timeout); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TBeginTxnRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestId() {
		if err = oprot.WriteFieldBegin("request_id", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.RequestId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TBeginTxnRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TBeginTxnRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackendId() {
		if err = oprot.WriteFieldBegin("backend_id", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BackendId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TBeginTxnRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubTxnNum() {
		if err = oprot.WriteFieldBegin("sub_txn_num", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.SubTxnNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TBeginTxnRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBeginTxnRequest(%+v)", *p)

}

func (p *TBeginTxnRequest) DeepEqual(ano *TBeginTxnRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field4DeepEqual(ano.Db) {
		return false
	}
	if !p.Field5DeepEqual(ano.TableIds) {
		return false
	}
	if !p.Field6DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field7DeepEqual(ano.Label) {
		return false
	}
	if !p.Field8DeepEqual(ano.AuthCode) {
		return false
	}
	if !p.Field9DeepEqual(ano.Timeout) {
		return false
	}
	if !p.Field10DeepEqual(ano.RequestId) {
		return false
	}
	if !p.Field11DeepEqual(ano.Token) {
		return false
	}
	if !p.Field12DeepEqual(ano.BackendId) {
		return false
	}
	if !p.Field13DeepEqual(ano.SubTxnNum) {
		return false
	}
	return true
}

func (p *TBeginTxnRequest) Field1DeepEqual(src *string) bool {

	if p.Cluster == src {
		return true
	} else if p.Cluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TBeginTxnRequest) Field2DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *TBeginTxnRequest) Field3DeepEqual(src *string) bool {

	if p.Passwd == src {
		return true
	} else if p.Passwd == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Passwd, *src) != 0 {
		return false
	}
	return true
}
func (p *TBeginTxnRequest) Field4DeepEqual(src *string) bool {

	if p.Db == src {
		return true
	} else if p.Db == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Db, *src) != 0 {
		return false
	}
	return true
}
func (p *TBeginTxnRequest) Field5DeepEqual(src []int64) bool {

	if len(p.TableIds) != len(src) {
		return false
	}
	for i, v := range p.TableIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TBeginTxnRequest) Field6DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TBeginTxnRequest) Field7DeepEqual(src *string) bool {

	if p.Label == src {
		return true
	} else if p.Label == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Label, *src) != 0 {
		return false
	}
	return true
}
func (p *TBeginTxnRequest) Field8DeepEqual(src *int64) bool {

	if p.AuthCode == src {
		return true
	} else if p.AuthCode == nil || src == nil {
		return false
	}
	if *p.AuthCode != *src {
		return false
	}
	return true
}
func (p *TBeginTxnRequest) Field9DeepEqual(src *int64) bool {

	if p.Timeout == src {
		return true
	} else if p.Timeout == nil || src == nil {
		return false
	}
	if *p.Timeout != *src {
		return false
	}
	return true
}
func (p *TBeginTxnRequest) Field10DeepEqual(src *types.TUniqueId) bool {

	if !p.RequestId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TBeginTxnRequest) Field11DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *TBeginTxnRequest) Field12DeepEqual(src *int64) bool {

	if p.BackendId == src {
		return true
	} else if p.BackendId == nil || src == nil {
		return false
	}
	if *p.BackendId != *src {
		return false
	}
	return true
}
func (p *TBeginTxnRequest) Field13DeepEqual(src int64) bool {

	if p.SubTxnNum != src {
		return false
	}
	return true
}

type TBeginTxnResult_ struct {
	Status        *status.TStatus        `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	TxnId         *int64                 `thrift:"txn_id,2,optional" frugal:"2,optional,i64" json:"txn_id,omitempty"`
	JobStatus     *string                `thrift:"job_status,3,optional" frugal:"3,optional,string" json:"job_status,omitempty"`
	DbId          *int64                 `thrift:"db_id,4,optional" frugal:"4,optional,i64" json:"db_id,omitempty"`
	MasterAddress *types.TNetworkAddress `thrift:"master_address,5,optional" frugal:"5,optional,types.TNetworkAddress" json:"master_address,omitempty"`
	SubTxnIds     []int64                `thrift:"sub_txn_ids,6,optional" frugal:"6,optional,list<i64>" json:"sub_txn_ids,omitempty"`
}

func NewTBeginTxnResult_() *TBeginTxnResult_ {
	return &TBeginTxnResult_{}
}

func (p *TBeginTxnResult_) InitDefault() {
}

var TBeginTxnResult__Status_DEFAULT *status.TStatus

func (p *TBeginTxnResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TBeginTxnResult__Status_DEFAULT
	}
	return p.Status
}

var TBeginTxnResult__TxnId_DEFAULT int64

func (p *TBeginTxnResult_) GetTxnId() (v int64) {
	if !p.IsSetTxnId() {
		return TBeginTxnResult__TxnId_DEFAULT
	}
	return *p.TxnId
}

var TBeginTxnResult__JobStatus_DEFAULT string

func (p *TBeginTxnResult_) GetJobStatus() (v string) {
	if !p.IsSetJobStatus() {
		return TBeginTxnResult__JobStatus_DEFAULT
	}
	return *p.JobStatus
}

var TBeginTxnResult__DbId_DEFAULT int64

func (p *TBeginTxnResult_) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TBeginTxnResult__DbId_DEFAULT
	}
	return *p.DbId
}

var TBeginTxnResult__MasterAddress_DEFAULT *types.TNetworkAddress

func (p *TBeginTxnResult_) GetMasterAddress() (v *types.TNetworkAddress) {
	if !p.IsSetMasterAddress() {
		return TBeginTxnResult__MasterAddress_DEFAULT
	}
	return p.MasterAddress
}

var TBeginTxnResult__SubTxnIds_DEFAULT []int64

func (p *TBeginTxnResult_) GetSubTxnIds() (v []int64) {
	if !p.IsSetSubTxnIds() {
		return TBeginTxnResult__SubTxnIds_DEFAULT
	}
	return p.SubTxnIds
}
func (p *TBeginTxnResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TBeginTxnResult_) SetTxnId(val *int64) {
	p.TxnId = val
}
func (p *TBeginTxnResult_) SetJobStatus(val *string) {
	p.JobStatus = val
}
func (p *TBeginTxnResult_) SetDbId(val *int64) {
	p.DbId = val
}
func (p *TBeginTxnResult_) SetMasterAddress(val *types.TNetworkAddress) {
	p.MasterAddress = val
}
func (p *TBeginTxnResult_) SetSubTxnIds(val []int64) {
	p.SubTxnIds = val
}

var fieldIDToName_TBeginTxnResult_ = map[int16]string{
	1: "status",
	2: "txn_id",
	3: "job_status",
	4: "db_id",
	5: "master_address",
	6: "sub_txn_ids",
}

func (p *TBeginTxnResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TBeginTxnResult_) IsSetTxnId() bool {
	return p.TxnId != nil
}

func (p *TBeginTxnResult_) IsSetJobStatus() bool {
	return p.JobStatus != nil
}

func (p *TBeginTxnResult_) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TBeginTxnResult_) IsSetMasterAddress() bool {
	return p.MasterAddress != nil
}

func (p *TBeginTxnResult_) IsSetSubTxnIds() bool {
	return p.SubTxnIds != nil
}

func (p *TBeginTxnResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TBeginTxnResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TBeginTxnResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TBeginTxnResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TxnId = _field
	return nil
}
func (p *TBeginTxnResult_) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JobStatus = _field
	return nil
}
func (p *TBeginTxnResult_) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TBeginTxnResult_) ReadField5(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MasterAddress = _field
	return nil
}
func (p *TBeginTxnResult_) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SubTxnIds = _field
	return nil
}

func (p *TBeginTxnResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TBeginTxnResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TBeginTxnResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TBeginTxnResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnId() {
		if err = oprot.WriteFieldBegin("txn_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TxnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TBeginTxnResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobStatus() {
		if err = oprot.WriteFieldBegin("job_status", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JobStatus); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TBeginTxnResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("db_id", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TBeginTxnResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMasterAddress() {
		if err = oprot.WriteFieldBegin("master_address", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MasterAddress.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TBeginTxnResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubTxnIds() {
		if err = oprot.WriteFieldBegin("sub_txn_ids", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.SubTxnIds)); err != nil {
			return err
		}
		for _, v := range p.SubTxnIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TBeginTxnResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBeginTxnResult_(%+v)", *p)

}

func (p *TBeginTxnResult_) DeepEqual(ano *TBeginTxnResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field3DeepEqual(ano.JobStatus) {
		return false
	}
	if !p.Field4DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field5DeepEqual(ano.MasterAddress) {
		return false
	}
	if !p.Field6DeepEqual(ano.SubTxnIds) {
		return false
	}
	return true
}

func (p *TBeginTxnResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TBeginTxnResult_) Field2DeepEqual(src *int64) bool {

	if p.TxnId == src {
		return true
	} else if p.TxnId == nil || src == nil {
		return false
	}
	if *p.TxnId != *src {
		return false
	}
	return true
}
func (p *TBeginTxnResult_) Field3DeepEqual(src *string) bool {

	if p.JobStatus == src {
		return true
	} else if p.JobStatus == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JobStatus, *src) != 0 {
		return false
	}
	return true
}
func (p *TBeginTxnResult_) Field4DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}
func (p *TBeginTxnResult_) Field5DeepEqual(src *types.TNetworkAddress) bool {

	if !p.MasterAddress.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TBeginTxnResult_) Field6DeepEqual(src []int64) bool {

	if len(p.SubTxnIds) != len(src) {
		return false
	}
	for i, v := range p.SubTxnIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type TStreamLoadPutRequest struct {
	Cluster              *string                      `thrift:"cluster,1,optional" frugal:"1,optional,string" json:"cluster,omitempty"`
	User                 string                       `thrift:"user,2,required" frugal:"2,required,string" json:"user"`
	Passwd               string                       `thrift:"passwd,3,required" frugal:"3,required,string" json:"passwd"`
	Db                   string                       `thrift:"db,4,required" frugal:"4,required,string" json:"db"`
	Tbl                  string                       `thrift:"tbl,5,required" frugal:"5,required,string" json:"tbl"`
	UserIp               *string                      `thrift:"user_ip,6,optional" frugal:"6,optional,string" json:"user_ip,omitempty"`
	LoadId               *types.TUniqueId             `thrift:"loadId,7,required" frugal:"7,required,types.TUniqueId" json:"loadId"`
	TxnId                int64                        `thrift:"txnId,8,required" frugal:"8,required,i64" json:"txnId"`
	FileType             types.TFileType              `thrift:"fileType,9,required" frugal:"9,required,TFileType" json:"fileType"`
	FormatType           plannodes.TFileFormatType    `thrift:"formatType,10,required" frugal:"10,required,TFileFormatType" json:"formatType"`
	Path                 *string                      `thrift:"path,11,optional" frugal:"11,optional,string" json:"path,omitempty"`
	Columns              *string                      `thrift:"columns,12,optional" frugal:"12,optional,string" json:"columns,omitempty"`
	Where                *string                      `thrift:"where,13,optional" frugal:"13,optional,string" json:"where,omitempty"`
	ColumnSeparator      *string                      `thrift:"columnSeparator,14,optional" frugal:"14,optional,string" json:"columnSeparator,omitempty"`
	Partitions           *string                      `thrift:"partitions,15,optional" frugal:"15,optional,string" json:"partitions,omitempty"`
	AuthCode             *int64                       `thrift:"auth_code,16,optional" frugal:"16,optional,i64" json:"auth_code,omitempty"`
	Negative             *bool                        `thrift:"negative,17,optional" frugal:"17,optional,bool" json:"negative,omitempty"`
	Timeout              *int32                       `thrift:"timeout,18,optional" frugal:"18,optional,i32" json:"timeout,omitempty"`
	StrictMode           *bool                        `thrift:"strictMode,19,optional" frugal:"19,optional,bool" json:"strictMode,omitempty"`
	Timezone             *string                      `thrift:"timezone,20,optional" frugal:"20,optional,string" json:"timezone,omitempty"`
	ExecMemLimit         *int64                       `thrift:"execMemLimit,21,optional" frugal:"21,optional,i64" json:"execMemLimit,omitempty"`
	IsTempPartition      *bool                        `thrift:"isTempPartition,22,optional" frugal:"22,optional,bool" json:"isTempPartition,omitempty"`
	StripOuterArray      *bool                        `thrift:"strip_outer_array,23,optional" frugal:"23,optional,bool" json:"strip_outer_array,omitempty"`
	Jsonpaths            *string                      `thrift:"jsonpaths,24,optional" frugal:"24,optional,string" json:"jsonpaths,omitempty"`
	ThriftRpcTimeoutMs   *int64                       `thrift:"thrift_rpc_timeout_ms,25,optional" frugal:"25,optional,i64" json:"thrift_rpc_timeout_ms,omitempty"`
	JsonRoot             *string                      `thrift:"json_root,26,optional" frugal:"26,optional,string" json:"json_root,omitempty"`
	MergeType            *types.TMergeType            `thrift:"merge_type,27,optional" frugal:"27,optional,TMergeType" json:"merge_type,omitempty"`
	DeleteCondition      *string                      `thrift:"delete_condition,28,optional" frugal:"28,optional,string" json:"delete_condition,omitempty"`
	SequenceCol          *string                      `thrift:"sequence_col,29,optional" frugal:"29,optional,string" json:"sequence_col,omitempty"`
	NumAsString          *bool                        `thrift:"num_as_string,30,optional" frugal:"30,optional,bool" json:"num_as_string,omitempty"`
	FuzzyParse           *bool                        `thrift:"fuzzy_parse,31,optional" frugal:"31,optional,bool" json:"fuzzy_parse,omitempty"`
	LineDelimiter        *string                      `thrift:"line_delimiter,32,optional" frugal:"32,optional,string" json:"line_delimiter,omitempty"`
	ReadJsonByLine       *bool                        `thrift:"read_json_by_line,33,optional" frugal:"33,optional,bool" json:"read_json_by_line,omitempty"`
	Token                *string                      `thrift:"token,34,optional" frugal:"34,optional,string" json:"token,omitempty"`
	SendBatchParallelism *int32                       `thrift:"send_batch_parallelism,35,optional" frugal:"35,optional,i32" json:"send_batch_parallelism,omitempty"`
	MaxFilterRatio       *float64                     `thrift:"max_filter_ratio,36,optional" frugal:"36,optional,double" json:"max_filter_ratio,omitempty"`
	LoadToSingleTablet   *bool                        `thrift:"load_to_single_tablet,37,optional" frugal:"37,optional,bool" json:"load_to_single_tablet,omitempty"`
	HeaderType           *string                      `thrift:"header_type,38,optional" frugal:"38,optional,string" json:"header_type,omitempty"`
	HiddenColumns        *string                      `thrift:"hidden_columns,39,optional" frugal:"39,optional,string" json:"hidden_columns,omitempty"`
	CompressType         *plannodes.TFileCompressType `thrift:"compress_type,40,optional" frugal:"40,optional,TFileCompressType" json:"compress_type,omitempty"`
	FileSize             *int64                       `thrift:"file_size,41,optional" frugal:"41,optional,i64" json:"file_size,omitempty"`
	TrimDoubleQuotes     *bool                        `thrift:"trim_double_quotes,42,optional" frugal:"42,optional,bool" json:"trim_double_quotes,omitempty"`
	SkipLines            *int32                       `thrift:"skip_lines,43,optional" frugal:"43,optional,i32" json:"skip_lines,omitempty"`
	EnableProfile        *bool                        `thrift:"enable_profile,44,optional" frugal:"44,optional,bool" json:"enable_profile,omitempty"`
	PartialUpdate        *bool                        `thrift:"partial_update,45,optional" frugal:"45,optional,bool" json:"partial_update,omitempty"`
	TableNames           []string                     `thrift:"table_names,46,optional" frugal:"46,optional,list<string>" json:"table_names,omitempty"`
	LoadSql              *string                      `thrift:"load_sql,47,optional" frugal:"47,optional,string" json:"load_sql,omitempty"`
	BackendId            *int64                       `thrift:"backend_id,48,optional" frugal:"48,optional,i64" json:"backend_id,omitempty"`
	Version              *int32                       `thrift:"version,49,optional" frugal:"49,optional,i32" json:"version,omitempty"`
	Label                *string                      `thrift:"label,50,optional" frugal:"50,optional,string" json:"label,omitempty"`
	Enclose              *int8                        `thrift:"enclose,51,optional" frugal:"51,optional,i8" json:"enclose,omitempty"`
	Escape               *int8                        `thrift:"escape,52,optional" frugal:"52,optional,i8" json:"escape,omitempty"`
	MemtableOnSinkNode   *bool                        `thrift:"memtable_on_sink_node,53,optional" frugal:"53,optional,bool" json:"memtable_on_sink_node,omitempty"`
	GroupCommit          *bool                        `thrift:"group_commit,54,optional" frugal:"54,optional,bool" json:"group_commit,omitempty"`
	StreamPerNode        *int32                       `thrift:"stream_per_node,55,optional" frugal:"55,optional,i32" json:"stream_per_node,omitempty"`
	GroupCommitMode      *string                      `thrift:"group_commit_mode,56,optional" frugal:"56,optional,string" json:"group_commit_mode,omitempty"`
	CloudCluster         *string                      `thrift:"cloud_cluster,1000,optional" frugal:"1000,optional,string" json:"cloud_cluster,omitempty"`
	TableId              *int64                       `thrift:"table_id,1001,optional" frugal:"1001,optional,i64" json:"table_id,omitempty"`
}

func NewTStreamLoadPutRequest() *TStreamLoadPutRequest {
	return &TStreamLoadPutRequest{}
}

func (p *TStreamLoadPutRequest) InitDefault() {
}

var TStreamLoadPutRequest_Cluster_DEFAULT string

func (p *TStreamLoadPutRequest) GetCluster() (v string) {
	if !p.IsSetCluster() {
		return TStreamLoadPutRequest_Cluster_DEFAULT
	}
	return *p.Cluster
}

func (p *TStreamLoadPutRequest) GetUser() (v string) {
	return p.User
}

func (p *TStreamLoadPutRequest) GetPasswd() (v string) {
	return p.Passwd
}

func (p *TStreamLoadPutRequest) GetDb() (v string) {
	return p.Db
}

func (p *TStreamLoadPutRequest) GetTbl() (v string) {
	return p.Tbl
}

var TStreamLoadPutRequest_UserIp_DEFAULT string

func (p *TStreamLoadPutRequest) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TStreamLoadPutRequest_UserIp_DEFAULT
	}
	return *p.UserIp
}

var TStreamLoadPutRequest_LoadId_DEFAULT *types.TUniqueId

func (p *TStreamLoadPutRequest) GetLoadId() (v *types.TUniqueId) {
	if !p.IsSetLoadId() {
		return TStreamLoadPutRequest_LoadId_DEFAULT
	}
	return p.LoadId
}

func (p *TStreamLoadPutRequest) GetTxnId() (v int64) {
	return p.TxnId
}

func (p *TStreamLoadPutRequest) GetFileType() (v types.TFileType) {
	return p.FileType
}

func (p *TStreamLoadPutRequest) GetFormatType() (v plannodes.TFileFormatType) {
	return p.FormatType
}

var TStreamLoadPutRequest_Path_DEFAULT string

func (p *TStreamLoadPutRequest) GetPath() (v string) {
	if !p.IsSetPath() {
		return TStreamLoadPutRequest_Path_DEFAULT
	}
	return *p.Path
}

var TStreamLoadPutRequest_Columns_DEFAULT string

func (p *TStreamLoadPutRequest) GetColumns() (v string) {
	if !p.IsSetColumns() {
		return TStreamLoadPutRequest_Columns_DEFAULT
	}
	return *p.Columns
}

var TStreamLoadPutRequest_Where_DEFAULT string

func (p *TStreamLoadPutRequest) GetWhere() (v string) {
	if !p.IsSetWhere() {
		return TStreamLoadPutRequest_Where_DEFAULT
	}
	return *p.Where
}

var TStreamLoadPutRequest_ColumnSeparator_DEFAULT string

func (p *TStreamLoadPutRequest) GetColumnSeparator() (v string) {
	if !p.IsSetColumnSeparator() {
		return TStreamLoadPutRequest_ColumnSeparator_DEFAULT
	}
	return *p.ColumnSeparator
}

var TStreamLoadPutRequest_Partitions_DEFAULT string

func (p *TStreamLoadPutRequest) GetPartitions() (v string) {
	if !p.IsSetPartitions() {
		return TStreamLoadPutRequest_Partitions_DEFAULT
	}
	return *p.Partitions
}

var TStreamLoadPutRequest_AuthCode_DEFAULT int64

func (p *TStreamLoadPutRequest) GetAuthCode() (v int64) {
	if !p.IsSetAuthCode() {
		return TStreamLoadPutRequest_AuthCode_DEFAULT
	}
	return *p.AuthCode
}

var TStreamLoadPutRequest_Negative_DEFAULT bool

func (p *TStreamLoadPutRequest) GetNegative() (v bool) {
	if !p.IsSetNegative() {
		return TStreamLoadPutRequest_Negative_DEFAULT
	}
	return *p.Negative
}

var TStreamLoadPutRequest_Timeout_DEFAULT int32

func (p *TStreamLoadPutRequest) GetTimeout() (v int32) {
	if !p.IsSetTimeout() {
		return TStreamLoadPutRequest_Timeout_DEFAULT
	}
	return *p.Timeout
}

var TStreamLoadPutRequest_StrictMode_DEFAULT bool

func (p *TStreamLoadPutRequest) GetStrictMode() (v bool) {
	if !p.IsSetStrictMode() {
		return TStreamLoadPutRequest_StrictMode_DEFAULT
	}
	return *p.StrictMode
}

var TStreamLoadPutRequest_Timezone_DEFAULT string

func (p *TStreamLoadPutRequest) GetTimezone() (v string) {
	if !p.IsSetTimezone() {
		return TStreamLoadPutRequest_Timezone_DEFAULT
	}
	return *p.Timezone
}

var TStreamLoadPutRequest_ExecMemLimit_DEFAULT int64

func (p *TStreamLoadPutRequest) GetExecMemLimit() (v int64) {
	if !p.IsSetExecMemLimit() {
		return TStreamLoadPutRequest_ExecMemLimit_DEFAULT
	}
	return *p.ExecMemLimit
}

var TStreamLoadPutRequest_IsTempPartition_DEFAULT bool

func (p *TStreamLoadPutRequest) GetIsTempPartition() (v bool) {
	if !p.IsSetIsTempPartition() {
		return TStreamLoadPutRequest_IsTempPartition_DEFAULT
	}
	return *p.IsTempPartition
}

var TStreamLoadPutRequest_StripOuterArray_DEFAULT bool

func (p *TStreamLoadPutRequest) GetStripOuterArray() (v bool) {
	if !p.IsSetStripOuterArray() {
		return TStreamLoadPutRequest_StripOuterArray_DEFAULT
	}
	return *p.StripOuterArray
}

var TStreamLoadPutRequest_Jsonpaths_DEFAULT string

func (p *TStreamLoadPutRequest) GetJsonpaths() (v string) {
	if !p.IsSetJsonpaths() {
		return TStreamLoadPutRequest_Jsonpaths_DEFAULT
	}
	return *p.Jsonpaths
}

var TStreamLoadPutRequest_ThriftRpcTimeoutMs_DEFAULT int64

func (p *TStreamLoadPutRequest) GetThriftRpcTimeoutMs() (v int64) {
	if !p.IsSetThriftRpcTimeoutMs() {
		return TStreamLoadPutRequest_ThriftRpcTimeoutMs_DEFAULT
	}
	return *p.ThriftRpcTimeoutMs
}

var TStreamLoadPutRequest_JsonRoot_DEFAULT string

func (p *TStreamLoadPutRequest) GetJsonRoot() (v string) {
	if !p.IsSetJsonRoot() {
		return TStreamLoadPutRequest_JsonRoot_DEFAULT
	}
	return *p.JsonRoot
}

var TStreamLoadPutRequest_MergeType_DEFAULT types.TMergeType

func (p *TStreamLoadPutRequest) GetMergeType() (v types.TMergeType) {
	if !p.IsSetMergeType() {
		return TStreamLoadPutRequest_MergeType_DEFAULT
	}
	return *p.MergeType
}

var TStreamLoadPutRequest_DeleteCondition_DEFAULT string

func (p *TStreamLoadPutRequest) GetDeleteCondition() (v string) {
	if !p.IsSetDeleteCondition() {
		return TStreamLoadPutRequest_DeleteCondition_DEFAULT
	}
	return *p.DeleteCondition
}

var TStreamLoadPutRequest_SequenceCol_DEFAULT string

func (p *TStreamLoadPutRequest) GetSequenceCol() (v string) {
	if !p.IsSetSequenceCol() {
		return TStreamLoadPutRequest_SequenceCol_DEFAULT
	}
	return *p.SequenceCol
}

var TStreamLoadPutRequest_NumAsString_DEFAULT bool

func (p *TStreamLoadPutRequest) GetNumAsString() (v bool) {
	if !p.IsSetNumAsString() {
		return TStreamLoadPutRequest_NumAsString_DEFAULT
	}
	return *p.NumAsString
}

var TStreamLoadPutRequest_FuzzyParse_DEFAULT bool

func (p *TStreamLoadPutRequest) GetFuzzyParse() (v bool) {
	if !p.IsSetFuzzyParse() {
		return TStreamLoadPutRequest_FuzzyParse_DEFAULT
	}
	return *p.FuzzyParse
}

var TStreamLoadPutRequest_LineDelimiter_DEFAULT string

func (p *TStreamLoadPutRequest) GetLineDelimiter() (v string) {
	if !p.IsSetLineDelimiter() {
		return TStreamLoadPutRequest_LineDelimiter_DEFAULT
	}
	return *p.LineDelimiter
}

var TStreamLoadPutRequest_ReadJsonByLine_DEFAULT bool

func (p *TStreamLoadPutRequest) GetReadJsonByLine() (v bool) {
	if !p.IsSetReadJsonByLine() {
		return TStreamLoadPutRequest_ReadJsonByLine_DEFAULT
	}
	return *p.ReadJsonByLine
}

var TStreamLoadPutRequest_Token_DEFAULT string

func (p *TStreamLoadPutRequest) GetToken() (v string) {
	if !p.IsSetToken() {
		return TStreamLoadPutRequest_Token_DEFAULT
	}
	return *p.Token
}

var TStreamLoadPutRequest_SendBatchParallelism_DEFAULT int32

func (p *TStreamLoadPutRequest) GetSendBatchParallelism() (v int32) {
	if !p.IsSetSendBatchParallelism() {
		return TStreamLoadPutRequest_SendBatchParallelism_DEFAULT
	}
	return *p.SendBatchParallelism
}

var TStreamLoadPutRequest_MaxFilterRatio_DEFAULT float64

func (p *TStreamLoadPutRequest) GetMaxFilterRatio() (v float64) {
	if !p.IsSetMaxFilterRatio() {
		return TStreamLoadPutRequest_MaxFilterRatio_DEFAULT
	}
	return *p.MaxFilterRatio
}

var TStreamLoadPutRequest_LoadToSingleTablet_DEFAULT bool

func (p *TStreamLoadPutRequest) GetLoadToSingleTablet() (v bool) {
	if !p.IsSetLoadToSingleTablet() {
		return TStreamLoadPutRequest_LoadToSingleTablet_DEFAULT
	}
	return *p.LoadToSingleTablet
}

var TStreamLoadPutRequest_HeaderType_DEFAULT string

func (p *TStreamLoadPutRequest) GetHeaderType() (v string) {
	if !p.IsSetHeaderType() {
		return TStreamLoadPutRequest_HeaderType_DEFAULT
	}
	return *p.HeaderType
}

var TStreamLoadPutRequest_HiddenColumns_DEFAULT string

func (p *TStreamLoadPutRequest) GetHiddenColumns() (v string) {
	if !p.IsSetHiddenColumns() {
		return TStreamLoadPutRequest_HiddenColumns_DEFAULT
	}
	return *p.HiddenColumns
}

var TStreamLoadPutRequest_CompressType_DEFAULT plannodes.TFileCompressType

func (p *TStreamLoadPutRequest) GetCompressType() (v plannodes.TFileCompressType) {
	if !p.IsSetCompressType() {
		return TStreamLoadPutRequest_CompressType_DEFAULT
	}
	return *p.CompressType
}

var TStreamLoadPutRequest_FileSize_DEFAULT int64

func (p *TStreamLoadPutRequest) GetFileSize() (v int64) {
	if !p.IsSetFileSize() {
		return TStreamLoadPutRequest_FileSize_DEFAULT
	}
	return *p.FileSize
}

var TStreamLoadPutRequest_TrimDoubleQuotes_DEFAULT bool

func (p *TStreamLoadPutRequest) GetTrimDoubleQuotes() (v bool) {
	if !p.IsSetTrimDoubleQuotes() {
		return TStreamLoadPutRequest_TrimDoubleQuotes_DEFAULT
	}
	return *p.TrimDoubleQuotes
}

var TStreamLoadPutRequest_SkipLines_DEFAULT int32

func (p *TStreamLoadPutRequest) GetSkipLines() (v int32) {
	if !p.IsSetSkipLines() {
		return TStreamLoadPutRequest_SkipLines_DEFAULT
	}
	return *p.SkipLines
}

var TStreamLoadPutRequest_EnableProfile_DEFAULT bool

func (p *TStreamLoadPutRequest) GetEnableProfile() (v bool) {
	if !p.IsSetEnableProfile() {
		return TStreamLoadPutRequest_EnableProfile_DEFAULT
	}
	return *p.EnableProfile
}

var TStreamLoadPutRequest_PartialUpdate_DEFAULT bool

func (p *TStreamLoadPutRequest) GetPartialUpdate() (v bool) {
	if !p.IsSetPartialUpdate() {
		return TStreamLoadPutRequest_PartialUpdate_DEFAULT
	}
	return *p.PartialUpdate
}

var TStreamLoadPutRequest_TableNames_DEFAULT []string

func (p *TStreamLoadPutRequest) GetTableNames() (v []string) {
	if !p.IsSetTableNames() {
		return TStreamLoadPutRequest_TableNames_DEFAULT
	}
	return p.TableNames
}

var TStreamLoadPutRequest_LoadSql_DEFAULT string

func (p *TStreamLoadPutRequest) GetLoadSql() (v string) {
	if !p.IsSetLoadSql() {
		return TStreamLoadPutRequest_LoadSql_DEFAULT
	}
	return *p.LoadSql
}

var TStreamLoadPutRequest_BackendId_DEFAULT int64

func (p *TStreamLoadPutRequest) GetBackendId() (v int64) {
	if !p.IsSetBackendId() {
		return TStreamLoadPutRequest_BackendId_DEFAULT
	}
	return *p.BackendId
}

var TStreamLoadPutRequest_Version_DEFAULT int32

func (p *TStreamLoadPutRequest) GetVersion() (v int32) {
	if !p.IsSetVersion() {
		return TStreamLoadPutRequest_Version_DEFAULT
	}
	return *p.Version
}

var TStreamLoadPutRequest_Label_DEFAULT string

func (p *TStreamLoadPutRequest) GetLabel() (v string) {
	if !p.IsSetLabel() {
		return TStreamLoadPutRequest_Label_DEFAULT
	}
	return *p.Label
}

var TStreamLoadPutRequest_Enclose_DEFAULT int8

func (p *TStreamLoadPutRequest) GetEnclose() (v int8) {
	if !p.IsSetEnclose() {
		return TStreamLoadPutRequest_Enclose_DEFAULT
	}
	return *p.Enclose
}

var TStreamLoadPutRequest_Escape_DEFAULT int8

func (p *TStreamLoadPutRequest) GetEscape() (v int8) {
	if !p.IsSetEscape() {
		return TStreamLoadPutRequest_Escape_DEFAULT
	}
	return *p.Escape
}

var TStreamLoadPutRequest_MemtableOnSinkNode_DEFAULT bool

func (p *TStreamLoadPutRequest) GetMemtableOnSinkNode() (v bool) {
	if !p.IsSetMemtableOnSinkNode() {
		return TStreamLoadPutRequest_MemtableOnSinkNode_DEFAULT
	}
	return *p.MemtableOnSinkNode
}

var TStreamLoadPutRequest_GroupCommit_DEFAULT bool

func (p *TStreamLoadPutRequest) GetGroupCommit() (v bool) {
	if !p.IsSetGroupCommit() {
		return TStreamLoadPutRequest_GroupCommit_DEFAULT
	}
	return *p.GroupCommit
}

var TStreamLoadPutRequest_StreamPerNode_DEFAULT int32

func (p *TStreamLoadPutRequest) GetStreamPerNode() (v int32) {
	if !p.IsSetStreamPerNode() {
		return TStreamLoadPutRequest_StreamPerNode_DEFAULT
	}
	return *p.StreamPerNode
}

var TStreamLoadPutRequest_GroupCommitMode_DEFAULT string

func (p *TStreamLoadPutRequest) GetGroupCommitMode() (v string) {
	if !p.IsSetGroupCommitMode() {
		return TStreamLoadPutRequest_GroupCommitMode_DEFAULT
	}
	return *p.GroupCommitMode
}

var TStreamLoadPutRequest_CloudCluster_DEFAULT string

func (p *TStreamLoadPutRequest) GetCloudCluster() (v string) {
	if !p.IsSetCloudCluster() {
		return TStreamLoadPutRequest_CloudCluster_DEFAULT
	}
	return *p.CloudCluster
}

var TStreamLoadPutRequest_TableId_DEFAULT int64

func (p *TStreamLoadPutRequest) GetTableId() (v int64) {
	if !p.IsSetTableId() {
		return TStreamLoadPutRequest_TableId_DEFAULT
	}
	return *p.TableId
}
func (p *TStreamLoadPutRequest) SetCluster(val *string) {
	p.Cluster = val
}
func (p *TStreamLoadPutRequest) SetUser(val string) {
	p.User = val
}
func (p *TStreamLoadPutRequest) SetPasswd(val string) {
	p.Passwd = val
}
func (p *TStreamLoadPutRequest) SetDb(val string) {
	p.Db = val
}
func (p *TStreamLoadPutRequest) SetTbl(val string) {
	p.Tbl = val
}
func (p *TStreamLoadPutRequest) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TStreamLoadPutRequest) SetLoadId(val *types.TUniqueId) {
	p.LoadId = val
}
func (p *TStreamLoadPutRequest) SetTxnId(val int64) {
	p.TxnId = val
}
func (p *TStreamLoadPutRequest) SetFileType(val types.TFileType) {
	p.FileType = val
}
func (p *TStreamLoadPutRequest) SetFormatType(val plannodes.TFileFormatType) {
	p.FormatType = val
}
func (p *TStreamLoadPutRequest) SetPath(val *string) {
	p.Path = val
}
func (p *TStreamLoadPutRequest) SetColumns(val *string) {
	p.Columns = val
}
func (p *TStreamLoadPutRequest) SetWhere(val *string) {
	p.Where = val
}
func (p *TStreamLoadPutRequest) SetColumnSeparator(val *string) {
	p.ColumnSeparator = val
}
func (p *TStreamLoadPutRequest) SetPartitions(val *string) {
	p.Partitions = val
}
func (p *TStreamLoadPutRequest) SetAuthCode(val *int64) {
	p.AuthCode = val
}
func (p *TStreamLoadPutRequest) SetNegative(val *bool) {
	p.Negative = val
}
func (p *TStreamLoadPutRequest) SetTimeout(val *int32) {
	p.Timeout = val
}
func (p *TStreamLoadPutRequest) SetStrictMode(val *bool) {
	p.StrictMode = val
}
func (p *TStreamLoadPutRequest) SetTimezone(val *string) {
	p.Timezone = val
}
func (p *TStreamLoadPutRequest) SetExecMemLimit(val *int64) {
	p.ExecMemLimit = val
}
func (p *TStreamLoadPutRequest) SetIsTempPartition(val *bool) {
	p.IsTempPartition = val
}
func (p *TStreamLoadPutRequest) SetStripOuterArray(val *bool) {
	p.StripOuterArray = val
}
func (p *TStreamLoadPutRequest) SetJsonpaths(val *string) {
	p.Jsonpaths = val
}
func (p *TStreamLoadPutRequest) SetThriftRpcTimeoutMs(val *int64) {
	p.ThriftRpcTimeoutMs = val
}
func (p *TStreamLoadPutRequest) SetJsonRoot(val *string) {
	p.JsonRoot = val
}
func (p *TStreamLoadPutRequest) SetMergeType(val *types.TMergeType) {
	p.MergeType = val
}
func (p *TStreamLoadPutRequest) SetDeleteCondition(val *string) {
	p.DeleteCondition = val
}
func (p *TStreamLoadPutRequest) SetSequenceCol(val *string) {
	p.SequenceCol = val
}
func (p *TStreamLoadPutRequest) SetNumAsString(val *bool) {
	p.NumAsString = val
}
func (p *TStreamLoadPutRequest) SetFuzzyParse(val *bool) {
	p.FuzzyParse = val
}
func (p *TStreamLoadPutRequest) SetLineDelimiter(val *string) {
	p.LineDelimiter = val
}
func (p *TStreamLoadPutRequest) SetReadJsonByLine(val *bool) {
	p.ReadJsonByLine = val
}
func (p *TStreamLoadPutRequest) SetToken(val *string) {
	p.Token = val
}
func (p *TStreamLoadPutRequest) SetSendBatchParallelism(val *int32) {
	p.SendBatchParallelism = val
}
func (p *TStreamLoadPutRequest) SetMaxFilterRatio(val *float64) {
	p.MaxFilterRatio = val
}
func (p *TStreamLoadPutRequest) SetLoadToSingleTablet(val *bool) {
	p.LoadToSingleTablet = val
}
func (p *TStreamLoadPutRequest) SetHeaderType(val *string) {
	p.HeaderType = val
}
func (p *TStreamLoadPutRequest) SetHiddenColumns(val *string) {
	p.HiddenColumns = val
}
func (p *TStreamLoadPutRequest) SetCompressType(val *plannodes.TFileCompressType) {
	p.CompressType = val
}
func (p *TStreamLoadPutRequest) SetFileSize(val *int64) {
	p.FileSize = val
}
func (p *TStreamLoadPutRequest) SetTrimDoubleQuotes(val *bool) {
	p.TrimDoubleQuotes = val
}
func (p *TStreamLoadPutRequest) SetSkipLines(val *int32) {
	p.SkipLines = val
}
func (p *TStreamLoadPutRequest) SetEnableProfile(val *bool) {
	p.EnableProfile = val
}
func (p *TStreamLoadPutRequest) SetPartialUpdate(val *bool) {
	p.PartialUpdate = val
}
func (p *TStreamLoadPutRequest) SetTableNames(val []string) {
	p.TableNames = val
}
func (p *TStreamLoadPutRequest) SetLoadSql(val *string) {
	p.LoadSql = val
}
func (p *TStreamLoadPutRequest) SetBackendId(val *int64) {
	p.BackendId = val
}
func (p *TStreamLoadPutRequest) SetVersion(val *int32) {
	p.Version = val
}
func (p *TStreamLoadPutRequest) SetLabel(val *string) {
	p.Label = val
}
func (p *TStreamLoadPutRequest) SetEnclose(val *int8) {
	p.Enclose = val
}
func (p *TStreamLoadPutRequest) SetEscape(val *int8) {
	p.Escape = val
}
func (p *TStreamLoadPutRequest) SetMemtableOnSinkNode(val *bool) {
	p.MemtableOnSinkNode = val
}
func (p *TStreamLoadPutRequest) SetGroupCommit(val *bool) {
	p.GroupCommit = val
}
func (p *TStreamLoadPutRequest) SetStreamPerNode(val *int32) {
	p.StreamPerNode = val
}
func (p *TStreamLoadPutRequest) SetGroupCommitMode(val *string) {
	p.GroupCommitMode = val
}
func (p *TStreamLoadPutRequest) SetCloudCluster(val *string) {
	p.CloudCluster = val
}
func (p *TStreamLoadPutRequest) SetTableId(val *int64) {
	p.TableId = val
}

var fieldIDToName_TStreamLoadPutRequest = map[int16]string{
	1:    "cluster",
	2:    "user",
	3:    "passwd",
	4:    "db",
	5:    "tbl",
	6:    "user_ip",
	7:    "loadId",
	8:    "txnId",
	9:    "fileType",
	10:   "formatType",
	11:   "path",
	12:   "columns",
	13:   "where",
	14:   "columnSeparator",
	15:   "partitions",
	16:   "auth_code",
	17:   "negative",
	18:   "timeout",
	19:   "strictMode",
	20:   "timezone",
	21:   "execMemLimit",
	22:   "isTempPartition",
	23:   "strip_outer_array",
	24:   "jsonpaths",
	25:   "thrift_rpc_timeout_ms",
	26:   "json_root",
	27:   "merge_type",
	28:   "delete_condition",
	29:   "sequence_col",
	30:   "num_as_string",
	31:   "fuzzy_parse",
	32:   "line_delimiter",
	33:   "read_json_by_line",
	34:   "token",
	35:   "send_batch_parallelism",
	36:   "max_filter_ratio",
	37:   "load_to_single_tablet",
	38:   "header_type",
	39:   "hidden_columns",
	40:   "compress_type",
	41:   "file_size",
	42:   "trim_double_quotes",
	43:   "skip_lines",
	44:   "enable_profile",
	45:   "partial_update",
	46:   "table_names",
	47:   "load_sql",
	48:   "backend_id",
	49:   "version",
	50:   "label",
	51:   "enclose",
	52:   "escape",
	53:   "memtable_on_sink_node",
	54:   "group_commit",
	55:   "stream_per_node",
	56:   "group_commit_mode",
	1000: "cloud_cluster",
	1001: "table_id",
}

func (p *TStreamLoadPutRequest) IsSetCluster() bool {
	return p.Cluster != nil
}

func (p *TStreamLoadPutRequest) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TStreamLoadPutRequest) IsSetLoadId() bool {
	return p.LoadId != nil
}

func (p *TStreamLoadPutRequest) IsSetPath() bool {
	return p.Path != nil
}

func (p *TStreamLoadPutRequest) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TStreamLoadPutRequest) IsSetWhere() bool {
	return p.Where != nil
}

func (p *TStreamLoadPutRequest) IsSetColumnSeparator() bool {
	return p.ColumnSeparator != nil
}

func (p *TStreamLoadPutRequest) IsSetPartitions() bool {
	return p.Partitions != nil
}

func (p *TStreamLoadPutRequest) IsSetAuthCode() bool {
	return p.AuthCode != nil
}

func (p *TStreamLoadPutRequest) IsSetNegative() bool {
	return p.Negative != nil
}

func (p *TStreamLoadPutRequest) IsSetTimeout() bool {
	return p.Timeout != nil
}

func (p *TStreamLoadPutRequest) IsSetStrictMode() bool {
	return p.StrictMode != nil
}

func (p *TStreamLoadPutRequest) IsSetTimezone() bool {
	return p.Timezone != nil
}

func (p *TStreamLoadPutRequest) IsSetExecMemLimit() bool {
	return p.ExecMemLimit != nil
}

func (p *TStreamLoadPutRequest) IsSetIsTempPartition() bool {
	return p.IsTempPartition != nil
}

func (p *TStreamLoadPutRequest) IsSetStripOuterArray() bool {
	return p.StripOuterArray != nil
}

func (p *TStreamLoadPutRequest) IsSetJsonpaths() bool {
	return p.Jsonpaths != nil
}

func (p *TStreamLoadPutRequest) IsSetThriftRpcTimeoutMs() bool {
	return p.ThriftRpcTimeoutMs != nil
}

func (p *TStreamLoadPutRequest) IsSetJsonRoot() bool {
	return p.JsonRoot != nil
}

func (p *TStreamLoadPutRequest) IsSetMergeType() bool {
	return p.MergeType != nil
}

func (p *TStreamLoadPutRequest) IsSetDeleteCondition() bool {
	return p.DeleteCondition != nil
}

func (p *TStreamLoadPutRequest) IsSetSequenceCol() bool {
	return p.SequenceCol != nil
}

func (p *TStreamLoadPutRequest) IsSetNumAsString() bool {
	return p.NumAsString != nil
}

func (p *TStreamLoadPutRequest) IsSetFuzzyParse() bool {
	return p.FuzzyParse != nil
}

func (p *TStreamLoadPutRequest) IsSetLineDelimiter() bool {
	return p.LineDelimiter != nil
}

func (p *TStreamLoadPutRequest) IsSetReadJsonByLine() bool {
	return p.ReadJsonByLine != nil
}

func (p *TStreamLoadPutRequest) IsSetToken() bool {
	return p.Token != nil
}

func (p *TStreamLoadPutRequest) IsSetSendBatchParallelism() bool {
	return p.SendBatchParallelism != nil
}

func (p *TStreamLoadPutRequest) IsSetMaxFilterRatio() bool {
	return p.MaxFilterRatio != nil
}

func (p *TStreamLoadPutRequest) IsSetLoadToSingleTablet() bool {
	return p.LoadToSingleTablet != nil
}

func (p *TStreamLoadPutRequest) IsSetHeaderType() bool {
	return p.HeaderType != nil
}

func (p *TStreamLoadPutRequest) IsSetHiddenColumns() bool {
	return p.HiddenColumns != nil
}

func (p *TStreamLoadPutRequest) IsSetCompressType() bool {
	return p.CompressType != nil
}

func (p *TStreamLoadPutRequest) IsSetFileSize() bool {
	return p.FileSize != nil
}

func (p *TStreamLoadPutRequest) IsSetTrimDoubleQuotes() bool {
	return p.TrimDoubleQuotes != nil
}

func (p *TStreamLoadPutRequest) IsSetSkipLines() bool {
	return p.SkipLines != nil
}

func (p *TStreamLoadPutRequest) IsSetEnableProfile() bool {
	return p.EnableProfile != nil
}

func (p *TStreamLoadPutRequest) IsSetPartialUpdate() bool {
	return p.PartialUpdate != nil
}

func (p *TStreamLoadPutRequest) IsSetTableNames() bool {
	return p.TableNames != nil
}

func (p *TStreamLoadPutRequest) IsSetLoadSql() bool {
	return p.LoadSql != nil
}

func (p *TStreamLoadPutRequest) IsSetBackendId() bool {
	return p.BackendId != nil
}

func (p *TStreamLoadPutRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *TStreamLoadPutRequest) IsSetLabel() bool {
	return p.Label != nil
}

func (p *TStreamLoadPutRequest) IsSetEnclose() bool {
	return p.Enclose != nil
}

func (p *TStreamLoadPutRequest) IsSetEscape() bool {
	return p.Escape != nil
}

func (p *TStreamLoadPutRequest) IsSetMemtableOnSinkNode() bool {
	return p.MemtableOnSinkNode != nil
}

func (p *TStreamLoadPutRequest) IsSetGroupCommit() bool {
	return p.GroupCommit != nil
}

func (p *TStreamLoadPutRequest) IsSetStreamPerNode() bool {
	return p.StreamPerNode != nil
}

func (p *TStreamLoadPutRequest) IsSetGroupCommitMode() bool {
	return p.GroupCommitMode != nil
}

func (p *TStreamLoadPutRequest) IsSetCloudCluster() bool {
	return p.CloudCluster != nil
}

func (p *TStreamLoadPutRequest) IsSetTableId() bool {
	return p.TableId != nil
}

func (p *TStreamLoadPutRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUser bool = false
	var issetPasswd bool = false
	var issetDb bool = false
	var issetTbl bool = false
	var issetLoadId bool = false
	var issetTxnId bool = false
	var issetFileType bool = false
	var issetFormatType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUser = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPasswd = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDb = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetTbl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetLoadId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetTxnId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetFileType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetFormatType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 29:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 30:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 32:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 33:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField33(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 34:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField34(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 35:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField35(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 36:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField36(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 37:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField37(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 38:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField38(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 39:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField39(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 40:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField40(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 41:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField41(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 42:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField42(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 43:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField43(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 44:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField44(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 45:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField45(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 46:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField46(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 47:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField47(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 48:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField48(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 49:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField49(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 50:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField50(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 51:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField51(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 52:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField52(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 53:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField53(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 54:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField54(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 55:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField55(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 56:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField56(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1000:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1000(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1001:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1001(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUser {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPasswd {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetDb {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTbl {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetLoadId {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetTxnId {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetFileType {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetFormatType {
		fieldId = 10
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TStreamLoadPutRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TStreamLoadPutRequest[fieldId]))
}

func (p *TStreamLoadPutRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cluster = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.User = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Passwd = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Db = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Tbl = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField7(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.LoadId = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TxnId = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field types.TFileType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TFileType(v)
	}
	p.FileType = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field plannodes.TFileFormatType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = plannodes.TFileFormatType(v)
	}
	p.FormatType = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Path = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Columns = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField13(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Where = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField14(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ColumnSeparator = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField15(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Partitions = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField16(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AuthCode = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField17(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Negative = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField18(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Timeout = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField19(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StrictMode = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField20(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Timezone = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField21(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExecMemLimit = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField22(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsTempPartition = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField23(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StripOuterArray = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField24(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Jsonpaths = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField25(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ThriftRpcTimeoutMs = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField26(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JsonRoot = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField27(iprot thrift.TProtocol) error {

	var _field *types.TMergeType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TMergeType(v)
		_field = &tmp
	}
	p.MergeType = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField28(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DeleteCondition = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField29(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SequenceCol = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField30(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NumAsString = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField31(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FuzzyParse = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField32(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LineDelimiter = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField33(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReadJsonByLine = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField34(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField35(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SendBatchParallelism = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField36(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxFilterRatio = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField37(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LoadToSingleTablet = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField38(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HeaderType = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField39(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HiddenColumns = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField40(iprot thrift.TProtocol) error {

	var _field *plannodes.TFileCompressType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := plannodes.TFileCompressType(v)
		_field = &tmp
	}
	p.CompressType = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField41(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FileSize = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField42(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TrimDoubleQuotes = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField43(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SkipLines = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField44(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnableProfile = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField45(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PartialUpdate = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField46(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TableNames = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField47(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LoadSql = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField48(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BackendId = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField49(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField50(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Label = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField51(iprot thrift.TProtocol) error {

	var _field *int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Enclose = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField52(iprot thrift.TProtocol) error {

	var _field *int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Escape = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField53(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MemtableOnSinkNode = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField54(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.GroupCommit = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField55(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StreamPerNode = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField56(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.GroupCommitMode = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField1000(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CloudCluster = _field
	return nil
}
func (p *TStreamLoadPutRequest) ReadField1001(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableId = _field
	return nil
}

func (p *TStreamLoadPutRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TStreamLoadPutRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField33(oprot); err != nil {
			fieldId = 33
			goto WriteFieldError
		}
		if err = p.writeField34(oprot); err != nil {
			fieldId = 34
			goto WriteFieldError
		}
		if err = p.writeField35(oprot); err != nil {
			fieldId = 35
			goto WriteFieldError
		}
		if err = p.writeField36(oprot); err != nil {
			fieldId = 36
			goto WriteFieldError
		}
		if err = p.writeField37(oprot); err != nil {
			fieldId = 37
			goto WriteFieldError
		}
		if err = p.writeField38(oprot); err != nil {
			fieldId = 38
			goto WriteFieldError
		}
		if err = p.writeField39(oprot); err != nil {
			fieldId = 39
			goto WriteFieldError
		}
		if err = p.writeField40(oprot); err != nil {
			fieldId = 40
			goto WriteFieldError
		}
		if err = p.writeField41(oprot); err != nil {
			fieldId = 41
			goto WriteFieldError
		}
		if err = p.writeField42(oprot); err != nil {
			fieldId = 42
			goto WriteFieldError
		}
		if err = p.writeField43(oprot); err != nil {
			fieldId = 43
			goto WriteFieldError
		}
		if err = p.writeField44(oprot); err != nil {
			fieldId = 44
			goto WriteFieldError
		}
		if err = p.writeField45(oprot); err != nil {
			fieldId = 45
			goto WriteFieldError
		}
		if err = p.writeField46(oprot); err != nil {
			fieldId = 46
			goto WriteFieldError
		}
		if err = p.writeField47(oprot); err != nil {
			fieldId = 47
			goto WriteFieldError
		}
		if err = p.writeField48(oprot); err != nil {
			fieldId = 48
			goto WriteFieldError
		}
		if err = p.writeField49(oprot); err != nil {
			fieldId = 49
			goto WriteFieldError
		}
		if err = p.writeField50(oprot); err != nil {
			fieldId = 50
			goto WriteFieldError
		}
		if err = p.writeField51(oprot); err != nil {
			fieldId = 51
			goto WriteFieldError
		}
		if err = p.writeField52(oprot); err != nil {
			fieldId = 52
			goto WriteFieldError
		}
		if err = p.writeField53(oprot); err != nil {
			fieldId = 53
			goto WriteFieldError
		}
		if err = p.writeField54(oprot); err != nil {
			fieldId = 54
			goto WriteFieldError
		}
		if err = p.writeField55(oprot); err != nil {
			fieldId = 55
			goto WriteFieldError
		}
		if err = p.writeField56(oprot); err != nil {
			fieldId = 56
			goto WriteFieldError
		}
		if err = p.writeField1000(oprot); err != nil {
			fieldId = 1000
			goto WriteFieldError
		}
		if err = p.writeField1001(oprot); err != nil {
			fieldId = 1001
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCluster() {
		if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.User); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Passwd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("db", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Db); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tbl", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Tbl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("loadId", thrift.STRUCT, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.LoadId.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("txnId", thrift.I64, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TxnId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fileType", thrift.I32, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.FileType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("formatType", thrift.I32, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.FormatType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err = oprot.WriteFieldBegin("path", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Path); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err = oprot.WriteFieldBegin("columns", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Columns); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetWhere() {
		if err = oprot.WriteFieldBegin("where", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Where); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnSeparator() {
		if err = oprot.WriteFieldBegin("columnSeparator", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ColumnSeparator); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitions() {
		if err = oprot.WriteFieldBegin("partitions", thrift.STRING, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Partitions); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthCode() {
		if err = oprot.WriteFieldBegin("auth_code", thrift.I64, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AuthCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetNegative() {
		if err = oprot.WriteFieldBegin("negative", thrift.BOOL, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Negative); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeout() {
		if err = oprot.WriteFieldBegin("timeout", thrift.I32, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Timeout); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetStrictMode() {
		if err = oprot.WriteFieldBegin("strictMode", thrift.BOOL, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.StrictMode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimezone() {
		if err = oprot.WriteFieldBegin("timezone", thrift.STRING, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Timezone); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetExecMemLimit() {
		if err = oprot.WriteFieldBegin("execMemLimit", thrift.I64, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExecMemLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsTempPartition() {
		if err = oprot.WriteFieldBegin("isTempPartition", thrift.BOOL, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsTempPartition); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetStripOuterArray() {
		if err = oprot.WriteFieldBegin("strip_outer_array", thrift.BOOL, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.StripOuterArray); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetJsonpaths() {
		if err = oprot.WriteFieldBegin("jsonpaths", thrift.STRING, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Jsonpaths); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetThriftRpcTimeoutMs() {
		if err = oprot.WriteFieldBegin("thrift_rpc_timeout_ms", thrift.I64, 25); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ThriftRpcTimeoutMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetJsonRoot() {
		if err = oprot.WriteFieldBegin("json_root", thrift.STRING, 26); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JsonRoot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetMergeType() {
		if err = oprot.WriteFieldBegin("merge_type", thrift.I32, 27); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.MergeType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleteCondition() {
		if err = oprot.WriteFieldBegin("delete_condition", thrift.STRING, 28); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DeleteCondition); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetSequenceCol() {
		if err = oprot.WriteFieldBegin("sequence_col", thrift.STRING, 29); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SequenceCol); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumAsString() {
		if err = oprot.WriteFieldBegin("num_as_string", thrift.BOOL, 30); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.NumAsString); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetFuzzyParse() {
		if err = oprot.WriteFieldBegin("fuzzy_parse", thrift.BOOL, 31); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.FuzzyParse); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetLineDelimiter() {
		if err = oprot.WriteFieldBegin("line_delimiter", thrift.STRING, 32); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LineDelimiter); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField33(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadJsonByLine() {
		if err = oprot.WriteFieldBegin("read_json_by_line", thrift.BOOL, 33); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ReadJsonByLine); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField34(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 34); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField35(oprot thrift.TProtocol) (err error) {
	if p.IsSetSendBatchParallelism() {
		if err = oprot.WriteFieldBegin("send_batch_parallelism", thrift.I32, 35); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SendBatchParallelism); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField36(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxFilterRatio() {
		if err = oprot.WriteFieldBegin("max_filter_ratio", thrift.DOUBLE, 36); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.MaxFilterRatio); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField37(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadToSingleTablet() {
		if err = oprot.WriteFieldBegin("load_to_single_tablet", thrift.BOOL, 37); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.LoadToSingleTablet); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField38(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeaderType() {
		if err = oprot.WriteFieldBegin("header_type", thrift.STRING, 38); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.HeaderType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 38 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 38 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField39(oprot thrift.TProtocol) (err error) {
	if p.IsSetHiddenColumns() {
		if err = oprot.WriteFieldBegin("hidden_columns", thrift.STRING, 39); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.HiddenColumns); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 39 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 39 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField40(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompressType() {
		if err = oprot.WriteFieldBegin("compress_type", thrift.I32, 40); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.CompressType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 40 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 40 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField41(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileSize() {
		if err = oprot.WriteFieldBegin("file_size", thrift.I64, 41); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.FileSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 41 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 41 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField42(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrimDoubleQuotes() {
		if err = oprot.WriteFieldBegin("trim_double_quotes", thrift.BOOL, 42); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.TrimDoubleQuotes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 42 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 42 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField43(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipLines() {
		if err = oprot.WriteFieldBegin("skip_lines", thrift.I32, 43); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SkipLines); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 43 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 43 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField44(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableProfile() {
		if err = oprot.WriteFieldBegin("enable_profile", thrift.BOOL, 44); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableProfile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 44 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 44 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField45(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartialUpdate() {
		if err = oprot.WriteFieldBegin("partial_update", thrift.BOOL, 45); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.PartialUpdate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 45 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 45 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField46(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableNames() {
		if err = oprot.WriteFieldBegin("table_names", thrift.LIST, 46); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.TableNames)); err != nil {
			return err
		}
		for _, v := range p.TableNames {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 46 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 46 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField47(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadSql() {
		if err = oprot.WriteFieldBegin("load_sql", thrift.STRING, 47); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LoadSql); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 47 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 47 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField48(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackendId() {
		if err = oprot.WriteFieldBegin("backend_id", thrift.I64, 48); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BackendId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 48 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 48 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField49(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.I32, 49); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 49 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 49 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField50(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabel() {
		if err = oprot.WriteFieldBegin("label", thrift.STRING, 50); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Label); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 50 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 50 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField51(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnclose() {
		if err = oprot.WriteFieldBegin("enclose", thrift.BYTE, 51); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteByte(*p.Enclose); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 51 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 51 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField52(oprot thrift.TProtocol) (err error) {
	if p.IsSetEscape() {
		if err = oprot.WriteFieldBegin("escape", thrift.BYTE, 52); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteByte(*p.Escape); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 52 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 52 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField53(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemtableOnSinkNode() {
		if err = oprot.WriteFieldBegin("memtable_on_sink_node", thrift.BOOL, 53); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.MemtableOnSinkNode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 53 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 53 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField54(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupCommit() {
		if err = oprot.WriteFieldBegin("group_commit", thrift.BOOL, 54); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.GroupCommit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 54 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 54 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField55(oprot thrift.TProtocol) (err error) {
	if p.IsSetStreamPerNode() {
		if err = oprot.WriteFieldBegin("stream_per_node", thrift.I32, 55); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.StreamPerNode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 55 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 55 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField56(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupCommitMode() {
		if err = oprot.WriteFieldBegin("group_commit_mode", thrift.STRING, 56); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.GroupCommitMode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 56 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 56 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField1000(oprot thrift.TProtocol) (err error) {
	if p.IsSetCloudCluster() {
		if err = oprot.WriteFieldBegin("cloud_cluster", thrift.STRING, 1000); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CloudCluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) writeField1001(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err = oprot.WriteFieldBegin("table_id", thrift.I64, 1001); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1001 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1001 end error: ", p), err)
}

func (p *TStreamLoadPutRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStreamLoadPutRequest(%+v)", *p)

}

func (p *TStreamLoadPutRequest) DeepEqual(ano *TStreamLoadPutRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field4DeepEqual(ano.Db) {
		return false
	}
	if !p.Field5DeepEqual(ano.Tbl) {
		return false
	}
	if !p.Field6DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field7DeepEqual(ano.LoadId) {
		return false
	}
	if !p.Field8DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field9DeepEqual(ano.FileType) {
		return false
	}
	if !p.Field10DeepEqual(ano.FormatType) {
		return false
	}
	if !p.Field11DeepEqual(ano.Path) {
		return false
	}
	if !p.Field12DeepEqual(ano.Columns) {
		return false
	}
	if !p.Field13DeepEqual(ano.Where) {
		return false
	}
	if !p.Field14DeepEqual(ano.ColumnSeparator) {
		return false
	}
	if !p.Field15DeepEqual(ano.Partitions) {
		return false
	}
	if !p.Field16DeepEqual(ano.AuthCode) {
		return false
	}
	if !p.Field17DeepEqual(ano.Negative) {
		return false
	}
	if !p.Field18DeepEqual(ano.Timeout) {
		return false
	}
	if !p.Field19DeepEqual(ano.StrictMode) {
		return false
	}
	if !p.Field20DeepEqual(ano.Timezone) {
		return false
	}
	if !p.Field21DeepEqual(ano.ExecMemLimit) {
		return false
	}
	if !p.Field22DeepEqual(ano.IsTempPartition) {
		return false
	}
	if !p.Field23DeepEqual(ano.StripOuterArray) {
		return false
	}
	if !p.Field24DeepEqual(ano.Jsonpaths) {
		return false
	}
	if !p.Field25DeepEqual(ano.ThriftRpcTimeoutMs) {
		return false
	}
	if !p.Field26DeepEqual(ano.JsonRoot) {
		return false
	}
	if !p.Field27DeepEqual(ano.MergeType) {
		return false
	}
	if !p.Field28DeepEqual(ano.DeleteCondition) {
		return false
	}
	if !p.Field29DeepEqual(ano.SequenceCol) {
		return false
	}
	if !p.Field30DeepEqual(ano.NumAsString) {
		return false
	}
	if !p.Field31DeepEqual(ano.FuzzyParse) {
		return false
	}
	if !p.Field32DeepEqual(ano.LineDelimiter) {
		return false
	}
	if !p.Field33DeepEqual(ano.ReadJsonByLine) {
		return false
	}
	if !p.Field34DeepEqual(ano.Token) {
		return false
	}
	if !p.Field35DeepEqual(ano.SendBatchParallelism) {
		return false
	}
	if !p.Field36DeepEqual(ano.MaxFilterRatio) {
		return false
	}
	if !p.Field37DeepEqual(ano.LoadToSingleTablet) {
		return false
	}
	if !p.Field38DeepEqual(ano.HeaderType) {
		return false
	}
	if !p.Field39DeepEqual(ano.HiddenColumns) {
		return false
	}
	if !p.Field40DeepEqual(ano.CompressType) {
		return false
	}
	if !p.Field41DeepEqual(ano.FileSize) {
		return false
	}
	if !p.Field42DeepEqual(ano.TrimDoubleQuotes) {
		return false
	}
	if !p.Field43DeepEqual(ano.SkipLines) {
		return false
	}
	if !p.Field44DeepEqual(ano.EnableProfile) {
		return false
	}
	if !p.Field45DeepEqual(ano.PartialUpdate) {
		return false
	}
	if !p.Field46DeepEqual(ano.TableNames) {
		return false
	}
	if !p.Field47DeepEqual(ano.LoadSql) {
		return false
	}
	if !p.Field48DeepEqual(ano.BackendId) {
		return false
	}
	if !p.Field49DeepEqual(ano.Version) {
		return false
	}
	if !p.Field50DeepEqual(ano.Label) {
		return false
	}
	if !p.Field51DeepEqual(ano.Enclose) {
		return false
	}
	if !p.Field52DeepEqual(ano.Escape) {
		return false
	}
	if !p.Field53DeepEqual(ano.MemtableOnSinkNode) {
		return false
	}
	if !p.Field54DeepEqual(ano.GroupCommit) {
		return false
	}
	if !p.Field55DeepEqual(ano.StreamPerNode) {
		return false
	}
	if !p.Field56DeepEqual(ano.GroupCommitMode) {
		return false
	}
	if !p.Field1000DeepEqual(ano.CloudCluster) {
		return false
	}
	if !p.Field1001DeepEqual(ano.TableId) {
		return false
	}
	return true
}

func (p *TStreamLoadPutRequest) Field1DeepEqual(src *string) bool {

	if p.Cluster == src {
		return true
	} else if p.Cluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.User, src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Passwd, src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Db, src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Tbl, src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field6DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field7DeepEqual(src *types.TUniqueId) bool {

	if !p.LoadId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field8DeepEqual(src int64) bool {

	if p.TxnId != src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field9DeepEqual(src types.TFileType) bool {

	if p.FileType != src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field10DeepEqual(src plannodes.TFileFormatType) bool {

	if p.FormatType != src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field11DeepEqual(src *string) bool {

	if p.Path == src {
		return true
	} else if p.Path == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Path, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field12DeepEqual(src *string) bool {

	if p.Columns == src {
		return true
	} else if p.Columns == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Columns, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field13DeepEqual(src *string) bool {

	if p.Where == src {
		return true
	} else if p.Where == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Where, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field14DeepEqual(src *string) bool {

	if p.ColumnSeparator == src {
		return true
	} else if p.ColumnSeparator == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ColumnSeparator, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field15DeepEqual(src *string) bool {

	if p.Partitions == src {
		return true
	} else if p.Partitions == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Partitions, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field16DeepEqual(src *int64) bool {

	if p.AuthCode == src {
		return true
	} else if p.AuthCode == nil || src == nil {
		return false
	}
	if *p.AuthCode != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field17DeepEqual(src *bool) bool {

	if p.Negative == src {
		return true
	} else if p.Negative == nil || src == nil {
		return false
	}
	if *p.Negative != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field18DeepEqual(src *int32) bool {

	if p.Timeout == src {
		return true
	} else if p.Timeout == nil || src == nil {
		return false
	}
	if *p.Timeout != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field19DeepEqual(src *bool) bool {

	if p.StrictMode == src {
		return true
	} else if p.StrictMode == nil || src == nil {
		return false
	}
	if *p.StrictMode != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field20DeepEqual(src *string) bool {

	if p.Timezone == src {
		return true
	} else if p.Timezone == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Timezone, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field21DeepEqual(src *int64) bool {

	if p.ExecMemLimit == src {
		return true
	} else if p.ExecMemLimit == nil || src == nil {
		return false
	}
	if *p.ExecMemLimit != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field22DeepEqual(src *bool) bool {

	if p.IsTempPartition == src {
		return true
	} else if p.IsTempPartition == nil || src == nil {
		return false
	}
	if *p.IsTempPartition != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field23DeepEqual(src *bool) bool {

	if p.StripOuterArray == src {
		return true
	} else if p.StripOuterArray == nil || src == nil {
		return false
	}
	if *p.StripOuterArray != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field24DeepEqual(src *string) bool {

	if p.Jsonpaths == src {
		return true
	} else if p.Jsonpaths == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Jsonpaths, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field25DeepEqual(src *int64) bool {

	if p.ThriftRpcTimeoutMs == src {
		return true
	} else if p.ThriftRpcTimeoutMs == nil || src == nil {
		return false
	}
	if *p.ThriftRpcTimeoutMs != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field26DeepEqual(src *string) bool {

	if p.JsonRoot == src {
		return true
	} else if p.JsonRoot == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JsonRoot, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field27DeepEqual(src *types.TMergeType) bool {

	if p.MergeType == src {
		return true
	} else if p.MergeType == nil || src == nil {
		return false
	}
	if *p.MergeType != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field28DeepEqual(src *string) bool {

	if p.DeleteCondition == src {
		return true
	} else if p.DeleteCondition == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DeleteCondition, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field29DeepEqual(src *string) bool {

	if p.SequenceCol == src {
		return true
	} else if p.SequenceCol == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SequenceCol, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field30DeepEqual(src *bool) bool {

	if p.NumAsString == src {
		return true
	} else if p.NumAsString == nil || src == nil {
		return false
	}
	if *p.NumAsString != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field31DeepEqual(src *bool) bool {

	if p.FuzzyParse == src {
		return true
	} else if p.FuzzyParse == nil || src == nil {
		return false
	}
	if *p.FuzzyParse != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field32DeepEqual(src *string) bool {

	if p.LineDelimiter == src {
		return true
	} else if p.LineDelimiter == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LineDelimiter, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field33DeepEqual(src *bool) bool {

	if p.ReadJsonByLine == src {
		return true
	} else if p.ReadJsonByLine == nil || src == nil {
		return false
	}
	if *p.ReadJsonByLine != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field34DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field35DeepEqual(src *int32) bool {

	if p.SendBatchParallelism == src {
		return true
	} else if p.SendBatchParallelism == nil || src == nil {
		return false
	}
	if *p.SendBatchParallelism != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field36DeepEqual(src *float64) bool {

	if p.MaxFilterRatio == src {
		return true
	} else if p.MaxFilterRatio == nil || src == nil {
		return false
	}
	if *p.MaxFilterRatio != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field37DeepEqual(src *bool) bool {

	if p.LoadToSingleTablet == src {
		return true
	} else if p.LoadToSingleTablet == nil || src == nil {
		return false
	}
	if *p.LoadToSingleTablet != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field38DeepEqual(src *string) bool {

	if p.HeaderType == src {
		return true
	} else if p.HeaderType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.HeaderType, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field39DeepEqual(src *string) bool {

	if p.HiddenColumns == src {
		return true
	} else if p.HiddenColumns == nil || src == nil {
		return false
	}
	if strings.Compare(*p.HiddenColumns, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field40DeepEqual(src *plannodes.TFileCompressType) bool {

	if p.CompressType == src {
		return true
	} else if p.CompressType == nil || src == nil {
		return false
	}
	if *p.CompressType != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field41DeepEqual(src *int64) bool {

	if p.FileSize == src {
		return true
	} else if p.FileSize == nil || src == nil {
		return false
	}
	if *p.FileSize != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field42DeepEqual(src *bool) bool {

	if p.TrimDoubleQuotes == src {
		return true
	} else if p.TrimDoubleQuotes == nil || src == nil {
		return false
	}
	if *p.TrimDoubleQuotes != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field43DeepEqual(src *int32) bool {

	if p.SkipLines == src {
		return true
	} else if p.SkipLines == nil || src == nil {
		return false
	}
	if *p.SkipLines != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field44DeepEqual(src *bool) bool {

	if p.EnableProfile == src {
		return true
	} else if p.EnableProfile == nil || src == nil {
		return false
	}
	if *p.EnableProfile != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field45DeepEqual(src *bool) bool {

	if p.PartialUpdate == src {
		return true
	} else if p.PartialUpdate == nil || src == nil {
		return false
	}
	if *p.PartialUpdate != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field46DeepEqual(src []string) bool {

	if len(p.TableNames) != len(src) {
		return false
	}
	for i, v := range p.TableNames {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TStreamLoadPutRequest) Field47DeepEqual(src *string) bool {

	if p.LoadSql == src {
		return true
	} else if p.LoadSql == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LoadSql, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field48DeepEqual(src *int64) bool {

	if p.BackendId == src {
		return true
	} else if p.BackendId == nil || src == nil {
		return false
	}
	if *p.BackendId != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field49DeepEqual(src *int32) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if *p.Version != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field50DeepEqual(src *string) bool {

	if p.Label == src {
		return true
	} else if p.Label == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Label, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field51DeepEqual(src *int8) bool {

	if p.Enclose == src {
		return true
	} else if p.Enclose == nil || src == nil {
		return false
	}
	if *p.Enclose != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field52DeepEqual(src *int8) bool {

	if p.Escape == src {
		return true
	} else if p.Escape == nil || src == nil {
		return false
	}
	if *p.Escape != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field53DeepEqual(src *bool) bool {

	if p.MemtableOnSinkNode == src {
		return true
	} else if p.MemtableOnSinkNode == nil || src == nil {
		return false
	}
	if *p.MemtableOnSinkNode != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field54DeepEqual(src *bool) bool {

	if p.GroupCommit == src {
		return true
	} else if p.GroupCommit == nil || src == nil {
		return false
	}
	if *p.GroupCommit != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field55DeepEqual(src *int32) bool {

	if p.StreamPerNode == src {
		return true
	} else if p.StreamPerNode == nil || src == nil {
		return false
	}
	if *p.StreamPerNode != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field56DeepEqual(src *string) bool {

	if p.GroupCommitMode == src {
		return true
	} else if p.GroupCommitMode == nil || src == nil {
		return false
	}
	if strings.Compare(*p.GroupCommitMode, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field1000DeepEqual(src *string) bool {

	if p.CloudCluster == src {
		return true
	} else if p.CloudCluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CloudCluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadPutRequest) Field1001DeepEqual(src *int64) bool {

	if p.TableId == src {
		return true
	} else if p.TableId == nil || src == nil {
		return false
	}
	if *p.TableId != *src {
		return false
	}
	return true
}

type TStreamLoadPutResult_ struct {
	Status                        *status.TStatus                              `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
	Params                        *palointernalservice.TExecPlanFragmentParams `thrift:"params,2,optional" frugal:"2,optional,palointernalservice.TExecPlanFragmentParams" json:"params,omitempty"`
	PipelineParams                *palointernalservice.TPipelineFragmentParams `thrift:"pipeline_params,3,optional" frugal:"3,optional,palointernalservice.TPipelineFragmentParams" json:"pipeline_params,omitempty"`
	BaseSchemaVersion             *int64                                       `thrift:"base_schema_version,4,optional" frugal:"4,optional,i64" json:"base_schema_version,omitempty"`
	DbId                          *int64                                       `thrift:"db_id,5,optional" frugal:"5,optional,i64" json:"db_id,omitempty"`
	TableId                       *int64                                       `thrift:"table_id,6,optional" frugal:"6,optional,i64" json:"table_id,omitempty"`
	WaitInternalGroupCommitFinish bool                                         `thrift:"wait_internal_group_commit_finish,7,optional" frugal:"7,optional,bool" json:"wait_internal_group_commit_finish,omitempty"`
	GroupCommitIntervalMs         *int64                                       `thrift:"group_commit_interval_ms,8,optional" frugal:"8,optional,i64" json:"group_commit_interval_ms,omitempty"`
	GroupCommitDataBytes          *int64                                       `thrift:"group_commit_data_bytes,9,optional" frugal:"9,optional,i64" json:"group_commit_data_bytes,omitempty"`
}

func NewTStreamLoadPutResult_() *TStreamLoadPutResult_ {
	return &TStreamLoadPutResult_{

		WaitInternalGroupCommitFinish: false,
	}
}

func (p *TStreamLoadPutResult_) InitDefault() {
	p.WaitInternalGroupCommitFinish = false
}

var TStreamLoadPutResult__Status_DEFAULT *status.TStatus

func (p *TStreamLoadPutResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TStreamLoadPutResult__Status_DEFAULT
	}
	return p.Status
}

var TStreamLoadPutResult__Params_DEFAULT *palointernalservice.TExecPlanFragmentParams

func (p *TStreamLoadPutResult_) GetParams() (v *palointernalservice.TExecPlanFragmentParams) {
	if !p.IsSetParams() {
		return TStreamLoadPutResult__Params_DEFAULT
	}
	return p.Params
}

var TStreamLoadPutResult__PipelineParams_DEFAULT *palointernalservice.TPipelineFragmentParams

func (p *TStreamLoadPutResult_) GetPipelineParams() (v *palointernalservice.TPipelineFragmentParams) {
	if !p.IsSetPipelineParams() {
		return TStreamLoadPutResult__PipelineParams_DEFAULT
	}
	return p.PipelineParams
}

var TStreamLoadPutResult__BaseSchemaVersion_DEFAULT int64

func (p *TStreamLoadPutResult_) GetBaseSchemaVersion() (v int64) {
	if !p.IsSetBaseSchemaVersion() {
		return TStreamLoadPutResult__BaseSchemaVersion_DEFAULT
	}
	return *p.BaseSchemaVersion
}

var TStreamLoadPutResult__DbId_DEFAULT int64

func (p *TStreamLoadPutResult_) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TStreamLoadPutResult__DbId_DEFAULT
	}
	return *p.DbId
}

var TStreamLoadPutResult__TableId_DEFAULT int64

func (p *TStreamLoadPutResult_) GetTableId() (v int64) {
	if !p.IsSetTableId() {
		return TStreamLoadPutResult__TableId_DEFAULT
	}
	return *p.TableId
}

var TStreamLoadPutResult__WaitInternalGroupCommitFinish_DEFAULT bool = false

func (p *TStreamLoadPutResult_) GetWaitInternalGroupCommitFinish() (v bool) {
	if !p.IsSetWaitInternalGroupCommitFinish() {
		return TStreamLoadPutResult__WaitInternalGroupCommitFinish_DEFAULT
	}
	return p.WaitInternalGroupCommitFinish
}

var TStreamLoadPutResult__GroupCommitIntervalMs_DEFAULT int64

func (p *TStreamLoadPutResult_) GetGroupCommitIntervalMs() (v int64) {
	if !p.IsSetGroupCommitIntervalMs() {
		return TStreamLoadPutResult__GroupCommitIntervalMs_DEFAULT
	}
	return *p.GroupCommitIntervalMs
}

var TStreamLoadPutResult__GroupCommitDataBytes_DEFAULT int64

func (p *TStreamLoadPutResult_) GetGroupCommitDataBytes() (v int64) {
	if !p.IsSetGroupCommitDataBytes() {
		return TStreamLoadPutResult__GroupCommitDataBytes_DEFAULT
	}
	return *p.GroupCommitDataBytes
}
func (p *TStreamLoadPutResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TStreamLoadPutResult_) SetParams(val *palointernalservice.TExecPlanFragmentParams) {
	p.Params = val
}
func (p *TStreamLoadPutResult_) SetPipelineParams(val *palointernalservice.TPipelineFragmentParams) {
	p.PipelineParams = val
}
func (p *TStreamLoadPutResult_) SetBaseSchemaVersion(val *int64) {
	p.BaseSchemaVersion = val
}
func (p *TStreamLoadPutResult_) SetDbId(val *int64) {
	p.DbId = val
}
func (p *TStreamLoadPutResult_) SetTableId(val *int64) {
	p.TableId = val
}
func (p *TStreamLoadPutResult_) SetWaitInternalGroupCommitFinish(val bool) {
	p.WaitInternalGroupCommitFinish = val
}
func (p *TStreamLoadPutResult_) SetGroupCommitIntervalMs(val *int64) {
	p.GroupCommitIntervalMs = val
}
func (p *TStreamLoadPutResult_) SetGroupCommitDataBytes(val *int64) {
	p.GroupCommitDataBytes = val
}

var fieldIDToName_TStreamLoadPutResult_ = map[int16]string{
	1: "status",
	2: "params",
	3: "pipeline_params",
	4: "base_schema_version",
	5: "db_id",
	6: "table_id",
	7: "wait_internal_group_commit_finish",
	8: "group_commit_interval_ms",
	9: "group_commit_data_bytes",
}

func (p *TStreamLoadPutResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TStreamLoadPutResult_) IsSetParams() bool {
	return p.Params != nil
}

func (p *TStreamLoadPutResult_) IsSetPipelineParams() bool {
	return p.PipelineParams != nil
}

func (p *TStreamLoadPutResult_) IsSetBaseSchemaVersion() bool {
	return p.BaseSchemaVersion != nil
}

func (p *TStreamLoadPutResult_) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TStreamLoadPutResult_) IsSetTableId() bool {
	return p.TableId != nil
}

func (p *TStreamLoadPutResult_) IsSetWaitInternalGroupCommitFinish() bool {
	return p.WaitInternalGroupCommitFinish != TStreamLoadPutResult__WaitInternalGroupCommitFinish_DEFAULT
}

func (p *TStreamLoadPutResult_) IsSetGroupCommitIntervalMs() bool {
	return p.GroupCommitIntervalMs != nil
}

func (p *TStreamLoadPutResult_) IsSetGroupCommitDataBytes() bool {
	return p.GroupCommitDataBytes != nil
}

func (p *TStreamLoadPutResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TStreamLoadPutResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TStreamLoadPutResult_[fieldId]))
}

func (p *TStreamLoadPutResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TStreamLoadPutResult_) ReadField2(iprot thrift.TProtocol) error {
	_field := palointernalservice.NewTExecPlanFragmentParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}
func (p *TStreamLoadPutResult_) ReadField3(iprot thrift.TProtocol) error {
	_field := palointernalservice.NewTPipelineFragmentParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PipelineParams = _field
	return nil
}
func (p *TStreamLoadPutResult_) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BaseSchemaVersion = _field
	return nil
}
func (p *TStreamLoadPutResult_) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TStreamLoadPutResult_) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableId = _field
	return nil
}
func (p *TStreamLoadPutResult_) ReadField7(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WaitInternalGroupCommitFinish = _field
	return nil
}
func (p *TStreamLoadPutResult_) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.GroupCommitIntervalMs = _field
	return nil
}
func (p *TStreamLoadPutResult_) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.GroupCommitDataBytes = _field
	return nil
}

func (p *TStreamLoadPutResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TStreamLoadPutResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TStreamLoadPutResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TStreamLoadPutResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetParams() {
		if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Params.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TStreamLoadPutResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPipelineParams() {
		if err = oprot.WriteFieldBegin("pipeline_params", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PipelineParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TStreamLoadPutResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseSchemaVersion() {
		if err = oprot.WriteFieldBegin("base_schema_version", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BaseSchemaVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TStreamLoadPutResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("db_id", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TStreamLoadPutResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err = oprot.WriteFieldBegin("table_id", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TStreamLoadPutResult_) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetWaitInternalGroupCommitFinish() {
		if err = oprot.WriteFieldBegin("wait_internal_group_commit_finish", thrift.BOOL, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.WaitInternalGroupCommitFinish); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TStreamLoadPutResult_) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupCommitIntervalMs() {
		if err = oprot.WriteFieldBegin("group_commit_interval_ms", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.GroupCommitIntervalMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TStreamLoadPutResult_) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupCommitDataBytes() {
		if err = oprot.WriteFieldBegin("group_commit_data_bytes", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.GroupCommitDataBytes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TStreamLoadPutResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStreamLoadPutResult_(%+v)", *p)

}

func (p *TStreamLoadPutResult_) DeepEqual(ano *TStreamLoadPutResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.Params) {
		return false
	}
	if !p.Field3DeepEqual(ano.PipelineParams) {
		return false
	}
	if !p.Field4DeepEqual(ano.BaseSchemaVersion) {
		return false
	}
	if !p.Field5DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field6DeepEqual(ano.TableId) {
		return false
	}
	if !p.Field7DeepEqual(ano.WaitInternalGroupCommitFinish) {
		return false
	}
	if !p.Field8DeepEqual(ano.GroupCommitIntervalMs) {
		return false
	}
	if !p.Field9DeepEqual(ano.GroupCommitDataBytes) {
		return false
	}
	return true
}

func (p *TStreamLoadPutResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TStreamLoadPutResult_) Field2DeepEqual(src *palointernalservice.TExecPlanFragmentParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TStreamLoadPutResult_) Field3DeepEqual(src *palointernalservice.TPipelineFragmentParams) bool {

	if !p.PipelineParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TStreamLoadPutResult_) Field4DeepEqual(src *int64) bool {

	if p.BaseSchemaVersion == src {
		return true
	} else if p.BaseSchemaVersion == nil || src == nil {
		return false
	}
	if *p.BaseSchemaVersion != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutResult_) Field5DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutResult_) Field6DeepEqual(src *int64) bool {

	if p.TableId == src {
		return true
	} else if p.TableId == nil || src == nil {
		return false
	}
	if *p.TableId != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutResult_) Field7DeepEqual(src bool) bool {

	if p.WaitInternalGroupCommitFinish != src {
		return false
	}
	return true
}
func (p *TStreamLoadPutResult_) Field8DeepEqual(src *int64) bool {

	if p.GroupCommitIntervalMs == src {
		return true
	} else if p.GroupCommitIntervalMs == nil || src == nil {
		return false
	}
	if *p.GroupCommitIntervalMs != *src {
		return false
	}
	return true
}
func (p *TStreamLoadPutResult_) Field9DeepEqual(src *int64) bool {

	if p.GroupCommitDataBytes == src {
		return true
	} else if p.GroupCommitDataBytes == nil || src == nil {
		return false
	}
	if *p.GroupCommitDataBytes != *src {
		return false
	}
	return true
}

type TStreamLoadMultiTablePutResult_ struct {
	Status         *status.TStatus                                `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
	Params         []*palointernalservice.TExecPlanFragmentParams `thrift:"params,2,optional" frugal:"2,optional,list<palointernalservice.TExecPlanFragmentParams>" json:"params,omitempty"`
	PipelineParams []*palointernalservice.TPipelineFragmentParams `thrift:"pipeline_params,3,optional" frugal:"3,optional,list<palointernalservice.TPipelineFragmentParams>" json:"pipeline_params,omitempty"`
}

func NewTStreamLoadMultiTablePutResult_() *TStreamLoadMultiTablePutResult_ {
	return &TStreamLoadMultiTablePutResult_{}
}

func (p *TStreamLoadMultiTablePutResult_) InitDefault() {
}

var TStreamLoadMultiTablePutResult__Status_DEFAULT *status.TStatus

func (p *TStreamLoadMultiTablePutResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TStreamLoadMultiTablePutResult__Status_DEFAULT
	}
	return p.Status
}

var TStreamLoadMultiTablePutResult__Params_DEFAULT []*palointernalservice.TExecPlanFragmentParams

func (p *TStreamLoadMultiTablePutResult_) GetParams() (v []*palointernalservice.TExecPlanFragmentParams) {
	if !p.IsSetParams() {
		return TStreamLoadMultiTablePutResult__Params_DEFAULT
	}
	return p.Params
}

var TStreamLoadMultiTablePutResult__PipelineParams_DEFAULT []*palointernalservice.TPipelineFragmentParams

func (p *TStreamLoadMultiTablePutResult_) GetPipelineParams() (v []*palointernalservice.TPipelineFragmentParams) {
	if !p.IsSetPipelineParams() {
		return TStreamLoadMultiTablePutResult__PipelineParams_DEFAULT
	}
	return p.PipelineParams
}
func (p *TStreamLoadMultiTablePutResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TStreamLoadMultiTablePutResult_) SetParams(val []*palointernalservice.TExecPlanFragmentParams) {
	p.Params = val
}
func (p *TStreamLoadMultiTablePutResult_) SetPipelineParams(val []*palointernalservice.TPipelineFragmentParams) {
	p.PipelineParams = val
}

var fieldIDToName_TStreamLoadMultiTablePutResult_ = map[int16]string{
	1: "status",
	2: "params",
	3: "pipeline_params",
}

func (p *TStreamLoadMultiTablePutResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TStreamLoadMultiTablePutResult_) IsSetParams() bool {
	return p.Params != nil
}

func (p *TStreamLoadMultiTablePutResult_) IsSetPipelineParams() bool {
	return p.PipelineParams != nil
}

func (p *TStreamLoadMultiTablePutResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TStreamLoadMultiTablePutResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TStreamLoadMultiTablePutResult_[fieldId]))
}

func (p *TStreamLoadMultiTablePutResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TStreamLoadMultiTablePutResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*palointernalservice.TExecPlanFragmentParams, 0, size)
	values := make([]palointernalservice.TExecPlanFragmentParams, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Params = _field
	return nil
}
func (p *TStreamLoadMultiTablePutResult_) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*palointernalservice.TPipelineFragmentParams, 0, size)
	values := make([]palointernalservice.TPipelineFragmentParams, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PipelineParams = _field
	return nil
}

func (p *TStreamLoadMultiTablePutResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TStreamLoadMultiTablePutResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TStreamLoadMultiTablePutResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TStreamLoadMultiTablePutResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetParams() {
		if err = oprot.WriteFieldBegin("params", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Params)); err != nil {
			return err
		}
		for _, v := range p.Params {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TStreamLoadMultiTablePutResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPipelineParams() {
		if err = oprot.WriteFieldBegin("pipeline_params", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PipelineParams)); err != nil {
			return err
		}
		for _, v := range p.PipelineParams {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TStreamLoadMultiTablePutResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStreamLoadMultiTablePutResult_(%+v)", *p)

}

func (p *TStreamLoadMultiTablePutResult_) DeepEqual(ano *TStreamLoadMultiTablePutResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.Params) {
		return false
	}
	if !p.Field3DeepEqual(ano.PipelineParams) {
		return false
	}
	return true
}

func (p *TStreamLoadMultiTablePutResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TStreamLoadMultiTablePutResult_) Field2DeepEqual(src []*palointernalservice.TExecPlanFragmentParams) bool {

	if len(p.Params) != len(src) {
		return false
	}
	for i, v := range p.Params {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TStreamLoadMultiTablePutResult_) Field3DeepEqual(src []*palointernalservice.TPipelineFragmentParams) bool {

	if len(p.PipelineParams) != len(src) {
		return false
	}
	for i, v := range p.PipelineParams {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TStreamLoadWithLoadStatusResult_ struct {
	Status         *status.TStatus `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	TxnId          *int64          `thrift:"txn_id,2,optional" frugal:"2,optional,i64" json:"txn_id,omitempty"`
	TotalRows      *int64          `thrift:"total_rows,3,optional" frugal:"3,optional,i64" json:"total_rows,omitempty"`
	LoadedRows     *int64          `thrift:"loaded_rows,4,optional" frugal:"4,optional,i64" json:"loaded_rows,omitempty"`
	FilteredRows   *int64          `thrift:"filtered_rows,5,optional" frugal:"5,optional,i64" json:"filtered_rows,omitempty"`
	UnselectedRows *int64          `thrift:"unselected_rows,6,optional" frugal:"6,optional,i64" json:"unselected_rows,omitempty"`
}

func NewTStreamLoadWithLoadStatusResult_() *TStreamLoadWithLoadStatusResult_ {
	return &TStreamLoadWithLoadStatusResult_{}
}

func (p *TStreamLoadWithLoadStatusResult_) InitDefault() {
}

var TStreamLoadWithLoadStatusResult__Status_DEFAULT *status.TStatus

func (p *TStreamLoadWithLoadStatusResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TStreamLoadWithLoadStatusResult__Status_DEFAULT
	}
	return p.Status
}

var TStreamLoadWithLoadStatusResult__TxnId_DEFAULT int64

func (p *TStreamLoadWithLoadStatusResult_) GetTxnId() (v int64) {
	if !p.IsSetTxnId() {
		return TStreamLoadWithLoadStatusResult__TxnId_DEFAULT
	}
	return *p.TxnId
}

var TStreamLoadWithLoadStatusResult__TotalRows_DEFAULT int64

func (p *TStreamLoadWithLoadStatusResult_) GetTotalRows() (v int64) {
	if !p.IsSetTotalRows() {
		return TStreamLoadWithLoadStatusResult__TotalRows_DEFAULT
	}
	return *p.TotalRows
}

var TStreamLoadWithLoadStatusResult__LoadedRows_DEFAULT int64

func (p *TStreamLoadWithLoadStatusResult_) GetLoadedRows() (v int64) {
	if !p.IsSetLoadedRows() {
		return TStreamLoadWithLoadStatusResult__LoadedRows_DEFAULT
	}
	return *p.LoadedRows
}

var TStreamLoadWithLoadStatusResult__FilteredRows_DEFAULT int64

func (p *TStreamLoadWithLoadStatusResult_) GetFilteredRows() (v int64) {
	if !p.IsSetFilteredRows() {
		return TStreamLoadWithLoadStatusResult__FilteredRows_DEFAULT
	}
	return *p.FilteredRows
}

var TStreamLoadWithLoadStatusResult__UnselectedRows_DEFAULT int64

func (p *TStreamLoadWithLoadStatusResult_) GetUnselectedRows() (v int64) {
	if !p.IsSetUnselectedRows() {
		return TStreamLoadWithLoadStatusResult__UnselectedRows_DEFAULT
	}
	return *p.UnselectedRows
}
func (p *TStreamLoadWithLoadStatusResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TStreamLoadWithLoadStatusResult_) SetTxnId(val *int64) {
	p.TxnId = val
}
func (p *TStreamLoadWithLoadStatusResult_) SetTotalRows(val *int64) {
	p.TotalRows = val
}
func (p *TStreamLoadWithLoadStatusResult_) SetLoadedRows(val *int64) {
	p.LoadedRows = val
}
func (p *TStreamLoadWithLoadStatusResult_) SetFilteredRows(val *int64) {
	p.FilteredRows = val
}
func (p *TStreamLoadWithLoadStatusResult_) SetUnselectedRows(val *int64) {
	p.UnselectedRows = val
}

var fieldIDToName_TStreamLoadWithLoadStatusResult_ = map[int16]string{
	1: "status",
	2: "txn_id",
	3: "total_rows",
	4: "loaded_rows",
	5: "filtered_rows",
	6: "unselected_rows",
}

func (p *TStreamLoadWithLoadStatusResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TStreamLoadWithLoadStatusResult_) IsSetTxnId() bool {
	return p.TxnId != nil
}

func (p *TStreamLoadWithLoadStatusResult_) IsSetTotalRows() bool {
	return p.TotalRows != nil
}

func (p *TStreamLoadWithLoadStatusResult_) IsSetLoadedRows() bool {
	return p.LoadedRows != nil
}

func (p *TStreamLoadWithLoadStatusResult_) IsSetFilteredRows() bool {
	return p.FilteredRows != nil
}

func (p *TStreamLoadWithLoadStatusResult_) IsSetUnselectedRows() bool {
	return p.UnselectedRows != nil
}

func (p *TStreamLoadWithLoadStatusResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TStreamLoadWithLoadStatusResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TStreamLoadWithLoadStatusResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TStreamLoadWithLoadStatusResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TxnId = _field
	return nil
}
func (p *TStreamLoadWithLoadStatusResult_) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TotalRows = _field
	return nil
}
func (p *TStreamLoadWithLoadStatusResult_) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LoadedRows = _field
	return nil
}
func (p *TStreamLoadWithLoadStatusResult_) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FilteredRows = _field
	return nil
}
func (p *TStreamLoadWithLoadStatusResult_) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UnselectedRows = _field
	return nil
}

func (p *TStreamLoadWithLoadStatusResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TStreamLoadWithLoadStatusResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TStreamLoadWithLoadStatusResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TStreamLoadWithLoadStatusResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnId() {
		if err = oprot.WriteFieldBegin("txn_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TxnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TStreamLoadWithLoadStatusResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalRows() {
		if err = oprot.WriteFieldBegin("total_rows", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TotalRows); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TStreamLoadWithLoadStatusResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadedRows() {
		if err = oprot.WriteFieldBegin("loaded_rows", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LoadedRows); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TStreamLoadWithLoadStatusResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilteredRows() {
		if err = oprot.WriteFieldBegin("filtered_rows", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.FilteredRows); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TStreamLoadWithLoadStatusResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnselectedRows() {
		if err = oprot.WriteFieldBegin("unselected_rows", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UnselectedRows); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TStreamLoadWithLoadStatusResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStreamLoadWithLoadStatusResult_(%+v)", *p)

}

func (p *TStreamLoadWithLoadStatusResult_) DeepEqual(ano *TStreamLoadWithLoadStatusResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field3DeepEqual(ano.TotalRows) {
		return false
	}
	if !p.Field4DeepEqual(ano.LoadedRows) {
		return false
	}
	if !p.Field5DeepEqual(ano.FilteredRows) {
		return false
	}
	if !p.Field6DeepEqual(ano.UnselectedRows) {
		return false
	}
	return true
}

func (p *TStreamLoadWithLoadStatusResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TStreamLoadWithLoadStatusResult_) Field2DeepEqual(src *int64) bool {

	if p.TxnId == src {
		return true
	} else if p.TxnId == nil || src == nil {
		return false
	}
	if *p.TxnId != *src {
		return false
	}
	return true
}
func (p *TStreamLoadWithLoadStatusResult_) Field3DeepEqual(src *int64) bool {

	if p.TotalRows == src {
		return true
	} else if p.TotalRows == nil || src == nil {
		return false
	}
	if *p.TotalRows != *src {
		return false
	}
	return true
}
func (p *TStreamLoadWithLoadStatusResult_) Field4DeepEqual(src *int64) bool {

	if p.LoadedRows == src {
		return true
	} else if p.LoadedRows == nil || src == nil {
		return false
	}
	if *p.LoadedRows != *src {
		return false
	}
	return true
}
func (p *TStreamLoadWithLoadStatusResult_) Field5DeepEqual(src *int64) bool {

	if p.FilteredRows == src {
		return true
	} else if p.FilteredRows == nil || src == nil {
		return false
	}
	if *p.FilteredRows != *src {
		return false
	}
	return true
}
func (p *TStreamLoadWithLoadStatusResult_) Field6DeepEqual(src *int64) bool {

	if p.UnselectedRows == src {
		return true
	} else if p.UnselectedRows == nil || src == nil {
		return false
	}
	if *p.UnselectedRows != *src {
		return false
	}
	return true
}

type TKafkaRLTaskProgress struct {
	PartitionCmtOffset map[int32]int64 `thrift:"partitionCmtOffset,1,required" frugal:"1,required,map<i32:i64>" json:"partitionCmtOffset"`
}

func NewTKafkaRLTaskProgress() *TKafkaRLTaskProgress {
	return &TKafkaRLTaskProgress{}
}

func (p *TKafkaRLTaskProgress) InitDefault() {
}

func (p *TKafkaRLTaskProgress) GetPartitionCmtOffset() (v map[int32]int64) {
	return p.PartitionCmtOffset
}
func (p *TKafkaRLTaskProgress) SetPartitionCmtOffset(val map[int32]int64) {
	p.PartitionCmtOffset = val
}

var fieldIDToName_TKafkaRLTaskProgress = map[int16]string{
	1: "partitionCmtOffset",
}

func (p *TKafkaRLTaskProgress) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPartitionCmtOffset bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPartitionCmtOffset = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPartitionCmtOffset {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TKafkaRLTaskProgress[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TKafkaRLTaskProgress[fieldId]))
}

func (p *TKafkaRLTaskProgress) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int32]int64, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.PartitionCmtOffset = _field
	return nil
}

func (p *TKafkaRLTaskProgress) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TKafkaRLTaskProgress"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TKafkaRLTaskProgress) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("partitionCmtOffset", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(p.PartitionCmtOffset)); err != nil {
		return err
	}
	for k, v := range p.PartitionCmtOffset {
		if err := oprot.WriteI32(k); err != nil {
			return err
		}
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TKafkaRLTaskProgress) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TKafkaRLTaskProgress(%+v)", *p)

}

func (p *TKafkaRLTaskProgress) DeepEqual(ano *TKafkaRLTaskProgress) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PartitionCmtOffset) {
		return false
	}
	return true
}

func (p *TKafkaRLTaskProgress) Field1DeepEqual(src map[int32]int64) bool {

	if len(p.PartitionCmtOffset) != len(src) {
		return false
	}
	for k, v := range p.PartitionCmtOffset {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}

type TRLTaskTxnCommitAttachment struct {
	LoadSourceType      types.TLoadSourceType `thrift:"loadSourceType,1,required" frugal:"1,required,TLoadSourceType" json:"loadSourceType"`
	Id                  *types.TUniqueId      `thrift:"id,2,required" frugal:"2,required,types.TUniqueId" json:"id"`
	JobId               int64                 `thrift:"jobId,3,required" frugal:"3,required,i64" json:"jobId"`
	LoadedRows          *int64                `thrift:"loadedRows,4,optional" frugal:"4,optional,i64" json:"loadedRows,omitempty"`
	FilteredRows        *int64                `thrift:"filteredRows,5,optional" frugal:"5,optional,i64" json:"filteredRows,omitempty"`
	UnselectedRows      *int64                `thrift:"unselectedRows,6,optional" frugal:"6,optional,i64" json:"unselectedRows,omitempty"`
	ReceivedBytes       *int64                `thrift:"receivedBytes,7,optional" frugal:"7,optional,i64" json:"receivedBytes,omitempty"`
	LoadedBytes         *int64                `thrift:"loadedBytes,8,optional" frugal:"8,optional,i64" json:"loadedBytes,omitempty"`
	LoadCostMs          *int64                `thrift:"loadCostMs,9,optional" frugal:"9,optional,i64" json:"loadCostMs,omitempty"`
	KafkaRLTaskProgress *TKafkaRLTaskProgress `thrift:"kafkaRLTaskProgress,10,optional" frugal:"10,optional,TKafkaRLTaskProgress" json:"kafkaRLTaskProgress,omitempty"`
	ErrorLogUrl         *string               `thrift:"errorLogUrl,11,optional" frugal:"11,optional,string" json:"errorLogUrl,omitempty"`
}

func NewTRLTaskTxnCommitAttachment() *TRLTaskTxnCommitAttachment {
	return &TRLTaskTxnCommitAttachment{}
}

func (p *TRLTaskTxnCommitAttachment) InitDefault() {
}

func (p *TRLTaskTxnCommitAttachment) GetLoadSourceType() (v types.TLoadSourceType) {
	return p.LoadSourceType
}

var TRLTaskTxnCommitAttachment_Id_DEFAULT *types.TUniqueId

func (p *TRLTaskTxnCommitAttachment) GetId() (v *types.TUniqueId) {
	if !p.IsSetId() {
		return TRLTaskTxnCommitAttachment_Id_DEFAULT
	}
	return p.Id
}

func (p *TRLTaskTxnCommitAttachment) GetJobId() (v int64) {
	return p.JobId
}

var TRLTaskTxnCommitAttachment_LoadedRows_DEFAULT int64

func (p *TRLTaskTxnCommitAttachment) GetLoadedRows() (v int64) {
	if !p.IsSetLoadedRows() {
		return TRLTaskTxnCommitAttachment_LoadedRows_DEFAULT
	}
	return *p.LoadedRows
}

var TRLTaskTxnCommitAttachment_FilteredRows_DEFAULT int64

func (p *TRLTaskTxnCommitAttachment) GetFilteredRows() (v int64) {
	if !p.IsSetFilteredRows() {
		return TRLTaskTxnCommitAttachment_FilteredRows_DEFAULT
	}
	return *p.FilteredRows
}

var TRLTaskTxnCommitAttachment_UnselectedRows_DEFAULT int64

func (p *TRLTaskTxnCommitAttachment) GetUnselectedRows() (v int64) {
	if !p.IsSetUnselectedRows() {
		return TRLTaskTxnCommitAttachment_UnselectedRows_DEFAULT
	}
	return *p.UnselectedRows
}

var TRLTaskTxnCommitAttachment_ReceivedBytes_DEFAULT int64

func (p *TRLTaskTxnCommitAttachment) GetReceivedBytes() (v int64) {
	if !p.IsSetReceivedBytes() {
		return TRLTaskTxnCommitAttachment_ReceivedBytes_DEFAULT
	}
	return *p.ReceivedBytes
}

var TRLTaskTxnCommitAttachment_LoadedBytes_DEFAULT int64

func (p *TRLTaskTxnCommitAttachment) GetLoadedBytes() (v int64) {
	if !p.IsSetLoadedBytes() {
		return TRLTaskTxnCommitAttachment_LoadedBytes_DEFAULT
	}
	return *p.LoadedBytes
}

var TRLTaskTxnCommitAttachment_LoadCostMs_DEFAULT int64

func (p *TRLTaskTxnCommitAttachment) GetLoadCostMs() (v int64) {
	if !p.IsSetLoadCostMs() {
		return TRLTaskTxnCommitAttachment_LoadCostMs_DEFAULT
	}
	return *p.LoadCostMs
}

var TRLTaskTxnCommitAttachment_KafkaRLTaskProgress_DEFAULT *TKafkaRLTaskProgress

func (p *TRLTaskTxnCommitAttachment) GetKafkaRLTaskProgress() (v *TKafkaRLTaskProgress) {
	if !p.IsSetKafkaRLTaskProgress() {
		return TRLTaskTxnCommitAttachment_KafkaRLTaskProgress_DEFAULT
	}
	return p.KafkaRLTaskProgress
}

var TRLTaskTxnCommitAttachment_ErrorLogUrl_DEFAULT string

func (p *TRLTaskTxnCommitAttachment) GetErrorLogUrl() (v string) {
	if !p.IsSetErrorLogUrl() {
		return TRLTaskTxnCommitAttachment_ErrorLogUrl_DEFAULT
	}
	return *p.ErrorLogUrl
}
func (p *TRLTaskTxnCommitAttachment) SetLoadSourceType(val types.TLoadSourceType) {
	p.LoadSourceType = val
}
func (p *TRLTaskTxnCommitAttachment) SetId(val *types.TUniqueId) {
	p.Id = val
}
func (p *TRLTaskTxnCommitAttachment) SetJobId(val int64) {
	p.JobId = val
}
func (p *TRLTaskTxnCommitAttachment) SetLoadedRows(val *int64) {
	p.LoadedRows = val
}
func (p *TRLTaskTxnCommitAttachment) SetFilteredRows(val *int64) {
	p.FilteredRows = val
}
func (p *TRLTaskTxnCommitAttachment) SetUnselectedRows(val *int64) {
	p.UnselectedRows = val
}
func (p *TRLTaskTxnCommitAttachment) SetReceivedBytes(val *int64) {
	p.ReceivedBytes = val
}
func (p *TRLTaskTxnCommitAttachment) SetLoadedBytes(val *int64) {
	p.LoadedBytes = val
}
func (p *TRLTaskTxnCommitAttachment) SetLoadCostMs(val *int64) {
	p.LoadCostMs = val
}
func (p *TRLTaskTxnCommitAttachment) SetKafkaRLTaskProgress(val *TKafkaRLTaskProgress) {
	p.KafkaRLTaskProgress = val
}
func (p *TRLTaskTxnCommitAttachment) SetErrorLogUrl(val *string) {
	p.ErrorLogUrl = val
}

var fieldIDToName_TRLTaskTxnCommitAttachment = map[int16]string{
	1:  "loadSourceType",
	2:  "id",
	3:  "jobId",
	4:  "loadedRows",
	5:  "filteredRows",
	6:  "unselectedRows",
	7:  "receivedBytes",
	8:  "loadedBytes",
	9:  "loadCostMs",
	10: "kafkaRLTaskProgress",
	11: "errorLogUrl",
}

func (p *TRLTaskTxnCommitAttachment) IsSetId() bool {
	return p.Id != nil
}

func (p *TRLTaskTxnCommitAttachment) IsSetLoadedRows() bool {
	return p.LoadedRows != nil
}

func (p *TRLTaskTxnCommitAttachment) IsSetFilteredRows() bool {
	return p.FilteredRows != nil
}

func (p *TRLTaskTxnCommitAttachment) IsSetUnselectedRows() bool {
	return p.UnselectedRows != nil
}

func (p *TRLTaskTxnCommitAttachment) IsSetReceivedBytes() bool {
	return p.ReceivedBytes != nil
}

func (p *TRLTaskTxnCommitAttachment) IsSetLoadedBytes() bool {
	return p.LoadedBytes != nil
}

func (p *TRLTaskTxnCommitAttachment) IsSetLoadCostMs() bool {
	return p.LoadCostMs != nil
}

func (p *TRLTaskTxnCommitAttachment) IsSetKafkaRLTaskProgress() bool {
	return p.KafkaRLTaskProgress != nil
}

func (p *TRLTaskTxnCommitAttachment) IsSetErrorLogUrl() bool {
	return p.ErrorLogUrl != nil
}

func (p *TRLTaskTxnCommitAttachment) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetLoadSourceType bool = false
	var issetId bool = false
	var issetJobId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetLoadSourceType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetJobId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetLoadSourceType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetJobId {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRLTaskTxnCommitAttachment[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TRLTaskTxnCommitAttachment[fieldId]))
}

func (p *TRLTaskTxnCommitAttachment) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TLoadSourceType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TLoadSourceType(v)
	}
	p.LoadSourceType = _field
	return nil
}
func (p *TRLTaskTxnCommitAttachment) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Id = _field
	return nil
}
func (p *TRLTaskTxnCommitAttachment) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.JobId = _field
	return nil
}
func (p *TRLTaskTxnCommitAttachment) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LoadedRows = _field
	return nil
}
func (p *TRLTaskTxnCommitAttachment) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FilteredRows = _field
	return nil
}
func (p *TRLTaskTxnCommitAttachment) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UnselectedRows = _field
	return nil
}
func (p *TRLTaskTxnCommitAttachment) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReceivedBytes = _field
	return nil
}
func (p *TRLTaskTxnCommitAttachment) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LoadedBytes = _field
	return nil
}
func (p *TRLTaskTxnCommitAttachment) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LoadCostMs = _field
	return nil
}
func (p *TRLTaskTxnCommitAttachment) ReadField10(iprot thrift.TProtocol) error {
	_field := NewTKafkaRLTaskProgress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.KafkaRLTaskProgress = _field
	return nil
}
func (p *TRLTaskTxnCommitAttachment) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ErrorLogUrl = _field
	return nil
}

func (p *TRLTaskTxnCommitAttachment) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TRLTaskTxnCommitAttachment"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TRLTaskTxnCommitAttachment) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("loadSourceType", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.LoadSourceType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TRLTaskTxnCommitAttachment) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Id.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TRLTaskTxnCommitAttachment) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("jobId", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.JobId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TRLTaskTxnCommitAttachment) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadedRows() {
		if err = oprot.WriteFieldBegin("loadedRows", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LoadedRows); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TRLTaskTxnCommitAttachment) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilteredRows() {
		if err = oprot.WriteFieldBegin("filteredRows", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.FilteredRows); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TRLTaskTxnCommitAttachment) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnselectedRows() {
		if err = oprot.WriteFieldBegin("unselectedRows", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UnselectedRows); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TRLTaskTxnCommitAttachment) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetReceivedBytes() {
		if err = oprot.WriteFieldBegin("receivedBytes", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ReceivedBytes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TRLTaskTxnCommitAttachment) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadedBytes() {
		if err = oprot.WriteFieldBegin("loadedBytes", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LoadedBytes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TRLTaskTxnCommitAttachment) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadCostMs() {
		if err = oprot.WriteFieldBegin("loadCostMs", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LoadCostMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TRLTaskTxnCommitAttachment) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetKafkaRLTaskProgress() {
		if err = oprot.WriteFieldBegin("kafkaRLTaskProgress", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.KafkaRLTaskProgress.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TRLTaskTxnCommitAttachment) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorLogUrl() {
		if err = oprot.WriteFieldBegin("errorLogUrl", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ErrorLogUrl); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TRLTaskTxnCommitAttachment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRLTaskTxnCommitAttachment(%+v)", *p)

}

func (p *TRLTaskTxnCommitAttachment) DeepEqual(ano *TRLTaskTxnCommitAttachment) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LoadSourceType) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	if !p.Field3DeepEqual(ano.JobId) {
		return false
	}
	if !p.Field4DeepEqual(ano.LoadedRows) {
		return false
	}
	if !p.Field5DeepEqual(ano.FilteredRows) {
		return false
	}
	if !p.Field6DeepEqual(ano.UnselectedRows) {
		return false
	}
	if !p.Field7DeepEqual(ano.ReceivedBytes) {
		return false
	}
	if !p.Field8DeepEqual(ano.LoadedBytes) {
		return false
	}
	if !p.Field9DeepEqual(ano.LoadCostMs) {
		return false
	}
	if !p.Field10DeepEqual(ano.KafkaRLTaskProgress) {
		return false
	}
	if !p.Field11DeepEqual(ano.ErrorLogUrl) {
		return false
	}
	return true
}

func (p *TRLTaskTxnCommitAttachment) Field1DeepEqual(src types.TLoadSourceType) bool {

	if p.LoadSourceType != src {
		return false
	}
	return true
}
func (p *TRLTaskTxnCommitAttachment) Field2DeepEqual(src *types.TUniqueId) bool {

	if !p.Id.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TRLTaskTxnCommitAttachment) Field3DeepEqual(src int64) bool {

	if p.JobId != src {
		return false
	}
	return true
}
func (p *TRLTaskTxnCommitAttachment) Field4DeepEqual(src *int64) bool {

	if p.LoadedRows == src {
		return true
	} else if p.LoadedRows == nil || src == nil {
		return false
	}
	if *p.LoadedRows != *src {
		return false
	}
	return true
}
func (p *TRLTaskTxnCommitAttachment) Field5DeepEqual(src *int64) bool {

	if p.FilteredRows == src {
		return true
	} else if p.FilteredRows == nil || src == nil {
		return false
	}
	if *p.FilteredRows != *src {
		return false
	}
	return true
}
func (p *TRLTaskTxnCommitAttachment) Field6DeepEqual(src *int64) bool {

	if p.UnselectedRows == src {
		return true
	} else if p.UnselectedRows == nil || src == nil {
		return false
	}
	if *p.UnselectedRows != *src {
		return false
	}
	return true
}
func (p *TRLTaskTxnCommitAttachment) Field7DeepEqual(src *int64) bool {

	if p.ReceivedBytes == src {
		return true
	} else if p.ReceivedBytes == nil || src == nil {
		return false
	}
	if *p.ReceivedBytes != *src {
		return false
	}
	return true
}
func (p *TRLTaskTxnCommitAttachment) Field8DeepEqual(src *int64) bool {

	if p.LoadedBytes == src {
		return true
	} else if p.LoadedBytes == nil || src == nil {
		return false
	}
	if *p.LoadedBytes != *src {
		return false
	}
	return true
}
func (p *TRLTaskTxnCommitAttachment) Field9DeepEqual(src *int64) bool {

	if p.LoadCostMs == src {
		return true
	} else if p.LoadCostMs == nil || src == nil {
		return false
	}
	if *p.LoadCostMs != *src {
		return false
	}
	return true
}
func (p *TRLTaskTxnCommitAttachment) Field10DeepEqual(src *TKafkaRLTaskProgress) bool {

	if !p.KafkaRLTaskProgress.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TRLTaskTxnCommitAttachment) Field11DeepEqual(src *string) bool {

	if p.ErrorLogUrl == src {
		return true
	} else if p.ErrorLogUrl == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ErrorLogUrl, *src) != 0 {
		return false
	}
	return true
}

type TTxnCommitAttachment struct {
	LoadType                  types.TLoadType             `thrift:"loadType,1,required" frugal:"1,required,TLoadType" json:"loadType"`
	RlTaskTxnCommitAttachment *TRLTaskTxnCommitAttachment `thrift:"rlTaskTxnCommitAttachment,2,optional" frugal:"2,optional,TRLTaskTxnCommitAttachment" json:"rlTaskTxnCommitAttachment,omitempty"`
}

func NewTTxnCommitAttachment() *TTxnCommitAttachment {
	return &TTxnCommitAttachment{}
}

func (p *TTxnCommitAttachment) InitDefault() {
}

func (p *TTxnCommitAttachment) GetLoadType() (v types.TLoadType) {
	return p.LoadType
}

var TTxnCommitAttachment_RlTaskTxnCommitAttachment_DEFAULT *TRLTaskTxnCommitAttachment

func (p *TTxnCommitAttachment) GetRlTaskTxnCommitAttachment() (v *TRLTaskTxnCommitAttachment) {
	if !p.IsSetRlTaskTxnCommitAttachment() {
		return TTxnCommitAttachment_RlTaskTxnCommitAttachment_DEFAULT
	}
	return p.RlTaskTxnCommitAttachment
}
func (p *TTxnCommitAttachment) SetLoadType(val types.TLoadType) {
	p.LoadType = val
}
func (p *TTxnCommitAttachment) SetRlTaskTxnCommitAttachment(val *TRLTaskTxnCommitAttachment) {
	p.RlTaskTxnCommitAttachment = val
}

var fieldIDToName_TTxnCommitAttachment = map[int16]string{
	1: "loadType",
	2: "rlTaskTxnCommitAttachment",
}

func (p *TTxnCommitAttachment) IsSetRlTaskTxnCommitAttachment() bool {
	return p.RlTaskTxnCommitAttachment != nil
}

func (p *TTxnCommitAttachment) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetLoadType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetLoadType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetLoadType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTxnCommitAttachment[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTxnCommitAttachment[fieldId]))
}

func (p *TTxnCommitAttachment) ReadField1(iprot thrift.TProtocol) error {

	var _field types.TLoadType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TLoadType(v)
	}
	p.LoadType = _field
	return nil
}
func (p *TTxnCommitAttachment) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTRLTaskTxnCommitAttachment()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.RlTaskTxnCommitAttachment = _field
	return nil
}

func (p *TTxnCommitAttachment) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTxnCommitAttachment"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTxnCommitAttachment) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("loadType", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.LoadType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTxnCommitAttachment) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRlTaskTxnCommitAttachment() {
		if err = oprot.WriteFieldBegin("rlTaskTxnCommitAttachment", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.RlTaskTxnCommitAttachment.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTxnCommitAttachment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTxnCommitAttachment(%+v)", *p)

}

func (p *TTxnCommitAttachment) DeepEqual(ano *TTxnCommitAttachment) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LoadType) {
		return false
	}
	if !p.Field2DeepEqual(ano.RlTaskTxnCommitAttachment) {
		return false
	}
	return true
}

func (p *TTxnCommitAttachment) Field1DeepEqual(src types.TLoadType) bool {

	if p.LoadType != src {
		return false
	}
	return true
}
func (p *TTxnCommitAttachment) Field2DeepEqual(src *TRLTaskTxnCommitAttachment) bool {

	if !p.RlTaskTxnCommitAttachment.DeepEqual(src) {
		return false
	}
	return true
}

type TLoadTxnCommitRequest struct {
	Cluster             *string                    `thrift:"cluster,1,optional" frugal:"1,optional,string" json:"cluster,omitempty"`
	User                string                     `thrift:"user,2,required" frugal:"2,required,string" json:"user"`
	Passwd              string                     `thrift:"passwd,3,required" frugal:"3,required,string" json:"passwd"`
	Db                  string                     `thrift:"db,4,required" frugal:"4,required,string" json:"db"`
	Tbl                 string                     `thrift:"tbl,5,required" frugal:"5,required,string" json:"tbl"`
	UserIp              *string                    `thrift:"user_ip,6,optional" frugal:"6,optional,string" json:"user_ip,omitempty"`
	TxnId               int64                      `thrift:"txnId,7,required" frugal:"7,required,i64" json:"txnId"`
	Sync                bool                       `thrift:"sync,8,required" frugal:"8,required,bool" json:"sync"`
	CommitInfos         []*types.TTabletCommitInfo `thrift:"commitInfos,9,optional" frugal:"9,optional,list<types.TTabletCommitInfo>" json:"commitInfos,omitempty"`
	AuthCode            *int64                     `thrift:"auth_code,10,optional" frugal:"10,optional,i64" json:"auth_code,omitempty"`
	TxnCommitAttachment *TTxnCommitAttachment      `thrift:"txnCommitAttachment,11,optional" frugal:"11,optional,TTxnCommitAttachment" json:"txnCommitAttachment,omitempty"`
	ThriftRpcTimeoutMs  *int64                     `thrift:"thrift_rpc_timeout_ms,12,optional" frugal:"12,optional,i64" json:"thrift_rpc_timeout_ms,omitempty"`
	Token               *string                    `thrift:"token,13,optional" frugal:"13,optional,string" json:"token,omitempty"`
	DbId                *int64                     `thrift:"db_id,14,optional" frugal:"14,optional,i64" json:"db_id,omitempty"`
	Tbls                []string                   `thrift:"tbls,15,optional" frugal:"15,optional,list<string>" json:"tbls,omitempty"`
	TableId             *int64                     `thrift:"table_id,16,optional" frugal:"16,optional,i64" json:"table_id,omitempty"`
	AuthCodeUuid        *string                    `thrift:"auth_code_uuid,17,optional" frugal:"17,optional,string" json:"auth_code_uuid,omitempty"`
	GroupCommit         *bool                      `thrift:"groupCommit,18,optional" frugal:"18,optional,bool" json:"groupCommit,omitempty"`
	ReceiveBytes        *int64                     `thrift:"receiveBytes,19,optional" frugal:"19,optional,i64" json:"receiveBytes,omitempty"`
	BackendId           *int64                     `thrift:"backendId,20,optional" frugal:"20,optional,i64" json:"backendId,omitempty"`
}

func NewTLoadTxnCommitRequest() *TLoadTxnCommitRequest {
	return &TLoadTxnCommitRequest{}
}

func (p *TLoadTxnCommitRequest) InitDefault() {
}

var TLoadTxnCommitRequest_Cluster_DEFAULT string

func (p *TLoadTxnCommitRequest) GetCluster() (v string) {
	if !p.IsSetCluster() {
		return TLoadTxnCommitRequest_Cluster_DEFAULT
	}
	return *p.Cluster
}

func (p *TLoadTxnCommitRequest) GetUser() (v string) {
	return p.User
}

func (p *TLoadTxnCommitRequest) GetPasswd() (v string) {
	return p.Passwd
}

func (p *TLoadTxnCommitRequest) GetDb() (v string) {
	return p.Db
}

func (p *TLoadTxnCommitRequest) GetTbl() (v string) {
	return p.Tbl
}

var TLoadTxnCommitRequest_UserIp_DEFAULT string

func (p *TLoadTxnCommitRequest) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TLoadTxnCommitRequest_UserIp_DEFAULT
	}
	return *p.UserIp
}

func (p *TLoadTxnCommitRequest) GetTxnId() (v int64) {
	return p.TxnId
}

func (p *TLoadTxnCommitRequest) GetSync() (v bool) {
	return p.Sync
}

var TLoadTxnCommitRequest_CommitInfos_DEFAULT []*types.TTabletCommitInfo

func (p *TLoadTxnCommitRequest) GetCommitInfos() (v []*types.TTabletCommitInfo) {
	if !p.IsSetCommitInfos() {
		return TLoadTxnCommitRequest_CommitInfos_DEFAULT
	}
	return p.CommitInfos
}

var TLoadTxnCommitRequest_AuthCode_DEFAULT int64

func (p *TLoadTxnCommitRequest) GetAuthCode() (v int64) {
	if !p.IsSetAuthCode() {
		return TLoadTxnCommitRequest_AuthCode_DEFAULT
	}
	return *p.AuthCode
}

var TLoadTxnCommitRequest_TxnCommitAttachment_DEFAULT *TTxnCommitAttachment

func (p *TLoadTxnCommitRequest) GetTxnCommitAttachment() (v *TTxnCommitAttachment) {
	if !p.IsSetTxnCommitAttachment() {
		return TLoadTxnCommitRequest_TxnCommitAttachment_DEFAULT
	}
	return p.TxnCommitAttachment
}

var TLoadTxnCommitRequest_ThriftRpcTimeoutMs_DEFAULT int64

func (p *TLoadTxnCommitRequest) GetThriftRpcTimeoutMs() (v int64) {
	if !p.IsSetThriftRpcTimeoutMs() {
		return TLoadTxnCommitRequest_ThriftRpcTimeoutMs_DEFAULT
	}
	return *p.ThriftRpcTimeoutMs
}

var TLoadTxnCommitRequest_Token_DEFAULT string

func (p *TLoadTxnCommitRequest) GetToken() (v string) {
	if !p.IsSetToken() {
		return TLoadTxnCommitRequest_Token_DEFAULT
	}
	return *p.Token
}

var TLoadTxnCommitRequest_DbId_DEFAULT int64

func (p *TLoadTxnCommitRequest) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TLoadTxnCommitRequest_DbId_DEFAULT
	}
	return *p.DbId
}

var TLoadTxnCommitRequest_Tbls_DEFAULT []string

func (p *TLoadTxnCommitRequest) GetTbls() (v []string) {
	if !p.IsSetTbls() {
		return TLoadTxnCommitRequest_Tbls_DEFAULT
	}
	return p.Tbls
}

var TLoadTxnCommitRequest_TableId_DEFAULT int64

func (p *TLoadTxnCommitRequest) GetTableId() (v int64) {
	if !p.IsSetTableId() {
		return TLoadTxnCommitRequest_TableId_DEFAULT
	}
	return *p.TableId
}

var TLoadTxnCommitRequest_AuthCodeUuid_DEFAULT string

func (p *TLoadTxnCommitRequest) GetAuthCodeUuid() (v string) {
	if !p.IsSetAuthCodeUuid() {
		return TLoadTxnCommitRequest_AuthCodeUuid_DEFAULT
	}
	return *p.AuthCodeUuid
}

var TLoadTxnCommitRequest_GroupCommit_DEFAULT bool

func (p *TLoadTxnCommitRequest) GetGroupCommit() (v bool) {
	if !p.IsSetGroupCommit() {
		return TLoadTxnCommitRequest_GroupCommit_DEFAULT
	}
	return *p.GroupCommit
}

var TLoadTxnCommitRequest_ReceiveBytes_DEFAULT int64

func (p *TLoadTxnCommitRequest) GetReceiveBytes() (v int64) {
	if !p.IsSetReceiveBytes() {
		return TLoadTxnCommitRequest_ReceiveBytes_DEFAULT
	}
	return *p.ReceiveBytes
}

var TLoadTxnCommitRequest_BackendId_DEFAULT int64

func (p *TLoadTxnCommitRequest) GetBackendId() (v int64) {
	if !p.IsSetBackendId() {
		return TLoadTxnCommitRequest_BackendId_DEFAULT
	}
	return *p.BackendId
}
func (p *TLoadTxnCommitRequest) SetCluster(val *string) {
	p.Cluster = val
}
func (p *TLoadTxnCommitRequest) SetUser(val string) {
	p.User = val
}
func (p *TLoadTxnCommitRequest) SetPasswd(val string) {
	p.Passwd = val
}
func (p *TLoadTxnCommitRequest) SetDb(val string) {
	p.Db = val
}
func (p *TLoadTxnCommitRequest) SetTbl(val string) {
	p.Tbl = val
}
func (p *TLoadTxnCommitRequest) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TLoadTxnCommitRequest) SetTxnId(val int64) {
	p.TxnId = val
}
func (p *TLoadTxnCommitRequest) SetSync(val bool) {
	p.Sync = val
}
func (p *TLoadTxnCommitRequest) SetCommitInfos(val []*types.TTabletCommitInfo) {
	p.CommitInfos = val
}
func (p *TLoadTxnCommitRequest) SetAuthCode(val *int64) {
	p.AuthCode = val
}
func (p *TLoadTxnCommitRequest) SetTxnCommitAttachment(val *TTxnCommitAttachment) {
	p.TxnCommitAttachment = val
}
func (p *TLoadTxnCommitRequest) SetThriftRpcTimeoutMs(val *int64) {
	p.ThriftRpcTimeoutMs = val
}
func (p *TLoadTxnCommitRequest) SetToken(val *string) {
	p.Token = val
}
func (p *TLoadTxnCommitRequest) SetDbId(val *int64) {
	p.DbId = val
}
func (p *TLoadTxnCommitRequest) SetTbls(val []string) {
	p.Tbls = val
}
func (p *TLoadTxnCommitRequest) SetTableId(val *int64) {
	p.TableId = val
}
func (p *TLoadTxnCommitRequest) SetAuthCodeUuid(val *string) {
	p.AuthCodeUuid = val
}
func (p *TLoadTxnCommitRequest) SetGroupCommit(val *bool) {
	p.GroupCommit = val
}
func (p *TLoadTxnCommitRequest) SetReceiveBytes(val *int64) {
	p.ReceiveBytes = val
}
func (p *TLoadTxnCommitRequest) SetBackendId(val *int64) {
	p.BackendId = val
}

var fieldIDToName_TLoadTxnCommitRequest = map[int16]string{
	1:  "cluster",
	2:  "user",
	3:  "passwd",
	4:  "db",
	5:  "tbl",
	6:  "user_ip",
	7:  "txnId",
	8:  "sync",
	9:  "commitInfos",
	10: "auth_code",
	11: "txnCommitAttachment",
	12: "thrift_rpc_timeout_ms",
	13: "token",
	14: "db_id",
	15: "tbls",
	16: "table_id",
	17: "auth_code_uuid",
	18: "groupCommit",
	19: "receiveBytes",
	20: "backendId",
}

func (p *TLoadTxnCommitRequest) IsSetCluster() bool {
	return p.Cluster != nil
}

func (p *TLoadTxnCommitRequest) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TLoadTxnCommitRequest) IsSetCommitInfos() bool {
	return p.CommitInfos != nil
}

func (p *TLoadTxnCommitRequest) IsSetAuthCode() bool {
	return p.AuthCode != nil
}

func (p *TLoadTxnCommitRequest) IsSetTxnCommitAttachment() bool {
	return p.TxnCommitAttachment != nil
}

func (p *TLoadTxnCommitRequest) IsSetThriftRpcTimeoutMs() bool {
	return p.ThriftRpcTimeoutMs != nil
}

func (p *TLoadTxnCommitRequest) IsSetToken() bool {
	return p.Token != nil
}

func (p *TLoadTxnCommitRequest) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TLoadTxnCommitRequest) IsSetTbls() bool {
	return p.Tbls != nil
}

func (p *TLoadTxnCommitRequest) IsSetTableId() bool {
	return p.TableId != nil
}

func (p *TLoadTxnCommitRequest) IsSetAuthCodeUuid() bool {
	return p.AuthCodeUuid != nil
}

func (p *TLoadTxnCommitRequest) IsSetGroupCommit() bool {
	return p.GroupCommit != nil
}

func (p *TLoadTxnCommitRequest) IsSetReceiveBytes() bool {
	return p.ReceiveBytes != nil
}

func (p *TLoadTxnCommitRequest) IsSetBackendId() bool {
	return p.BackendId != nil
}

func (p *TLoadTxnCommitRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUser bool = false
	var issetPasswd bool = false
	var issetDb bool = false
	var issetTbl bool = false
	var issetTxnId bool = false
	var issetSync bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUser = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPasswd = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDb = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetTbl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetTxnId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetSync = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUser {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPasswd {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetDb {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTbl {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetTxnId {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetSync {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TLoadTxnCommitRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TLoadTxnCommitRequest[fieldId]))
}

func (p *TLoadTxnCommitRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cluster = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.User = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Passwd = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Db = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Tbl = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TxnId = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Sync = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*types.TTabletCommitInfo, 0, size)
	values := make([]types.TTabletCommitInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.CommitInfos = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AuthCode = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField11(iprot thrift.TProtocol) error {
	_field := NewTTxnCommitAttachment()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TxnCommitAttachment = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ThriftRpcTimeoutMs = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField13(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField14(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField15(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tbls = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField16(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableId = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField17(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AuthCodeUuid = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField18(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.GroupCommit = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField19(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReceiveBytes = _field
	return nil
}
func (p *TLoadTxnCommitRequest) ReadField20(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BackendId = _field
	return nil
}

func (p *TLoadTxnCommitRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TLoadTxnCommitRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCluster() {
		if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.User); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Passwd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("db", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Db); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tbl", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Tbl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("txnId", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TxnId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sync", thrift.BOOL, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Sync); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommitInfos() {
		if err = oprot.WriteFieldBegin("commitInfos", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CommitInfos)); err != nil {
			return err
		}
		for _, v := range p.CommitInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthCode() {
		if err = oprot.WriteFieldBegin("auth_code", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AuthCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnCommitAttachment() {
		if err = oprot.WriteFieldBegin("txnCommitAttachment", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TxnCommitAttachment.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetThriftRpcTimeoutMs() {
		if err = oprot.WriteFieldBegin("thrift_rpc_timeout_ms", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ThriftRpcTimeoutMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("db_id", thrift.I64, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetTbls() {
		if err = oprot.WriteFieldBegin("tbls", thrift.LIST, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Tbls)); err != nil {
			return err
		}
		for _, v := range p.Tbls {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err = oprot.WriteFieldBegin("table_id", thrift.I64, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthCodeUuid() {
		if err = oprot.WriteFieldBegin("auth_code_uuid", thrift.STRING, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AuthCodeUuid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupCommit() {
		if err = oprot.WriteFieldBegin("groupCommit", thrift.BOOL, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.GroupCommit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetReceiveBytes() {
		if err = oprot.WriteFieldBegin("receiveBytes", thrift.I64, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ReceiveBytes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackendId() {
		if err = oprot.WriteFieldBegin("backendId", thrift.I64, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BackendId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *TLoadTxnCommitRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLoadTxnCommitRequest(%+v)", *p)

}

func (p *TLoadTxnCommitRequest) DeepEqual(ano *TLoadTxnCommitRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field4DeepEqual(ano.Db) {
		return false
	}
	if !p.Field5DeepEqual(ano.Tbl) {
		return false
	}
	if !p.Field6DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field7DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field8DeepEqual(ano.Sync) {
		return false
	}
	if !p.Field9DeepEqual(ano.CommitInfos) {
		return false
	}
	if !p.Field10DeepEqual(ano.AuthCode) {
		return false
	}
	if !p.Field11DeepEqual(ano.TxnCommitAttachment) {
		return false
	}
	if !p.Field12DeepEqual(ano.ThriftRpcTimeoutMs) {
		return false
	}
	if !p.Field13DeepEqual(ano.Token) {
		return false
	}
	if !p.Field14DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field15DeepEqual(ano.Tbls) {
		return false
	}
	if !p.Field16DeepEqual(ano.TableId) {
		return false
	}
	if !p.Field17DeepEqual(ano.AuthCodeUuid) {
		return false
	}
	if !p.Field18DeepEqual(ano.GroupCommit) {
		return false
	}
	if !p.Field19DeepEqual(ano.ReceiveBytes) {
		return false
	}
	if !p.Field20DeepEqual(ano.BackendId) {
		return false
	}
	return true
}

func (p *TLoadTxnCommitRequest) Field1DeepEqual(src *string) bool {

	if p.Cluster == src {
		return true
	} else if p.Cluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.User, src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Passwd, src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Db, src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Tbl, src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field6DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field7DeepEqual(src int64) bool {

	if p.TxnId != src {
		return false
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field8DeepEqual(src bool) bool {

	if p.Sync != src {
		return false
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field9DeepEqual(src []*types.TTabletCommitInfo) bool {

	if len(p.CommitInfos) != len(src) {
		return false
	}
	for i, v := range p.CommitInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field10DeepEqual(src *int64) bool {

	if p.AuthCode == src {
		return true
	} else if p.AuthCode == nil || src == nil {
		return false
	}
	if *p.AuthCode != *src {
		return false
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field11DeepEqual(src *TTxnCommitAttachment) bool {

	if !p.TxnCommitAttachment.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field12DeepEqual(src *int64) bool {

	if p.ThriftRpcTimeoutMs == src {
		return true
	} else if p.ThriftRpcTimeoutMs == nil || src == nil {
		return false
	}
	if *p.ThriftRpcTimeoutMs != *src {
		return false
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field13DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field14DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field15DeepEqual(src []string) bool {

	if len(p.Tbls) != len(src) {
		return false
	}
	for i, v := range p.Tbls {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field16DeepEqual(src *int64) bool {

	if p.TableId == src {
		return true
	} else if p.TableId == nil || src == nil {
		return false
	}
	if *p.TableId != *src {
		return false
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field17DeepEqual(src *string) bool {

	if p.AuthCodeUuid == src {
		return true
	} else if p.AuthCodeUuid == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AuthCodeUuid, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field18DeepEqual(src *bool) bool {

	if p.GroupCommit == src {
		return true
	} else if p.GroupCommit == nil || src == nil {
		return false
	}
	if *p.GroupCommit != *src {
		return false
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field19DeepEqual(src *int64) bool {

	if p.ReceiveBytes == src {
		return true
	} else if p.ReceiveBytes == nil || src == nil {
		return false
	}
	if *p.ReceiveBytes != *src {
		return false
	}
	return true
}
func (p *TLoadTxnCommitRequest) Field20DeepEqual(src *int64) bool {

	if p.BackendId == src {
		return true
	} else if p.BackendId == nil || src == nil {
		return false
	}
	if *p.BackendId != *src {
		return false
	}
	return true
}

type TLoadTxnCommitResult_ struct {
	Status *status.TStatus `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
}

func NewTLoadTxnCommitResult_() *TLoadTxnCommitResult_ {
	return &TLoadTxnCommitResult_{}
}

func (p *TLoadTxnCommitResult_) InitDefault() {
}

var TLoadTxnCommitResult__Status_DEFAULT *status.TStatus

func (p *TLoadTxnCommitResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TLoadTxnCommitResult__Status_DEFAULT
	}
	return p.Status
}
func (p *TLoadTxnCommitResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}

var fieldIDToName_TLoadTxnCommitResult_ = map[int16]string{
	1: "status",
}

func (p *TLoadTxnCommitResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TLoadTxnCommitResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TLoadTxnCommitResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TLoadTxnCommitResult_[fieldId]))
}

func (p *TLoadTxnCommitResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}

func (p *TLoadTxnCommitResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TLoadTxnCommitResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TLoadTxnCommitResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TLoadTxnCommitResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLoadTxnCommitResult_(%+v)", *p)

}

func (p *TLoadTxnCommitResult_) DeepEqual(ano *TLoadTxnCommitResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *TLoadTxnCommitResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type TCommitTxnRequest struct {
	Cluster             *string                    `thrift:"cluster,1,optional" frugal:"1,optional,string" json:"cluster,omitempty"`
	User                *string                    `thrift:"user,2,optional" frugal:"2,optional,string" json:"user,omitempty"`
	Passwd              *string                    `thrift:"passwd,3,optional" frugal:"3,optional,string" json:"passwd,omitempty"`
	Db                  *string                    `thrift:"db,4,optional" frugal:"4,optional,string" json:"db,omitempty"`
	UserIp              *string                    `thrift:"user_ip,5,optional" frugal:"5,optional,string" json:"user_ip,omitempty"`
	TxnId               *int64                     `thrift:"txn_id,6,optional" frugal:"6,optional,i64" json:"txn_id,omitempty"`
	CommitInfos         []*types.TTabletCommitInfo `thrift:"commit_infos,7,optional" frugal:"7,optional,list<types.TTabletCommitInfo>" json:"commit_infos,omitempty"`
	AuthCode            *int64                     `thrift:"auth_code,8,optional" frugal:"8,optional,i64" json:"auth_code,omitempty"`
	TxnCommitAttachment *TTxnCommitAttachment      `thrift:"txn_commit_attachment,9,optional" frugal:"9,optional,TTxnCommitAttachment" json:"txn_commit_attachment,omitempty"`
	ThriftRpcTimeoutMs  *int64                     `thrift:"thrift_rpc_timeout_ms,10,optional" frugal:"10,optional,i64" json:"thrift_rpc_timeout_ms,omitempty"`
	Token               *string                    `thrift:"token,11,optional" frugal:"11,optional,string" json:"token,omitempty"`
	DbId                *int64                     `thrift:"db_id,12,optional" frugal:"12,optional,i64" json:"db_id,omitempty"`
	TxnInsert           *bool                      `thrift:"txn_insert,13,optional" frugal:"13,optional,bool" json:"txn_insert,omitempty"`
	SubTxnInfos         []*TSubTxnInfo             `thrift:"sub_txn_infos,14,optional" frugal:"14,optional,list<TSubTxnInfo>" json:"sub_txn_infos,omitempty"`
}

func NewTCommitTxnRequest() *TCommitTxnRequest {
	return &TCommitTxnRequest{}
}

func (p *TCommitTxnRequest) InitDefault() {
}

var TCommitTxnRequest_Cluster_DEFAULT string

func (p *TCommitTxnRequest) GetCluster() (v string) {
	if !p.IsSetCluster() {
		return TCommitTxnRequest_Cluster_DEFAULT
	}
	return *p.Cluster
}

var TCommitTxnRequest_User_DEFAULT string

func (p *TCommitTxnRequest) GetUser() (v string) {
	if !p.IsSetUser() {
		return TCommitTxnRequest_User_DEFAULT
	}
	return *p.User
}

var TCommitTxnRequest_Passwd_DEFAULT string

func (p *TCommitTxnRequest) GetPasswd() (v string) {
	if !p.IsSetPasswd() {
		return TCommitTxnRequest_Passwd_DEFAULT
	}
	return *p.Passwd
}

var TCommitTxnRequest_Db_DEFAULT string

func (p *TCommitTxnRequest) GetDb() (v string) {
	if !p.IsSetDb() {
		return TCommitTxnRequest_Db_DEFAULT
	}
	return *p.Db
}

var TCommitTxnRequest_UserIp_DEFAULT string

func (p *TCommitTxnRequest) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TCommitTxnRequest_UserIp_DEFAULT
	}
	return *p.UserIp
}

var TCommitTxnRequest_TxnId_DEFAULT int64

func (p *TCommitTxnRequest) GetTxnId() (v int64) {
	if !p.IsSetTxnId() {
		return TCommitTxnRequest_TxnId_DEFAULT
	}
	return *p.TxnId
}

var TCommitTxnRequest_CommitInfos_DEFAULT []*types.TTabletCommitInfo

func (p *TCommitTxnRequest) GetCommitInfos() (v []*types.TTabletCommitInfo) {
	if !p.IsSetCommitInfos() {
		return TCommitTxnRequest_CommitInfos_DEFAULT
	}
	return p.CommitInfos
}

var TCommitTxnRequest_AuthCode_DEFAULT int64

func (p *TCommitTxnRequest) GetAuthCode() (v int64) {
	if !p.IsSetAuthCode() {
		return TCommitTxnRequest_AuthCode_DEFAULT
	}
	return *p.AuthCode
}

var TCommitTxnRequest_TxnCommitAttachment_DEFAULT *TTxnCommitAttachment

func (p *TCommitTxnRequest) GetTxnCommitAttachment() (v *TTxnCommitAttachment) {
	if !p.IsSetTxnCommitAttachment() {
		return TCommitTxnRequest_TxnCommitAttachment_DEFAULT
	}
	return p.TxnCommitAttachment
}

var TCommitTxnRequest_ThriftRpcTimeoutMs_DEFAULT int64

func (p *TCommitTxnRequest) GetThriftRpcTimeoutMs() (v int64) {
	if !p.IsSetThriftRpcTimeoutMs() {
		return TCommitTxnRequest_ThriftRpcTimeoutMs_DEFAULT
	}
	return *p.ThriftRpcTimeoutMs
}

var TCommitTxnRequest_Token_DEFAULT string

func (p *TCommitTxnRequest) GetToken() (v string) {
	if !p.IsSetToken() {
		return TCommitTxnRequest_Token_DEFAULT
	}
	return *p.Token
}

var TCommitTxnRequest_DbId_DEFAULT int64

func (p *TCommitTxnRequest) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TCommitTxnRequest_DbId_DEFAULT
	}
	return *p.DbId
}

var TCommitTxnRequest_TxnInsert_DEFAULT bool

func (p *TCommitTxnRequest) GetTxnInsert() (v bool) {
	if !p.IsSetTxnInsert() {
		return TCommitTxnRequest_TxnInsert_DEFAULT
	}
	return *p.TxnInsert
}

var TCommitTxnRequest_SubTxnInfos_DEFAULT []*TSubTxnInfo

func (p *TCommitTxnRequest) GetSubTxnInfos() (v []*TSubTxnInfo) {
	if !p.IsSetSubTxnInfos() {
		return TCommitTxnRequest_SubTxnInfos_DEFAULT
	}
	return p.SubTxnInfos
}
func (p *TCommitTxnRequest) SetCluster(val *string) {
	p.Cluster = val
}
func (p *TCommitTxnRequest) SetUser(val *string) {
	p.User = val
}
func (p *TCommitTxnRequest) SetPasswd(val *string) {
	p.Passwd = val
}
func (p *TCommitTxnRequest) SetDb(val *string) {
	p.Db = val
}
func (p *TCommitTxnRequest) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TCommitTxnRequest) SetTxnId(val *int64) {
	p.TxnId = val
}
func (p *TCommitTxnRequest) SetCommitInfos(val []*types.TTabletCommitInfo) {
	p.CommitInfos = val
}
func (p *TCommitTxnRequest) SetAuthCode(val *int64) {
	p.AuthCode = val
}
func (p *TCommitTxnRequest) SetTxnCommitAttachment(val *TTxnCommitAttachment) {
	p.TxnCommitAttachment = val
}
func (p *TCommitTxnRequest) SetThriftRpcTimeoutMs(val *int64) {
	p.ThriftRpcTimeoutMs = val
}
func (p *TCommitTxnRequest) SetToken(val *string) {
	p.Token = val
}
func (p *TCommitTxnRequest) SetDbId(val *int64) {
	p.DbId = val
}
func (p *TCommitTxnRequest) SetTxnInsert(val *bool) {
	p.TxnInsert = val
}
func (p *TCommitTxnRequest) SetSubTxnInfos(val []*TSubTxnInfo) {
	p.SubTxnInfos = val
}

var fieldIDToName_TCommitTxnRequest = map[int16]string{
	1:  "cluster",
	2:  "user",
	3:  "passwd",
	4:  "db",
	5:  "user_ip",
	6:  "txn_id",
	7:  "commit_infos",
	8:  "auth_code",
	9:  "txn_commit_attachment",
	10: "thrift_rpc_timeout_ms",
	11: "token",
	12: "db_id",
	13: "txn_insert",
	14: "sub_txn_infos",
}

func (p *TCommitTxnRequest) IsSetCluster() bool {
	return p.Cluster != nil
}

func (p *TCommitTxnRequest) IsSetUser() bool {
	return p.User != nil
}

func (p *TCommitTxnRequest) IsSetPasswd() bool {
	return p.Passwd != nil
}

func (p *TCommitTxnRequest) IsSetDb() bool {
	return p.Db != nil
}

func (p *TCommitTxnRequest) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TCommitTxnRequest) IsSetTxnId() bool {
	return p.TxnId != nil
}

func (p *TCommitTxnRequest) IsSetCommitInfos() bool {
	return p.CommitInfos != nil
}

func (p *TCommitTxnRequest) IsSetAuthCode() bool {
	return p.AuthCode != nil
}

func (p *TCommitTxnRequest) IsSetTxnCommitAttachment() bool {
	return p.TxnCommitAttachment != nil
}

func (p *TCommitTxnRequest) IsSetThriftRpcTimeoutMs() bool {
	return p.ThriftRpcTimeoutMs != nil
}

func (p *TCommitTxnRequest) IsSetToken() bool {
	return p.Token != nil
}

func (p *TCommitTxnRequest) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TCommitTxnRequest) IsSetTxnInsert() bool {
	return p.TxnInsert != nil
}

func (p *TCommitTxnRequest) IsSetSubTxnInfos() bool {
	return p.SubTxnInfos != nil
}

func (p *TCommitTxnRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCommitTxnRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TCommitTxnRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cluster = _field
	return nil
}
func (p *TCommitTxnRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *TCommitTxnRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Passwd = _field
	return nil
}
func (p *TCommitTxnRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Db = _field
	return nil
}
func (p *TCommitTxnRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TCommitTxnRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TxnId = _field
	return nil
}
func (p *TCommitTxnRequest) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*types.TTabletCommitInfo, 0, size)
	values := make([]types.TTabletCommitInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.CommitInfos = _field
	return nil
}
func (p *TCommitTxnRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AuthCode = _field
	return nil
}
func (p *TCommitTxnRequest) ReadField9(iprot thrift.TProtocol) error {
	_field := NewTTxnCommitAttachment()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TxnCommitAttachment = _field
	return nil
}
func (p *TCommitTxnRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ThriftRpcTimeoutMs = _field
	return nil
}
func (p *TCommitTxnRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}
func (p *TCommitTxnRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TCommitTxnRequest) ReadField13(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TxnInsert = _field
	return nil
}
func (p *TCommitTxnRequest) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TSubTxnInfo, 0, size)
	values := make([]TSubTxnInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SubTxnInfos = _field
	return nil
}

func (p *TCommitTxnRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCommitTxnRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCommitTxnRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCluster() {
		if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCommitTxnRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCommitTxnRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPasswd() {
		if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Passwd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TCommitTxnRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDb() {
		if err = oprot.WriteFieldBegin("db", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Db); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TCommitTxnRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TCommitTxnRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnId() {
		if err = oprot.WriteFieldBegin("txn_id", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TxnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TCommitTxnRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommitInfos() {
		if err = oprot.WriteFieldBegin("commit_infos", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CommitInfos)); err != nil {
			return err
		}
		for _, v := range p.CommitInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TCommitTxnRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthCode() {
		if err = oprot.WriteFieldBegin("auth_code", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AuthCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TCommitTxnRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnCommitAttachment() {
		if err = oprot.WriteFieldBegin("txn_commit_attachment", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TxnCommitAttachment.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TCommitTxnRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetThriftRpcTimeoutMs() {
		if err = oprot.WriteFieldBegin("thrift_rpc_timeout_ms", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ThriftRpcTimeoutMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TCommitTxnRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TCommitTxnRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("db_id", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TCommitTxnRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnInsert() {
		if err = oprot.WriteFieldBegin("txn_insert", thrift.BOOL, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.TxnInsert); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TCommitTxnRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubTxnInfos() {
		if err = oprot.WriteFieldBegin("sub_txn_infos", thrift.LIST, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SubTxnInfos)); err != nil {
			return err
		}
		for _, v := range p.SubTxnInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TCommitTxnRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCommitTxnRequest(%+v)", *p)

}

func (p *TCommitTxnRequest) DeepEqual(ano *TCommitTxnRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field4DeepEqual(ano.Db) {
		return false
	}
	if !p.Field5DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field6DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field7DeepEqual(ano.CommitInfos) {
		return false
	}
	if !p.Field8DeepEqual(ano.AuthCode) {
		return false
	}
	if !p.Field9DeepEqual(ano.TxnCommitAttachment) {
		return false
	}
	if !p.Field10DeepEqual(ano.ThriftRpcTimeoutMs) {
		return false
	}
	if !p.Field11DeepEqual(ano.Token) {
		return false
	}
	if !p.Field12DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field13DeepEqual(ano.TxnInsert) {
		return false
	}
	if !p.Field14DeepEqual(ano.SubTxnInfos) {
		return false
	}
	return true
}

func (p *TCommitTxnRequest) Field1DeepEqual(src *string) bool {

	if p.Cluster == src {
		return true
	} else if p.Cluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TCommitTxnRequest) Field2DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *TCommitTxnRequest) Field3DeepEqual(src *string) bool {

	if p.Passwd == src {
		return true
	} else if p.Passwd == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Passwd, *src) != 0 {
		return false
	}
	return true
}
func (p *TCommitTxnRequest) Field4DeepEqual(src *string) bool {

	if p.Db == src {
		return true
	} else if p.Db == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Db, *src) != 0 {
		return false
	}
	return true
}
func (p *TCommitTxnRequest) Field5DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TCommitTxnRequest) Field6DeepEqual(src *int64) bool {

	if p.TxnId == src {
		return true
	} else if p.TxnId == nil || src == nil {
		return false
	}
	if *p.TxnId != *src {
		return false
	}
	return true
}
func (p *TCommitTxnRequest) Field7DeepEqual(src []*types.TTabletCommitInfo) bool {

	if len(p.CommitInfos) != len(src) {
		return false
	}
	for i, v := range p.CommitInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TCommitTxnRequest) Field8DeepEqual(src *int64) bool {

	if p.AuthCode == src {
		return true
	} else if p.AuthCode == nil || src == nil {
		return false
	}
	if *p.AuthCode != *src {
		return false
	}
	return true
}
func (p *TCommitTxnRequest) Field9DeepEqual(src *TTxnCommitAttachment) bool {

	if !p.TxnCommitAttachment.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TCommitTxnRequest) Field10DeepEqual(src *int64) bool {

	if p.ThriftRpcTimeoutMs == src {
		return true
	} else if p.ThriftRpcTimeoutMs == nil || src == nil {
		return false
	}
	if *p.ThriftRpcTimeoutMs != *src {
		return false
	}
	return true
}
func (p *TCommitTxnRequest) Field11DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *TCommitTxnRequest) Field12DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}
func (p *TCommitTxnRequest) Field13DeepEqual(src *bool) bool {

	if p.TxnInsert == src {
		return true
	} else if p.TxnInsert == nil || src == nil {
		return false
	}
	if *p.TxnInsert != *src {
		return false
	}
	return true
}
func (p *TCommitTxnRequest) Field14DeepEqual(src []*TSubTxnInfo) bool {

	if len(p.SubTxnInfos) != len(src) {
		return false
	}
	for i, v := range p.SubTxnInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TCommitTxnResult_ struct {
	Status        *status.TStatus        `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	MasterAddress *types.TNetworkAddress `thrift:"master_address,2,optional" frugal:"2,optional,types.TNetworkAddress" json:"master_address,omitempty"`
}

func NewTCommitTxnResult_() *TCommitTxnResult_ {
	return &TCommitTxnResult_{}
}

func (p *TCommitTxnResult_) InitDefault() {
}

var TCommitTxnResult__Status_DEFAULT *status.TStatus

func (p *TCommitTxnResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TCommitTxnResult__Status_DEFAULT
	}
	return p.Status
}

var TCommitTxnResult__MasterAddress_DEFAULT *types.TNetworkAddress

func (p *TCommitTxnResult_) GetMasterAddress() (v *types.TNetworkAddress) {
	if !p.IsSetMasterAddress() {
		return TCommitTxnResult__MasterAddress_DEFAULT
	}
	return p.MasterAddress
}
func (p *TCommitTxnResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TCommitTxnResult_) SetMasterAddress(val *types.TNetworkAddress) {
	p.MasterAddress = val
}

var fieldIDToName_TCommitTxnResult_ = map[int16]string{
	1: "status",
	2: "master_address",
}

func (p *TCommitTxnResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TCommitTxnResult_) IsSetMasterAddress() bool {
	return p.MasterAddress != nil
}

func (p *TCommitTxnResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCommitTxnResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TCommitTxnResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TCommitTxnResult_) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MasterAddress = _field
	return nil
}

func (p *TCommitTxnResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCommitTxnResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCommitTxnResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCommitTxnResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMasterAddress() {
		if err = oprot.WriteFieldBegin("master_address", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MasterAddress.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCommitTxnResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCommitTxnResult_(%+v)", *p)

}

func (p *TCommitTxnResult_) DeepEqual(ano *TCommitTxnResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.MasterAddress) {
		return false
	}
	return true
}

func (p *TCommitTxnResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TCommitTxnResult_) Field2DeepEqual(src *types.TNetworkAddress) bool {

	if !p.MasterAddress.DeepEqual(src) {
		return false
	}
	return true
}

type TLoadTxn2PCRequest struct {
	Cluster            *string `thrift:"cluster,1,optional" frugal:"1,optional,string" json:"cluster,omitempty"`
	User               string  `thrift:"user,2,required" frugal:"2,required,string" json:"user"`
	Passwd             string  `thrift:"passwd,3,required" frugal:"3,required,string" json:"passwd"`
	Db                 *string `thrift:"db,4,optional" frugal:"4,optional,string" json:"db,omitempty"`
	UserIp             *string `thrift:"user_ip,5,optional" frugal:"5,optional,string" json:"user_ip,omitempty"`
	TxnId              *int64  `thrift:"txnId,6,optional" frugal:"6,optional,i64" json:"txnId,omitempty"`
	Operation          *string `thrift:"operation,7,optional" frugal:"7,optional,string" json:"operation,omitempty"`
	AuthCode           *int64  `thrift:"auth_code,8,optional" frugal:"8,optional,i64" json:"auth_code,omitempty"`
	Token              *string `thrift:"token,9,optional" frugal:"9,optional,string" json:"token,omitempty"`
	ThriftRpcTimeoutMs *int64  `thrift:"thrift_rpc_timeout_ms,10,optional" frugal:"10,optional,i64" json:"thrift_rpc_timeout_ms,omitempty"`
	Label              *string `thrift:"label,11,optional" frugal:"11,optional,string" json:"label,omitempty"`
	AuthCodeUuid       *string `thrift:"auth_code_uuid,1000,optional" frugal:"1000,optional,string" json:"auth_code_uuid,omitempty"`
}

func NewTLoadTxn2PCRequest() *TLoadTxn2PCRequest {
	return &TLoadTxn2PCRequest{}
}

func (p *TLoadTxn2PCRequest) InitDefault() {
}

var TLoadTxn2PCRequest_Cluster_DEFAULT string

func (p *TLoadTxn2PCRequest) GetCluster() (v string) {
	if !p.IsSetCluster() {
		return TLoadTxn2PCRequest_Cluster_DEFAULT
	}
	return *p.Cluster
}

func (p *TLoadTxn2PCRequest) GetUser() (v string) {
	return p.User
}

func (p *TLoadTxn2PCRequest) GetPasswd() (v string) {
	return p.Passwd
}

var TLoadTxn2PCRequest_Db_DEFAULT string

func (p *TLoadTxn2PCRequest) GetDb() (v string) {
	if !p.IsSetDb() {
		return TLoadTxn2PCRequest_Db_DEFAULT
	}
	return *p.Db
}

var TLoadTxn2PCRequest_UserIp_DEFAULT string

func (p *TLoadTxn2PCRequest) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TLoadTxn2PCRequest_UserIp_DEFAULT
	}
	return *p.UserIp
}

var TLoadTxn2PCRequest_TxnId_DEFAULT int64

func (p *TLoadTxn2PCRequest) GetTxnId() (v int64) {
	if !p.IsSetTxnId() {
		return TLoadTxn2PCRequest_TxnId_DEFAULT
	}
	return *p.TxnId
}

var TLoadTxn2PCRequest_Operation_DEFAULT string

func (p *TLoadTxn2PCRequest) GetOperation() (v string) {
	if !p.IsSetOperation() {
		return TLoadTxn2PCRequest_Operation_DEFAULT
	}
	return *p.Operation
}

var TLoadTxn2PCRequest_AuthCode_DEFAULT int64

func (p *TLoadTxn2PCRequest) GetAuthCode() (v int64) {
	if !p.IsSetAuthCode() {
		return TLoadTxn2PCRequest_AuthCode_DEFAULT
	}
	return *p.AuthCode
}

var TLoadTxn2PCRequest_Token_DEFAULT string

func (p *TLoadTxn2PCRequest) GetToken() (v string) {
	if !p.IsSetToken() {
		return TLoadTxn2PCRequest_Token_DEFAULT
	}
	return *p.Token
}

var TLoadTxn2PCRequest_ThriftRpcTimeoutMs_DEFAULT int64

func (p *TLoadTxn2PCRequest) GetThriftRpcTimeoutMs() (v int64) {
	if !p.IsSetThriftRpcTimeoutMs() {
		return TLoadTxn2PCRequest_ThriftRpcTimeoutMs_DEFAULT
	}
	return *p.ThriftRpcTimeoutMs
}

var TLoadTxn2PCRequest_Label_DEFAULT string

func (p *TLoadTxn2PCRequest) GetLabel() (v string) {
	if !p.IsSetLabel() {
		return TLoadTxn2PCRequest_Label_DEFAULT
	}
	return *p.Label
}

var TLoadTxn2PCRequest_AuthCodeUuid_DEFAULT string

func (p *TLoadTxn2PCRequest) GetAuthCodeUuid() (v string) {
	if !p.IsSetAuthCodeUuid() {
		return TLoadTxn2PCRequest_AuthCodeUuid_DEFAULT
	}
	return *p.AuthCodeUuid
}
func (p *TLoadTxn2PCRequest) SetCluster(val *string) {
	p.Cluster = val
}
func (p *TLoadTxn2PCRequest) SetUser(val string) {
	p.User = val
}
func (p *TLoadTxn2PCRequest) SetPasswd(val string) {
	p.Passwd = val
}
func (p *TLoadTxn2PCRequest) SetDb(val *string) {
	p.Db = val
}
func (p *TLoadTxn2PCRequest) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TLoadTxn2PCRequest) SetTxnId(val *int64) {
	p.TxnId = val
}
func (p *TLoadTxn2PCRequest) SetOperation(val *string) {
	p.Operation = val
}
func (p *TLoadTxn2PCRequest) SetAuthCode(val *int64) {
	p.AuthCode = val
}
func (p *TLoadTxn2PCRequest) SetToken(val *string) {
	p.Token = val
}
func (p *TLoadTxn2PCRequest) SetThriftRpcTimeoutMs(val *int64) {
	p.ThriftRpcTimeoutMs = val
}
func (p *TLoadTxn2PCRequest) SetLabel(val *string) {
	p.Label = val
}
func (p *TLoadTxn2PCRequest) SetAuthCodeUuid(val *string) {
	p.AuthCodeUuid = val
}

var fieldIDToName_TLoadTxn2PCRequest = map[int16]string{
	1:    "cluster",
	2:    "user",
	3:    "passwd",
	4:    "db",
	5:    "user_ip",
	6:    "txnId",
	7:    "operation",
	8:    "auth_code",
	9:    "token",
	10:   "thrift_rpc_timeout_ms",
	11:   "label",
	1000: "auth_code_uuid",
}

func (p *TLoadTxn2PCRequest) IsSetCluster() bool {
	return p.Cluster != nil
}

func (p *TLoadTxn2PCRequest) IsSetDb() bool {
	return p.Db != nil
}

func (p *TLoadTxn2PCRequest) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TLoadTxn2PCRequest) IsSetTxnId() bool {
	return p.TxnId != nil
}

func (p *TLoadTxn2PCRequest) IsSetOperation() bool {
	return p.Operation != nil
}

func (p *TLoadTxn2PCRequest) IsSetAuthCode() bool {
	return p.AuthCode != nil
}

func (p *TLoadTxn2PCRequest) IsSetToken() bool {
	return p.Token != nil
}

func (p *TLoadTxn2PCRequest) IsSetThriftRpcTimeoutMs() bool {
	return p.ThriftRpcTimeoutMs != nil
}

func (p *TLoadTxn2PCRequest) IsSetLabel() bool {
	return p.Label != nil
}

func (p *TLoadTxn2PCRequest) IsSetAuthCodeUuid() bool {
	return p.AuthCodeUuid != nil
}

func (p *TLoadTxn2PCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUser bool = false
	var issetPasswd bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUser = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPasswd = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1000:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1000(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUser {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPasswd {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TLoadTxn2PCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TLoadTxn2PCRequest[fieldId]))
}

func (p *TLoadTxn2PCRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cluster = _field
	return nil
}
func (p *TLoadTxn2PCRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.User = _field
	return nil
}
func (p *TLoadTxn2PCRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Passwd = _field
	return nil
}
func (p *TLoadTxn2PCRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Db = _field
	return nil
}
func (p *TLoadTxn2PCRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TLoadTxn2PCRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TxnId = _field
	return nil
}
func (p *TLoadTxn2PCRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Operation = _field
	return nil
}
func (p *TLoadTxn2PCRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AuthCode = _field
	return nil
}
func (p *TLoadTxn2PCRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}
func (p *TLoadTxn2PCRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ThriftRpcTimeoutMs = _field
	return nil
}
func (p *TLoadTxn2PCRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Label = _field
	return nil
}
func (p *TLoadTxn2PCRequest) ReadField1000(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AuthCodeUuid = _field
	return nil
}

func (p *TLoadTxn2PCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TLoadTxn2PCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField1000(oprot); err != nil {
			fieldId = 1000
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TLoadTxn2PCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCluster() {
		if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TLoadTxn2PCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.User); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TLoadTxn2PCRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Passwd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TLoadTxn2PCRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDb() {
		if err = oprot.WriteFieldBegin("db", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Db); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TLoadTxn2PCRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TLoadTxn2PCRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnId() {
		if err = oprot.WriteFieldBegin("txnId", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TxnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TLoadTxn2PCRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperation() {
		if err = oprot.WriteFieldBegin("operation", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Operation); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TLoadTxn2PCRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthCode() {
		if err = oprot.WriteFieldBegin("auth_code", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AuthCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TLoadTxn2PCRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TLoadTxn2PCRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetThriftRpcTimeoutMs() {
		if err = oprot.WriteFieldBegin("thrift_rpc_timeout_ms", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ThriftRpcTimeoutMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TLoadTxn2PCRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabel() {
		if err = oprot.WriteFieldBegin("label", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Label); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TLoadTxn2PCRequest) writeField1000(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthCodeUuid() {
		if err = oprot.WriteFieldBegin("auth_code_uuid", thrift.STRING, 1000); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AuthCodeUuid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 end error: ", p), err)
}

func (p *TLoadTxn2PCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLoadTxn2PCRequest(%+v)", *p)

}

func (p *TLoadTxn2PCRequest) DeepEqual(ano *TLoadTxn2PCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field4DeepEqual(ano.Db) {
		return false
	}
	if !p.Field5DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field6DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field7DeepEqual(ano.Operation) {
		return false
	}
	if !p.Field8DeepEqual(ano.AuthCode) {
		return false
	}
	if !p.Field9DeepEqual(ano.Token) {
		return false
	}
	if !p.Field10DeepEqual(ano.ThriftRpcTimeoutMs) {
		return false
	}
	if !p.Field11DeepEqual(ano.Label) {
		return false
	}
	if !p.Field1000DeepEqual(ano.AuthCodeUuid) {
		return false
	}
	return true
}

func (p *TLoadTxn2PCRequest) Field1DeepEqual(src *string) bool {

	if p.Cluster == src {
		return true
	} else if p.Cluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxn2PCRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.User, src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxn2PCRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Passwd, src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxn2PCRequest) Field4DeepEqual(src *string) bool {

	if p.Db == src {
		return true
	} else if p.Db == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Db, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxn2PCRequest) Field5DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxn2PCRequest) Field6DeepEqual(src *int64) bool {

	if p.TxnId == src {
		return true
	} else if p.TxnId == nil || src == nil {
		return false
	}
	if *p.TxnId != *src {
		return false
	}
	return true
}
func (p *TLoadTxn2PCRequest) Field7DeepEqual(src *string) bool {

	if p.Operation == src {
		return true
	} else if p.Operation == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Operation, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxn2PCRequest) Field8DeepEqual(src *int64) bool {

	if p.AuthCode == src {
		return true
	} else if p.AuthCode == nil || src == nil {
		return false
	}
	if *p.AuthCode != *src {
		return false
	}
	return true
}
func (p *TLoadTxn2PCRequest) Field9DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxn2PCRequest) Field10DeepEqual(src *int64) bool {

	if p.ThriftRpcTimeoutMs == src {
		return true
	} else if p.ThriftRpcTimeoutMs == nil || src == nil {
		return false
	}
	if *p.ThriftRpcTimeoutMs != *src {
		return false
	}
	return true
}
func (p *TLoadTxn2PCRequest) Field11DeepEqual(src *string) bool {

	if p.Label == src {
		return true
	} else if p.Label == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Label, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxn2PCRequest) Field1000DeepEqual(src *string) bool {

	if p.AuthCodeUuid == src {
		return true
	} else if p.AuthCodeUuid == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AuthCodeUuid, *src) != 0 {
		return false
	}
	return true
}

type TLoadTxn2PCResult_ struct {
	Status *status.TStatus `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
}

func NewTLoadTxn2PCResult_() *TLoadTxn2PCResult_ {
	return &TLoadTxn2PCResult_{}
}

func (p *TLoadTxn2PCResult_) InitDefault() {
}

var TLoadTxn2PCResult__Status_DEFAULT *status.TStatus

func (p *TLoadTxn2PCResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TLoadTxn2PCResult__Status_DEFAULT
	}
	return p.Status
}
func (p *TLoadTxn2PCResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}

var fieldIDToName_TLoadTxn2PCResult_ = map[int16]string{
	1: "status",
}

func (p *TLoadTxn2PCResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TLoadTxn2PCResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TLoadTxn2PCResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TLoadTxn2PCResult_[fieldId]))
}

func (p *TLoadTxn2PCResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}

func (p *TLoadTxn2PCResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TLoadTxn2PCResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TLoadTxn2PCResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TLoadTxn2PCResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLoadTxn2PCResult_(%+v)", *p)

}

func (p *TLoadTxn2PCResult_) DeepEqual(ano *TLoadTxn2PCResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *TLoadTxn2PCResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type TRollbackTxnRequest struct {
	Cluster             *string               `thrift:"cluster,1,optional" frugal:"1,optional,string" json:"cluster,omitempty"`
	User                *string               `thrift:"user,2,optional" frugal:"2,optional,string" json:"user,omitempty"`
	Passwd              *string               `thrift:"passwd,3,optional" frugal:"3,optional,string" json:"passwd,omitempty"`
	Db                  *string               `thrift:"db,4,optional" frugal:"4,optional,string" json:"db,omitempty"`
	UserIp              *string               `thrift:"user_ip,5,optional" frugal:"5,optional,string" json:"user_ip,omitempty"`
	TxnId               *int64                `thrift:"txn_id,6,optional" frugal:"6,optional,i64" json:"txn_id,omitempty"`
	Reason              *string               `thrift:"reason,7,optional" frugal:"7,optional,string" json:"reason,omitempty"`
	AuthCode            *int64                `thrift:"auth_code,9,optional" frugal:"9,optional,i64" json:"auth_code,omitempty"`
	TxnCommitAttachment *TTxnCommitAttachment `thrift:"txn_commit_attachment,10,optional" frugal:"10,optional,TTxnCommitAttachment" json:"txn_commit_attachment,omitempty"`
	Token               *string               `thrift:"token,11,optional" frugal:"11,optional,string" json:"token,omitempty"`
	DbId                *int64                `thrift:"db_id,12,optional" frugal:"12,optional,i64" json:"db_id,omitempty"`
}

func NewTRollbackTxnRequest() *TRollbackTxnRequest {
	return &TRollbackTxnRequest{}
}

func (p *TRollbackTxnRequest) InitDefault() {
}

var TRollbackTxnRequest_Cluster_DEFAULT string

func (p *TRollbackTxnRequest) GetCluster() (v string) {
	if !p.IsSetCluster() {
		return TRollbackTxnRequest_Cluster_DEFAULT
	}
	return *p.Cluster
}

var TRollbackTxnRequest_User_DEFAULT string

func (p *TRollbackTxnRequest) GetUser() (v string) {
	if !p.IsSetUser() {
		return TRollbackTxnRequest_User_DEFAULT
	}
	return *p.User
}

var TRollbackTxnRequest_Passwd_DEFAULT string

func (p *TRollbackTxnRequest) GetPasswd() (v string) {
	if !p.IsSetPasswd() {
		return TRollbackTxnRequest_Passwd_DEFAULT
	}
	return *p.Passwd
}

var TRollbackTxnRequest_Db_DEFAULT string

func (p *TRollbackTxnRequest) GetDb() (v string) {
	if !p.IsSetDb() {
		return TRollbackTxnRequest_Db_DEFAULT
	}
	return *p.Db
}

var TRollbackTxnRequest_UserIp_DEFAULT string

func (p *TRollbackTxnRequest) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TRollbackTxnRequest_UserIp_DEFAULT
	}
	return *p.UserIp
}

var TRollbackTxnRequest_TxnId_DEFAULT int64

func (p *TRollbackTxnRequest) GetTxnId() (v int64) {
	if !p.IsSetTxnId() {
		return TRollbackTxnRequest_TxnId_DEFAULT
	}
	return *p.TxnId
}

var TRollbackTxnRequest_Reason_DEFAULT string

func (p *TRollbackTxnRequest) GetReason() (v string) {
	if !p.IsSetReason() {
		return TRollbackTxnRequest_Reason_DEFAULT
	}
	return *p.Reason
}

var TRollbackTxnRequest_AuthCode_DEFAULT int64

func (p *TRollbackTxnRequest) GetAuthCode() (v int64) {
	if !p.IsSetAuthCode() {
		return TRollbackTxnRequest_AuthCode_DEFAULT
	}
	return *p.AuthCode
}

var TRollbackTxnRequest_TxnCommitAttachment_DEFAULT *TTxnCommitAttachment

func (p *TRollbackTxnRequest) GetTxnCommitAttachment() (v *TTxnCommitAttachment) {
	if !p.IsSetTxnCommitAttachment() {
		return TRollbackTxnRequest_TxnCommitAttachment_DEFAULT
	}
	return p.TxnCommitAttachment
}

var TRollbackTxnRequest_Token_DEFAULT string

func (p *TRollbackTxnRequest) GetToken() (v string) {
	if !p.IsSetToken() {
		return TRollbackTxnRequest_Token_DEFAULT
	}
	return *p.Token
}

var TRollbackTxnRequest_DbId_DEFAULT int64

func (p *TRollbackTxnRequest) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TRollbackTxnRequest_DbId_DEFAULT
	}
	return *p.DbId
}
func (p *TRollbackTxnRequest) SetCluster(val *string) {
	p.Cluster = val
}
func (p *TRollbackTxnRequest) SetUser(val *string) {
	p.User = val
}
func (p *TRollbackTxnRequest) SetPasswd(val *string) {
	p.Passwd = val
}
func (p *TRollbackTxnRequest) SetDb(val *string) {
	p.Db = val
}
func (p *TRollbackTxnRequest) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TRollbackTxnRequest) SetTxnId(val *int64) {
	p.TxnId = val
}
func (p *TRollbackTxnRequest) SetReason(val *string) {
	p.Reason = val
}
func (p *TRollbackTxnRequest) SetAuthCode(val *int64) {
	p.AuthCode = val
}
func (p *TRollbackTxnRequest) SetTxnCommitAttachment(val *TTxnCommitAttachment) {
	p.TxnCommitAttachment = val
}
func (p *TRollbackTxnRequest) SetToken(val *string) {
	p.Token = val
}
func (p *TRollbackTxnRequest) SetDbId(val *int64) {
	p.DbId = val
}

var fieldIDToName_TRollbackTxnRequest = map[int16]string{
	1:  "cluster",
	2:  "user",
	3:  "passwd",
	4:  "db",
	5:  "user_ip",
	6:  "txn_id",
	7:  "reason",
	9:  "auth_code",
	10: "txn_commit_attachment",
	11: "token",
	12: "db_id",
}

func (p *TRollbackTxnRequest) IsSetCluster() bool {
	return p.Cluster != nil
}

func (p *TRollbackTxnRequest) IsSetUser() bool {
	return p.User != nil
}

func (p *TRollbackTxnRequest) IsSetPasswd() bool {
	return p.Passwd != nil
}

func (p *TRollbackTxnRequest) IsSetDb() bool {
	return p.Db != nil
}

func (p *TRollbackTxnRequest) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TRollbackTxnRequest) IsSetTxnId() bool {
	return p.TxnId != nil
}

func (p *TRollbackTxnRequest) IsSetReason() bool {
	return p.Reason != nil
}

func (p *TRollbackTxnRequest) IsSetAuthCode() bool {
	return p.AuthCode != nil
}

func (p *TRollbackTxnRequest) IsSetTxnCommitAttachment() bool {
	return p.TxnCommitAttachment != nil
}

func (p *TRollbackTxnRequest) IsSetToken() bool {
	return p.Token != nil
}

func (p *TRollbackTxnRequest) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TRollbackTxnRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRollbackTxnRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TRollbackTxnRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cluster = _field
	return nil
}
func (p *TRollbackTxnRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *TRollbackTxnRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Passwd = _field
	return nil
}
func (p *TRollbackTxnRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Db = _field
	return nil
}
func (p *TRollbackTxnRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TRollbackTxnRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TxnId = _field
	return nil
}
func (p *TRollbackTxnRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Reason = _field
	return nil
}
func (p *TRollbackTxnRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AuthCode = _field
	return nil
}
func (p *TRollbackTxnRequest) ReadField10(iprot thrift.TProtocol) error {
	_field := NewTTxnCommitAttachment()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TxnCommitAttachment = _field
	return nil
}
func (p *TRollbackTxnRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}
func (p *TRollbackTxnRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}

func (p *TRollbackTxnRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TRollbackTxnRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TRollbackTxnRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCluster() {
		if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TRollbackTxnRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TRollbackTxnRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPasswd() {
		if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Passwd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TRollbackTxnRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDb() {
		if err = oprot.WriteFieldBegin("db", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Db); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TRollbackTxnRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TRollbackTxnRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnId() {
		if err = oprot.WriteFieldBegin("txn_id", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TxnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TRollbackTxnRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetReason() {
		if err = oprot.WriteFieldBegin("reason", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Reason); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TRollbackTxnRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthCode() {
		if err = oprot.WriteFieldBegin("auth_code", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AuthCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TRollbackTxnRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnCommitAttachment() {
		if err = oprot.WriteFieldBegin("txn_commit_attachment", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TxnCommitAttachment.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TRollbackTxnRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TRollbackTxnRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("db_id", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TRollbackTxnRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRollbackTxnRequest(%+v)", *p)

}

func (p *TRollbackTxnRequest) DeepEqual(ano *TRollbackTxnRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field4DeepEqual(ano.Db) {
		return false
	}
	if !p.Field5DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field6DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field7DeepEqual(ano.Reason) {
		return false
	}
	if !p.Field9DeepEqual(ano.AuthCode) {
		return false
	}
	if !p.Field10DeepEqual(ano.TxnCommitAttachment) {
		return false
	}
	if !p.Field11DeepEqual(ano.Token) {
		return false
	}
	if !p.Field12DeepEqual(ano.DbId) {
		return false
	}
	return true
}

func (p *TRollbackTxnRequest) Field1DeepEqual(src *string) bool {

	if p.Cluster == src {
		return true
	} else if p.Cluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TRollbackTxnRequest) Field2DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *TRollbackTxnRequest) Field3DeepEqual(src *string) bool {

	if p.Passwd == src {
		return true
	} else if p.Passwd == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Passwd, *src) != 0 {
		return false
	}
	return true
}
func (p *TRollbackTxnRequest) Field4DeepEqual(src *string) bool {

	if p.Db == src {
		return true
	} else if p.Db == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Db, *src) != 0 {
		return false
	}
	return true
}
func (p *TRollbackTxnRequest) Field5DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TRollbackTxnRequest) Field6DeepEqual(src *int64) bool {

	if p.TxnId == src {
		return true
	} else if p.TxnId == nil || src == nil {
		return false
	}
	if *p.TxnId != *src {
		return false
	}
	return true
}
func (p *TRollbackTxnRequest) Field7DeepEqual(src *string) bool {

	if p.Reason == src {
		return true
	} else if p.Reason == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Reason, *src) != 0 {
		return false
	}
	return true
}
func (p *TRollbackTxnRequest) Field9DeepEqual(src *int64) bool {

	if p.AuthCode == src {
		return true
	} else if p.AuthCode == nil || src == nil {
		return false
	}
	if *p.AuthCode != *src {
		return false
	}
	return true
}
func (p *TRollbackTxnRequest) Field10DeepEqual(src *TTxnCommitAttachment) bool {

	if !p.TxnCommitAttachment.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TRollbackTxnRequest) Field11DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *TRollbackTxnRequest) Field12DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}

type TRollbackTxnResult_ struct {
	Status        *status.TStatus        `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	MasterAddress *types.TNetworkAddress `thrift:"master_address,2,optional" frugal:"2,optional,types.TNetworkAddress" json:"master_address,omitempty"`
}

func NewTRollbackTxnResult_() *TRollbackTxnResult_ {
	return &TRollbackTxnResult_{}
}

func (p *TRollbackTxnResult_) InitDefault() {
}

var TRollbackTxnResult__Status_DEFAULT *status.TStatus

func (p *TRollbackTxnResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TRollbackTxnResult__Status_DEFAULT
	}
	return p.Status
}

var TRollbackTxnResult__MasterAddress_DEFAULT *types.TNetworkAddress

func (p *TRollbackTxnResult_) GetMasterAddress() (v *types.TNetworkAddress) {
	if !p.IsSetMasterAddress() {
		return TRollbackTxnResult__MasterAddress_DEFAULT
	}
	return p.MasterAddress
}
func (p *TRollbackTxnResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TRollbackTxnResult_) SetMasterAddress(val *types.TNetworkAddress) {
	p.MasterAddress = val
}

var fieldIDToName_TRollbackTxnResult_ = map[int16]string{
	1: "status",
	2: "master_address",
}

func (p *TRollbackTxnResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TRollbackTxnResult_) IsSetMasterAddress() bool {
	return p.MasterAddress != nil
}

func (p *TRollbackTxnResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRollbackTxnResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TRollbackTxnResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TRollbackTxnResult_) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MasterAddress = _field
	return nil
}

func (p *TRollbackTxnResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TRollbackTxnResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TRollbackTxnResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TRollbackTxnResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMasterAddress() {
		if err = oprot.WriteFieldBegin("master_address", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MasterAddress.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TRollbackTxnResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRollbackTxnResult_(%+v)", *p)

}

func (p *TRollbackTxnResult_) DeepEqual(ano *TRollbackTxnResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.MasterAddress) {
		return false
	}
	return true
}

func (p *TRollbackTxnResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TRollbackTxnResult_) Field2DeepEqual(src *types.TNetworkAddress) bool {

	if !p.MasterAddress.DeepEqual(src) {
		return false
	}
	return true
}

type TLoadTxnRollbackRequest struct {
	Cluster             *string               `thrift:"cluster,1,optional" frugal:"1,optional,string" json:"cluster,omitempty"`
	User                string                `thrift:"user,2,required" frugal:"2,required,string" json:"user"`
	Passwd              string                `thrift:"passwd,3,required" frugal:"3,required,string" json:"passwd"`
	Db                  string                `thrift:"db,4,required" frugal:"4,required,string" json:"db"`
	Tbl                 string                `thrift:"tbl,5,required" frugal:"5,required,string" json:"tbl"`
	UserIp              *string               `thrift:"user_ip,6,optional" frugal:"6,optional,string" json:"user_ip,omitempty"`
	TxnId               int64                 `thrift:"txnId,7,required" frugal:"7,required,i64" json:"txnId"`
	Reason              *string               `thrift:"reason,8,optional" frugal:"8,optional,string" json:"reason,omitempty"`
	AuthCode            *int64                `thrift:"auth_code,9,optional" frugal:"9,optional,i64" json:"auth_code,omitempty"`
	TxnCommitAttachment *TTxnCommitAttachment `thrift:"txnCommitAttachment,10,optional" frugal:"10,optional,TTxnCommitAttachment" json:"txnCommitAttachment,omitempty"`
	Token               *string               `thrift:"token,11,optional" frugal:"11,optional,string" json:"token,omitempty"`
	DbId                *int64                `thrift:"db_id,12,optional" frugal:"12,optional,i64" json:"db_id,omitempty"`
	Tbls                []string              `thrift:"tbls,13,optional" frugal:"13,optional,list<string>" json:"tbls,omitempty"`
	AuthCodeUuid        *string               `thrift:"auth_code_uuid,14,optional" frugal:"14,optional,string" json:"auth_code_uuid,omitempty"`
	Label               *string               `thrift:"label,15,optional" frugal:"15,optional,string" json:"label,omitempty"`
}

func NewTLoadTxnRollbackRequest() *TLoadTxnRollbackRequest {
	return &TLoadTxnRollbackRequest{}
}

func (p *TLoadTxnRollbackRequest) InitDefault() {
}

var TLoadTxnRollbackRequest_Cluster_DEFAULT string

func (p *TLoadTxnRollbackRequest) GetCluster() (v string) {
	if !p.IsSetCluster() {
		return TLoadTxnRollbackRequest_Cluster_DEFAULT
	}
	return *p.Cluster
}

func (p *TLoadTxnRollbackRequest) GetUser() (v string) {
	return p.User
}

func (p *TLoadTxnRollbackRequest) GetPasswd() (v string) {
	return p.Passwd
}

func (p *TLoadTxnRollbackRequest) GetDb() (v string) {
	return p.Db
}

func (p *TLoadTxnRollbackRequest) GetTbl() (v string) {
	return p.Tbl
}

var TLoadTxnRollbackRequest_UserIp_DEFAULT string

func (p *TLoadTxnRollbackRequest) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TLoadTxnRollbackRequest_UserIp_DEFAULT
	}
	return *p.UserIp
}

func (p *TLoadTxnRollbackRequest) GetTxnId() (v int64) {
	return p.TxnId
}

var TLoadTxnRollbackRequest_Reason_DEFAULT string

func (p *TLoadTxnRollbackRequest) GetReason() (v string) {
	if !p.IsSetReason() {
		return TLoadTxnRollbackRequest_Reason_DEFAULT
	}
	return *p.Reason
}

var TLoadTxnRollbackRequest_AuthCode_DEFAULT int64

func (p *TLoadTxnRollbackRequest) GetAuthCode() (v int64) {
	if !p.IsSetAuthCode() {
		return TLoadTxnRollbackRequest_AuthCode_DEFAULT
	}
	return *p.AuthCode
}

var TLoadTxnRollbackRequest_TxnCommitAttachment_DEFAULT *TTxnCommitAttachment

func (p *TLoadTxnRollbackRequest) GetTxnCommitAttachment() (v *TTxnCommitAttachment) {
	if !p.IsSetTxnCommitAttachment() {
		return TLoadTxnRollbackRequest_TxnCommitAttachment_DEFAULT
	}
	return p.TxnCommitAttachment
}

var TLoadTxnRollbackRequest_Token_DEFAULT string

func (p *TLoadTxnRollbackRequest) GetToken() (v string) {
	if !p.IsSetToken() {
		return TLoadTxnRollbackRequest_Token_DEFAULT
	}
	return *p.Token
}

var TLoadTxnRollbackRequest_DbId_DEFAULT int64

func (p *TLoadTxnRollbackRequest) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TLoadTxnRollbackRequest_DbId_DEFAULT
	}
	return *p.DbId
}

var TLoadTxnRollbackRequest_Tbls_DEFAULT []string

func (p *TLoadTxnRollbackRequest) GetTbls() (v []string) {
	if !p.IsSetTbls() {
		return TLoadTxnRollbackRequest_Tbls_DEFAULT
	}
	return p.Tbls
}

var TLoadTxnRollbackRequest_AuthCodeUuid_DEFAULT string

func (p *TLoadTxnRollbackRequest) GetAuthCodeUuid() (v string) {
	if !p.IsSetAuthCodeUuid() {
		return TLoadTxnRollbackRequest_AuthCodeUuid_DEFAULT
	}
	return *p.AuthCodeUuid
}

var TLoadTxnRollbackRequest_Label_DEFAULT string

func (p *TLoadTxnRollbackRequest) GetLabel() (v string) {
	if !p.IsSetLabel() {
		return TLoadTxnRollbackRequest_Label_DEFAULT
	}
	return *p.Label
}
func (p *TLoadTxnRollbackRequest) SetCluster(val *string) {
	p.Cluster = val
}
func (p *TLoadTxnRollbackRequest) SetUser(val string) {
	p.User = val
}
func (p *TLoadTxnRollbackRequest) SetPasswd(val string) {
	p.Passwd = val
}
func (p *TLoadTxnRollbackRequest) SetDb(val string) {
	p.Db = val
}
func (p *TLoadTxnRollbackRequest) SetTbl(val string) {
	p.Tbl = val
}
func (p *TLoadTxnRollbackRequest) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TLoadTxnRollbackRequest) SetTxnId(val int64) {
	p.TxnId = val
}
func (p *TLoadTxnRollbackRequest) SetReason(val *string) {
	p.Reason = val
}
func (p *TLoadTxnRollbackRequest) SetAuthCode(val *int64) {
	p.AuthCode = val
}
func (p *TLoadTxnRollbackRequest) SetTxnCommitAttachment(val *TTxnCommitAttachment) {
	p.TxnCommitAttachment = val
}
func (p *TLoadTxnRollbackRequest) SetToken(val *string) {
	p.Token = val
}
func (p *TLoadTxnRollbackRequest) SetDbId(val *int64) {
	p.DbId = val
}
func (p *TLoadTxnRollbackRequest) SetTbls(val []string) {
	p.Tbls = val
}
func (p *TLoadTxnRollbackRequest) SetAuthCodeUuid(val *string) {
	p.AuthCodeUuid = val
}
func (p *TLoadTxnRollbackRequest) SetLabel(val *string) {
	p.Label = val
}

var fieldIDToName_TLoadTxnRollbackRequest = map[int16]string{
	1:  "cluster",
	2:  "user",
	3:  "passwd",
	4:  "db",
	5:  "tbl",
	6:  "user_ip",
	7:  "txnId",
	8:  "reason",
	9:  "auth_code",
	10: "txnCommitAttachment",
	11: "token",
	12: "db_id",
	13: "tbls",
	14: "auth_code_uuid",
	15: "label",
}

func (p *TLoadTxnRollbackRequest) IsSetCluster() bool {
	return p.Cluster != nil
}

func (p *TLoadTxnRollbackRequest) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TLoadTxnRollbackRequest) IsSetReason() bool {
	return p.Reason != nil
}

func (p *TLoadTxnRollbackRequest) IsSetAuthCode() bool {
	return p.AuthCode != nil
}

func (p *TLoadTxnRollbackRequest) IsSetTxnCommitAttachment() bool {
	return p.TxnCommitAttachment != nil
}

func (p *TLoadTxnRollbackRequest) IsSetToken() bool {
	return p.Token != nil
}

func (p *TLoadTxnRollbackRequest) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TLoadTxnRollbackRequest) IsSetTbls() bool {
	return p.Tbls != nil
}

func (p *TLoadTxnRollbackRequest) IsSetAuthCodeUuid() bool {
	return p.AuthCodeUuid != nil
}

func (p *TLoadTxnRollbackRequest) IsSetLabel() bool {
	return p.Label != nil
}

func (p *TLoadTxnRollbackRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUser bool = false
	var issetPasswd bool = false
	var issetDb bool = false
	var issetTbl bool = false
	var issetTxnId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUser = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPasswd = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDb = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetTbl = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetTxnId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUser {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPasswd {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetDb {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTbl {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetTxnId {
		fieldId = 7
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TLoadTxnRollbackRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TLoadTxnRollbackRequest[fieldId]))
}

func (p *TLoadTxnRollbackRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cluster = _field
	return nil
}
func (p *TLoadTxnRollbackRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.User = _field
	return nil
}
func (p *TLoadTxnRollbackRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Passwd = _field
	return nil
}
func (p *TLoadTxnRollbackRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Db = _field
	return nil
}
func (p *TLoadTxnRollbackRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Tbl = _field
	return nil
}
func (p *TLoadTxnRollbackRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TLoadTxnRollbackRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TxnId = _field
	return nil
}
func (p *TLoadTxnRollbackRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Reason = _field
	return nil
}
func (p *TLoadTxnRollbackRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AuthCode = _field
	return nil
}
func (p *TLoadTxnRollbackRequest) ReadField10(iprot thrift.TProtocol) error {
	_field := NewTTxnCommitAttachment()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TxnCommitAttachment = _field
	return nil
}
func (p *TLoadTxnRollbackRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}
func (p *TLoadTxnRollbackRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TLoadTxnRollbackRequest) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tbls = _field
	return nil
}
func (p *TLoadTxnRollbackRequest) ReadField14(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AuthCodeUuid = _field
	return nil
}
func (p *TLoadTxnRollbackRequest) ReadField15(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Label = _field
	return nil
}

func (p *TLoadTxnRollbackRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TLoadTxnRollbackRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TLoadTxnRollbackRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCluster() {
		if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TLoadTxnRollbackRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.User); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TLoadTxnRollbackRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Passwd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TLoadTxnRollbackRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("db", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Db); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TLoadTxnRollbackRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tbl", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Tbl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TLoadTxnRollbackRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TLoadTxnRollbackRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("txnId", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TxnId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TLoadTxnRollbackRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetReason() {
		if err = oprot.WriteFieldBegin("reason", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Reason); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TLoadTxnRollbackRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthCode() {
		if err = oprot.WriteFieldBegin("auth_code", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AuthCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TLoadTxnRollbackRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnCommitAttachment() {
		if err = oprot.WriteFieldBegin("txnCommitAttachment", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TxnCommitAttachment.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TLoadTxnRollbackRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TLoadTxnRollbackRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("db_id", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TLoadTxnRollbackRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetTbls() {
		if err = oprot.WriteFieldBegin("tbls", thrift.LIST, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Tbls)); err != nil {
			return err
		}
		for _, v := range p.Tbls {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TLoadTxnRollbackRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthCodeUuid() {
		if err = oprot.WriteFieldBegin("auth_code_uuid", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AuthCodeUuid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TLoadTxnRollbackRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabel() {
		if err = oprot.WriteFieldBegin("label", thrift.STRING, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Label); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TLoadTxnRollbackRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLoadTxnRollbackRequest(%+v)", *p)

}

func (p *TLoadTxnRollbackRequest) DeepEqual(ano *TLoadTxnRollbackRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field4DeepEqual(ano.Db) {
		return false
	}
	if !p.Field5DeepEqual(ano.Tbl) {
		return false
	}
	if !p.Field6DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field7DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field8DeepEqual(ano.Reason) {
		return false
	}
	if !p.Field9DeepEqual(ano.AuthCode) {
		return false
	}
	if !p.Field10DeepEqual(ano.TxnCommitAttachment) {
		return false
	}
	if !p.Field11DeepEqual(ano.Token) {
		return false
	}
	if !p.Field12DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field13DeepEqual(ano.Tbls) {
		return false
	}
	if !p.Field14DeepEqual(ano.AuthCodeUuid) {
		return false
	}
	if !p.Field15DeepEqual(ano.Label) {
		return false
	}
	return true
}

func (p *TLoadTxnRollbackRequest) Field1DeepEqual(src *string) bool {

	if p.Cluster == src {
		return true
	} else if p.Cluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnRollbackRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.User, src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnRollbackRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Passwd, src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnRollbackRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Db, src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnRollbackRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Tbl, src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnRollbackRequest) Field6DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnRollbackRequest) Field7DeepEqual(src int64) bool {

	if p.TxnId != src {
		return false
	}
	return true
}
func (p *TLoadTxnRollbackRequest) Field8DeepEqual(src *string) bool {

	if p.Reason == src {
		return true
	} else if p.Reason == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Reason, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnRollbackRequest) Field9DeepEqual(src *int64) bool {

	if p.AuthCode == src {
		return true
	} else if p.AuthCode == nil || src == nil {
		return false
	}
	if *p.AuthCode != *src {
		return false
	}
	return true
}
func (p *TLoadTxnRollbackRequest) Field10DeepEqual(src *TTxnCommitAttachment) bool {

	if !p.TxnCommitAttachment.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TLoadTxnRollbackRequest) Field11DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnRollbackRequest) Field12DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}
func (p *TLoadTxnRollbackRequest) Field13DeepEqual(src []string) bool {

	if len(p.Tbls) != len(src) {
		return false
	}
	for i, v := range p.Tbls {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TLoadTxnRollbackRequest) Field14DeepEqual(src *string) bool {

	if p.AuthCodeUuid == src {
		return true
	} else if p.AuthCodeUuid == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AuthCodeUuid, *src) != 0 {
		return false
	}
	return true
}
func (p *TLoadTxnRollbackRequest) Field15DeepEqual(src *string) bool {

	if p.Label == src {
		return true
	} else if p.Label == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Label, *src) != 0 {
		return false
	}
	return true
}

type TLoadTxnRollbackResult_ struct {
	Status *status.TStatus `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
}

func NewTLoadTxnRollbackResult_() *TLoadTxnRollbackResult_ {
	return &TLoadTxnRollbackResult_{}
}

func (p *TLoadTxnRollbackResult_) InitDefault() {
}

var TLoadTxnRollbackResult__Status_DEFAULT *status.TStatus

func (p *TLoadTxnRollbackResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TLoadTxnRollbackResult__Status_DEFAULT
	}
	return p.Status
}
func (p *TLoadTxnRollbackResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}

var fieldIDToName_TLoadTxnRollbackResult_ = map[int16]string{
	1: "status",
}

func (p *TLoadTxnRollbackResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TLoadTxnRollbackResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TLoadTxnRollbackResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TLoadTxnRollbackResult_[fieldId]))
}

func (p *TLoadTxnRollbackResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}

func (p *TLoadTxnRollbackResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TLoadTxnRollbackResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TLoadTxnRollbackResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TLoadTxnRollbackResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLoadTxnRollbackResult_(%+v)", *p)

}

func (p *TLoadTxnRollbackResult_) DeepEqual(ano *TLoadTxnRollbackResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *TLoadTxnRollbackResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type TSnapshotLoaderReportRequest struct {
	JobId       int64           `thrift:"job_id,1,required" frugal:"1,required,i64" json:"job_id"`
	TaskId      int64           `thrift:"task_id,2,required" frugal:"2,required,i64" json:"task_id"`
	TaskType    types.TTaskType `thrift:"task_type,3,required" frugal:"3,required,TTaskType" json:"task_type"`
	FinishedNum *int32          `thrift:"finished_num,4,optional" frugal:"4,optional,i32" json:"finished_num,omitempty"`
	TotalNum    *int32          `thrift:"total_num,5,optional" frugal:"5,optional,i32" json:"total_num,omitempty"`
}

func NewTSnapshotLoaderReportRequest() *TSnapshotLoaderReportRequest {
	return &TSnapshotLoaderReportRequest{}
}

func (p *TSnapshotLoaderReportRequest) InitDefault() {
}

func (p *TSnapshotLoaderReportRequest) GetJobId() (v int64) {
	return p.JobId
}

func (p *TSnapshotLoaderReportRequest) GetTaskId() (v int64) {
	return p.TaskId
}

func (p *TSnapshotLoaderReportRequest) GetTaskType() (v types.TTaskType) {
	return p.TaskType
}

var TSnapshotLoaderReportRequest_FinishedNum_DEFAULT int32

func (p *TSnapshotLoaderReportRequest) GetFinishedNum() (v int32) {
	if !p.IsSetFinishedNum() {
		return TSnapshotLoaderReportRequest_FinishedNum_DEFAULT
	}
	return *p.FinishedNum
}

var TSnapshotLoaderReportRequest_TotalNum_DEFAULT int32

func (p *TSnapshotLoaderReportRequest) GetTotalNum() (v int32) {
	if !p.IsSetTotalNum() {
		return TSnapshotLoaderReportRequest_TotalNum_DEFAULT
	}
	return *p.TotalNum
}
func (p *TSnapshotLoaderReportRequest) SetJobId(val int64) {
	p.JobId = val
}
func (p *TSnapshotLoaderReportRequest) SetTaskId(val int64) {
	p.TaskId = val
}
func (p *TSnapshotLoaderReportRequest) SetTaskType(val types.TTaskType) {
	p.TaskType = val
}
func (p *TSnapshotLoaderReportRequest) SetFinishedNum(val *int32) {
	p.FinishedNum = val
}
func (p *TSnapshotLoaderReportRequest) SetTotalNum(val *int32) {
	p.TotalNum = val
}

var fieldIDToName_TSnapshotLoaderReportRequest = map[int16]string{
	1: "job_id",
	2: "task_id",
	3: "task_type",
	4: "finished_num",
	5: "total_num",
}

func (p *TSnapshotLoaderReportRequest) IsSetFinishedNum() bool {
	return p.FinishedNum != nil
}

func (p *TSnapshotLoaderReportRequest) IsSetTotalNum() bool {
	return p.TotalNum != nil
}

func (p *TSnapshotLoaderReportRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetJobId bool = false
	var issetTaskId bool = false
	var issetTaskType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetJobId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTaskId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetTaskType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetJobId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTaskId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTaskType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TSnapshotLoaderReportRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TSnapshotLoaderReportRequest[fieldId]))
}

func (p *TSnapshotLoaderReportRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.JobId = _field
	return nil
}
func (p *TSnapshotLoaderReportRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskId = _field
	return nil
}
func (p *TSnapshotLoaderReportRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field types.TTaskType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TTaskType(v)
	}
	p.TaskType = _field
	return nil
}
func (p *TSnapshotLoaderReportRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FinishedNum = _field
	return nil
}
func (p *TSnapshotLoaderReportRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TotalNum = _field
	return nil
}

func (p *TSnapshotLoaderReportRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TSnapshotLoaderReportRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TSnapshotLoaderReportRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("job_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.JobId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TSnapshotLoaderReportRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TaskId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TSnapshotLoaderReportRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_type", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.TaskType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TSnapshotLoaderReportRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFinishedNum() {
		if err = oprot.WriteFieldBegin("finished_num", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.FinishedNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TSnapshotLoaderReportRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalNum() {
		if err = oprot.WriteFieldBegin("total_num", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TotalNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TSnapshotLoaderReportRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSnapshotLoaderReportRequest(%+v)", *p)

}

func (p *TSnapshotLoaderReportRequest) DeepEqual(ano *TSnapshotLoaderReportRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.JobId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TaskId) {
		return false
	}
	if !p.Field3DeepEqual(ano.TaskType) {
		return false
	}
	if !p.Field4DeepEqual(ano.FinishedNum) {
		return false
	}
	if !p.Field5DeepEqual(ano.TotalNum) {
		return false
	}
	return true
}

func (p *TSnapshotLoaderReportRequest) Field1DeepEqual(src int64) bool {

	if p.JobId != src {
		return false
	}
	return true
}
func (p *TSnapshotLoaderReportRequest) Field2DeepEqual(src int64) bool {

	if p.TaskId != src {
		return false
	}
	return true
}
func (p *TSnapshotLoaderReportRequest) Field3DeepEqual(src types.TTaskType) bool {

	if p.TaskType != src {
		return false
	}
	return true
}
func (p *TSnapshotLoaderReportRequest) Field4DeepEqual(src *int32) bool {

	if p.FinishedNum == src {
		return true
	} else if p.FinishedNum == nil || src == nil {
		return false
	}
	if *p.FinishedNum != *src {
		return false
	}
	return true
}
func (p *TSnapshotLoaderReportRequest) Field5DeepEqual(src *int32) bool {

	if p.TotalNum == src {
		return true
	} else if p.TotalNum == nil || src == nil {
		return false
	}
	if *p.TotalNum != *src {
		return false
	}
	return true
}

type TFrontendPingFrontendRequest struct {
	ClusterId int32  `thrift:"clusterId,1,required" frugal:"1,required,i32" json:"clusterId"`
	Token     string `thrift:"token,2,required" frugal:"2,required,string" json:"token"`
}

func NewTFrontendPingFrontendRequest() *TFrontendPingFrontendRequest {
	return &TFrontendPingFrontendRequest{}
}

func (p *TFrontendPingFrontendRequest) InitDefault() {
}

func (p *TFrontendPingFrontendRequest) GetClusterId() (v int32) {
	return p.ClusterId
}

func (p *TFrontendPingFrontendRequest) GetToken() (v string) {
	return p.Token
}
func (p *TFrontendPingFrontendRequest) SetClusterId(val int32) {
	p.ClusterId = val
}
func (p *TFrontendPingFrontendRequest) SetToken(val string) {
	p.Token = val
}

var fieldIDToName_TFrontendPingFrontendRequest = map[int16]string{
	1: "clusterId",
	2: "token",
}

func (p *TFrontendPingFrontendRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetToken bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetToken {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFrontendPingFrontendRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFrontendPingFrontendRequest[fieldId]))
}

func (p *TFrontendPingFrontendRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ClusterId = _field
	return nil
}
func (p *TFrontendPingFrontendRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}

func (p *TFrontendPingFrontendRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFrontendPingFrontendRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFrontendPingFrontendRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("clusterId", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFrontendPingFrontendRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFrontendPingFrontendRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFrontendPingFrontendRequest(%+v)", *p)

}

func (p *TFrontendPingFrontendRequest) DeepEqual(ano *TFrontendPingFrontendRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *TFrontendPingFrontendRequest) Field1DeepEqual(src int32) bool {

	if p.ClusterId != src {
		return false
	}
	return true
}
func (p *TFrontendPingFrontendRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}

type TDiskInfo struct {
	DirType    string `thrift:"dirType,1,required" frugal:"1,required,string" json:"dirType"`
	Dir        string `thrift:"dir,2,required" frugal:"2,required,string" json:"dir"`
	Filesystem string `thrift:"filesystem,3,required" frugal:"3,required,string" json:"filesystem"`
	Blocks     int64  `thrift:"blocks,4,required" frugal:"4,required,i64" json:"blocks"`
	Used       int64  `thrift:"used,5,required" frugal:"5,required,i64" json:"used"`
	Available  int64  `thrift:"available,6,required" frugal:"6,required,i64" json:"available"`
	UseRate    int32  `thrift:"useRate,7,required" frugal:"7,required,i32" json:"useRate"`
	MountedOn  string `thrift:"mountedOn,8,required" frugal:"8,required,string" json:"mountedOn"`
}

func NewTDiskInfo() *TDiskInfo {
	return &TDiskInfo{}
}

func (p *TDiskInfo) InitDefault() {
}

func (p *TDiskInfo) GetDirType() (v string) {
	return p.DirType
}

func (p *TDiskInfo) GetDir() (v string) {
	return p.Dir
}

func (p *TDiskInfo) GetFilesystem() (v string) {
	return p.Filesystem
}

func (p *TDiskInfo) GetBlocks() (v int64) {
	return p.Blocks
}

func (p *TDiskInfo) GetUsed() (v int64) {
	return p.Used
}

func (p *TDiskInfo) GetAvailable() (v int64) {
	return p.Available
}

func (p *TDiskInfo) GetUseRate() (v int32) {
	return p.UseRate
}

func (p *TDiskInfo) GetMountedOn() (v string) {
	return p.MountedOn
}
func (p *TDiskInfo) SetDirType(val string) {
	p.DirType = val
}
func (p *TDiskInfo) SetDir(val string) {
	p.Dir = val
}
func (p *TDiskInfo) SetFilesystem(val string) {
	p.Filesystem = val
}
func (p *TDiskInfo) SetBlocks(val int64) {
	p.Blocks = val
}
func (p *TDiskInfo) SetUsed(val int64) {
	p.Used = val
}
func (p *TDiskInfo) SetAvailable(val int64) {
	p.Available = val
}
func (p *TDiskInfo) SetUseRate(val int32) {
	p.UseRate = val
}
func (p *TDiskInfo) SetMountedOn(val string) {
	p.MountedOn = val
}

var fieldIDToName_TDiskInfo = map[int16]string{
	1: "dirType",
	2: "dir",
	3: "filesystem",
	4: "blocks",
	5: "used",
	6: "available",
	7: "useRate",
	8: "mountedOn",
}

func (p *TDiskInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDirType bool = false
	var issetDir bool = false
	var issetFilesystem bool = false
	var issetBlocks bool = false
	var issetUsed bool = false
	var issetAvailable bool = false
	var issetUseRate bool = false
	var issetMountedOn bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetDirType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDir = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilesystem = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetBlocks = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsed = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetAvailable = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetUseRate = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetMountedOn = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDirType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetDir {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetFilesystem {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetBlocks {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetUsed {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetAvailable {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetUseRate {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetMountedOn {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDiskInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TDiskInfo[fieldId]))
}

func (p *TDiskInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DirType = _field
	return nil
}
func (p *TDiskInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Dir = _field
	return nil
}
func (p *TDiskInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Filesystem = _field
	return nil
}
func (p *TDiskInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Blocks = _field
	return nil
}
func (p *TDiskInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Used = _field
	return nil
}
func (p *TDiskInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Available = _field
	return nil
}
func (p *TDiskInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UseRate = _field
	return nil
}
func (p *TDiskInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MountedOn = _field
	return nil
}

func (p *TDiskInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDiskInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDiskInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dirType", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DirType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDiskInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dir", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Dir); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TDiskInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filesystem", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Filesystem); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TDiskInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("blocks", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Blocks); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TDiskInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("used", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Used); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TDiskInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("available", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Available); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TDiskInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("useRate", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UseRate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TDiskInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("mountedOn", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MountedOn); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TDiskInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDiskInfo(%+v)", *p)

}

func (p *TDiskInfo) DeepEqual(ano *TDiskInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DirType) {
		return false
	}
	if !p.Field2DeepEqual(ano.Dir) {
		return false
	}
	if !p.Field3DeepEqual(ano.Filesystem) {
		return false
	}
	if !p.Field4DeepEqual(ano.Blocks) {
		return false
	}
	if !p.Field5DeepEqual(ano.Used) {
		return false
	}
	if !p.Field6DeepEqual(ano.Available) {
		return false
	}
	if !p.Field7DeepEqual(ano.UseRate) {
		return false
	}
	if !p.Field8DeepEqual(ano.MountedOn) {
		return false
	}
	return true
}

func (p *TDiskInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.DirType, src) != 0 {
		return false
	}
	return true
}
func (p *TDiskInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Dir, src) != 0 {
		return false
	}
	return true
}
func (p *TDiskInfo) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Filesystem, src) != 0 {
		return false
	}
	return true
}
func (p *TDiskInfo) Field4DeepEqual(src int64) bool {

	if p.Blocks != src {
		return false
	}
	return true
}
func (p *TDiskInfo) Field5DeepEqual(src int64) bool {

	if p.Used != src {
		return false
	}
	return true
}
func (p *TDiskInfo) Field6DeepEqual(src int64) bool {

	if p.Available != src {
		return false
	}
	return true
}
func (p *TDiskInfo) Field7DeepEqual(src int32) bool {

	if p.UseRate != src {
		return false
	}
	return true
}
func (p *TDiskInfo) Field8DeepEqual(src string) bool {

	if strings.Compare(p.MountedOn, src) != 0 {
		return false
	}
	return true
}

type TFrontendPingFrontendResult_ struct {
	Status             TFrontendPingFrontendStatusCode `thrift:"status,1,required" frugal:"1,required,TFrontendPingFrontendStatusCode" json:"status"`
	Msg                string                          `thrift:"msg,2,required" frugal:"2,required,string" json:"msg"`
	QueryPort          int32                           `thrift:"queryPort,3,required" frugal:"3,required,i32" json:"queryPort"`
	RpcPort            int32                           `thrift:"rpcPort,4,required" frugal:"4,required,i32" json:"rpcPort"`
	ReplayedJournalId  int64                           `thrift:"replayedJournalId,5,required" frugal:"5,required,i64" json:"replayedJournalId"`
	Version            string                          `thrift:"version,6,required" frugal:"6,required,string" json:"version"`
	LastStartupTime    *int64                          `thrift:"lastStartupTime,7,optional" frugal:"7,optional,i64" json:"lastStartupTime,omitempty"`
	DiskInfos          []*TDiskInfo                    `thrift:"diskInfos,8,optional" frugal:"8,optional,list<TDiskInfo>" json:"diskInfos,omitempty"`
	ProcessUUID        *int64                          `thrift:"processUUID,9,optional" frugal:"9,optional,i64" json:"processUUID,omitempty"`
	ArrowFlightSqlPort *int32                          `thrift:"arrowFlightSqlPort,10,optional" frugal:"10,optional,i32" json:"arrowFlightSqlPort,omitempty"`
}

func NewTFrontendPingFrontendResult_() *TFrontendPingFrontendResult_ {
	return &TFrontendPingFrontendResult_{}
}

func (p *TFrontendPingFrontendResult_) InitDefault() {
}

func (p *TFrontendPingFrontendResult_) GetStatus() (v TFrontendPingFrontendStatusCode) {
	return p.Status
}

func (p *TFrontendPingFrontendResult_) GetMsg() (v string) {
	return p.Msg
}

func (p *TFrontendPingFrontendResult_) GetQueryPort() (v int32) {
	return p.QueryPort
}

func (p *TFrontendPingFrontendResult_) GetRpcPort() (v int32) {
	return p.RpcPort
}

func (p *TFrontendPingFrontendResult_) GetReplayedJournalId() (v int64) {
	return p.ReplayedJournalId
}

func (p *TFrontendPingFrontendResult_) GetVersion() (v string) {
	return p.Version
}

var TFrontendPingFrontendResult__LastStartupTime_DEFAULT int64

func (p *TFrontendPingFrontendResult_) GetLastStartupTime() (v int64) {
	if !p.IsSetLastStartupTime() {
		return TFrontendPingFrontendResult__LastStartupTime_DEFAULT
	}
	return *p.LastStartupTime
}

var TFrontendPingFrontendResult__DiskInfos_DEFAULT []*TDiskInfo

func (p *TFrontendPingFrontendResult_) GetDiskInfos() (v []*TDiskInfo) {
	if !p.IsSetDiskInfos() {
		return TFrontendPingFrontendResult__DiskInfos_DEFAULT
	}
	return p.DiskInfos
}

var TFrontendPingFrontendResult__ProcessUUID_DEFAULT int64

func (p *TFrontendPingFrontendResult_) GetProcessUUID() (v int64) {
	if !p.IsSetProcessUUID() {
		return TFrontendPingFrontendResult__ProcessUUID_DEFAULT
	}
	return *p.ProcessUUID
}

var TFrontendPingFrontendResult__ArrowFlightSqlPort_DEFAULT int32

func (p *TFrontendPingFrontendResult_) GetArrowFlightSqlPort() (v int32) {
	if !p.IsSetArrowFlightSqlPort() {
		return TFrontendPingFrontendResult__ArrowFlightSqlPort_DEFAULT
	}
	return *p.ArrowFlightSqlPort
}
func (p *TFrontendPingFrontendResult_) SetStatus(val TFrontendPingFrontendStatusCode) {
	p.Status = val
}
func (p *TFrontendPingFrontendResult_) SetMsg(val string) {
	p.Msg = val
}
func (p *TFrontendPingFrontendResult_) SetQueryPort(val int32) {
	p.QueryPort = val
}
func (p *TFrontendPingFrontendResult_) SetRpcPort(val int32) {
	p.RpcPort = val
}
func (p *TFrontendPingFrontendResult_) SetReplayedJournalId(val int64) {
	p.ReplayedJournalId = val
}
func (p *TFrontendPingFrontendResult_) SetVersion(val string) {
	p.Version = val
}
func (p *TFrontendPingFrontendResult_) SetLastStartupTime(val *int64) {
	p.LastStartupTime = val
}
func (p *TFrontendPingFrontendResult_) SetDiskInfos(val []*TDiskInfo) {
	p.DiskInfos = val
}
func (p *TFrontendPingFrontendResult_) SetProcessUUID(val *int64) {
	p.ProcessUUID = val
}
func (p *TFrontendPingFrontendResult_) SetArrowFlightSqlPort(val *int32) {
	p.ArrowFlightSqlPort = val
}

var fieldIDToName_TFrontendPingFrontendResult_ = map[int16]string{
	1:  "status",
	2:  "msg",
	3:  "queryPort",
	4:  "rpcPort",
	5:  "replayedJournalId",
	6:  "version",
	7:  "lastStartupTime",
	8:  "diskInfos",
	9:  "processUUID",
	10: "arrowFlightSqlPort",
}

func (p *TFrontendPingFrontendResult_) IsSetLastStartupTime() bool {
	return p.LastStartupTime != nil
}

func (p *TFrontendPingFrontendResult_) IsSetDiskInfos() bool {
	return p.DiskInfos != nil
}

func (p *TFrontendPingFrontendResult_) IsSetProcessUUID() bool {
	return p.ProcessUUID != nil
}

func (p *TFrontendPingFrontendResult_) IsSetArrowFlightSqlPort() bool {
	return p.ArrowFlightSqlPort != nil
}

func (p *TFrontendPingFrontendResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false
	var issetMsg bool = false
	var issetQueryPort bool = false
	var issetRpcPort bool = false
	var issetReplayedJournalId bool = false
	var issetVersion bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetMsg = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetQueryPort = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetRpcPort = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetReplayedJournalId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMsg {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetQueryPort {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetRpcPort {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetReplayedJournalId {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFrontendPingFrontendResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFrontendPingFrontendResult_[fieldId]))
}

func (p *TFrontendPingFrontendResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field TFrontendPingFrontendStatusCode
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TFrontendPingFrontendStatusCode(v)
	}
	p.Status = _field
	return nil
}
func (p *TFrontendPingFrontendResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Msg = _field
	return nil
}
func (p *TFrontendPingFrontendResult_) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.QueryPort = _field
	return nil
}
func (p *TFrontendPingFrontendResult_) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RpcPort = _field
	return nil
}
func (p *TFrontendPingFrontendResult_) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ReplayedJournalId = _field
	return nil
}
func (p *TFrontendPingFrontendResult_) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *TFrontendPingFrontendResult_) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LastStartupTime = _field
	return nil
}
func (p *TFrontendPingFrontendResult_) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TDiskInfo, 0, size)
	values := make([]TDiskInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DiskInfos = _field
	return nil
}
func (p *TFrontendPingFrontendResult_) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ProcessUUID = _field
	return nil
}
func (p *TFrontendPingFrontendResult_) ReadField10(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ArrowFlightSqlPort = _field
	return nil
}

func (p *TFrontendPingFrontendResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFrontendPingFrontendResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFrontendPingFrontendResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFrontendPingFrontendResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFrontendPingFrontendResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("queryPort", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.QueryPort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TFrontendPingFrontendResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("rpcPort", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.RpcPort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TFrontendPingFrontendResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("replayedJournalId", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ReplayedJournalId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TFrontendPingFrontendResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TFrontendPingFrontendResult_) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastStartupTime() {
		if err = oprot.WriteFieldBegin("lastStartupTime", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LastStartupTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TFrontendPingFrontendResult_) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDiskInfos() {
		if err = oprot.WriteFieldBegin("diskInfos", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DiskInfos)); err != nil {
			return err
		}
		for _, v := range p.DiskInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TFrontendPingFrontendResult_) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetProcessUUID() {
		if err = oprot.WriteFieldBegin("processUUID", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ProcessUUID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TFrontendPingFrontendResult_) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetArrowFlightSqlPort() {
		if err = oprot.WriteFieldBegin("arrowFlightSqlPort", thrift.I32, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ArrowFlightSqlPort); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TFrontendPingFrontendResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFrontendPingFrontendResult_(%+v)", *p)

}

func (p *TFrontendPingFrontendResult_) DeepEqual(ano *TFrontendPingFrontendResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.QueryPort) {
		return false
	}
	if !p.Field4DeepEqual(ano.RpcPort) {
		return false
	}
	if !p.Field5DeepEqual(ano.ReplayedJournalId) {
		return false
	}
	if !p.Field6DeepEqual(ano.Version) {
		return false
	}
	if !p.Field7DeepEqual(ano.LastStartupTime) {
		return false
	}
	if !p.Field8DeepEqual(ano.DiskInfos) {
		return false
	}
	if !p.Field9DeepEqual(ano.ProcessUUID) {
		return false
	}
	if !p.Field10DeepEqual(ano.ArrowFlightSqlPort) {
		return false
	}
	return true
}

func (p *TFrontendPingFrontendResult_) Field1DeepEqual(src TFrontendPingFrontendStatusCode) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *TFrontendPingFrontendResult_) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}
func (p *TFrontendPingFrontendResult_) Field3DeepEqual(src int32) bool {

	if p.QueryPort != src {
		return false
	}
	return true
}
func (p *TFrontendPingFrontendResult_) Field4DeepEqual(src int32) bool {

	if p.RpcPort != src {
		return false
	}
	return true
}
func (p *TFrontendPingFrontendResult_) Field5DeepEqual(src int64) bool {

	if p.ReplayedJournalId != src {
		return false
	}
	return true
}
func (p *TFrontendPingFrontendResult_) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Version, src) != 0 {
		return false
	}
	return true
}
func (p *TFrontendPingFrontendResult_) Field7DeepEqual(src *int64) bool {

	if p.LastStartupTime == src {
		return true
	} else if p.LastStartupTime == nil || src == nil {
		return false
	}
	if *p.LastStartupTime != *src {
		return false
	}
	return true
}
func (p *TFrontendPingFrontendResult_) Field8DeepEqual(src []*TDiskInfo) bool {

	if len(p.DiskInfos) != len(src) {
		return false
	}
	for i, v := range p.DiskInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TFrontendPingFrontendResult_) Field9DeepEqual(src *int64) bool {

	if p.ProcessUUID == src {
		return true
	} else if p.ProcessUUID == nil || src == nil {
		return false
	}
	if *p.ProcessUUID != *src {
		return false
	}
	return true
}
func (p *TFrontendPingFrontendResult_) Field10DeepEqual(src *int32) bool {

	if p.ArrowFlightSqlPort == src {
		return true
	} else if p.ArrowFlightSqlPort == nil || src == nil {
		return false
	}
	if *p.ArrowFlightSqlPort != *src {
		return false
	}
	return true
}

type TPropertyVal struct {
	StrVal  *string `thrift:"strVal,1,optional" frugal:"1,optional,string" json:"strVal,omitempty"`
	IntVal  *int32  `thrift:"intVal,2,optional" frugal:"2,optional,i32" json:"intVal,omitempty"`
	LongVal *int64  `thrift:"longVal,3,optional" frugal:"3,optional,i64" json:"longVal,omitempty"`
	BoolVal *bool   `thrift:"boolVal,4,optional" frugal:"4,optional,bool" json:"boolVal,omitempty"`
}

func NewTPropertyVal() *TPropertyVal {
	return &TPropertyVal{}
}

func (p *TPropertyVal) InitDefault() {
}

var TPropertyVal_StrVal_DEFAULT string

func (p *TPropertyVal) GetStrVal() (v string) {
	if !p.IsSetStrVal() {
		return TPropertyVal_StrVal_DEFAULT
	}
	return *p.StrVal
}

var TPropertyVal_IntVal_DEFAULT int32

func (p *TPropertyVal) GetIntVal() (v int32) {
	if !p.IsSetIntVal() {
		return TPropertyVal_IntVal_DEFAULT
	}
	return *p.IntVal
}

var TPropertyVal_LongVal_DEFAULT int64

func (p *TPropertyVal) GetLongVal() (v int64) {
	if !p.IsSetLongVal() {
		return TPropertyVal_LongVal_DEFAULT
	}
	return *p.LongVal
}

var TPropertyVal_BoolVal_DEFAULT bool

func (p *TPropertyVal) GetBoolVal() (v bool) {
	if !p.IsSetBoolVal() {
		return TPropertyVal_BoolVal_DEFAULT
	}
	return *p.BoolVal
}
func (p *TPropertyVal) SetStrVal(val *string) {
	p.StrVal = val
}
func (p *TPropertyVal) SetIntVal(val *int32) {
	p.IntVal = val
}
func (p *TPropertyVal) SetLongVal(val *int64) {
	p.LongVal = val
}
func (p *TPropertyVal) SetBoolVal(val *bool) {
	p.BoolVal = val
}

var fieldIDToName_TPropertyVal = map[int16]string{
	1: "strVal",
	2: "intVal",
	3: "longVal",
	4: "boolVal",
}

func (p *TPropertyVal) IsSetStrVal() bool {
	return p.StrVal != nil
}

func (p *TPropertyVal) IsSetIntVal() bool {
	return p.IntVal != nil
}

func (p *TPropertyVal) IsSetLongVal() bool {
	return p.LongVal != nil
}

func (p *TPropertyVal) IsSetBoolVal() bool {
	return p.BoolVal != nil
}

func (p *TPropertyVal) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPropertyVal[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TPropertyVal) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StrVal = _field
	return nil
}
func (p *TPropertyVal) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IntVal = _field
	return nil
}
func (p *TPropertyVal) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LongVal = _field
	return nil
}
func (p *TPropertyVal) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BoolVal = _field
	return nil
}

func (p *TPropertyVal) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPropertyVal"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPropertyVal) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStrVal() {
		if err = oprot.WriteFieldBegin("strVal", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StrVal); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPropertyVal) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntVal() {
		if err = oprot.WriteFieldBegin("intVal", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.IntVal); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPropertyVal) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLongVal() {
		if err = oprot.WriteFieldBegin("longVal", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LongVal); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPropertyVal) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBoolVal() {
		if err = oprot.WriteFieldBegin("boolVal", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.BoolVal); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TPropertyVal) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPropertyVal(%+v)", *p)

}

func (p *TPropertyVal) DeepEqual(ano *TPropertyVal) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.StrVal) {
		return false
	}
	if !p.Field2DeepEqual(ano.IntVal) {
		return false
	}
	if !p.Field3DeepEqual(ano.LongVal) {
		return false
	}
	if !p.Field4DeepEqual(ano.BoolVal) {
		return false
	}
	return true
}

func (p *TPropertyVal) Field1DeepEqual(src *string) bool {

	if p.StrVal == src {
		return true
	} else if p.StrVal == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StrVal, *src) != 0 {
		return false
	}
	return true
}
func (p *TPropertyVal) Field2DeepEqual(src *int32) bool {

	if p.IntVal == src {
		return true
	} else if p.IntVal == nil || src == nil {
		return false
	}
	if *p.IntVal != *src {
		return false
	}
	return true
}
func (p *TPropertyVal) Field3DeepEqual(src *int64) bool {

	if p.LongVal == src {
		return true
	} else if p.LongVal == nil || src == nil {
		return false
	}
	if *p.LongVal != *src {
		return false
	}
	return true
}
func (p *TPropertyVal) Field4DeepEqual(src *bool) bool {

	if p.BoolVal == src {
		return true
	} else if p.BoolVal == nil || src == nil {
		return false
	}
	if *p.BoolVal != *src {
		return false
	}
	return true
}

type TWaitingTxnStatusRequest struct {
	DbId  *int64  `thrift:"db_id,1,optional" frugal:"1,optional,i64" json:"db_id,omitempty"`
	TxnId *int64  `thrift:"txn_id,2,optional" frugal:"2,optional,i64" json:"txn_id,omitempty"`
	Label *string `thrift:"label,3,optional" frugal:"3,optional,string" json:"label,omitempty"`
}

func NewTWaitingTxnStatusRequest() *TWaitingTxnStatusRequest {
	return &TWaitingTxnStatusRequest{}
}

func (p *TWaitingTxnStatusRequest) InitDefault() {
}

var TWaitingTxnStatusRequest_DbId_DEFAULT int64

func (p *TWaitingTxnStatusRequest) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TWaitingTxnStatusRequest_DbId_DEFAULT
	}
	return *p.DbId
}

var TWaitingTxnStatusRequest_TxnId_DEFAULT int64

func (p *TWaitingTxnStatusRequest) GetTxnId() (v int64) {
	if !p.IsSetTxnId() {
		return TWaitingTxnStatusRequest_TxnId_DEFAULT
	}
	return *p.TxnId
}

var TWaitingTxnStatusRequest_Label_DEFAULT string

func (p *TWaitingTxnStatusRequest) GetLabel() (v string) {
	if !p.IsSetLabel() {
		return TWaitingTxnStatusRequest_Label_DEFAULT
	}
	return *p.Label
}
func (p *TWaitingTxnStatusRequest) SetDbId(val *int64) {
	p.DbId = val
}
func (p *TWaitingTxnStatusRequest) SetTxnId(val *int64) {
	p.TxnId = val
}
func (p *TWaitingTxnStatusRequest) SetLabel(val *string) {
	p.Label = val
}

var fieldIDToName_TWaitingTxnStatusRequest = map[int16]string{
	1: "db_id",
	2: "txn_id",
	3: "label",
}

func (p *TWaitingTxnStatusRequest) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TWaitingTxnStatusRequest) IsSetTxnId() bool {
	return p.TxnId != nil
}

func (p *TWaitingTxnStatusRequest) IsSetLabel() bool {
	return p.Label != nil
}

func (p *TWaitingTxnStatusRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TWaitingTxnStatusRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TWaitingTxnStatusRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TWaitingTxnStatusRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TxnId = _field
	return nil
}
func (p *TWaitingTxnStatusRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Label = _field
	return nil
}

func (p *TWaitingTxnStatusRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TWaitingTxnStatusRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TWaitingTxnStatusRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("db_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TWaitingTxnStatusRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnId() {
		if err = oprot.WriteFieldBegin("txn_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TxnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TWaitingTxnStatusRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabel() {
		if err = oprot.WriteFieldBegin("label", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Label); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TWaitingTxnStatusRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TWaitingTxnStatusRequest(%+v)", *p)

}

func (p *TWaitingTxnStatusRequest) DeepEqual(ano *TWaitingTxnStatusRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Label) {
		return false
	}
	return true
}

func (p *TWaitingTxnStatusRequest) Field1DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}
func (p *TWaitingTxnStatusRequest) Field2DeepEqual(src *int64) bool {

	if p.TxnId == src {
		return true
	} else if p.TxnId == nil || src == nil {
		return false
	}
	if *p.TxnId != *src {
		return false
	}
	return true
}
func (p *TWaitingTxnStatusRequest) Field3DeepEqual(src *string) bool {

	if p.Label == src {
		return true
	} else if p.Label == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Label, *src) != 0 {
		return false
	}
	return true
}

type TWaitingTxnStatusResult_ struct {
	Status      *status.TStatus `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	TxnStatusId *int32          `thrift:"txn_status_id,2,optional" frugal:"2,optional,i32" json:"txn_status_id,omitempty"`
}

func NewTWaitingTxnStatusResult_() *TWaitingTxnStatusResult_ {
	return &TWaitingTxnStatusResult_{}
}

func (p *TWaitingTxnStatusResult_) InitDefault() {
}

var TWaitingTxnStatusResult__Status_DEFAULT *status.TStatus

func (p *TWaitingTxnStatusResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TWaitingTxnStatusResult__Status_DEFAULT
	}
	return p.Status
}

var TWaitingTxnStatusResult__TxnStatusId_DEFAULT int32

func (p *TWaitingTxnStatusResult_) GetTxnStatusId() (v int32) {
	if !p.IsSetTxnStatusId() {
		return TWaitingTxnStatusResult__TxnStatusId_DEFAULT
	}
	return *p.TxnStatusId
}
func (p *TWaitingTxnStatusResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TWaitingTxnStatusResult_) SetTxnStatusId(val *int32) {
	p.TxnStatusId = val
}

var fieldIDToName_TWaitingTxnStatusResult_ = map[int16]string{
	1: "status",
	2: "txn_status_id",
}

func (p *TWaitingTxnStatusResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TWaitingTxnStatusResult_) IsSetTxnStatusId() bool {
	return p.TxnStatusId != nil
}

func (p *TWaitingTxnStatusResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TWaitingTxnStatusResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TWaitingTxnStatusResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TWaitingTxnStatusResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TxnStatusId = _field
	return nil
}

func (p *TWaitingTxnStatusResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TWaitingTxnStatusResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TWaitingTxnStatusResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TWaitingTxnStatusResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnStatusId() {
		if err = oprot.WriteFieldBegin("txn_status_id", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TxnStatusId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TWaitingTxnStatusResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TWaitingTxnStatusResult_(%+v)", *p)

}

func (p *TWaitingTxnStatusResult_) DeepEqual(ano *TWaitingTxnStatusResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.TxnStatusId) {
		return false
	}
	return true
}

func (p *TWaitingTxnStatusResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TWaitingTxnStatusResult_) Field2DeepEqual(src *int32) bool {

	if p.TxnStatusId == src {
		return true
	} else if p.TxnStatusId == nil || src == nil {
		return false
	}
	if *p.TxnStatusId != *src {
		return false
	}
	return true
}

type TInitExternalCtlMetaRequest struct {
	CatalogId *int64 `thrift:"catalogId,1,optional" frugal:"1,optional,i64" json:"catalogId,omitempty"`
	DbId      *int64 `thrift:"dbId,2,optional" frugal:"2,optional,i64" json:"dbId,omitempty"`
	TableId   *int64 `thrift:"tableId,3,optional" frugal:"3,optional,i64" json:"tableId,omitempty"`
}

func NewTInitExternalCtlMetaRequest() *TInitExternalCtlMetaRequest {
	return &TInitExternalCtlMetaRequest{}
}

func (p *TInitExternalCtlMetaRequest) InitDefault() {
}

var TInitExternalCtlMetaRequest_CatalogId_DEFAULT int64

func (p *TInitExternalCtlMetaRequest) GetCatalogId() (v int64) {
	if !p.IsSetCatalogId() {
		return TInitExternalCtlMetaRequest_CatalogId_DEFAULT
	}
	return *p.CatalogId
}

var TInitExternalCtlMetaRequest_DbId_DEFAULT int64

func (p *TInitExternalCtlMetaRequest) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TInitExternalCtlMetaRequest_DbId_DEFAULT
	}
	return *p.DbId
}

var TInitExternalCtlMetaRequest_TableId_DEFAULT int64

func (p *TInitExternalCtlMetaRequest) GetTableId() (v int64) {
	if !p.IsSetTableId() {
		return TInitExternalCtlMetaRequest_TableId_DEFAULT
	}
	return *p.TableId
}
func (p *TInitExternalCtlMetaRequest) SetCatalogId(val *int64) {
	p.CatalogId = val
}
func (p *TInitExternalCtlMetaRequest) SetDbId(val *int64) {
	p.DbId = val
}
func (p *TInitExternalCtlMetaRequest) SetTableId(val *int64) {
	p.TableId = val
}

var fieldIDToName_TInitExternalCtlMetaRequest = map[int16]string{
	1: "catalogId",
	2: "dbId",
	3: "tableId",
}

func (p *TInitExternalCtlMetaRequest) IsSetCatalogId() bool {
	return p.CatalogId != nil
}

func (p *TInitExternalCtlMetaRequest) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TInitExternalCtlMetaRequest) IsSetTableId() bool {
	return p.TableId != nil
}

func (p *TInitExternalCtlMetaRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TInitExternalCtlMetaRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TInitExternalCtlMetaRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CatalogId = _field
	return nil
}
func (p *TInitExternalCtlMetaRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TInitExternalCtlMetaRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableId = _field
	return nil
}

func (p *TInitExternalCtlMetaRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TInitExternalCtlMetaRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TInitExternalCtlMetaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalogId() {
		if err = oprot.WriteFieldBegin("catalogId", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CatalogId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TInitExternalCtlMetaRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("dbId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TInitExternalCtlMetaRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err = oprot.WriteFieldBegin("tableId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TInitExternalCtlMetaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TInitExternalCtlMetaRequest(%+v)", *p)

}

func (p *TInitExternalCtlMetaRequest) DeepEqual(ano *TInitExternalCtlMetaRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CatalogId) {
		return false
	}
	if !p.Field2DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field3DeepEqual(ano.TableId) {
		return false
	}
	return true
}

func (p *TInitExternalCtlMetaRequest) Field1DeepEqual(src *int64) bool {

	if p.CatalogId == src {
		return true
	} else if p.CatalogId == nil || src == nil {
		return false
	}
	if *p.CatalogId != *src {
		return false
	}
	return true
}
func (p *TInitExternalCtlMetaRequest) Field2DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}
func (p *TInitExternalCtlMetaRequest) Field3DeepEqual(src *int64) bool {

	if p.TableId == src {
		return true
	} else if p.TableId == nil || src == nil {
		return false
	}
	if *p.TableId != *src {
		return false
	}
	return true
}

type TInitExternalCtlMetaResult_ struct {
	MaxJournalId *int64  `thrift:"maxJournalId,1,optional" frugal:"1,optional,i64" json:"maxJournalId,omitempty"`
	Status       *string `thrift:"status,2,optional" frugal:"2,optional,string" json:"status,omitempty"`
}

func NewTInitExternalCtlMetaResult_() *TInitExternalCtlMetaResult_ {
	return &TInitExternalCtlMetaResult_{}
}

func (p *TInitExternalCtlMetaResult_) InitDefault() {
}

var TInitExternalCtlMetaResult__MaxJournalId_DEFAULT int64

func (p *TInitExternalCtlMetaResult_) GetMaxJournalId() (v int64) {
	if !p.IsSetMaxJournalId() {
		return TInitExternalCtlMetaResult__MaxJournalId_DEFAULT
	}
	return *p.MaxJournalId
}

var TInitExternalCtlMetaResult__Status_DEFAULT string

func (p *TInitExternalCtlMetaResult_) GetStatus() (v string) {
	if !p.IsSetStatus() {
		return TInitExternalCtlMetaResult__Status_DEFAULT
	}
	return *p.Status
}
func (p *TInitExternalCtlMetaResult_) SetMaxJournalId(val *int64) {
	p.MaxJournalId = val
}
func (p *TInitExternalCtlMetaResult_) SetStatus(val *string) {
	p.Status = val
}

var fieldIDToName_TInitExternalCtlMetaResult_ = map[int16]string{
	1: "maxJournalId",
	2: "status",
}

func (p *TInitExternalCtlMetaResult_) IsSetMaxJournalId() bool {
	return p.MaxJournalId != nil
}

func (p *TInitExternalCtlMetaResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TInitExternalCtlMetaResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TInitExternalCtlMetaResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TInitExternalCtlMetaResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxJournalId = _field
	return nil
}
func (p *TInitExternalCtlMetaResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}

func (p *TInitExternalCtlMetaResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TInitExternalCtlMetaResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TInitExternalCtlMetaResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxJournalId() {
		if err = oprot.WriteFieldBegin("maxJournalId", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxJournalId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TInitExternalCtlMetaResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TInitExternalCtlMetaResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TInitExternalCtlMetaResult_(%+v)", *p)

}

func (p *TInitExternalCtlMetaResult_) DeepEqual(ano *TInitExternalCtlMetaResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MaxJournalId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *TInitExternalCtlMetaResult_) Field1DeepEqual(src *int64) bool {

	if p.MaxJournalId == src {
		return true
	} else if p.MaxJournalId == nil || src == nil {
		return false
	}
	if *p.MaxJournalId != *src {
		return false
	}
	return true
}
func (p *TInitExternalCtlMetaResult_) Field2DeepEqual(src *string) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Status, *src) != 0 {
		return false
	}
	return true
}

type TMetadataTableRequestParams struct {
	MetadataType                    *types.TMetadataType                        `thrift:"metadata_type,1,optional" frugal:"1,optional,TMetadataType" json:"metadata_type,omitempty"`
	IcebergMetadataParams           *plannodes.TIcebergMetadataParams           `thrift:"iceberg_metadata_params,2,optional" frugal:"2,optional,plannodes.TIcebergMetadataParams" json:"iceberg_metadata_params,omitempty"`
	BackendsMetadataParams          *plannodes.TBackendsMetadataParams          `thrift:"backends_metadata_params,3,optional" frugal:"3,optional,plannodes.TBackendsMetadataParams" json:"backends_metadata_params,omitempty"`
	ColumnsName                     []string                                    `thrift:"columns_name,4,optional" frugal:"4,optional,list<string>" json:"columns_name,omitempty"`
	FrontendsMetadataParams         *plannodes.TFrontendsMetadataParams         `thrift:"frontends_metadata_params,5,optional" frugal:"5,optional,plannodes.TFrontendsMetadataParams" json:"frontends_metadata_params,omitempty"`
	CurrentUserIdent                *types.TUserIdentity                        `thrift:"current_user_ident,6,optional" frugal:"6,optional,types.TUserIdentity" json:"current_user_ident,omitempty"`
	QueriesMetadataParams           *plannodes.TQueriesMetadataParams           `thrift:"queries_metadata_params,7,optional" frugal:"7,optional,plannodes.TQueriesMetadataParams" json:"queries_metadata_params,omitempty"`
	MaterializedViewsMetadataParams *plannodes.TMaterializedViewsMetadataParams `thrift:"materialized_views_metadata_params,8,optional" frugal:"8,optional,plannodes.TMaterializedViewsMetadataParams" json:"materialized_views_metadata_params,omitempty"`
	JobsMetadataParams              *plannodes.TJobsMetadataParams              `thrift:"jobs_metadata_params,9,optional" frugal:"9,optional,plannodes.TJobsMetadataParams" json:"jobs_metadata_params,omitempty"`
	TasksMetadataParams             *plannodes.TTasksMetadataParams             `thrift:"tasks_metadata_params,10,optional" frugal:"10,optional,plannodes.TTasksMetadataParams" json:"tasks_metadata_params,omitempty"`
	PartitionsMetadataParams        *plannodes.TPartitionsMetadataParams        `thrift:"partitions_metadata_params,11,optional" frugal:"11,optional,plannodes.TPartitionsMetadataParams" json:"partitions_metadata_params,omitempty"`
	MetaCacheStatsParams            *plannodes.TMetaCacheStatsParams            `thrift:"meta_cache_stats_params,12,optional" frugal:"12,optional,plannodes.TMetaCacheStatsParams" json:"meta_cache_stats_params,omitempty"`
}

func NewTMetadataTableRequestParams() *TMetadataTableRequestParams {
	return &TMetadataTableRequestParams{}
}

func (p *TMetadataTableRequestParams) InitDefault() {
}

var TMetadataTableRequestParams_MetadataType_DEFAULT types.TMetadataType

func (p *TMetadataTableRequestParams) GetMetadataType() (v types.TMetadataType) {
	if !p.IsSetMetadataType() {
		return TMetadataTableRequestParams_MetadataType_DEFAULT
	}
	return *p.MetadataType
}

var TMetadataTableRequestParams_IcebergMetadataParams_DEFAULT *plannodes.TIcebergMetadataParams

func (p *TMetadataTableRequestParams) GetIcebergMetadataParams() (v *plannodes.TIcebergMetadataParams) {
	if !p.IsSetIcebergMetadataParams() {
		return TMetadataTableRequestParams_IcebergMetadataParams_DEFAULT
	}
	return p.IcebergMetadataParams
}

var TMetadataTableRequestParams_BackendsMetadataParams_DEFAULT *plannodes.TBackendsMetadataParams

func (p *TMetadataTableRequestParams) GetBackendsMetadataParams() (v *plannodes.TBackendsMetadataParams) {
	if !p.IsSetBackendsMetadataParams() {
		return TMetadataTableRequestParams_BackendsMetadataParams_DEFAULT
	}
	return p.BackendsMetadataParams
}

var TMetadataTableRequestParams_ColumnsName_DEFAULT []string

func (p *TMetadataTableRequestParams) GetColumnsName() (v []string) {
	if !p.IsSetColumnsName() {
		return TMetadataTableRequestParams_ColumnsName_DEFAULT
	}
	return p.ColumnsName
}

var TMetadataTableRequestParams_FrontendsMetadataParams_DEFAULT *plannodes.TFrontendsMetadataParams

func (p *TMetadataTableRequestParams) GetFrontendsMetadataParams() (v *plannodes.TFrontendsMetadataParams) {
	if !p.IsSetFrontendsMetadataParams() {
		return TMetadataTableRequestParams_FrontendsMetadataParams_DEFAULT
	}
	return p.FrontendsMetadataParams
}

var TMetadataTableRequestParams_CurrentUserIdent_DEFAULT *types.TUserIdentity

func (p *TMetadataTableRequestParams) GetCurrentUserIdent() (v *types.TUserIdentity) {
	if !p.IsSetCurrentUserIdent() {
		return TMetadataTableRequestParams_CurrentUserIdent_DEFAULT
	}
	return p.CurrentUserIdent
}

var TMetadataTableRequestParams_QueriesMetadataParams_DEFAULT *plannodes.TQueriesMetadataParams

func (p *TMetadataTableRequestParams) GetQueriesMetadataParams() (v *plannodes.TQueriesMetadataParams) {
	if !p.IsSetQueriesMetadataParams() {
		return TMetadataTableRequestParams_QueriesMetadataParams_DEFAULT
	}
	return p.QueriesMetadataParams
}

var TMetadataTableRequestParams_MaterializedViewsMetadataParams_DEFAULT *plannodes.TMaterializedViewsMetadataParams

func (p *TMetadataTableRequestParams) GetMaterializedViewsMetadataParams() (v *plannodes.TMaterializedViewsMetadataParams) {
	if !p.IsSetMaterializedViewsMetadataParams() {
		return TMetadataTableRequestParams_MaterializedViewsMetadataParams_DEFAULT
	}
	return p.MaterializedViewsMetadataParams
}

var TMetadataTableRequestParams_JobsMetadataParams_DEFAULT *plannodes.TJobsMetadataParams

func (p *TMetadataTableRequestParams) GetJobsMetadataParams() (v *plannodes.TJobsMetadataParams) {
	if !p.IsSetJobsMetadataParams() {
		return TMetadataTableRequestParams_JobsMetadataParams_DEFAULT
	}
	return p.JobsMetadataParams
}

var TMetadataTableRequestParams_TasksMetadataParams_DEFAULT *plannodes.TTasksMetadataParams

func (p *TMetadataTableRequestParams) GetTasksMetadataParams() (v *plannodes.TTasksMetadataParams) {
	if !p.IsSetTasksMetadataParams() {
		return TMetadataTableRequestParams_TasksMetadataParams_DEFAULT
	}
	return p.TasksMetadataParams
}

var TMetadataTableRequestParams_PartitionsMetadataParams_DEFAULT *plannodes.TPartitionsMetadataParams

func (p *TMetadataTableRequestParams) GetPartitionsMetadataParams() (v *plannodes.TPartitionsMetadataParams) {
	if !p.IsSetPartitionsMetadataParams() {
		return TMetadataTableRequestParams_PartitionsMetadataParams_DEFAULT
	}
	return p.PartitionsMetadataParams
}

var TMetadataTableRequestParams_MetaCacheStatsParams_DEFAULT *plannodes.TMetaCacheStatsParams

func (p *TMetadataTableRequestParams) GetMetaCacheStatsParams() (v *plannodes.TMetaCacheStatsParams) {
	if !p.IsSetMetaCacheStatsParams() {
		return TMetadataTableRequestParams_MetaCacheStatsParams_DEFAULT
	}
	return p.MetaCacheStatsParams
}
func (p *TMetadataTableRequestParams) SetMetadataType(val *types.TMetadataType) {
	p.MetadataType = val
}
func (p *TMetadataTableRequestParams) SetIcebergMetadataParams(val *plannodes.TIcebergMetadataParams) {
	p.IcebergMetadataParams = val
}
func (p *TMetadataTableRequestParams) SetBackendsMetadataParams(val *plannodes.TBackendsMetadataParams) {
	p.BackendsMetadataParams = val
}
func (p *TMetadataTableRequestParams) SetColumnsName(val []string) {
	p.ColumnsName = val
}
func (p *TMetadataTableRequestParams) SetFrontendsMetadataParams(val *plannodes.TFrontendsMetadataParams) {
	p.FrontendsMetadataParams = val
}
func (p *TMetadataTableRequestParams) SetCurrentUserIdent(val *types.TUserIdentity) {
	p.CurrentUserIdent = val
}
func (p *TMetadataTableRequestParams) SetQueriesMetadataParams(val *plannodes.TQueriesMetadataParams) {
	p.QueriesMetadataParams = val
}
func (p *TMetadataTableRequestParams) SetMaterializedViewsMetadataParams(val *plannodes.TMaterializedViewsMetadataParams) {
	p.MaterializedViewsMetadataParams = val
}
func (p *TMetadataTableRequestParams) SetJobsMetadataParams(val *plannodes.TJobsMetadataParams) {
	p.JobsMetadataParams = val
}
func (p *TMetadataTableRequestParams) SetTasksMetadataParams(val *plannodes.TTasksMetadataParams) {
	p.TasksMetadataParams = val
}
func (p *TMetadataTableRequestParams) SetPartitionsMetadataParams(val *plannodes.TPartitionsMetadataParams) {
	p.PartitionsMetadataParams = val
}
func (p *TMetadataTableRequestParams) SetMetaCacheStatsParams(val *plannodes.TMetaCacheStatsParams) {
	p.MetaCacheStatsParams = val
}

var fieldIDToName_TMetadataTableRequestParams = map[int16]string{
	1:  "metadata_type",
	2:  "iceberg_metadata_params",
	3:  "backends_metadata_params",
	4:  "columns_name",
	5:  "frontends_metadata_params",
	6:  "current_user_ident",
	7:  "queries_metadata_params",
	8:  "materialized_views_metadata_params",
	9:  "jobs_metadata_params",
	10: "tasks_metadata_params",
	11: "partitions_metadata_params",
	12: "meta_cache_stats_params",
}

func (p *TMetadataTableRequestParams) IsSetMetadataType() bool {
	return p.MetadataType != nil
}

func (p *TMetadataTableRequestParams) IsSetIcebergMetadataParams() bool {
	return p.IcebergMetadataParams != nil
}

func (p *TMetadataTableRequestParams) IsSetBackendsMetadataParams() bool {
	return p.BackendsMetadataParams != nil
}

func (p *TMetadataTableRequestParams) IsSetColumnsName() bool {
	return p.ColumnsName != nil
}

func (p *TMetadataTableRequestParams) IsSetFrontendsMetadataParams() bool {
	return p.FrontendsMetadataParams != nil
}

func (p *TMetadataTableRequestParams) IsSetCurrentUserIdent() bool {
	return p.CurrentUserIdent != nil
}

func (p *TMetadataTableRequestParams) IsSetQueriesMetadataParams() bool {
	return p.QueriesMetadataParams != nil
}

func (p *TMetadataTableRequestParams) IsSetMaterializedViewsMetadataParams() bool {
	return p.MaterializedViewsMetadataParams != nil
}

func (p *TMetadataTableRequestParams) IsSetJobsMetadataParams() bool {
	return p.JobsMetadataParams != nil
}

func (p *TMetadataTableRequestParams) IsSetTasksMetadataParams() bool {
	return p.TasksMetadataParams != nil
}

func (p *TMetadataTableRequestParams) IsSetPartitionsMetadataParams() bool {
	return p.PartitionsMetadataParams != nil
}

func (p *TMetadataTableRequestParams) IsSetMetaCacheStatsParams() bool {
	return p.MetaCacheStatsParams != nil
}

func (p *TMetadataTableRequestParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMetadataTableRequestParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TMetadataTableRequestParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *types.TMetadataType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TMetadataType(v)
		_field = &tmp
	}
	p.MetadataType = _field
	return nil
}
func (p *TMetadataTableRequestParams) ReadField2(iprot thrift.TProtocol) error {
	_field := plannodes.NewTIcebergMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.IcebergMetadataParams = _field
	return nil
}
func (p *TMetadataTableRequestParams) ReadField3(iprot thrift.TProtocol) error {
	_field := plannodes.NewTBackendsMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BackendsMetadataParams = _field
	return nil
}
func (p *TMetadataTableRequestParams) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnsName = _field
	return nil
}
func (p *TMetadataTableRequestParams) ReadField5(iprot thrift.TProtocol) error {
	_field := plannodes.NewTFrontendsMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FrontendsMetadataParams = _field
	return nil
}
func (p *TMetadataTableRequestParams) ReadField6(iprot thrift.TProtocol) error {
	_field := types.NewTUserIdentity()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CurrentUserIdent = _field
	return nil
}
func (p *TMetadataTableRequestParams) ReadField7(iprot thrift.TProtocol) error {
	_field := plannodes.NewTQueriesMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueriesMetadataParams = _field
	return nil
}
func (p *TMetadataTableRequestParams) ReadField8(iprot thrift.TProtocol) error {
	_field := plannodes.NewTMaterializedViewsMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MaterializedViewsMetadataParams = _field
	return nil
}
func (p *TMetadataTableRequestParams) ReadField9(iprot thrift.TProtocol) error {
	_field := plannodes.NewTJobsMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.JobsMetadataParams = _field
	return nil
}
func (p *TMetadataTableRequestParams) ReadField10(iprot thrift.TProtocol) error {
	_field := plannodes.NewTTasksMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TasksMetadataParams = _field
	return nil
}
func (p *TMetadataTableRequestParams) ReadField11(iprot thrift.TProtocol) error {
	_field := plannodes.NewTPartitionsMetadataParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PartitionsMetadataParams = _field
	return nil
}
func (p *TMetadataTableRequestParams) ReadField12(iprot thrift.TProtocol) error {
	_field := plannodes.NewTMetaCacheStatsParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MetaCacheStatsParams = _field
	return nil
}

func (p *TMetadataTableRequestParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMetadataTableRequestParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMetadataTableRequestParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetadataType() {
		if err = oprot.WriteFieldBegin("metadata_type", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.MetadataType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMetadataTableRequestParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIcebergMetadataParams() {
		if err = oprot.WriteFieldBegin("iceberg_metadata_params", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.IcebergMetadataParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TMetadataTableRequestParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackendsMetadataParams() {
		if err = oprot.WriteFieldBegin("backends_metadata_params", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BackendsMetadataParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TMetadataTableRequestParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnsName() {
		if err = oprot.WriteFieldBegin("columns_name", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ColumnsName)); err != nil {
			return err
		}
		for _, v := range p.ColumnsName {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TMetadataTableRequestParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetFrontendsMetadataParams() {
		if err = oprot.WriteFieldBegin("frontends_metadata_params", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FrontendsMetadataParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TMetadataTableRequestParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentUserIdent() {
		if err = oprot.WriteFieldBegin("current_user_ident", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CurrentUserIdent.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TMetadataTableRequestParams) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueriesMetadataParams() {
		if err = oprot.WriteFieldBegin("queries_metadata_params", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.QueriesMetadataParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TMetadataTableRequestParams) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaterializedViewsMetadataParams() {
		if err = oprot.WriteFieldBegin("materialized_views_metadata_params", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MaterializedViewsMetadataParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TMetadataTableRequestParams) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobsMetadataParams() {
		if err = oprot.WriteFieldBegin("jobs_metadata_params", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.JobsMetadataParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TMetadataTableRequestParams) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTasksMetadataParams() {
		if err = oprot.WriteFieldBegin("tasks_metadata_params", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TasksMetadataParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TMetadataTableRequestParams) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionsMetadataParams() {
		if err = oprot.WriteFieldBegin("partitions_metadata_params", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PartitionsMetadataParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TMetadataTableRequestParams) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetaCacheStatsParams() {
		if err = oprot.WriteFieldBegin("meta_cache_stats_params", thrift.STRUCT, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MetaCacheStatsParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TMetadataTableRequestParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMetadataTableRequestParams(%+v)", *p)

}

func (p *TMetadataTableRequestParams) DeepEqual(ano *TMetadataTableRequestParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MetadataType) {
		return false
	}
	if !p.Field2DeepEqual(ano.IcebergMetadataParams) {
		return false
	}
	if !p.Field3DeepEqual(ano.BackendsMetadataParams) {
		return false
	}
	if !p.Field4DeepEqual(ano.ColumnsName) {
		return false
	}
	if !p.Field5DeepEqual(ano.FrontendsMetadataParams) {
		return false
	}
	if !p.Field6DeepEqual(ano.CurrentUserIdent) {
		return false
	}
	if !p.Field7DeepEqual(ano.QueriesMetadataParams) {
		return false
	}
	if !p.Field8DeepEqual(ano.MaterializedViewsMetadataParams) {
		return false
	}
	if !p.Field9DeepEqual(ano.JobsMetadataParams) {
		return false
	}
	if !p.Field10DeepEqual(ano.TasksMetadataParams) {
		return false
	}
	if !p.Field11DeepEqual(ano.PartitionsMetadataParams) {
		return false
	}
	if !p.Field12DeepEqual(ano.MetaCacheStatsParams) {
		return false
	}
	return true
}

func (p *TMetadataTableRequestParams) Field1DeepEqual(src *types.TMetadataType) bool {

	if p.MetadataType == src {
		return true
	} else if p.MetadataType == nil || src == nil {
		return false
	}
	if *p.MetadataType != *src {
		return false
	}
	return true
}
func (p *TMetadataTableRequestParams) Field2DeepEqual(src *plannodes.TIcebergMetadataParams) bool {

	if !p.IcebergMetadataParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMetadataTableRequestParams) Field3DeepEqual(src *plannodes.TBackendsMetadataParams) bool {

	if !p.BackendsMetadataParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMetadataTableRequestParams) Field4DeepEqual(src []string) bool {

	if len(p.ColumnsName) != len(src) {
		return false
	}
	for i, v := range p.ColumnsName {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TMetadataTableRequestParams) Field5DeepEqual(src *plannodes.TFrontendsMetadataParams) bool {

	if !p.FrontendsMetadataParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMetadataTableRequestParams) Field6DeepEqual(src *types.TUserIdentity) bool {

	if !p.CurrentUserIdent.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMetadataTableRequestParams) Field7DeepEqual(src *plannodes.TQueriesMetadataParams) bool {

	if !p.QueriesMetadataParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMetadataTableRequestParams) Field8DeepEqual(src *plannodes.TMaterializedViewsMetadataParams) bool {

	if !p.MaterializedViewsMetadataParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMetadataTableRequestParams) Field9DeepEqual(src *plannodes.TJobsMetadataParams) bool {

	if !p.JobsMetadataParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMetadataTableRequestParams) Field10DeepEqual(src *plannodes.TTasksMetadataParams) bool {

	if !p.TasksMetadataParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMetadataTableRequestParams) Field11DeepEqual(src *plannodes.TPartitionsMetadataParams) bool {

	if !p.PartitionsMetadataParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMetadataTableRequestParams) Field12DeepEqual(src *plannodes.TMetaCacheStatsParams) bool {

	if !p.MetaCacheStatsParams.DeepEqual(src) {
		return false
	}
	return true
}

type TSchemaTableRequestParams struct {
	ColumnsName      []string             `thrift:"columns_name,1,optional" frugal:"1,optional,list<string>" json:"columns_name,omitempty"`
	CurrentUserIdent *types.TUserIdentity `thrift:"current_user_ident,2,optional" frugal:"2,optional,types.TUserIdentity" json:"current_user_ident,omitempty"`
	ReplayToOtherFe  *bool                `thrift:"replay_to_other_fe,3,optional" frugal:"3,optional,bool" json:"replay_to_other_fe,omitempty"`
	Catalog          *string              `thrift:"catalog,4,optional" frugal:"4,optional,string" json:"catalog,omitempty"`
	DbId             *int64               `thrift:"dbId,5,optional" frugal:"5,optional,i64" json:"dbId,omitempty"`
}

func NewTSchemaTableRequestParams() *TSchemaTableRequestParams {
	return &TSchemaTableRequestParams{}
}

func (p *TSchemaTableRequestParams) InitDefault() {
}

var TSchemaTableRequestParams_ColumnsName_DEFAULT []string

func (p *TSchemaTableRequestParams) GetColumnsName() (v []string) {
	if !p.IsSetColumnsName() {
		return TSchemaTableRequestParams_ColumnsName_DEFAULT
	}
	return p.ColumnsName
}

var TSchemaTableRequestParams_CurrentUserIdent_DEFAULT *types.TUserIdentity

func (p *TSchemaTableRequestParams) GetCurrentUserIdent() (v *types.TUserIdentity) {
	if !p.IsSetCurrentUserIdent() {
		return TSchemaTableRequestParams_CurrentUserIdent_DEFAULT
	}
	return p.CurrentUserIdent
}

var TSchemaTableRequestParams_ReplayToOtherFe_DEFAULT bool

func (p *TSchemaTableRequestParams) GetReplayToOtherFe() (v bool) {
	if !p.IsSetReplayToOtherFe() {
		return TSchemaTableRequestParams_ReplayToOtherFe_DEFAULT
	}
	return *p.ReplayToOtherFe
}

var TSchemaTableRequestParams_Catalog_DEFAULT string

func (p *TSchemaTableRequestParams) GetCatalog() (v string) {
	if !p.IsSetCatalog() {
		return TSchemaTableRequestParams_Catalog_DEFAULT
	}
	return *p.Catalog
}

var TSchemaTableRequestParams_DbId_DEFAULT int64

func (p *TSchemaTableRequestParams) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TSchemaTableRequestParams_DbId_DEFAULT
	}
	return *p.DbId
}
func (p *TSchemaTableRequestParams) SetColumnsName(val []string) {
	p.ColumnsName = val
}
func (p *TSchemaTableRequestParams) SetCurrentUserIdent(val *types.TUserIdentity) {
	p.CurrentUserIdent = val
}
func (p *TSchemaTableRequestParams) SetReplayToOtherFe(val *bool) {
	p.ReplayToOtherFe = val
}
func (p *TSchemaTableRequestParams) SetCatalog(val *string) {
	p.Catalog = val
}
func (p *TSchemaTableRequestParams) SetDbId(val *int64) {
	p.DbId = val
}

var fieldIDToName_TSchemaTableRequestParams = map[int16]string{
	1: "columns_name",
	2: "current_user_ident",
	3: "replay_to_other_fe",
	4: "catalog",
	5: "dbId",
}

func (p *TSchemaTableRequestParams) IsSetColumnsName() bool {
	return p.ColumnsName != nil
}

func (p *TSchemaTableRequestParams) IsSetCurrentUserIdent() bool {
	return p.CurrentUserIdent != nil
}

func (p *TSchemaTableRequestParams) IsSetReplayToOtherFe() bool {
	return p.ReplayToOtherFe != nil
}

func (p *TSchemaTableRequestParams) IsSetCatalog() bool {
	return p.Catalog != nil
}

func (p *TSchemaTableRequestParams) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TSchemaTableRequestParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TSchemaTableRequestParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TSchemaTableRequestParams) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnsName = _field
	return nil
}
func (p *TSchemaTableRequestParams) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTUserIdentity()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CurrentUserIdent = _field
	return nil
}
func (p *TSchemaTableRequestParams) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReplayToOtherFe = _field
	return nil
}
func (p *TSchemaTableRequestParams) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Catalog = _field
	return nil
}
func (p *TSchemaTableRequestParams) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}

func (p *TSchemaTableRequestParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TSchemaTableRequestParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TSchemaTableRequestParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnsName() {
		if err = oprot.WriteFieldBegin("columns_name", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ColumnsName)); err != nil {
			return err
		}
		for _, v := range p.ColumnsName {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TSchemaTableRequestParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentUserIdent() {
		if err = oprot.WriteFieldBegin("current_user_ident", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CurrentUserIdent.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TSchemaTableRequestParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplayToOtherFe() {
		if err = oprot.WriteFieldBegin("replay_to_other_fe", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ReplayToOtherFe); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TSchemaTableRequestParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalog() {
		if err = oprot.WriteFieldBegin("catalog", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Catalog); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TSchemaTableRequestParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("dbId", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TSchemaTableRequestParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSchemaTableRequestParams(%+v)", *p)

}

func (p *TSchemaTableRequestParams) DeepEqual(ano *TSchemaTableRequestParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnsName) {
		return false
	}
	if !p.Field2DeepEqual(ano.CurrentUserIdent) {
		return false
	}
	if !p.Field3DeepEqual(ano.ReplayToOtherFe) {
		return false
	}
	if !p.Field4DeepEqual(ano.Catalog) {
		return false
	}
	if !p.Field5DeepEqual(ano.DbId) {
		return false
	}
	return true
}

func (p *TSchemaTableRequestParams) Field1DeepEqual(src []string) bool {

	if len(p.ColumnsName) != len(src) {
		return false
	}
	for i, v := range p.ColumnsName {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TSchemaTableRequestParams) Field2DeepEqual(src *types.TUserIdentity) bool {

	if !p.CurrentUserIdent.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TSchemaTableRequestParams) Field3DeepEqual(src *bool) bool {

	if p.ReplayToOtherFe == src {
		return true
	} else if p.ReplayToOtherFe == nil || src == nil {
		return false
	}
	if *p.ReplayToOtherFe != *src {
		return false
	}
	return true
}
func (p *TSchemaTableRequestParams) Field4DeepEqual(src *string) bool {

	if p.Catalog == src {
		return true
	} else if p.Catalog == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Catalog, *src) != 0 {
		return false
	}
	return true
}
func (p *TSchemaTableRequestParams) Field5DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}

type TFetchSchemaTableDataRequest struct {
	ClusterName       *string                      `thrift:"cluster_name,1,optional" frugal:"1,optional,string" json:"cluster_name,omitempty"`
	SchemaTableName   *TSchemaTableName            `thrift:"schema_table_name,2,optional" frugal:"2,optional,TSchemaTableName" json:"schema_table_name,omitempty"`
	MetadaTableParams *TMetadataTableRequestParams `thrift:"metada_table_params,3,optional" frugal:"3,optional,TMetadataTableRequestParams" json:"metada_table_params,omitempty"`
	SchemaTableParams *TSchemaTableRequestParams   `thrift:"schema_table_params,4,optional" frugal:"4,optional,TSchemaTableRequestParams" json:"schema_table_params,omitempty"`
}

func NewTFetchSchemaTableDataRequest() *TFetchSchemaTableDataRequest {
	return &TFetchSchemaTableDataRequest{}
}

func (p *TFetchSchemaTableDataRequest) InitDefault() {
}

var TFetchSchemaTableDataRequest_ClusterName_DEFAULT string

func (p *TFetchSchemaTableDataRequest) GetClusterName() (v string) {
	if !p.IsSetClusterName() {
		return TFetchSchemaTableDataRequest_ClusterName_DEFAULT
	}
	return *p.ClusterName
}

var TFetchSchemaTableDataRequest_SchemaTableName_DEFAULT TSchemaTableName

func (p *TFetchSchemaTableDataRequest) GetSchemaTableName() (v TSchemaTableName) {
	if !p.IsSetSchemaTableName() {
		return TFetchSchemaTableDataRequest_SchemaTableName_DEFAULT
	}
	return *p.SchemaTableName
}

var TFetchSchemaTableDataRequest_MetadaTableParams_DEFAULT *TMetadataTableRequestParams

func (p *TFetchSchemaTableDataRequest) GetMetadaTableParams() (v *TMetadataTableRequestParams) {
	if !p.IsSetMetadaTableParams() {
		return TFetchSchemaTableDataRequest_MetadaTableParams_DEFAULT
	}
	return p.MetadaTableParams
}

var TFetchSchemaTableDataRequest_SchemaTableParams_DEFAULT *TSchemaTableRequestParams

func (p *TFetchSchemaTableDataRequest) GetSchemaTableParams() (v *TSchemaTableRequestParams) {
	if !p.IsSetSchemaTableParams() {
		return TFetchSchemaTableDataRequest_SchemaTableParams_DEFAULT
	}
	return p.SchemaTableParams
}
func (p *TFetchSchemaTableDataRequest) SetClusterName(val *string) {
	p.ClusterName = val
}
func (p *TFetchSchemaTableDataRequest) SetSchemaTableName(val *TSchemaTableName) {
	p.SchemaTableName = val
}
func (p *TFetchSchemaTableDataRequest) SetMetadaTableParams(val *TMetadataTableRequestParams) {
	p.MetadaTableParams = val
}
func (p *TFetchSchemaTableDataRequest) SetSchemaTableParams(val *TSchemaTableRequestParams) {
	p.SchemaTableParams = val
}

var fieldIDToName_TFetchSchemaTableDataRequest = map[int16]string{
	1: "cluster_name",
	2: "schema_table_name",
	3: "metada_table_params",
	4: "schema_table_params",
}

func (p *TFetchSchemaTableDataRequest) IsSetClusterName() bool {
	return p.ClusterName != nil
}

func (p *TFetchSchemaTableDataRequest) IsSetSchemaTableName() bool {
	return p.SchemaTableName != nil
}

func (p *TFetchSchemaTableDataRequest) IsSetMetadaTableParams() bool {
	return p.MetadaTableParams != nil
}

func (p *TFetchSchemaTableDataRequest) IsSetSchemaTableParams() bool {
	return p.SchemaTableParams != nil
}

func (p *TFetchSchemaTableDataRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFetchSchemaTableDataRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TFetchSchemaTableDataRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ClusterName = _field
	return nil
}
func (p *TFetchSchemaTableDataRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *TSchemaTableName
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TSchemaTableName(v)
		_field = &tmp
	}
	p.SchemaTableName = _field
	return nil
}
func (p *TFetchSchemaTableDataRequest) ReadField3(iprot thrift.TProtocol) error {
	_field := NewTMetadataTableRequestParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MetadaTableParams = _field
	return nil
}
func (p *TFetchSchemaTableDataRequest) ReadField4(iprot thrift.TProtocol) error {
	_field := NewTSchemaTableRequestParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SchemaTableParams = _field
	return nil
}

func (p *TFetchSchemaTableDataRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFetchSchemaTableDataRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFetchSchemaTableDataRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetClusterName() {
		if err = oprot.WriteFieldBegin("cluster_name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ClusterName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFetchSchemaTableDataRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaTableName() {
		if err = oprot.WriteFieldBegin("schema_table_name", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.SchemaTableName)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFetchSchemaTableDataRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetadaTableParams() {
		if err = oprot.WriteFieldBegin("metada_table_params", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MetadaTableParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TFetchSchemaTableDataRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaTableParams() {
		if err = oprot.WriteFieldBegin("schema_table_params", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.SchemaTableParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TFetchSchemaTableDataRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFetchSchemaTableDataRequest(%+v)", *p)

}

func (p *TFetchSchemaTableDataRequest) DeepEqual(ano *TFetchSchemaTableDataRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterName) {
		return false
	}
	if !p.Field2DeepEqual(ano.SchemaTableName) {
		return false
	}
	if !p.Field3DeepEqual(ano.MetadaTableParams) {
		return false
	}
	if !p.Field4DeepEqual(ano.SchemaTableParams) {
		return false
	}
	return true
}

func (p *TFetchSchemaTableDataRequest) Field1DeepEqual(src *string) bool {

	if p.ClusterName == src {
		return true
	} else if p.ClusterName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ClusterName, *src) != 0 {
		return false
	}
	return true
}
func (p *TFetchSchemaTableDataRequest) Field2DeepEqual(src *TSchemaTableName) bool {

	if p.SchemaTableName == src {
		return true
	} else if p.SchemaTableName == nil || src == nil {
		return false
	}
	if *p.SchemaTableName != *src {
		return false
	}
	return true
}
func (p *TFetchSchemaTableDataRequest) Field3DeepEqual(src *TMetadataTableRequestParams) bool {

	if !p.MetadaTableParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFetchSchemaTableDataRequest) Field4DeepEqual(src *TSchemaTableRequestParams) bool {

	if !p.SchemaTableParams.DeepEqual(src) {
		return false
	}
	return true
}

type TFetchSchemaTableDataResult_ struct {
	Status    *status.TStatus `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
	DataBatch []*data.TRow    `thrift:"data_batch,2,optional" frugal:"2,optional,list<data.TRow>" json:"data_batch,omitempty"`
}

func NewTFetchSchemaTableDataResult_() *TFetchSchemaTableDataResult_ {
	return &TFetchSchemaTableDataResult_{}
}

func (p *TFetchSchemaTableDataResult_) InitDefault() {
}

var TFetchSchemaTableDataResult__Status_DEFAULT *status.TStatus

func (p *TFetchSchemaTableDataResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TFetchSchemaTableDataResult__Status_DEFAULT
	}
	return p.Status
}

var TFetchSchemaTableDataResult__DataBatch_DEFAULT []*data.TRow

func (p *TFetchSchemaTableDataResult_) GetDataBatch() (v []*data.TRow) {
	if !p.IsSetDataBatch() {
		return TFetchSchemaTableDataResult__DataBatch_DEFAULT
	}
	return p.DataBatch
}
func (p *TFetchSchemaTableDataResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TFetchSchemaTableDataResult_) SetDataBatch(val []*data.TRow) {
	p.DataBatch = val
}

var fieldIDToName_TFetchSchemaTableDataResult_ = map[int16]string{
	1: "status",
	2: "data_batch",
}

func (p *TFetchSchemaTableDataResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TFetchSchemaTableDataResult_) IsSetDataBatch() bool {
	return p.DataBatch != nil
}

func (p *TFetchSchemaTableDataResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFetchSchemaTableDataResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFetchSchemaTableDataResult_[fieldId]))
}

func (p *TFetchSchemaTableDataResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TFetchSchemaTableDataResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*data.TRow, 0, size)
	values := make([]data.TRow, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DataBatch = _field
	return nil
}

func (p *TFetchSchemaTableDataResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFetchSchemaTableDataResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFetchSchemaTableDataResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFetchSchemaTableDataResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataBatch() {
		if err = oprot.WriteFieldBegin("data_batch", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DataBatch)); err != nil {
			return err
		}
		for _, v := range p.DataBatch {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFetchSchemaTableDataResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFetchSchemaTableDataResult_(%+v)", *p)

}

func (p *TFetchSchemaTableDataResult_) DeepEqual(ano *TFetchSchemaTableDataResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.DataBatch) {
		return false
	}
	return true
}

func (p *TFetchSchemaTableDataResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFetchSchemaTableDataResult_) Field2DeepEqual(src []*data.TRow) bool {

	if len(p.DataBatch) != len(src) {
		return false
	}
	for i, v := range p.DataBatch {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TMySqlLoadAcquireTokenResult_ struct {
	Status *status.TStatus `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	Token  *string         `thrift:"token,2,optional" frugal:"2,optional,string" json:"token,omitempty"`
}

func NewTMySqlLoadAcquireTokenResult_() *TMySqlLoadAcquireTokenResult_ {
	return &TMySqlLoadAcquireTokenResult_{}
}

func (p *TMySqlLoadAcquireTokenResult_) InitDefault() {
}

var TMySqlLoadAcquireTokenResult__Status_DEFAULT *status.TStatus

func (p *TMySqlLoadAcquireTokenResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TMySqlLoadAcquireTokenResult__Status_DEFAULT
	}
	return p.Status
}

var TMySqlLoadAcquireTokenResult__Token_DEFAULT string

func (p *TMySqlLoadAcquireTokenResult_) GetToken() (v string) {
	if !p.IsSetToken() {
		return TMySqlLoadAcquireTokenResult__Token_DEFAULT
	}
	return *p.Token
}
func (p *TMySqlLoadAcquireTokenResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TMySqlLoadAcquireTokenResult_) SetToken(val *string) {
	p.Token = val
}

var fieldIDToName_TMySqlLoadAcquireTokenResult_ = map[int16]string{
	1: "status",
	2: "token",
}

func (p *TMySqlLoadAcquireTokenResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TMySqlLoadAcquireTokenResult_) IsSetToken() bool {
	return p.Token != nil
}

func (p *TMySqlLoadAcquireTokenResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMySqlLoadAcquireTokenResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TMySqlLoadAcquireTokenResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TMySqlLoadAcquireTokenResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}

func (p *TMySqlLoadAcquireTokenResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMySqlLoadAcquireTokenResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMySqlLoadAcquireTokenResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMySqlLoadAcquireTokenResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TMySqlLoadAcquireTokenResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMySqlLoadAcquireTokenResult_(%+v)", *p)

}

func (p *TMySqlLoadAcquireTokenResult_) DeepEqual(ano *TMySqlLoadAcquireTokenResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *TMySqlLoadAcquireTokenResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TMySqlLoadAcquireTokenResult_) Field2DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}

type TTabletCooldownInfo struct {
	TabletId          *types.TTabletId  `thrift:"tablet_id,1,optional" frugal:"1,optional,i64" json:"tablet_id,omitempty"`
	CooldownReplicaId *types.TReplicaId `thrift:"cooldown_replica_id,2,optional" frugal:"2,optional,i64" json:"cooldown_replica_id,omitempty"`
	CooldownMetaId    *types.TUniqueId  `thrift:"cooldown_meta_id,3,optional" frugal:"3,optional,types.TUniqueId" json:"cooldown_meta_id,omitempty"`
}

func NewTTabletCooldownInfo() *TTabletCooldownInfo {
	return &TTabletCooldownInfo{}
}

func (p *TTabletCooldownInfo) InitDefault() {
}

var TTabletCooldownInfo_TabletId_DEFAULT types.TTabletId

func (p *TTabletCooldownInfo) GetTabletId() (v types.TTabletId) {
	if !p.IsSetTabletId() {
		return TTabletCooldownInfo_TabletId_DEFAULT
	}
	return *p.TabletId
}

var TTabletCooldownInfo_CooldownReplicaId_DEFAULT types.TReplicaId

func (p *TTabletCooldownInfo) GetCooldownReplicaId() (v types.TReplicaId) {
	if !p.IsSetCooldownReplicaId() {
		return TTabletCooldownInfo_CooldownReplicaId_DEFAULT
	}
	return *p.CooldownReplicaId
}

var TTabletCooldownInfo_CooldownMetaId_DEFAULT *types.TUniqueId

func (p *TTabletCooldownInfo) GetCooldownMetaId() (v *types.TUniqueId) {
	if !p.IsSetCooldownMetaId() {
		return TTabletCooldownInfo_CooldownMetaId_DEFAULT
	}
	return p.CooldownMetaId
}
func (p *TTabletCooldownInfo) SetTabletId(val *types.TTabletId) {
	p.TabletId = val
}
func (p *TTabletCooldownInfo) SetCooldownReplicaId(val *types.TReplicaId) {
	p.CooldownReplicaId = val
}
func (p *TTabletCooldownInfo) SetCooldownMetaId(val *types.TUniqueId) {
	p.CooldownMetaId = val
}

var fieldIDToName_TTabletCooldownInfo = map[int16]string{
	1: "tablet_id",
	2: "cooldown_replica_id",
	3: "cooldown_meta_id",
}

func (p *TTabletCooldownInfo) IsSetTabletId() bool {
	return p.TabletId != nil
}

func (p *TTabletCooldownInfo) IsSetCooldownReplicaId() bool {
	return p.CooldownReplicaId != nil
}

func (p *TTabletCooldownInfo) IsSetCooldownMetaId() bool {
	return p.CooldownMetaId != nil
}

func (p *TTabletCooldownInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletCooldownInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTabletCooldownInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *types.TTabletId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TabletId = _field
	return nil
}
func (p *TTabletCooldownInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *types.TReplicaId
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CooldownReplicaId = _field
	return nil
}
func (p *TTabletCooldownInfo) ReadField3(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CooldownMetaId = _field
	return nil
}

func (p *TTabletCooldownInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTabletCooldownInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTabletCooldownInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletId() {
		if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TabletId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTabletCooldownInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCooldownReplicaId() {
		if err = oprot.WriteFieldBegin("cooldown_replica_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CooldownReplicaId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTabletCooldownInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCooldownMetaId() {
		if err = oprot.WriteFieldBegin("cooldown_meta_id", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CooldownMetaId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTabletCooldownInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTabletCooldownInfo(%+v)", *p)

}

func (p *TTabletCooldownInfo) DeepEqual(ano *TTabletCooldownInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.CooldownReplicaId) {
		return false
	}
	if !p.Field3DeepEqual(ano.CooldownMetaId) {
		return false
	}
	return true
}

func (p *TTabletCooldownInfo) Field1DeepEqual(src *types.TTabletId) bool {

	if p.TabletId == src {
		return true
	} else if p.TabletId == nil || src == nil {
		return false
	}
	if *p.TabletId != *src {
		return false
	}
	return true
}
func (p *TTabletCooldownInfo) Field2DeepEqual(src *types.TReplicaId) bool {

	if p.CooldownReplicaId == src {
		return true
	} else if p.CooldownReplicaId == nil || src == nil {
		return false
	}
	if *p.CooldownReplicaId != *src {
		return false
	}
	return true
}
func (p *TTabletCooldownInfo) Field3DeepEqual(src *types.TUniqueId) bool {

	if !p.CooldownMetaId.DeepEqual(src) {
		return false
	}
	return true
}

type TConfirmUnusedRemoteFilesRequest struct {
	ConfirmList []*TTabletCooldownInfo `thrift:"confirm_list,1,optional" frugal:"1,optional,list<TTabletCooldownInfo>" json:"confirm_list,omitempty"`
}

func NewTConfirmUnusedRemoteFilesRequest() *TConfirmUnusedRemoteFilesRequest {
	return &TConfirmUnusedRemoteFilesRequest{}
}

func (p *TConfirmUnusedRemoteFilesRequest) InitDefault() {
}

var TConfirmUnusedRemoteFilesRequest_ConfirmList_DEFAULT []*TTabletCooldownInfo

func (p *TConfirmUnusedRemoteFilesRequest) GetConfirmList() (v []*TTabletCooldownInfo) {
	if !p.IsSetConfirmList() {
		return TConfirmUnusedRemoteFilesRequest_ConfirmList_DEFAULT
	}
	return p.ConfirmList
}
func (p *TConfirmUnusedRemoteFilesRequest) SetConfirmList(val []*TTabletCooldownInfo) {
	p.ConfirmList = val
}

var fieldIDToName_TConfirmUnusedRemoteFilesRequest = map[int16]string{
	1: "confirm_list",
}

func (p *TConfirmUnusedRemoteFilesRequest) IsSetConfirmList() bool {
	return p.ConfirmList != nil
}

func (p *TConfirmUnusedRemoteFilesRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TConfirmUnusedRemoteFilesRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TConfirmUnusedRemoteFilesRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTabletCooldownInfo, 0, size)
	values := make([]TTabletCooldownInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ConfirmList = _field
	return nil
}

func (p *TConfirmUnusedRemoteFilesRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TConfirmUnusedRemoteFilesRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TConfirmUnusedRemoteFilesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfirmList() {
		if err = oprot.WriteFieldBegin("confirm_list", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ConfirmList)); err != nil {
			return err
		}
		for _, v := range p.ConfirmList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TConfirmUnusedRemoteFilesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TConfirmUnusedRemoteFilesRequest(%+v)", *p)

}

func (p *TConfirmUnusedRemoteFilesRequest) DeepEqual(ano *TConfirmUnusedRemoteFilesRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ConfirmList) {
		return false
	}
	return true
}

func (p *TConfirmUnusedRemoteFilesRequest) Field1DeepEqual(src []*TTabletCooldownInfo) bool {

	if len(p.ConfirmList) != len(src) {
		return false
	}
	for i, v := range p.ConfirmList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TConfirmUnusedRemoteFilesResult_ struct {
	ConfirmedTablets []types.TTabletId `thrift:"confirmed_tablets,1,optional" frugal:"1,optional,list<i64>" json:"confirmed_tablets,omitempty"`
}

func NewTConfirmUnusedRemoteFilesResult_() *TConfirmUnusedRemoteFilesResult_ {
	return &TConfirmUnusedRemoteFilesResult_{}
}

func (p *TConfirmUnusedRemoteFilesResult_) InitDefault() {
}

var TConfirmUnusedRemoteFilesResult__ConfirmedTablets_DEFAULT []types.TTabletId

func (p *TConfirmUnusedRemoteFilesResult_) GetConfirmedTablets() (v []types.TTabletId) {
	if !p.IsSetConfirmedTablets() {
		return TConfirmUnusedRemoteFilesResult__ConfirmedTablets_DEFAULT
	}
	return p.ConfirmedTablets
}
func (p *TConfirmUnusedRemoteFilesResult_) SetConfirmedTablets(val []types.TTabletId) {
	p.ConfirmedTablets = val
}

var fieldIDToName_TConfirmUnusedRemoteFilesResult_ = map[int16]string{
	1: "confirmed_tablets",
}

func (p *TConfirmUnusedRemoteFilesResult_) IsSetConfirmedTablets() bool {
	return p.ConfirmedTablets != nil
}

func (p *TConfirmUnusedRemoteFilesResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TConfirmUnusedRemoteFilesResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TConfirmUnusedRemoteFilesResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TTabletId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TTabletId
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ConfirmedTablets = _field
	return nil
}

func (p *TConfirmUnusedRemoteFilesResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TConfirmUnusedRemoteFilesResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TConfirmUnusedRemoteFilesResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfirmedTablets() {
		if err = oprot.WriteFieldBegin("confirmed_tablets", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ConfirmedTablets)); err != nil {
			return err
		}
		for _, v := range p.ConfirmedTablets {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TConfirmUnusedRemoteFilesResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TConfirmUnusedRemoteFilesResult_(%+v)", *p)

}

func (p *TConfirmUnusedRemoteFilesResult_) DeepEqual(ano *TConfirmUnusedRemoteFilesResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ConfirmedTablets) {
		return false
	}
	return true
}

func (p *TConfirmUnusedRemoteFilesResult_) Field1DeepEqual(src []types.TTabletId) bool {

	if len(p.ConfirmedTablets) != len(src) {
		return false
	}
	for i, v := range p.ConfirmedTablets {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type TPrivilegeCtrl struct {
	PrivHier TPrivilegeHier `thrift:"priv_hier,1,required" frugal:"1,required,TPrivilegeHier" json:"priv_hier"`
	Ctl      *string        `thrift:"ctl,2,optional" frugal:"2,optional,string" json:"ctl,omitempty"`
	Db       *string        `thrift:"db,3,optional" frugal:"3,optional,string" json:"db,omitempty"`
	Tbl      *string        `thrift:"tbl,4,optional" frugal:"4,optional,string" json:"tbl,omitempty"`
	Cols     []string       `thrift:"cols,5,optional" frugal:"5,optional,set<string>" json:"cols,omitempty"`
	Res      *string        `thrift:"res,6,optional" frugal:"6,optional,string" json:"res,omitempty"`
}

func NewTPrivilegeCtrl() *TPrivilegeCtrl {
	return &TPrivilegeCtrl{}
}

func (p *TPrivilegeCtrl) InitDefault() {
}

func (p *TPrivilegeCtrl) GetPrivHier() (v TPrivilegeHier) {
	return p.PrivHier
}

var TPrivilegeCtrl_Ctl_DEFAULT string

func (p *TPrivilegeCtrl) GetCtl() (v string) {
	if !p.IsSetCtl() {
		return TPrivilegeCtrl_Ctl_DEFAULT
	}
	return *p.Ctl
}

var TPrivilegeCtrl_Db_DEFAULT string

func (p *TPrivilegeCtrl) GetDb() (v string) {
	if !p.IsSetDb() {
		return TPrivilegeCtrl_Db_DEFAULT
	}
	return *p.Db
}

var TPrivilegeCtrl_Tbl_DEFAULT string

func (p *TPrivilegeCtrl) GetTbl() (v string) {
	if !p.IsSetTbl() {
		return TPrivilegeCtrl_Tbl_DEFAULT
	}
	return *p.Tbl
}

var TPrivilegeCtrl_Cols_DEFAULT []string

func (p *TPrivilegeCtrl) GetCols() (v []string) {
	if !p.IsSetCols() {
		return TPrivilegeCtrl_Cols_DEFAULT
	}
	return p.Cols
}

var TPrivilegeCtrl_Res_DEFAULT string

func (p *TPrivilegeCtrl) GetRes() (v string) {
	if !p.IsSetRes() {
		return TPrivilegeCtrl_Res_DEFAULT
	}
	return *p.Res
}
func (p *TPrivilegeCtrl) SetPrivHier(val TPrivilegeHier) {
	p.PrivHier = val
}
func (p *TPrivilegeCtrl) SetCtl(val *string) {
	p.Ctl = val
}
func (p *TPrivilegeCtrl) SetDb(val *string) {
	p.Db = val
}
func (p *TPrivilegeCtrl) SetTbl(val *string) {
	p.Tbl = val
}
func (p *TPrivilegeCtrl) SetCols(val []string) {
	p.Cols = val
}
func (p *TPrivilegeCtrl) SetRes(val *string) {
	p.Res = val
}

var fieldIDToName_TPrivilegeCtrl = map[int16]string{
	1: "priv_hier",
	2: "ctl",
	3: "db",
	4: "tbl",
	5: "cols",
	6: "res",
}

func (p *TPrivilegeCtrl) IsSetCtl() bool {
	return p.Ctl != nil
}

func (p *TPrivilegeCtrl) IsSetDb() bool {
	return p.Db != nil
}

func (p *TPrivilegeCtrl) IsSetTbl() bool {
	return p.Tbl != nil
}

func (p *TPrivilegeCtrl) IsSetCols() bool {
	return p.Cols != nil
}

func (p *TPrivilegeCtrl) IsSetRes() bool {
	return p.Res != nil
}

func (p *TPrivilegeCtrl) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPrivHier bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPrivHier = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPrivHier {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPrivilegeCtrl[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPrivilegeCtrl[fieldId]))
}

func (p *TPrivilegeCtrl) ReadField1(iprot thrift.TProtocol) error {

	var _field TPrivilegeHier
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TPrivilegeHier(v)
	}
	p.PrivHier = _field
	return nil
}
func (p *TPrivilegeCtrl) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Ctl = _field
	return nil
}
func (p *TPrivilegeCtrl) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Db = _field
	return nil
}
func (p *TPrivilegeCtrl) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Tbl = _field
	return nil
}
func (p *TPrivilegeCtrl) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	p.Cols = _field
	return nil
}
func (p *TPrivilegeCtrl) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Res = _field
	return nil
}

func (p *TPrivilegeCtrl) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPrivilegeCtrl"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPrivilegeCtrl) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("priv_hier", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.PrivHier)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPrivilegeCtrl) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCtl() {
		if err = oprot.WriteFieldBegin("ctl", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Ctl); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPrivilegeCtrl) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDb() {
		if err = oprot.WriteFieldBegin("db", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Db); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPrivilegeCtrl) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTbl() {
		if err = oprot.WriteFieldBegin("tbl", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Tbl); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TPrivilegeCtrl) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCols() {
		if err = oprot.WriteFieldBegin("cols", thrift.SET, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.Cols)); err != nil {
			return err
		}
		for i := 0; i < len(p.Cols); i++ {
			for j := i + 1; j < len(p.Cols); j++ {
				if func(tgt, src string) bool {
					if strings.Compare(tgt, src) != 0 {
						return false
					}
					return true
				}(p.Cols[i], p.Cols[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Cols[i]))
				}
			}
		}
		for _, v := range p.Cols {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TPrivilegeCtrl) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetRes() {
		if err = oprot.WriteFieldBegin("res", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Res); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TPrivilegeCtrl) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPrivilegeCtrl(%+v)", *p)

}

func (p *TPrivilegeCtrl) DeepEqual(ano *TPrivilegeCtrl) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PrivHier) {
		return false
	}
	if !p.Field2DeepEqual(ano.Ctl) {
		return false
	}
	if !p.Field3DeepEqual(ano.Db) {
		return false
	}
	if !p.Field4DeepEqual(ano.Tbl) {
		return false
	}
	if !p.Field5DeepEqual(ano.Cols) {
		return false
	}
	if !p.Field6DeepEqual(ano.Res) {
		return false
	}
	return true
}

func (p *TPrivilegeCtrl) Field1DeepEqual(src TPrivilegeHier) bool {

	if p.PrivHier != src {
		return false
	}
	return true
}
func (p *TPrivilegeCtrl) Field2DeepEqual(src *string) bool {

	if p.Ctl == src {
		return true
	} else if p.Ctl == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Ctl, *src) != 0 {
		return false
	}
	return true
}
func (p *TPrivilegeCtrl) Field3DeepEqual(src *string) bool {

	if p.Db == src {
		return true
	} else if p.Db == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Db, *src) != 0 {
		return false
	}
	return true
}
func (p *TPrivilegeCtrl) Field4DeepEqual(src *string) bool {

	if p.Tbl == src {
		return true
	} else if p.Tbl == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Tbl, *src) != 0 {
		return false
	}
	return true
}
func (p *TPrivilegeCtrl) Field5DeepEqual(src []string) bool {

	if len(p.Cols) != len(src) {
		return false
	}
	for i, v := range p.Cols {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TPrivilegeCtrl) Field6DeepEqual(src *string) bool {

	if p.Res == src {
		return true
	} else if p.Res == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Res, *src) != 0 {
		return false
	}
	return true
}

type TCheckAuthRequest struct {
	Cluster            *string         `thrift:"cluster,1,optional" frugal:"1,optional,string" json:"cluster,omitempty"`
	User               string          `thrift:"user,2,required" frugal:"2,required,string" json:"user"`
	Passwd             string          `thrift:"passwd,3,required" frugal:"3,required,string" json:"passwd"`
	UserIp             *string         `thrift:"user_ip,4,optional" frugal:"4,optional,string" json:"user_ip,omitempty"`
	PrivCtrl           *TPrivilegeCtrl `thrift:"priv_ctrl,5,optional" frugal:"5,optional,TPrivilegeCtrl" json:"priv_ctrl,omitempty"`
	PrivType           *TPrivilegeType `thrift:"priv_type,6,optional" frugal:"6,optional,TPrivilegeType" json:"priv_type,omitempty"`
	ThriftRpcTimeoutMs *int64          `thrift:"thrift_rpc_timeout_ms,7,optional" frugal:"7,optional,i64" json:"thrift_rpc_timeout_ms,omitempty"`
}

func NewTCheckAuthRequest() *TCheckAuthRequest {
	return &TCheckAuthRequest{}
}

func (p *TCheckAuthRequest) InitDefault() {
}

var TCheckAuthRequest_Cluster_DEFAULT string

func (p *TCheckAuthRequest) GetCluster() (v string) {
	if !p.IsSetCluster() {
		return TCheckAuthRequest_Cluster_DEFAULT
	}
	return *p.Cluster
}

func (p *TCheckAuthRequest) GetUser() (v string) {
	return p.User
}

func (p *TCheckAuthRequest) GetPasswd() (v string) {
	return p.Passwd
}

var TCheckAuthRequest_UserIp_DEFAULT string

func (p *TCheckAuthRequest) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TCheckAuthRequest_UserIp_DEFAULT
	}
	return *p.UserIp
}

var TCheckAuthRequest_PrivCtrl_DEFAULT *TPrivilegeCtrl

func (p *TCheckAuthRequest) GetPrivCtrl() (v *TPrivilegeCtrl) {
	if !p.IsSetPrivCtrl() {
		return TCheckAuthRequest_PrivCtrl_DEFAULT
	}
	return p.PrivCtrl
}

var TCheckAuthRequest_PrivType_DEFAULT TPrivilegeType

func (p *TCheckAuthRequest) GetPrivType() (v TPrivilegeType) {
	if !p.IsSetPrivType() {
		return TCheckAuthRequest_PrivType_DEFAULT
	}
	return *p.PrivType
}

var TCheckAuthRequest_ThriftRpcTimeoutMs_DEFAULT int64

func (p *TCheckAuthRequest) GetThriftRpcTimeoutMs() (v int64) {
	if !p.IsSetThriftRpcTimeoutMs() {
		return TCheckAuthRequest_ThriftRpcTimeoutMs_DEFAULT
	}
	return *p.ThriftRpcTimeoutMs
}
func (p *TCheckAuthRequest) SetCluster(val *string) {
	p.Cluster = val
}
func (p *TCheckAuthRequest) SetUser(val string) {
	p.User = val
}
func (p *TCheckAuthRequest) SetPasswd(val string) {
	p.Passwd = val
}
func (p *TCheckAuthRequest) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TCheckAuthRequest) SetPrivCtrl(val *TPrivilegeCtrl) {
	p.PrivCtrl = val
}
func (p *TCheckAuthRequest) SetPrivType(val *TPrivilegeType) {
	p.PrivType = val
}
func (p *TCheckAuthRequest) SetThriftRpcTimeoutMs(val *int64) {
	p.ThriftRpcTimeoutMs = val
}

var fieldIDToName_TCheckAuthRequest = map[int16]string{
	1: "cluster",
	2: "user",
	3: "passwd",
	4: "user_ip",
	5: "priv_ctrl",
	6: "priv_type",
	7: "thrift_rpc_timeout_ms",
}

func (p *TCheckAuthRequest) IsSetCluster() bool {
	return p.Cluster != nil
}

func (p *TCheckAuthRequest) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TCheckAuthRequest) IsSetPrivCtrl() bool {
	return p.PrivCtrl != nil
}

func (p *TCheckAuthRequest) IsSetPrivType() bool {
	return p.PrivType != nil
}

func (p *TCheckAuthRequest) IsSetThriftRpcTimeoutMs() bool {
	return p.ThriftRpcTimeoutMs != nil
}

func (p *TCheckAuthRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUser bool = false
	var issetPasswd bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUser = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPasswd = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUser {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPasswd {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCheckAuthRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCheckAuthRequest[fieldId]))
}

func (p *TCheckAuthRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cluster = _field
	return nil
}
func (p *TCheckAuthRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.User = _field
	return nil
}
func (p *TCheckAuthRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Passwd = _field
	return nil
}
func (p *TCheckAuthRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TCheckAuthRequest) ReadField5(iprot thrift.TProtocol) error {
	_field := NewTPrivilegeCtrl()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PrivCtrl = _field
	return nil
}
func (p *TCheckAuthRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *TPrivilegeType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TPrivilegeType(v)
		_field = &tmp
	}
	p.PrivType = _field
	return nil
}
func (p *TCheckAuthRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ThriftRpcTimeoutMs = _field
	return nil
}

func (p *TCheckAuthRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCheckAuthRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCheckAuthRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCluster() {
		if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCheckAuthRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.User); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCheckAuthRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Passwd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TCheckAuthRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TCheckAuthRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivCtrl() {
		if err = oprot.WriteFieldBegin("priv_ctrl", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PrivCtrl.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TCheckAuthRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivType() {
		if err = oprot.WriteFieldBegin("priv_type", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.PrivType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TCheckAuthRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetThriftRpcTimeoutMs() {
		if err = oprot.WriteFieldBegin("thrift_rpc_timeout_ms", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ThriftRpcTimeoutMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TCheckAuthRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCheckAuthRequest(%+v)", *p)

}

func (p *TCheckAuthRequest) DeepEqual(ano *TCheckAuthRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field4DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field5DeepEqual(ano.PrivCtrl) {
		return false
	}
	if !p.Field6DeepEqual(ano.PrivType) {
		return false
	}
	if !p.Field7DeepEqual(ano.ThriftRpcTimeoutMs) {
		return false
	}
	return true
}

func (p *TCheckAuthRequest) Field1DeepEqual(src *string) bool {

	if p.Cluster == src {
		return true
	} else if p.Cluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TCheckAuthRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.User, src) != 0 {
		return false
	}
	return true
}
func (p *TCheckAuthRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Passwd, src) != 0 {
		return false
	}
	return true
}
func (p *TCheckAuthRequest) Field4DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TCheckAuthRequest) Field5DeepEqual(src *TPrivilegeCtrl) bool {

	if !p.PrivCtrl.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TCheckAuthRequest) Field6DeepEqual(src *TPrivilegeType) bool {

	if p.PrivType == src {
		return true
	} else if p.PrivType == nil || src == nil {
		return false
	}
	if *p.PrivType != *src {
		return false
	}
	return true
}
func (p *TCheckAuthRequest) Field7DeepEqual(src *int64) bool {

	if p.ThriftRpcTimeoutMs == src {
		return true
	} else if p.ThriftRpcTimeoutMs == nil || src == nil {
		return false
	}
	if *p.ThriftRpcTimeoutMs != *src {
		return false
	}
	return true
}

type TCheckAuthResult_ struct {
	Status *status.TStatus `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
}

func NewTCheckAuthResult_() *TCheckAuthResult_ {
	return &TCheckAuthResult_{}
}

func (p *TCheckAuthResult_) InitDefault() {
}

var TCheckAuthResult__Status_DEFAULT *status.TStatus

func (p *TCheckAuthResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TCheckAuthResult__Status_DEFAULT
	}
	return p.Status
}
func (p *TCheckAuthResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}

var fieldIDToName_TCheckAuthResult_ = map[int16]string{
	1: "status",
}

func (p *TCheckAuthResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TCheckAuthResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCheckAuthResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCheckAuthResult_[fieldId]))
}

func (p *TCheckAuthResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}

func (p *TCheckAuthResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCheckAuthResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCheckAuthResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCheckAuthResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCheckAuthResult_(%+v)", *p)

}

func (p *TCheckAuthResult_) DeepEqual(ano *TCheckAuthResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *TCheckAuthResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type TGetQueryStatsRequest struct {
	Type       *TQueryStatsType `thrift:"type,1,optional" frugal:"1,optional,TQueryStatsType" json:"type,omitempty"`
	Catalog    *string          `thrift:"catalog,2,optional" frugal:"2,optional,string" json:"catalog,omitempty"`
	Db         *string          `thrift:"db,3,optional" frugal:"3,optional,string" json:"db,omitempty"`
	Tbl        *string          `thrift:"tbl,4,optional" frugal:"4,optional,string" json:"tbl,omitempty"`
	ReplicaId  *int64           `thrift:"replica_id,5,optional" frugal:"5,optional,i64" json:"replica_id,omitempty"`
	ReplicaIds []int64          `thrift:"replica_ids,6,optional" frugal:"6,optional,list<i64>" json:"replica_ids,omitempty"`
}

func NewTGetQueryStatsRequest() *TGetQueryStatsRequest {
	return &TGetQueryStatsRequest{}
}

func (p *TGetQueryStatsRequest) InitDefault() {
}

var TGetQueryStatsRequest_Type_DEFAULT TQueryStatsType

func (p *TGetQueryStatsRequest) GetType() (v TQueryStatsType) {
	if !p.IsSetType() {
		return TGetQueryStatsRequest_Type_DEFAULT
	}
	return *p.Type
}

var TGetQueryStatsRequest_Catalog_DEFAULT string

func (p *TGetQueryStatsRequest) GetCatalog() (v string) {
	if !p.IsSetCatalog() {
		return TGetQueryStatsRequest_Catalog_DEFAULT
	}
	return *p.Catalog
}

var TGetQueryStatsRequest_Db_DEFAULT string

func (p *TGetQueryStatsRequest) GetDb() (v string) {
	if !p.IsSetDb() {
		return TGetQueryStatsRequest_Db_DEFAULT
	}
	return *p.Db
}

var TGetQueryStatsRequest_Tbl_DEFAULT string

func (p *TGetQueryStatsRequest) GetTbl() (v string) {
	if !p.IsSetTbl() {
		return TGetQueryStatsRequest_Tbl_DEFAULT
	}
	return *p.Tbl
}

var TGetQueryStatsRequest_ReplicaId_DEFAULT int64

func (p *TGetQueryStatsRequest) GetReplicaId() (v int64) {
	if !p.IsSetReplicaId() {
		return TGetQueryStatsRequest_ReplicaId_DEFAULT
	}
	return *p.ReplicaId
}

var TGetQueryStatsRequest_ReplicaIds_DEFAULT []int64

func (p *TGetQueryStatsRequest) GetReplicaIds() (v []int64) {
	if !p.IsSetReplicaIds() {
		return TGetQueryStatsRequest_ReplicaIds_DEFAULT
	}
	return p.ReplicaIds
}
func (p *TGetQueryStatsRequest) SetType(val *TQueryStatsType) {
	p.Type = val
}
func (p *TGetQueryStatsRequest) SetCatalog(val *string) {
	p.Catalog = val
}
func (p *TGetQueryStatsRequest) SetDb(val *string) {
	p.Db = val
}
func (p *TGetQueryStatsRequest) SetTbl(val *string) {
	p.Tbl = val
}
func (p *TGetQueryStatsRequest) SetReplicaId(val *int64) {
	p.ReplicaId = val
}
func (p *TGetQueryStatsRequest) SetReplicaIds(val []int64) {
	p.ReplicaIds = val
}

var fieldIDToName_TGetQueryStatsRequest = map[int16]string{
	1: "type",
	2: "catalog",
	3: "db",
	4: "tbl",
	5: "replica_id",
	6: "replica_ids",
}

func (p *TGetQueryStatsRequest) IsSetType() bool {
	return p.Type != nil
}

func (p *TGetQueryStatsRequest) IsSetCatalog() bool {
	return p.Catalog != nil
}

func (p *TGetQueryStatsRequest) IsSetDb() bool {
	return p.Db != nil
}

func (p *TGetQueryStatsRequest) IsSetTbl() bool {
	return p.Tbl != nil
}

func (p *TGetQueryStatsRequest) IsSetReplicaId() bool {
	return p.ReplicaId != nil
}

func (p *TGetQueryStatsRequest) IsSetReplicaIds() bool {
	return p.ReplicaIds != nil
}

func (p *TGetQueryStatsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetQueryStatsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetQueryStatsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *TQueryStatsType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TQueryStatsType(v)
		_field = &tmp
	}
	p.Type = _field
	return nil
}
func (p *TGetQueryStatsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Catalog = _field
	return nil
}
func (p *TGetQueryStatsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Db = _field
	return nil
}
func (p *TGetQueryStatsRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Tbl = _field
	return nil
}
func (p *TGetQueryStatsRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReplicaId = _field
	return nil
}
func (p *TGetQueryStatsRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ReplicaIds = _field
	return nil
}

func (p *TGetQueryStatsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetQueryStatsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetQueryStatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetQueryStatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalog() {
		if err = oprot.WriteFieldBegin("catalog", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Catalog); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetQueryStatsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDb() {
		if err = oprot.WriteFieldBegin("db", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Db); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetQueryStatsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTbl() {
		if err = oprot.WriteFieldBegin("tbl", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Tbl); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TGetQueryStatsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicaId() {
		if err = oprot.WriteFieldBegin("replica_id", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ReplicaId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TGetQueryStatsRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicaIds() {
		if err = oprot.WriteFieldBegin("replica_ids", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ReplicaIds)); err != nil {
			return err
		}
		for _, v := range p.ReplicaIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TGetQueryStatsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetQueryStatsRequest(%+v)", *p)

}

func (p *TGetQueryStatsRequest) DeepEqual(ano *TGetQueryStatsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.Catalog) {
		return false
	}
	if !p.Field3DeepEqual(ano.Db) {
		return false
	}
	if !p.Field4DeepEqual(ano.Tbl) {
		return false
	}
	if !p.Field5DeepEqual(ano.ReplicaId) {
		return false
	}
	if !p.Field6DeepEqual(ano.ReplicaIds) {
		return false
	}
	return true
}

func (p *TGetQueryStatsRequest) Field1DeepEqual(src *TQueryStatsType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if *p.Type != *src {
		return false
	}
	return true
}
func (p *TGetQueryStatsRequest) Field2DeepEqual(src *string) bool {

	if p.Catalog == src {
		return true
	} else if p.Catalog == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Catalog, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetQueryStatsRequest) Field3DeepEqual(src *string) bool {

	if p.Db == src {
		return true
	} else if p.Db == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Db, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetQueryStatsRequest) Field4DeepEqual(src *string) bool {

	if p.Tbl == src {
		return true
	} else if p.Tbl == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Tbl, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetQueryStatsRequest) Field5DeepEqual(src *int64) bool {

	if p.ReplicaId == src {
		return true
	} else if p.ReplicaId == nil || src == nil {
		return false
	}
	if *p.ReplicaId != *src {
		return false
	}
	return true
}
func (p *TGetQueryStatsRequest) Field6DeepEqual(src []int64) bool {

	if len(p.ReplicaIds) != len(src) {
		return false
	}
	for i, v := range p.ReplicaIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type TTableQueryStats struct {
	Field       *string `thrift:"field,1,optional" frugal:"1,optional,string" json:"field,omitempty"`
	QueryStats  *int64  `thrift:"query_stats,2,optional" frugal:"2,optional,i64" json:"query_stats,omitempty"`
	FilterStats *int64  `thrift:"filter_stats,3,optional" frugal:"3,optional,i64" json:"filter_stats,omitempty"`
}

func NewTTableQueryStats() *TTableQueryStats {
	return &TTableQueryStats{}
}

func (p *TTableQueryStats) InitDefault() {
}

var TTableQueryStats_Field_DEFAULT string

func (p *TTableQueryStats) GetField() (v string) {
	if !p.IsSetField() {
		return TTableQueryStats_Field_DEFAULT
	}
	return *p.Field
}

var TTableQueryStats_QueryStats_DEFAULT int64

func (p *TTableQueryStats) GetQueryStats() (v int64) {
	if !p.IsSetQueryStats() {
		return TTableQueryStats_QueryStats_DEFAULT
	}
	return *p.QueryStats
}

var TTableQueryStats_FilterStats_DEFAULT int64

func (p *TTableQueryStats) GetFilterStats() (v int64) {
	if !p.IsSetFilterStats() {
		return TTableQueryStats_FilterStats_DEFAULT
	}
	return *p.FilterStats
}
func (p *TTableQueryStats) SetField(val *string) {
	p.Field = val
}
func (p *TTableQueryStats) SetQueryStats(val *int64) {
	p.QueryStats = val
}
func (p *TTableQueryStats) SetFilterStats(val *int64) {
	p.FilterStats = val
}

var fieldIDToName_TTableQueryStats = map[int16]string{
	1: "field",
	2: "query_stats",
	3: "filter_stats",
}

func (p *TTableQueryStats) IsSetField() bool {
	return p.Field != nil
}

func (p *TTableQueryStats) IsSetQueryStats() bool {
	return p.QueryStats != nil
}

func (p *TTableQueryStats) IsSetFilterStats() bool {
	return p.FilterStats != nil
}

func (p *TTableQueryStats) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTableQueryStats[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTableQueryStats) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Field = _field
	return nil
}
func (p *TTableQueryStats) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.QueryStats = _field
	return nil
}
func (p *TTableQueryStats) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FilterStats = _field
	return nil
}

func (p *TTableQueryStats) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTableQueryStats"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTableQueryStats) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetField() {
		if err = oprot.WriteFieldBegin("field", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Field); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTableQueryStats) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryStats() {
		if err = oprot.WriteFieldBegin("query_stats", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.QueryStats); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTableQueryStats) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterStats() {
		if err = oprot.WriteFieldBegin("filter_stats", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.FilterStats); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTableQueryStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTableQueryStats(%+v)", *p)

}

func (p *TTableQueryStats) DeepEqual(ano *TTableQueryStats) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Field) {
		return false
	}
	if !p.Field2DeepEqual(ano.QueryStats) {
		return false
	}
	if !p.Field3DeepEqual(ano.FilterStats) {
		return false
	}
	return true
}

func (p *TTableQueryStats) Field1DeepEqual(src *string) bool {

	if p.Field == src {
		return true
	} else if p.Field == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Field, *src) != 0 {
		return false
	}
	return true
}
func (p *TTableQueryStats) Field2DeepEqual(src *int64) bool {

	if p.QueryStats == src {
		return true
	} else if p.QueryStats == nil || src == nil {
		return false
	}
	if *p.QueryStats != *src {
		return false
	}
	return true
}
func (p *TTableQueryStats) Field3DeepEqual(src *int64) bool {

	if p.FilterStats == src {
		return true
	} else if p.FilterStats == nil || src == nil {
		return false
	}
	if *p.FilterStats != *src {
		return false
	}
	return true
}

type TTableIndexQueryStats struct {
	IndexName  *string             `thrift:"index_name,1,optional" frugal:"1,optional,string" json:"index_name,omitempty"`
	TableStats []*TTableQueryStats `thrift:"table_stats,2,optional" frugal:"2,optional,list<TTableQueryStats>" json:"table_stats,omitempty"`
}

func NewTTableIndexQueryStats() *TTableIndexQueryStats {
	return &TTableIndexQueryStats{}
}

func (p *TTableIndexQueryStats) InitDefault() {
}

var TTableIndexQueryStats_IndexName_DEFAULT string

func (p *TTableIndexQueryStats) GetIndexName() (v string) {
	if !p.IsSetIndexName() {
		return TTableIndexQueryStats_IndexName_DEFAULT
	}
	return *p.IndexName
}

var TTableIndexQueryStats_TableStats_DEFAULT []*TTableQueryStats

func (p *TTableIndexQueryStats) GetTableStats() (v []*TTableQueryStats) {
	if !p.IsSetTableStats() {
		return TTableIndexQueryStats_TableStats_DEFAULT
	}
	return p.TableStats
}
func (p *TTableIndexQueryStats) SetIndexName(val *string) {
	p.IndexName = val
}
func (p *TTableIndexQueryStats) SetTableStats(val []*TTableQueryStats) {
	p.TableStats = val
}

var fieldIDToName_TTableIndexQueryStats = map[int16]string{
	1: "index_name",
	2: "table_stats",
}

func (p *TTableIndexQueryStats) IsSetIndexName() bool {
	return p.IndexName != nil
}

func (p *TTableIndexQueryStats) IsSetTableStats() bool {
	return p.TableStats != nil
}

func (p *TTableIndexQueryStats) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTableIndexQueryStats[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTableIndexQueryStats) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IndexName = _field
	return nil
}
func (p *TTableIndexQueryStats) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTableQueryStats, 0, size)
	values := make([]TTableQueryStats, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TableStats = _field
	return nil
}

func (p *TTableIndexQueryStats) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTableIndexQueryStats"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTableIndexQueryStats) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndexName() {
		if err = oprot.WriteFieldBegin("index_name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.IndexName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTableIndexQueryStats) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableStats() {
		if err = oprot.WriteFieldBegin("table_stats", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TableStats)); err != nil {
			return err
		}
		for _, v := range p.TableStats {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTableIndexQueryStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTableIndexQueryStats(%+v)", *p)

}

func (p *TTableIndexQueryStats) DeepEqual(ano *TTableIndexQueryStats) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IndexName) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableStats) {
		return false
	}
	return true
}

func (p *TTableIndexQueryStats) Field1DeepEqual(src *string) bool {

	if p.IndexName == src {
		return true
	} else if p.IndexName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.IndexName, *src) != 0 {
		return false
	}
	return true
}
func (p *TTableIndexQueryStats) Field2DeepEqual(src []*TTableQueryStats) bool {

	if len(p.TableStats) != len(src) {
		return false
	}
	for i, v := range p.TableStats {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TQueryStatsResult_ struct {
	Status           *status.TStatus          `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	SimpleResult_    map[string]int64         `thrift:"simple_result,2,optional" frugal:"2,optional,map<string:i64>" json:"simple_result,omitempty"`
	TableStats       []*TTableQueryStats      `thrift:"table_stats,3,optional" frugal:"3,optional,list<TTableQueryStats>" json:"table_stats,omitempty"`
	TableVerbosStats []*TTableIndexQueryStats `thrift:"table_verbos_stats,4,optional" frugal:"4,optional,list<TTableIndexQueryStats>" json:"table_verbos_stats,omitempty"`
	TabletStats      map[int64]int64          `thrift:"tablet_stats,5,optional" frugal:"5,optional,map<i64:i64>" json:"tablet_stats,omitempty"`
}

func NewTQueryStatsResult_() *TQueryStatsResult_ {
	return &TQueryStatsResult_{}
}

func (p *TQueryStatsResult_) InitDefault() {
}

var TQueryStatsResult__Status_DEFAULT *status.TStatus

func (p *TQueryStatsResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TQueryStatsResult__Status_DEFAULT
	}
	return p.Status
}

var TQueryStatsResult__SimpleResult__DEFAULT map[string]int64

func (p *TQueryStatsResult_) GetSimpleResult_() (v map[string]int64) {
	if !p.IsSetSimpleResult_() {
		return TQueryStatsResult__SimpleResult__DEFAULT
	}
	return p.SimpleResult_
}

var TQueryStatsResult__TableStats_DEFAULT []*TTableQueryStats

func (p *TQueryStatsResult_) GetTableStats() (v []*TTableQueryStats) {
	if !p.IsSetTableStats() {
		return TQueryStatsResult__TableStats_DEFAULT
	}
	return p.TableStats
}

var TQueryStatsResult__TableVerbosStats_DEFAULT []*TTableIndexQueryStats

func (p *TQueryStatsResult_) GetTableVerbosStats() (v []*TTableIndexQueryStats) {
	if !p.IsSetTableVerbosStats() {
		return TQueryStatsResult__TableVerbosStats_DEFAULT
	}
	return p.TableVerbosStats
}

var TQueryStatsResult__TabletStats_DEFAULT map[int64]int64

func (p *TQueryStatsResult_) GetTabletStats() (v map[int64]int64) {
	if !p.IsSetTabletStats() {
		return TQueryStatsResult__TabletStats_DEFAULT
	}
	return p.TabletStats
}
func (p *TQueryStatsResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TQueryStatsResult_) SetSimpleResult_(val map[string]int64) {
	p.SimpleResult_ = val
}
func (p *TQueryStatsResult_) SetTableStats(val []*TTableQueryStats) {
	p.TableStats = val
}
func (p *TQueryStatsResult_) SetTableVerbosStats(val []*TTableIndexQueryStats) {
	p.TableVerbosStats = val
}
func (p *TQueryStatsResult_) SetTabletStats(val map[int64]int64) {
	p.TabletStats = val
}

var fieldIDToName_TQueryStatsResult_ = map[int16]string{
	1: "status",
	2: "simple_result",
	3: "table_stats",
	4: "table_verbos_stats",
	5: "tablet_stats",
}

func (p *TQueryStatsResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TQueryStatsResult_) IsSetSimpleResult_() bool {
	return p.SimpleResult_ != nil
}

func (p *TQueryStatsResult_) IsSetTableStats() bool {
	return p.TableStats != nil
}

func (p *TQueryStatsResult_) IsSetTableVerbosStats() bool {
	return p.TableVerbosStats != nil
}

func (p *TQueryStatsResult_) IsSetTabletStats() bool {
	return p.TabletStats != nil
}

func (p *TQueryStatsResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TQueryStatsResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TQueryStatsResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TQueryStatsResult_) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]int64, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.SimpleResult_ = _field
	return nil
}
func (p *TQueryStatsResult_) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTableQueryStats, 0, size)
	values := make([]TTableQueryStats, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TableStats = _field
	return nil
}
func (p *TQueryStatsResult_) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTableIndexQueryStats, 0, size)
	values := make([]TTableIndexQueryStats, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TableVerbosStats = _field
	return nil
}
func (p *TQueryStatsResult_) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64]int64, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.TabletStats = _field
	return nil
}

func (p *TQueryStatsResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TQueryStatsResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TQueryStatsResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TQueryStatsResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSimpleResult_() {
		if err = oprot.WriteFieldBegin("simple_result", thrift.MAP, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.SimpleResult_)); err != nil {
			return err
		}
		for k, v := range p.SimpleResult_ {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TQueryStatsResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableStats() {
		if err = oprot.WriteFieldBegin("table_stats", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TableStats)); err != nil {
			return err
		}
		for _, v := range p.TableStats {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TQueryStatsResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableVerbosStats() {
		if err = oprot.WriteFieldBegin("table_verbos_stats", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TableVerbosStats)); err != nil {
			return err
		}
		for _, v := range p.TableVerbosStats {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TQueryStatsResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletStats() {
		if err = oprot.WriteFieldBegin("tablet_stats", thrift.MAP, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.I64, len(p.TabletStats)); err != nil {
			return err
		}
		for k, v := range p.TabletStats {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TQueryStatsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TQueryStatsResult_(%+v)", *p)

}

func (p *TQueryStatsResult_) DeepEqual(ano *TQueryStatsResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.SimpleResult_) {
		return false
	}
	if !p.Field3DeepEqual(ano.TableStats) {
		return false
	}
	if !p.Field4DeepEqual(ano.TableVerbosStats) {
		return false
	}
	if !p.Field5DeepEqual(ano.TabletStats) {
		return false
	}
	return true
}

func (p *TQueryStatsResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TQueryStatsResult_) Field2DeepEqual(src map[string]int64) bool {

	if len(p.SimpleResult_) != len(src) {
		return false
	}
	for k, v := range p.SimpleResult_ {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TQueryStatsResult_) Field3DeepEqual(src []*TTableQueryStats) bool {

	if len(p.TableStats) != len(src) {
		return false
	}
	for i, v := range p.TableStats {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TQueryStatsResult_) Field4DeepEqual(src []*TTableIndexQueryStats) bool {

	if len(p.TableVerbosStats) != len(src) {
		return false
	}
	for i, v := range p.TableVerbosStats {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TQueryStatsResult_) Field5DeepEqual(src map[int64]int64) bool {

	if len(p.TabletStats) != len(src) {
		return false
	}
	for k, v := range p.TabletStats {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}

type TGetBinlogRequest struct {
	Cluster       *string `thrift:"cluster,1,optional" frugal:"1,optional,string" json:"cluster,omitempty"`
	User          *string `thrift:"user,2,optional" frugal:"2,optional,string" json:"user,omitempty"`
	Passwd        *string `thrift:"passwd,3,optional" frugal:"3,optional,string" json:"passwd,omitempty"`
	Db            *string `thrift:"db,4,optional" frugal:"4,optional,string" json:"db,omitempty"`
	Table         *string `thrift:"table,5,optional" frugal:"5,optional,string" json:"table,omitempty"`
	TableId       *int64  `thrift:"table_id,6,optional" frugal:"6,optional,i64" json:"table_id,omitempty"`
	UserIp        *string `thrift:"user_ip,7,optional" frugal:"7,optional,string" json:"user_ip,omitempty"`
	Token         *string `thrift:"token,8,optional" frugal:"8,optional,string" json:"token,omitempty"`
	PrevCommitSeq *int64  `thrift:"prev_commit_seq,9,optional" frugal:"9,optional,i64" json:"prev_commit_seq,omitempty"`
}

func NewTGetBinlogRequest() *TGetBinlogRequest {
	return &TGetBinlogRequest{}
}

func (p *TGetBinlogRequest) InitDefault() {
}

var TGetBinlogRequest_Cluster_DEFAULT string

func (p *TGetBinlogRequest) GetCluster() (v string) {
	if !p.IsSetCluster() {
		return TGetBinlogRequest_Cluster_DEFAULT
	}
	return *p.Cluster
}

var TGetBinlogRequest_User_DEFAULT string

func (p *TGetBinlogRequest) GetUser() (v string) {
	if !p.IsSetUser() {
		return TGetBinlogRequest_User_DEFAULT
	}
	return *p.User
}

var TGetBinlogRequest_Passwd_DEFAULT string

func (p *TGetBinlogRequest) GetPasswd() (v string) {
	if !p.IsSetPasswd() {
		return TGetBinlogRequest_Passwd_DEFAULT
	}
	return *p.Passwd
}

var TGetBinlogRequest_Db_DEFAULT string

func (p *TGetBinlogRequest) GetDb() (v string) {
	if !p.IsSetDb() {
		return TGetBinlogRequest_Db_DEFAULT
	}
	return *p.Db
}

var TGetBinlogRequest_Table_DEFAULT string

func (p *TGetBinlogRequest) GetTable() (v string) {
	if !p.IsSetTable() {
		return TGetBinlogRequest_Table_DEFAULT
	}
	return *p.Table
}

var TGetBinlogRequest_TableId_DEFAULT int64

func (p *TGetBinlogRequest) GetTableId() (v int64) {
	if !p.IsSetTableId() {
		return TGetBinlogRequest_TableId_DEFAULT
	}
	return *p.TableId
}

var TGetBinlogRequest_UserIp_DEFAULT string

func (p *TGetBinlogRequest) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TGetBinlogRequest_UserIp_DEFAULT
	}
	return *p.UserIp
}

var TGetBinlogRequest_Token_DEFAULT string

func (p *TGetBinlogRequest) GetToken() (v string) {
	if !p.IsSetToken() {
		return TGetBinlogRequest_Token_DEFAULT
	}
	return *p.Token
}

var TGetBinlogRequest_PrevCommitSeq_DEFAULT int64

func (p *TGetBinlogRequest) GetPrevCommitSeq() (v int64) {
	if !p.IsSetPrevCommitSeq() {
		return TGetBinlogRequest_PrevCommitSeq_DEFAULT
	}
	return *p.PrevCommitSeq
}
func (p *TGetBinlogRequest) SetCluster(val *string) {
	p.Cluster = val
}
func (p *TGetBinlogRequest) SetUser(val *string) {
	p.User = val
}
func (p *TGetBinlogRequest) SetPasswd(val *string) {
	p.Passwd = val
}
func (p *TGetBinlogRequest) SetDb(val *string) {
	p.Db = val
}
func (p *TGetBinlogRequest) SetTable(val *string) {
	p.Table = val
}
func (p *TGetBinlogRequest) SetTableId(val *int64) {
	p.TableId = val
}
func (p *TGetBinlogRequest) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TGetBinlogRequest) SetToken(val *string) {
	p.Token = val
}
func (p *TGetBinlogRequest) SetPrevCommitSeq(val *int64) {
	p.PrevCommitSeq = val
}

var fieldIDToName_TGetBinlogRequest = map[int16]string{
	1: "cluster",
	2: "user",
	3: "passwd",
	4: "db",
	5: "table",
	6: "table_id",
	7: "user_ip",
	8: "token",
	9: "prev_commit_seq",
}

func (p *TGetBinlogRequest) IsSetCluster() bool {
	return p.Cluster != nil
}

func (p *TGetBinlogRequest) IsSetUser() bool {
	return p.User != nil
}

func (p *TGetBinlogRequest) IsSetPasswd() bool {
	return p.Passwd != nil
}

func (p *TGetBinlogRequest) IsSetDb() bool {
	return p.Db != nil
}

func (p *TGetBinlogRequest) IsSetTable() bool {
	return p.Table != nil
}

func (p *TGetBinlogRequest) IsSetTableId() bool {
	return p.TableId != nil
}

func (p *TGetBinlogRequest) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TGetBinlogRequest) IsSetToken() bool {
	return p.Token != nil
}

func (p *TGetBinlogRequest) IsSetPrevCommitSeq() bool {
	return p.PrevCommitSeq != nil
}

func (p *TGetBinlogRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetBinlogRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetBinlogRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cluster = _field
	return nil
}
func (p *TGetBinlogRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *TGetBinlogRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Passwd = _field
	return nil
}
func (p *TGetBinlogRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Db = _field
	return nil
}
func (p *TGetBinlogRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Table = _field
	return nil
}
func (p *TGetBinlogRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableId = _field
	return nil
}
func (p *TGetBinlogRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TGetBinlogRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}
func (p *TGetBinlogRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PrevCommitSeq = _field
	return nil
}

func (p *TGetBinlogRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetBinlogRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetBinlogRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCluster() {
		if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetBinlogRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetBinlogRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPasswd() {
		if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Passwd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetBinlogRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDb() {
		if err = oprot.WriteFieldBegin("db", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Db); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TGetBinlogRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTable() {
		if err = oprot.WriteFieldBegin("table", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Table); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TGetBinlogRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err = oprot.WriteFieldBegin("table_id", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TGetBinlogRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TGetBinlogRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TGetBinlogRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrevCommitSeq() {
		if err = oprot.WriteFieldBegin("prev_commit_seq", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PrevCommitSeq); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TGetBinlogRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetBinlogRequest(%+v)", *p)

}

func (p *TGetBinlogRequest) DeepEqual(ano *TGetBinlogRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field4DeepEqual(ano.Db) {
		return false
	}
	if !p.Field5DeepEqual(ano.Table) {
		return false
	}
	if !p.Field6DeepEqual(ano.TableId) {
		return false
	}
	if !p.Field7DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field8DeepEqual(ano.Token) {
		return false
	}
	if !p.Field9DeepEqual(ano.PrevCommitSeq) {
		return false
	}
	return true
}

func (p *TGetBinlogRequest) Field1DeepEqual(src *string) bool {

	if p.Cluster == src {
		return true
	} else if p.Cluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetBinlogRequest) Field2DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetBinlogRequest) Field3DeepEqual(src *string) bool {

	if p.Passwd == src {
		return true
	} else if p.Passwd == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Passwd, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetBinlogRequest) Field4DeepEqual(src *string) bool {

	if p.Db == src {
		return true
	} else if p.Db == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Db, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetBinlogRequest) Field5DeepEqual(src *string) bool {

	if p.Table == src {
		return true
	} else if p.Table == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Table, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetBinlogRequest) Field6DeepEqual(src *int64) bool {

	if p.TableId == src {
		return true
	} else if p.TableId == nil || src == nil {
		return false
	}
	if *p.TableId != *src {
		return false
	}
	return true
}
func (p *TGetBinlogRequest) Field7DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetBinlogRequest) Field8DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetBinlogRequest) Field9DeepEqual(src *int64) bool {

	if p.PrevCommitSeq == src {
		return true
	} else if p.PrevCommitSeq == nil || src == nil {
		return false
	}
	if *p.PrevCommitSeq != *src {
		return false
	}
	return true
}

type TBinlog struct {
	CommitSeq         *int64       `thrift:"commit_seq,1,optional" frugal:"1,optional,i64" json:"commit_seq,omitempty"`
	Timestamp         *int64       `thrift:"timestamp,2,optional" frugal:"2,optional,i64" json:"timestamp,omitempty"`
	Type              *TBinlogType `thrift:"type,3,optional" frugal:"3,optional,TBinlogType" json:"type,omitempty"`
	DbId              *int64       `thrift:"db_id,4,optional" frugal:"4,optional,i64" json:"db_id,omitempty"`
	TableIds          []int64      `thrift:"table_ids,5,optional" frugal:"5,optional,list<i64>" json:"table_ids,omitempty"`
	Data              *string      `thrift:"data,6,optional" frugal:"6,optional,string" json:"data,omitempty"`
	Belong            *int64       `thrift:"belong,7,optional" frugal:"7,optional,i64" json:"belong,omitempty"`
	TableRef          *int64       `thrift:"table_ref,8,optional" frugal:"8,optional,i64" json:"table_ref,omitempty"`
	RemoveEnableCache *bool        `thrift:"remove_enable_cache,9,optional" frugal:"9,optional,bool" json:"remove_enable_cache,omitempty"`
}

func NewTBinlog() *TBinlog {
	return &TBinlog{}
}

func (p *TBinlog) InitDefault() {
}

var TBinlog_CommitSeq_DEFAULT int64

func (p *TBinlog) GetCommitSeq() (v int64) {
	if !p.IsSetCommitSeq() {
		return TBinlog_CommitSeq_DEFAULT
	}
	return *p.CommitSeq
}

var TBinlog_Timestamp_DEFAULT int64

func (p *TBinlog) GetTimestamp() (v int64) {
	if !p.IsSetTimestamp() {
		return TBinlog_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var TBinlog_Type_DEFAULT TBinlogType

func (p *TBinlog) GetType() (v TBinlogType) {
	if !p.IsSetType() {
		return TBinlog_Type_DEFAULT
	}
	return *p.Type
}

var TBinlog_DbId_DEFAULT int64

func (p *TBinlog) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TBinlog_DbId_DEFAULT
	}
	return *p.DbId
}

var TBinlog_TableIds_DEFAULT []int64

func (p *TBinlog) GetTableIds() (v []int64) {
	if !p.IsSetTableIds() {
		return TBinlog_TableIds_DEFAULT
	}
	return p.TableIds
}

var TBinlog_Data_DEFAULT string

func (p *TBinlog) GetData() (v string) {
	if !p.IsSetData() {
		return TBinlog_Data_DEFAULT
	}
	return *p.Data
}

var TBinlog_Belong_DEFAULT int64

func (p *TBinlog) GetBelong() (v int64) {
	if !p.IsSetBelong() {
		return TBinlog_Belong_DEFAULT
	}
	return *p.Belong
}

var TBinlog_TableRef_DEFAULT int64

func (p *TBinlog) GetTableRef() (v int64) {
	if !p.IsSetTableRef() {
		return TBinlog_TableRef_DEFAULT
	}
	return *p.TableRef
}

var TBinlog_RemoveEnableCache_DEFAULT bool

func (p *TBinlog) GetRemoveEnableCache() (v bool) {
	if !p.IsSetRemoveEnableCache() {
		return TBinlog_RemoveEnableCache_DEFAULT
	}
	return *p.RemoveEnableCache
}
func (p *TBinlog) SetCommitSeq(val *int64) {
	p.CommitSeq = val
}
func (p *TBinlog) SetTimestamp(val *int64) {
	p.Timestamp = val
}
func (p *TBinlog) SetType(val *TBinlogType) {
	p.Type = val
}
func (p *TBinlog) SetDbId(val *int64) {
	p.DbId = val
}
func (p *TBinlog) SetTableIds(val []int64) {
	p.TableIds = val
}
func (p *TBinlog) SetData(val *string) {
	p.Data = val
}
func (p *TBinlog) SetBelong(val *int64) {
	p.Belong = val
}
func (p *TBinlog) SetTableRef(val *int64) {
	p.TableRef = val
}
func (p *TBinlog) SetRemoveEnableCache(val *bool) {
	p.RemoveEnableCache = val
}

var fieldIDToName_TBinlog = map[int16]string{
	1: "commit_seq",
	2: "timestamp",
	3: "type",
	4: "db_id",
	5: "table_ids",
	6: "data",
	7: "belong",
	8: "table_ref",
	9: "remove_enable_cache",
}

func (p *TBinlog) IsSetCommitSeq() bool {
	return p.CommitSeq != nil
}

func (p *TBinlog) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TBinlog) IsSetType() bool {
	return p.Type != nil
}

func (p *TBinlog) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TBinlog) IsSetTableIds() bool {
	return p.TableIds != nil
}

func (p *TBinlog) IsSetData() bool {
	return p.Data != nil
}

func (p *TBinlog) IsSetBelong() bool {
	return p.Belong != nil
}

func (p *TBinlog) IsSetTableRef() bool {
	return p.TableRef != nil
}

func (p *TBinlog) IsSetRemoveEnableCache() bool {
	return p.RemoveEnableCache != nil
}

func (p *TBinlog) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TBinlog[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TBinlog) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CommitSeq = _field
	return nil
}
func (p *TBinlog) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Timestamp = _field
	return nil
}
func (p *TBinlog) ReadField3(iprot thrift.TProtocol) error {

	var _field *TBinlogType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TBinlogType(v)
		_field = &tmp
	}
	p.Type = _field
	return nil
}
func (p *TBinlog) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TBinlog) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TableIds = _field
	return nil
}
func (p *TBinlog) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Data = _field
	return nil
}
func (p *TBinlog) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Belong = _field
	return nil
}
func (p *TBinlog) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableRef = _field
	return nil
}
func (p *TBinlog) ReadField9(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RemoveEnableCache = _field
	return nil
}

func (p *TBinlog) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TBinlog"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TBinlog) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommitSeq() {
		if err = oprot.WriteFieldBegin("commit_seq", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CommitSeq); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TBinlog) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err = oprot.WriteFieldBegin("timestamp", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Timestamp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TBinlog) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TBinlog) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("db_id", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TBinlog) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableIds() {
		if err = oprot.WriteFieldBegin("table_ids", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.TableIds)); err != nil {
			return err
		}
		for _, v := range p.TableIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TBinlog) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Data); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TBinlog) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetBelong() {
		if err = oprot.WriteFieldBegin("belong", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Belong); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TBinlog) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableRef() {
		if err = oprot.WriteFieldBegin("table_ref", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TableRef); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TBinlog) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoveEnableCache() {
		if err = oprot.WriteFieldBegin("remove_enable_cache", thrift.BOOL, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.RemoveEnableCache); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TBinlog) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBinlog(%+v)", *p)

}

func (p *TBinlog) DeepEqual(ano *TBinlog) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CommitSeq) {
		return false
	}
	if !p.Field2DeepEqual(ano.Timestamp) {
		return false
	}
	if !p.Field3DeepEqual(ano.Type) {
		return false
	}
	if !p.Field4DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field5DeepEqual(ano.TableIds) {
		return false
	}
	if !p.Field6DeepEqual(ano.Data) {
		return false
	}
	if !p.Field7DeepEqual(ano.Belong) {
		return false
	}
	if !p.Field8DeepEqual(ano.TableRef) {
		return false
	}
	if !p.Field9DeepEqual(ano.RemoveEnableCache) {
		return false
	}
	return true
}

func (p *TBinlog) Field1DeepEqual(src *int64) bool {

	if p.CommitSeq == src {
		return true
	} else if p.CommitSeq == nil || src == nil {
		return false
	}
	if *p.CommitSeq != *src {
		return false
	}
	return true
}
func (p *TBinlog) Field2DeepEqual(src *int64) bool {

	if p.Timestamp == src {
		return true
	} else if p.Timestamp == nil || src == nil {
		return false
	}
	if *p.Timestamp != *src {
		return false
	}
	return true
}
func (p *TBinlog) Field3DeepEqual(src *TBinlogType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if *p.Type != *src {
		return false
	}
	return true
}
func (p *TBinlog) Field4DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}
func (p *TBinlog) Field5DeepEqual(src []int64) bool {

	if len(p.TableIds) != len(src) {
		return false
	}
	for i, v := range p.TableIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TBinlog) Field6DeepEqual(src *string) bool {

	if p.Data == src {
		return true
	} else if p.Data == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Data, *src) != 0 {
		return false
	}
	return true
}
func (p *TBinlog) Field7DeepEqual(src *int64) bool {

	if p.Belong == src {
		return true
	} else if p.Belong == nil || src == nil {
		return false
	}
	if *p.Belong != *src {
		return false
	}
	return true
}
func (p *TBinlog) Field8DeepEqual(src *int64) bool {

	if p.TableRef == src {
		return true
	} else if p.TableRef == nil || src == nil {
		return false
	}
	if *p.TableRef != *src {
		return false
	}
	return true
}
func (p *TBinlog) Field9DeepEqual(src *bool) bool {

	if p.RemoveEnableCache == src {
		return true
	} else if p.RemoveEnableCache == nil || src == nil {
		return false
	}
	if *p.RemoveEnableCache != *src {
		return false
	}
	return true
}

type TGetBinlogResult_ struct {
	Status        *status.TStatus        `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	NextCommitSeq *int64                 `thrift:"next_commit_seq,2,optional" frugal:"2,optional,i64" json:"next_commit_seq,omitempty"`
	Binlogs       []*TBinlog             `thrift:"binlogs,3,optional" frugal:"3,optional,list<TBinlog>" json:"binlogs,omitempty"`
	FeVersion     *string                `thrift:"fe_version,4,optional" frugal:"4,optional,string" json:"fe_version,omitempty"`
	FeMetaVersion *int64                 `thrift:"fe_meta_version,5,optional" frugal:"5,optional,i64" json:"fe_meta_version,omitempty"`
	MasterAddress *types.TNetworkAddress `thrift:"master_address,6,optional" frugal:"6,optional,types.TNetworkAddress" json:"master_address,omitempty"`
}

func NewTGetBinlogResult_() *TGetBinlogResult_ {
	return &TGetBinlogResult_{}
}

func (p *TGetBinlogResult_) InitDefault() {
}

var TGetBinlogResult__Status_DEFAULT *status.TStatus

func (p *TGetBinlogResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TGetBinlogResult__Status_DEFAULT
	}
	return p.Status
}

var TGetBinlogResult__NextCommitSeq_DEFAULT int64

func (p *TGetBinlogResult_) GetNextCommitSeq() (v int64) {
	if !p.IsSetNextCommitSeq() {
		return TGetBinlogResult__NextCommitSeq_DEFAULT
	}
	return *p.NextCommitSeq
}

var TGetBinlogResult__Binlogs_DEFAULT []*TBinlog

func (p *TGetBinlogResult_) GetBinlogs() (v []*TBinlog) {
	if !p.IsSetBinlogs() {
		return TGetBinlogResult__Binlogs_DEFAULT
	}
	return p.Binlogs
}

var TGetBinlogResult__FeVersion_DEFAULT string

func (p *TGetBinlogResult_) GetFeVersion() (v string) {
	if !p.IsSetFeVersion() {
		return TGetBinlogResult__FeVersion_DEFAULT
	}
	return *p.FeVersion
}

var TGetBinlogResult__FeMetaVersion_DEFAULT int64

func (p *TGetBinlogResult_) GetFeMetaVersion() (v int64) {
	if !p.IsSetFeMetaVersion() {
		return TGetBinlogResult__FeMetaVersion_DEFAULT
	}
	return *p.FeMetaVersion
}

var TGetBinlogResult__MasterAddress_DEFAULT *types.TNetworkAddress

func (p *TGetBinlogResult_) GetMasterAddress() (v *types.TNetworkAddress) {
	if !p.IsSetMasterAddress() {
		return TGetBinlogResult__MasterAddress_DEFAULT
	}
	return p.MasterAddress
}
func (p *TGetBinlogResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TGetBinlogResult_) SetNextCommitSeq(val *int64) {
	p.NextCommitSeq = val
}
func (p *TGetBinlogResult_) SetBinlogs(val []*TBinlog) {
	p.Binlogs = val
}
func (p *TGetBinlogResult_) SetFeVersion(val *string) {
	p.FeVersion = val
}
func (p *TGetBinlogResult_) SetFeMetaVersion(val *int64) {
	p.FeMetaVersion = val
}
func (p *TGetBinlogResult_) SetMasterAddress(val *types.TNetworkAddress) {
	p.MasterAddress = val
}

var fieldIDToName_TGetBinlogResult_ = map[int16]string{
	1: "status",
	2: "next_commit_seq",
	3: "binlogs",
	4: "fe_version",
	5: "fe_meta_version",
	6: "master_address",
}

func (p *TGetBinlogResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TGetBinlogResult_) IsSetNextCommitSeq() bool {
	return p.NextCommitSeq != nil
}

func (p *TGetBinlogResult_) IsSetBinlogs() bool {
	return p.Binlogs != nil
}

func (p *TGetBinlogResult_) IsSetFeVersion() bool {
	return p.FeVersion != nil
}

func (p *TGetBinlogResult_) IsSetFeMetaVersion() bool {
	return p.FeMetaVersion != nil
}

func (p *TGetBinlogResult_) IsSetMasterAddress() bool {
	return p.MasterAddress != nil
}

func (p *TGetBinlogResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetBinlogResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetBinlogResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TGetBinlogResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextCommitSeq = _field
	return nil
}
func (p *TGetBinlogResult_) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TBinlog, 0, size)
	values := make([]TBinlog, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Binlogs = _field
	return nil
}
func (p *TGetBinlogResult_) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FeVersion = _field
	return nil
}
func (p *TGetBinlogResult_) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FeMetaVersion = _field
	return nil
}
func (p *TGetBinlogResult_) ReadField6(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MasterAddress = _field
	return nil
}

func (p *TGetBinlogResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetBinlogResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetBinlogResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetBinlogResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextCommitSeq() {
		if err = oprot.WriteFieldBegin("next_commit_seq", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.NextCommitSeq); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetBinlogResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBinlogs() {
		if err = oprot.WriteFieldBegin("binlogs", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Binlogs)); err != nil {
			return err
		}
		for _, v := range p.Binlogs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetBinlogResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFeVersion() {
		if err = oprot.WriteFieldBegin("fe_version", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FeVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TGetBinlogResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetFeMetaVersion() {
		if err = oprot.WriteFieldBegin("fe_meta_version", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.FeMetaVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TGetBinlogResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMasterAddress() {
		if err = oprot.WriteFieldBegin("master_address", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MasterAddress.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TGetBinlogResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetBinlogResult_(%+v)", *p)

}

func (p *TGetBinlogResult_) DeepEqual(ano *TGetBinlogResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.NextCommitSeq) {
		return false
	}
	if !p.Field3DeepEqual(ano.Binlogs) {
		return false
	}
	if !p.Field4DeepEqual(ano.FeVersion) {
		return false
	}
	if !p.Field5DeepEqual(ano.FeMetaVersion) {
		return false
	}
	if !p.Field6DeepEqual(ano.MasterAddress) {
		return false
	}
	return true
}

func (p *TGetBinlogResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TGetBinlogResult_) Field2DeepEqual(src *int64) bool {

	if p.NextCommitSeq == src {
		return true
	} else if p.NextCommitSeq == nil || src == nil {
		return false
	}
	if *p.NextCommitSeq != *src {
		return false
	}
	return true
}
func (p *TGetBinlogResult_) Field3DeepEqual(src []*TBinlog) bool {

	if len(p.Binlogs) != len(src) {
		return false
	}
	for i, v := range p.Binlogs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TGetBinlogResult_) Field4DeepEqual(src *string) bool {

	if p.FeVersion == src {
		return true
	} else if p.FeVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FeVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetBinlogResult_) Field5DeepEqual(src *int64) bool {

	if p.FeMetaVersion == src {
		return true
	} else if p.FeMetaVersion == nil || src == nil {
		return false
	}
	if *p.FeMetaVersion != *src {
		return false
	}
	return true
}
func (p *TGetBinlogResult_) Field6DeepEqual(src *types.TNetworkAddress) bool {

	if !p.MasterAddress.DeepEqual(src) {
		return false
	}
	return true
}

type TGetTabletReplicaInfosRequest struct {
	TabletIds []int64 `thrift:"tablet_ids,1,required" frugal:"1,required,list<i64>" json:"tablet_ids"`
}

func NewTGetTabletReplicaInfosRequest() *TGetTabletReplicaInfosRequest {
	return &TGetTabletReplicaInfosRequest{}
}

func (p *TGetTabletReplicaInfosRequest) InitDefault() {
}

func (p *TGetTabletReplicaInfosRequest) GetTabletIds() (v []int64) {
	return p.TabletIds
}
func (p *TGetTabletReplicaInfosRequest) SetTabletIds(val []int64) {
	p.TabletIds = val
}

var fieldIDToName_TGetTabletReplicaInfosRequest = map[int16]string{
	1: "tablet_ids",
}

func (p *TGetTabletReplicaInfosRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletIds bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletIds {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetTabletReplicaInfosRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TGetTabletReplicaInfosRequest[fieldId]))
}

func (p *TGetTabletReplicaInfosRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TabletIds = _field
	return nil
}

func (p *TGetTabletReplicaInfosRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetTabletReplicaInfosRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetTabletReplicaInfosRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.TabletIds)); err != nil {
		return err
	}
	for _, v := range p.TabletIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetTabletReplicaInfosRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetTabletReplicaInfosRequest(%+v)", *p)

}

func (p *TGetTabletReplicaInfosRequest) DeepEqual(ano *TGetTabletReplicaInfosRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletIds) {
		return false
	}
	return true
}

func (p *TGetTabletReplicaInfosRequest) Field1DeepEqual(src []int64) bool {

	if len(p.TabletIds) != len(src) {
		return false
	}
	for i, v := range p.TabletIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type TGetTabletReplicaInfosResult_ struct {
	Status             *status.TStatus                 `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	TabletReplicaInfos map[int64][]*types.TReplicaInfo `thrift:"tablet_replica_infos,2,optional" frugal:"2,optional,map<i64:list<types.TReplicaInfo>>" json:"tablet_replica_infos,omitempty"`
	Token              *string                         `thrift:"token,3,optional" frugal:"3,optional,string" json:"token,omitempty"`
}

func NewTGetTabletReplicaInfosResult_() *TGetTabletReplicaInfosResult_ {
	return &TGetTabletReplicaInfosResult_{}
}

func (p *TGetTabletReplicaInfosResult_) InitDefault() {
}

var TGetTabletReplicaInfosResult__Status_DEFAULT *status.TStatus

func (p *TGetTabletReplicaInfosResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TGetTabletReplicaInfosResult__Status_DEFAULT
	}
	return p.Status
}

var TGetTabletReplicaInfosResult__TabletReplicaInfos_DEFAULT map[int64][]*types.TReplicaInfo

func (p *TGetTabletReplicaInfosResult_) GetTabletReplicaInfos() (v map[int64][]*types.TReplicaInfo) {
	if !p.IsSetTabletReplicaInfos() {
		return TGetTabletReplicaInfosResult__TabletReplicaInfos_DEFAULT
	}
	return p.TabletReplicaInfos
}

var TGetTabletReplicaInfosResult__Token_DEFAULT string

func (p *TGetTabletReplicaInfosResult_) GetToken() (v string) {
	if !p.IsSetToken() {
		return TGetTabletReplicaInfosResult__Token_DEFAULT
	}
	return *p.Token
}
func (p *TGetTabletReplicaInfosResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TGetTabletReplicaInfosResult_) SetTabletReplicaInfos(val map[int64][]*types.TReplicaInfo) {
	p.TabletReplicaInfos = val
}
func (p *TGetTabletReplicaInfosResult_) SetToken(val *string) {
	p.Token = val
}

var fieldIDToName_TGetTabletReplicaInfosResult_ = map[int16]string{
	1: "status",
	2: "tablet_replica_infos",
	3: "token",
}

func (p *TGetTabletReplicaInfosResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TGetTabletReplicaInfosResult_) IsSetTabletReplicaInfos() bool {
	return p.TabletReplicaInfos != nil
}

func (p *TGetTabletReplicaInfosResult_) IsSetToken() bool {
	return p.Token != nil
}

func (p *TGetTabletReplicaInfosResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetTabletReplicaInfosResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetTabletReplicaInfosResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TGetTabletReplicaInfosResult_) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64][]*types.TReplicaInfo, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]*types.TReplicaInfo, 0, size)
		values := make([]types.TReplicaInfo, size)
		for i := 0; i < size; i++ {
			_elem := &values[i]
			_elem.InitDefault()

			if err := _elem.Read(iprot); err != nil {
				return err
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.TabletReplicaInfos = _field
	return nil
}
func (p *TGetTabletReplicaInfosResult_) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}

func (p *TGetTabletReplicaInfosResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetTabletReplicaInfosResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetTabletReplicaInfosResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetTabletReplicaInfosResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletReplicaInfos() {
		if err = oprot.WriteFieldBegin("tablet_replica_infos", thrift.MAP, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.LIST, len(p.TabletReplicaInfos)); err != nil {
			return err
		}
		for k, v := range p.TabletReplicaInfos {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetTabletReplicaInfosResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetTabletReplicaInfosResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetTabletReplicaInfosResult_(%+v)", *p)

}

func (p *TGetTabletReplicaInfosResult_) DeepEqual(ano *TGetTabletReplicaInfosResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.TabletReplicaInfos) {
		return false
	}
	if !p.Field3DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *TGetTabletReplicaInfosResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TGetTabletReplicaInfosResult_) Field2DeepEqual(src map[int64][]*types.TReplicaInfo) bool {

	if len(p.TabletReplicaInfos) != len(src) {
		return false
	}
	for k, v := range p.TabletReplicaInfos {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *TGetTabletReplicaInfosResult_) Field3DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}

type TGetSnapshotRequest struct {
	Cluster      *string        `thrift:"cluster,1,optional" frugal:"1,optional,string" json:"cluster,omitempty"`
	User         *string        `thrift:"user,2,optional" frugal:"2,optional,string" json:"user,omitempty"`
	Passwd       *string        `thrift:"passwd,3,optional" frugal:"3,optional,string" json:"passwd,omitempty"`
	Db           *string        `thrift:"db,4,optional" frugal:"4,optional,string" json:"db,omitempty"`
	Table        *string        `thrift:"table,5,optional" frugal:"5,optional,string" json:"table,omitempty"`
	Token        *string        `thrift:"token,6,optional" frugal:"6,optional,string" json:"token,omitempty"`
	LabelName    *string        `thrift:"label_name,7,optional" frugal:"7,optional,string" json:"label_name,omitempty"`
	SnapshotName *string        `thrift:"snapshot_name,8,optional" frugal:"8,optional,string" json:"snapshot_name,omitempty"`
	SnapshotType *TSnapshotType `thrift:"snapshot_type,9,optional" frugal:"9,optional,TSnapshotType" json:"snapshot_type,omitempty"`
}

func NewTGetSnapshotRequest() *TGetSnapshotRequest {
	return &TGetSnapshotRequest{}
}

func (p *TGetSnapshotRequest) InitDefault() {
}

var TGetSnapshotRequest_Cluster_DEFAULT string

func (p *TGetSnapshotRequest) GetCluster() (v string) {
	if !p.IsSetCluster() {
		return TGetSnapshotRequest_Cluster_DEFAULT
	}
	return *p.Cluster
}

var TGetSnapshotRequest_User_DEFAULT string

func (p *TGetSnapshotRequest) GetUser() (v string) {
	if !p.IsSetUser() {
		return TGetSnapshotRequest_User_DEFAULT
	}
	return *p.User
}

var TGetSnapshotRequest_Passwd_DEFAULT string

func (p *TGetSnapshotRequest) GetPasswd() (v string) {
	if !p.IsSetPasswd() {
		return TGetSnapshotRequest_Passwd_DEFAULT
	}
	return *p.Passwd
}

var TGetSnapshotRequest_Db_DEFAULT string

func (p *TGetSnapshotRequest) GetDb() (v string) {
	if !p.IsSetDb() {
		return TGetSnapshotRequest_Db_DEFAULT
	}
	return *p.Db
}

var TGetSnapshotRequest_Table_DEFAULT string

func (p *TGetSnapshotRequest) GetTable() (v string) {
	if !p.IsSetTable() {
		return TGetSnapshotRequest_Table_DEFAULT
	}
	return *p.Table
}

var TGetSnapshotRequest_Token_DEFAULT string

func (p *TGetSnapshotRequest) GetToken() (v string) {
	if !p.IsSetToken() {
		return TGetSnapshotRequest_Token_DEFAULT
	}
	return *p.Token
}

var TGetSnapshotRequest_LabelName_DEFAULT string

func (p *TGetSnapshotRequest) GetLabelName() (v string) {
	if !p.IsSetLabelName() {
		return TGetSnapshotRequest_LabelName_DEFAULT
	}
	return *p.LabelName
}

var TGetSnapshotRequest_SnapshotName_DEFAULT string

func (p *TGetSnapshotRequest) GetSnapshotName() (v string) {
	if !p.IsSetSnapshotName() {
		return TGetSnapshotRequest_SnapshotName_DEFAULT
	}
	return *p.SnapshotName
}

var TGetSnapshotRequest_SnapshotType_DEFAULT TSnapshotType

func (p *TGetSnapshotRequest) GetSnapshotType() (v TSnapshotType) {
	if !p.IsSetSnapshotType() {
		return TGetSnapshotRequest_SnapshotType_DEFAULT
	}
	return *p.SnapshotType
}
func (p *TGetSnapshotRequest) SetCluster(val *string) {
	p.Cluster = val
}
func (p *TGetSnapshotRequest) SetUser(val *string) {
	p.User = val
}
func (p *TGetSnapshotRequest) SetPasswd(val *string) {
	p.Passwd = val
}
func (p *TGetSnapshotRequest) SetDb(val *string) {
	p.Db = val
}
func (p *TGetSnapshotRequest) SetTable(val *string) {
	p.Table = val
}
func (p *TGetSnapshotRequest) SetToken(val *string) {
	p.Token = val
}
func (p *TGetSnapshotRequest) SetLabelName(val *string) {
	p.LabelName = val
}
func (p *TGetSnapshotRequest) SetSnapshotName(val *string) {
	p.SnapshotName = val
}
func (p *TGetSnapshotRequest) SetSnapshotType(val *TSnapshotType) {
	p.SnapshotType = val
}

var fieldIDToName_TGetSnapshotRequest = map[int16]string{
	1: "cluster",
	2: "user",
	3: "passwd",
	4: "db",
	5: "table",
	6: "token",
	7: "label_name",
	8: "snapshot_name",
	9: "snapshot_type",
}

func (p *TGetSnapshotRequest) IsSetCluster() bool {
	return p.Cluster != nil
}

func (p *TGetSnapshotRequest) IsSetUser() bool {
	return p.User != nil
}

func (p *TGetSnapshotRequest) IsSetPasswd() bool {
	return p.Passwd != nil
}

func (p *TGetSnapshotRequest) IsSetDb() bool {
	return p.Db != nil
}

func (p *TGetSnapshotRequest) IsSetTable() bool {
	return p.Table != nil
}

func (p *TGetSnapshotRequest) IsSetToken() bool {
	return p.Token != nil
}

func (p *TGetSnapshotRequest) IsSetLabelName() bool {
	return p.LabelName != nil
}

func (p *TGetSnapshotRequest) IsSetSnapshotName() bool {
	return p.SnapshotName != nil
}

func (p *TGetSnapshotRequest) IsSetSnapshotType() bool {
	return p.SnapshotType != nil
}

func (p *TGetSnapshotRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetSnapshotRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetSnapshotRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cluster = _field
	return nil
}
func (p *TGetSnapshotRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *TGetSnapshotRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Passwd = _field
	return nil
}
func (p *TGetSnapshotRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Db = _field
	return nil
}
func (p *TGetSnapshotRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Table = _field
	return nil
}
func (p *TGetSnapshotRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}
func (p *TGetSnapshotRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LabelName = _field
	return nil
}
func (p *TGetSnapshotRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SnapshotName = _field
	return nil
}
func (p *TGetSnapshotRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field *TSnapshotType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TSnapshotType(v)
		_field = &tmp
	}
	p.SnapshotType = _field
	return nil
}

func (p *TGetSnapshotRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetSnapshotRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetSnapshotRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCluster() {
		if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetSnapshotRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetSnapshotRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPasswd() {
		if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Passwd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetSnapshotRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDb() {
		if err = oprot.WriteFieldBegin("db", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Db); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TGetSnapshotRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTable() {
		if err = oprot.WriteFieldBegin("table", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Table); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TGetSnapshotRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TGetSnapshotRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabelName() {
		if err = oprot.WriteFieldBegin("label_name", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LabelName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TGetSnapshotRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotName() {
		if err = oprot.WriteFieldBegin("snapshot_name", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SnapshotName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TGetSnapshotRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotType() {
		if err = oprot.WriteFieldBegin("snapshot_type", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.SnapshotType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TGetSnapshotRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetSnapshotRequest(%+v)", *p)

}

func (p *TGetSnapshotRequest) DeepEqual(ano *TGetSnapshotRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field4DeepEqual(ano.Db) {
		return false
	}
	if !p.Field5DeepEqual(ano.Table) {
		return false
	}
	if !p.Field6DeepEqual(ano.Token) {
		return false
	}
	if !p.Field7DeepEqual(ano.LabelName) {
		return false
	}
	if !p.Field8DeepEqual(ano.SnapshotName) {
		return false
	}
	if !p.Field9DeepEqual(ano.SnapshotType) {
		return false
	}
	return true
}

func (p *TGetSnapshotRequest) Field1DeepEqual(src *string) bool {

	if p.Cluster == src {
		return true
	} else if p.Cluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetSnapshotRequest) Field2DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetSnapshotRequest) Field3DeepEqual(src *string) bool {

	if p.Passwd == src {
		return true
	} else if p.Passwd == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Passwd, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetSnapshotRequest) Field4DeepEqual(src *string) bool {

	if p.Db == src {
		return true
	} else if p.Db == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Db, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetSnapshotRequest) Field5DeepEqual(src *string) bool {

	if p.Table == src {
		return true
	} else if p.Table == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Table, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetSnapshotRequest) Field6DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetSnapshotRequest) Field7DeepEqual(src *string) bool {

	if p.LabelName == src {
		return true
	} else if p.LabelName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LabelName, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetSnapshotRequest) Field8DeepEqual(src *string) bool {

	if p.SnapshotName == src {
		return true
	} else if p.SnapshotName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SnapshotName, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetSnapshotRequest) Field9DeepEqual(src *TSnapshotType) bool {

	if p.SnapshotType == src {
		return true
	} else if p.SnapshotType == nil || src == nil {
		return false
	}
	if *p.SnapshotType != *src {
		return false
	}
	return true
}

type TGetSnapshotResult_ struct {
	Status        *status.TStatus        `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	Meta          []byte                 `thrift:"meta,2,optional" frugal:"2,optional,binary" json:"meta,omitempty"`
	JobInfo       []byte                 `thrift:"job_info,3,optional" frugal:"3,optional,binary" json:"job_info,omitempty"`
	MasterAddress *types.TNetworkAddress `thrift:"master_address,4,optional" frugal:"4,optional,types.TNetworkAddress" json:"master_address,omitempty"`
}

func NewTGetSnapshotResult_() *TGetSnapshotResult_ {
	return &TGetSnapshotResult_{}
}

func (p *TGetSnapshotResult_) InitDefault() {
}

var TGetSnapshotResult__Status_DEFAULT *status.TStatus

func (p *TGetSnapshotResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TGetSnapshotResult__Status_DEFAULT
	}
	return p.Status
}

var TGetSnapshotResult__Meta_DEFAULT []byte

func (p *TGetSnapshotResult_) GetMeta() (v []byte) {
	if !p.IsSetMeta() {
		return TGetSnapshotResult__Meta_DEFAULT
	}
	return p.Meta
}

var TGetSnapshotResult__JobInfo_DEFAULT []byte

func (p *TGetSnapshotResult_) GetJobInfo() (v []byte) {
	if !p.IsSetJobInfo() {
		return TGetSnapshotResult__JobInfo_DEFAULT
	}
	return p.JobInfo
}

var TGetSnapshotResult__MasterAddress_DEFAULT *types.TNetworkAddress

func (p *TGetSnapshotResult_) GetMasterAddress() (v *types.TNetworkAddress) {
	if !p.IsSetMasterAddress() {
		return TGetSnapshotResult__MasterAddress_DEFAULT
	}
	return p.MasterAddress
}
func (p *TGetSnapshotResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TGetSnapshotResult_) SetMeta(val []byte) {
	p.Meta = val
}
func (p *TGetSnapshotResult_) SetJobInfo(val []byte) {
	p.JobInfo = val
}
func (p *TGetSnapshotResult_) SetMasterAddress(val *types.TNetworkAddress) {
	p.MasterAddress = val
}

var fieldIDToName_TGetSnapshotResult_ = map[int16]string{
	1: "status",
	2: "meta",
	3: "job_info",
	4: "master_address",
}

func (p *TGetSnapshotResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TGetSnapshotResult_) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *TGetSnapshotResult_) IsSetJobInfo() bool {
	return p.JobInfo != nil
}

func (p *TGetSnapshotResult_) IsSetMasterAddress() bool {
	return p.MasterAddress != nil
}

func (p *TGetSnapshotResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetSnapshotResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetSnapshotResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TGetSnapshotResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Meta = _field
	return nil
}
func (p *TGetSnapshotResult_) ReadField3(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.JobInfo = _field
	return nil
}
func (p *TGetSnapshotResult_) ReadField4(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MasterAddress = _field
	return nil
}

func (p *TGetSnapshotResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetSnapshotResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetSnapshotResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetSnapshotResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMeta() {
		if err = oprot.WriteFieldBegin("meta", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBinary([]byte(p.Meta)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetSnapshotResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobInfo() {
		if err = oprot.WriteFieldBegin("job_info", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBinary([]byte(p.JobInfo)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetSnapshotResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMasterAddress() {
		if err = oprot.WriteFieldBegin("master_address", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MasterAddress.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TGetSnapshotResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetSnapshotResult_(%+v)", *p)

}

func (p *TGetSnapshotResult_) DeepEqual(ano *TGetSnapshotResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.Meta) {
		return false
	}
	if !p.Field3DeepEqual(ano.JobInfo) {
		return false
	}
	if !p.Field4DeepEqual(ano.MasterAddress) {
		return false
	}
	return true
}

func (p *TGetSnapshotResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TGetSnapshotResult_) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.Meta, src) != 0 {
		return false
	}
	return true
}
func (p *TGetSnapshotResult_) Field3DeepEqual(src []byte) bool {

	if bytes.Compare(p.JobInfo, src) != 0 {
		return false
	}
	return true
}
func (p *TGetSnapshotResult_) Field4DeepEqual(src *types.TNetworkAddress) bool {

	if !p.MasterAddress.DeepEqual(src) {
		return false
	}
	return true
}

type TTableRef struct {
	Table     *string `thrift:"table,1,optional" frugal:"1,optional,string" json:"table,omitempty"`
	AliasName *string `thrift:"alias_name,3,optional" frugal:"3,optional,string" json:"alias_name,omitempty"`
}

func NewTTableRef() *TTableRef {
	return &TTableRef{}
}

func (p *TTableRef) InitDefault() {
}

var TTableRef_Table_DEFAULT string

func (p *TTableRef) GetTable() (v string) {
	if !p.IsSetTable() {
		return TTableRef_Table_DEFAULT
	}
	return *p.Table
}

var TTableRef_AliasName_DEFAULT string

func (p *TTableRef) GetAliasName() (v string) {
	if !p.IsSetAliasName() {
		return TTableRef_AliasName_DEFAULT
	}
	return *p.AliasName
}
func (p *TTableRef) SetTable(val *string) {
	p.Table = val
}
func (p *TTableRef) SetAliasName(val *string) {
	p.AliasName = val
}

var fieldIDToName_TTableRef = map[int16]string{
	1: "table",
	3: "alias_name",
}

func (p *TTableRef) IsSetTable() bool {
	return p.Table != nil
}

func (p *TTableRef) IsSetAliasName() bool {
	return p.AliasName != nil
}

func (p *TTableRef) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTableRef[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTableRef) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Table = _field
	return nil
}
func (p *TTableRef) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AliasName = _field
	return nil
}

func (p *TTableRef) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTableRef"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTableRef) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTable() {
		if err = oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Table); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTableRef) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAliasName() {
		if err = oprot.WriteFieldBegin("alias_name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AliasName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTableRef) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTableRef(%+v)", *p)

}

func (p *TTableRef) DeepEqual(ano *TTableRef) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Table) {
		return false
	}
	if !p.Field3DeepEqual(ano.AliasName) {
		return false
	}
	return true
}

func (p *TTableRef) Field1DeepEqual(src *string) bool {

	if p.Table == src {
		return true
	} else if p.Table == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Table, *src) != 0 {
		return false
	}
	return true
}
func (p *TTableRef) Field3DeepEqual(src *string) bool {

	if p.AliasName == src {
		return true
	} else if p.AliasName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AliasName, *src) != 0 {
		return false
	}
	return true
}

type TRestoreSnapshotRequest struct {
	Cluster         *string           `thrift:"cluster,1,optional" frugal:"1,optional,string" json:"cluster,omitempty"`
	User            *string           `thrift:"user,2,optional" frugal:"2,optional,string" json:"user,omitempty"`
	Passwd          *string           `thrift:"passwd,3,optional" frugal:"3,optional,string" json:"passwd,omitempty"`
	Db              *string           `thrift:"db,4,optional" frugal:"4,optional,string" json:"db,omitempty"`
	Table           *string           `thrift:"table,5,optional" frugal:"5,optional,string" json:"table,omitempty"`
	Token           *string           `thrift:"token,6,optional" frugal:"6,optional,string" json:"token,omitempty"`
	LabelName       *string           `thrift:"label_name,7,optional" frugal:"7,optional,string" json:"label_name,omitempty"`
	RepoName        *string           `thrift:"repo_name,8,optional" frugal:"8,optional,string" json:"repo_name,omitempty"`
	TableRefs       []*TTableRef      `thrift:"table_refs,9,optional" frugal:"9,optional,list<TTableRef>" json:"table_refs,omitempty"`
	Properties      map[string]string `thrift:"properties,10,optional" frugal:"10,optional,map<string:string>" json:"properties,omitempty"`
	Meta            []byte            `thrift:"meta,11,optional" frugal:"11,optional,binary" json:"meta,omitempty"`
	JobInfo         []byte            `thrift:"job_info,12,optional" frugal:"12,optional,binary" json:"job_info,omitempty"`
	CleanTables     *bool             `thrift:"clean_tables,13,optional" frugal:"13,optional,bool" json:"clean_tables,omitempty"`
	CleanPartitions *bool             `thrift:"clean_partitions,14,optional" frugal:"14,optional,bool" json:"clean_partitions,omitempty"`
	AtomicRestore   *bool             `thrift:"atomic_restore,15,optional" frugal:"15,optional,bool" json:"atomic_restore,omitempty"`
}

func NewTRestoreSnapshotRequest() *TRestoreSnapshotRequest {
	return &TRestoreSnapshotRequest{}
}

func (p *TRestoreSnapshotRequest) InitDefault() {
}

var TRestoreSnapshotRequest_Cluster_DEFAULT string

func (p *TRestoreSnapshotRequest) GetCluster() (v string) {
	if !p.IsSetCluster() {
		return TRestoreSnapshotRequest_Cluster_DEFAULT
	}
	return *p.Cluster
}

var TRestoreSnapshotRequest_User_DEFAULT string

func (p *TRestoreSnapshotRequest) GetUser() (v string) {
	if !p.IsSetUser() {
		return TRestoreSnapshotRequest_User_DEFAULT
	}
	return *p.User
}

var TRestoreSnapshotRequest_Passwd_DEFAULT string

func (p *TRestoreSnapshotRequest) GetPasswd() (v string) {
	if !p.IsSetPasswd() {
		return TRestoreSnapshotRequest_Passwd_DEFAULT
	}
	return *p.Passwd
}

var TRestoreSnapshotRequest_Db_DEFAULT string

func (p *TRestoreSnapshotRequest) GetDb() (v string) {
	if !p.IsSetDb() {
		return TRestoreSnapshotRequest_Db_DEFAULT
	}
	return *p.Db
}

var TRestoreSnapshotRequest_Table_DEFAULT string

func (p *TRestoreSnapshotRequest) GetTable() (v string) {
	if !p.IsSetTable() {
		return TRestoreSnapshotRequest_Table_DEFAULT
	}
	return *p.Table
}

var TRestoreSnapshotRequest_Token_DEFAULT string

func (p *TRestoreSnapshotRequest) GetToken() (v string) {
	if !p.IsSetToken() {
		return TRestoreSnapshotRequest_Token_DEFAULT
	}
	return *p.Token
}

var TRestoreSnapshotRequest_LabelName_DEFAULT string

func (p *TRestoreSnapshotRequest) GetLabelName() (v string) {
	if !p.IsSetLabelName() {
		return TRestoreSnapshotRequest_LabelName_DEFAULT
	}
	return *p.LabelName
}

var TRestoreSnapshotRequest_RepoName_DEFAULT string

func (p *TRestoreSnapshotRequest) GetRepoName() (v string) {
	if !p.IsSetRepoName() {
		return TRestoreSnapshotRequest_RepoName_DEFAULT
	}
	return *p.RepoName
}

var TRestoreSnapshotRequest_TableRefs_DEFAULT []*TTableRef

func (p *TRestoreSnapshotRequest) GetTableRefs() (v []*TTableRef) {
	if !p.IsSetTableRefs() {
		return TRestoreSnapshotRequest_TableRefs_DEFAULT
	}
	return p.TableRefs
}

var TRestoreSnapshotRequest_Properties_DEFAULT map[string]string

func (p *TRestoreSnapshotRequest) GetProperties() (v map[string]string) {
	if !p.IsSetProperties() {
		return TRestoreSnapshotRequest_Properties_DEFAULT
	}
	return p.Properties
}

var TRestoreSnapshotRequest_Meta_DEFAULT []byte

func (p *TRestoreSnapshotRequest) GetMeta() (v []byte) {
	if !p.IsSetMeta() {
		return TRestoreSnapshotRequest_Meta_DEFAULT
	}
	return p.Meta
}

var TRestoreSnapshotRequest_JobInfo_DEFAULT []byte

func (p *TRestoreSnapshotRequest) GetJobInfo() (v []byte) {
	if !p.IsSetJobInfo() {
		return TRestoreSnapshotRequest_JobInfo_DEFAULT
	}
	return p.JobInfo
}

var TRestoreSnapshotRequest_CleanTables_DEFAULT bool

func (p *TRestoreSnapshotRequest) GetCleanTables() (v bool) {
	if !p.IsSetCleanTables() {
		return TRestoreSnapshotRequest_CleanTables_DEFAULT
	}
	return *p.CleanTables
}

var TRestoreSnapshotRequest_CleanPartitions_DEFAULT bool

func (p *TRestoreSnapshotRequest) GetCleanPartitions() (v bool) {
	if !p.IsSetCleanPartitions() {
		return TRestoreSnapshotRequest_CleanPartitions_DEFAULT
	}
	return *p.CleanPartitions
}

var TRestoreSnapshotRequest_AtomicRestore_DEFAULT bool

func (p *TRestoreSnapshotRequest) GetAtomicRestore() (v bool) {
	if !p.IsSetAtomicRestore() {
		return TRestoreSnapshotRequest_AtomicRestore_DEFAULT
	}
	return *p.AtomicRestore
}
func (p *TRestoreSnapshotRequest) SetCluster(val *string) {
	p.Cluster = val
}
func (p *TRestoreSnapshotRequest) SetUser(val *string) {
	p.User = val
}
func (p *TRestoreSnapshotRequest) SetPasswd(val *string) {
	p.Passwd = val
}
func (p *TRestoreSnapshotRequest) SetDb(val *string) {
	p.Db = val
}
func (p *TRestoreSnapshotRequest) SetTable(val *string) {
	p.Table = val
}
func (p *TRestoreSnapshotRequest) SetToken(val *string) {
	p.Token = val
}
func (p *TRestoreSnapshotRequest) SetLabelName(val *string) {
	p.LabelName = val
}
func (p *TRestoreSnapshotRequest) SetRepoName(val *string) {
	p.RepoName = val
}
func (p *TRestoreSnapshotRequest) SetTableRefs(val []*TTableRef) {
	p.TableRefs = val
}
func (p *TRestoreSnapshotRequest) SetProperties(val map[string]string) {
	p.Properties = val
}
func (p *TRestoreSnapshotRequest) SetMeta(val []byte) {
	p.Meta = val
}
func (p *TRestoreSnapshotRequest) SetJobInfo(val []byte) {
	p.JobInfo = val
}
func (p *TRestoreSnapshotRequest) SetCleanTables(val *bool) {
	p.CleanTables = val
}
func (p *TRestoreSnapshotRequest) SetCleanPartitions(val *bool) {
	p.CleanPartitions = val
}
func (p *TRestoreSnapshotRequest) SetAtomicRestore(val *bool) {
	p.AtomicRestore = val
}

var fieldIDToName_TRestoreSnapshotRequest = map[int16]string{
	1:  "cluster",
	2:  "user",
	3:  "passwd",
	4:  "db",
	5:  "table",
	6:  "token",
	7:  "label_name",
	8:  "repo_name",
	9:  "table_refs",
	10: "properties",
	11: "meta",
	12: "job_info",
	13: "clean_tables",
	14: "clean_partitions",
	15: "atomic_restore",
}

func (p *TRestoreSnapshotRequest) IsSetCluster() bool {
	return p.Cluster != nil
}

func (p *TRestoreSnapshotRequest) IsSetUser() bool {
	return p.User != nil
}

func (p *TRestoreSnapshotRequest) IsSetPasswd() bool {
	return p.Passwd != nil
}

func (p *TRestoreSnapshotRequest) IsSetDb() bool {
	return p.Db != nil
}

func (p *TRestoreSnapshotRequest) IsSetTable() bool {
	return p.Table != nil
}

func (p *TRestoreSnapshotRequest) IsSetToken() bool {
	return p.Token != nil
}

func (p *TRestoreSnapshotRequest) IsSetLabelName() bool {
	return p.LabelName != nil
}

func (p *TRestoreSnapshotRequest) IsSetRepoName() bool {
	return p.RepoName != nil
}

func (p *TRestoreSnapshotRequest) IsSetTableRefs() bool {
	return p.TableRefs != nil
}

func (p *TRestoreSnapshotRequest) IsSetProperties() bool {
	return p.Properties != nil
}

func (p *TRestoreSnapshotRequest) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *TRestoreSnapshotRequest) IsSetJobInfo() bool {
	return p.JobInfo != nil
}

func (p *TRestoreSnapshotRequest) IsSetCleanTables() bool {
	return p.CleanTables != nil
}

func (p *TRestoreSnapshotRequest) IsSetCleanPartitions() bool {
	return p.CleanPartitions != nil
}

func (p *TRestoreSnapshotRequest) IsSetAtomicRestore() bool {
	return p.AtomicRestore != nil
}

func (p *TRestoreSnapshotRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRestoreSnapshotRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TRestoreSnapshotRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cluster = _field
	return nil
}
func (p *TRestoreSnapshotRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *TRestoreSnapshotRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Passwd = _field
	return nil
}
func (p *TRestoreSnapshotRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Db = _field
	return nil
}
func (p *TRestoreSnapshotRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Table = _field
	return nil
}
func (p *TRestoreSnapshotRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}
func (p *TRestoreSnapshotRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LabelName = _field
	return nil
}
func (p *TRestoreSnapshotRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RepoName = _field
	return nil
}
func (p *TRestoreSnapshotRequest) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTableRef, 0, size)
	values := make([]TTableRef, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TableRefs = _field
	return nil
}
func (p *TRestoreSnapshotRequest) ReadField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Properties = _field
	return nil
}
func (p *TRestoreSnapshotRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Meta = _field
	return nil
}
func (p *TRestoreSnapshotRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.JobInfo = _field
	return nil
}
func (p *TRestoreSnapshotRequest) ReadField13(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CleanTables = _field
	return nil
}
func (p *TRestoreSnapshotRequest) ReadField14(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CleanPartitions = _field
	return nil
}
func (p *TRestoreSnapshotRequest) ReadField15(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AtomicRestore = _field
	return nil
}

func (p *TRestoreSnapshotRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TRestoreSnapshotRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TRestoreSnapshotRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCluster() {
		if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TRestoreSnapshotRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TRestoreSnapshotRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPasswd() {
		if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Passwd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TRestoreSnapshotRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDb() {
		if err = oprot.WriteFieldBegin("db", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Db); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TRestoreSnapshotRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTable() {
		if err = oprot.WriteFieldBegin("table", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Table); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TRestoreSnapshotRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TRestoreSnapshotRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabelName() {
		if err = oprot.WriteFieldBegin("label_name", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LabelName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TRestoreSnapshotRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetRepoName() {
		if err = oprot.WriteFieldBegin("repo_name", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RepoName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TRestoreSnapshotRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableRefs() {
		if err = oprot.WriteFieldBegin("table_refs", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TableRefs)); err != nil {
			return err
		}
		for _, v := range p.TableRefs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TRestoreSnapshotRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperties() {
		if err = oprot.WriteFieldBegin("properties", thrift.MAP, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
			return err
		}
		for k, v := range p.Properties {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TRestoreSnapshotRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetMeta() {
		if err = oprot.WriteFieldBegin("meta", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBinary([]byte(p.Meta)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TRestoreSnapshotRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobInfo() {
		if err = oprot.WriteFieldBegin("job_info", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBinary([]byte(p.JobInfo)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TRestoreSnapshotRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetCleanTables() {
		if err = oprot.WriteFieldBegin("clean_tables", thrift.BOOL, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.CleanTables); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TRestoreSnapshotRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetCleanPartitions() {
		if err = oprot.WriteFieldBegin("clean_partitions", thrift.BOOL, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.CleanPartitions); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TRestoreSnapshotRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetAtomicRestore() {
		if err = oprot.WriteFieldBegin("atomic_restore", thrift.BOOL, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.AtomicRestore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TRestoreSnapshotRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRestoreSnapshotRequest(%+v)", *p)

}

func (p *TRestoreSnapshotRequest) DeepEqual(ano *TRestoreSnapshotRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field4DeepEqual(ano.Db) {
		return false
	}
	if !p.Field5DeepEqual(ano.Table) {
		return false
	}
	if !p.Field6DeepEqual(ano.Token) {
		return false
	}
	if !p.Field7DeepEqual(ano.LabelName) {
		return false
	}
	if !p.Field8DeepEqual(ano.RepoName) {
		return false
	}
	if !p.Field9DeepEqual(ano.TableRefs) {
		return false
	}
	if !p.Field10DeepEqual(ano.Properties) {
		return false
	}
	if !p.Field11DeepEqual(ano.Meta) {
		return false
	}
	if !p.Field12DeepEqual(ano.JobInfo) {
		return false
	}
	if !p.Field13DeepEqual(ano.CleanTables) {
		return false
	}
	if !p.Field14DeepEqual(ano.CleanPartitions) {
		return false
	}
	if !p.Field15DeepEqual(ano.AtomicRestore) {
		return false
	}
	return true
}

func (p *TRestoreSnapshotRequest) Field1DeepEqual(src *string) bool {

	if p.Cluster == src {
		return true
	} else if p.Cluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TRestoreSnapshotRequest) Field2DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *TRestoreSnapshotRequest) Field3DeepEqual(src *string) bool {

	if p.Passwd == src {
		return true
	} else if p.Passwd == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Passwd, *src) != 0 {
		return false
	}
	return true
}
func (p *TRestoreSnapshotRequest) Field4DeepEqual(src *string) bool {

	if p.Db == src {
		return true
	} else if p.Db == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Db, *src) != 0 {
		return false
	}
	return true
}
func (p *TRestoreSnapshotRequest) Field5DeepEqual(src *string) bool {

	if p.Table == src {
		return true
	} else if p.Table == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Table, *src) != 0 {
		return false
	}
	return true
}
func (p *TRestoreSnapshotRequest) Field6DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *TRestoreSnapshotRequest) Field7DeepEqual(src *string) bool {

	if p.LabelName == src {
		return true
	} else if p.LabelName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LabelName, *src) != 0 {
		return false
	}
	return true
}
func (p *TRestoreSnapshotRequest) Field8DeepEqual(src *string) bool {

	if p.RepoName == src {
		return true
	} else if p.RepoName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.RepoName, *src) != 0 {
		return false
	}
	return true
}
func (p *TRestoreSnapshotRequest) Field9DeepEqual(src []*TTableRef) bool {

	if len(p.TableRefs) != len(src) {
		return false
	}
	for i, v := range p.TableRefs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TRestoreSnapshotRequest) Field10DeepEqual(src map[string]string) bool {

	if len(p.Properties) != len(src) {
		return false
	}
	for k, v := range p.Properties {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TRestoreSnapshotRequest) Field11DeepEqual(src []byte) bool {

	if bytes.Compare(p.Meta, src) != 0 {
		return false
	}
	return true
}
func (p *TRestoreSnapshotRequest) Field12DeepEqual(src []byte) bool {

	if bytes.Compare(p.JobInfo, src) != 0 {
		return false
	}
	return true
}
func (p *TRestoreSnapshotRequest) Field13DeepEqual(src *bool) bool {

	if p.CleanTables == src {
		return true
	} else if p.CleanTables == nil || src == nil {
		return false
	}
	if *p.CleanTables != *src {
		return false
	}
	return true
}
func (p *TRestoreSnapshotRequest) Field14DeepEqual(src *bool) bool {

	if p.CleanPartitions == src {
		return true
	} else if p.CleanPartitions == nil || src == nil {
		return false
	}
	if *p.CleanPartitions != *src {
		return false
	}
	return true
}
func (p *TRestoreSnapshotRequest) Field15DeepEqual(src *bool) bool {

	if p.AtomicRestore == src {
		return true
	} else if p.AtomicRestore == nil || src == nil {
		return false
	}
	if *p.AtomicRestore != *src {
		return false
	}
	return true
}

type TRestoreSnapshotResult_ struct {
	Status        *status.TStatus        `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	MasterAddress *types.TNetworkAddress `thrift:"master_address,2,optional" frugal:"2,optional,types.TNetworkAddress" json:"master_address,omitempty"`
}

func NewTRestoreSnapshotResult_() *TRestoreSnapshotResult_ {
	return &TRestoreSnapshotResult_{}
}

func (p *TRestoreSnapshotResult_) InitDefault() {
}

var TRestoreSnapshotResult__Status_DEFAULT *status.TStatus

func (p *TRestoreSnapshotResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TRestoreSnapshotResult__Status_DEFAULT
	}
	return p.Status
}

var TRestoreSnapshotResult__MasterAddress_DEFAULT *types.TNetworkAddress

func (p *TRestoreSnapshotResult_) GetMasterAddress() (v *types.TNetworkAddress) {
	if !p.IsSetMasterAddress() {
		return TRestoreSnapshotResult__MasterAddress_DEFAULT
	}
	return p.MasterAddress
}
func (p *TRestoreSnapshotResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TRestoreSnapshotResult_) SetMasterAddress(val *types.TNetworkAddress) {
	p.MasterAddress = val
}

var fieldIDToName_TRestoreSnapshotResult_ = map[int16]string{
	1: "status",
	2: "master_address",
}

func (p *TRestoreSnapshotResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TRestoreSnapshotResult_) IsSetMasterAddress() bool {
	return p.MasterAddress != nil
}

func (p *TRestoreSnapshotResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRestoreSnapshotResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TRestoreSnapshotResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TRestoreSnapshotResult_) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MasterAddress = _field
	return nil
}

func (p *TRestoreSnapshotResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TRestoreSnapshotResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TRestoreSnapshotResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TRestoreSnapshotResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMasterAddress() {
		if err = oprot.WriteFieldBegin("master_address", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MasterAddress.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TRestoreSnapshotResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRestoreSnapshotResult_(%+v)", *p)

}

func (p *TRestoreSnapshotResult_) DeepEqual(ano *TRestoreSnapshotResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.MasterAddress) {
		return false
	}
	return true
}

func (p *TRestoreSnapshotResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TRestoreSnapshotResult_) Field2DeepEqual(src *types.TNetworkAddress) bool {

	if !p.MasterAddress.DeepEqual(src) {
		return false
	}
	return true
}

type TPlsqlStoredProcedure struct {
	Name        *string `thrift:"name,1,optional" frugal:"1,optional,string" json:"name,omitempty"`
	CatalogId   *int64  `thrift:"catalogId,2,optional" frugal:"2,optional,i64" json:"catalogId,omitempty"`
	DbId        *int64  `thrift:"dbId,3,optional" frugal:"3,optional,i64" json:"dbId,omitempty"`
	PackageName *string `thrift:"packageName,4,optional" frugal:"4,optional,string" json:"packageName,omitempty"`
	OwnerName   *string `thrift:"ownerName,5,optional" frugal:"5,optional,string" json:"ownerName,omitempty"`
	Source      *string `thrift:"source,6,optional" frugal:"6,optional,string" json:"source,omitempty"`
	CreateTime  *string `thrift:"createTime,7,optional" frugal:"7,optional,string" json:"createTime,omitempty"`
	ModifyTime  *string `thrift:"modifyTime,8,optional" frugal:"8,optional,string" json:"modifyTime,omitempty"`
}

func NewTPlsqlStoredProcedure() *TPlsqlStoredProcedure {
	return &TPlsqlStoredProcedure{}
}

func (p *TPlsqlStoredProcedure) InitDefault() {
}

var TPlsqlStoredProcedure_Name_DEFAULT string

func (p *TPlsqlStoredProcedure) GetName() (v string) {
	if !p.IsSetName() {
		return TPlsqlStoredProcedure_Name_DEFAULT
	}
	return *p.Name
}

var TPlsqlStoredProcedure_CatalogId_DEFAULT int64

func (p *TPlsqlStoredProcedure) GetCatalogId() (v int64) {
	if !p.IsSetCatalogId() {
		return TPlsqlStoredProcedure_CatalogId_DEFAULT
	}
	return *p.CatalogId
}

var TPlsqlStoredProcedure_DbId_DEFAULT int64

func (p *TPlsqlStoredProcedure) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TPlsqlStoredProcedure_DbId_DEFAULT
	}
	return *p.DbId
}

var TPlsqlStoredProcedure_PackageName_DEFAULT string

func (p *TPlsqlStoredProcedure) GetPackageName() (v string) {
	if !p.IsSetPackageName() {
		return TPlsqlStoredProcedure_PackageName_DEFAULT
	}
	return *p.PackageName
}

var TPlsqlStoredProcedure_OwnerName_DEFAULT string

func (p *TPlsqlStoredProcedure) GetOwnerName() (v string) {
	if !p.IsSetOwnerName() {
		return TPlsqlStoredProcedure_OwnerName_DEFAULT
	}
	return *p.OwnerName
}

var TPlsqlStoredProcedure_Source_DEFAULT string

func (p *TPlsqlStoredProcedure) GetSource() (v string) {
	if !p.IsSetSource() {
		return TPlsqlStoredProcedure_Source_DEFAULT
	}
	return *p.Source
}

var TPlsqlStoredProcedure_CreateTime_DEFAULT string

func (p *TPlsqlStoredProcedure) GetCreateTime() (v string) {
	if !p.IsSetCreateTime() {
		return TPlsqlStoredProcedure_CreateTime_DEFAULT
	}
	return *p.CreateTime
}

var TPlsqlStoredProcedure_ModifyTime_DEFAULT string

func (p *TPlsqlStoredProcedure) GetModifyTime() (v string) {
	if !p.IsSetModifyTime() {
		return TPlsqlStoredProcedure_ModifyTime_DEFAULT
	}
	return *p.ModifyTime
}
func (p *TPlsqlStoredProcedure) SetName(val *string) {
	p.Name = val
}
func (p *TPlsqlStoredProcedure) SetCatalogId(val *int64) {
	p.CatalogId = val
}
func (p *TPlsqlStoredProcedure) SetDbId(val *int64) {
	p.DbId = val
}
func (p *TPlsqlStoredProcedure) SetPackageName(val *string) {
	p.PackageName = val
}
func (p *TPlsqlStoredProcedure) SetOwnerName(val *string) {
	p.OwnerName = val
}
func (p *TPlsqlStoredProcedure) SetSource(val *string) {
	p.Source = val
}
func (p *TPlsqlStoredProcedure) SetCreateTime(val *string) {
	p.CreateTime = val
}
func (p *TPlsqlStoredProcedure) SetModifyTime(val *string) {
	p.ModifyTime = val
}

var fieldIDToName_TPlsqlStoredProcedure = map[int16]string{
	1: "name",
	2: "catalogId",
	3: "dbId",
	4: "packageName",
	5: "ownerName",
	6: "source",
	7: "createTime",
	8: "modifyTime",
}

func (p *TPlsqlStoredProcedure) IsSetName() bool {
	return p.Name != nil
}

func (p *TPlsqlStoredProcedure) IsSetCatalogId() bool {
	return p.CatalogId != nil
}

func (p *TPlsqlStoredProcedure) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TPlsqlStoredProcedure) IsSetPackageName() bool {
	return p.PackageName != nil
}

func (p *TPlsqlStoredProcedure) IsSetOwnerName() bool {
	return p.OwnerName != nil
}

func (p *TPlsqlStoredProcedure) IsSetSource() bool {
	return p.Source != nil
}

func (p *TPlsqlStoredProcedure) IsSetCreateTime() bool {
	return p.CreateTime != nil
}

func (p *TPlsqlStoredProcedure) IsSetModifyTime() bool {
	return p.ModifyTime != nil
}

func (p *TPlsqlStoredProcedure) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPlsqlStoredProcedure[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TPlsqlStoredProcedure) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *TPlsqlStoredProcedure) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CatalogId = _field
	return nil
}
func (p *TPlsqlStoredProcedure) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TPlsqlStoredProcedure) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PackageName = _field
	return nil
}
func (p *TPlsqlStoredProcedure) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OwnerName = _field
	return nil
}
func (p *TPlsqlStoredProcedure) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Source = _field
	return nil
}
func (p *TPlsqlStoredProcedure) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreateTime = _field
	return nil
}
func (p *TPlsqlStoredProcedure) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ModifyTime = _field
	return nil
}

func (p *TPlsqlStoredProcedure) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPlsqlStoredProcedure"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPlsqlStoredProcedure) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPlsqlStoredProcedure) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalogId() {
		if err = oprot.WriteFieldBegin("catalogId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CatalogId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPlsqlStoredProcedure) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("dbId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPlsqlStoredProcedure) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPackageName() {
		if err = oprot.WriteFieldBegin("packageName", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PackageName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TPlsqlStoredProcedure) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwnerName() {
		if err = oprot.WriteFieldBegin("ownerName", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OwnerName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TPlsqlStoredProcedure) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err = oprot.WriteFieldBegin("source", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Source); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TPlsqlStoredProcedure) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err = oprot.WriteFieldBegin("createTime", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CreateTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TPlsqlStoredProcedure) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetModifyTime() {
		if err = oprot.WriteFieldBegin("modifyTime", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ModifyTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TPlsqlStoredProcedure) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPlsqlStoredProcedure(%+v)", *p)

}

func (p *TPlsqlStoredProcedure) DeepEqual(ano *TPlsqlStoredProcedure) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.CatalogId) {
		return false
	}
	if !p.Field3DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field4DeepEqual(ano.PackageName) {
		return false
	}
	if !p.Field5DeepEqual(ano.OwnerName) {
		return false
	}
	if !p.Field6DeepEqual(ano.Source) {
		return false
	}
	if !p.Field7DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field8DeepEqual(ano.ModifyTime) {
		return false
	}
	return true
}

func (p *TPlsqlStoredProcedure) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *TPlsqlStoredProcedure) Field2DeepEqual(src *int64) bool {

	if p.CatalogId == src {
		return true
	} else if p.CatalogId == nil || src == nil {
		return false
	}
	if *p.CatalogId != *src {
		return false
	}
	return true
}
func (p *TPlsqlStoredProcedure) Field3DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}
func (p *TPlsqlStoredProcedure) Field4DeepEqual(src *string) bool {

	if p.PackageName == src {
		return true
	} else if p.PackageName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PackageName, *src) != 0 {
		return false
	}
	return true
}
func (p *TPlsqlStoredProcedure) Field5DeepEqual(src *string) bool {

	if p.OwnerName == src {
		return true
	} else if p.OwnerName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.OwnerName, *src) != 0 {
		return false
	}
	return true
}
func (p *TPlsqlStoredProcedure) Field6DeepEqual(src *string) bool {

	if p.Source == src {
		return true
	} else if p.Source == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Source, *src) != 0 {
		return false
	}
	return true
}
func (p *TPlsqlStoredProcedure) Field7DeepEqual(src *string) bool {

	if p.CreateTime == src {
		return true
	} else if p.CreateTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CreateTime, *src) != 0 {
		return false
	}
	return true
}
func (p *TPlsqlStoredProcedure) Field8DeepEqual(src *string) bool {

	if p.ModifyTime == src {
		return true
	} else if p.ModifyTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ModifyTime, *src) != 0 {
		return false
	}
	return true
}

type TPlsqlPackage struct {
	Name      *string `thrift:"name,1,optional" frugal:"1,optional,string" json:"name,omitempty"`
	CatalogId *int64  `thrift:"catalogId,2,optional" frugal:"2,optional,i64" json:"catalogId,omitempty"`
	DbId      *int64  `thrift:"dbId,3,optional" frugal:"3,optional,i64" json:"dbId,omitempty"`
	OwnerName *string `thrift:"ownerName,4,optional" frugal:"4,optional,string" json:"ownerName,omitempty"`
	Header    *string `thrift:"header,5,optional" frugal:"5,optional,string" json:"header,omitempty"`
	Body      *string `thrift:"body,6,optional" frugal:"6,optional,string" json:"body,omitempty"`
}

func NewTPlsqlPackage() *TPlsqlPackage {
	return &TPlsqlPackage{}
}

func (p *TPlsqlPackage) InitDefault() {
}

var TPlsqlPackage_Name_DEFAULT string

func (p *TPlsqlPackage) GetName() (v string) {
	if !p.IsSetName() {
		return TPlsqlPackage_Name_DEFAULT
	}
	return *p.Name
}

var TPlsqlPackage_CatalogId_DEFAULT int64

func (p *TPlsqlPackage) GetCatalogId() (v int64) {
	if !p.IsSetCatalogId() {
		return TPlsqlPackage_CatalogId_DEFAULT
	}
	return *p.CatalogId
}

var TPlsqlPackage_DbId_DEFAULT int64

func (p *TPlsqlPackage) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TPlsqlPackage_DbId_DEFAULT
	}
	return *p.DbId
}

var TPlsqlPackage_OwnerName_DEFAULT string

func (p *TPlsqlPackage) GetOwnerName() (v string) {
	if !p.IsSetOwnerName() {
		return TPlsqlPackage_OwnerName_DEFAULT
	}
	return *p.OwnerName
}

var TPlsqlPackage_Header_DEFAULT string

func (p *TPlsqlPackage) GetHeader() (v string) {
	if !p.IsSetHeader() {
		return TPlsqlPackage_Header_DEFAULT
	}
	return *p.Header
}

var TPlsqlPackage_Body_DEFAULT string

func (p *TPlsqlPackage) GetBody() (v string) {
	if !p.IsSetBody() {
		return TPlsqlPackage_Body_DEFAULT
	}
	return *p.Body
}
func (p *TPlsqlPackage) SetName(val *string) {
	p.Name = val
}
func (p *TPlsqlPackage) SetCatalogId(val *int64) {
	p.CatalogId = val
}
func (p *TPlsqlPackage) SetDbId(val *int64) {
	p.DbId = val
}
func (p *TPlsqlPackage) SetOwnerName(val *string) {
	p.OwnerName = val
}
func (p *TPlsqlPackage) SetHeader(val *string) {
	p.Header = val
}
func (p *TPlsqlPackage) SetBody(val *string) {
	p.Body = val
}

var fieldIDToName_TPlsqlPackage = map[int16]string{
	1: "name",
	2: "catalogId",
	3: "dbId",
	4: "ownerName",
	5: "header",
	6: "body",
}

func (p *TPlsqlPackage) IsSetName() bool {
	return p.Name != nil
}

func (p *TPlsqlPackage) IsSetCatalogId() bool {
	return p.CatalogId != nil
}

func (p *TPlsqlPackage) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TPlsqlPackage) IsSetOwnerName() bool {
	return p.OwnerName != nil
}

func (p *TPlsqlPackage) IsSetHeader() bool {
	return p.Header != nil
}

func (p *TPlsqlPackage) IsSetBody() bool {
	return p.Body != nil
}

func (p *TPlsqlPackage) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPlsqlPackage[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TPlsqlPackage) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *TPlsqlPackage) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CatalogId = _field
	return nil
}
func (p *TPlsqlPackage) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TPlsqlPackage) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OwnerName = _field
	return nil
}
func (p *TPlsqlPackage) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Header = _field
	return nil
}
func (p *TPlsqlPackage) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Body = _field
	return nil
}

func (p *TPlsqlPackage) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPlsqlPackage"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPlsqlPackage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPlsqlPackage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalogId() {
		if err = oprot.WriteFieldBegin("catalogId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CatalogId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPlsqlPackage) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("dbId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPlsqlPackage) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwnerName() {
		if err = oprot.WriteFieldBegin("ownerName", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OwnerName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TPlsqlPackage) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeader() {
		if err = oprot.WriteFieldBegin("header", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Header); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TPlsqlPackage) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBody() {
		if err = oprot.WriteFieldBegin("body", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Body); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TPlsqlPackage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPlsqlPackage(%+v)", *p)

}

func (p *TPlsqlPackage) DeepEqual(ano *TPlsqlPackage) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.CatalogId) {
		return false
	}
	if !p.Field3DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field4DeepEqual(ano.OwnerName) {
		return false
	}
	if !p.Field5DeepEqual(ano.Header) {
		return false
	}
	if !p.Field6DeepEqual(ano.Body) {
		return false
	}
	return true
}

func (p *TPlsqlPackage) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *TPlsqlPackage) Field2DeepEqual(src *int64) bool {

	if p.CatalogId == src {
		return true
	} else if p.CatalogId == nil || src == nil {
		return false
	}
	if *p.CatalogId != *src {
		return false
	}
	return true
}
func (p *TPlsqlPackage) Field3DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}
func (p *TPlsqlPackage) Field4DeepEqual(src *string) bool {

	if p.OwnerName == src {
		return true
	} else if p.OwnerName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.OwnerName, *src) != 0 {
		return false
	}
	return true
}
func (p *TPlsqlPackage) Field5DeepEqual(src *string) bool {

	if p.Header == src {
		return true
	} else if p.Header == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Header, *src) != 0 {
		return false
	}
	return true
}
func (p *TPlsqlPackage) Field6DeepEqual(src *string) bool {

	if p.Body == src {
		return true
	} else if p.Body == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Body, *src) != 0 {
		return false
	}
	return true
}

type TPlsqlProcedureKey struct {
	Name      *string `thrift:"name,1,optional" frugal:"1,optional,string" json:"name,omitempty"`
	CatalogId *int64  `thrift:"catalogId,2,optional" frugal:"2,optional,i64" json:"catalogId,omitempty"`
	DbId      *int64  `thrift:"dbId,3,optional" frugal:"3,optional,i64" json:"dbId,omitempty"`
}

func NewTPlsqlProcedureKey() *TPlsqlProcedureKey {
	return &TPlsqlProcedureKey{}
}

func (p *TPlsqlProcedureKey) InitDefault() {
}

var TPlsqlProcedureKey_Name_DEFAULT string

func (p *TPlsqlProcedureKey) GetName() (v string) {
	if !p.IsSetName() {
		return TPlsqlProcedureKey_Name_DEFAULT
	}
	return *p.Name
}

var TPlsqlProcedureKey_CatalogId_DEFAULT int64

func (p *TPlsqlProcedureKey) GetCatalogId() (v int64) {
	if !p.IsSetCatalogId() {
		return TPlsqlProcedureKey_CatalogId_DEFAULT
	}
	return *p.CatalogId
}

var TPlsqlProcedureKey_DbId_DEFAULT int64

func (p *TPlsqlProcedureKey) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TPlsqlProcedureKey_DbId_DEFAULT
	}
	return *p.DbId
}
func (p *TPlsqlProcedureKey) SetName(val *string) {
	p.Name = val
}
func (p *TPlsqlProcedureKey) SetCatalogId(val *int64) {
	p.CatalogId = val
}
func (p *TPlsqlProcedureKey) SetDbId(val *int64) {
	p.DbId = val
}

var fieldIDToName_TPlsqlProcedureKey = map[int16]string{
	1: "name",
	2: "catalogId",
	3: "dbId",
}

func (p *TPlsqlProcedureKey) IsSetName() bool {
	return p.Name != nil
}

func (p *TPlsqlProcedureKey) IsSetCatalogId() bool {
	return p.CatalogId != nil
}

func (p *TPlsqlProcedureKey) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TPlsqlProcedureKey) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPlsqlProcedureKey[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TPlsqlProcedureKey) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *TPlsqlProcedureKey) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CatalogId = _field
	return nil
}
func (p *TPlsqlProcedureKey) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}

func (p *TPlsqlProcedureKey) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPlsqlProcedureKey"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPlsqlProcedureKey) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPlsqlProcedureKey) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalogId() {
		if err = oprot.WriteFieldBegin("catalogId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CatalogId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPlsqlProcedureKey) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("dbId", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPlsqlProcedureKey) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPlsqlProcedureKey(%+v)", *p)

}

func (p *TPlsqlProcedureKey) DeepEqual(ano *TPlsqlProcedureKey) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.CatalogId) {
		return false
	}
	if !p.Field3DeepEqual(ano.DbId) {
		return false
	}
	return true
}

func (p *TPlsqlProcedureKey) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *TPlsqlProcedureKey) Field2DeepEqual(src *int64) bool {

	if p.CatalogId == src {
		return true
	} else if p.CatalogId == nil || src == nil {
		return false
	}
	if *p.CatalogId != *src {
		return false
	}
	return true
}
func (p *TPlsqlProcedureKey) Field3DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}

type TAddPlsqlStoredProcedureRequest struct {
	PlsqlStoredProcedure *TPlsqlStoredProcedure `thrift:"plsqlStoredProcedure,1,optional" frugal:"1,optional,TPlsqlStoredProcedure" json:"plsqlStoredProcedure,omitempty"`
	IsForce              *bool                  `thrift:"isForce,2,optional" frugal:"2,optional,bool" json:"isForce,omitempty"`
}

func NewTAddPlsqlStoredProcedureRequest() *TAddPlsqlStoredProcedureRequest {
	return &TAddPlsqlStoredProcedureRequest{}
}

func (p *TAddPlsqlStoredProcedureRequest) InitDefault() {
}

var TAddPlsqlStoredProcedureRequest_PlsqlStoredProcedure_DEFAULT *TPlsqlStoredProcedure

func (p *TAddPlsqlStoredProcedureRequest) GetPlsqlStoredProcedure() (v *TPlsqlStoredProcedure) {
	if !p.IsSetPlsqlStoredProcedure() {
		return TAddPlsqlStoredProcedureRequest_PlsqlStoredProcedure_DEFAULT
	}
	return p.PlsqlStoredProcedure
}

var TAddPlsqlStoredProcedureRequest_IsForce_DEFAULT bool

func (p *TAddPlsqlStoredProcedureRequest) GetIsForce() (v bool) {
	if !p.IsSetIsForce() {
		return TAddPlsqlStoredProcedureRequest_IsForce_DEFAULT
	}
	return *p.IsForce
}
func (p *TAddPlsqlStoredProcedureRequest) SetPlsqlStoredProcedure(val *TPlsqlStoredProcedure) {
	p.PlsqlStoredProcedure = val
}
func (p *TAddPlsqlStoredProcedureRequest) SetIsForce(val *bool) {
	p.IsForce = val
}

var fieldIDToName_TAddPlsqlStoredProcedureRequest = map[int16]string{
	1: "plsqlStoredProcedure",
	2: "isForce",
}

func (p *TAddPlsqlStoredProcedureRequest) IsSetPlsqlStoredProcedure() bool {
	return p.PlsqlStoredProcedure != nil
}

func (p *TAddPlsqlStoredProcedureRequest) IsSetIsForce() bool {
	return p.IsForce != nil
}

func (p *TAddPlsqlStoredProcedureRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAddPlsqlStoredProcedureRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TAddPlsqlStoredProcedureRequest) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTPlsqlStoredProcedure()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PlsqlStoredProcedure = _field
	return nil
}
func (p *TAddPlsqlStoredProcedureRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsForce = _field
	return nil
}

func (p *TAddPlsqlStoredProcedureRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAddPlsqlStoredProcedureRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAddPlsqlStoredProcedureRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlsqlStoredProcedure() {
		if err = oprot.WriteFieldBegin("plsqlStoredProcedure", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PlsqlStoredProcedure.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAddPlsqlStoredProcedureRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsForce() {
		if err = oprot.WriteFieldBegin("isForce", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsForce); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAddPlsqlStoredProcedureRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAddPlsqlStoredProcedureRequest(%+v)", *p)

}

func (p *TAddPlsqlStoredProcedureRequest) DeepEqual(ano *TAddPlsqlStoredProcedureRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PlsqlStoredProcedure) {
		return false
	}
	if !p.Field2DeepEqual(ano.IsForce) {
		return false
	}
	return true
}

func (p *TAddPlsqlStoredProcedureRequest) Field1DeepEqual(src *TPlsqlStoredProcedure) bool {

	if !p.PlsqlStoredProcedure.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAddPlsqlStoredProcedureRequest) Field2DeepEqual(src *bool) bool {

	if p.IsForce == src {
		return true
	} else if p.IsForce == nil || src == nil {
		return false
	}
	if *p.IsForce != *src {
		return false
	}
	return true
}

type TDropPlsqlStoredProcedureRequest struct {
	PlsqlProcedureKey *TPlsqlProcedureKey `thrift:"plsqlProcedureKey,1,optional" frugal:"1,optional,TPlsqlProcedureKey" json:"plsqlProcedureKey,omitempty"`
}

func NewTDropPlsqlStoredProcedureRequest() *TDropPlsqlStoredProcedureRequest {
	return &TDropPlsqlStoredProcedureRequest{}
}

func (p *TDropPlsqlStoredProcedureRequest) InitDefault() {
}

var TDropPlsqlStoredProcedureRequest_PlsqlProcedureKey_DEFAULT *TPlsqlProcedureKey

func (p *TDropPlsqlStoredProcedureRequest) GetPlsqlProcedureKey() (v *TPlsqlProcedureKey) {
	if !p.IsSetPlsqlProcedureKey() {
		return TDropPlsqlStoredProcedureRequest_PlsqlProcedureKey_DEFAULT
	}
	return p.PlsqlProcedureKey
}
func (p *TDropPlsqlStoredProcedureRequest) SetPlsqlProcedureKey(val *TPlsqlProcedureKey) {
	p.PlsqlProcedureKey = val
}

var fieldIDToName_TDropPlsqlStoredProcedureRequest = map[int16]string{
	1: "plsqlProcedureKey",
}

func (p *TDropPlsqlStoredProcedureRequest) IsSetPlsqlProcedureKey() bool {
	return p.PlsqlProcedureKey != nil
}

func (p *TDropPlsqlStoredProcedureRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDropPlsqlStoredProcedureRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TDropPlsqlStoredProcedureRequest) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTPlsqlProcedureKey()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PlsqlProcedureKey = _field
	return nil
}

func (p *TDropPlsqlStoredProcedureRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDropPlsqlStoredProcedureRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDropPlsqlStoredProcedureRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlsqlProcedureKey() {
		if err = oprot.WriteFieldBegin("plsqlProcedureKey", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PlsqlProcedureKey.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDropPlsqlStoredProcedureRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDropPlsqlStoredProcedureRequest(%+v)", *p)

}

func (p *TDropPlsqlStoredProcedureRequest) DeepEqual(ano *TDropPlsqlStoredProcedureRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PlsqlProcedureKey) {
		return false
	}
	return true
}

func (p *TDropPlsqlStoredProcedureRequest) Field1DeepEqual(src *TPlsqlProcedureKey) bool {

	if !p.PlsqlProcedureKey.DeepEqual(src) {
		return false
	}
	return true
}

type TPlsqlStoredProcedureResult_ struct {
	Status *status.TStatus `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
}

func NewTPlsqlStoredProcedureResult_() *TPlsqlStoredProcedureResult_ {
	return &TPlsqlStoredProcedureResult_{}
}

func (p *TPlsqlStoredProcedureResult_) InitDefault() {
}

var TPlsqlStoredProcedureResult__Status_DEFAULT *status.TStatus

func (p *TPlsqlStoredProcedureResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TPlsqlStoredProcedureResult__Status_DEFAULT
	}
	return p.Status
}
func (p *TPlsqlStoredProcedureResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}

var fieldIDToName_TPlsqlStoredProcedureResult_ = map[int16]string{
	1: "status",
}

func (p *TPlsqlStoredProcedureResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TPlsqlStoredProcedureResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPlsqlStoredProcedureResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TPlsqlStoredProcedureResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}

func (p *TPlsqlStoredProcedureResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPlsqlStoredProcedureResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPlsqlStoredProcedureResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPlsqlStoredProcedureResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPlsqlStoredProcedureResult_(%+v)", *p)

}

func (p *TPlsqlStoredProcedureResult_) DeepEqual(ano *TPlsqlStoredProcedureResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *TPlsqlStoredProcedureResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type TAddPlsqlPackageRequest struct {
	PlsqlPackage *TPlsqlPackage `thrift:"plsqlPackage,1,optional" frugal:"1,optional,TPlsqlPackage" json:"plsqlPackage,omitempty"`
	IsForce      *bool          `thrift:"isForce,2,optional" frugal:"2,optional,bool" json:"isForce,omitempty"`
}

func NewTAddPlsqlPackageRequest() *TAddPlsqlPackageRequest {
	return &TAddPlsqlPackageRequest{}
}

func (p *TAddPlsqlPackageRequest) InitDefault() {
}

var TAddPlsqlPackageRequest_PlsqlPackage_DEFAULT *TPlsqlPackage

func (p *TAddPlsqlPackageRequest) GetPlsqlPackage() (v *TPlsqlPackage) {
	if !p.IsSetPlsqlPackage() {
		return TAddPlsqlPackageRequest_PlsqlPackage_DEFAULT
	}
	return p.PlsqlPackage
}

var TAddPlsqlPackageRequest_IsForce_DEFAULT bool

func (p *TAddPlsqlPackageRequest) GetIsForce() (v bool) {
	if !p.IsSetIsForce() {
		return TAddPlsqlPackageRequest_IsForce_DEFAULT
	}
	return *p.IsForce
}
func (p *TAddPlsqlPackageRequest) SetPlsqlPackage(val *TPlsqlPackage) {
	p.PlsqlPackage = val
}
func (p *TAddPlsqlPackageRequest) SetIsForce(val *bool) {
	p.IsForce = val
}

var fieldIDToName_TAddPlsqlPackageRequest = map[int16]string{
	1: "plsqlPackage",
	2: "isForce",
}

func (p *TAddPlsqlPackageRequest) IsSetPlsqlPackage() bool {
	return p.PlsqlPackage != nil
}

func (p *TAddPlsqlPackageRequest) IsSetIsForce() bool {
	return p.IsForce != nil
}

func (p *TAddPlsqlPackageRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAddPlsqlPackageRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TAddPlsqlPackageRequest) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTPlsqlPackage()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PlsqlPackage = _field
	return nil
}
func (p *TAddPlsqlPackageRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsForce = _field
	return nil
}

func (p *TAddPlsqlPackageRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAddPlsqlPackageRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAddPlsqlPackageRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlsqlPackage() {
		if err = oprot.WriteFieldBegin("plsqlPackage", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PlsqlPackage.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAddPlsqlPackageRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsForce() {
		if err = oprot.WriteFieldBegin("isForce", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsForce); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAddPlsqlPackageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAddPlsqlPackageRequest(%+v)", *p)

}

func (p *TAddPlsqlPackageRequest) DeepEqual(ano *TAddPlsqlPackageRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PlsqlPackage) {
		return false
	}
	if !p.Field2DeepEqual(ano.IsForce) {
		return false
	}
	return true
}

func (p *TAddPlsqlPackageRequest) Field1DeepEqual(src *TPlsqlPackage) bool {

	if !p.PlsqlPackage.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAddPlsqlPackageRequest) Field2DeepEqual(src *bool) bool {

	if p.IsForce == src {
		return true
	} else if p.IsForce == nil || src == nil {
		return false
	}
	if *p.IsForce != *src {
		return false
	}
	return true
}

type TDropPlsqlPackageRequest struct {
	PlsqlProcedureKey *TPlsqlProcedureKey `thrift:"plsqlProcedureKey,1,optional" frugal:"1,optional,TPlsqlProcedureKey" json:"plsqlProcedureKey,omitempty"`
}

func NewTDropPlsqlPackageRequest() *TDropPlsqlPackageRequest {
	return &TDropPlsqlPackageRequest{}
}

func (p *TDropPlsqlPackageRequest) InitDefault() {
}

var TDropPlsqlPackageRequest_PlsqlProcedureKey_DEFAULT *TPlsqlProcedureKey

func (p *TDropPlsqlPackageRequest) GetPlsqlProcedureKey() (v *TPlsqlProcedureKey) {
	if !p.IsSetPlsqlProcedureKey() {
		return TDropPlsqlPackageRequest_PlsqlProcedureKey_DEFAULT
	}
	return p.PlsqlProcedureKey
}
func (p *TDropPlsqlPackageRequest) SetPlsqlProcedureKey(val *TPlsqlProcedureKey) {
	p.PlsqlProcedureKey = val
}

var fieldIDToName_TDropPlsqlPackageRequest = map[int16]string{
	1: "plsqlProcedureKey",
}

func (p *TDropPlsqlPackageRequest) IsSetPlsqlProcedureKey() bool {
	return p.PlsqlProcedureKey != nil
}

func (p *TDropPlsqlPackageRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDropPlsqlPackageRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TDropPlsqlPackageRequest) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTPlsqlProcedureKey()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PlsqlProcedureKey = _field
	return nil
}

func (p *TDropPlsqlPackageRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDropPlsqlPackageRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDropPlsqlPackageRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlsqlProcedureKey() {
		if err = oprot.WriteFieldBegin("plsqlProcedureKey", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PlsqlProcedureKey.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDropPlsqlPackageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDropPlsqlPackageRequest(%+v)", *p)

}

func (p *TDropPlsqlPackageRequest) DeepEqual(ano *TDropPlsqlPackageRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PlsqlProcedureKey) {
		return false
	}
	return true
}

func (p *TDropPlsqlPackageRequest) Field1DeepEqual(src *TPlsqlProcedureKey) bool {

	if !p.PlsqlProcedureKey.DeepEqual(src) {
		return false
	}
	return true
}

type TPlsqlPackageResult_ struct {
	Status *status.TStatus `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
}

func NewTPlsqlPackageResult_() *TPlsqlPackageResult_ {
	return &TPlsqlPackageResult_{}
}

func (p *TPlsqlPackageResult_) InitDefault() {
}

var TPlsqlPackageResult__Status_DEFAULT *status.TStatus

func (p *TPlsqlPackageResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TPlsqlPackageResult__Status_DEFAULT
	}
	return p.Status
}
func (p *TPlsqlPackageResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}

var fieldIDToName_TPlsqlPackageResult_ = map[int16]string{
	1: "status",
}

func (p *TPlsqlPackageResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TPlsqlPackageResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPlsqlPackageResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TPlsqlPackageResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}

func (p *TPlsqlPackageResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPlsqlPackageResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPlsqlPackageResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPlsqlPackageResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPlsqlPackageResult_(%+v)", *p)

}

func (p *TPlsqlPackageResult_) DeepEqual(ano *TPlsqlPackageResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *TPlsqlPackageResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type TGetMasterTokenRequest struct {
	Cluster  *string `thrift:"cluster,1,optional" frugal:"1,optional,string" json:"cluster,omitempty"`
	User     *string `thrift:"user,2,optional" frugal:"2,optional,string" json:"user,omitempty"`
	Password *string `thrift:"password,3,optional" frugal:"3,optional,string" json:"password,omitempty"`
}

func NewTGetMasterTokenRequest() *TGetMasterTokenRequest {
	return &TGetMasterTokenRequest{}
}

func (p *TGetMasterTokenRequest) InitDefault() {
}

var TGetMasterTokenRequest_Cluster_DEFAULT string

func (p *TGetMasterTokenRequest) GetCluster() (v string) {
	if !p.IsSetCluster() {
		return TGetMasterTokenRequest_Cluster_DEFAULT
	}
	return *p.Cluster
}

var TGetMasterTokenRequest_User_DEFAULT string

func (p *TGetMasterTokenRequest) GetUser() (v string) {
	if !p.IsSetUser() {
		return TGetMasterTokenRequest_User_DEFAULT
	}
	return *p.User
}

var TGetMasterTokenRequest_Password_DEFAULT string

func (p *TGetMasterTokenRequest) GetPassword() (v string) {
	if !p.IsSetPassword() {
		return TGetMasterTokenRequest_Password_DEFAULT
	}
	return *p.Password
}
func (p *TGetMasterTokenRequest) SetCluster(val *string) {
	p.Cluster = val
}
func (p *TGetMasterTokenRequest) SetUser(val *string) {
	p.User = val
}
func (p *TGetMasterTokenRequest) SetPassword(val *string) {
	p.Password = val
}

var fieldIDToName_TGetMasterTokenRequest = map[int16]string{
	1: "cluster",
	2: "user",
	3: "password",
}

func (p *TGetMasterTokenRequest) IsSetCluster() bool {
	return p.Cluster != nil
}

func (p *TGetMasterTokenRequest) IsSetUser() bool {
	return p.User != nil
}

func (p *TGetMasterTokenRequest) IsSetPassword() bool {
	return p.Password != nil
}

func (p *TGetMasterTokenRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetMasterTokenRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetMasterTokenRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cluster = _field
	return nil
}
func (p *TGetMasterTokenRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *TGetMasterTokenRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Password = _field
	return nil
}

func (p *TGetMasterTokenRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetMasterTokenRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetMasterTokenRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCluster() {
		if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetMasterTokenRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetMasterTokenRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPassword() {
		if err = oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Password); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetMasterTokenRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetMasterTokenRequest(%+v)", *p)

}

func (p *TGetMasterTokenRequest) DeepEqual(ano *TGetMasterTokenRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.Password) {
		return false
	}
	return true
}

func (p *TGetMasterTokenRequest) Field1DeepEqual(src *string) bool {

	if p.Cluster == src {
		return true
	} else if p.Cluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMasterTokenRequest) Field2DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMasterTokenRequest) Field3DeepEqual(src *string) bool {

	if p.Password == src {
		return true
	} else if p.Password == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Password, *src) != 0 {
		return false
	}
	return true
}

type TGetMasterTokenResult_ struct {
	Status        *status.TStatus        `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	Token         *string                `thrift:"token,2,optional" frugal:"2,optional,string" json:"token,omitempty"`
	MasterAddress *types.TNetworkAddress `thrift:"master_address,3,optional" frugal:"3,optional,types.TNetworkAddress" json:"master_address,omitempty"`
}

func NewTGetMasterTokenResult_() *TGetMasterTokenResult_ {
	return &TGetMasterTokenResult_{}
}

func (p *TGetMasterTokenResult_) InitDefault() {
}

var TGetMasterTokenResult__Status_DEFAULT *status.TStatus

func (p *TGetMasterTokenResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TGetMasterTokenResult__Status_DEFAULT
	}
	return p.Status
}

var TGetMasterTokenResult__Token_DEFAULT string

func (p *TGetMasterTokenResult_) GetToken() (v string) {
	if !p.IsSetToken() {
		return TGetMasterTokenResult__Token_DEFAULT
	}
	return *p.Token
}

var TGetMasterTokenResult__MasterAddress_DEFAULT *types.TNetworkAddress

func (p *TGetMasterTokenResult_) GetMasterAddress() (v *types.TNetworkAddress) {
	if !p.IsSetMasterAddress() {
		return TGetMasterTokenResult__MasterAddress_DEFAULT
	}
	return p.MasterAddress
}
func (p *TGetMasterTokenResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TGetMasterTokenResult_) SetToken(val *string) {
	p.Token = val
}
func (p *TGetMasterTokenResult_) SetMasterAddress(val *types.TNetworkAddress) {
	p.MasterAddress = val
}

var fieldIDToName_TGetMasterTokenResult_ = map[int16]string{
	1: "status",
	2: "token",
	3: "master_address",
}

func (p *TGetMasterTokenResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TGetMasterTokenResult_) IsSetToken() bool {
	return p.Token != nil
}

func (p *TGetMasterTokenResult_) IsSetMasterAddress() bool {
	return p.MasterAddress != nil
}

func (p *TGetMasterTokenResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetMasterTokenResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetMasterTokenResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TGetMasterTokenResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}
func (p *TGetMasterTokenResult_) ReadField3(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MasterAddress = _field
	return nil
}

func (p *TGetMasterTokenResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetMasterTokenResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetMasterTokenResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetMasterTokenResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetMasterTokenResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMasterAddress() {
		if err = oprot.WriteFieldBegin("master_address", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MasterAddress.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetMasterTokenResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetMasterTokenResult_(%+v)", *p)

}

func (p *TGetMasterTokenResult_) DeepEqual(ano *TGetMasterTokenResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.Token) {
		return false
	}
	if !p.Field3DeepEqual(ano.MasterAddress) {
		return false
	}
	return true
}

func (p *TGetMasterTokenResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TGetMasterTokenResult_) Field2DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMasterTokenResult_) Field3DeepEqual(src *types.TNetworkAddress) bool {

	if !p.MasterAddress.DeepEqual(src) {
		return false
	}
	return true
}

type TGetBinlogLagResult_ struct {
	Status        *status.TStatus        `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	Lag           *int64                 `thrift:"lag,2,optional" frugal:"2,optional,i64" json:"lag,omitempty"`
	MasterAddress *types.TNetworkAddress `thrift:"master_address,3,optional" frugal:"3,optional,types.TNetworkAddress" json:"master_address,omitempty"`
}

func NewTGetBinlogLagResult_() *TGetBinlogLagResult_ {
	return &TGetBinlogLagResult_{}
}

func (p *TGetBinlogLagResult_) InitDefault() {
}

var TGetBinlogLagResult__Status_DEFAULT *status.TStatus

func (p *TGetBinlogLagResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TGetBinlogLagResult__Status_DEFAULT
	}
	return p.Status
}

var TGetBinlogLagResult__Lag_DEFAULT int64

func (p *TGetBinlogLagResult_) GetLag() (v int64) {
	if !p.IsSetLag() {
		return TGetBinlogLagResult__Lag_DEFAULT
	}
	return *p.Lag
}

var TGetBinlogLagResult__MasterAddress_DEFAULT *types.TNetworkAddress

func (p *TGetBinlogLagResult_) GetMasterAddress() (v *types.TNetworkAddress) {
	if !p.IsSetMasterAddress() {
		return TGetBinlogLagResult__MasterAddress_DEFAULT
	}
	return p.MasterAddress
}
func (p *TGetBinlogLagResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TGetBinlogLagResult_) SetLag(val *int64) {
	p.Lag = val
}
func (p *TGetBinlogLagResult_) SetMasterAddress(val *types.TNetworkAddress) {
	p.MasterAddress = val
}

var fieldIDToName_TGetBinlogLagResult_ = map[int16]string{
	1: "status",
	2: "lag",
	3: "master_address",
}

func (p *TGetBinlogLagResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TGetBinlogLagResult_) IsSetLag() bool {
	return p.Lag != nil
}

func (p *TGetBinlogLagResult_) IsSetMasterAddress() bool {
	return p.MasterAddress != nil
}

func (p *TGetBinlogLagResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetBinlogLagResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetBinlogLagResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TGetBinlogLagResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Lag = _field
	return nil
}
func (p *TGetBinlogLagResult_) ReadField3(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MasterAddress = _field
	return nil
}

func (p *TGetBinlogLagResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetBinlogLagResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetBinlogLagResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetBinlogLagResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLag() {
		if err = oprot.WriteFieldBegin("lag", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Lag); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetBinlogLagResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMasterAddress() {
		if err = oprot.WriteFieldBegin("master_address", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MasterAddress.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetBinlogLagResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetBinlogLagResult_(%+v)", *p)

}

func (p *TGetBinlogLagResult_) DeepEqual(ano *TGetBinlogLagResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.Lag) {
		return false
	}
	if !p.Field3DeepEqual(ano.MasterAddress) {
		return false
	}
	return true
}

func (p *TGetBinlogLagResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TGetBinlogLagResult_) Field2DeepEqual(src *int64) bool {

	if p.Lag == src {
		return true
	} else if p.Lag == nil || src == nil {
		return false
	}
	if *p.Lag != *src {
		return false
	}
	return true
}
func (p *TGetBinlogLagResult_) Field3DeepEqual(src *types.TNetworkAddress) bool {

	if !p.MasterAddress.DeepEqual(src) {
		return false
	}
	return true
}

type TUpdateFollowerStatsCacheRequest struct {
	Key          *string  `thrift:"key,1,optional" frugal:"1,optional,string" json:"key,omitempty"`
	StatsRows    []string `thrift:"statsRows,2,optional" frugal:"2,optional,list<string>" json:"statsRows,omitempty"`
	ColStatsData *string  `thrift:"colStatsData,3,optional" frugal:"3,optional,string" json:"colStatsData,omitempty"`
}

func NewTUpdateFollowerStatsCacheRequest() *TUpdateFollowerStatsCacheRequest {
	return &TUpdateFollowerStatsCacheRequest{}
}

func (p *TUpdateFollowerStatsCacheRequest) InitDefault() {
}

var TUpdateFollowerStatsCacheRequest_Key_DEFAULT string

func (p *TUpdateFollowerStatsCacheRequest) GetKey() (v string) {
	if !p.IsSetKey() {
		return TUpdateFollowerStatsCacheRequest_Key_DEFAULT
	}
	return *p.Key
}

var TUpdateFollowerStatsCacheRequest_StatsRows_DEFAULT []string

func (p *TUpdateFollowerStatsCacheRequest) GetStatsRows() (v []string) {
	if !p.IsSetStatsRows() {
		return TUpdateFollowerStatsCacheRequest_StatsRows_DEFAULT
	}
	return p.StatsRows
}

var TUpdateFollowerStatsCacheRequest_ColStatsData_DEFAULT string

func (p *TUpdateFollowerStatsCacheRequest) GetColStatsData() (v string) {
	if !p.IsSetColStatsData() {
		return TUpdateFollowerStatsCacheRequest_ColStatsData_DEFAULT
	}
	return *p.ColStatsData
}
func (p *TUpdateFollowerStatsCacheRequest) SetKey(val *string) {
	p.Key = val
}
func (p *TUpdateFollowerStatsCacheRequest) SetStatsRows(val []string) {
	p.StatsRows = val
}
func (p *TUpdateFollowerStatsCacheRequest) SetColStatsData(val *string) {
	p.ColStatsData = val
}

var fieldIDToName_TUpdateFollowerStatsCacheRequest = map[int16]string{
	1: "key",
	2: "statsRows",
	3: "colStatsData",
}

func (p *TUpdateFollowerStatsCacheRequest) IsSetKey() bool {
	return p.Key != nil
}

func (p *TUpdateFollowerStatsCacheRequest) IsSetStatsRows() bool {
	return p.StatsRows != nil
}

func (p *TUpdateFollowerStatsCacheRequest) IsSetColStatsData() bool {
	return p.ColStatsData != nil
}

func (p *TUpdateFollowerStatsCacheRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TUpdateFollowerStatsCacheRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TUpdateFollowerStatsCacheRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}
func (p *TUpdateFollowerStatsCacheRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.StatsRows = _field
	return nil
}
func (p *TUpdateFollowerStatsCacheRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ColStatsData = _field
	return nil
}

func (p *TUpdateFollowerStatsCacheRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TUpdateFollowerStatsCacheRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TUpdateFollowerStatsCacheRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TUpdateFollowerStatsCacheRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatsRows() {
		if err = oprot.WriteFieldBegin("statsRows", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.StatsRows)); err != nil {
			return err
		}
		for _, v := range p.StatsRows {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TUpdateFollowerStatsCacheRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetColStatsData() {
		if err = oprot.WriteFieldBegin("colStatsData", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ColStatsData); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TUpdateFollowerStatsCacheRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TUpdateFollowerStatsCacheRequest(%+v)", *p)

}

func (p *TUpdateFollowerStatsCacheRequest) DeepEqual(ano *TUpdateFollowerStatsCacheRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.StatsRows) {
		return false
	}
	if !p.Field3DeepEqual(ano.ColStatsData) {
		return false
	}
	return true
}

func (p *TUpdateFollowerStatsCacheRequest) Field1DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}
func (p *TUpdateFollowerStatsCacheRequest) Field2DeepEqual(src []string) bool {

	if len(p.StatsRows) != len(src) {
		return false
	}
	for i, v := range p.StatsRows {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TUpdateFollowerStatsCacheRequest) Field3DeepEqual(src *string) bool {

	if p.ColStatsData == src {
		return true
	} else if p.ColStatsData == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ColStatsData, *src) != 0 {
		return false
	}
	return true
}

type TInvalidateFollowerStatsCacheRequest struct {
	Key *string `thrift:"key,1,optional" frugal:"1,optional,string" json:"key,omitempty"`
}

func NewTInvalidateFollowerStatsCacheRequest() *TInvalidateFollowerStatsCacheRequest {
	return &TInvalidateFollowerStatsCacheRequest{}
}

func (p *TInvalidateFollowerStatsCacheRequest) InitDefault() {
}

var TInvalidateFollowerStatsCacheRequest_Key_DEFAULT string

func (p *TInvalidateFollowerStatsCacheRequest) GetKey() (v string) {
	if !p.IsSetKey() {
		return TInvalidateFollowerStatsCacheRequest_Key_DEFAULT
	}
	return *p.Key
}
func (p *TInvalidateFollowerStatsCacheRequest) SetKey(val *string) {
	p.Key = val
}

var fieldIDToName_TInvalidateFollowerStatsCacheRequest = map[int16]string{
	1: "key",
}

func (p *TInvalidateFollowerStatsCacheRequest) IsSetKey() bool {
	return p.Key != nil
}

func (p *TInvalidateFollowerStatsCacheRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TInvalidateFollowerStatsCacheRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TInvalidateFollowerStatsCacheRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}

func (p *TInvalidateFollowerStatsCacheRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TInvalidateFollowerStatsCacheRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TInvalidateFollowerStatsCacheRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TInvalidateFollowerStatsCacheRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TInvalidateFollowerStatsCacheRequest(%+v)", *p)

}

func (p *TInvalidateFollowerStatsCacheRequest) DeepEqual(ano *TInvalidateFollowerStatsCacheRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	return true
}

func (p *TInvalidateFollowerStatsCacheRequest) Field1DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}

type TUpdateFollowerPartitionStatsCacheRequest struct {
	Key *string `thrift:"key,1,optional" frugal:"1,optional,string" json:"key,omitempty"`
}

func NewTUpdateFollowerPartitionStatsCacheRequest() *TUpdateFollowerPartitionStatsCacheRequest {
	return &TUpdateFollowerPartitionStatsCacheRequest{}
}

func (p *TUpdateFollowerPartitionStatsCacheRequest) InitDefault() {
}

var TUpdateFollowerPartitionStatsCacheRequest_Key_DEFAULT string

func (p *TUpdateFollowerPartitionStatsCacheRequest) GetKey() (v string) {
	if !p.IsSetKey() {
		return TUpdateFollowerPartitionStatsCacheRequest_Key_DEFAULT
	}
	return *p.Key
}
func (p *TUpdateFollowerPartitionStatsCacheRequest) SetKey(val *string) {
	p.Key = val
}

var fieldIDToName_TUpdateFollowerPartitionStatsCacheRequest = map[int16]string{
	1: "key",
}

func (p *TUpdateFollowerPartitionStatsCacheRequest) IsSetKey() bool {
	return p.Key != nil
}

func (p *TUpdateFollowerPartitionStatsCacheRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TUpdateFollowerPartitionStatsCacheRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TUpdateFollowerPartitionStatsCacheRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}

func (p *TUpdateFollowerPartitionStatsCacheRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TUpdateFollowerPartitionStatsCacheRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TUpdateFollowerPartitionStatsCacheRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TUpdateFollowerPartitionStatsCacheRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TUpdateFollowerPartitionStatsCacheRequest(%+v)", *p)

}

func (p *TUpdateFollowerPartitionStatsCacheRequest) DeepEqual(ano *TUpdateFollowerPartitionStatsCacheRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	return true
}

func (p *TUpdateFollowerPartitionStatsCacheRequest) Field1DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}

type TAutoIncrementRangeRequest struct {
	DbId       *int64 `thrift:"db_id,1,optional" frugal:"1,optional,i64" json:"db_id,omitempty"`
	TableId    *int64 `thrift:"table_id,2,optional" frugal:"2,optional,i64" json:"table_id,omitempty"`
	ColumnId   *int64 `thrift:"column_id,3,optional" frugal:"3,optional,i64" json:"column_id,omitempty"`
	Length     *int64 `thrift:"length,4,optional" frugal:"4,optional,i64" json:"length,omitempty"`
	LowerBound *int64 `thrift:"lower_bound,5,optional" frugal:"5,optional,i64" json:"lower_bound,omitempty"`
}

func NewTAutoIncrementRangeRequest() *TAutoIncrementRangeRequest {
	return &TAutoIncrementRangeRequest{}
}

func (p *TAutoIncrementRangeRequest) InitDefault() {
}

var TAutoIncrementRangeRequest_DbId_DEFAULT int64

func (p *TAutoIncrementRangeRequest) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TAutoIncrementRangeRequest_DbId_DEFAULT
	}
	return *p.DbId
}

var TAutoIncrementRangeRequest_TableId_DEFAULT int64

func (p *TAutoIncrementRangeRequest) GetTableId() (v int64) {
	if !p.IsSetTableId() {
		return TAutoIncrementRangeRequest_TableId_DEFAULT
	}
	return *p.TableId
}

var TAutoIncrementRangeRequest_ColumnId_DEFAULT int64

func (p *TAutoIncrementRangeRequest) GetColumnId() (v int64) {
	if !p.IsSetColumnId() {
		return TAutoIncrementRangeRequest_ColumnId_DEFAULT
	}
	return *p.ColumnId
}

var TAutoIncrementRangeRequest_Length_DEFAULT int64

func (p *TAutoIncrementRangeRequest) GetLength() (v int64) {
	if !p.IsSetLength() {
		return TAutoIncrementRangeRequest_Length_DEFAULT
	}
	return *p.Length
}

var TAutoIncrementRangeRequest_LowerBound_DEFAULT int64

func (p *TAutoIncrementRangeRequest) GetLowerBound() (v int64) {
	if !p.IsSetLowerBound() {
		return TAutoIncrementRangeRequest_LowerBound_DEFAULT
	}
	return *p.LowerBound
}
func (p *TAutoIncrementRangeRequest) SetDbId(val *int64) {
	p.DbId = val
}
func (p *TAutoIncrementRangeRequest) SetTableId(val *int64) {
	p.TableId = val
}
func (p *TAutoIncrementRangeRequest) SetColumnId(val *int64) {
	p.ColumnId = val
}
func (p *TAutoIncrementRangeRequest) SetLength(val *int64) {
	p.Length = val
}
func (p *TAutoIncrementRangeRequest) SetLowerBound(val *int64) {
	p.LowerBound = val
}

var fieldIDToName_TAutoIncrementRangeRequest = map[int16]string{
	1: "db_id",
	2: "table_id",
	3: "column_id",
	4: "length",
	5: "lower_bound",
}

func (p *TAutoIncrementRangeRequest) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TAutoIncrementRangeRequest) IsSetTableId() bool {
	return p.TableId != nil
}

func (p *TAutoIncrementRangeRequest) IsSetColumnId() bool {
	return p.ColumnId != nil
}

func (p *TAutoIncrementRangeRequest) IsSetLength() bool {
	return p.Length != nil
}

func (p *TAutoIncrementRangeRequest) IsSetLowerBound() bool {
	return p.LowerBound != nil
}

func (p *TAutoIncrementRangeRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAutoIncrementRangeRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TAutoIncrementRangeRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TAutoIncrementRangeRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableId = _field
	return nil
}
func (p *TAutoIncrementRangeRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ColumnId = _field
	return nil
}
func (p *TAutoIncrementRangeRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Length = _field
	return nil
}
func (p *TAutoIncrementRangeRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LowerBound = _field
	return nil
}

func (p *TAutoIncrementRangeRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAutoIncrementRangeRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAutoIncrementRangeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("db_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAutoIncrementRangeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err = oprot.WriteFieldBegin("table_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAutoIncrementRangeRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnId() {
		if err = oprot.WriteFieldBegin("column_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ColumnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TAutoIncrementRangeRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLength() {
		if err = oprot.WriteFieldBegin("length", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Length); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TAutoIncrementRangeRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLowerBound() {
		if err = oprot.WriteFieldBegin("lower_bound", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LowerBound); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TAutoIncrementRangeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAutoIncrementRangeRequest(%+v)", *p)

}

func (p *TAutoIncrementRangeRequest) DeepEqual(ano *TAutoIncrementRangeRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableId) {
		return false
	}
	if !p.Field3DeepEqual(ano.ColumnId) {
		return false
	}
	if !p.Field4DeepEqual(ano.Length) {
		return false
	}
	if !p.Field5DeepEqual(ano.LowerBound) {
		return false
	}
	return true
}

func (p *TAutoIncrementRangeRequest) Field1DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}
func (p *TAutoIncrementRangeRequest) Field2DeepEqual(src *int64) bool {

	if p.TableId == src {
		return true
	} else if p.TableId == nil || src == nil {
		return false
	}
	if *p.TableId != *src {
		return false
	}
	return true
}
func (p *TAutoIncrementRangeRequest) Field3DeepEqual(src *int64) bool {

	if p.ColumnId == src {
		return true
	} else if p.ColumnId == nil || src == nil {
		return false
	}
	if *p.ColumnId != *src {
		return false
	}
	return true
}
func (p *TAutoIncrementRangeRequest) Field4DeepEqual(src *int64) bool {

	if p.Length == src {
		return true
	} else if p.Length == nil || src == nil {
		return false
	}
	if *p.Length != *src {
		return false
	}
	return true
}
func (p *TAutoIncrementRangeRequest) Field5DeepEqual(src *int64) bool {

	if p.LowerBound == src {
		return true
	} else if p.LowerBound == nil || src == nil {
		return false
	}
	if *p.LowerBound != *src {
		return false
	}
	return true
}

type TAutoIncrementRangeResult_ struct {
	Status        *status.TStatus        `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	Start         *int64                 `thrift:"start,2,optional" frugal:"2,optional,i64" json:"start,omitempty"`
	Length        *int64                 `thrift:"length,3,optional" frugal:"3,optional,i64" json:"length,omitempty"`
	MasterAddress *types.TNetworkAddress `thrift:"master_address,4,optional" frugal:"4,optional,types.TNetworkAddress" json:"master_address,omitempty"`
}

func NewTAutoIncrementRangeResult_() *TAutoIncrementRangeResult_ {
	return &TAutoIncrementRangeResult_{}
}

func (p *TAutoIncrementRangeResult_) InitDefault() {
}

var TAutoIncrementRangeResult__Status_DEFAULT *status.TStatus

func (p *TAutoIncrementRangeResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TAutoIncrementRangeResult__Status_DEFAULT
	}
	return p.Status
}

var TAutoIncrementRangeResult__Start_DEFAULT int64

func (p *TAutoIncrementRangeResult_) GetStart() (v int64) {
	if !p.IsSetStart() {
		return TAutoIncrementRangeResult__Start_DEFAULT
	}
	return *p.Start
}

var TAutoIncrementRangeResult__Length_DEFAULT int64

func (p *TAutoIncrementRangeResult_) GetLength() (v int64) {
	if !p.IsSetLength() {
		return TAutoIncrementRangeResult__Length_DEFAULT
	}
	return *p.Length
}

var TAutoIncrementRangeResult__MasterAddress_DEFAULT *types.TNetworkAddress

func (p *TAutoIncrementRangeResult_) GetMasterAddress() (v *types.TNetworkAddress) {
	if !p.IsSetMasterAddress() {
		return TAutoIncrementRangeResult__MasterAddress_DEFAULT
	}
	return p.MasterAddress
}
func (p *TAutoIncrementRangeResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TAutoIncrementRangeResult_) SetStart(val *int64) {
	p.Start = val
}
func (p *TAutoIncrementRangeResult_) SetLength(val *int64) {
	p.Length = val
}
func (p *TAutoIncrementRangeResult_) SetMasterAddress(val *types.TNetworkAddress) {
	p.MasterAddress = val
}

var fieldIDToName_TAutoIncrementRangeResult_ = map[int16]string{
	1: "status",
	2: "start",
	3: "length",
	4: "master_address",
}

func (p *TAutoIncrementRangeResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TAutoIncrementRangeResult_) IsSetStart() bool {
	return p.Start != nil
}

func (p *TAutoIncrementRangeResult_) IsSetLength() bool {
	return p.Length != nil
}

func (p *TAutoIncrementRangeResult_) IsSetMasterAddress() bool {
	return p.MasterAddress != nil
}

func (p *TAutoIncrementRangeResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TAutoIncrementRangeResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TAutoIncrementRangeResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TAutoIncrementRangeResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Start = _field
	return nil
}
func (p *TAutoIncrementRangeResult_) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Length = _field
	return nil
}
func (p *TAutoIncrementRangeResult_) ReadField4(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MasterAddress = _field
	return nil
}

func (p *TAutoIncrementRangeResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TAutoIncrementRangeResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TAutoIncrementRangeResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TAutoIncrementRangeResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStart() {
		if err = oprot.WriteFieldBegin("start", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Start); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TAutoIncrementRangeResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLength() {
		if err = oprot.WriteFieldBegin("length", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Length); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TAutoIncrementRangeResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMasterAddress() {
		if err = oprot.WriteFieldBegin("master_address", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MasterAddress.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TAutoIncrementRangeResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAutoIncrementRangeResult_(%+v)", *p)

}

func (p *TAutoIncrementRangeResult_) DeepEqual(ano *TAutoIncrementRangeResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.Start) {
		return false
	}
	if !p.Field3DeepEqual(ano.Length) {
		return false
	}
	if !p.Field4DeepEqual(ano.MasterAddress) {
		return false
	}
	return true
}

func (p *TAutoIncrementRangeResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TAutoIncrementRangeResult_) Field2DeepEqual(src *int64) bool {

	if p.Start == src {
		return true
	} else if p.Start == nil || src == nil {
		return false
	}
	if *p.Start != *src {
		return false
	}
	return true
}
func (p *TAutoIncrementRangeResult_) Field3DeepEqual(src *int64) bool {

	if p.Length == src {
		return true
	} else if p.Length == nil || src == nil {
		return false
	}
	if *p.Length != *src {
		return false
	}
	return true
}
func (p *TAutoIncrementRangeResult_) Field4DeepEqual(src *types.TNetworkAddress) bool {

	if !p.MasterAddress.DeepEqual(src) {
		return false
	}
	return true
}

type TCreatePartitionRequest struct {
	TxnId           *int64                            `thrift:"txn_id,1,optional" frugal:"1,optional,i64" json:"txn_id,omitempty"`
	DbId            *int64                            `thrift:"db_id,2,optional" frugal:"2,optional,i64" json:"db_id,omitempty"`
	TableId         *int64                            `thrift:"table_id,3,optional" frugal:"3,optional,i64" json:"table_id,omitempty"`
	PartitionValues [][]*exprs.TNullableStringLiteral `thrift:"partitionValues,4,optional" frugal:"4,optional,list<list<exprs.TNullableStringLiteral>>" json:"partitionValues,omitempty"`
	BeEndpoint      *string                           `thrift:"be_endpoint,5,optional" frugal:"5,optional,string" json:"be_endpoint,omitempty"`
}

func NewTCreatePartitionRequest() *TCreatePartitionRequest {
	return &TCreatePartitionRequest{}
}

func (p *TCreatePartitionRequest) InitDefault() {
}

var TCreatePartitionRequest_TxnId_DEFAULT int64

func (p *TCreatePartitionRequest) GetTxnId() (v int64) {
	if !p.IsSetTxnId() {
		return TCreatePartitionRequest_TxnId_DEFAULT
	}
	return *p.TxnId
}

var TCreatePartitionRequest_DbId_DEFAULT int64

func (p *TCreatePartitionRequest) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TCreatePartitionRequest_DbId_DEFAULT
	}
	return *p.DbId
}

var TCreatePartitionRequest_TableId_DEFAULT int64

func (p *TCreatePartitionRequest) GetTableId() (v int64) {
	if !p.IsSetTableId() {
		return TCreatePartitionRequest_TableId_DEFAULT
	}
	return *p.TableId
}

var TCreatePartitionRequest_PartitionValues_DEFAULT [][]*exprs.TNullableStringLiteral

func (p *TCreatePartitionRequest) GetPartitionValues() (v [][]*exprs.TNullableStringLiteral) {
	if !p.IsSetPartitionValues() {
		return TCreatePartitionRequest_PartitionValues_DEFAULT
	}
	return p.PartitionValues
}

var TCreatePartitionRequest_BeEndpoint_DEFAULT string

func (p *TCreatePartitionRequest) GetBeEndpoint() (v string) {
	if !p.IsSetBeEndpoint() {
		return TCreatePartitionRequest_BeEndpoint_DEFAULT
	}
	return *p.BeEndpoint
}
func (p *TCreatePartitionRequest) SetTxnId(val *int64) {
	p.TxnId = val
}
func (p *TCreatePartitionRequest) SetDbId(val *int64) {
	p.DbId = val
}
func (p *TCreatePartitionRequest) SetTableId(val *int64) {
	p.TableId = val
}
func (p *TCreatePartitionRequest) SetPartitionValues(val [][]*exprs.TNullableStringLiteral) {
	p.PartitionValues = val
}
func (p *TCreatePartitionRequest) SetBeEndpoint(val *string) {
	p.BeEndpoint = val
}

var fieldIDToName_TCreatePartitionRequest = map[int16]string{
	1: "txn_id",
	2: "db_id",
	3: "table_id",
	4: "partitionValues",
	5: "be_endpoint",
}

func (p *TCreatePartitionRequest) IsSetTxnId() bool {
	return p.TxnId != nil
}

func (p *TCreatePartitionRequest) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TCreatePartitionRequest) IsSetTableId() bool {
	return p.TableId != nil
}

func (p *TCreatePartitionRequest) IsSetPartitionValues() bool {
	return p.PartitionValues != nil
}

func (p *TCreatePartitionRequest) IsSetBeEndpoint() bool {
	return p.BeEndpoint != nil
}

func (p *TCreatePartitionRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCreatePartitionRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TCreatePartitionRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TxnId = _field
	return nil
}
func (p *TCreatePartitionRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TCreatePartitionRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableId = _field
	return nil
}
func (p *TCreatePartitionRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]*exprs.TNullableStringLiteral, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]*exprs.TNullableStringLiteral, 0, size)
		values := make([]exprs.TNullableStringLiteral, size)
		for i := 0; i < size; i++ {
			_elem1 := &values[i]
			_elem1.InitDefault()

			if err := _elem1.Read(iprot); err != nil {
				return err
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PartitionValues = _field
	return nil
}
func (p *TCreatePartitionRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BeEndpoint = _field
	return nil
}

func (p *TCreatePartitionRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCreatePartitionRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCreatePartitionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnId() {
		if err = oprot.WriteFieldBegin("txn_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TxnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCreatePartitionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("db_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCreatePartitionRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err = oprot.WriteFieldBegin("table_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TCreatePartitionRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionValues() {
		if err = oprot.WriteFieldBegin("partitionValues", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.LIST, len(p.PartitionValues)); err != nil {
			return err
		}
		for _, v := range p.PartitionValues {
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TCreatePartitionRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBeEndpoint() {
		if err = oprot.WriteFieldBegin("be_endpoint", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BeEndpoint); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TCreatePartitionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCreatePartitionRequest(%+v)", *p)

}

func (p *TCreatePartitionRequest) DeepEqual(ano *TCreatePartitionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field2DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field3DeepEqual(ano.TableId) {
		return false
	}
	if !p.Field4DeepEqual(ano.PartitionValues) {
		return false
	}
	if !p.Field5DeepEqual(ano.BeEndpoint) {
		return false
	}
	return true
}

func (p *TCreatePartitionRequest) Field1DeepEqual(src *int64) bool {

	if p.TxnId == src {
		return true
	} else if p.TxnId == nil || src == nil {
		return false
	}
	if *p.TxnId != *src {
		return false
	}
	return true
}
func (p *TCreatePartitionRequest) Field2DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}
func (p *TCreatePartitionRequest) Field3DeepEqual(src *int64) bool {

	if p.TableId == src {
		return true
	} else if p.TableId == nil || src == nil {
		return false
	}
	if *p.TableId != *src {
		return false
	}
	return true
}
func (p *TCreatePartitionRequest) Field4DeepEqual(src [][]*exprs.TNullableStringLiteral) bool {

	if len(p.PartitionValues) != len(src) {
		return false
	}
	for i, v := range p.PartitionValues {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *TCreatePartitionRequest) Field5DeepEqual(src *string) bool {

	if p.BeEndpoint == src {
		return true
	} else if p.BeEndpoint == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BeEndpoint, *src) != 0 {
		return false
	}
	return true
}

type TCreatePartitionResult_ struct {
	Status     *status.TStatus                    `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	Partitions []*descriptors.TOlapTablePartition `thrift:"partitions,2,optional" frugal:"2,optional,list<descriptors.TOlapTablePartition>" json:"partitions,omitempty"`
	Tablets    []*descriptors.TTabletLocation     `thrift:"tablets,3,optional" frugal:"3,optional,list<descriptors.TTabletLocation>" json:"tablets,omitempty"`
	Nodes      []*descriptors.TNodeInfo           `thrift:"nodes,4,optional" frugal:"4,optional,list<descriptors.TNodeInfo>" json:"nodes,omitempty"`
}

func NewTCreatePartitionResult_() *TCreatePartitionResult_ {
	return &TCreatePartitionResult_{}
}

func (p *TCreatePartitionResult_) InitDefault() {
}

var TCreatePartitionResult__Status_DEFAULT *status.TStatus

func (p *TCreatePartitionResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TCreatePartitionResult__Status_DEFAULT
	}
	return p.Status
}

var TCreatePartitionResult__Partitions_DEFAULT []*descriptors.TOlapTablePartition

func (p *TCreatePartitionResult_) GetPartitions() (v []*descriptors.TOlapTablePartition) {
	if !p.IsSetPartitions() {
		return TCreatePartitionResult__Partitions_DEFAULT
	}
	return p.Partitions
}

var TCreatePartitionResult__Tablets_DEFAULT []*descriptors.TTabletLocation

func (p *TCreatePartitionResult_) GetTablets() (v []*descriptors.TTabletLocation) {
	if !p.IsSetTablets() {
		return TCreatePartitionResult__Tablets_DEFAULT
	}
	return p.Tablets
}

var TCreatePartitionResult__Nodes_DEFAULT []*descriptors.TNodeInfo

func (p *TCreatePartitionResult_) GetNodes() (v []*descriptors.TNodeInfo) {
	if !p.IsSetNodes() {
		return TCreatePartitionResult__Nodes_DEFAULT
	}
	return p.Nodes
}
func (p *TCreatePartitionResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TCreatePartitionResult_) SetPartitions(val []*descriptors.TOlapTablePartition) {
	p.Partitions = val
}
func (p *TCreatePartitionResult_) SetTablets(val []*descriptors.TTabletLocation) {
	p.Tablets = val
}
func (p *TCreatePartitionResult_) SetNodes(val []*descriptors.TNodeInfo) {
	p.Nodes = val
}

var fieldIDToName_TCreatePartitionResult_ = map[int16]string{
	1: "status",
	2: "partitions",
	3: "tablets",
	4: "nodes",
}

func (p *TCreatePartitionResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TCreatePartitionResult_) IsSetPartitions() bool {
	return p.Partitions != nil
}

func (p *TCreatePartitionResult_) IsSetTablets() bool {
	return p.Tablets != nil
}

func (p *TCreatePartitionResult_) IsSetNodes() bool {
	return p.Nodes != nil
}

func (p *TCreatePartitionResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCreatePartitionResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TCreatePartitionResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TCreatePartitionResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*descriptors.TOlapTablePartition, 0, size)
	values := make([]descriptors.TOlapTablePartition, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Partitions = _field
	return nil
}
func (p *TCreatePartitionResult_) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*descriptors.TTabletLocation, 0, size)
	values := make([]descriptors.TTabletLocation, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tablets = _field
	return nil
}
func (p *TCreatePartitionResult_) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*descriptors.TNodeInfo, 0, size)
	values := make([]descriptors.TNodeInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Nodes = _field
	return nil
}

func (p *TCreatePartitionResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCreatePartitionResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCreatePartitionResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCreatePartitionResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitions() {
		if err = oprot.WriteFieldBegin("partitions", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Partitions)); err != nil {
			return err
		}
		for _, v := range p.Partitions {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCreatePartitionResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTablets() {
		if err = oprot.WriteFieldBegin("tablets", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tablets)); err != nil {
			return err
		}
		for _, v := range p.Tablets {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TCreatePartitionResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodes() {
		if err = oprot.WriteFieldBegin("nodes", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Nodes)); err != nil {
			return err
		}
		for _, v := range p.Nodes {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TCreatePartitionResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCreatePartitionResult_(%+v)", *p)

}

func (p *TCreatePartitionResult_) DeepEqual(ano *TCreatePartitionResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.Partitions) {
		return false
	}
	if !p.Field3DeepEqual(ano.Tablets) {
		return false
	}
	if !p.Field4DeepEqual(ano.Nodes) {
		return false
	}
	return true
}

func (p *TCreatePartitionResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TCreatePartitionResult_) Field2DeepEqual(src []*descriptors.TOlapTablePartition) bool {

	if len(p.Partitions) != len(src) {
		return false
	}
	for i, v := range p.Partitions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TCreatePartitionResult_) Field3DeepEqual(src []*descriptors.TTabletLocation) bool {

	if len(p.Tablets) != len(src) {
		return false
	}
	for i, v := range p.Tablets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TCreatePartitionResult_) Field4DeepEqual(src []*descriptors.TNodeInfo) bool {

	if len(p.Nodes) != len(src) {
		return false
	}
	for i, v := range p.Nodes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TReplacePartitionRequest struct {
	OverwriteGroupId *int64  `thrift:"overwrite_group_id,1,optional" frugal:"1,optional,i64" json:"overwrite_group_id,omitempty"`
	DbId             *int64  `thrift:"db_id,2,optional" frugal:"2,optional,i64" json:"db_id,omitempty"`
	TableId          *int64  `thrift:"table_id,3,optional" frugal:"3,optional,i64" json:"table_id,omitempty"`
	PartitionIds     []int64 `thrift:"partition_ids,4,optional" frugal:"4,optional,list<i64>" json:"partition_ids,omitempty"`
	BeEndpoint       *string `thrift:"be_endpoint,5,optional" frugal:"5,optional,string" json:"be_endpoint,omitempty"`
}

func NewTReplacePartitionRequest() *TReplacePartitionRequest {
	return &TReplacePartitionRequest{}
}

func (p *TReplacePartitionRequest) InitDefault() {
}

var TReplacePartitionRequest_OverwriteGroupId_DEFAULT int64

func (p *TReplacePartitionRequest) GetOverwriteGroupId() (v int64) {
	if !p.IsSetOverwriteGroupId() {
		return TReplacePartitionRequest_OverwriteGroupId_DEFAULT
	}
	return *p.OverwriteGroupId
}

var TReplacePartitionRequest_DbId_DEFAULT int64

func (p *TReplacePartitionRequest) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TReplacePartitionRequest_DbId_DEFAULT
	}
	return *p.DbId
}

var TReplacePartitionRequest_TableId_DEFAULT int64

func (p *TReplacePartitionRequest) GetTableId() (v int64) {
	if !p.IsSetTableId() {
		return TReplacePartitionRequest_TableId_DEFAULT
	}
	return *p.TableId
}

var TReplacePartitionRequest_PartitionIds_DEFAULT []int64

func (p *TReplacePartitionRequest) GetPartitionIds() (v []int64) {
	if !p.IsSetPartitionIds() {
		return TReplacePartitionRequest_PartitionIds_DEFAULT
	}
	return p.PartitionIds
}

var TReplacePartitionRequest_BeEndpoint_DEFAULT string

func (p *TReplacePartitionRequest) GetBeEndpoint() (v string) {
	if !p.IsSetBeEndpoint() {
		return TReplacePartitionRequest_BeEndpoint_DEFAULT
	}
	return *p.BeEndpoint
}
func (p *TReplacePartitionRequest) SetOverwriteGroupId(val *int64) {
	p.OverwriteGroupId = val
}
func (p *TReplacePartitionRequest) SetDbId(val *int64) {
	p.DbId = val
}
func (p *TReplacePartitionRequest) SetTableId(val *int64) {
	p.TableId = val
}
func (p *TReplacePartitionRequest) SetPartitionIds(val []int64) {
	p.PartitionIds = val
}
func (p *TReplacePartitionRequest) SetBeEndpoint(val *string) {
	p.BeEndpoint = val
}

var fieldIDToName_TReplacePartitionRequest = map[int16]string{
	1: "overwrite_group_id",
	2: "db_id",
	3: "table_id",
	4: "partition_ids",
	5: "be_endpoint",
}

func (p *TReplacePartitionRequest) IsSetOverwriteGroupId() bool {
	return p.OverwriteGroupId != nil
}

func (p *TReplacePartitionRequest) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TReplacePartitionRequest) IsSetTableId() bool {
	return p.TableId != nil
}

func (p *TReplacePartitionRequest) IsSetPartitionIds() bool {
	return p.PartitionIds != nil
}

func (p *TReplacePartitionRequest) IsSetBeEndpoint() bool {
	return p.BeEndpoint != nil
}

func (p *TReplacePartitionRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TReplacePartitionRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TReplacePartitionRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OverwriteGroupId = _field
	return nil
}
func (p *TReplacePartitionRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TReplacePartitionRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableId = _field
	return nil
}
func (p *TReplacePartitionRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PartitionIds = _field
	return nil
}
func (p *TReplacePartitionRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BeEndpoint = _field
	return nil
}

func (p *TReplacePartitionRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TReplacePartitionRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TReplacePartitionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOverwriteGroupId() {
		if err = oprot.WriteFieldBegin("overwrite_group_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.OverwriteGroupId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TReplacePartitionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("db_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TReplacePartitionRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err = oprot.WriteFieldBegin("table_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TReplacePartitionRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionIds() {
		if err = oprot.WriteFieldBegin("partition_ids", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.PartitionIds)); err != nil {
			return err
		}
		for _, v := range p.PartitionIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TReplacePartitionRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBeEndpoint() {
		if err = oprot.WriteFieldBegin("be_endpoint", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BeEndpoint); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TReplacePartitionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TReplacePartitionRequest(%+v)", *p)

}

func (p *TReplacePartitionRequest) DeepEqual(ano *TReplacePartitionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OverwriteGroupId) {
		return false
	}
	if !p.Field2DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field3DeepEqual(ano.TableId) {
		return false
	}
	if !p.Field4DeepEqual(ano.PartitionIds) {
		return false
	}
	if !p.Field5DeepEqual(ano.BeEndpoint) {
		return false
	}
	return true
}

func (p *TReplacePartitionRequest) Field1DeepEqual(src *int64) bool {

	if p.OverwriteGroupId == src {
		return true
	} else if p.OverwriteGroupId == nil || src == nil {
		return false
	}
	if *p.OverwriteGroupId != *src {
		return false
	}
	return true
}
func (p *TReplacePartitionRequest) Field2DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}
func (p *TReplacePartitionRequest) Field3DeepEqual(src *int64) bool {

	if p.TableId == src {
		return true
	} else if p.TableId == nil || src == nil {
		return false
	}
	if *p.TableId != *src {
		return false
	}
	return true
}
func (p *TReplacePartitionRequest) Field4DeepEqual(src []int64) bool {

	if len(p.PartitionIds) != len(src) {
		return false
	}
	for i, v := range p.PartitionIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TReplacePartitionRequest) Field5DeepEqual(src *string) bool {

	if p.BeEndpoint == src {
		return true
	} else if p.BeEndpoint == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BeEndpoint, *src) != 0 {
		return false
	}
	return true
}

type TReplacePartitionResult_ struct {
	Status     *status.TStatus                    `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	Partitions []*descriptors.TOlapTablePartition `thrift:"partitions,2,optional" frugal:"2,optional,list<descriptors.TOlapTablePartition>" json:"partitions,omitempty"`
	Tablets    []*descriptors.TTabletLocation     `thrift:"tablets,3,optional" frugal:"3,optional,list<descriptors.TTabletLocation>" json:"tablets,omitempty"`
	Nodes      []*descriptors.TNodeInfo           `thrift:"nodes,4,optional" frugal:"4,optional,list<descriptors.TNodeInfo>" json:"nodes,omitempty"`
}

func NewTReplacePartitionResult_() *TReplacePartitionResult_ {
	return &TReplacePartitionResult_{}
}

func (p *TReplacePartitionResult_) InitDefault() {
}

var TReplacePartitionResult__Status_DEFAULT *status.TStatus

func (p *TReplacePartitionResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TReplacePartitionResult__Status_DEFAULT
	}
	return p.Status
}

var TReplacePartitionResult__Partitions_DEFAULT []*descriptors.TOlapTablePartition

func (p *TReplacePartitionResult_) GetPartitions() (v []*descriptors.TOlapTablePartition) {
	if !p.IsSetPartitions() {
		return TReplacePartitionResult__Partitions_DEFAULT
	}
	return p.Partitions
}

var TReplacePartitionResult__Tablets_DEFAULT []*descriptors.TTabletLocation

func (p *TReplacePartitionResult_) GetTablets() (v []*descriptors.TTabletLocation) {
	if !p.IsSetTablets() {
		return TReplacePartitionResult__Tablets_DEFAULT
	}
	return p.Tablets
}

var TReplacePartitionResult__Nodes_DEFAULT []*descriptors.TNodeInfo

func (p *TReplacePartitionResult_) GetNodes() (v []*descriptors.TNodeInfo) {
	if !p.IsSetNodes() {
		return TReplacePartitionResult__Nodes_DEFAULT
	}
	return p.Nodes
}
func (p *TReplacePartitionResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TReplacePartitionResult_) SetPartitions(val []*descriptors.TOlapTablePartition) {
	p.Partitions = val
}
func (p *TReplacePartitionResult_) SetTablets(val []*descriptors.TTabletLocation) {
	p.Tablets = val
}
func (p *TReplacePartitionResult_) SetNodes(val []*descriptors.TNodeInfo) {
	p.Nodes = val
}

var fieldIDToName_TReplacePartitionResult_ = map[int16]string{
	1: "status",
	2: "partitions",
	3: "tablets",
	4: "nodes",
}

func (p *TReplacePartitionResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TReplacePartitionResult_) IsSetPartitions() bool {
	return p.Partitions != nil
}

func (p *TReplacePartitionResult_) IsSetTablets() bool {
	return p.Tablets != nil
}

func (p *TReplacePartitionResult_) IsSetNodes() bool {
	return p.Nodes != nil
}

func (p *TReplacePartitionResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TReplacePartitionResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TReplacePartitionResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TReplacePartitionResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*descriptors.TOlapTablePartition, 0, size)
	values := make([]descriptors.TOlapTablePartition, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Partitions = _field
	return nil
}
func (p *TReplacePartitionResult_) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*descriptors.TTabletLocation, 0, size)
	values := make([]descriptors.TTabletLocation, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tablets = _field
	return nil
}
func (p *TReplacePartitionResult_) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*descriptors.TNodeInfo, 0, size)
	values := make([]descriptors.TNodeInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Nodes = _field
	return nil
}

func (p *TReplacePartitionResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TReplacePartitionResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TReplacePartitionResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TReplacePartitionResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitions() {
		if err = oprot.WriteFieldBegin("partitions", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Partitions)); err != nil {
			return err
		}
		for _, v := range p.Partitions {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TReplacePartitionResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTablets() {
		if err = oprot.WriteFieldBegin("tablets", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tablets)); err != nil {
			return err
		}
		for _, v := range p.Tablets {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TReplacePartitionResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodes() {
		if err = oprot.WriteFieldBegin("nodes", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Nodes)); err != nil {
			return err
		}
		for _, v := range p.Nodes {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TReplacePartitionResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TReplacePartitionResult_(%+v)", *p)

}

func (p *TReplacePartitionResult_) DeepEqual(ano *TReplacePartitionResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.Partitions) {
		return false
	}
	if !p.Field3DeepEqual(ano.Tablets) {
		return false
	}
	if !p.Field4DeepEqual(ano.Nodes) {
		return false
	}
	return true
}

func (p *TReplacePartitionResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TReplacePartitionResult_) Field2DeepEqual(src []*descriptors.TOlapTablePartition) bool {

	if len(p.Partitions) != len(src) {
		return false
	}
	for i, v := range p.Partitions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TReplacePartitionResult_) Field3DeepEqual(src []*descriptors.TTabletLocation) bool {

	if len(p.Tablets) != len(src) {
		return false
	}
	for i, v := range p.Tablets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TReplacePartitionResult_) Field4DeepEqual(src []*descriptors.TNodeInfo) bool {

	if len(p.Nodes) != len(src) {
		return false
	}
	for i, v := range p.Nodes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TGetMetaReplica struct {
	Id *int64 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
}

func NewTGetMetaReplica() *TGetMetaReplica {
	return &TGetMetaReplica{}
}

func (p *TGetMetaReplica) InitDefault() {
}

var TGetMetaReplica_Id_DEFAULT int64

func (p *TGetMetaReplica) GetId() (v int64) {
	if !p.IsSetId() {
		return TGetMetaReplica_Id_DEFAULT
	}
	return *p.Id
}
func (p *TGetMetaReplica) SetId(val *int64) {
	p.Id = val
}

var fieldIDToName_TGetMetaReplica = map[int16]string{
	1: "id",
}

func (p *TGetMetaReplica) IsSetId() bool {
	return p.Id != nil
}

func (p *TGetMetaReplica) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetMetaReplica[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetMetaReplica) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}

func (p *TGetMetaReplica) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetMetaReplica"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetMetaReplica) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetMetaReplica) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetMetaReplica(%+v)", *p)

}

func (p *TGetMetaReplica) DeepEqual(ano *TGetMetaReplica) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *TGetMetaReplica) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}

type TGetMetaTablet struct {
	Id       *int64             `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Replicas []*TGetMetaReplica `thrift:"replicas,2,optional" frugal:"2,optional,list<TGetMetaReplica>" json:"replicas,omitempty"`
}

func NewTGetMetaTablet() *TGetMetaTablet {
	return &TGetMetaTablet{}
}

func (p *TGetMetaTablet) InitDefault() {
}

var TGetMetaTablet_Id_DEFAULT int64

func (p *TGetMetaTablet) GetId() (v int64) {
	if !p.IsSetId() {
		return TGetMetaTablet_Id_DEFAULT
	}
	return *p.Id
}

var TGetMetaTablet_Replicas_DEFAULT []*TGetMetaReplica

func (p *TGetMetaTablet) GetReplicas() (v []*TGetMetaReplica) {
	if !p.IsSetReplicas() {
		return TGetMetaTablet_Replicas_DEFAULT
	}
	return p.Replicas
}
func (p *TGetMetaTablet) SetId(val *int64) {
	p.Id = val
}
func (p *TGetMetaTablet) SetReplicas(val []*TGetMetaReplica) {
	p.Replicas = val
}

var fieldIDToName_TGetMetaTablet = map[int16]string{
	1: "id",
	2: "replicas",
}

func (p *TGetMetaTablet) IsSetId() bool {
	return p.Id != nil
}

func (p *TGetMetaTablet) IsSetReplicas() bool {
	return p.Replicas != nil
}

func (p *TGetMetaTablet) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetMetaTablet[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetMetaTablet) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *TGetMetaTablet) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TGetMetaReplica, 0, size)
	values := make([]TGetMetaReplica, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Replicas = _field
	return nil
}

func (p *TGetMetaTablet) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetMetaTablet"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetMetaTablet) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetMetaTablet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicas() {
		if err = oprot.WriteFieldBegin("replicas", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Replicas)); err != nil {
			return err
		}
		for _, v := range p.Replicas {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetMetaTablet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetMetaTablet(%+v)", *p)

}

func (p *TGetMetaTablet) DeepEqual(ano *TGetMetaTablet) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Replicas) {
		return false
	}
	return true
}

func (p *TGetMetaTablet) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *TGetMetaTablet) Field2DeepEqual(src []*TGetMetaReplica) bool {

	if len(p.Replicas) != len(src) {
		return false
	}
	for i, v := range p.Replicas {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TGetMetaIndex struct {
	Id      *int64            `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name    *string           `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Tablets []*TGetMetaTablet `thrift:"tablets,3,optional" frugal:"3,optional,list<TGetMetaTablet>" json:"tablets,omitempty"`
}

func NewTGetMetaIndex() *TGetMetaIndex {
	return &TGetMetaIndex{}
}

func (p *TGetMetaIndex) InitDefault() {
}

var TGetMetaIndex_Id_DEFAULT int64

func (p *TGetMetaIndex) GetId() (v int64) {
	if !p.IsSetId() {
		return TGetMetaIndex_Id_DEFAULT
	}
	return *p.Id
}

var TGetMetaIndex_Name_DEFAULT string

func (p *TGetMetaIndex) GetName() (v string) {
	if !p.IsSetName() {
		return TGetMetaIndex_Name_DEFAULT
	}
	return *p.Name
}

var TGetMetaIndex_Tablets_DEFAULT []*TGetMetaTablet

func (p *TGetMetaIndex) GetTablets() (v []*TGetMetaTablet) {
	if !p.IsSetTablets() {
		return TGetMetaIndex_Tablets_DEFAULT
	}
	return p.Tablets
}
func (p *TGetMetaIndex) SetId(val *int64) {
	p.Id = val
}
func (p *TGetMetaIndex) SetName(val *string) {
	p.Name = val
}
func (p *TGetMetaIndex) SetTablets(val []*TGetMetaTablet) {
	p.Tablets = val
}

var fieldIDToName_TGetMetaIndex = map[int16]string{
	1: "id",
	2: "name",
	3: "tablets",
}

func (p *TGetMetaIndex) IsSetId() bool {
	return p.Id != nil
}

func (p *TGetMetaIndex) IsSetName() bool {
	return p.Name != nil
}

func (p *TGetMetaIndex) IsSetTablets() bool {
	return p.Tablets != nil
}

func (p *TGetMetaIndex) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetMetaIndex[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetMetaIndex) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *TGetMetaIndex) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *TGetMetaIndex) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TGetMetaTablet, 0, size)
	values := make([]TGetMetaTablet, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tablets = _field
	return nil
}

func (p *TGetMetaIndex) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetMetaIndex"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetMetaIndex) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetMetaIndex) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetMetaIndex) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTablets() {
		if err = oprot.WriteFieldBegin("tablets", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tablets)); err != nil {
			return err
		}
		for _, v := range p.Tablets {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetMetaIndex) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetMetaIndex(%+v)", *p)

}

func (p *TGetMetaIndex) DeepEqual(ano *TGetMetaIndex) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Tablets) {
		return false
	}
	return true
}

func (p *TGetMetaIndex) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *TGetMetaIndex) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMetaIndex) Field3DeepEqual(src []*TGetMetaTablet) bool {

	if len(p.Tablets) != len(src) {
		return false
	}
	for i, v := range p.Tablets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TGetMetaPartition struct {
	Id      *int64           `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name    *string          `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Key     *string          `thrift:"key,3,optional" frugal:"3,optional,string" json:"key,omitempty"`
	Range   *string          `thrift:"range,4,optional" frugal:"4,optional,string" json:"range,omitempty"`
	IsTemp  *bool            `thrift:"is_temp,5,optional" frugal:"5,optional,bool" json:"is_temp,omitempty"`
	Indexes []*TGetMetaIndex `thrift:"indexes,6,optional" frugal:"6,optional,list<TGetMetaIndex>" json:"indexes,omitempty"`
}

func NewTGetMetaPartition() *TGetMetaPartition {
	return &TGetMetaPartition{}
}

func (p *TGetMetaPartition) InitDefault() {
}

var TGetMetaPartition_Id_DEFAULT int64

func (p *TGetMetaPartition) GetId() (v int64) {
	if !p.IsSetId() {
		return TGetMetaPartition_Id_DEFAULT
	}
	return *p.Id
}

var TGetMetaPartition_Name_DEFAULT string

func (p *TGetMetaPartition) GetName() (v string) {
	if !p.IsSetName() {
		return TGetMetaPartition_Name_DEFAULT
	}
	return *p.Name
}

var TGetMetaPartition_Key_DEFAULT string

func (p *TGetMetaPartition) GetKey() (v string) {
	if !p.IsSetKey() {
		return TGetMetaPartition_Key_DEFAULT
	}
	return *p.Key
}

var TGetMetaPartition_Range_DEFAULT string

func (p *TGetMetaPartition) GetRange() (v string) {
	if !p.IsSetRange() {
		return TGetMetaPartition_Range_DEFAULT
	}
	return *p.Range
}

var TGetMetaPartition_IsTemp_DEFAULT bool

func (p *TGetMetaPartition) GetIsTemp() (v bool) {
	if !p.IsSetIsTemp() {
		return TGetMetaPartition_IsTemp_DEFAULT
	}
	return *p.IsTemp
}

var TGetMetaPartition_Indexes_DEFAULT []*TGetMetaIndex

func (p *TGetMetaPartition) GetIndexes() (v []*TGetMetaIndex) {
	if !p.IsSetIndexes() {
		return TGetMetaPartition_Indexes_DEFAULT
	}
	return p.Indexes
}
func (p *TGetMetaPartition) SetId(val *int64) {
	p.Id = val
}
func (p *TGetMetaPartition) SetName(val *string) {
	p.Name = val
}
func (p *TGetMetaPartition) SetKey(val *string) {
	p.Key = val
}
func (p *TGetMetaPartition) SetRange(val *string) {
	p.Range = val
}
func (p *TGetMetaPartition) SetIsTemp(val *bool) {
	p.IsTemp = val
}
func (p *TGetMetaPartition) SetIndexes(val []*TGetMetaIndex) {
	p.Indexes = val
}

var fieldIDToName_TGetMetaPartition = map[int16]string{
	1: "id",
	2: "name",
	3: "key",
	4: "range",
	5: "is_temp",
	6: "indexes",
}

func (p *TGetMetaPartition) IsSetId() bool {
	return p.Id != nil
}

func (p *TGetMetaPartition) IsSetName() bool {
	return p.Name != nil
}

func (p *TGetMetaPartition) IsSetKey() bool {
	return p.Key != nil
}

func (p *TGetMetaPartition) IsSetRange() bool {
	return p.Range != nil
}

func (p *TGetMetaPartition) IsSetIsTemp() bool {
	return p.IsTemp != nil
}

func (p *TGetMetaPartition) IsSetIndexes() bool {
	return p.Indexes != nil
}

func (p *TGetMetaPartition) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetMetaPartition[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetMetaPartition) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *TGetMetaPartition) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *TGetMetaPartition) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}
func (p *TGetMetaPartition) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Range = _field
	return nil
}
func (p *TGetMetaPartition) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsTemp = _field
	return nil
}
func (p *TGetMetaPartition) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TGetMetaIndex, 0, size)
	values := make([]TGetMetaIndex, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Indexes = _field
	return nil
}

func (p *TGetMetaPartition) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetMetaPartition"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetMetaPartition) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetMetaPartition) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetMetaPartition) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetMetaPartition) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRange() {
		if err = oprot.WriteFieldBegin("range", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Range); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TGetMetaPartition) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsTemp() {
		if err = oprot.WriteFieldBegin("is_temp", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsTemp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TGetMetaPartition) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndexes() {
		if err = oprot.WriteFieldBegin("indexes", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Indexes)); err != nil {
			return err
		}
		for _, v := range p.Indexes {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TGetMetaPartition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetMetaPartition(%+v)", *p)

}

func (p *TGetMetaPartition) DeepEqual(ano *TGetMetaPartition) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Key) {
		return false
	}
	if !p.Field4DeepEqual(ano.Range) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsTemp) {
		return false
	}
	if !p.Field6DeepEqual(ano.Indexes) {
		return false
	}
	return true
}

func (p *TGetMetaPartition) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *TGetMetaPartition) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMetaPartition) Field3DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMetaPartition) Field4DeepEqual(src *string) bool {

	if p.Range == src {
		return true
	} else if p.Range == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Range, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMetaPartition) Field5DeepEqual(src *bool) bool {

	if p.IsTemp == src {
		return true
	} else if p.IsTemp == nil || src == nil {
		return false
	}
	if *p.IsTemp != *src {
		return false
	}
	return true
}
func (p *TGetMetaPartition) Field6DeepEqual(src []*TGetMetaIndex) bool {

	if len(p.Indexes) != len(src) {
		return false
	}
	for i, v := range p.Indexes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TGetMetaTable struct {
	Id         *int64               `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name       *string              `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	InTrash    *bool                `thrift:"in_trash,3,optional" frugal:"3,optional,bool" json:"in_trash,omitempty"`
	Partitions []*TGetMetaPartition `thrift:"partitions,4,optional" frugal:"4,optional,list<TGetMetaPartition>" json:"partitions,omitempty"`
}

func NewTGetMetaTable() *TGetMetaTable {
	return &TGetMetaTable{}
}

func (p *TGetMetaTable) InitDefault() {
}

var TGetMetaTable_Id_DEFAULT int64

func (p *TGetMetaTable) GetId() (v int64) {
	if !p.IsSetId() {
		return TGetMetaTable_Id_DEFAULT
	}
	return *p.Id
}

var TGetMetaTable_Name_DEFAULT string

func (p *TGetMetaTable) GetName() (v string) {
	if !p.IsSetName() {
		return TGetMetaTable_Name_DEFAULT
	}
	return *p.Name
}

var TGetMetaTable_InTrash_DEFAULT bool

func (p *TGetMetaTable) GetInTrash() (v bool) {
	if !p.IsSetInTrash() {
		return TGetMetaTable_InTrash_DEFAULT
	}
	return *p.InTrash
}

var TGetMetaTable_Partitions_DEFAULT []*TGetMetaPartition

func (p *TGetMetaTable) GetPartitions() (v []*TGetMetaPartition) {
	if !p.IsSetPartitions() {
		return TGetMetaTable_Partitions_DEFAULT
	}
	return p.Partitions
}
func (p *TGetMetaTable) SetId(val *int64) {
	p.Id = val
}
func (p *TGetMetaTable) SetName(val *string) {
	p.Name = val
}
func (p *TGetMetaTable) SetInTrash(val *bool) {
	p.InTrash = val
}
func (p *TGetMetaTable) SetPartitions(val []*TGetMetaPartition) {
	p.Partitions = val
}

var fieldIDToName_TGetMetaTable = map[int16]string{
	1: "id",
	2: "name",
	3: "in_trash",
	4: "partitions",
}

func (p *TGetMetaTable) IsSetId() bool {
	return p.Id != nil
}

func (p *TGetMetaTable) IsSetName() bool {
	return p.Name != nil
}

func (p *TGetMetaTable) IsSetInTrash() bool {
	return p.InTrash != nil
}

func (p *TGetMetaTable) IsSetPartitions() bool {
	return p.Partitions != nil
}

func (p *TGetMetaTable) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetMetaTable[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetMetaTable) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *TGetMetaTable) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *TGetMetaTable) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InTrash = _field
	return nil
}
func (p *TGetMetaTable) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TGetMetaPartition, 0, size)
	values := make([]TGetMetaPartition, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Partitions = _field
	return nil
}

func (p *TGetMetaTable) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetMetaTable"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetMetaTable) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetMetaTable) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetMetaTable) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInTrash() {
		if err = oprot.WriteFieldBegin("in_trash", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.InTrash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetMetaTable) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitions() {
		if err = oprot.WriteFieldBegin("partitions", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Partitions)); err != nil {
			return err
		}
		for _, v := range p.Partitions {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TGetMetaTable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetMetaTable(%+v)", *p)

}

func (p *TGetMetaTable) DeepEqual(ano *TGetMetaTable) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.InTrash) {
		return false
	}
	if !p.Field4DeepEqual(ano.Partitions) {
		return false
	}
	return true
}

func (p *TGetMetaTable) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *TGetMetaTable) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMetaTable) Field3DeepEqual(src *bool) bool {

	if p.InTrash == src {
		return true
	} else if p.InTrash == nil || src == nil {
		return false
	}
	if *p.InTrash != *src {
		return false
	}
	return true
}
func (p *TGetMetaTable) Field4DeepEqual(src []*TGetMetaPartition) bool {

	if len(p.Partitions) != len(src) {
		return false
	}
	for i, v := range p.Partitions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TGetMetaDB struct {
	Id             *int64           `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name           *string          `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	OnlyTableNames *bool            `thrift:"only_table_names,3,optional" frugal:"3,optional,bool" json:"only_table_names,omitempty"`
	Tables         []*TGetMetaTable `thrift:"tables,4,optional" frugal:"4,optional,list<TGetMetaTable>" json:"tables,omitempty"`
}

func NewTGetMetaDB() *TGetMetaDB {
	return &TGetMetaDB{}
}

func (p *TGetMetaDB) InitDefault() {
}

var TGetMetaDB_Id_DEFAULT int64

func (p *TGetMetaDB) GetId() (v int64) {
	if !p.IsSetId() {
		return TGetMetaDB_Id_DEFAULT
	}
	return *p.Id
}

var TGetMetaDB_Name_DEFAULT string

func (p *TGetMetaDB) GetName() (v string) {
	if !p.IsSetName() {
		return TGetMetaDB_Name_DEFAULT
	}
	return *p.Name
}

var TGetMetaDB_OnlyTableNames_DEFAULT bool

func (p *TGetMetaDB) GetOnlyTableNames() (v bool) {
	if !p.IsSetOnlyTableNames() {
		return TGetMetaDB_OnlyTableNames_DEFAULT
	}
	return *p.OnlyTableNames
}

var TGetMetaDB_Tables_DEFAULT []*TGetMetaTable

func (p *TGetMetaDB) GetTables() (v []*TGetMetaTable) {
	if !p.IsSetTables() {
		return TGetMetaDB_Tables_DEFAULT
	}
	return p.Tables
}
func (p *TGetMetaDB) SetId(val *int64) {
	p.Id = val
}
func (p *TGetMetaDB) SetName(val *string) {
	p.Name = val
}
func (p *TGetMetaDB) SetOnlyTableNames(val *bool) {
	p.OnlyTableNames = val
}
func (p *TGetMetaDB) SetTables(val []*TGetMetaTable) {
	p.Tables = val
}

var fieldIDToName_TGetMetaDB = map[int16]string{
	1: "id",
	2: "name",
	3: "only_table_names",
	4: "tables",
}

func (p *TGetMetaDB) IsSetId() bool {
	return p.Id != nil
}

func (p *TGetMetaDB) IsSetName() bool {
	return p.Name != nil
}

func (p *TGetMetaDB) IsSetOnlyTableNames() bool {
	return p.OnlyTableNames != nil
}

func (p *TGetMetaDB) IsSetTables() bool {
	return p.Tables != nil
}

func (p *TGetMetaDB) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetMetaDB[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetMetaDB) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *TGetMetaDB) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *TGetMetaDB) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OnlyTableNames = _field
	return nil
}
func (p *TGetMetaDB) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TGetMetaTable, 0, size)
	values := make([]TGetMetaTable, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tables = _field
	return nil
}

func (p *TGetMetaDB) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetMetaDB"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetMetaDB) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetMetaDB) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetMetaDB) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOnlyTableNames() {
		if err = oprot.WriteFieldBegin("only_table_names", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.OnlyTableNames); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetMetaDB) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTables() {
		if err = oprot.WriteFieldBegin("tables", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tables)); err != nil {
			return err
		}
		for _, v := range p.Tables {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TGetMetaDB) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetMetaDB(%+v)", *p)

}

func (p *TGetMetaDB) DeepEqual(ano *TGetMetaDB) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.OnlyTableNames) {
		return false
	}
	if !p.Field4DeepEqual(ano.Tables) {
		return false
	}
	return true
}

func (p *TGetMetaDB) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *TGetMetaDB) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMetaDB) Field3DeepEqual(src *bool) bool {

	if p.OnlyTableNames == src {
		return true
	} else if p.OnlyTableNames == nil || src == nil {
		return false
	}
	if *p.OnlyTableNames != *src {
		return false
	}
	return true
}
func (p *TGetMetaDB) Field4DeepEqual(src []*TGetMetaTable) bool {

	if len(p.Tables) != len(src) {
		return false
	}
	for i, v := range p.Tables {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TGetMetaRequest struct {
	Cluster *string     `thrift:"cluster,1,optional" frugal:"1,optional,string" json:"cluster,omitempty"`
	User    *string     `thrift:"user,2,optional" frugal:"2,optional,string" json:"user,omitempty"`
	Passwd  *string     `thrift:"passwd,3,optional" frugal:"3,optional,string" json:"passwd,omitempty"`
	UserIp  *string     `thrift:"user_ip,4,optional" frugal:"4,optional,string" json:"user_ip,omitempty"`
	Token   *string     `thrift:"token,5,optional" frugal:"5,optional,string" json:"token,omitempty"`
	Db      *TGetMetaDB `thrift:"db,6,optional" frugal:"6,optional,TGetMetaDB" json:"db,omitempty"`
}

func NewTGetMetaRequest() *TGetMetaRequest {
	return &TGetMetaRequest{}
}

func (p *TGetMetaRequest) InitDefault() {
}

var TGetMetaRequest_Cluster_DEFAULT string

func (p *TGetMetaRequest) GetCluster() (v string) {
	if !p.IsSetCluster() {
		return TGetMetaRequest_Cluster_DEFAULT
	}
	return *p.Cluster
}

var TGetMetaRequest_User_DEFAULT string

func (p *TGetMetaRequest) GetUser() (v string) {
	if !p.IsSetUser() {
		return TGetMetaRequest_User_DEFAULT
	}
	return *p.User
}

var TGetMetaRequest_Passwd_DEFAULT string

func (p *TGetMetaRequest) GetPasswd() (v string) {
	if !p.IsSetPasswd() {
		return TGetMetaRequest_Passwd_DEFAULT
	}
	return *p.Passwd
}

var TGetMetaRequest_UserIp_DEFAULT string

func (p *TGetMetaRequest) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TGetMetaRequest_UserIp_DEFAULT
	}
	return *p.UserIp
}

var TGetMetaRequest_Token_DEFAULT string

func (p *TGetMetaRequest) GetToken() (v string) {
	if !p.IsSetToken() {
		return TGetMetaRequest_Token_DEFAULT
	}
	return *p.Token
}

var TGetMetaRequest_Db_DEFAULT *TGetMetaDB

func (p *TGetMetaRequest) GetDb() (v *TGetMetaDB) {
	if !p.IsSetDb() {
		return TGetMetaRequest_Db_DEFAULT
	}
	return p.Db
}
func (p *TGetMetaRequest) SetCluster(val *string) {
	p.Cluster = val
}
func (p *TGetMetaRequest) SetUser(val *string) {
	p.User = val
}
func (p *TGetMetaRequest) SetPasswd(val *string) {
	p.Passwd = val
}
func (p *TGetMetaRequest) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TGetMetaRequest) SetToken(val *string) {
	p.Token = val
}
func (p *TGetMetaRequest) SetDb(val *TGetMetaDB) {
	p.Db = val
}

var fieldIDToName_TGetMetaRequest = map[int16]string{
	1: "cluster",
	2: "user",
	3: "passwd",
	4: "user_ip",
	5: "token",
	6: "db",
}

func (p *TGetMetaRequest) IsSetCluster() bool {
	return p.Cluster != nil
}

func (p *TGetMetaRequest) IsSetUser() bool {
	return p.User != nil
}

func (p *TGetMetaRequest) IsSetPasswd() bool {
	return p.Passwd != nil
}

func (p *TGetMetaRequest) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TGetMetaRequest) IsSetToken() bool {
	return p.Token != nil
}

func (p *TGetMetaRequest) IsSetDb() bool {
	return p.Db != nil
}

func (p *TGetMetaRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetMetaRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetMetaRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cluster = _field
	return nil
}
func (p *TGetMetaRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *TGetMetaRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Passwd = _field
	return nil
}
func (p *TGetMetaRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TGetMetaRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}
func (p *TGetMetaRequest) ReadField6(iprot thrift.TProtocol) error {
	_field := NewTGetMetaDB()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Db = _field
	return nil
}

func (p *TGetMetaRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetMetaRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetMetaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCluster() {
		if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetMetaRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetMetaRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPasswd() {
		if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Passwd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetMetaRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TGetMetaRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TGetMetaRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDb() {
		if err = oprot.WriteFieldBegin("db", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Db.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TGetMetaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetMetaRequest(%+v)", *p)

}

func (p *TGetMetaRequest) DeepEqual(ano *TGetMetaRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field4DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field5DeepEqual(ano.Token) {
		return false
	}
	if !p.Field6DeepEqual(ano.Db) {
		return false
	}
	return true
}

func (p *TGetMetaRequest) Field1DeepEqual(src *string) bool {

	if p.Cluster == src {
		return true
	} else if p.Cluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMetaRequest) Field2DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMetaRequest) Field3DeepEqual(src *string) bool {

	if p.Passwd == src {
		return true
	} else if p.Passwd == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Passwd, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMetaRequest) Field4DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMetaRequest) Field5DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMetaRequest) Field6DeepEqual(src *TGetMetaDB) bool {

	if !p.Db.DeepEqual(src) {
		return false
	}
	return true
}

type TGetMetaReplicaMeta struct {
	Id        *int64 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	BackendId *int64 `thrift:"backend_id,2,optional" frugal:"2,optional,i64" json:"backend_id,omitempty"`
	Version   *int64 `thrift:"version,3,optional" frugal:"3,optional,i64" json:"version,omitempty"`
}

func NewTGetMetaReplicaMeta() *TGetMetaReplicaMeta {
	return &TGetMetaReplicaMeta{}
}

func (p *TGetMetaReplicaMeta) InitDefault() {
}

var TGetMetaReplicaMeta_Id_DEFAULT int64

func (p *TGetMetaReplicaMeta) GetId() (v int64) {
	if !p.IsSetId() {
		return TGetMetaReplicaMeta_Id_DEFAULT
	}
	return *p.Id
}

var TGetMetaReplicaMeta_BackendId_DEFAULT int64

func (p *TGetMetaReplicaMeta) GetBackendId() (v int64) {
	if !p.IsSetBackendId() {
		return TGetMetaReplicaMeta_BackendId_DEFAULT
	}
	return *p.BackendId
}

var TGetMetaReplicaMeta_Version_DEFAULT int64

func (p *TGetMetaReplicaMeta) GetVersion() (v int64) {
	if !p.IsSetVersion() {
		return TGetMetaReplicaMeta_Version_DEFAULT
	}
	return *p.Version
}
func (p *TGetMetaReplicaMeta) SetId(val *int64) {
	p.Id = val
}
func (p *TGetMetaReplicaMeta) SetBackendId(val *int64) {
	p.BackendId = val
}
func (p *TGetMetaReplicaMeta) SetVersion(val *int64) {
	p.Version = val
}

var fieldIDToName_TGetMetaReplicaMeta = map[int16]string{
	1: "id",
	2: "backend_id",
	3: "version",
}

func (p *TGetMetaReplicaMeta) IsSetId() bool {
	return p.Id != nil
}

func (p *TGetMetaReplicaMeta) IsSetBackendId() bool {
	return p.BackendId != nil
}

func (p *TGetMetaReplicaMeta) IsSetVersion() bool {
	return p.Version != nil
}

func (p *TGetMetaReplicaMeta) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetMetaReplicaMeta[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetMetaReplicaMeta) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *TGetMetaReplicaMeta) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BackendId = _field
	return nil
}
func (p *TGetMetaReplicaMeta) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}

func (p *TGetMetaReplicaMeta) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetMetaReplicaMeta"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetMetaReplicaMeta) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetMetaReplicaMeta) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackendId() {
		if err = oprot.WriteFieldBegin("backend_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BackendId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetMetaReplicaMeta) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetMetaReplicaMeta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetMetaReplicaMeta(%+v)", *p)

}

func (p *TGetMetaReplicaMeta) DeepEqual(ano *TGetMetaReplicaMeta) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.BackendId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	return true
}

func (p *TGetMetaReplicaMeta) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *TGetMetaReplicaMeta) Field2DeepEqual(src *int64) bool {

	if p.BackendId == src {
		return true
	} else if p.BackendId == nil || src == nil {
		return false
	}
	if *p.BackendId != *src {
		return false
	}
	return true
}
func (p *TGetMetaReplicaMeta) Field3DeepEqual(src *int64) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if *p.Version != *src {
		return false
	}
	return true
}

type TGetMetaTabletMeta struct {
	Id       *int64                 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Replicas []*TGetMetaReplicaMeta `thrift:"replicas,2,optional" frugal:"2,optional,list<TGetMetaReplicaMeta>" json:"replicas,omitempty"`
}

func NewTGetMetaTabletMeta() *TGetMetaTabletMeta {
	return &TGetMetaTabletMeta{}
}

func (p *TGetMetaTabletMeta) InitDefault() {
}

var TGetMetaTabletMeta_Id_DEFAULT int64

func (p *TGetMetaTabletMeta) GetId() (v int64) {
	if !p.IsSetId() {
		return TGetMetaTabletMeta_Id_DEFAULT
	}
	return *p.Id
}

var TGetMetaTabletMeta_Replicas_DEFAULT []*TGetMetaReplicaMeta

func (p *TGetMetaTabletMeta) GetReplicas() (v []*TGetMetaReplicaMeta) {
	if !p.IsSetReplicas() {
		return TGetMetaTabletMeta_Replicas_DEFAULT
	}
	return p.Replicas
}
func (p *TGetMetaTabletMeta) SetId(val *int64) {
	p.Id = val
}
func (p *TGetMetaTabletMeta) SetReplicas(val []*TGetMetaReplicaMeta) {
	p.Replicas = val
}

var fieldIDToName_TGetMetaTabletMeta = map[int16]string{
	1: "id",
	2: "replicas",
}

func (p *TGetMetaTabletMeta) IsSetId() bool {
	return p.Id != nil
}

func (p *TGetMetaTabletMeta) IsSetReplicas() bool {
	return p.Replicas != nil
}

func (p *TGetMetaTabletMeta) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetMetaTabletMeta[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetMetaTabletMeta) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *TGetMetaTabletMeta) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TGetMetaReplicaMeta, 0, size)
	values := make([]TGetMetaReplicaMeta, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Replicas = _field
	return nil
}

func (p *TGetMetaTabletMeta) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetMetaTabletMeta"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetMetaTabletMeta) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetMetaTabletMeta) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicas() {
		if err = oprot.WriteFieldBegin("replicas", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Replicas)); err != nil {
			return err
		}
		for _, v := range p.Replicas {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetMetaTabletMeta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetMetaTabletMeta(%+v)", *p)

}

func (p *TGetMetaTabletMeta) DeepEqual(ano *TGetMetaTabletMeta) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Replicas) {
		return false
	}
	return true
}

func (p *TGetMetaTabletMeta) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *TGetMetaTabletMeta) Field2DeepEqual(src []*TGetMetaReplicaMeta) bool {

	if len(p.Replicas) != len(src) {
		return false
	}
	for i, v := range p.Replicas {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TGetMetaIndexMeta struct {
	Id      *int64                `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name    *string               `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Tablets []*TGetMetaTabletMeta `thrift:"tablets,3,optional" frugal:"3,optional,list<TGetMetaTabletMeta>" json:"tablets,omitempty"`
}

func NewTGetMetaIndexMeta() *TGetMetaIndexMeta {
	return &TGetMetaIndexMeta{}
}

func (p *TGetMetaIndexMeta) InitDefault() {
}

var TGetMetaIndexMeta_Id_DEFAULT int64

func (p *TGetMetaIndexMeta) GetId() (v int64) {
	if !p.IsSetId() {
		return TGetMetaIndexMeta_Id_DEFAULT
	}
	return *p.Id
}

var TGetMetaIndexMeta_Name_DEFAULT string

func (p *TGetMetaIndexMeta) GetName() (v string) {
	if !p.IsSetName() {
		return TGetMetaIndexMeta_Name_DEFAULT
	}
	return *p.Name
}

var TGetMetaIndexMeta_Tablets_DEFAULT []*TGetMetaTabletMeta

func (p *TGetMetaIndexMeta) GetTablets() (v []*TGetMetaTabletMeta) {
	if !p.IsSetTablets() {
		return TGetMetaIndexMeta_Tablets_DEFAULT
	}
	return p.Tablets
}
func (p *TGetMetaIndexMeta) SetId(val *int64) {
	p.Id = val
}
func (p *TGetMetaIndexMeta) SetName(val *string) {
	p.Name = val
}
func (p *TGetMetaIndexMeta) SetTablets(val []*TGetMetaTabletMeta) {
	p.Tablets = val
}

var fieldIDToName_TGetMetaIndexMeta = map[int16]string{
	1: "id",
	2: "name",
	3: "tablets",
}

func (p *TGetMetaIndexMeta) IsSetId() bool {
	return p.Id != nil
}

func (p *TGetMetaIndexMeta) IsSetName() bool {
	return p.Name != nil
}

func (p *TGetMetaIndexMeta) IsSetTablets() bool {
	return p.Tablets != nil
}

func (p *TGetMetaIndexMeta) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetMetaIndexMeta[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetMetaIndexMeta) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *TGetMetaIndexMeta) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *TGetMetaIndexMeta) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TGetMetaTabletMeta, 0, size)
	values := make([]TGetMetaTabletMeta, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tablets = _field
	return nil
}

func (p *TGetMetaIndexMeta) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetMetaIndexMeta"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetMetaIndexMeta) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetMetaIndexMeta) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetMetaIndexMeta) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTablets() {
		if err = oprot.WriteFieldBegin("tablets", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tablets)); err != nil {
			return err
		}
		for _, v := range p.Tablets {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetMetaIndexMeta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetMetaIndexMeta(%+v)", *p)

}

func (p *TGetMetaIndexMeta) DeepEqual(ano *TGetMetaIndexMeta) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Tablets) {
		return false
	}
	return true
}

func (p *TGetMetaIndexMeta) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *TGetMetaIndexMeta) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMetaIndexMeta) Field3DeepEqual(src []*TGetMetaTabletMeta) bool {

	if len(p.Tablets) != len(src) {
		return false
	}
	for i, v := range p.Tablets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TGetMetaPartitionMeta struct {
	Id             *int64               `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name           *string              `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Key            *string              `thrift:"key,3,optional" frugal:"3,optional,string" json:"key,omitempty"`
	Range          *string              `thrift:"range,4,optional" frugal:"4,optional,string" json:"range,omitempty"`
	VisibleVersion *int64               `thrift:"visible_version,5,optional" frugal:"5,optional,i64" json:"visible_version,omitempty"`
	IsTemp         *bool                `thrift:"is_temp,6,optional" frugal:"6,optional,bool" json:"is_temp,omitempty"`
	Indexes        []*TGetMetaIndexMeta `thrift:"indexes,7,optional" frugal:"7,optional,list<TGetMetaIndexMeta>" json:"indexes,omitempty"`
}

func NewTGetMetaPartitionMeta() *TGetMetaPartitionMeta {
	return &TGetMetaPartitionMeta{}
}

func (p *TGetMetaPartitionMeta) InitDefault() {
}

var TGetMetaPartitionMeta_Id_DEFAULT int64

func (p *TGetMetaPartitionMeta) GetId() (v int64) {
	if !p.IsSetId() {
		return TGetMetaPartitionMeta_Id_DEFAULT
	}
	return *p.Id
}

var TGetMetaPartitionMeta_Name_DEFAULT string

func (p *TGetMetaPartitionMeta) GetName() (v string) {
	if !p.IsSetName() {
		return TGetMetaPartitionMeta_Name_DEFAULT
	}
	return *p.Name
}

var TGetMetaPartitionMeta_Key_DEFAULT string

func (p *TGetMetaPartitionMeta) GetKey() (v string) {
	if !p.IsSetKey() {
		return TGetMetaPartitionMeta_Key_DEFAULT
	}
	return *p.Key
}

var TGetMetaPartitionMeta_Range_DEFAULT string

func (p *TGetMetaPartitionMeta) GetRange() (v string) {
	if !p.IsSetRange() {
		return TGetMetaPartitionMeta_Range_DEFAULT
	}
	return *p.Range
}

var TGetMetaPartitionMeta_VisibleVersion_DEFAULT int64

func (p *TGetMetaPartitionMeta) GetVisibleVersion() (v int64) {
	if !p.IsSetVisibleVersion() {
		return TGetMetaPartitionMeta_VisibleVersion_DEFAULT
	}
	return *p.VisibleVersion
}

var TGetMetaPartitionMeta_IsTemp_DEFAULT bool

func (p *TGetMetaPartitionMeta) GetIsTemp() (v bool) {
	if !p.IsSetIsTemp() {
		return TGetMetaPartitionMeta_IsTemp_DEFAULT
	}
	return *p.IsTemp
}

var TGetMetaPartitionMeta_Indexes_DEFAULT []*TGetMetaIndexMeta

func (p *TGetMetaPartitionMeta) GetIndexes() (v []*TGetMetaIndexMeta) {
	if !p.IsSetIndexes() {
		return TGetMetaPartitionMeta_Indexes_DEFAULT
	}
	return p.Indexes
}
func (p *TGetMetaPartitionMeta) SetId(val *int64) {
	p.Id = val
}
func (p *TGetMetaPartitionMeta) SetName(val *string) {
	p.Name = val
}
func (p *TGetMetaPartitionMeta) SetKey(val *string) {
	p.Key = val
}
func (p *TGetMetaPartitionMeta) SetRange(val *string) {
	p.Range = val
}
func (p *TGetMetaPartitionMeta) SetVisibleVersion(val *int64) {
	p.VisibleVersion = val
}
func (p *TGetMetaPartitionMeta) SetIsTemp(val *bool) {
	p.IsTemp = val
}
func (p *TGetMetaPartitionMeta) SetIndexes(val []*TGetMetaIndexMeta) {
	p.Indexes = val
}

var fieldIDToName_TGetMetaPartitionMeta = map[int16]string{
	1: "id",
	2: "name",
	3: "key",
	4: "range",
	5: "visible_version",
	6: "is_temp",
	7: "indexes",
}

func (p *TGetMetaPartitionMeta) IsSetId() bool {
	return p.Id != nil
}

func (p *TGetMetaPartitionMeta) IsSetName() bool {
	return p.Name != nil
}

func (p *TGetMetaPartitionMeta) IsSetKey() bool {
	return p.Key != nil
}

func (p *TGetMetaPartitionMeta) IsSetRange() bool {
	return p.Range != nil
}

func (p *TGetMetaPartitionMeta) IsSetVisibleVersion() bool {
	return p.VisibleVersion != nil
}

func (p *TGetMetaPartitionMeta) IsSetIsTemp() bool {
	return p.IsTemp != nil
}

func (p *TGetMetaPartitionMeta) IsSetIndexes() bool {
	return p.Indexes != nil
}

func (p *TGetMetaPartitionMeta) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetMetaPartitionMeta[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetMetaPartitionMeta) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *TGetMetaPartitionMeta) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *TGetMetaPartitionMeta) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}
func (p *TGetMetaPartitionMeta) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Range = _field
	return nil
}
func (p *TGetMetaPartitionMeta) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VisibleVersion = _field
	return nil
}
func (p *TGetMetaPartitionMeta) ReadField6(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsTemp = _field
	return nil
}
func (p *TGetMetaPartitionMeta) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TGetMetaIndexMeta, 0, size)
	values := make([]TGetMetaIndexMeta, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Indexes = _field
	return nil
}

func (p *TGetMetaPartitionMeta) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetMetaPartitionMeta"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetMetaPartitionMeta) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetMetaPartitionMeta) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetMetaPartitionMeta) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetMetaPartitionMeta) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRange() {
		if err = oprot.WriteFieldBegin("range", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Range); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TGetMetaPartitionMeta) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetVisibleVersion() {
		if err = oprot.WriteFieldBegin("visible_version", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VisibleVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TGetMetaPartitionMeta) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsTemp() {
		if err = oprot.WriteFieldBegin("is_temp", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsTemp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TGetMetaPartitionMeta) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndexes() {
		if err = oprot.WriteFieldBegin("indexes", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Indexes)); err != nil {
			return err
		}
		for _, v := range p.Indexes {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TGetMetaPartitionMeta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetMetaPartitionMeta(%+v)", *p)

}

func (p *TGetMetaPartitionMeta) DeepEqual(ano *TGetMetaPartitionMeta) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Key) {
		return false
	}
	if !p.Field4DeepEqual(ano.Range) {
		return false
	}
	if !p.Field5DeepEqual(ano.VisibleVersion) {
		return false
	}
	if !p.Field6DeepEqual(ano.IsTemp) {
		return false
	}
	if !p.Field7DeepEqual(ano.Indexes) {
		return false
	}
	return true
}

func (p *TGetMetaPartitionMeta) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *TGetMetaPartitionMeta) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMetaPartitionMeta) Field3DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMetaPartitionMeta) Field4DeepEqual(src *string) bool {

	if p.Range == src {
		return true
	} else if p.Range == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Range, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMetaPartitionMeta) Field5DeepEqual(src *int64) bool {

	if p.VisibleVersion == src {
		return true
	} else if p.VisibleVersion == nil || src == nil {
		return false
	}
	if *p.VisibleVersion != *src {
		return false
	}
	return true
}
func (p *TGetMetaPartitionMeta) Field6DeepEqual(src *bool) bool {

	if p.IsTemp == src {
		return true
	} else if p.IsTemp == nil || src == nil {
		return false
	}
	if *p.IsTemp != *src {
		return false
	}
	return true
}
func (p *TGetMetaPartitionMeta) Field7DeepEqual(src []*TGetMetaIndexMeta) bool {

	if len(p.Indexes) != len(src) {
		return false
	}
	for i, v := range p.Indexes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TGetMetaTableMeta struct {
	Id         *int64                   `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name       *string                  `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	InTrash    *bool                    `thrift:"in_trash,3,optional" frugal:"3,optional,bool" json:"in_trash,omitempty"`
	Partitions []*TGetMetaPartitionMeta `thrift:"partitions,4,optional" frugal:"4,optional,list<TGetMetaPartitionMeta>" json:"partitions,omitempty"`
}

func NewTGetMetaTableMeta() *TGetMetaTableMeta {
	return &TGetMetaTableMeta{}
}

func (p *TGetMetaTableMeta) InitDefault() {
}

var TGetMetaTableMeta_Id_DEFAULT int64

func (p *TGetMetaTableMeta) GetId() (v int64) {
	if !p.IsSetId() {
		return TGetMetaTableMeta_Id_DEFAULT
	}
	return *p.Id
}

var TGetMetaTableMeta_Name_DEFAULT string

func (p *TGetMetaTableMeta) GetName() (v string) {
	if !p.IsSetName() {
		return TGetMetaTableMeta_Name_DEFAULT
	}
	return *p.Name
}

var TGetMetaTableMeta_InTrash_DEFAULT bool

func (p *TGetMetaTableMeta) GetInTrash() (v bool) {
	if !p.IsSetInTrash() {
		return TGetMetaTableMeta_InTrash_DEFAULT
	}
	return *p.InTrash
}

var TGetMetaTableMeta_Partitions_DEFAULT []*TGetMetaPartitionMeta

func (p *TGetMetaTableMeta) GetPartitions() (v []*TGetMetaPartitionMeta) {
	if !p.IsSetPartitions() {
		return TGetMetaTableMeta_Partitions_DEFAULT
	}
	return p.Partitions
}
func (p *TGetMetaTableMeta) SetId(val *int64) {
	p.Id = val
}
func (p *TGetMetaTableMeta) SetName(val *string) {
	p.Name = val
}
func (p *TGetMetaTableMeta) SetInTrash(val *bool) {
	p.InTrash = val
}
func (p *TGetMetaTableMeta) SetPartitions(val []*TGetMetaPartitionMeta) {
	p.Partitions = val
}

var fieldIDToName_TGetMetaTableMeta = map[int16]string{
	1: "id",
	2: "name",
	3: "in_trash",
	4: "partitions",
}

func (p *TGetMetaTableMeta) IsSetId() bool {
	return p.Id != nil
}

func (p *TGetMetaTableMeta) IsSetName() bool {
	return p.Name != nil
}

func (p *TGetMetaTableMeta) IsSetInTrash() bool {
	return p.InTrash != nil
}

func (p *TGetMetaTableMeta) IsSetPartitions() bool {
	return p.Partitions != nil
}

func (p *TGetMetaTableMeta) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetMetaTableMeta[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetMetaTableMeta) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *TGetMetaTableMeta) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *TGetMetaTableMeta) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InTrash = _field
	return nil
}
func (p *TGetMetaTableMeta) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TGetMetaPartitionMeta, 0, size)
	values := make([]TGetMetaPartitionMeta, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Partitions = _field
	return nil
}

func (p *TGetMetaTableMeta) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetMetaTableMeta"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetMetaTableMeta) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetMetaTableMeta) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetMetaTableMeta) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInTrash() {
		if err = oprot.WriteFieldBegin("in_trash", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.InTrash); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetMetaTableMeta) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitions() {
		if err = oprot.WriteFieldBegin("partitions", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Partitions)); err != nil {
			return err
		}
		for _, v := range p.Partitions {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TGetMetaTableMeta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetMetaTableMeta(%+v)", *p)

}

func (p *TGetMetaTableMeta) DeepEqual(ano *TGetMetaTableMeta) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.InTrash) {
		return false
	}
	if !p.Field4DeepEqual(ano.Partitions) {
		return false
	}
	return true
}

func (p *TGetMetaTableMeta) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *TGetMetaTableMeta) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMetaTableMeta) Field3DeepEqual(src *bool) bool {

	if p.InTrash == src {
		return true
	} else if p.InTrash == nil || src == nil {
		return false
	}
	if *p.InTrash != *src {
		return false
	}
	return true
}
func (p *TGetMetaTableMeta) Field4DeepEqual(src []*TGetMetaPartitionMeta) bool {

	if len(p.Partitions) != len(src) {
		return false
	}
	for i, v := range p.Partitions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TGetMetaDBMeta struct {
	Id                *int64               `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name              *string              `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Tables            []*TGetMetaTableMeta `thrift:"tables,3,optional" frugal:"3,optional,list<TGetMetaTableMeta>" json:"tables,omitempty"`
	DroppedPartitions []int64              `thrift:"dropped_partitions,4,optional" frugal:"4,optional,list<i64>" json:"dropped_partitions,omitempty"`
	DroppedTables     []int64              `thrift:"dropped_tables,5,optional" frugal:"5,optional,list<i64>" json:"dropped_tables,omitempty"`
}

func NewTGetMetaDBMeta() *TGetMetaDBMeta {
	return &TGetMetaDBMeta{}
}

func (p *TGetMetaDBMeta) InitDefault() {
}

var TGetMetaDBMeta_Id_DEFAULT int64

func (p *TGetMetaDBMeta) GetId() (v int64) {
	if !p.IsSetId() {
		return TGetMetaDBMeta_Id_DEFAULT
	}
	return *p.Id
}

var TGetMetaDBMeta_Name_DEFAULT string

func (p *TGetMetaDBMeta) GetName() (v string) {
	if !p.IsSetName() {
		return TGetMetaDBMeta_Name_DEFAULT
	}
	return *p.Name
}

var TGetMetaDBMeta_Tables_DEFAULT []*TGetMetaTableMeta

func (p *TGetMetaDBMeta) GetTables() (v []*TGetMetaTableMeta) {
	if !p.IsSetTables() {
		return TGetMetaDBMeta_Tables_DEFAULT
	}
	return p.Tables
}

var TGetMetaDBMeta_DroppedPartitions_DEFAULT []int64

func (p *TGetMetaDBMeta) GetDroppedPartitions() (v []int64) {
	if !p.IsSetDroppedPartitions() {
		return TGetMetaDBMeta_DroppedPartitions_DEFAULT
	}
	return p.DroppedPartitions
}

var TGetMetaDBMeta_DroppedTables_DEFAULT []int64

func (p *TGetMetaDBMeta) GetDroppedTables() (v []int64) {
	if !p.IsSetDroppedTables() {
		return TGetMetaDBMeta_DroppedTables_DEFAULT
	}
	return p.DroppedTables
}
func (p *TGetMetaDBMeta) SetId(val *int64) {
	p.Id = val
}
func (p *TGetMetaDBMeta) SetName(val *string) {
	p.Name = val
}
func (p *TGetMetaDBMeta) SetTables(val []*TGetMetaTableMeta) {
	p.Tables = val
}
func (p *TGetMetaDBMeta) SetDroppedPartitions(val []int64) {
	p.DroppedPartitions = val
}
func (p *TGetMetaDBMeta) SetDroppedTables(val []int64) {
	p.DroppedTables = val
}

var fieldIDToName_TGetMetaDBMeta = map[int16]string{
	1: "id",
	2: "name",
	3: "tables",
	4: "dropped_partitions",
	5: "dropped_tables",
}

func (p *TGetMetaDBMeta) IsSetId() bool {
	return p.Id != nil
}

func (p *TGetMetaDBMeta) IsSetName() bool {
	return p.Name != nil
}

func (p *TGetMetaDBMeta) IsSetTables() bool {
	return p.Tables != nil
}

func (p *TGetMetaDBMeta) IsSetDroppedPartitions() bool {
	return p.DroppedPartitions != nil
}

func (p *TGetMetaDBMeta) IsSetDroppedTables() bool {
	return p.DroppedTables != nil
}

func (p *TGetMetaDBMeta) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetMetaDBMeta[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetMetaDBMeta) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *TGetMetaDBMeta) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *TGetMetaDBMeta) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TGetMetaTableMeta, 0, size)
	values := make([]TGetMetaTableMeta, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tables = _field
	return nil
}
func (p *TGetMetaDBMeta) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DroppedPartitions = _field
	return nil
}
func (p *TGetMetaDBMeta) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DroppedTables = _field
	return nil
}

func (p *TGetMetaDBMeta) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetMetaDBMeta"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetMetaDBMeta) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetMetaDBMeta) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetMetaDBMeta) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTables() {
		if err = oprot.WriteFieldBegin("tables", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tables)); err != nil {
			return err
		}
		for _, v := range p.Tables {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetMetaDBMeta) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDroppedPartitions() {
		if err = oprot.WriteFieldBegin("dropped_partitions", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.DroppedPartitions)); err != nil {
			return err
		}
		for _, v := range p.DroppedPartitions {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TGetMetaDBMeta) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDroppedTables() {
		if err = oprot.WriteFieldBegin("dropped_tables", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.DroppedTables)); err != nil {
			return err
		}
		for _, v := range p.DroppedTables {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TGetMetaDBMeta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetMetaDBMeta(%+v)", *p)

}

func (p *TGetMetaDBMeta) DeepEqual(ano *TGetMetaDBMeta) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Tables) {
		return false
	}
	if !p.Field4DeepEqual(ano.DroppedPartitions) {
		return false
	}
	if !p.Field5DeepEqual(ano.DroppedTables) {
		return false
	}
	return true
}

func (p *TGetMetaDBMeta) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *TGetMetaDBMeta) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetMetaDBMeta) Field3DeepEqual(src []*TGetMetaTableMeta) bool {

	if len(p.Tables) != len(src) {
		return false
	}
	for i, v := range p.Tables {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TGetMetaDBMeta) Field4DeepEqual(src []int64) bool {

	if len(p.DroppedPartitions) != len(src) {
		return false
	}
	for i, v := range p.DroppedPartitions {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TGetMetaDBMeta) Field5DeepEqual(src []int64) bool {

	if len(p.DroppedTables) != len(src) {
		return false
	}
	for i, v := range p.DroppedTables {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type TGetMetaResult_ struct {
	Status        *status.TStatus        `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
	DbMeta        *TGetMetaDBMeta        `thrift:"db_meta,2,optional" frugal:"2,optional,TGetMetaDBMeta" json:"db_meta,omitempty"`
	MasterAddress *types.TNetworkAddress `thrift:"master_address,3,optional" frugal:"3,optional,types.TNetworkAddress" json:"master_address,omitempty"`
}

func NewTGetMetaResult_() *TGetMetaResult_ {
	return &TGetMetaResult_{}
}

func (p *TGetMetaResult_) InitDefault() {
}

var TGetMetaResult__Status_DEFAULT *status.TStatus

func (p *TGetMetaResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TGetMetaResult__Status_DEFAULT
	}
	return p.Status
}

var TGetMetaResult__DbMeta_DEFAULT *TGetMetaDBMeta

func (p *TGetMetaResult_) GetDbMeta() (v *TGetMetaDBMeta) {
	if !p.IsSetDbMeta() {
		return TGetMetaResult__DbMeta_DEFAULT
	}
	return p.DbMeta
}

var TGetMetaResult__MasterAddress_DEFAULT *types.TNetworkAddress

func (p *TGetMetaResult_) GetMasterAddress() (v *types.TNetworkAddress) {
	if !p.IsSetMasterAddress() {
		return TGetMetaResult__MasterAddress_DEFAULT
	}
	return p.MasterAddress
}
func (p *TGetMetaResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TGetMetaResult_) SetDbMeta(val *TGetMetaDBMeta) {
	p.DbMeta = val
}
func (p *TGetMetaResult_) SetMasterAddress(val *types.TNetworkAddress) {
	p.MasterAddress = val
}

var fieldIDToName_TGetMetaResult_ = map[int16]string{
	1: "status",
	2: "db_meta",
	3: "master_address",
}

func (p *TGetMetaResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TGetMetaResult_) IsSetDbMeta() bool {
	return p.DbMeta != nil
}

func (p *TGetMetaResult_) IsSetMasterAddress() bool {
	return p.MasterAddress != nil
}

func (p *TGetMetaResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetMetaResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TGetMetaResult_[fieldId]))
}

func (p *TGetMetaResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TGetMetaResult_) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTGetMetaDBMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DbMeta = _field
	return nil
}
func (p *TGetMetaResult_) ReadField3(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MasterAddress = _field
	return nil
}

func (p *TGetMetaResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetMetaResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetMetaResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetMetaResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbMeta() {
		if err = oprot.WriteFieldBegin("db_meta", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DbMeta.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetMetaResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMasterAddress() {
		if err = oprot.WriteFieldBegin("master_address", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MasterAddress.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetMetaResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetMetaResult_(%+v)", *p)

}

func (p *TGetMetaResult_) DeepEqual(ano *TGetMetaResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.DbMeta) {
		return false
	}
	if !p.Field3DeepEqual(ano.MasterAddress) {
		return false
	}
	return true
}

func (p *TGetMetaResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TGetMetaResult_) Field2DeepEqual(src *TGetMetaDBMeta) bool {

	if !p.DbMeta.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TGetMetaResult_) Field3DeepEqual(src *types.TNetworkAddress) bool {

	if !p.MasterAddress.DeepEqual(src) {
		return false
	}
	return true
}

type TGetBackendMetaRequest struct {
	Cluster   *string `thrift:"cluster,1,optional" frugal:"1,optional,string" json:"cluster,omitempty"`
	User      *string `thrift:"user,2,optional" frugal:"2,optional,string" json:"user,omitempty"`
	Passwd    *string `thrift:"passwd,3,optional" frugal:"3,optional,string" json:"passwd,omitempty"`
	UserIp    *string `thrift:"user_ip,4,optional" frugal:"4,optional,string" json:"user_ip,omitempty"`
	Token     *string `thrift:"token,5,optional" frugal:"5,optional,string" json:"token,omitempty"`
	BackendId *int64  `thrift:"backend_id,6,optional" frugal:"6,optional,i64" json:"backend_id,omitempty"`
}

func NewTGetBackendMetaRequest() *TGetBackendMetaRequest {
	return &TGetBackendMetaRequest{}
}

func (p *TGetBackendMetaRequest) InitDefault() {
}

var TGetBackendMetaRequest_Cluster_DEFAULT string

func (p *TGetBackendMetaRequest) GetCluster() (v string) {
	if !p.IsSetCluster() {
		return TGetBackendMetaRequest_Cluster_DEFAULT
	}
	return *p.Cluster
}

var TGetBackendMetaRequest_User_DEFAULT string

func (p *TGetBackendMetaRequest) GetUser() (v string) {
	if !p.IsSetUser() {
		return TGetBackendMetaRequest_User_DEFAULT
	}
	return *p.User
}

var TGetBackendMetaRequest_Passwd_DEFAULT string

func (p *TGetBackendMetaRequest) GetPasswd() (v string) {
	if !p.IsSetPasswd() {
		return TGetBackendMetaRequest_Passwd_DEFAULT
	}
	return *p.Passwd
}

var TGetBackendMetaRequest_UserIp_DEFAULT string

func (p *TGetBackendMetaRequest) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TGetBackendMetaRequest_UserIp_DEFAULT
	}
	return *p.UserIp
}

var TGetBackendMetaRequest_Token_DEFAULT string

func (p *TGetBackendMetaRequest) GetToken() (v string) {
	if !p.IsSetToken() {
		return TGetBackendMetaRequest_Token_DEFAULT
	}
	return *p.Token
}

var TGetBackendMetaRequest_BackendId_DEFAULT int64

func (p *TGetBackendMetaRequest) GetBackendId() (v int64) {
	if !p.IsSetBackendId() {
		return TGetBackendMetaRequest_BackendId_DEFAULT
	}
	return *p.BackendId
}
func (p *TGetBackendMetaRequest) SetCluster(val *string) {
	p.Cluster = val
}
func (p *TGetBackendMetaRequest) SetUser(val *string) {
	p.User = val
}
func (p *TGetBackendMetaRequest) SetPasswd(val *string) {
	p.Passwd = val
}
func (p *TGetBackendMetaRequest) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TGetBackendMetaRequest) SetToken(val *string) {
	p.Token = val
}
func (p *TGetBackendMetaRequest) SetBackendId(val *int64) {
	p.BackendId = val
}

var fieldIDToName_TGetBackendMetaRequest = map[int16]string{
	1: "cluster",
	2: "user",
	3: "passwd",
	4: "user_ip",
	5: "token",
	6: "backend_id",
}

func (p *TGetBackendMetaRequest) IsSetCluster() bool {
	return p.Cluster != nil
}

func (p *TGetBackendMetaRequest) IsSetUser() bool {
	return p.User != nil
}

func (p *TGetBackendMetaRequest) IsSetPasswd() bool {
	return p.Passwd != nil
}

func (p *TGetBackendMetaRequest) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TGetBackendMetaRequest) IsSetToken() bool {
	return p.Token != nil
}

func (p *TGetBackendMetaRequest) IsSetBackendId() bool {
	return p.BackendId != nil
}

func (p *TGetBackendMetaRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetBackendMetaRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetBackendMetaRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cluster = _field
	return nil
}
func (p *TGetBackendMetaRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.User = _field
	return nil
}
func (p *TGetBackendMetaRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Passwd = _field
	return nil
}
func (p *TGetBackendMetaRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TGetBackendMetaRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}
func (p *TGetBackendMetaRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BackendId = _field
	return nil
}

func (p *TGetBackendMetaRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetBackendMetaRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetBackendMetaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCluster() {
		if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetBackendMetaRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.User); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetBackendMetaRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPasswd() {
		if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Passwd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetBackendMetaRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TGetBackendMetaRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TGetBackendMetaRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackendId() {
		if err = oprot.WriteFieldBegin("backend_id", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BackendId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TGetBackendMetaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetBackendMetaRequest(%+v)", *p)

}

func (p *TGetBackendMetaRequest) DeepEqual(ano *TGetBackendMetaRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field4DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field5DeepEqual(ano.Token) {
		return false
	}
	if !p.Field6DeepEqual(ano.BackendId) {
		return false
	}
	return true
}

func (p *TGetBackendMetaRequest) Field1DeepEqual(src *string) bool {

	if p.Cluster == src {
		return true
	} else if p.Cluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetBackendMetaRequest) Field2DeepEqual(src *string) bool {

	if p.User == src {
		return true
	} else if p.User == nil || src == nil {
		return false
	}
	if strings.Compare(*p.User, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetBackendMetaRequest) Field3DeepEqual(src *string) bool {

	if p.Passwd == src {
		return true
	} else if p.Passwd == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Passwd, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetBackendMetaRequest) Field4DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetBackendMetaRequest) Field5DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *TGetBackendMetaRequest) Field6DeepEqual(src *int64) bool {

	if p.BackendId == src {
		return true
	} else if p.BackendId == nil || src == nil {
		return false
	}
	if *p.BackendId != *src {
		return false
	}
	return true
}

type TGetBackendMetaResult_ struct {
	Status        *status.TStatus        `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
	Backends      []*types.TBackend      `thrift:"backends,2,optional" frugal:"2,optional,list<types.TBackend>" json:"backends,omitempty"`
	MasterAddress *types.TNetworkAddress `thrift:"master_address,3,optional" frugal:"3,optional,types.TNetworkAddress" json:"master_address,omitempty"`
}

func NewTGetBackendMetaResult_() *TGetBackendMetaResult_ {
	return &TGetBackendMetaResult_{}
}

func (p *TGetBackendMetaResult_) InitDefault() {
}

var TGetBackendMetaResult__Status_DEFAULT *status.TStatus

func (p *TGetBackendMetaResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TGetBackendMetaResult__Status_DEFAULT
	}
	return p.Status
}

var TGetBackendMetaResult__Backends_DEFAULT []*types.TBackend

func (p *TGetBackendMetaResult_) GetBackends() (v []*types.TBackend) {
	if !p.IsSetBackends() {
		return TGetBackendMetaResult__Backends_DEFAULT
	}
	return p.Backends
}

var TGetBackendMetaResult__MasterAddress_DEFAULT *types.TNetworkAddress

func (p *TGetBackendMetaResult_) GetMasterAddress() (v *types.TNetworkAddress) {
	if !p.IsSetMasterAddress() {
		return TGetBackendMetaResult__MasterAddress_DEFAULT
	}
	return p.MasterAddress
}
func (p *TGetBackendMetaResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TGetBackendMetaResult_) SetBackends(val []*types.TBackend) {
	p.Backends = val
}
func (p *TGetBackendMetaResult_) SetMasterAddress(val *types.TNetworkAddress) {
	p.MasterAddress = val
}

var fieldIDToName_TGetBackendMetaResult_ = map[int16]string{
	1: "status",
	2: "backends",
	3: "master_address",
}

func (p *TGetBackendMetaResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TGetBackendMetaResult_) IsSetBackends() bool {
	return p.Backends != nil
}

func (p *TGetBackendMetaResult_) IsSetMasterAddress() bool {
	return p.MasterAddress != nil
}

func (p *TGetBackendMetaResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetBackendMetaResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TGetBackendMetaResult_[fieldId]))
}

func (p *TGetBackendMetaResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TGetBackendMetaResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*types.TBackend, 0, size)
	values := make([]types.TBackend, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Backends = _field
	return nil
}
func (p *TGetBackendMetaResult_) ReadField3(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MasterAddress = _field
	return nil
}

func (p *TGetBackendMetaResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetBackendMetaResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetBackendMetaResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetBackendMetaResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackends() {
		if err = oprot.WriteFieldBegin("backends", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Backends)); err != nil {
			return err
		}
		for _, v := range p.Backends {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetBackendMetaResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMasterAddress() {
		if err = oprot.WriteFieldBegin("master_address", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MasterAddress.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TGetBackendMetaResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetBackendMetaResult_(%+v)", *p)

}

func (p *TGetBackendMetaResult_) DeepEqual(ano *TGetBackendMetaResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.Backends) {
		return false
	}
	if !p.Field3DeepEqual(ano.MasterAddress) {
		return false
	}
	return true
}

func (p *TGetBackendMetaResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TGetBackendMetaResult_) Field2DeepEqual(src []*types.TBackend) bool {

	if len(p.Backends) != len(src) {
		return false
	}
	for i, v := range p.Backends {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TGetBackendMetaResult_) Field3DeepEqual(src *types.TNetworkAddress) bool {

	if !p.MasterAddress.DeepEqual(src) {
		return false
	}
	return true
}

type TColumnInfo struct {
	ColumnName *string `thrift:"column_name,1,optional" frugal:"1,optional,string" json:"column_name,omitempty"`
	ColumnId   *int64  `thrift:"column_id,2,optional" frugal:"2,optional,i64" json:"column_id,omitempty"`
}

func NewTColumnInfo() *TColumnInfo {
	return &TColumnInfo{}
}

func (p *TColumnInfo) InitDefault() {
}

var TColumnInfo_ColumnName_DEFAULT string

func (p *TColumnInfo) GetColumnName() (v string) {
	if !p.IsSetColumnName() {
		return TColumnInfo_ColumnName_DEFAULT
	}
	return *p.ColumnName
}

var TColumnInfo_ColumnId_DEFAULT int64

func (p *TColumnInfo) GetColumnId() (v int64) {
	if !p.IsSetColumnId() {
		return TColumnInfo_ColumnId_DEFAULT
	}
	return *p.ColumnId
}
func (p *TColumnInfo) SetColumnName(val *string) {
	p.ColumnName = val
}
func (p *TColumnInfo) SetColumnId(val *int64) {
	p.ColumnId = val
}

var fieldIDToName_TColumnInfo = map[int16]string{
	1: "column_name",
	2: "column_id",
}

func (p *TColumnInfo) IsSetColumnName() bool {
	return p.ColumnName != nil
}

func (p *TColumnInfo) IsSetColumnId() bool {
	return p.ColumnId != nil
}

func (p *TColumnInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TColumnInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TColumnInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ColumnName = _field
	return nil
}
func (p *TColumnInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ColumnId = _field
	return nil
}

func (p *TColumnInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TColumnInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TColumnInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnName() {
		if err = oprot.WriteFieldBegin("column_name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ColumnName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TColumnInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnId() {
		if err = oprot.WriteFieldBegin("column_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ColumnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TColumnInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumnInfo(%+v)", *p)

}

func (p *TColumnInfo) DeepEqual(ano *TColumnInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnName) {
		return false
	}
	if !p.Field2DeepEqual(ano.ColumnId) {
		return false
	}
	return true
}

func (p *TColumnInfo) Field1DeepEqual(src *string) bool {

	if p.ColumnName == src {
		return true
	} else if p.ColumnName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ColumnName, *src) != 0 {
		return false
	}
	return true
}
func (p *TColumnInfo) Field2DeepEqual(src *int64) bool {

	if p.ColumnId == src {
		return true
	} else if p.ColumnId == nil || src == nil {
		return false
	}
	if *p.ColumnId != *src {
		return false
	}
	return true
}

type TGetColumnInfoRequest struct {
	DbId    *int64 `thrift:"db_id,1,optional" frugal:"1,optional,i64" json:"db_id,omitempty"`
	TableId *int64 `thrift:"table_id,2,optional" frugal:"2,optional,i64" json:"table_id,omitempty"`
}

func NewTGetColumnInfoRequest() *TGetColumnInfoRequest {
	return &TGetColumnInfoRequest{}
}

func (p *TGetColumnInfoRequest) InitDefault() {
}

var TGetColumnInfoRequest_DbId_DEFAULT int64

func (p *TGetColumnInfoRequest) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TGetColumnInfoRequest_DbId_DEFAULT
	}
	return *p.DbId
}

var TGetColumnInfoRequest_TableId_DEFAULT int64

func (p *TGetColumnInfoRequest) GetTableId() (v int64) {
	if !p.IsSetTableId() {
		return TGetColumnInfoRequest_TableId_DEFAULT
	}
	return *p.TableId
}
func (p *TGetColumnInfoRequest) SetDbId(val *int64) {
	p.DbId = val
}
func (p *TGetColumnInfoRequest) SetTableId(val *int64) {
	p.TableId = val
}

var fieldIDToName_TGetColumnInfoRequest = map[int16]string{
	1: "db_id",
	2: "table_id",
}

func (p *TGetColumnInfoRequest) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TGetColumnInfoRequest) IsSetTableId() bool {
	return p.TableId != nil
}

func (p *TGetColumnInfoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetColumnInfoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetColumnInfoRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TGetColumnInfoRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableId = _field
	return nil
}

func (p *TGetColumnInfoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetColumnInfoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetColumnInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("db_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetColumnInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableId() {
		if err = oprot.WriteFieldBegin("table_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TableId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetColumnInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetColumnInfoRequest(%+v)", *p)

}

func (p *TGetColumnInfoRequest) DeepEqual(ano *TGetColumnInfoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TableId) {
		return false
	}
	return true
}

func (p *TGetColumnInfoRequest) Field1DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}
func (p *TGetColumnInfoRequest) Field2DeepEqual(src *int64) bool {

	if p.TableId == src {
		return true
	} else if p.TableId == nil || src == nil {
		return false
	}
	if *p.TableId != *src {
		return false
	}
	return true
}

type TGetColumnInfoResult_ struct {
	Status  *status.TStatus `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	Columns []*TColumnInfo  `thrift:"columns,2,optional" frugal:"2,optional,list<TColumnInfo>" json:"columns,omitempty"`
}

func NewTGetColumnInfoResult_() *TGetColumnInfoResult_ {
	return &TGetColumnInfoResult_{}
}

func (p *TGetColumnInfoResult_) InitDefault() {
}

var TGetColumnInfoResult__Status_DEFAULT *status.TStatus

func (p *TGetColumnInfoResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TGetColumnInfoResult__Status_DEFAULT
	}
	return p.Status
}

var TGetColumnInfoResult__Columns_DEFAULT []*TColumnInfo

func (p *TGetColumnInfoResult_) GetColumns() (v []*TColumnInfo) {
	if !p.IsSetColumns() {
		return TGetColumnInfoResult__Columns_DEFAULT
	}
	return p.Columns
}
func (p *TGetColumnInfoResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TGetColumnInfoResult_) SetColumns(val []*TColumnInfo) {
	p.Columns = val
}

var fieldIDToName_TGetColumnInfoResult_ = map[int16]string{
	1: "status",
	2: "columns",
}

func (p *TGetColumnInfoResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TGetColumnInfoResult_) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TGetColumnInfoResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGetColumnInfoResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGetColumnInfoResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TGetColumnInfoResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TColumnInfo, 0, size)
	values := make([]TColumnInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Columns = _field
	return nil
}

func (p *TGetColumnInfoResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGetColumnInfoResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGetColumnInfoResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGetColumnInfoResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err = oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
			return err
		}
		for _, v := range p.Columns {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGetColumnInfoResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetColumnInfoResult_(%+v)", *p)

}

func (p *TGetColumnInfoResult_) DeepEqual(ano *TGetColumnInfoResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.Columns) {
		return false
	}
	return true
}

func (p *TGetColumnInfoResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TGetColumnInfoResult_) Field2DeepEqual(src []*TColumnInfo) bool {

	if len(p.Columns) != len(src) {
		return false
	}
	for i, v := range p.Columns {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TShowProcessListRequest struct {
	ShowFullSql      *bool                `thrift:"show_full_sql,1,optional" frugal:"1,optional,bool" json:"show_full_sql,omitempty"`
	CurrentUserIdent *types.TUserIdentity `thrift:"current_user_ident,2,optional" frugal:"2,optional,types.TUserIdentity" json:"current_user_ident,omitempty"`
}

func NewTShowProcessListRequest() *TShowProcessListRequest {
	return &TShowProcessListRequest{}
}

func (p *TShowProcessListRequest) InitDefault() {
}

var TShowProcessListRequest_ShowFullSql_DEFAULT bool

func (p *TShowProcessListRequest) GetShowFullSql() (v bool) {
	if !p.IsSetShowFullSql() {
		return TShowProcessListRequest_ShowFullSql_DEFAULT
	}
	return *p.ShowFullSql
}

var TShowProcessListRequest_CurrentUserIdent_DEFAULT *types.TUserIdentity

func (p *TShowProcessListRequest) GetCurrentUserIdent() (v *types.TUserIdentity) {
	if !p.IsSetCurrentUserIdent() {
		return TShowProcessListRequest_CurrentUserIdent_DEFAULT
	}
	return p.CurrentUserIdent
}
func (p *TShowProcessListRequest) SetShowFullSql(val *bool) {
	p.ShowFullSql = val
}
func (p *TShowProcessListRequest) SetCurrentUserIdent(val *types.TUserIdentity) {
	p.CurrentUserIdent = val
}

var fieldIDToName_TShowProcessListRequest = map[int16]string{
	1: "show_full_sql",
	2: "current_user_ident",
}

func (p *TShowProcessListRequest) IsSetShowFullSql() bool {
	return p.ShowFullSql != nil
}

func (p *TShowProcessListRequest) IsSetCurrentUserIdent() bool {
	return p.CurrentUserIdent != nil
}

func (p *TShowProcessListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TShowProcessListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TShowProcessListRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ShowFullSql = _field
	return nil
}
func (p *TShowProcessListRequest) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTUserIdentity()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CurrentUserIdent = _field
	return nil
}

func (p *TShowProcessListRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TShowProcessListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TShowProcessListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetShowFullSql() {
		if err = oprot.WriteFieldBegin("show_full_sql", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ShowFullSql); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TShowProcessListRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentUserIdent() {
		if err = oprot.WriteFieldBegin("current_user_ident", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CurrentUserIdent.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TShowProcessListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TShowProcessListRequest(%+v)", *p)

}

func (p *TShowProcessListRequest) DeepEqual(ano *TShowProcessListRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ShowFullSql) {
		return false
	}
	if !p.Field2DeepEqual(ano.CurrentUserIdent) {
		return false
	}
	return true
}

func (p *TShowProcessListRequest) Field1DeepEqual(src *bool) bool {

	if p.ShowFullSql == src {
		return true
	} else if p.ShowFullSql == nil || src == nil {
		return false
	}
	if *p.ShowFullSql != *src {
		return false
	}
	return true
}
func (p *TShowProcessListRequest) Field2DeepEqual(src *types.TUserIdentity) bool {

	if !p.CurrentUserIdent.DeepEqual(src) {
		return false
	}
	return true
}

type TShowProcessListResult_ struct {
	ProcessList [][]string `thrift:"process_list,1,optional" frugal:"1,optional,list<list<string>>" json:"process_list,omitempty"`
}

func NewTShowProcessListResult_() *TShowProcessListResult_ {
	return &TShowProcessListResult_{}
}

func (p *TShowProcessListResult_) InitDefault() {
}

var TShowProcessListResult__ProcessList_DEFAULT [][]string

func (p *TShowProcessListResult_) GetProcessList() (v [][]string) {
	if !p.IsSetProcessList() {
		return TShowProcessListResult__ProcessList_DEFAULT
	}
	return p.ProcessList
}
func (p *TShowProcessListResult_) SetProcessList(val [][]string) {
	p.ProcessList = val
}

var fieldIDToName_TShowProcessListResult_ = map[int16]string{
	1: "process_list",
}

func (p *TShowProcessListResult_) IsSetProcessList() bool {
	return p.ProcessList != nil
}

func (p *TShowProcessListResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TShowProcessListResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TShowProcessListResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]string, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]string, 0, size)
		for i := 0; i < size; i++ {

			var _elem1 string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem1 = v
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ProcessList = _field
	return nil
}

func (p *TShowProcessListResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TShowProcessListResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TShowProcessListResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetProcessList() {
		if err = oprot.WriteFieldBegin("process_list", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.LIST, len(p.ProcessList)); err != nil {
			return err
		}
		for _, v := range p.ProcessList {
			if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := oprot.WriteString(v); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TShowProcessListResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TShowProcessListResult_(%+v)", *p)

}

func (p *TShowProcessListResult_) DeepEqual(ano *TShowProcessListResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ProcessList) {
		return false
	}
	return true
}

func (p *TShowProcessListResult_) Field1DeepEqual(src [][]string) bool {

	if len(p.ProcessList) != len(src) {
		return false
	}
	for i, v := range p.ProcessList {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if strings.Compare(v, _src1) != 0 {
				return false
			}
		}
	}
	return true
}

type TShowUserRequest struct {
}

func NewTShowUserRequest() *TShowUserRequest {
	return &TShowUserRequest{}
}

func (p *TShowUserRequest) InitDefault() {
}

var fieldIDToName_TShowUserRequest = map[int16]string{}

func (p *TShowUserRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TShowUserRequest) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("TShowUserRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TShowUserRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TShowUserRequest(%+v)", *p)

}

func (p *TShowUserRequest) DeepEqual(ano *TShowUserRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type TShowUserResult_ struct {
	UserinfoList [][]string `thrift:"userinfo_list,1,optional" frugal:"1,optional,list<list<string>>" json:"userinfo_list,omitempty"`
}

func NewTShowUserResult_() *TShowUserResult_ {
	return &TShowUserResult_{}
}

func (p *TShowUserResult_) InitDefault() {
}

var TShowUserResult__UserinfoList_DEFAULT [][]string

func (p *TShowUserResult_) GetUserinfoList() (v [][]string) {
	if !p.IsSetUserinfoList() {
		return TShowUserResult__UserinfoList_DEFAULT
	}
	return p.UserinfoList
}
func (p *TShowUserResult_) SetUserinfoList(val [][]string) {
	p.UserinfoList = val
}

var fieldIDToName_TShowUserResult_ = map[int16]string{
	1: "userinfo_list",
}

func (p *TShowUserResult_) IsSetUserinfoList() bool {
	return p.UserinfoList != nil
}

func (p *TShowUserResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TShowUserResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TShowUserResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([][]string, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_elem := make([]string, 0, size)
		for i := 0; i < size; i++ {

			var _elem1 string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem1 = v
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.UserinfoList = _field
	return nil
}

func (p *TShowUserResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TShowUserResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TShowUserResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserinfoList() {
		if err = oprot.WriteFieldBegin("userinfo_list", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.LIST, len(p.UserinfoList)); err != nil {
			return err
		}
		for _, v := range p.UserinfoList {
			if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := oprot.WriteString(v); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TShowUserResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TShowUserResult_(%+v)", *p)

}

func (p *TShowUserResult_) DeepEqual(ano *TShowUserResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserinfoList) {
		return false
	}
	return true
}

func (p *TShowUserResult_) Field1DeepEqual(src [][]string) bool {

	if len(p.UserinfoList) != len(src) {
		return false
	}
	for i, v := range p.UserinfoList {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if strings.Compare(v, _src1) != 0 {
				return false
			}
		}
	}
	return true
}

type TReportCommitTxnResultRequest struct {
	DbId    *int64  `thrift:"dbId,1,optional" frugal:"1,optional,i64" json:"dbId,omitempty"`
	TxnId   *int64  `thrift:"txnId,2,optional" frugal:"2,optional,i64" json:"txnId,omitempty"`
	Label   *string `thrift:"label,3,optional" frugal:"3,optional,string" json:"label,omitempty"`
	Payload []byte  `thrift:"payload,4,optional" frugal:"4,optional,binary" json:"payload,omitempty"`
}

func NewTReportCommitTxnResultRequest() *TReportCommitTxnResultRequest {
	return &TReportCommitTxnResultRequest{}
}

func (p *TReportCommitTxnResultRequest) InitDefault() {
}

var TReportCommitTxnResultRequest_DbId_DEFAULT int64

func (p *TReportCommitTxnResultRequest) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TReportCommitTxnResultRequest_DbId_DEFAULT
	}
	return *p.DbId
}

var TReportCommitTxnResultRequest_TxnId_DEFAULT int64

func (p *TReportCommitTxnResultRequest) GetTxnId() (v int64) {
	if !p.IsSetTxnId() {
		return TReportCommitTxnResultRequest_TxnId_DEFAULT
	}
	return *p.TxnId
}

var TReportCommitTxnResultRequest_Label_DEFAULT string

func (p *TReportCommitTxnResultRequest) GetLabel() (v string) {
	if !p.IsSetLabel() {
		return TReportCommitTxnResultRequest_Label_DEFAULT
	}
	return *p.Label
}

var TReportCommitTxnResultRequest_Payload_DEFAULT []byte

func (p *TReportCommitTxnResultRequest) GetPayload() (v []byte) {
	if !p.IsSetPayload() {
		return TReportCommitTxnResultRequest_Payload_DEFAULT
	}
	return p.Payload
}
func (p *TReportCommitTxnResultRequest) SetDbId(val *int64) {
	p.DbId = val
}
func (p *TReportCommitTxnResultRequest) SetTxnId(val *int64) {
	p.TxnId = val
}
func (p *TReportCommitTxnResultRequest) SetLabel(val *string) {
	p.Label = val
}
func (p *TReportCommitTxnResultRequest) SetPayload(val []byte) {
	p.Payload = val
}

var fieldIDToName_TReportCommitTxnResultRequest = map[int16]string{
	1: "dbId",
	2: "txnId",
	3: "label",
	4: "payload",
}

func (p *TReportCommitTxnResultRequest) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TReportCommitTxnResultRequest) IsSetTxnId() bool {
	return p.TxnId != nil
}

func (p *TReportCommitTxnResultRequest) IsSetLabel() bool {
	return p.Label != nil
}

func (p *TReportCommitTxnResultRequest) IsSetPayload() bool {
	return p.Payload != nil
}

func (p *TReportCommitTxnResultRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TReportCommitTxnResultRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TReportCommitTxnResultRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TReportCommitTxnResultRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TxnId = _field
	return nil
}
func (p *TReportCommitTxnResultRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Label = _field
	return nil
}
func (p *TReportCommitTxnResultRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Payload = _field
	return nil
}

func (p *TReportCommitTxnResultRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TReportCommitTxnResultRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TReportCommitTxnResultRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("dbId", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TReportCommitTxnResultRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnId() {
		if err = oprot.WriteFieldBegin("txnId", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TxnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TReportCommitTxnResultRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabel() {
		if err = oprot.WriteFieldBegin("label", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Label); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TReportCommitTxnResultRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPayload() {
		if err = oprot.WriteFieldBegin("payload", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBinary([]byte(p.Payload)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TReportCommitTxnResultRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TReportCommitTxnResultRequest(%+v)", *p)

}

func (p *TReportCommitTxnResultRequest) DeepEqual(ano *TReportCommitTxnResultRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Label) {
		return false
	}
	if !p.Field4DeepEqual(ano.Payload) {
		return false
	}
	return true
}

func (p *TReportCommitTxnResultRequest) Field1DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}
func (p *TReportCommitTxnResultRequest) Field2DeepEqual(src *int64) bool {

	if p.TxnId == src {
		return true
	} else if p.TxnId == nil || src == nil {
		return false
	}
	if *p.TxnId != *src {
		return false
	}
	return true
}
func (p *TReportCommitTxnResultRequest) Field3DeepEqual(src *string) bool {

	if p.Label == src {
		return true
	} else if p.Label == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Label, *src) != 0 {
		return false
	}
	return true
}
func (p *TReportCommitTxnResultRequest) Field4DeepEqual(src []byte) bool {

	if bytes.Compare(p.Payload, src) != 0 {
		return false
	}
	return true
}

type TQueryColumn struct {
	CatalogId *string `thrift:"catalogId,1,optional" frugal:"1,optional,string" json:"catalogId,omitempty"`
	DbId      *string `thrift:"dbId,2,optional" frugal:"2,optional,string" json:"dbId,omitempty"`
	TblId     *string `thrift:"tblId,3,optional" frugal:"3,optional,string" json:"tblId,omitempty"`
	ColName   *string `thrift:"colName,4,optional" frugal:"4,optional,string" json:"colName,omitempty"`
}

func NewTQueryColumn() *TQueryColumn {
	return &TQueryColumn{}
}

func (p *TQueryColumn) InitDefault() {
}

var TQueryColumn_CatalogId_DEFAULT string

func (p *TQueryColumn) GetCatalogId() (v string) {
	if !p.IsSetCatalogId() {
		return TQueryColumn_CatalogId_DEFAULT
	}
	return *p.CatalogId
}

var TQueryColumn_DbId_DEFAULT string

func (p *TQueryColumn) GetDbId() (v string) {
	if !p.IsSetDbId() {
		return TQueryColumn_DbId_DEFAULT
	}
	return *p.DbId
}

var TQueryColumn_TblId_DEFAULT string

func (p *TQueryColumn) GetTblId() (v string) {
	if !p.IsSetTblId() {
		return TQueryColumn_TblId_DEFAULT
	}
	return *p.TblId
}

var TQueryColumn_ColName_DEFAULT string

func (p *TQueryColumn) GetColName() (v string) {
	if !p.IsSetColName() {
		return TQueryColumn_ColName_DEFAULT
	}
	return *p.ColName
}
func (p *TQueryColumn) SetCatalogId(val *string) {
	p.CatalogId = val
}
func (p *TQueryColumn) SetDbId(val *string) {
	p.DbId = val
}
func (p *TQueryColumn) SetTblId(val *string) {
	p.TblId = val
}
func (p *TQueryColumn) SetColName(val *string) {
	p.ColName = val
}

var fieldIDToName_TQueryColumn = map[int16]string{
	1: "catalogId",
	2: "dbId",
	3: "tblId",
	4: "colName",
}

func (p *TQueryColumn) IsSetCatalogId() bool {
	return p.CatalogId != nil
}

func (p *TQueryColumn) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TQueryColumn) IsSetTblId() bool {
	return p.TblId != nil
}

func (p *TQueryColumn) IsSetColName() bool {
	return p.ColName != nil
}

func (p *TQueryColumn) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TQueryColumn[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TQueryColumn) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CatalogId = _field
	return nil
}
func (p *TQueryColumn) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TQueryColumn) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TblId = _field
	return nil
}
func (p *TQueryColumn) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ColName = _field
	return nil
}

func (p *TQueryColumn) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TQueryColumn"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TQueryColumn) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCatalogId() {
		if err = oprot.WriteFieldBegin("catalogId", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CatalogId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TQueryColumn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("dbId", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TQueryColumn) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTblId() {
		if err = oprot.WriteFieldBegin("tblId", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TblId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TQueryColumn) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetColName() {
		if err = oprot.WriteFieldBegin("colName", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ColName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TQueryColumn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TQueryColumn(%+v)", *p)

}

func (p *TQueryColumn) DeepEqual(ano *TQueryColumn) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CatalogId) {
		return false
	}
	if !p.Field2DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field3DeepEqual(ano.TblId) {
		return false
	}
	if !p.Field4DeepEqual(ano.ColName) {
		return false
	}
	return true
}

func (p *TQueryColumn) Field1DeepEqual(src *string) bool {

	if p.CatalogId == src {
		return true
	} else if p.CatalogId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CatalogId, *src) != 0 {
		return false
	}
	return true
}
func (p *TQueryColumn) Field2DeepEqual(src *string) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DbId, *src) != 0 {
		return false
	}
	return true
}
func (p *TQueryColumn) Field3DeepEqual(src *string) bool {

	if p.TblId == src {
		return true
	} else if p.TblId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TblId, *src) != 0 {
		return false
	}
	return true
}
func (p *TQueryColumn) Field4DeepEqual(src *string) bool {

	if p.ColName == src {
		return true
	} else if p.ColName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ColName, *src) != 0 {
		return false
	}
	return true
}

type TSyncQueryColumns struct {
	HighPriorityColumns []*TQueryColumn `thrift:"highPriorityColumns,1,optional" frugal:"1,optional,list<TQueryColumn>" json:"highPriorityColumns,omitempty"`
	MidPriorityColumns  []*TQueryColumn `thrift:"midPriorityColumns,2,optional" frugal:"2,optional,list<TQueryColumn>" json:"midPriorityColumns,omitempty"`
}

func NewTSyncQueryColumns() *TSyncQueryColumns {
	return &TSyncQueryColumns{}
}

func (p *TSyncQueryColumns) InitDefault() {
}

var TSyncQueryColumns_HighPriorityColumns_DEFAULT []*TQueryColumn

func (p *TSyncQueryColumns) GetHighPriorityColumns() (v []*TQueryColumn) {
	if !p.IsSetHighPriorityColumns() {
		return TSyncQueryColumns_HighPriorityColumns_DEFAULT
	}
	return p.HighPriorityColumns
}

var TSyncQueryColumns_MidPriorityColumns_DEFAULT []*TQueryColumn

func (p *TSyncQueryColumns) GetMidPriorityColumns() (v []*TQueryColumn) {
	if !p.IsSetMidPriorityColumns() {
		return TSyncQueryColumns_MidPriorityColumns_DEFAULT
	}
	return p.MidPriorityColumns
}
func (p *TSyncQueryColumns) SetHighPriorityColumns(val []*TQueryColumn) {
	p.HighPriorityColumns = val
}
func (p *TSyncQueryColumns) SetMidPriorityColumns(val []*TQueryColumn) {
	p.MidPriorityColumns = val
}

var fieldIDToName_TSyncQueryColumns = map[int16]string{
	1: "highPriorityColumns",
	2: "midPriorityColumns",
}

func (p *TSyncQueryColumns) IsSetHighPriorityColumns() bool {
	return p.HighPriorityColumns != nil
}

func (p *TSyncQueryColumns) IsSetMidPriorityColumns() bool {
	return p.MidPriorityColumns != nil
}

func (p *TSyncQueryColumns) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TSyncQueryColumns[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TSyncQueryColumns) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TQueryColumn, 0, size)
	values := make([]TQueryColumn, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.HighPriorityColumns = _field
	return nil
}
func (p *TSyncQueryColumns) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TQueryColumn, 0, size)
	values := make([]TQueryColumn, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MidPriorityColumns = _field
	return nil
}

func (p *TSyncQueryColumns) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TSyncQueryColumns"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TSyncQueryColumns) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHighPriorityColumns() {
		if err = oprot.WriteFieldBegin("highPriorityColumns", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HighPriorityColumns)); err != nil {
			return err
		}
		for _, v := range p.HighPriorityColumns {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TSyncQueryColumns) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMidPriorityColumns() {
		if err = oprot.WriteFieldBegin("midPriorityColumns", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MidPriorityColumns)); err != nil {
			return err
		}
		for _, v := range p.MidPriorityColumns {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TSyncQueryColumns) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSyncQueryColumns(%+v)", *p)

}

func (p *TSyncQueryColumns) DeepEqual(ano *TSyncQueryColumns) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.HighPriorityColumns) {
		return false
	}
	if !p.Field2DeepEqual(ano.MidPriorityColumns) {
		return false
	}
	return true
}

func (p *TSyncQueryColumns) Field1DeepEqual(src []*TQueryColumn) bool {

	if len(p.HighPriorityColumns) != len(src) {
		return false
	}
	for i, v := range p.HighPriorityColumns {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TSyncQueryColumns) Field2DeepEqual(src []*TQueryColumn) bool {

	if len(p.MidPriorityColumns) != len(src) {
		return false
	}
	for i, v := range p.MidPriorityColumns {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TFetchSplitBatchRequest struct {
	SplitSourceId *int64 `thrift:"split_source_id,1,optional" frugal:"1,optional,i64" json:"split_source_id,omitempty"`
	MaxNumSplits  *int32 `thrift:"max_num_splits,2,optional" frugal:"2,optional,i32" json:"max_num_splits,omitempty"`
}

func NewTFetchSplitBatchRequest() *TFetchSplitBatchRequest {
	return &TFetchSplitBatchRequest{}
}

func (p *TFetchSplitBatchRequest) InitDefault() {
}

var TFetchSplitBatchRequest_SplitSourceId_DEFAULT int64

func (p *TFetchSplitBatchRequest) GetSplitSourceId() (v int64) {
	if !p.IsSetSplitSourceId() {
		return TFetchSplitBatchRequest_SplitSourceId_DEFAULT
	}
	return *p.SplitSourceId
}

var TFetchSplitBatchRequest_MaxNumSplits_DEFAULT int32

func (p *TFetchSplitBatchRequest) GetMaxNumSplits() (v int32) {
	if !p.IsSetMaxNumSplits() {
		return TFetchSplitBatchRequest_MaxNumSplits_DEFAULT
	}
	return *p.MaxNumSplits
}
func (p *TFetchSplitBatchRequest) SetSplitSourceId(val *int64) {
	p.SplitSourceId = val
}
func (p *TFetchSplitBatchRequest) SetMaxNumSplits(val *int32) {
	p.MaxNumSplits = val
}

var fieldIDToName_TFetchSplitBatchRequest = map[int16]string{
	1: "split_source_id",
	2: "max_num_splits",
}

func (p *TFetchSplitBatchRequest) IsSetSplitSourceId() bool {
	return p.SplitSourceId != nil
}

func (p *TFetchSplitBatchRequest) IsSetMaxNumSplits() bool {
	return p.MaxNumSplits != nil
}

func (p *TFetchSplitBatchRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFetchSplitBatchRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TFetchSplitBatchRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SplitSourceId = _field
	return nil
}
func (p *TFetchSplitBatchRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxNumSplits = _field
	return nil
}

func (p *TFetchSplitBatchRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFetchSplitBatchRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFetchSplitBatchRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSplitSourceId() {
		if err = oprot.WriteFieldBegin("split_source_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SplitSourceId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFetchSplitBatchRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxNumSplits() {
		if err = oprot.WriteFieldBegin("max_num_splits", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.MaxNumSplits); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFetchSplitBatchRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFetchSplitBatchRequest(%+v)", *p)

}

func (p *TFetchSplitBatchRequest) DeepEqual(ano *TFetchSplitBatchRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SplitSourceId) {
		return false
	}
	if !p.Field2DeepEqual(ano.MaxNumSplits) {
		return false
	}
	return true
}

func (p *TFetchSplitBatchRequest) Field1DeepEqual(src *int64) bool {

	if p.SplitSourceId == src {
		return true
	} else if p.SplitSourceId == nil || src == nil {
		return false
	}
	if *p.SplitSourceId != *src {
		return false
	}
	return true
}
func (p *TFetchSplitBatchRequest) Field2DeepEqual(src *int32) bool {

	if p.MaxNumSplits == src {
		return true
	} else if p.MaxNumSplits == nil || src == nil {
		return false
	}
	if *p.MaxNumSplits != *src {
		return false
	}
	return true
}

type TFetchSplitBatchResult_ struct {
	Splits []*planner.TScanRangeLocations `thrift:"splits,1,optional" frugal:"1,optional,list<planner.TScanRangeLocations>" json:"splits,omitempty"`
	Status *status.TStatus                `thrift:"status,2,optional" frugal:"2,optional,status.TStatus" json:"status,omitempty"`
}

func NewTFetchSplitBatchResult_() *TFetchSplitBatchResult_ {
	return &TFetchSplitBatchResult_{}
}

func (p *TFetchSplitBatchResult_) InitDefault() {
}

var TFetchSplitBatchResult__Splits_DEFAULT []*planner.TScanRangeLocations

func (p *TFetchSplitBatchResult_) GetSplits() (v []*planner.TScanRangeLocations) {
	if !p.IsSetSplits() {
		return TFetchSplitBatchResult__Splits_DEFAULT
	}
	return p.Splits
}

var TFetchSplitBatchResult__Status_DEFAULT *status.TStatus

func (p *TFetchSplitBatchResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TFetchSplitBatchResult__Status_DEFAULT
	}
	return p.Status
}
func (p *TFetchSplitBatchResult_) SetSplits(val []*planner.TScanRangeLocations) {
	p.Splits = val
}
func (p *TFetchSplitBatchResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}

var fieldIDToName_TFetchSplitBatchResult_ = map[int16]string{
	1: "splits",
	2: "status",
}

func (p *TFetchSplitBatchResult_) IsSetSplits() bool {
	return p.Splits != nil
}

func (p *TFetchSplitBatchResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TFetchSplitBatchResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFetchSplitBatchResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TFetchSplitBatchResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*planner.TScanRangeLocations, 0, size)
	values := make([]planner.TScanRangeLocations, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Splits = _field
	return nil
}
func (p *TFetchSplitBatchResult_) ReadField2(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}

func (p *TFetchSplitBatchResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFetchSplitBatchResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFetchSplitBatchResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSplits() {
		if err = oprot.WriteFieldBegin("splits", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Splits)); err != nil {
			return err
		}
		for _, v := range p.Splits {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFetchSplitBatchResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFetchSplitBatchResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFetchSplitBatchResult_(%+v)", *p)

}

func (p *TFetchSplitBatchResult_) DeepEqual(ano *TFetchSplitBatchResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Splits) {
		return false
	}
	if !p.Field2DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *TFetchSplitBatchResult_) Field1DeepEqual(src []*planner.TScanRangeLocations) bool {

	if len(p.Splits) != len(src) {
		return false
	}
	for i, v := range p.Splits {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TFetchSplitBatchResult_) Field2DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type TFetchRunningQueriesResult_ struct {
	Status         *status.TStatus    `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	RunningQueries []*types.TUniqueId `thrift:"running_queries,2,optional" frugal:"2,optional,list<types.TUniqueId>" json:"running_queries,omitempty"`
}

func NewTFetchRunningQueriesResult_() *TFetchRunningQueriesResult_ {
	return &TFetchRunningQueriesResult_{}
}

func (p *TFetchRunningQueriesResult_) InitDefault() {
}

var TFetchRunningQueriesResult__Status_DEFAULT *status.TStatus

func (p *TFetchRunningQueriesResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TFetchRunningQueriesResult__Status_DEFAULT
	}
	return p.Status
}

var TFetchRunningQueriesResult__RunningQueries_DEFAULT []*types.TUniqueId

func (p *TFetchRunningQueriesResult_) GetRunningQueries() (v []*types.TUniqueId) {
	if !p.IsSetRunningQueries() {
		return TFetchRunningQueriesResult__RunningQueries_DEFAULT
	}
	return p.RunningQueries
}
func (p *TFetchRunningQueriesResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TFetchRunningQueriesResult_) SetRunningQueries(val []*types.TUniqueId) {
	p.RunningQueries = val
}

var fieldIDToName_TFetchRunningQueriesResult_ = map[int16]string{
	1: "status",
	2: "running_queries",
}

func (p *TFetchRunningQueriesResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TFetchRunningQueriesResult_) IsSetRunningQueries() bool {
	return p.RunningQueries != nil
}

func (p *TFetchRunningQueriesResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFetchRunningQueriesResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TFetchRunningQueriesResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TFetchRunningQueriesResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*types.TUniqueId, 0, size)
	values := make([]types.TUniqueId, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.RunningQueries = _field
	return nil
}

func (p *TFetchRunningQueriesResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFetchRunningQueriesResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFetchRunningQueriesResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFetchRunningQueriesResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRunningQueries() {
		if err = oprot.WriteFieldBegin("running_queries", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RunningQueries)); err != nil {
			return err
		}
		for _, v := range p.RunningQueries {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFetchRunningQueriesResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFetchRunningQueriesResult_(%+v)", *p)

}

func (p *TFetchRunningQueriesResult_) DeepEqual(ano *TFetchRunningQueriesResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.RunningQueries) {
		return false
	}
	return true
}

func (p *TFetchRunningQueriesResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFetchRunningQueriesResult_) Field2DeepEqual(src []*types.TUniqueId) bool {

	if len(p.RunningQueries) != len(src) {
		return false
	}
	for i, v := range p.RunningQueries {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TFetchRunningQueriesRequest struct {
}

func NewTFetchRunningQueriesRequest() *TFetchRunningQueriesRequest {
	return &TFetchRunningQueriesRequest{}
}

func (p *TFetchRunningQueriesRequest) InitDefault() {
}

var fieldIDToName_TFetchRunningQueriesRequest = map[int16]string{}

func (p *TFetchRunningQueriesRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TFetchRunningQueriesRequest) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("TFetchRunningQueriesRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFetchRunningQueriesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFetchRunningQueriesRequest(%+v)", *p)

}

func (p *TFetchRunningQueriesRequest) DeepEqual(ano *TFetchRunningQueriesRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type FrontendService interface {
	GetDbNames(ctx context.Context, params *TGetDbsParams) (r *TGetDbsResult_, err error)

	GetTableNames(ctx context.Context, params *TGetTablesParams) (r *TGetTablesResult_, err error)

	DescribeTable(ctx context.Context, params *TDescribeTableParams) (r *TDescribeTableResult_, err error)

	DescribeTables(ctx context.Context, params *TDescribeTablesParams) (r *TDescribeTablesResult_, err error)

	ShowVariables(ctx context.Context, params *TShowVariableRequest) (r *TShowVariableResult_, err error)

	ReportExecStatus(ctx context.Context, params *TReportExecStatusParams) (r *TReportExecStatusResult_, err error)

	FinishTask(ctx context.Context, request *masterservice.TFinishTaskRequest) (r *masterservice.TMasterResult_, err error)

	Report(ctx context.Context, request *masterservice.TReportRequest) (r *masterservice.TMasterResult_, err error)

	FetchResource(ctx context.Context) (r *masterservice.TFetchResourceResult_, err error)

	Forward(ctx context.Context, params *TMasterOpRequest) (r *TMasterOpResult_, err error)

	ListTableStatus(ctx context.Context, params *TGetTablesParams) (r *TListTableStatusResult_, err error)

	ListTableMetadataNameIds(ctx context.Context, params *TGetTablesParams) (r *TListTableMetadataNameIdsResult_, err error)

	ListTablePrivilegeStatus(ctx context.Context, params *TGetTablesParams) (r *TListPrivilegesResult_, err error)

	ListSchemaPrivilegeStatus(ctx context.Context, params *TGetTablesParams) (r *TListPrivilegesResult_, err error)

	ListUserPrivilegeStatus(ctx context.Context, params *TGetTablesParams) (r *TListPrivilegesResult_, err error)

	UpdateExportTaskStatus(ctx context.Context, request *TUpdateExportTaskStatusRequest) (r *TFeResult_, err error)

	LoadTxnBegin(ctx context.Context, request *TLoadTxnBeginRequest) (r *TLoadTxnBeginResult_, err error)

	LoadTxnPreCommit(ctx context.Context, request *TLoadTxnCommitRequest) (r *TLoadTxnCommitResult_, err error)

	LoadTxn2PC(ctx context.Context, request *TLoadTxn2PCRequest) (r *TLoadTxn2PCResult_, err error)

	LoadTxnCommit(ctx context.Context, request *TLoadTxnCommitRequest) (r *TLoadTxnCommitResult_, err error)

	LoadTxnRollback(ctx context.Context, request *TLoadTxnRollbackRequest) (r *TLoadTxnRollbackResult_, err error)

	BeginTxn(ctx context.Context, request *TBeginTxnRequest) (r *TBeginTxnResult_, err error)

	CommitTxn(ctx context.Context, request *TCommitTxnRequest) (r *TCommitTxnResult_, err error)

	RollbackTxn(ctx context.Context, request *TRollbackTxnRequest) (r *TRollbackTxnResult_, err error)

	GetBinlog(ctx context.Context, request *TGetBinlogRequest) (r *TGetBinlogResult_, err error)

	GetSnapshot(ctx context.Context, request *TGetSnapshotRequest) (r *TGetSnapshotResult_, err error)

	RestoreSnapshot(ctx context.Context, request *TRestoreSnapshotRequest) (r *TRestoreSnapshotResult_, err error)

	WaitingTxnStatus(ctx context.Context, request *TWaitingTxnStatusRequest) (r *TWaitingTxnStatusResult_, err error)

	StreamLoadPut(ctx context.Context, request *TStreamLoadPutRequest) (r *TStreamLoadPutResult_, err error)

	StreamLoadMultiTablePut(ctx context.Context, request *TStreamLoadPutRequest) (r *TStreamLoadMultiTablePutResult_, err error)

	SnapshotLoaderReport(ctx context.Context, request *TSnapshotLoaderReportRequest) (r *status.TStatus, err error)

	Ping(ctx context.Context, request *TFrontendPingFrontendRequest) (r *TFrontendPingFrontendResult_, err error)

	InitExternalCtlMeta(ctx context.Context, request *TInitExternalCtlMetaRequest) (r *TInitExternalCtlMetaResult_, err error)

	FetchSchemaTableData(ctx context.Context, request *TFetchSchemaTableDataRequest) (r *TFetchSchemaTableDataResult_, err error)

	AcquireToken(ctx context.Context) (r *TMySqlLoadAcquireTokenResult_, err error)

	CheckToken(ctx context.Context, token string) (r bool, err error)

	ConfirmUnusedRemoteFiles(ctx context.Context, request *TConfirmUnusedRemoteFilesRequest) (r *TConfirmUnusedRemoteFilesResult_, err error)

	CheckAuth(ctx context.Context, request *TCheckAuthRequest) (r *TCheckAuthResult_, err error)

	GetQueryStats(ctx context.Context, request *TGetQueryStatsRequest) (r *TQueryStatsResult_, err error)

	GetTabletReplicaInfos(ctx context.Context, request *TGetTabletReplicaInfosRequest) (r *TGetTabletReplicaInfosResult_, err error)

	AddPlsqlStoredProcedure(ctx context.Context, request *TAddPlsqlStoredProcedureRequest) (r *TPlsqlStoredProcedureResult_, err error)

	DropPlsqlStoredProcedure(ctx context.Context, request *TDropPlsqlStoredProcedureRequest) (r *TPlsqlStoredProcedureResult_, err error)

	AddPlsqlPackage(ctx context.Context, request *TAddPlsqlPackageRequest) (r *TPlsqlPackageResult_, err error)

	DropPlsqlPackage(ctx context.Context, request *TDropPlsqlPackageRequest) (r *TPlsqlPackageResult_, err error)

	GetMasterToken(ctx context.Context, request *TGetMasterTokenRequest) (r *TGetMasterTokenResult_, err error)

	GetBinlogLag(ctx context.Context, request *TGetBinlogLagRequest) (r *TGetBinlogLagResult_, err error)

	UpdateStatsCache(ctx context.Context, request *TUpdateFollowerStatsCacheRequest) (r *status.TStatus, err error)

	GetAutoIncrementRange(ctx context.Context, request *TAutoIncrementRangeRequest) (r *TAutoIncrementRangeResult_, err error)

	CreatePartition(ctx context.Context, request *TCreatePartitionRequest) (r *TCreatePartitionResult_, err error)

	ReplacePartition(ctx context.Context, request *TReplacePartitionRequest) (r *TReplacePartitionResult_, err error)

	GetMeta(ctx context.Context, request *TGetMetaRequest) (r *TGetMetaResult_, err error)

	GetBackendMeta(ctx context.Context, request *TGetBackendMetaRequest) (r *TGetBackendMetaResult_, err error)

	GetColumnInfo(ctx context.Context, request *TGetColumnInfoRequest) (r *TGetColumnInfoResult_, err error)

	InvalidateStatsCache(ctx context.Context, request *TInvalidateFollowerStatsCacheRequest) (r *status.TStatus, err error)

	ShowProcessList(ctx context.Context, request *TShowProcessListRequest) (r *TShowProcessListResult_, err error)

	ReportCommitTxnResult_(ctx context.Context, request *TReportCommitTxnResultRequest) (r *status.TStatus, err error)

	ShowUser(ctx context.Context, request *TShowUserRequest) (r *TShowUserResult_, err error)

	SyncQueryColumns(ctx context.Context, request *TSyncQueryColumns) (r *status.TStatus, err error)

	FetchSplitBatch(ctx context.Context, request *TFetchSplitBatchRequest) (r *TFetchSplitBatchResult_, err error)

	UpdatePartitionStatsCache(ctx context.Context, request *TUpdateFollowerPartitionStatsCacheRequest) (r *status.TStatus, err error)

	FetchRunningQueries(ctx context.Context, request *TFetchRunningQueriesRequest) (r *TFetchRunningQueriesResult_, err error)
}

type FrontendServiceClient struct {
	c thrift.TClient
}

func NewFrontendServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FrontendServiceClient {
	return &FrontendServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewFrontendServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FrontendServiceClient {
	return &FrontendServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewFrontendServiceClient(c thrift.TClient) *FrontendServiceClient {
	return &FrontendServiceClient{
		c: c,
	}
}

func (p *FrontendServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *FrontendServiceClient) GetDbNames(ctx context.Context, params *TGetDbsParams) (r *TGetDbsResult_, err error) {
	var _args FrontendServiceGetDbNamesArgs
	_args.Params = params
	var _result FrontendServiceGetDbNamesResult
	if err = p.Client_().Call(ctx, "getDbNames", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) GetTableNames(ctx context.Context, params *TGetTablesParams) (r *TGetTablesResult_, err error) {
	var _args FrontendServiceGetTableNamesArgs
	_args.Params = params
	var _result FrontendServiceGetTableNamesResult
	if err = p.Client_().Call(ctx, "getTableNames", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) DescribeTable(ctx context.Context, params *TDescribeTableParams) (r *TDescribeTableResult_, err error) {
	var _args FrontendServiceDescribeTableArgs
	_args.Params = params
	var _result FrontendServiceDescribeTableResult
	if err = p.Client_().Call(ctx, "describeTable", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) DescribeTables(ctx context.Context, params *TDescribeTablesParams) (r *TDescribeTablesResult_, err error) {
	var _args FrontendServiceDescribeTablesArgs
	_args.Params = params
	var _result FrontendServiceDescribeTablesResult
	if err = p.Client_().Call(ctx, "describeTables", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) ShowVariables(ctx context.Context, params *TShowVariableRequest) (r *TShowVariableResult_, err error) {
	var _args FrontendServiceShowVariablesArgs
	_args.Params = params
	var _result FrontendServiceShowVariablesResult
	if err = p.Client_().Call(ctx, "showVariables", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) ReportExecStatus(ctx context.Context, params *TReportExecStatusParams) (r *TReportExecStatusResult_, err error) {
	var _args FrontendServiceReportExecStatusArgs
	_args.Params = params
	var _result FrontendServiceReportExecStatusResult
	if err = p.Client_().Call(ctx, "reportExecStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) FinishTask(ctx context.Context, request *masterservice.TFinishTaskRequest) (r *masterservice.TMasterResult_, err error) {
	var _args FrontendServiceFinishTaskArgs
	_args.Request = request
	var _result FrontendServiceFinishTaskResult
	if err = p.Client_().Call(ctx, "finishTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) Report(ctx context.Context, request *masterservice.TReportRequest) (r *masterservice.TMasterResult_, err error) {
	var _args FrontendServiceReportArgs
	_args.Request = request
	var _result FrontendServiceReportResult
	if err = p.Client_().Call(ctx, "report", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) FetchResource(ctx context.Context) (r *masterservice.TFetchResourceResult_, err error) {
	var _args FrontendServiceFetchResourceArgs
	var _result FrontendServiceFetchResourceResult
	if err = p.Client_().Call(ctx, "fetchResource", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) Forward(ctx context.Context, params *TMasterOpRequest) (r *TMasterOpResult_, err error) {
	var _args FrontendServiceForwardArgs
	_args.Params = params
	var _result FrontendServiceForwardResult
	if err = p.Client_().Call(ctx, "forward", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) ListTableStatus(ctx context.Context, params *TGetTablesParams) (r *TListTableStatusResult_, err error) {
	var _args FrontendServiceListTableStatusArgs
	_args.Params = params
	var _result FrontendServiceListTableStatusResult
	if err = p.Client_().Call(ctx, "listTableStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) ListTableMetadataNameIds(ctx context.Context, params *TGetTablesParams) (r *TListTableMetadataNameIdsResult_, err error) {
	var _args FrontendServiceListTableMetadataNameIdsArgs
	_args.Params = params
	var _result FrontendServiceListTableMetadataNameIdsResult
	if err = p.Client_().Call(ctx, "listTableMetadataNameIds", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) ListTablePrivilegeStatus(ctx context.Context, params *TGetTablesParams) (r *TListPrivilegesResult_, err error) {
	var _args FrontendServiceListTablePrivilegeStatusArgs
	_args.Params = params
	var _result FrontendServiceListTablePrivilegeStatusResult
	if err = p.Client_().Call(ctx, "listTablePrivilegeStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) ListSchemaPrivilegeStatus(ctx context.Context, params *TGetTablesParams) (r *TListPrivilegesResult_, err error) {
	var _args FrontendServiceListSchemaPrivilegeStatusArgs
	_args.Params = params
	var _result FrontendServiceListSchemaPrivilegeStatusResult
	if err = p.Client_().Call(ctx, "listSchemaPrivilegeStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) ListUserPrivilegeStatus(ctx context.Context, params *TGetTablesParams) (r *TListPrivilegesResult_, err error) {
	var _args FrontendServiceListUserPrivilegeStatusArgs
	_args.Params = params
	var _result FrontendServiceListUserPrivilegeStatusResult
	if err = p.Client_().Call(ctx, "listUserPrivilegeStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) UpdateExportTaskStatus(ctx context.Context, request *TUpdateExportTaskStatusRequest) (r *TFeResult_, err error) {
	var _args FrontendServiceUpdateExportTaskStatusArgs
	_args.Request = request
	var _result FrontendServiceUpdateExportTaskStatusResult
	if err = p.Client_().Call(ctx, "updateExportTaskStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) LoadTxnBegin(ctx context.Context, request *TLoadTxnBeginRequest) (r *TLoadTxnBeginResult_, err error) {
	var _args FrontendServiceLoadTxnBeginArgs
	_args.Request = request
	var _result FrontendServiceLoadTxnBeginResult
	if err = p.Client_().Call(ctx, "loadTxnBegin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) LoadTxnPreCommit(ctx context.Context, request *TLoadTxnCommitRequest) (r *TLoadTxnCommitResult_, err error) {
	var _args FrontendServiceLoadTxnPreCommitArgs
	_args.Request = request
	var _result FrontendServiceLoadTxnPreCommitResult
	if err = p.Client_().Call(ctx, "loadTxnPreCommit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) LoadTxn2PC(ctx context.Context, request *TLoadTxn2PCRequest) (r *TLoadTxn2PCResult_, err error) {
	var _args FrontendServiceLoadTxn2PCArgs
	_args.Request = request
	var _result FrontendServiceLoadTxn2PCResult
	if err = p.Client_().Call(ctx, "loadTxn2PC", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) LoadTxnCommit(ctx context.Context, request *TLoadTxnCommitRequest) (r *TLoadTxnCommitResult_, err error) {
	var _args FrontendServiceLoadTxnCommitArgs
	_args.Request = request
	var _result FrontendServiceLoadTxnCommitResult
	if err = p.Client_().Call(ctx, "loadTxnCommit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) LoadTxnRollback(ctx context.Context, request *TLoadTxnRollbackRequest) (r *TLoadTxnRollbackResult_, err error) {
	var _args FrontendServiceLoadTxnRollbackArgs
	_args.Request = request
	var _result FrontendServiceLoadTxnRollbackResult
	if err = p.Client_().Call(ctx, "loadTxnRollback", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) BeginTxn(ctx context.Context, request *TBeginTxnRequest) (r *TBeginTxnResult_, err error) {
	var _args FrontendServiceBeginTxnArgs
	_args.Request = request
	var _result FrontendServiceBeginTxnResult
	if err = p.Client_().Call(ctx, "beginTxn", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) CommitTxn(ctx context.Context, request *TCommitTxnRequest) (r *TCommitTxnResult_, err error) {
	var _args FrontendServiceCommitTxnArgs
	_args.Request = request
	var _result FrontendServiceCommitTxnResult
	if err = p.Client_().Call(ctx, "commitTxn", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) RollbackTxn(ctx context.Context, request *TRollbackTxnRequest) (r *TRollbackTxnResult_, err error) {
	var _args FrontendServiceRollbackTxnArgs
	_args.Request = request
	var _result FrontendServiceRollbackTxnResult
	if err = p.Client_().Call(ctx, "rollbackTxn", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) GetBinlog(ctx context.Context, request *TGetBinlogRequest) (r *TGetBinlogResult_, err error) {
	var _args FrontendServiceGetBinlogArgs
	_args.Request = request
	var _result FrontendServiceGetBinlogResult
	if err = p.Client_().Call(ctx, "getBinlog", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) GetSnapshot(ctx context.Context, request *TGetSnapshotRequest) (r *TGetSnapshotResult_, err error) {
	var _args FrontendServiceGetSnapshotArgs
	_args.Request = request
	var _result FrontendServiceGetSnapshotResult
	if err = p.Client_().Call(ctx, "getSnapshot", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) RestoreSnapshot(ctx context.Context, request *TRestoreSnapshotRequest) (r *TRestoreSnapshotResult_, err error) {
	var _args FrontendServiceRestoreSnapshotArgs
	_args.Request = request
	var _result FrontendServiceRestoreSnapshotResult
	if err = p.Client_().Call(ctx, "restoreSnapshot", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) WaitingTxnStatus(ctx context.Context, request *TWaitingTxnStatusRequest) (r *TWaitingTxnStatusResult_, err error) {
	var _args FrontendServiceWaitingTxnStatusArgs
	_args.Request = request
	var _result FrontendServiceWaitingTxnStatusResult
	if err = p.Client_().Call(ctx, "waitingTxnStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) StreamLoadPut(ctx context.Context, request *TStreamLoadPutRequest) (r *TStreamLoadPutResult_, err error) {
	var _args FrontendServiceStreamLoadPutArgs
	_args.Request = request
	var _result FrontendServiceStreamLoadPutResult
	if err = p.Client_().Call(ctx, "streamLoadPut", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) StreamLoadMultiTablePut(ctx context.Context, request *TStreamLoadPutRequest) (r *TStreamLoadMultiTablePutResult_, err error) {
	var _args FrontendServiceStreamLoadMultiTablePutArgs
	_args.Request = request
	var _result FrontendServiceStreamLoadMultiTablePutResult
	if err = p.Client_().Call(ctx, "streamLoadMultiTablePut", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) SnapshotLoaderReport(ctx context.Context, request *TSnapshotLoaderReportRequest) (r *status.TStatus, err error) {
	var _args FrontendServiceSnapshotLoaderReportArgs
	_args.Request = request
	var _result FrontendServiceSnapshotLoaderReportResult
	if err = p.Client_().Call(ctx, "snapshotLoaderReport", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) Ping(ctx context.Context, request *TFrontendPingFrontendRequest) (r *TFrontendPingFrontendResult_, err error) {
	var _args FrontendServicePingArgs
	_args.Request = request
	var _result FrontendServicePingResult
	if err = p.Client_().Call(ctx, "ping", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) InitExternalCtlMeta(ctx context.Context, request *TInitExternalCtlMetaRequest) (r *TInitExternalCtlMetaResult_, err error) {
	var _args FrontendServiceInitExternalCtlMetaArgs
	_args.Request = request
	var _result FrontendServiceInitExternalCtlMetaResult
	if err = p.Client_().Call(ctx, "initExternalCtlMeta", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) FetchSchemaTableData(ctx context.Context, request *TFetchSchemaTableDataRequest) (r *TFetchSchemaTableDataResult_, err error) {
	var _args FrontendServiceFetchSchemaTableDataArgs
	_args.Request = request
	var _result FrontendServiceFetchSchemaTableDataResult
	if err = p.Client_().Call(ctx, "fetchSchemaTableData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) AcquireToken(ctx context.Context) (r *TMySqlLoadAcquireTokenResult_, err error) {
	var _args FrontendServiceAcquireTokenArgs
	var _result FrontendServiceAcquireTokenResult
	if err = p.Client_().Call(ctx, "acquireToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) CheckToken(ctx context.Context, token string) (r bool, err error) {
	var _args FrontendServiceCheckTokenArgs
	_args.Token = token
	var _result FrontendServiceCheckTokenResult
	if err = p.Client_().Call(ctx, "checkToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) ConfirmUnusedRemoteFiles(ctx context.Context, request *TConfirmUnusedRemoteFilesRequest) (r *TConfirmUnusedRemoteFilesResult_, err error) {
	var _args FrontendServiceConfirmUnusedRemoteFilesArgs
	_args.Request = request
	var _result FrontendServiceConfirmUnusedRemoteFilesResult
	if err = p.Client_().Call(ctx, "confirmUnusedRemoteFiles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) CheckAuth(ctx context.Context, request *TCheckAuthRequest) (r *TCheckAuthResult_, err error) {
	var _args FrontendServiceCheckAuthArgs
	_args.Request = request
	var _result FrontendServiceCheckAuthResult
	if err = p.Client_().Call(ctx, "checkAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) GetQueryStats(ctx context.Context, request *TGetQueryStatsRequest) (r *TQueryStatsResult_, err error) {
	var _args FrontendServiceGetQueryStatsArgs
	_args.Request = request
	var _result FrontendServiceGetQueryStatsResult
	if err = p.Client_().Call(ctx, "getQueryStats", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) GetTabletReplicaInfos(ctx context.Context, request *TGetTabletReplicaInfosRequest) (r *TGetTabletReplicaInfosResult_, err error) {
	var _args FrontendServiceGetTabletReplicaInfosArgs
	_args.Request = request
	var _result FrontendServiceGetTabletReplicaInfosResult
	if err = p.Client_().Call(ctx, "getTabletReplicaInfos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) AddPlsqlStoredProcedure(ctx context.Context, request *TAddPlsqlStoredProcedureRequest) (r *TPlsqlStoredProcedureResult_, err error) {
	var _args FrontendServiceAddPlsqlStoredProcedureArgs
	_args.Request = request
	var _result FrontendServiceAddPlsqlStoredProcedureResult
	if err = p.Client_().Call(ctx, "addPlsqlStoredProcedure", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) DropPlsqlStoredProcedure(ctx context.Context, request *TDropPlsqlStoredProcedureRequest) (r *TPlsqlStoredProcedureResult_, err error) {
	var _args FrontendServiceDropPlsqlStoredProcedureArgs
	_args.Request = request
	var _result FrontendServiceDropPlsqlStoredProcedureResult
	if err = p.Client_().Call(ctx, "dropPlsqlStoredProcedure", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) AddPlsqlPackage(ctx context.Context, request *TAddPlsqlPackageRequest) (r *TPlsqlPackageResult_, err error) {
	var _args FrontendServiceAddPlsqlPackageArgs
	_args.Request = request
	var _result FrontendServiceAddPlsqlPackageResult
	if err = p.Client_().Call(ctx, "addPlsqlPackage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) DropPlsqlPackage(ctx context.Context, request *TDropPlsqlPackageRequest) (r *TPlsqlPackageResult_, err error) {
	var _args FrontendServiceDropPlsqlPackageArgs
	_args.Request = request
	var _result FrontendServiceDropPlsqlPackageResult
	if err = p.Client_().Call(ctx, "dropPlsqlPackage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) GetMasterToken(ctx context.Context, request *TGetMasterTokenRequest) (r *TGetMasterTokenResult_, err error) {
	var _args FrontendServiceGetMasterTokenArgs
	_args.Request = request
	var _result FrontendServiceGetMasterTokenResult
	if err = p.Client_().Call(ctx, "getMasterToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) GetBinlogLag(ctx context.Context, request *TGetBinlogLagRequest) (r *TGetBinlogLagResult_, err error) {
	var _args FrontendServiceGetBinlogLagArgs
	_args.Request = request
	var _result FrontendServiceGetBinlogLagResult
	if err = p.Client_().Call(ctx, "getBinlogLag", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) UpdateStatsCache(ctx context.Context, request *TUpdateFollowerStatsCacheRequest) (r *status.TStatus, err error) {
	var _args FrontendServiceUpdateStatsCacheArgs
	_args.Request = request
	var _result FrontendServiceUpdateStatsCacheResult
	if err = p.Client_().Call(ctx, "updateStatsCache", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) GetAutoIncrementRange(ctx context.Context, request *TAutoIncrementRangeRequest) (r *TAutoIncrementRangeResult_, err error) {
	var _args FrontendServiceGetAutoIncrementRangeArgs
	_args.Request = request
	var _result FrontendServiceGetAutoIncrementRangeResult
	if err = p.Client_().Call(ctx, "getAutoIncrementRange", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) CreatePartition(ctx context.Context, request *TCreatePartitionRequest) (r *TCreatePartitionResult_, err error) {
	var _args FrontendServiceCreatePartitionArgs
	_args.Request = request
	var _result FrontendServiceCreatePartitionResult
	if err = p.Client_().Call(ctx, "createPartition", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) ReplacePartition(ctx context.Context, request *TReplacePartitionRequest) (r *TReplacePartitionResult_, err error) {
	var _args FrontendServiceReplacePartitionArgs
	_args.Request = request
	var _result FrontendServiceReplacePartitionResult
	if err = p.Client_().Call(ctx, "replacePartition", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) GetMeta(ctx context.Context, request *TGetMetaRequest) (r *TGetMetaResult_, err error) {
	var _args FrontendServiceGetMetaArgs
	_args.Request = request
	var _result FrontendServiceGetMetaResult
	if err = p.Client_().Call(ctx, "getMeta", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) GetBackendMeta(ctx context.Context, request *TGetBackendMetaRequest) (r *TGetBackendMetaResult_, err error) {
	var _args FrontendServiceGetBackendMetaArgs
	_args.Request = request
	var _result FrontendServiceGetBackendMetaResult
	if err = p.Client_().Call(ctx, "getBackendMeta", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) GetColumnInfo(ctx context.Context, request *TGetColumnInfoRequest) (r *TGetColumnInfoResult_, err error) {
	var _args FrontendServiceGetColumnInfoArgs
	_args.Request = request
	var _result FrontendServiceGetColumnInfoResult
	if err = p.Client_().Call(ctx, "getColumnInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) InvalidateStatsCache(ctx context.Context, request *TInvalidateFollowerStatsCacheRequest) (r *status.TStatus, err error) {
	var _args FrontendServiceInvalidateStatsCacheArgs
	_args.Request = request
	var _result FrontendServiceInvalidateStatsCacheResult
	if err = p.Client_().Call(ctx, "invalidateStatsCache", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) ShowProcessList(ctx context.Context, request *TShowProcessListRequest) (r *TShowProcessListResult_, err error) {
	var _args FrontendServiceShowProcessListArgs
	_args.Request = request
	var _result FrontendServiceShowProcessListResult
	if err = p.Client_().Call(ctx, "showProcessList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) ReportCommitTxnResult_(ctx context.Context, request *TReportCommitTxnResultRequest) (r *status.TStatus, err error) {
	var _args FrontendServiceReportCommitTxnResultArgs
	_args.Request = request
	var _result FrontendServiceReportCommitTxnResultResult
	if err = p.Client_().Call(ctx, "reportCommitTxnResult", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) ShowUser(ctx context.Context, request *TShowUserRequest) (r *TShowUserResult_, err error) {
	var _args FrontendServiceShowUserArgs
	_args.Request = request
	var _result FrontendServiceShowUserResult
	if err = p.Client_().Call(ctx, "showUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) SyncQueryColumns(ctx context.Context, request *TSyncQueryColumns) (r *status.TStatus, err error) {
	var _args FrontendServiceSyncQueryColumnsArgs
	_args.Request = request
	var _result FrontendServiceSyncQueryColumnsResult
	if err = p.Client_().Call(ctx, "syncQueryColumns", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) FetchSplitBatch(ctx context.Context, request *TFetchSplitBatchRequest) (r *TFetchSplitBatchResult_, err error) {
	var _args FrontendServiceFetchSplitBatchArgs
	_args.Request = request
	var _result FrontendServiceFetchSplitBatchResult
	if err = p.Client_().Call(ctx, "fetchSplitBatch", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) UpdatePartitionStatsCache(ctx context.Context, request *TUpdateFollowerPartitionStatsCacheRequest) (r *status.TStatus, err error) {
	var _args FrontendServiceUpdatePartitionStatsCacheArgs
	_args.Request = request
	var _result FrontendServiceUpdatePartitionStatsCacheResult
	if err = p.Client_().Call(ctx, "updatePartitionStatsCache", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FrontendServiceClient) FetchRunningQueries(ctx context.Context, request *TFetchRunningQueriesRequest) (r *TFetchRunningQueriesResult_, err error) {
	var _args FrontendServiceFetchRunningQueriesArgs
	_args.Request = request
	var _result FrontendServiceFetchRunningQueriesResult
	if err = p.Client_().Call(ctx, "fetchRunningQueries", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type FrontendServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      FrontendService
}

func (p *FrontendServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *FrontendServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *FrontendServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewFrontendServiceProcessor(handler FrontendService) *FrontendServiceProcessor {
	self := &FrontendServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("getDbNames", &frontendServiceProcessorGetDbNames{handler: handler})
	self.AddToProcessorMap("getTableNames", &frontendServiceProcessorGetTableNames{handler: handler})
	self.AddToProcessorMap("describeTable", &frontendServiceProcessorDescribeTable{handler: handler})
	self.AddToProcessorMap("describeTables", &frontendServiceProcessorDescribeTables{handler: handler})
	self.AddToProcessorMap("showVariables", &frontendServiceProcessorShowVariables{handler: handler})
	self.AddToProcessorMap("reportExecStatus", &frontendServiceProcessorReportExecStatus{handler: handler})
	self.AddToProcessorMap("finishTask", &frontendServiceProcessorFinishTask{handler: handler})
	self.AddToProcessorMap("report", &frontendServiceProcessorReport{handler: handler})
	self.AddToProcessorMap("fetchResource", &frontendServiceProcessorFetchResource{handler: handler})
	self.AddToProcessorMap("forward", &frontendServiceProcessorForward{handler: handler})
	self.AddToProcessorMap("listTableStatus", &frontendServiceProcessorListTableStatus{handler: handler})
	self.AddToProcessorMap("listTableMetadataNameIds", &frontendServiceProcessorListTableMetadataNameIds{handler: handler})
	self.AddToProcessorMap("listTablePrivilegeStatus", &frontendServiceProcessorListTablePrivilegeStatus{handler: handler})
	self.AddToProcessorMap("listSchemaPrivilegeStatus", &frontendServiceProcessorListSchemaPrivilegeStatus{handler: handler})
	self.AddToProcessorMap("listUserPrivilegeStatus", &frontendServiceProcessorListUserPrivilegeStatus{handler: handler})
	self.AddToProcessorMap("updateExportTaskStatus", &frontendServiceProcessorUpdateExportTaskStatus{handler: handler})
	self.AddToProcessorMap("loadTxnBegin", &frontendServiceProcessorLoadTxnBegin{handler: handler})
	self.AddToProcessorMap("loadTxnPreCommit", &frontendServiceProcessorLoadTxnPreCommit{handler: handler})
	self.AddToProcessorMap("loadTxn2PC", &frontendServiceProcessorLoadTxn2PC{handler: handler})
	self.AddToProcessorMap("loadTxnCommit", &frontendServiceProcessorLoadTxnCommit{handler: handler})
	self.AddToProcessorMap("loadTxnRollback", &frontendServiceProcessorLoadTxnRollback{handler: handler})
	self.AddToProcessorMap("beginTxn", &frontendServiceProcessorBeginTxn{handler: handler})
	self.AddToProcessorMap("commitTxn", &frontendServiceProcessorCommitTxn{handler: handler})
	self.AddToProcessorMap("rollbackTxn", &frontendServiceProcessorRollbackTxn{handler: handler})
	self.AddToProcessorMap("getBinlog", &frontendServiceProcessorGetBinlog{handler: handler})
	self.AddToProcessorMap("getSnapshot", &frontendServiceProcessorGetSnapshot{handler: handler})
	self.AddToProcessorMap("restoreSnapshot", &frontendServiceProcessorRestoreSnapshot{handler: handler})
	self.AddToProcessorMap("waitingTxnStatus", &frontendServiceProcessorWaitingTxnStatus{handler: handler})
	self.AddToProcessorMap("streamLoadPut", &frontendServiceProcessorStreamLoadPut{handler: handler})
	self.AddToProcessorMap("streamLoadMultiTablePut", &frontendServiceProcessorStreamLoadMultiTablePut{handler: handler})
	self.AddToProcessorMap("snapshotLoaderReport", &frontendServiceProcessorSnapshotLoaderReport{handler: handler})
	self.AddToProcessorMap("ping", &frontendServiceProcessorPing{handler: handler})
	self.AddToProcessorMap("initExternalCtlMeta", &frontendServiceProcessorInitExternalCtlMeta{handler: handler})
	self.AddToProcessorMap("fetchSchemaTableData", &frontendServiceProcessorFetchSchemaTableData{handler: handler})
	self.AddToProcessorMap("acquireToken", &frontendServiceProcessorAcquireToken{handler: handler})
	self.AddToProcessorMap("checkToken", &frontendServiceProcessorCheckToken{handler: handler})
	self.AddToProcessorMap("confirmUnusedRemoteFiles", &frontendServiceProcessorConfirmUnusedRemoteFiles{handler: handler})
	self.AddToProcessorMap("checkAuth", &frontendServiceProcessorCheckAuth{handler: handler})
	self.AddToProcessorMap("getQueryStats", &frontendServiceProcessorGetQueryStats{handler: handler})
	self.AddToProcessorMap("getTabletReplicaInfos", &frontendServiceProcessorGetTabletReplicaInfos{handler: handler})
	self.AddToProcessorMap("addPlsqlStoredProcedure", &frontendServiceProcessorAddPlsqlStoredProcedure{handler: handler})
	self.AddToProcessorMap("dropPlsqlStoredProcedure", &frontendServiceProcessorDropPlsqlStoredProcedure{handler: handler})
	self.AddToProcessorMap("addPlsqlPackage", &frontendServiceProcessorAddPlsqlPackage{handler: handler})
	self.AddToProcessorMap("dropPlsqlPackage", &frontendServiceProcessorDropPlsqlPackage{handler: handler})
	self.AddToProcessorMap("getMasterToken", &frontendServiceProcessorGetMasterToken{handler: handler})
	self.AddToProcessorMap("getBinlogLag", &frontendServiceProcessorGetBinlogLag{handler: handler})
	self.AddToProcessorMap("updateStatsCache", &frontendServiceProcessorUpdateStatsCache{handler: handler})
	self.AddToProcessorMap("getAutoIncrementRange", &frontendServiceProcessorGetAutoIncrementRange{handler: handler})
	self.AddToProcessorMap("createPartition", &frontendServiceProcessorCreatePartition{handler: handler})
	self.AddToProcessorMap("replacePartition", &frontendServiceProcessorReplacePartition{handler: handler})
	self.AddToProcessorMap("getMeta", &frontendServiceProcessorGetMeta{handler: handler})
	self.AddToProcessorMap("getBackendMeta", &frontendServiceProcessorGetBackendMeta{handler: handler})
	self.AddToProcessorMap("getColumnInfo", &frontendServiceProcessorGetColumnInfo{handler: handler})
	self.AddToProcessorMap("invalidateStatsCache", &frontendServiceProcessorInvalidateStatsCache{handler: handler})
	self.AddToProcessorMap("showProcessList", &frontendServiceProcessorShowProcessList{handler: handler})
	self.AddToProcessorMap("reportCommitTxnResult", &frontendServiceProcessorReportCommitTxnResult_{handler: handler})
	self.AddToProcessorMap("showUser", &frontendServiceProcessorShowUser{handler: handler})
	self.AddToProcessorMap("syncQueryColumns", &frontendServiceProcessorSyncQueryColumns{handler: handler})
	self.AddToProcessorMap("fetchSplitBatch", &frontendServiceProcessorFetchSplitBatch{handler: handler})
	self.AddToProcessorMap("updatePartitionStatsCache", &frontendServiceProcessorUpdatePartitionStatsCache{handler: handler})
	self.AddToProcessorMap("fetchRunningQueries", &frontendServiceProcessorFetchRunningQueries{handler: handler})
	return self
}
func (p *FrontendServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type frontendServiceProcessorGetDbNames struct {
	handler FrontendService
}

func (p *frontendServiceProcessorGetDbNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceGetDbNamesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getDbNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceGetDbNamesResult{}
	var retval *TGetDbsResult_
	if retval, err2 = p.handler.GetDbNames(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDbNames: "+err2.Error())
		oprot.WriteMessageBegin("getDbNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getDbNames", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorGetTableNames struct {
	handler FrontendService
}

func (p *frontendServiceProcessorGetTableNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceGetTableNamesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTableNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceGetTableNamesResult{}
	var retval *TGetTablesResult_
	if retval, err2 = p.handler.GetTableNames(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTableNames: "+err2.Error())
		oprot.WriteMessageBegin("getTableNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getTableNames", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorDescribeTable struct {
	handler FrontendService
}

func (p *frontendServiceProcessorDescribeTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceDescribeTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("describeTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceDescribeTableResult{}
	var retval *TDescribeTableResult_
	if retval, err2 = p.handler.DescribeTable(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describeTable: "+err2.Error())
		oprot.WriteMessageBegin("describeTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("describeTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorDescribeTables struct {
	handler FrontendService
}

func (p *frontendServiceProcessorDescribeTables) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceDescribeTablesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("describeTables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceDescribeTablesResult{}
	var retval *TDescribeTablesResult_
	if retval, err2 = p.handler.DescribeTables(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describeTables: "+err2.Error())
		oprot.WriteMessageBegin("describeTables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("describeTables", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorShowVariables struct {
	handler FrontendService
}

func (p *frontendServiceProcessorShowVariables) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceShowVariablesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("showVariables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceShowVariablesResult{}
	var retval *TShowVariableResult_
	if retval, err2 = p.handler.ShowVariables(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing showVariables: "+err2.Error())
		oprot.WriteMessageBegin("showVariables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("showVariables", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorReportExecStatus struct {
	handler FrontendService
}

func (p *frontendServiceProcessorReportExecStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceReportExecStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportExecStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceReportExecStatusResult{}
	var retval *TReportExecStatusResult_
	if retval, err2 = p.handler.ReportExecStatus(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportExecStatus: "+err2.Error())
		oprot.WriteMessageBegin("reportExecStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("reportExecStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorFinishTask struct {
	handler FrontendService
}

func (p *frontendServiceProcessorFinishTask) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceFinishTaskArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("finishTask", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceFinishTaskResult{}
	var retval *masterservice.TMasterResult_
	if retval, err2 = p.handler.FinishTask(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing finishTask: "+err2.Error())
		oprot.WriteMessageBegin("finishTask", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("finishTask", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorReport struct {
	handler FrontendService
}

func (p *frontendServiceProcessorReport) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceReportArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("report", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceReportResult{}
	var retval *masterservice.TMasterResult_
	if retval, err2 = p.handler.Report(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing report: "+err2.Error())
		oprot.WriteMessageBegin("report", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("report", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorFetchResource struct {
	handler FrontendService
}

func (p *frontendServiceProcessorFetchResource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceFetchResourceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchResource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceFetchResourceResult{}
	var retval *masterservice.TFetchResourceResult_
	if retval, err2 = p.handler.FetchResource(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchResource: "+err2.Error())
		oprot.WriteMessageBegin("fetchResource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("fetchResource", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorForward struct {
	handler FrontendService
}

func (p *frontendServiceProcessorForward) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceForwardArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("forward", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceForwardResult{}
	var retval *TMasterOpResult_
	if retval, err2 = p.handler.Forward(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing forward: "+err2.Error())
		oprot.WriteMessageBegin("forward", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("forward", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorListTableStatus struct {
	handler FrontendService
}

func (p *frontendServiceProcessorListTableStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceListTableStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listTableStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceListTableStatusResult{}
	var retval *TListTableStatusResult_
	if retval, err2 = p.handler.ListTableStatus(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTableStatus: "+err2.Error())
		oprot.WriteMessageBegin("listTableStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listTableStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorListTableMetadataNameIds struct {
	handler FrontendService
}

func (p *frontendServiceProcessorListTableMetadataNameIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceListTableMetadataNameIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listTableMetadataNameIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceListTableMetadataNameIdsResult{}
	var retval *TListTableMetadataNameIdsResult_
	if retval, err2 = p.handler.ListTableMetadataNameIds(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTableMetadataNameIds: "+err2.Error())
		oprot.WriteMessageBegin("listTableMetadataNameIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listTableMetadataNameIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorListTablePrivilegeStatus struct {
	handler FrontendService
}

func (p *frontendServiceProcessorListTablePrivilegeStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceListTablePrivilegeStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listTablePrivilegeStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceListTablePrivilegeStatusResult{}
	var retval *TListPrivilegesResult_
	if retval, err2 = p.handler.ListTablePrivilegeStatus(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTablePrivilegeStatus: "+err2.Error())
		oprot.WriteMessageBegin("listTablePrivilegeStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listTablePrivilegeStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorListSchemaPrivilegeStatus struct {
	handler FrontendService
}

func (p *frontendServiceProcessorListSchemaPrivilegeStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceListSchemaPrivilegeStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listSchemaPrivilegeStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceListSchemaPrivilegeStatusResult{}
	var retval *TListPrivilegesResult_
	if retval, err2 = p.handler.ListSchemaPrivilegeStatus(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSchemaPrivilegeStatus: "+err2.Error())
		oprot.WriteMessageBegin("listSchemaPrivilegeStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listSchemaPrivilegeStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorListUserPrivilegeStatus struct {
	handler FrontendService
}

func (p *frontendServiceProcessorListUserPrivilegeStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceListUserPrivilegeStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listUserPrivilegeStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceListUserPrivilegeStatusResult{}
	var retval *TListPrivilegesResult_
	if retval, err2 = p.handler.ListUserPrivilegeStatus(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listUserPrivilegeStatus: "+err2.Error())
		oprot.WriteMessageBegin("listUserPrivilegeStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listUserPrivilegeStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorUpdateExportTaskStatus struct {
	handler FrontendService
}

func (p *frontendServiceProcessorUpdateExportTaskStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceUpdateExportTaskStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateExportTaskStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceUpdateExportTaskStatusResult{}
	var retval *TFeResult_
	if retval, err2 = p.handler.UpdateExportTaskStatus(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateExportTaskStatus: "+err2.Error())
		oprot.WriteMessageBegin("updateExportTaskStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateExportTaskStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorLoadTxnBegin struct {
	handler FrontendService
}

func (p *frontendServiceProcessorLoadTxnBegin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceLoadTxnBeginArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("loadTxnBegin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceLoadTxnBeginResult{}
	var retval *TLoadTxnBeginResult_
	if retval, err2 = p.handler.LoadTxnBegin(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loadTxnBegin: "+err2.Error())
		oprot.WriteMessageBegin("loadTxnBegin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("loadTxnBegin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorLoadTxnPreCommit struct {
	handler FrontendService
}

func (p *frontendServiceProcessorLoadTxnPreCommit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceLoadTxnPreCommitArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("loadTxnPreCommit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceLoadTxnPreCommitResult{}
	var retval *TLoadTxnCommitResult_
	if retval, err2 = p.handler.LoadTxnPreCommit(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loadTxnPreCommit: "+err2.Error())
		oprot.WriteMessageBegin("loadTxnPreCommit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("loadTxnPreCommit", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorLoadTxn2PC struct {
	handler FrontendService
}

func (p *frontendServiceProcessorLoadTxn2PC) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceLoadTxn2PCArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("loadTxn2PC", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceLoadTxn2PCResult{}
	var retval *TLoadTxn2PCResult_
	if retval, err2 = p.handler.LoadTxn2PC(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loadTxn2PC: "+err2.Error())
		oprot.WriteMessageBegin("loadTxn2PC", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("loadTxn2PC", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorLoadTxnCommit struct {
	handler FrontendService
}

func (p *frontendServiceProcessorLoadTxnCommit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceLoadTxnCommitArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("loadTxnCommit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceLoadTxnCommitResult{}
	var retval *TLoadTxnCommitResult_
	if retval, err2 = p.handler.LoadTxnCommit(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loadTxnCommit: "+err2.Error())
		oprot.WriteMessageBegin("loadTxnCommit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("loadTxnCommit", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorLoadTxnRollback struct {
	handler FrontendService
}

func (p *frontendServiceProcessorLoadTxnRollback) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceLoadTxnRollbackArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("loadTxnRollback", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceLoadTxnRollbackResult{}
	var retval *TLoadTxnRollbackResult_
	if retval, err2 = p.handler.LoadTxnRollback(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loadTxnRollback: "+err2.Error())
		oprot.WriteMessageBegin("loadTxnRollback", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("loadTxnRollback", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorBeginTxn struct {
	handler FrontendService
}

func (p *frontendServiceProcessorBeginTxn) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceBeginTxnArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("beginTxn", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceBeginTxnResult{}
	var retval *TBeginTxnResult_
	if retval, err2 = p.handler.BeginTxn(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing beginTxn: "+err2.Error())
		oprot.WriteMessageBegin("beginTxn", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("beginTxn", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorCommitTxn struct {
	handler FrontendService
}

func (p *frontendServiceProcessorCommitTxn) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceCommitTxnArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("commitTxn", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceCommitTxnResult{}
	var retval *TCommitTxnResult_
	if retval, err2 = p.handler.CommitTxn(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing commitTxn: "+err2.Error())
		oprot.WriteMessageBegin("commitTxn", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("commitTxn", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorRollbackTxn struct {
	handler FrontendService
}

func (p *frontendServiceProcessorRollbackTxn) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceRollbackTxnArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rollbackTxn", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceRollbackTxnResult{}
	var retval *TRollbackTxnResult_
	if retval, err2 = p.handler.RollbackTxn(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rollbackTxn: "+err2.Error())
		oprot.WriteMessageBegin("rollbackTxn", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rollbackTxn", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorGetBinlog struct {
	handler FrontendService
}

func (p *frontendServiceProcessorGetBinlog) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceGetBinlogArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBinlog", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceGetBinlogResult{}
	var retval *TGetBinlogResult_
	if retval, err2 = p.handler.GetBinlog(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBinlog: "+err2.Error())
		oprot.WriteMessageBegin("getBinlog", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBinlog", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorGetSnapshot struct {
	handler FrontendService
}

func (p *frontendServiceProcessorGetSnapshot) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceGetSnapshotArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSnapshot", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceGetSnapshotResult{}
	var retval *TGetSnapshotResult_
	if retval, err2 = p.handler.GetSnapshot(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSnapshot: "+err2.Error())
		oprot.WriteMessageBegin("getSnapshot", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSnapshot", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorRestoreSnapshot struct {
	handler FrontendService
}

func (p *frontendServiceProcessorRestoreSnapshot) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceRestoreSnapshotArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("restoreSnapshot", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceRestoreSnapshotResult{}
	var retval *TRestoreSnapshotResult_
	if retval, err2 = p.handler.RestoreSnapshot(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing restoreSnapshot: "+err2.Error())
		oprot.WriteMessageBegin("restoreSnapshot", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("restoreSnapshot", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorWaitingTxnStatus struct {
	handler FrontendService
}

func (p *frontendServiceProcessorWaitingTxnStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceWaitingTxnStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("waitingTxnStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceWaitingTxnStatusResult{}
	var retval *TWaitingTxnStatusResult_
	if retval, err2 = p.handler.WaitingTxnStatus(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing waitingTxnStatus: "+err2.Error())
		oprot.WriteMessageBegin("waitingTxnStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("waitingTxnStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorStreamLoadPut struct {
	handler FrontendService
}

func (p *frontendServiceProcessorStreamLoadPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceStreamLoadPutArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("streamLoadPut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceStreamLoadPutResult{}
	var retval *TStreamLoadPutResult_
	if retval, err2 = p.handler.StreamLoadPut(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing streamLoadPut: "+err2.Error())
		oprot.WriteMessageBegin("streamLoadPut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("streamLoadPut", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorStreamLoadMultiTablePut struct {
	handler FrontendService
}

func (p *frontendServiceProcessorStreamLoadMultiTablePut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceStreamLoadMultiTablePutArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("streamLoadMultiTablePut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceStreamLoadMultiTablePutResult{}
	var retval *TStreamLoadMultiTablePutResult_
	if retval, err2 = p.handler.StreamLoadMultiTablePut(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing streamLoadMultiTablePut: "+err2.Error())
		oprot.WriteMessageBegin("streamLoadMultiTablePut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("streamLoadMultiTablePut", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorSnapshotLoaderReport struct {
	handler FrontendService
}

func (p *frontendServiceProcessorSnapshotLoaderReport) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceSnapshotLoaderReportArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("snapshotLoaderReport", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceSnapshotLoaderReportResult{}
	var retval *status.TStatus
	if retval, err2 = p.handler.SnapshotLoaderReport(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing snapshotLoaderReport: "+err2.Error())
		oprot.WriteMessageBegin("snapshotLoaderReport", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("snapshotLoaderReport", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorPing struct {
	handler FrontendService
}

func (p *frontendServiceProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServicePingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServicePingResult{}
	var retval *TFrontendPingFrontendResult_
	if retval, err2 = p.handler.Ping(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: "+err2.Error())
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorInitExternalCtlMeta struct {
	handler FrontendService
}

func (p *frontendServiceProcessorInitExternalCtlMeta) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceInitExternalCtlMetaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("initExternalCtlMeta", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceInitExternalCtlMetaResult{}
	var retval *TInitExternalCtlMetaResult_
	if retval, err2 = p.handler.InitExternalCtlMeta(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing initExternalCtlMeta: "+err2.Error())
		oprot.WriteMessageBegin("initExternalCtlMeta", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("initExternalCtlMeta", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorFetchSchemaTableData struct {
	handler FrontendService
}

func (p *frontendServiceProcessorFetchSchemaTableData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceFetchSchemaTableDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchSchemaTableData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceFetchSchemaTableDataResult{}
	var retval *TFetchSchemaTableDataResult_
	if retval, err2 = p.handler.FetchSchemaTableData(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchSchemaTableData: "+err2.Error())
		oprot.WriteMessageBegin("fetchSchemaTableData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("fetchSchemaTableData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorAcquireToken struct {
	handler FrontendService
}

func (p *frontendServiceProcessorAcquireToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceAcquireTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("acquireToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceAcquireTokenResult{}
	var retval *TMySqlLoadAcquireTokenResult_
	if retval, err2 = p.handler.AcquireToken(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireToken: "+err2.Error())
		oprot.WriteMessageBegin("acquireToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("acquireToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorCheckToken struct {
	handler FrontendService
}

func (p *frontendServiceProcessorCheckToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceCheckTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceCheckTokenResult{}
	var retval bool
	if retval, err2 = p.handler.CheckToken(ctx, args.Token); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkToken: "+err2.Error())
		oprot.WriteMessageBegin("checkToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("checkToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorConfirmUnusedRemoteFiles struct {
	handler FrontendService
}

func (p *frontendServiceProcessorConfirmUnusedRemoteFiles) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceConfirmUnusedRemoteFilesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("confirmUnusedRemoteFiles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceConfirmUnusedRemoteFilesResult{}
	var retval *TConfirmUnusedRemoteFilesResult_
	if retval, err2 = p.handler.ConfirmUnusedRemoteFiles(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing confirmUnusedRemoteFiles: "+err2.Error())
		oprot.WriteMessageBegin("confirmUnusedRemoteFiles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("confirmUnusedRemoteFiles", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorCheckAuth struct {
	handler FrontendService
}

func (p *frontendServiceProcessorCheckAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceCheckAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceCheckAuthResult{}
	var retval *TCheckAuthResult_
	if retval, err2 = p.handler.CheckAuth(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkAuth: "+err2.Error())
		oprot.WriteMessageBegin("checkAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("checkAuth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorGetQueryStats struct {
	handler FrontendService
}

func (p *frontendServiceProcessorGetQueryStats) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceGetQueryStatsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getQueryStats", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceGetQueryStatsResult{}
	var retval *TQueryStatsResult_
	if retval, err2 = p.handler.GetQueryStats(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getQueryStats: "+err2.Error())
		oprot.WriteMessageBegin("getQueryStats", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getQueryStats", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorGetTabletReplicaInfos struct {
	handler FrontendService
}

func (p *frontendServiceProcessorGetTabletReplicaInfos) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceGetTabletReplicaInfosArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTabletReplicaInfos", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceGetTabletReplicaInfosResult{}
	var retval *TGetTabletReplicaInfosResult_
	if retval, err2 = p.handler.GetTabletReplicaInfos(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTabletReplicaInfos: "+err2.Error())
		oprot.WriteMessageBegin("getTabletReplicaInfos", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getTabletReplicaInfos", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorAddPlsqlStoredProcedure struct {
	handler FrontendService
}

func (p *frontendServiceProcessorAddPlsqlStoredProcedure) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceAddPlsqlStoredProcedureArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addPlsqlStoredProcedure", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceAddPlsqlStoredProcedureResult{}
	var retval *TPlsqlStoredProcedureResult_
	if retval, err2 = p.handler.AddPlsqlStoredProcedure(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addPlsqlStoredProcedure: "+err2.Error())
		oprot.WriteMessageBegin("addPlsqlStoredProcedure", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("addPlsqlStoredProcedure", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorDropPlsqlStoredProcedure struct {
	handler FrontendService
}

func (p *frontendServiceProcessorDropPlsqlStoredProcedure) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceDropPlsqlStoredProcedureArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("dropPlsqlStoredProcedure", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceDropPlsqlStoredProcedureResult{}
	var retval *TPlsqlStoredProcedureResult_
	if retval, err2 = p.handler.DropPlsqlStoredProcedure(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropPlsqlStoredProcedure: "+err2.Error())
		oprot.WriteMessageBegin("dropPlsqlStoredProcedure", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("dropPlsqlStoredProcedure", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorAddPlsqlPackage struct {
	handler FrontendService
}

func (p *frontendServiceProcessorAddPlsqlPackage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceAddPlsqlPackageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addPlsqlPackage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceAddPlsqlPackageResult{}
	var retval *TPlsqlPackageResult_
	if retval, err2 = p.handler.AddPlsqlPackage(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addPlsqlPackage: "+err2.Error())
		oprot.WriteMessageBegin("addPlsqlPackage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("addPlsqlPackage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorDropPlsqlPackage struct {
	handler FrontendService
}

func (p *frontendServiceProcessorDropPlsqlPackage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceDropPlsqlPackageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("dropPlsqlPackage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceDropPlsqlPackageResult{}
	var retval *TPlsqlPackageResult_
	if retval, err2 = p.handler.DropPlsqlPackage(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropPlsqlPackage: "+err2.Error())
		oprot.WriteMessageBegin("dropPlsqlPackage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("dropPlsqlPackage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorGetMasterToken struct {
	handler FrontendService
}

func (p *frontendServiceProcessorGetMasterToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceGetMasterTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getMasterToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceGetMasterTokenResult{}
	var retval *TGetMasterTokenResult_
	if retval, err2 = p.handler.GetMasterToken(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMasterToken: "+err2.Error())
		oprot.WriteMessageBegin("getMasterToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getMasterToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorGetBinlogLag struct {
	handler FrontendService
}

func (p *frontendServiceProcessorGetBinlogLag) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceGetBinlogLagArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBinlogLag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceGetBinlogLagResult{}
	var retval *TGetBinlogLagResult_
	if retval, err2 = p.handler.GetBinlogLag(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBinlogLag: "+err2.Error())
		oprot.WriteMessageBegin("getBinlogLag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBinlogLag", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorUpdateStatsCache struct {
	handler FrontendService
}

func (p *frontendServiceProcessorUpdateStatsCache) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceUpdateStatsCacheArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateStatsCache", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceUpdateStatsCacheResult{}
	var retval *status.TStatus
	if retval, err2 = p.handler.UpdateStatsCache(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateStatsCache: "+err2.Error())
		oprot.WriteMessageBegin("updateStatsCache", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateStatsCache", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorGetAutoIncrementRange struct {
	handler FrontendService
}

func (p *frontendServiceProcessorGetAutoIncrementRange) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceGetAutoIncrementRangeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAutoIncrementRange", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceGetAutoIncrementRangeResult{}
	var retval *TAutoIncrementRangeResult_
	if retval, err2 = p.handler.GetAutoIncrementRange(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAutoIncrementRange: "+err2.Error())
		oprot.WriteMessageBegin("getAutoIncrementRange", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAutoIncrementRange", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorCreatePartition struct {
	handler FrontendService
}

func (p *frontendServiceProcessorCreatePartition) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceCreatePartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createPartition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceCreatePartitionResult{}
	var retval *TCreatePartitionResult_
	if retval, err2 = p.handler.CreatePartition(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createPartition: "+err2.Error())
		oprot.WriteMessageBegin("createPartition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createPartition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorReplacePartition struct {
	handler FrontendService
}

func (p *frontendServiceProcessorReplacePartition) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceReplacePartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("replacePartition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceReplacePartitionResult{}
	var retval *TReplacePartitionResult_
	if retval, err2 = p.handler.ReplacePartition(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing replacePartition: "+err2.Error())
		oprot.WriteMessageBegin("replacePartition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("replacePartition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorGetMeta struct {
	handler FrontendService
}

func (p *frontendServiceProcessorGetMeta) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceGetMetaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getMeta", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceGetMetaResult{}
	var retval *TGetMetaResult_
	if retval, err2 = p.handler.GetMeta(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMeta: "+err2.Error())
		oprot.WriteMessageBegin("getMeta", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getMeta", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorGetBackendMeta struct {
	handler FrontendService
}

func (p *frontendServiceProcessorGetBackendMeta) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceGetBackendMetaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBackendMeta", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceGetBackendMetaResult{}
	var retval *TGetBackendMetaResult_
	if retval, err2 = p.handler.GetBackendMeta(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBackendMeta: "+err2.Error())
		oprot.WriteMessageBegin("getBackendMeta", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBackendMeta", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorGetColumnInfo struct {
	handler FrontendService
}

func (p *frontendServiceProcessorGetColumnInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceGetColumnInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getColumnInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceGetColumnInfoResult{}
	var retval *TGetColumnInfoResult_
	if retval, err2 = p.handler.GetColumnInfo(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getColumnInfo: "+err2.Error())
		oprot.WriteMessageBegin("getColumnInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getColumnInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorInvalidateStatsCache struct {
	handler FrontendService
}

func (p *frontendServiceProcessorInvalidateStatsCache) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceInvalidateStatsCacheArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("invalidateStatsCache", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceInvalidateStatsCacheResult{}
	var retval *status.TStatus
	if retval, err2 = p.handler.InvalidateStatsCache(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing invalidateStatsCache: "+err2.Error())
		oprot.WriteMessageBegin("invalidateStatsCache", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("invalidateStatsCache", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorShowProcessList struct {
	handler FrontendService
}

func (p *frontendServiceProcessorShowProcessList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceShowProcessListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("showProcessList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceShowProcessListResult{}
	var retval *TShowProcessListResult_
	if retval, err2 = p.handler.ShowProcessList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing showProcessList: "+err2.Error())
		oprot.WriteMessageBegin("showProcessList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("showProcessList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorReportCommitTxnResult_ struct {
	handler FrontendService
}

func (p *frontendServiceProcessorReportCommitTxnResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceReportCommitTxnResultArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportCommitTxnResult", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceReportCommitTxnResultResult{}
	var retval *status.TStatus
	if retval, err2 = p.handler.ReportCommitTxnResult_(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportCommitTxnResult: "+err2.Error())
		oprot.WriteMessageBegin("reportCommitTxnResult", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("reportCommitTxnResult", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorShowUser struct {
	handler FrontendService
}

func (p *frontendServiceProcessorShowUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceShowUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("showUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceShowUserResult{}
	var retval *TShowUserResult_
	if retval, err2 = p.handler.ShowUser(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing showUser: "+err2.Error())
		oprot.WriteMessageBegin("showUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("showUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorSyncQueryColumns struct {
	handler FrontendService
}

func (p *frontendServiceProcessorSyncQueryColumns) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceSyncQueryColumnsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("syncQueryColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceSyncQueryColumnsResult{}
	var retval *status.TStatus
	if retval, err2 = p.handler.SyncQueryColumns(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing syncQueryColumns: "+err2.Error())
		oprot.WriteMessageBegin("syncQueryColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("syncQueryColumns", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorFetchSplitBatch struct {
	handler FrontendService
}

func (p *frontendServiceProcessorFetchSplitBatch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceFetchSplitBatchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchSplitBatch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceFetchSplitBatchResult{}
	var retval *TFetchSplitBatchResult_
	if retval, err2 = p.handler.FetchSplitBatch(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchSplitBatch: "+err2.Error())
		oprot.WriteMessageBegin("fetchSplitBatch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("fetchSplitBatch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorUpdatePartitionStatsCache struct {
	handler FrontendService
}

func (p *frontendServiceProcessorUpdatePartitionStatsCache) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceUpdatePartitionStatsCacheArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updatePartitionStatsCache", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceUpdatePartitionStatsCacheResult{}
	var retval *status.TStatus
	if retval, err2 = p.handler.UpdatePartitionStatsCache(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updatePartitionStatsCache: "+err2.Error())
		oprot.WriteMessageBegin("updatePartitionStatsCache", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updatePartitionStatsCache", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type frontendServiceProcessorFetchRunningQueries struct {
	handler FrontendService
}

func (p *frontendServiceProcessorFetchRunningQueries) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FrontendServiceFetchRunningQueriesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchRunningQueries", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FrontendServiceFetchRunningQueriesResult{}
	var retval *TFetchRunningQueriesResult_
	if retval, err2 = p.handler.FetchRunningQueries(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchRunningQueries: "+err2.Error())
		oprot.WriteMessageBegin("fetchRunningQueries", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("fetchRunningQueries", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type FrontendServiceGetDbNamesArgs struct {
	Params *TGetDbsParams `thrift:"params,1" frugal:"1,default,TGetDbsParams" json:"params"`
}

func NewFrontendServiceGetDbNamesArgs() *FrontendServiceGetDbNamesArgs {
	return &FrontendServiceGetDbNamesArgs{}
}

func (p *FrontendServiceGetDbNamesArgs) InitDefault() {
}

var FrontendServiceGetDbNamesArgs_Params_DEFAULT *TGetDbsParams

func (p *FrontendServiceGetDbNamesArgs) GetParams() (v *TGetDbsParams) {
	if !p.IsSetParams() {
		return FrontendServiceGetDbNamesArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *FrontendServiceGetDbNamesArgs) SetParams(val *TGetDbsParams) {
	p.Params = val
}

var fieldIDToName_FrontendServiceGetDbNamesArgs = map[int16]string{
	1: "params",
}

func (p *FrontendServiceGetDbNamesArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *FrontendServiceGetDbNamesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetDbNamesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetDbNamesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTGetDbsParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}

func (p *FrontendServiceGetDbNamesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getDbNames_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetDbNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceGetDbNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetDbNamesArgs(%+v)", *p)

}

func (p *FrontendServiceGetDbNamesArgs) DeepEqual(ano *FrontendServiceGetDbNamesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *FrontendServiceGetDbNamesArgs) Field1DeepEqual(src *TGetDbsParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetDbNamesResult struct {
	Success *TGetDbsResult_ `thrift:"success,0,optional" frugal:"0,optional,TGetDbsResult_" json:"success,omitempty"`
}

func NewFrontendServiceGetDbNamesResult() *FrontendServiceGetDbNamesResult {
	return &FrontendServiceGetDbNamesResult{}
}

func (p *FrontendServiceGetDbNamesResult) InitDefault() {
}

var FrontendServiceGetDbNamesResult_Success_DEFAULT *TGetDbsResult_

func (p *FrontendServiceGetDbNamesResult) GetSuccess() (v *TGetDbsResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceGetDbNamesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceGetDbNamesResult) SetSuccess(x interface{}) {
	p.Success = x.(*TGetDbsResult_)
}

var fieldIDToName_FrontendServiceGetDbNamesResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceGetDbNamesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceGetDbNamesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetDbNamesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetDbNamesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTGetDbsResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceGetDbNamesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getDbNames_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetDbNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceGetDbNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetDbNamesResult(%+v)", *p)

}

func (p *FrontendServiceGetDbNamesResult) DeepEqual(ano *FrontendServiceGetDbNamesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceGetDbNamesResult) Field0DeepEqual(src *TGetDbsResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetTableNamesArgs struct {
	Params *TGetTablesParams `thrift:"params,1" frugal:"1,default,TGetTablesParams" json:"params"`
}

func NewFrontendServiceGetTableNamesArgs() *FrontendServiceGetTableNamesArgs {
	return &FrontendServiceGetTableNamesArgs{}
}

func (p *FrontendServiceGetTableNamesArgs) InitDefault() {
}

var FrontendServiceGetTableNamesArgs_Params_DEFAULT *TGetTablesParams

func (p *FrontendServiceGetTableNamesArgs) GetParams() (v *TGetTablesParams) {
	if !p.IsSetParams() {
		return FrontendServiceGetTableNamesArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *FrontendServiceGetTableNamesArgs) SetParams(val *TGetTablesParams) {
	p.Params = val
}

var fieldIDToName_FrontendServiceGetTableNamesArgs = map[int16]string{
	1: "params",
}

func (p *FrontendServiceGetTableNamesArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *FrontendServiceGetTableNamesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetTableNamesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetTableNamesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTGetTablesParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}

func (p *FrontendServiceGetTableNamesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getTableNames_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetTableNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceGetTableNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetTableNamesArgs(%+v)", *p)

}

func (p *FrontendServiceGetTableNamesArgs) DeepEqual(ano *FrontendServiceGetTableNamesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *FrontendServiceGetTableNamesArgs) Field1DeepEqual(src *TGetTablesParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetTableNamesResult struct {
	Success *TGetTablesResult_ `thrift:"success,0,optional" frugal:"0,optional,TGetTablesResult_" json:"success,omitempty"`
}

func NewFrontendServiceGetTableNamesResult() *FrontendServiceGetTableNamesResult {
	return &FrontendServiceGetTableNamesResult{}
}

func (p *FrontendServiceGetTableNamesResult) InitDefault() {
}

var FrontendServiceGetTableNamesResult_Success_DEFAULT *TGetTablesResult_

func (p *FrontendServiceGetTableNamesResult) GetSuccess() (v *TGetTablesResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceGetTableNamesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceGetTableNamesResult) SetSuccess(x interface{}) {
	p.Success = x.(*TGetTablesResult_)
}

var fieldIDToName_FrontendServiceGetTableNamesResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceGetTableNamesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceGetTableNamesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetTableNamesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetTableNamesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTGetTablesResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceGetTableNamesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getTableNames_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetTableNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceGetTableNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetTableNamesResult(%+v)", *p)

}

func (p *FrontendServiceGetTableNamesResult) DeepEqual(ano *FrontendServiceGetTableNamesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceGetTableNamesResult) Field0DeepEqual(src *TGetTablesResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceDescribeTableArgs struct {
	Params *TDescribeTableParams `thrift:"params,1" frugal:"1,default,TDescribeTableParams" json:"params"`
}

func NewFrontendServiceDescribeTableArgs() *FrontendServiceDescribeTableArgs {
	return &FrontendServiceDescribeTableArgs{}
}

func (p *FrontendServiceDescribeTableArgs) InitDefault() {
}

var FrontendServiceDescribeTableArgs_Params_DEFAULT *TDescribeTableParams

func (p *FrontendServiceDescribeTableArgs) GetParams() (v *TDescribeTableParams) {
	if !p.IsSetParams() {
		return FrontendServiceDescribeTableArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *FrontendServiceDescribeTableArgs) SetParams(val *TDescribeTableParams) {
	p.Params = val
}

var fieldIDToName_FrontendServiceDescribeTableArgs = map[int16]string{
	1: "params",
}

func (p *FrontendServiceDescribeTableArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *FrontendServiceDescribeTableArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceDescribeTableArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceDescribeTableArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTDescribeTableParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}

func (p *FrontendServiceDescribeTableArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("describeTable_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceDescribeTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceDescribeTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceDescribeTableArgs(%+v)", *p)

}

func (p *FrontendServiceDescribeTableArgs) DeepEqual(ano *FrontendServiceDescribeTableArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *FrontendServiceDescribeTableArgs) Field1DeepEqual(src *TDescribeTableParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceDescribeTableResult struct {
	Success *TDescribeTableResult_ `thrift:"success,0,optional" frugal:"0,optional,TDescribeTableResult_" json:"success,omitempty"`
}

func NewFrontendServiceDescribeTableResult() *FrontendServiceDescribeTableResult {
	return &FrontendServiceDescribeTableResult{}
}

func (p *FrontendServiceDescribeTableResult) InitDefault() {
}

var FrontendServiceDescribeTableResult_Success_DEFAULT *TDescribeTableResult_

func (p *FrontendServiceDescribeTableResult) GetSuccess() (v *TDescribeTableResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceDescribeTableResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceDescribeTableResult) SetSuccess(x interface{}) {
	p.Success = x.(*TDescribeTableResult_)
}

var fieldIDToName_FrontendServiceDescribeTableResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceDescribeTableResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceDescribeTableResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceDescribeTableResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceDescribeTableResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTDescribeTableResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceDescribeTableResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("describeTable_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceDescribeTableResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceDescribeTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceDescribeTableResult(%+v)", *p)

}

func (p *FrontendServiceDescribeTableResult) DeepEqual(ano *FrontendServiceDescribeTableResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceDescribeTableResult) Field0DeepEqual(src *TDescribeTableResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceDescribeTablesArgs struct {
	Params *TDescribeTablesParams `thrift:"params,1" frugal:"1,default,TDescribeTablesParams" json:"params"`
}

func NewFrontendServiceDescribeTablesArgs() *FrontendServiceDescribeTablesArgs {
	return &FrontendServiceDescribeTablesArgs{}
}

func (p *FrontendServiceDescribeTablesArgs) InitDefault() {
}

var FrontendServiceDescribeTablesArgs_Params_DEFAULT *TDescribeTablesParams

func (p *FrontendServiceDescribeTablesArgs) GetParams() (v *TDescribeTablesParams) {
	if !p.IsSetParams() {
		return FrontendServiceDescribeTablesArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *FrontendServiceDescribeTablesArgs) SetParams(val *TDescribeTablesParams) {
	p.Params = val
}

var fieldIDToName_FrontendServiceDescribeTablesArgs = map[int16]string{
	1: "params",
}

func (p *FrontendServiceDescribeTablesArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *FrontendServiceDescribeTablesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceDescribeTablesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceDescribeTablesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTDescribeTablesParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}

func (p *FrontendServiceDescribeTablesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("describeTables_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceDescribeTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceDescribeTablesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceDescribeTablesArgs(%+v)", *p)

}

func (p *FrontendServiceDescribeTablesArgs) DeepEqual(ano *FrontendServiceDescribeTablesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *FrontendServiceDescribeTablesArgs) Field1DeepEqual(src *TDescribeTablesParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceDescribeTablesResult struct {
	Success *TDescribeTablesResult_ `thrift:"success,0,optional" frugal:"0,optional,TDescribeTablesResult_" json:"success,omitempty"`
}

func NewFrontendServiceDescribeTablesResult() *FrontendServiceDescribeTablesResult {
	return &FrontendServiceDescribeTablesResult{}
}

func (p *FrontendServiceDescribeTablesResult) InitDefault() {
}

var FrontendServiceDescribeTablesResult_Success_DEFAULT *TDescribeTablesResult_

func (p *FrontendServiceDescribeTablesResult) GetSuccess() (v *TDescribeTablesResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceDescribeTablesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceDescribeTablesResult) SetSuccess(x interface{}) {
	p.Success = x.(*TDescribeTablesResult_)
}

var fieldIDToName_FrontendServiceDescribeTablesResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceDescribeTablesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceDescribeTablesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceDescribeTablesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceDescribeTablesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTDescribeTablesResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceDescribeTablesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("describeTables_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceDescribeTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceDescribeTablesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceDescribeTablesResult(%+v)", *p)

}

func (p *FrontendServiceDescribeTablesResult) DeepEqual(ano *FrontendServiceDescribeTablesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceDescribeTablesResult) Field0DeepEqual(src *TDescribeTablesResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceShowVariablesArgs struct {
	Params *TShowVariableRequest `thrift:"params,1" frugal:"1,default,TShowVariableRequest" json:"params"`
}

func NewFrontendServiceShowVariablesArgs() *FrontendServiceShowVariablesArgs {
	return &FrontendServiceShowVariablesArgs{}
}

func (p *FrontendServiceShowVariablesArgs) InitDefault() {
}

var FrontendServiceShowVariablesArgs_Params_DEFAULT *TShowVariableRequest

func (p *FrontendServiceShowVariablesArgs) GetParams() (v *TShowVariableRequest) {
	if !p.IsSetParams() {
		return FrontendServiceShowVariablesArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *FrontendServiceShowVariablesArgs) SetParams(val *TShowVariableRequest) {
	p.Params = val
}

var fieldIDToName_FrontendServiceShowVariablesArgs = map[int16]string{
	1: "params",
}

func (p *FrontendServiceShowVariablesArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *FrontendServiceShowVariablesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceShowVariablesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceShowVariablesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTShowVariableRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}

func (p *FrontendServiceShowVariablesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("showVariables_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceShowVariablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceShowVariablesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceShowVariablesArgs(%+v)", *p)

}

func (p *FrontendServiceShowVariablesArgs) DeepEqual(ano *FrontendServiceShowVariablesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *FrontendServiceShowVariablesArgs) Field1DeepEqual(src *TShowVariableRequest) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceShowVariablesResult struct {
	Success *TShowVariableResult_ `thrift:"success,0,optional" frugal:"0,optional,TShowVariableResult_" json:"success,omitempty"`
}

func NewFrontendServiceShowVariablesResult() *FrontendServiceShowVariablesResult {
	return &FrontendServiceShowVariablesResult{}
}

func (p *FrontendServiceShowVariablesResult) InitDefault() {
}

var FrontendServiceShowVariablesResult_Success_DEFAULT *TShowVariableResult_

func (p *FrontendServiceShowVariablesResult) GetSuccess() (v *TShowVariableResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceShowVariablesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceShowVariablesResult) SetSuccess(x interface{}) {
	p.Success = x.(*TShowVariableResult_)
}

var fieldIDToName_FrontendServiceShowVariablesResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceShowVariablesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceShowVariablesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceShowVariablesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceShowVariablesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTShowVariableResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceShowVariablesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("showVariables_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceShowVariablesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceShowVariablesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceShowVariablesResult(%+v)", *p)

}

func (p *FrontendServiceShowVariablesResult) DeepEqual(ano *FrontendServiceShowVariablesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceShowVariablesResult) Field0DeepEqual(src *TShowVariableResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceReportExecStatusArgs struct {
	Params *TReportExecStatusParams `thrift:"params,1" frugal:"1,default,TReportExecStatusParams" json:"params"`
}

func NewFrontendServiceReportExecStatusArgs() *FrontendServiceReportExecStatusArgs {
	return &FrontendServiceReportExecStatusArgs{}
}

func (p *FrontendServiceReportExecStatusArgs) InitDefault() {
}

var FrontendServiceReportExecStatusArgs_Params_DEFAULT *TReportExecStatusParams

func (p *FrontendServiceReportExecStatusArgs) GetParams() (v *TReportExecStatusParams) {
	if !p.IsSetParams() {
		return FrontendServiceReportExecStatusArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *FrontendServiceReportExecStatusArgs) SetParams(val *TReportExecStatusParams) {
	p.Params = val
}

var fieldIDToName_FrontendServiceReportExecStatusArgs = map[int16]string{
	1: "params",
}

func (p *FrontendServiceReportExecStatusArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *FrontendServiceReportExecStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceReportExecStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceReportExecStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTReportExecStatusParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}

func (p *FrontendServiceReportExecStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("reportExecStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceReportExecStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceReportExecStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceReportExecStatusArgs(%+v)", *p)

}

func (p *FrontendServiceReportExecStatusArgs) DeepEqual(ano *FrontendServiceReportExecStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *FrontendServiceReportExecStatusArgs) Field1DeepEqual(src *TReportExecStatusParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceReportExecStatusResult struct {
	Success *TReportExecStatusResult_ `thrift:"success,0,optional" frugal:"0,optional,TReportExecStatusResult_" json:"success,omitempty"`
}

func NewFrontendServiceReportExecStatusResult() *FrontendServiceReportExecStatusResult {
	return &FrontendServiceReportExecStatusResult{}
}

func (p *FrontendServiceReportExecStatusResult) InitDefault() {
}

var FrontendServiceReportExecStatusResult_Success_DEFAULT *TReportExecStatusResult_

func (p *FrontendServiceReportExecStatusResult) GetSuccess() (v *TReportExecStatusResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceReportExecStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceReportExecStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*TReportExecStatusResult_)
}

var fieldIDToName_FrontendServiceReportExecStatusResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceReportExecStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceReportExecStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceReportExecStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceReportExecStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTReportExecStatusResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceReportExecStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("reportExecStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceReportExecStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceReportExecStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceReportExecStatusResult(%+v)", *p)

}

func (p *FrontendServiceReportExecStatusResult) DeepEqual(ano *FrontendServiceReportExecStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceReportExecStatusResult) Field0DeepEqual(src *TReportExecStatusResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceFinishTaskArgs struct {
	Request *masterservice.TFinishTaskRequest `thrift:"request,1" frugal:"1,default,masterservice.TFinishTaskRequest" json:"request"`
}

func NewFrontendServiceFinishTaskArgs() *FrontendServiceFinishTaskArgs {
	return &FrontendServiceFinishTaskArgs{}
}

func (p *FrontendServiceFinishTaskArgs) InitDefault() {
}

var FrontendServiceFinishTaskArgs_Request_DEFAULT *masterservice.TFinishTaskRequest

func (p *FrontendServiceFinishTaskArgs) GetRequest() (v *masterservice.TFinishTaskRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceFinishTaskArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceFinishTaskArgs) SetRequest(val *masterservice.TFinishTaskRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceFinishTaskArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceFinishTaskArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceFinishTaskArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceFinishTaskArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceFinishTaskArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := masterservice.NewTFinishTaskRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceFinishTaskArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("finishTask_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceFinishTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceFinishTaskArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceFinishTaskArgs(%+v)", *p)

}

func (p *FrontendServiceFinishTaskArgs) DeepEqual(ano *FrontendServiceFinishTaskArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceFinishTaskArgs) Field1DeepEqual(src *masterservice.TFinishTaskRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceFinishTaskResult struct {
	Success *masterservice.TMasterResult_ `thrift:"success,0,optional" frugal:"0,optional,masterservice.TMasterResult_" json:"success,omitempty"`
}

func NewFrontendServiceFinishTaskResult() *FrontendServiceFinishTaskResult {
	return &FrontendServiceFinishTaskResult{}
}

func (p *FrontendServiceFinishTaskResult) InitDefault() {
}

var FrontendServiceFinishTaskResult_Success_DEFAULT *masterservice.TMasterResult_

func (p *FrontendServiceFinishTaskResult) GetSuccess() (v *masterservice.TMasterResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceFinishTaskResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceFinishTaskResult) SetSuccess(x interface{}) {
	p.Success = x.(*masterservice.TMasterResult_)
}

var fieldIDToName_FrontendServiceFinishTaskResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceFinishTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceFinishTaskResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceFinishTaskResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceFinishTaskResult) ReadField0(iprot thrift.TProtocol) error {
	_field := masterservice.NewTMasterResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceFinishTaskResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("finishTask_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceFinishTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceFinishTaskResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceFinishTaskResult(%+v)", *p)

}

func (p *FrontendServiceFinishTaskResult) DeepEqual(ano *FrontendServiceFinishTaskResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceFinishTaskResult) Field0DeepEqual(src *masterservice.TMasterResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceReportArgs struct {
	Request *masterservice.TReportRequest `thrift:"request,1" frugal:"1,default,masterservice.TReportRequest" json:"request"`
}

func NewFrontendServiceReportArgs() *FrontendServiceReportArgs {
	return &FrontendServiceReportArgs{}
}

func (p *FrontendServiceReportArgs) InitDefault() {
}

var FrontendServiceReportArgs_Request_DEFAULT *masterservice.TReportRequest

func (p *FrontendServiceReportArgs) GetRequest() (v *masterservice.TReportRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceReportArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceReportArgs) SetRequest(val *masterservice.TReportRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceReportArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceReportArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceReportArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceReportArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceReportArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := masterservice.NewTReportRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceReportArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("report_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceReportArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceReportArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceReportArgs(%+v)", *p)

}

func (p *FrontendServiceReportArgs) DeepEqual(ano *FrontendServiceReportArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceReportArgs) Field1DeepEqual(src *masterservice.TReportRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceReportResult struct {
	Success *masterservice.TMasterResult_ `thrift:"success,0,optional" frugal:"0,optional,masterservice.TMasterResult_" json:"success,omitempty"`
}

func NewFrontendServiceReportResult() *FrontendServiceReportResult {
	return &FrontendServiceReportResult{}
}

func (p *FrontendServiceReportResult) InitDefault() {
}

var FrontendServiceReportResult_Success_DEFAULT *masterservice.TMasterResult_

func (p *FrontendServiceReportResult) GetSuccess() (v *masterservice.TMasterResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceReportResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceReportResult) SetSuccess(x interface{}) {
	p.Success = x.(*masterservice.TMasterResult_)
}

var fieldIDToName_FrontendServiceReportResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceReportResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceReportResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceReportResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceReportResult) ReadField0(iprot thrift.TProtocol) error {
	_field := masterservice.NewTMasterResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceReportResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("report_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceReportResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceReportResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceReportResult(%+v)", *p)

}

func (p *FrontendServiceReportResult) DeepEqual(ano *FrontendServiceReportResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceReportResult) Field0DeepEqual(src *masterservice.TMasterResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceFetchResourceArgs struct {
}

func NewFrontendServiceFetchResourceArgs() *FrontendServiceFetchResourceArgs {
	return &FrontendServiceFetchResourceArgs{}
}

func (p *FrontendServiceFetchResourceArgs) InitDefault() {
}

var fieldIDToName_FrontendServiceFetchResourceArgs = map[int16]string{}

func (p *FrontendServiceFetchResourceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceFetchResourceArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("fetchResource_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceFetchResourceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceFetchResourceArgs(%+v)", *p)

}

func (p *FrontendServiceFetchResourceArgs) DeepEqual(ano *FrontendServiceFetchResourceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type FrontendServiceFetchResourceResult struct {
	Success *masterservice.TFetchResourceResult_ `thrift:"success,0,optional" frugal:"0,optional,masterservice.TFetchResourceResult_" json:"success,omitempty"`
}

func NewFrontendServiceFetchResourceResult() *FrontendServiceFetchResourceResult {
	return &FrontendServiceFetchResourceResult{}
}

func (p *FrontendServiceFetchResourceResult) InitDefault() {
}

var FrontendServiceFetchResourceResult_Success_DEFAULT *masterservice.TFetchResourceResult_

func (p *FrontendServiceFetchResourceResult) GetSuccess() (v *masterservice.TFetchResourceResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceFetchResourceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceFetchResourceResult) SetSuccess(x interface{}) {
	p.Success = x.(*masterservice.TFetchResourceResult_)
}

var fieldIDToName_FrontendServiceFetchResourceResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceFetchResourceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceFetchResourceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceFetchResourceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceFetchResourceResult) ReadField0(iprot thrift.TProtocol) error {
	_field := masterservice.NewTFetchResourceResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceFetchResourceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("fetchResource_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceFetchResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceFetchResourceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceFetchResourceResult(%+v)", *p)

}

func (p *FrontendServiceFetchResourceResult) DeepEqual(ano *FrontendServiceFetchResourceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceFetchResourceResult) Field0DeepEqual(src *masterservice.TFetchResourceResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceForwardArgs struct {
	Params *TMasterOpRequest `thrift:"params,1" frugal:"1,default,TMasterOpRequest" json:"params"`
}

func NewFrontendServiceForwardArgs() *FrontendServiceForwardArgs {
	return &FrontendServiceForwardArgs{}
}

func (p *FrontendServiceForwardArgs) InitDefault() {
}

var FrontendServiceForwardArgs_Params_DEFAULT *TMasterOpRequest

func (p *FrontendServiceForwardArgs) GetParams() (v *TMasterOpRequest) {
	if !p.IsSetParams() {
		return FrontendServiceForwardArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *FrontendServiceForwardArgs) SetParams(val *TMasterOpRequest) {
	p.Params = val
}

var fieldIDToName_FrontendServiceForwardArgs = map[int16]string{
	1: "params",
}

func (p *FrontendServiceForwardArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *FrontendServiceForwardArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceForwardArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceForwardArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTMasterOpRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}

func (p *FrontendServiceForwardArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("forward_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceForwardArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceForwardArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceForwardArgs(%+v)", *p)

}

func (p *FrontendServiceForwardArgs) DeepEqual(ano *FrontendServiceForwardArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *FrontendServiceForwardArgs) Field1DeepEqual(src *TMasterOpRequest) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceForwardResult struct {
	Success *TMasterOpResult_ `thrift:"success,0,optional" frugal:"0,optional,TMasterOpResult_" json:"success,omitempty"`
}

func NewFrontendServiceForwardResult() *FrontendServiceForwardResult {
	return &FrontendServiceForwardResult{}
}

func (p *FrontendServiceForwardResult) InitDefault() {
}

var FrontendServiceForwardResult_Success_DEFAULT *TMasterOpResult_

func (p *FrontendServiceForwardResult) GetSuccess() (v *TMasterOpResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceForwardResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceForwardResult) SetSuccess(x interface{}) {
	p.Success = x.(*TMasterOpResult_)
}

var fieldIDToName_FrontendServiceForwardResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceForwardResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceForwardResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceForwardResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceForwardResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTMasterOpResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceForwardResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("forward_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceForwardResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceForwardResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceForwardResult(%+v)", *p)

}

func (p *FrontendServiceForwardResult) DeepEqual(ano *FrontendServiceForwardResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceForwardResult) Field0DeepEqual(src *TMasterOpResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceListTableStatusArgs struct {
	Params *TGetTablesParams `thrift:"params,1" frugal:"1,default,TGetTablesParams" json:"params"`
}

func NewFrontendServiceListTableStatusArgs() *FrontendServiceListTableStatusArgs {
	return &FrontendServiceListTableStatusArgs{}
}

func (p *FrontendServiceListTableStatusArgs) InitDefault() {
}

var FrontendServiceListTableStatusArgs_Params_DEFAULT *TGetTablesParams

func (p *FrontendServiceListTableStatusArgs) GetParams() (v *TGetTablesParams) {
	if !p.IsSetParams() {
		return FrontendServiceListTableStatusArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *FrontendServiceListTableStatusArgs) SetParams(val *TGetTablesParams) {
	p.Params = val
}

var fieldIDToName_FrontendServiceListTableStatusArgs = map[int16]string{
	1: "params",
}

func (p *FrontendServiceListTableStatusArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *FrontendServiceListTableStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceListTableStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceListTableStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTGetTablesParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}

func (p *FrontendServiceListTableStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("listTableStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceListTableStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceListTableStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceListTableStatusArgs(%+v)", *p)

}

func (p *FrontendServiceListTableStatusArgs) DeepEqual(ano *FrontendServiceListTableStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *FrontendServiceListTableStatusArgs) Field1DeepEqual(src *TGetTablesParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceListTableStatusResult struct {
	Success *TListTableStatusResult_ `thrift:"success,0,optional" frugal:"0,optional,TListTableStatusResult_" json:"success,omitempty"`
}

func NewFrontendServiceListTableStatusResult() *FrontendServiceListTableStatusResult {
	return &FrontendServiceListTableStatusResult{}
}

func (p *FrontendServiceListTableStatusResult) InitDefault() {
}

var FrontendServiceListTableStatusResult_Success_DEFAULT *TListTableStatusResult_

func (p *FrontendServiceListTableStatusResult) GetSuccess() (v *TListTableStatusResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceListTableStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceListTableStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*TListTableStatusResult_)
}

var fieldIDToName_FrontendServiceListTableStatusResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceListTableStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceListTableStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceListTableStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceListTableStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTListTableStatusResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceListTableStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("listTableStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceListTableStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceListTableStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceListTableStatusResult(%+v)", *p)

}

func (p *FrontendServiceListTableStatusResult) DeepEqual(ano *FrontendServiceListTableStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceListTableStatusResult) Field0DeepEqual(src *TListTableStatusResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceListTableMetadataNameIdsArgs struct {
	Params *TGetTablesParams `thrift:"params,1" frugal:"1,default,TGetTablesParams" json:"params"`
}

func NewFrontendServiceListTableMetadataNameIdsArgs() *FrontendServiceListTableMetadataNameIdsArgs {
	return &FrontendServiceListTableMetadataNameIdsArgs{}
}

func (p *FrontendServiceListTableMetadataNameIdsArgs) InitDefault() {
}

var FrontendServiceListTableMetadataNameIdsArgs_Params_DEFAULT *TGetTablesParams

func (p *FrontendServiceListTableMetadataNameIdsArgs) GetParams() (v *TGetTablesParams) {
	if !p.IsSetParams() {
		return FrontendServiceListTableMetadataNameIdsArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *FrontendServiceListTableMetadataNameIdsArgs) SetParams(val *TGetTablesParams) {
	p.Params = val
}

var fieldIDToName_FrontendServiceListTableMetadataNameIdsArgs = map[int16]string{
	1: "params",
}

func (p *FrontendServiceListTableMetadataNameIdsArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *FrontendServiceListTableMetadataNameIdsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceListTableMetadataNameIdsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceListTableMetadataNameIdsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTGetTablesParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}

func (p *FrontendServiceListTableMetadataNameIdsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("listTableMetadataNameIds_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceListTableMetadataNameIdsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceListTableMetadataNameIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceListTableMetadataNameIdsArgs(%+v)", *p)

}

func (p *FrontendServiceListTableMetadataNameIdsArgs) DeepEqual(ano *FrontendServiceListTableMetadataNameIdsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *FrontendServiceListTableMetadataNameIdsArgs) Field1DeepEqual(src *TGetTablesParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceListTableMetadataNameIdsResult struct {
	Success *TListTableMetadataNameIdsResult_ `thrift:"success,0,optional" frugal:"0,optional,TListTableMetadataNameIdsResult_" json:"success,omitempty"`
}

func NewFrontendServiceListTableMetadataNameIdsResult() *FrontendServiceListTableMetadataNameIdsResult {
	return &FrontendServiceListTableMetadataNameIdsResult{}
}

func (p *FrontendServiceListTableMetadataNameIdsResult) InitDefault() {
}

var FrontendServiceListTableMetadataNameIdsResult_Success_DEFAULT *TListTableMetadataNameIdsResult_

func (p *FrontendServiceListTableMetadataNameIdsResult) GetSuccess() (v *TListTableMetadataNameIdsResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceListTableMetadataNameIdsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceListTableMetadataNameIdsResult) SetSuccess(x interface{}) {
	p.Success = x.(*TListTableMetadataNameIdsResult_)
}

var fieldIDToName_FrontendServiceListTableMetadataNameIdsResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceListTableMetadataNameIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceListTableMetadataNameIdsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceListTableMetadataNameIdsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceListTableMetadataNameIdsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTListTableMetadataNameIdsResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceListTableMetadataNameIdsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("listTableMetadataNameIds_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceListTableMetadataNameIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceListTableMetadataNameIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceListTableMetadataNameIdsResult(%+v)", *p)

}

func (p *FrontendServiceListTableMetadataNameIdsResult) DeepEqual(ano *FrontendServiceListTableMetadataNameIdsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceListTableMetadataNameIdsResult) Field0DeepEqual(src *TListTableMetadataNameIdsResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceListTablePrivilegeStatusArgs struct {
	Params *TGetTablesParams `thrift:"params,1" frugal:"1,default,TGetTablesParams" json:"params"`
}

func NewFrontendServiceListTablePrivilegeStatusArgs() *FrontendServiceListTablePrivilegeStatusArgs {
	return &FrontendServiceListTablePrivilegeStatusArgs{}
}

func (p *FrontendServiceListTablePrivilegeStatusArgs) InitDefault() {
}

var FrontendServiceListTablePrivilegeStatusArgs_Params_DEFAULT *TGetTablesParams

func (p *FrontendServiceListTablePrivilegeStatusArgs) GetParams() (v *TGetTablesParams) {
	if !p.IsSetParams() {
		return FrontendServiceListTablePrivilegeStatusArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *FrontendServiceListTablePrivilegeStatusArgs) SetParams(val *TGetTablesParams) {
	p.Params = val
}

var fieldIDToName_FrontendServiceListTablePrivilegeStatusArgs = map[int16]string{
	1: "params",
}

func (p *FrontendServiceListTablePrivilegeStatusArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *FrontendServiceListTablePrivilegeStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceListTablePrivilegeStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceListTablePrivilegeStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTGetTablesParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}

func (p *FrontendServiceListTablePrivilegeStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("listTablePrivilegeStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceListTablePrivilegeStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceListTablePrivilegeStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceListTablePrivilegeStatusArgs(%+v)", *p)

}

func (p *FrontendServiceListTablePrivilegeStatusArgs) DeepEqual(ano *FrontendServiceListTablePrivilegeStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *FrontendServiceListTablePrivilegeStatusArgs) Field1DeepEqual(src *TGetTablesParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceListTablePrivilegeStatusResult struct {
	Success *TListPrivilegesResult_ `thrift:"success,0,optional" frugal:"0,optional,TListPrivilegesResult_" json:"success,omitempty"`
}

func NewFrontendServiceListTablePrivilegeStatusResult() *FrontendServiceListTablePrivilegeStatusResult {
	return &FrontendServiceListTablePrivilegeStatusResult{}
}

func (p *FrontendServiceListTablePrivilegeStatusResult) InitDefault() {
}

var FrontendServiceListTablePrivilegeStatusResult_Success_DEFAULT *TListPrivilegesResult_

func (p *FrontendServiceListTablePrivilegeStatusResult) GetSuccess() (v *TListPrivilegesResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceListTablePrivilegeStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceListTablePrivilegeStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*TListPrivilegesResult_)
}

var fieldIDToName_FrontendServiceListTablePrivilegeStatusResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceListTablePrivilegeStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceListTablePrivilegeStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceListTablePrivilegeStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceListTablePrivilegeStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTListPrivilegesResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceListTablePrivilegeStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("listTablePrivilegeStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceListTablePrivilegeStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceListTablePrivilegeStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceListTablePrivilegeStatusResult(%+v)", *p)

}

func (p *FrontendServiceListTablePrivilegeStatusResult) DeepEqual(ano *FrontendServiceListTablePrivilegeStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceListTablePrivilegeStatusResult) Field0DeepEqual(src *TListPrivilegesResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceListSchemaPrivilegeStatusArgs struct {
	Params *TGetTablesParams `thrift:"params,1" frugal:"1,default,TGetTablesParams" json:"params"`
}

func NewFrontendServiceListSchemaPrivilegeStatusArgs() *FrontendServiceListSchemaPrivilegeStatusArgs {
	return &FrontendServiceListSchemaPrivilegeStatusArgs{}
}

func (p *FrontendServiceListSchemaPrivilegeStatusArgs) InitDefault() {
}

var FrontendServiceListSchemaPrivilegeStatusArgs_Params_DEFAULT *TGetTablesParams

func (p *FrontendServiceListSchemaPrivilegeStatusArgs) GetParams() (v *TGetTablesParams) {
	if !p.IsSetParams() {
		return FrontendServiceListSchemaPrivilegeStatusArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *FrontendServiceListSchemaPrivilegeStatusArgs) SetParams(val *TGetTablesParams) {
	p.Params = val
}

var fieldIDToName_FrontendServiceListSchemaPrivilegeStatusArgs = map[int16]string{
	1: "params",
}

func (p *FrontendServiceListSchemaPrivilegeStatusArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *FrontendServiceListSchemaPrivilegeStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceListSchemaPrivilegeStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceListSchemaPrivilegeStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTGetTablesParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}

func (p *FrontendServiceListSchemaPrivilegeStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("listSchemaPrivilegeStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceListSchemaPrivilegeStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceListSchemaPrivilegeStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceListSchemaPrivilegeStatusArgs(%+v)", *p)

}

func (p *FrontendServiceListSchemaPrivilegeStatusArgs) DeepEqual(ano *FrontendServiceListSchemaPrivilegeStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *FrontendServiceListSchemaPrivilegeStatusArgs) Field1DeepEqual(src *TGetTablesParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceListSchemaPrivilegeStatusResult struct {
	Success *TListPrivilegesResult_ `thrift:"success,0,optional" frugal:"0,optional,TListPrivilegesResult_" json:"success,omitempty"`
}

func NewFrontendServiceListSchemaPrivilegeStatusResult() *FrontendServiceListSchemaPrivilegeStatusResult {
	return &FrontendServiceListSchemaPrivilegeStatusResult{}
}

func (p *FrontendServiceListSchemaPrivilegeStatusResult) InitDefault() {
}

var FrontendServiceListSchemaPrivilegeStatusResult_Success_DEFAULT *TListPrivilegesResult_

func (p *FrontendServiceListSchemaPrivilegeStatusResult) GetSuccess() (v *TListPrivilegesResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceListSchemaPrivilegeStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceListSchemaPrivilegeStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*TListPrivilegesResult_)
}

var fieldIDToName_FrontendServiceListSchemaPrivilegeStatusResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceListSchemaPrivilegeStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceListSchemaPrivilegeStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceListSchemaPrivilegeStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceListSchemaPrivilegeStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTListPrivilegesResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceListSchemaPrivilegeStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("listSchemaPrivilegeStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceListSchemaPrivilegeStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceListSchemaPrivilegeStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceListSchemaPrivilegeStatusResult(%+v)", *p)

}

func (p *FrontendServiceListSchemaPrivilegeStatusResult) DeepEqual(ano *FrontendServiceListSchemaPrivilegeStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceListSchemaPrivilegeStatusResult) Field0DeepEqual(src *TListPrivilegesResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceListUserPrivilegeStatusArgs struct {
	Params *TGetTablesParams `thrift:"params,1" frugal:"1,default,TGetTablesParams" json:"params"`
}

func NewFrontendServiceListUserPrivilegeStatusArgs() *FrontendServiceListUserPrivilegeStatusArgs {
	return &FrontendServiceListUserPrivilegeStatusArgs{}
}

func (p *FrontendServiceListUserPrivilegeStatusArgs) InitDefault() {
}

var FrontendServiceListUserPrivilegeStatusArgs_Params_DEFAULT *TGetTablesParams

func (p *FrontendServiceListUserPrivilegeStatusArgs) GetParams() (v *TGetTablesParams) {
	if !p.IsSetParams() {
		return FrontendServiceListUserPrivilegeStatusArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *FrontendServiceListUserPrivilegeStatusArgs) SetParams(val *TGetTablesParams) {
	p.Params = val
}

var fieldIDToName_FrontendServiceListUserPrivilegeStatusArgs = map[int16]string{
	1: "params",
}

func (p *FrontendServiceListUserPrivilegeStatusArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *FrontendServiceListUserPrivilegeStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceListUserPrivilegeStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceListUserPrivilegeStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTGetTablesParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}

func (p *FrontendServiceListUserPrivilegeStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("listUserPrivilegeStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceListUserPrivilegeStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceListUserPrivilegeStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceListUserPrivilegeStatusArgs(%+v)", *p)

}

func (p *FrontendServiceListUserPrivilegeStatusArgs) DeepEqual(ano *FrontendServiceListUserPrivilegeStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *FrontendServiceListUserPrivilegeStatusArgs) Field1DeepEqual(src *TGetTablesParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceListUserPrivilegeStatusResult struct {
	Success *TListPrivilegesResult_ `thrift:"success,0,optional" frugal:"0,optional,TListPrivilegesResult_" json:"success,omitempty"`
}

func NewFrontendServiceListUserPrivilegeStatusResult() *FrontendServiceListUserPrivilegeStatusResult {
	return &FrontendServiceListUserPrivilegeStatusResult{}
}

func (p *FrontendServiceListUserPrivilegeStatusResult) InitDefault() {
}

var FrontendServiceListUserPrivilegeStatusResult_Success_DEFAULT *TListPrivilegesResult_

func (p *FrontendServiceListUserPrivilegeStatusResult) GetSuccess() (v *TListPrivilegesResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceListUserPrivilegeStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceListUserPrivilegeStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*TListPrivilegesResult_)
}

var fieldIDToName_FrontendServiceListUserPrivilegeStatusResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceListUserPrivilegeStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceListUserPrivilegeStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceListUserPrivilegeStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceListUserPrivilegeStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTListPrivilegesResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceListUserPrivilegeStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("listUserPrivilegeStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceListUserPrivilegeStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceListUserPrivilegeStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceListUserPrivilegeStatusResult(%+v)", *p)

}

func (p *FrontendServiceListUserPrivilegeStatusResult) DeepEqual(ano *FrontendServiceListUserPrivilegeStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceListUserPrivilegeStatusResult) Field0DeepEqual(src *TListPrivilegesResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceUpdateExportTaskStatusArgs struct {
	Request *TUpdateExportTaskStatusRequest `thrift:"request,1" frugal:"1,default,TUpdateExportTaskStatusRequest" json:"request"`
}

func NewFrontendServiceUpdateExportTaskStatusArgs() *FrontendServiceUpdateExportTaskStatusArgs {
	return &FrontendServiceUpdateExportTaskStatusArgs{}
}

func (p *FrontendServiceUpdateExportTaskStatusArgs) InitDefault() {
}

var FrontendServiceUpdateExportTaskStatusArgs_Request_DEFAULT *TUpdateExportTaskStatusRequest

func (p *FrontendServiceUpdateExportTaskStatusArgs) GetRequest() (v *TUpdateExportTaskStatusRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceUpdateExportTaskStatusArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceUpdateExportTaskStatusArgs) SetRequest(val *TUpdateExportTaskStatusRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceUpdateExportTaskStatusArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceUpdateExportTaskStatusArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceUpdateExportTaskStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceUpdateExportTaskStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceUpdateExportTaskStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTUpdateExportTaskStatusRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceUpdateExportTaskStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("updateExportTaskStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceUpdateExportTaskStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceUpdateExportTaskStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceUpdateExportTaskStatusArgs(%+v)", *p)

}

func (p *FrontendServiceUpdateExportTaskStatusArgs) DeepEqual(ano *FrontendServiceUpdateExportTaskStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceUpdateExportTaskStatusArgs) Field1DeepEqual(src *TUpdateExportTaskStatusRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceUpdateExportTaskStatusResult struct {
	Success *TFeResult_ `thrift:"success,0,optional" frugal:"0,optional,TFeResult_" json:"success,omitempty"`
}

func NewFrontendServiceUpdateExportTaskStatusResult() *FrontendServiceUpdateExportTaskStatusResult {
	return &FrontendServiceUpdateExportTaskStatusResult{}
}

func (p *FrontendServiceUpdateExportTaskStatusResult) InitDefault() {
}

var FrontendServiceUpdateExportTaskStatusResult_Success_DEFAULT *TFeResult_

func (p *FrontendServiceUpdateExportTaskStatusResult) GetSuccess() (v *TFeResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceUpdateExportTaskStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceUpdateExportTaskStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*TFeResult_)
}

var fieldIDToName_FrontendServiceUpdateExportTaskStatusResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceUpdateExportTaskStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceUpdateExportTaskStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceUpdateExportTaskStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceUpdateExportTaskStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTFeResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceUpdateExportTaskStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("updateExportTaskStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceUpdateExportTaskStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceUpdateExportTaskStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceUpdateExportTaskStatusResult(%+v)", *p)

}

func (p *FrontendServiceUpdateExportTaskStatusResult) DeepEqual(ano *FrontendServiceUpdateExportTaskStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceUpdateExportTaskStatusResult) Field0DeepEqual(src *TFeResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceLoadTxnBeginArgs struct {
	Request *TLoadTxnBeginRequest `thrift:"request,1" frugal:"1,default,TLoadTxnBeginRequest" json:"request"`
}

func NewFrontendServiceLoadTxnBeginArgs() *FrontendServiceLoadTxnBeginArgs {
	return &FrontendServiceLoadTxnBeginArgs{}
}

func (p *FrontendServiceLoadTxnBeginArgs) InitDefault() {
}

var FrontendServiceLoadTxnBeginArgs_Request_DEFAULT *TLoadTxnBeginRequest

func (p *FrontendServiceLoadTxnBeginArgs) GetRequest() (v *TLoadTxnBeginRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceLoadTxnBeginArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceLoadTxnBeginArgs) SetRequest(val *TLoadTxnBeginRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceLoadTxnBeginArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceLoadTxnBeginArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceLoadTxnBeginArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceLoadTxnBeginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxnBeginArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTLoadTxnBeginRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceLoadTxnBeginArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("loadTxnBegin_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxnBeginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceLoadTxnBeginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceLoadTxnBeginArgs(%+v)", *p)

}

func (p *FrontendServiceLoadTxnBeginArgs) DeepEqual(ano *FrontendServiceLoadTxnBeginArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceLoadTxnBeginArgs) Field1DeepEqual(src *TLoadTxnBeginRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceLoadTxnBeginResult struct {
	Success *TLoadTxnBeginResult_ `thrift:"success,0,optional" frugal:"0,optional,TLoadTxnBeginResult_" json:"success,omitempty"`
}

func NewFrontendServiceLoadTxnBeginResult() *FrontendServiceLoadTxnBeginResult {
	return &FrontendServiceLoadTxnBeginResult{}
}

func (p *FrontendServiceLoadTxnBeginResult) InitDefault() {
}

var FrontendServiceLoadTxnBeginResult_Success_DEFAULT *TLoadTxnBeginResult_

func (p *FrontendServiceLoadTxnBeginResult) GetSuccess() (v *TLoadTxnBeginResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceLoadTxnBeginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceLoadTxnBeginResult) SetSuccess(x interface{}) {
	p.Success = x.(*TLoadTxnBeginResult_)
}

var fieldIDToName_FrontendServiceLoadTxnBeginResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceLoadTxnBeginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceLoadTxnBeginResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceLoadTxnBeginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxnBeginResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTLoadTxnBeginResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceLoadTxnBeginResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("loadTxnBegin_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxnBeginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceLoadTxnBeginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceLoadTxnBeginResult(%+v)", *p)

}

func (p *FrontendServiceLoadTxnBeginResult) DeepEqual(ano *FrontendServiceLoadTxnBeginResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceLoadTxnBeginResult) Field0DeepEqual(src *TLoadTxnBeginResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceLoadTxnPreCommitArgs struct {
	Request *TLoadTxnCommitRequest `thrift:"request,1" frugal:"1,default,TLoadTxnCommitRequest" json:"request"`
}

func NewFrontendServiceLoadTxnPreCommitArgs() *FrontendServiceLoadTxnPreCommitArgs {
	return &FrontendServiceLoadTxnPreCommitArgs{}
}

func (p *FrontendServiceLoadTxnPreCommitArgs) InitDefault() {
}

var FrontendServiceLoadTxnPreCommitArgs_Request_DEFAULT *TLoadTxnCommitRequest

func (p *FrontendServiceLoadTxnPreCommitArgs) GetRequest() (v *TLoadTxnCommitRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceLoadTxnPreCommitArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceLoadTxnPreCommitArgs) SetRequest(val *TLoadTxnCommitRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceLoadTxnPreCommitArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceLoadTxnPreCommitArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceLoadTxnPreCommitArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceLoadTxnPreCommitArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxnPreCommitArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTLoadTxnCommitRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceLoadTxnPreCommitArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("loadTxnPreCommit_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxnPreCommitArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceLoadTxnPreCommitArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceLoadTxnPreCommitArgs(%+v)", *p)

}

func (p *FrontendServiceLoadTxnPreCommitArgs) DeepEqual(ano *FrontendServiceLoadTxnPreCommitArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceLoadTxnPreCommitArgs) Field1DeepEqual(src *TLoadTxnCommitRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceLoadTxnPreCommitResult struct {
	Success *TLoadTxnCommitResult_ `thrift:"success,0,optional" frugal:"0,optional,TLoadTxnCommitResult_" json:"success,omitempty"`
}

func NewFrontendServiceLoadTxnPreCommitResult() *FrontendServiceLoadTxnPreCommitResult {
	return &FrontendServiceLoadTxnPreCommitResult{}
}

func (p *FrontendServiceLoadTxnPreCommitResult) InitDefault() {
}

var FrontendServiceLoadTxnPreCommitResult_Success_DEFAULT *TLoadTxnCommitResult_

func (p *FrontendServiceLoadTxnPreCommitResult) GetSuccess() (v *TLoadTxnCommitResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceLoadTxnPreCommitResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceLoadTxnPreCommitResult) SetSuccess(x interface{}) {
	p.Success = x.(*TLoadTxnCommitResult_)
}

var fieldIDToName_FrontendServiceLoadTxnPreCommitResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceLoadTxnPreCommitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceLoadTxnPreCommitResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceLoadTxnPreCommitResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxnPreCommitResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTLoadTxnCommitResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceLoadTxnPreCommitResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("loadTxnPreCommit_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxnPreCommitResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceLoadTxnPreCommitResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceLoadTxnPreCommitResult(%+v)", *p)

}

func (p *FrontendServiceLoadTxnPreCommitResult) DeepEqual(ano *FrontendServiceLoadTxnPreCommitResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceLoadTxnPreCommitResult) Field0DeepEqual(src *TLoadTxnCommitResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceLoadTxn2PCArgs struct {
	Request *TLoadTxn2PCRequest `thrift:"request,1" frugal:"1,default,TLoadTxn2PCRequest" json:"request"`
}

func NewFrontendServiceLoadTxn2PCArgs() *FrontendServiceLoadTxn2PCArgs {
	return &FrontendServiceLoadTxn2PCArgs{}
}

func (p *FrontendServiceLoadTxn2PCArgs) InitDefault() {
}

var FrontendServiceLoadTxn2PCArgs_Request_DEFAULT *TLoadTxn2PCRequest

func (p *FrontendServiceLoadTxn2PCArgs) GetRequest() (v *TLoadTxn2PCRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceLoadTxn2PCArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceLoadTxn2PCArgs) SetRequest(val *TLoadTxn2PCRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceLoadTxn2PCArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceLoadTxn2PCArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceLoadTxn2PCArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceLoadTxn2PCArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxn2PCArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTLoadTxn2PCRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceLoadTxn2PCArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("loadTxn2PC_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxn2PCArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceLoadTxn2PCArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceLoadTxn2PCArgs(%+v)", *p)

}

func (p *FrontendServiceLoadTxn2PCArgs) DeepEqual(ano *FrontendServiceLoadTxn2PCArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceLoadTxn2PCArgs) Field1DeepEqual(src *TLoadTxn2PCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceLoadTxn2PCResult struct {
	Success *TLoadTxn2PCResult_ `thrift:"success,0,optional" frugal:"0,optional,TLoadTxn2PCResult_" json:"success,omitempty"`
}

func NewFrontendServiceLoadTxn2PCResult() *FrontendServiceLoadTxn2PCResult {
	return &FrontendServiceLoadTxn2PCResult{}
}

func (p *FrontendServiceLoadTxn2PCResult) InitDefault() {
}

var FrontendServiceLoadTxn2PCResult_Success_DEFAULT *TLoadTxn2PCResult_

func (p *FrontendServiceLoadTxn2PCResult) GetSuccess() (v *TLoadTxn2PCResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceLoadTxn2PCResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceLoadTxn2PCResult) SetSuccess(x interface{}) {
	p.Success = x.(*TLoadTxn2PCResult_)
}

var fieldIDToName_FrontendServiceLoadTxn2PCResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceLoadTxn2PCResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceLoadTxn2PCResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceLoadTxn2PCResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxn2PCResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTLoadTxn2PCResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceLoadTxn2PCResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("loadTxn2PC_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxn2PCResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceLoadTxn2PCResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceLoadTxn2PCResult(%+v)", *p)

}

func (p *FrontendServiceLoadTxn2PCResult) DeepEqual(ano *FrontendServiceLoadTxn2PCResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceLoadTxn2PCResult) Field0DeepEqual(src *TLoadTxn2PCResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceLoadTxnCommitArgs struct {
	Request *TLoadTxnCommitRequest `thrift:"request,1" frugal:"1,default,TLoadTxnCommitRequest" json:"request"`
}

func NewFrontendServiceLoadTxnCommitArgs() *FrontendServiceLoadTxnCommitArgs {
	return &FrontendServiceLoadTxnCommitArgs{}
}

func (p *FrontendServiceLoadTxnCommitArgs) InitDefault() {
}

var FrontendServiceLoadTxnCommitArgs_Request_DEFAULT *TLoadTxnCommitRequest

func (p *FrontendServiceLoadTxnCommitArgs) GetRequest() (v *TLoadTxnCommitRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceLoadTxnCommitArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceLoadTxnCommitArgs) SetRequest(val *TLoadTxnCommitRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceLoadTxnCommitArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceLoadTxnCommitArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceLoadTxnCommitArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceLoadTxnCommitArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxnCommitArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTLoadTxnCommitRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceLoadTxnCommitArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("loadTxnCommit_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxnCommitArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceLoadTxnCommitArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceLoadTxnCommitArgs(%+v)", *p)

}

func (p *FrontendServiceLoadTxnCommitArgs) DeepEqual(ano *FrontendServiceLoadTxnCommitArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceLoadTxnCommitArgs) Field1DeepEqual(src *TLoadTxnCommitRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceLoadTxnCommitResult struct {
	Success *TLoadTxnCommitResult_ `thrift:"success,0,optional" frugal:"0,optional,TLoadTxnCommitResult_" json:"success,omitempty"`
}

func NewFrontendServiceLoadTxnCommitResult() *FrontendServiceLoadTxnCommitResult {
	return &FrontendServiceLoadTxnCommitResult{}
}

func (p *FrontendServiceLoadTxnCommitResult) InitDefault() {
}

var FrontendServiceLoadTxnCommitResult_Success_DEFAULT *TLoadTxnCommitResult_

func (p *FrontendServiceLoadTxnCommitResult) GetSuccess() (v *TLoadTxnCommitResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceLoadTxnCommitResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceLoadTxnCommitResult) SetSuccess(x interface{}) {
	p.Success = x.(*TLoadTxnCommitResult_)
}

var fieldIDToName_FrontendServiceLoadTxnCommitResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceLoadTxnCommitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceLoadTxnCommitResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceLoadTxnCommitResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxnCommitResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTLoadTxnCommitResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceLoadTxnCommitResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("loadTxnCommit_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxnCommitResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceLoadTxnCommitResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceLoadTxnCommitResult(%+v)", *p)

}

func (p *FrontendServiceLoadTxnCommitResult) DeepEqual(ano *FrontendServiceLoadTxnCommitResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceLoadTxnCommitResult) Field0DeepEqual(src *TLoadTxnCommitResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceLoadTxnRollbackArgs struct {
	Request *TLoadTxnRollbackRequest `thrift:"request,1" frugal:"1,default,TLoadTxnRollbackRequest" json:"request"`
}

func NewFrontendServiceLoadTxnRollbackArgs() *FrontendServiceLoadTxnRollbackArgs {
	return &FrontendServiceLoadTxnRollbackArgs{}
}

func (p *FrontendServiceLoadTxnRollbackArgs) InitDefault() {
}

var FrontendServiceLoadTxnRollbackArgs_Request_DEFAULT *TLoadTxnRollbackRequest

func (p *FrontendServiceLoadTxnRollbackArgs) GetRequest() (v *TLoadTxnRollbackRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceLoadTxnRollbackArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceLoadTxnRollbackArgs) SetRequest(val *TLoadTxnRollbackRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceLoadTxnRollbackArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceLoadTxnRollbackArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceLoadTxnRollbackArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceLoadTxnRollbackArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxnRollbackArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTLoadTxnRollbackRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceLoadTxnRollbackArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("loadTxnRollback_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxnRollbackArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceLoadTxnRollbackArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceLoadTxnRollbackArgs(%+v)", *p)

}

func (p *FrontendServiceLoadTxnRollbackArgs) DeepEqual(ano *FrontendServiceLoadTxnRollbackArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceLoadTxnRollbackArgs) Field1DeepEqual(src *TLoadTxnRollbackRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceLoadTxnRollbackResult struct {
	Success *TLoadTxnRollbackResult_ `thrift:"success,0,optional" frugal:"0,optional,TLoadTxnRollbackResult_" json:"success,omitempty"`
}

func NewFrontendServiceLoadTxnRollbackResult() *FrontendServiceLoadTxnRollbackResult {
	return &FrontendServiceLoadTxnRollbackResult{}
}

func (p *FrontendServiceLoadTxnRollbackResult) InitDefault() {
}

var FrontendServiceLoadTxnRollbackResult_Success_DEFAULT *TLoadTxnRollbackResult_

func (p *FrontendServiceLoadTxnRollbackResult) GetSuccess() (v *TLoadTxnRollbackResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceLoadTxnRollbackResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceLoadTxnRollbackResult) SetSuccess(x interface{}) {
	p.Success = x.(*TLoadTxnRollbackResult_)
}

var fieldIDToName_FrontendServiceLoadTxnRollbackResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceLoadTxnRollbackResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceLoadTxnRollbackResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceLoadTxnRollbackResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxnRollbackResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTLoadTxnRollbackResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceLoadTxnRollbackResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("loadTxnRollback_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceLoadTxnRollbackResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceLoadTxnRollbackResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceLoadTxnRollbackResult(%+v)", *p)

}

func (p *FrontendServiceLoadTxnRollbackResult) DeepEqual(ano *FrontendServiceLoadTxnRollbackResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceLoadTxnRollbackResult) Field0DeepEqual(src *TLoadTxnRollbackResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceBeginTxnArgs struct {
	Request *TBeginTxnRequest `thrift:"request,1" frugal:"1,default,TBeginTxnRequest" json:"request"`
}

func NewFrontendServiceBeginTxnArgs() *FrontendServiceBeginTxnArgs {
	return &FrontendServiceBeginTxnArgs{}
}

func (p *FrontendServiceBeginTxnArgs) InitDefault() {
}

var FrontendServiceBeginTxnArgs_Request_DEFAULT *TBeginTxnRequest

func (p *FrontendServiceBeginTxnArgs) GetRequest() (v *TBeginTxnRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceBeginTxnArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceBeginTxnArgs) SetRequest(val *TBeginTxnRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceBeginTxnArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceBeginTxnArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceBeginTxnArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceBeginTxnArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceBeginTxnArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTBeginTxnRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceBeginTxnArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("beginTxn_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceBeginTxnArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceBeginTxnArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceBeginTxnArgs(%+v)", *p)

}

func (p *FrontendServiceBeginTxnArgs) DeepEqual(ano *FrontendServiceBeginTxnArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceBeginTxnArgs) Field1DeepEqual(src *TBeginTxnRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceBeginTxnResult struct {
	Success *TBeginTxnResult_ `thrift:"success,0,optional" frugal:"0,optional,TBeginTxnResult_" json:"success,omitempty"`
}

func NewFrontendServiceBeginTxnResult() *FrontendServiceBeginTxnResult {
	return &FrontendServiceBeginTxnResult{}
}

func (p *FrontendServiceBeginTxnResult) InitDefault() {
}

var FrontendServiceBeginTxnResult_Success_DEFAULT *TBeginTxnResult_

func (p *FrontendServiceBeginTxnResult) GetSuccess() (v *TBeginTxnResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceBeginTxnResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceBeginTxnResult) SetSuccess(x interface{}) {
	p.Success = x.(*TBeginTxnResult_)
}

var fieldIDToName_FrontendServiceBeginTxnResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceBeginTxnResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceBeginTxnResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceBeginTxnResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceBeginTxnResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTBeginTxnResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceBeginTxnResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("beginTxn_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceBeginTxnResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceBeginTxnResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceBeginTxnResult(%+v)", *p)

}

func (p *FrontendServiceBeginTxnResult) DeepEqual(ano *FrontendServiceBeginTxnResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceBeginTxnResult) Field0DeepEqual(src *TBeginTxnResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceCommitTxnArgs struct {
	Request *TCommitTxnRequest `thrift:"request,1" frugal:"1,default,TCommitTxnRequest" json:"request"`
}

func NewFrontendServiceCommitTxnArgs() *FrontendServiceCommitTxnArgs {
	return &FrontendServiceCommitTxnArgs{}
}

func (p *FrontendServiceCommitTxnArgs) InitDefault() {
}

var FrontendServiceCommitTxnArgs_Request_DEFAULT *TCommitTxnRequest

func (p *FrontendServiceCommitTxnArgs) GetRequest() (v *TCommitTxnRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceCommitTxnArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceCommitTxnArgs) SetRequest(val *TCommitTxnRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceCommitTxnArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceCommitTxnArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceCommitTxnArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceCommitTxnArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceCommitTxnArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTCommitTxnRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceCommitTxnArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("commitTxn_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceCommitTxnArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceCommitTxnArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceCommitTxnArgs(%+v)", *p)

}

func (p *FrontendServiceCommitTxnArgs) DeepEqual(ano *FrontendServiceCommitTxnArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceCommitTxnArgs) Field1DeepEqual(src *TCommitTxnRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceCommitTxnResult struct {
	Success *TCommitTxnResult_ `thrift:"success,0,optional" frugal:"0,optional,TCommitTxnResult_" json:"success,omitempty"`
}

func NewFrontendServiceCommitTxnResult() *FrontendServiceCommitTxnResult {
	return &FrontendServiceCommitTxnResult{}
}

func (p *FrontendServiceCommitTxnResult) InitDefault() {
}

var FrontendServiceCommitTxnResult_Success_DEFAULT *TCommitTxnResult_

func (p *FrontendServiceCommitTxnResult) GetSuccess() (v *TCommitTxnResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceCommitTxnResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceCommitTxnResult) SetSuccess(x interface{}) {
	p.Success = x.(*TCommitTxnResult_)
}

var fieldIDToName_FrontendServiceCommitTxnResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceCommitTxnResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceCommitTxnResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceCommitTxnResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceCommitTxnResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTCommitTxnResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceCommitTxnResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("commitTxn_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceCommitTxnResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceCommitTxnResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceCommitTxnResult(%+v)", *p)

}

func (p *FrontendServiceCommitTxnResult) DeepEqual(ano *FrontendServiceCommitTxnResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceCommitTxnResult) Field0DeepEqual(src *TCommitTxnResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceRollbackTxnArgs struct {
	Request *TRollbackTxnRequest `thrift:"request,1" frugal:"1,default,TRollbackTxnRequest" json:"request"`
}

func NewFrontendServiceRollbackTxnArgs() *FrontendServiceRollbackTxnArgs {
	return &FrontendServiceRollbackTxnArgs{}
}

func (p *FrontendServiceRollbackTxnArgs) InitDefault() {
}

var FrontendServiceRollbackTxnArgs_Request_DEFAULT *TRollbackTxnRequest

func (p *FrontendServiceRollbackTxnArgs) GetRequest() (v *TRollbackTxnRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceRollbackTxnArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceRollbackTxnArgs) SetRequest(val *TRollbackTxnRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceRollbackTxnArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceRollbackTxnArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceRollbackTxnArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceRollbackTxnArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceRollbackTxnArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTRollbackTxnRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceRollbackTxnArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("rollbackTxn_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceRollbackTxnArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceRollbackTxnArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceRollbackTxnArgs(%+v)", *p)

}

func (p *FrontendServiceRollbackTxnArgs) DeepEqual(ano *FrontendServiceRollbackTxnArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceRollbackTxnArgs) Field1DeepEqual(src *TRollbackTxnRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceRollbackTxnResult struct {
	Success *TRollbackTxnResult_ `thrift:"success,0,optional" frugal:"0,optional,TRollbackTxnResult_" json:"success,omitempty"`
}

func NewFrontendServiceRollbackTxnResult() *FrontendServiceRollbackTxnResult {
	return &FrontendServiceRollbackTxnResult{}
}

func (p *FrontendServiceRollbackTxnResult) InitDefault() {
}

var FrontendServiceRollbackTxnResult_Success_DEFAULT *TRollbackTxnResult_

func (p *FrontendServiceRollbackTxnResult) GetSuccess() (v *TRollbackTxnResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceRollbackTxnResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceRollbackTxnResult) SetSuccess(x interface{}) {
	p.Success = x.(*TRollbackTxnResult_)
}

var fieldIDToName_FrontendServiceRollbackTxnResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceRollbackTxnResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceRollbackTxnResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceRollbackTxnResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceRollbackTxnResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTRollbackTxnResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceRollbackTxnResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("rollbackTxn_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceRollbackTxnResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceRollbackTxnResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceRollbackTxnResult(%+v)", *p)

}

func (p *FrontendServiceRollbackTxnResult) DeepEqual(ano *FrontendServiceRollbackTxnResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceRollbackTxnResult) Field0DeepEqual(src *TRollbackTxnResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetBinlogArgs struct {
	Request *TGetBinlogRequest `thrift:"request,1" frugal:"1,default,TGetBinlogRequest" json:"request"`
}

func NewFrontendServiceGetBinlogArgs() *FrontendServiceGetBinlogArgs {
	return &FrontendServiceGetBinlogArgs{}
}

func (p *FrontendServiceGetBinlogArgs) InitDefault() {
}

var FrontendServiceGetBinlogArgs_Request_DEFAULT *TGetBinlogRequest

func (p *FrontendServiceGetBinlogArgs) GetRequest() (v *TGetBinlogRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceGetBinlogArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceGetBinlogArgs) SetRequest(val *TGetBinlogRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceGetBinlogArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceGetBinlogArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceGetBinlogArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetBinlogArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetBinlogArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTGetBinlogRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceGetBinlogArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getBinlog_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetBinlogArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceGetBinlogArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetBinlogArgs(%+v)", *p)

}

func (p *FrontendServiceGetBinlogArgs) DeepEqual(ano *FrontendServiceGetBinlogArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceGetBinlogArgs) Field1DeepEqual(src *TGetBinlogRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetBinlogResult struct {
	Success *TGetBinlogResult_ `thrift:"success,0,optional" frugal:"0,optional,TGetBinlogResult_" json:"success,omitempty"`
}

func NewFrontendServiceGetBinlogResult() *FrontendServiceGetBinlogResult {
	return &FrontendServiceGetBinlogResult{}
}

func (p *FrontendServiceGetBinlogResult) InitDefault() {
}

var FrontendServiceGetBinlogResult_Success_DEFAULT *TGetBinlogResult_

func (p *FrontendServiceGetBinlogResult) GetSuccess() (v *TGetBinlogResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceGetBinlogResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceGetBinlogResult) SetSuccess(x interface{}) {
	p.Success = x.(*TGetBinlogResult_)
}

var fieldIDToName_FrontendServiceGetBinlogResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceGetBinlogResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceGetBinlogResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetBinlogResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetBinlogResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTGetBinlogResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceGetBinlogResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getBinlog_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetBinlogResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceGetBinlogResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetBinlogResult(%+v)", *p)

}

func (p *FrontendServiceGetBinlogResult) DeepEqual(ano *FrontendServiceGetBinlogResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceGetBinlogResult) Field0DeepEqual(src *TGetBinlogResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetSnapshotArgs struct {
	Request *TGetSnapshotRequest `thrift:"request,1" frugal:"1,default,TGetSnapshotRequest" json:"request"`
}

func NewFrontendServiceGetSnapshotArgs() *FrontendServiceGetSnapshotArgs {
	return &FrontendServiceGetSnapshotArgs{}
}

func (p *FrontendServiceGetSnapshotArgs) InitDefault() {
}

var FrontendServiceGetSnapshotArgs_Request_DEFAULT *TGetSnapshotRequest

func (p *FrontendServiceGetSnapshotArgs) GetRequest() (v *TGetSnapshotRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceGetSnapshotArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceGetSnapshotArgs) SetRequest(val *TGetSnapshotRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceGetSnapshotArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceGetSnapshotArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceGetSnapshotArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetSnapshotArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetSnapshotArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTGetSnapshotRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceGetSnapshotArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getSnapshot_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetSnapshotArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceGetSnapshotArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetSnapshotArgs(%+v)", *p)

}

func (p *FrontendServiceGetSnapshotArgs) DeepEqual(ano *FrontendServiceGetSnapshotArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceGetSnapshotArgs) Field1DeepEqual(src *TGetSnapshotRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetSnapshotResult struct {
	Success *TGetSnapshotResult_ `thrift:"success,0,optional" frugal:"0,optional,TGetSnapshotResult_" json:"success,omitempty"`
}

func NewFrontendServiceGetSnapshotResult() *FrontendServiceGetSnapshotResult {
	return &FrontendServiceGetSnapshotResult{}
}

func (p *FrontendServiceGetSnapshotResult) InitDefault() {
}

var FrontendServiceGetSnapshotResult_Success_DEFAULT *TGetSnapshotResult_

func (p *FrontendServiceGetSnapshotResult) GetSuccess() (v *TGetSnapshotResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceGetSnapshotResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceGetSnapshotResult) SetSuccess(x interface{}) {
	p.Success = x.(*TGetSnapshotResult_)
}

var fieldIDToName_FrontendServiceGetSnapshotResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceGetSnapshotResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceGetSnapshotResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetSnapshotResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetSnapshotResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTGetSnapshotResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceGetSnapshotResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getSnapshot_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetSnapshotResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceGetSnapshotResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetSnapshotResult(%+v)", *p)

}

func (p *FrontendServiceGetSnapshotResult) DeepEqual(ano *FrontendServiceGetSnapshotResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceGetSnapshotResult) Field0DeepEqual(src *TGetSnapshotResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceRestoreSnapshotArgs struct {
	Request *TRestoreSnapshotRequest `thrift:"request,1" frugal:"1,default,TRestoreSnapshotRequest" json:"request"`
}

func NewFrontendServiceRestoreSnapshotArgs() *FrontendServiceRestoreSnapshotArgs {
	return &FrontendServiceRestoreSnapshotArgs{}
}

func (p *FrontendServiceRestoreSnapshotArgs) InitDefault() {
}

var FrontendServiceRestoreSnapshotArgs_Request_DEFAULT *TRestoreSnapshotRequest

func (p *FrontendServiceRestoreSnapshotArgs) GetRequest() (v *TRestoreSnapshotRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceRestoreSnapshotArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceRestoreSnapshotArgs) SetRequest(val *TRestoreSnapshotRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceRestoreSnapshotArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceRestoreSnapshotArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceRestoreSnapshotArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceRestoreSnapshotArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceRestoreSnapshotArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTRestoreSnapshotRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceRestoreSnapshotArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("restoreSnapshot_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceRestoreSnapshotArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceRestoreSnapshotArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceRestoreSnapshotArgs(%+v)", *p)

}

func (p *FrontendServiceRestoreSnapshotArgs) DeepEqual(ano *FrontendServiceRestoreSnapshotArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceRestoreSnapshotArgs) Field1DeepEqual(src *TRestoreSnapshotRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceRestoreSnapshotResult struct {
	Success *TRestoreSnapshotResult_ `thrift:"success,0,optional" frugal:"0,optional,TRestoreSnapshotResult_" json:"success,omitempty"`
}

func NewFrontendServiceRestoreSnapshotResult() *FrontendServiceRestoreSnapshotResult {
	return &FrontendServiceRestoreSnapshotResult{}
}

func (p *FrontendServiceRestoreSnapshotResult) InitDefault() {
}

var FrontendServiceRestoreSnapshotResult_Success_DEFAULT *TRestoreSnapshotResult_

func (p *FrontendServiceRestoreSnapshotResult) GetSuccess() (v *TRestoreSnapshotResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceRestoreSnapshotResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceRestoreSnapshotResult) SetSuccess(x interface{}) {
	p.Success = x.(*TRestoreSnapshotResult_)
}

var fieldIDToName_FrontendServiceRestoreSnapshotResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceRestoreSnapshotResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceRestoreSnapshotResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceRestoreSnapshotResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceRestoreSnapshotResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTRestoreSnapshotResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceRestoreSnapshotResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("restoreSnapshot_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceRestoreSnapshotResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceRestoreSnapshotResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceRestoreSnapshotResult(%+v)", *p)

}

func (p *FrontendServiceRestoreSnapshotResult) DeepEqual(ano *FrontendServiceRestoreSnapshotResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceRestoreSnapshotResult) Field0DeepEqual(src *TRestoreSnapshotResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceWaitingTxnStatusArgs struct {
	Request *TWaitingTxnStatusRequest `thrift:"request,1" frugal:"1,default,TWaitingTxnStatusRequest" json:"request"`
}

func NewFrontendServiceWaitingTxnStatusArgs() *FrontendServiceWaitingTxnStatusArgs {
	return &FrontendServiceWaitingTxnStatusArgs{}
}

func (p *FrontendServiceWaitingTxnStatusArgs) InitDefault() {
}

var FrontendServiceWaitingTxnStatusArgs_Request_DEFAULT *TWaitingTxnStatusRequest

func (p *FrontendServiceWaitingTxnStatusArgs) GetRequest() (v *TWaitingTxnStatusRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceWaitingTxnStatusArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceWaitingTxnStatusArgs) SetRequest(val *TWaitingTxnStatusRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceWaitingTxnStatusArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceWaitingTxnStatusArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceWaitingTxnStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceWaitingTxnStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceWaitingTxnStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTWaitingTxnStatusRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceWaitingTxnStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("waitingTxnStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceWaitingTxnStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceWaitingTxnStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceWaitingTxnStatusArgs(%+v)", *p)

}

func (p *FrontendServiceWaitingTxnStatusArgs) DeepEqual(ano *FrontendServiceWaitingTxnStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceWaitingTxnStatusArgs) Field1DeepEqual(src *TWaitingTxnStatusRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceWaitingTxnStatusResult struct {
	Success *TWaitingTxnStatusResult_ `thrift:"success,0,optional" frugal:"0,optional,TWaitingTxnStatusResult_" json:"success,omitempty"`
}

func NewFrontendServiceWaitingTxnStatusResult() *FrontendServiceWaitingTxnStatusResult {
	return &FrontendServiceWaitingTxnStatusResult{}
}

func (p *FrontendServiceWaitingTxnStatusResult) InitDefault() {
}

var FrontendServiceWaitingTxnStatusResult_Success_DEFAULT *TWaitingTxnStatusResult_

func (p *FrontendServiceWaitingTxnStatusResult) GetSuccess() (v *TWaitingTxnStatusResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceWaitingTxnStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceWaitingTxnStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*TWaitingTxnStatusResult_)
}

var fieldIDToName_FrontendServiceWaitingTxnStatusResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceWaitingTxnStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceWaitingTxnStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceWaitingTxnStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceWaitingTxnStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTWaitingTxnStatusResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceWaitingTxnStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("waitingTxnStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceWaitingTxnStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceWaitingTxnStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceWaitingTxnStatusResult(%+v)", *p)

}

func (p *FrontendServiceWaitingTxnStatusResult) DeepEqual(ano *FrontendServiceWaitingTxnStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceWaitingTxnStatusResult) Field0DeepEqual(src *TWaitingTxnStatusResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceStreamLoadPutArgs struct {
	Request *TStreamLoadPutRequest `thrift:"request,1" frugal:"1,default,TStreamLoadPutRequest" json:"request"`
}

func NewFrontendServiceStreamLoadPutArgs() *FrontendServiceStreamLoadPutArgs {
	return &FrontendServiceStreamLoadPutArgs{}
}

func (p *FrontendServiceStreamLoadPutArgs) InitDefault() {
}

var FrontendServiceStreamLoadPutArgs_Request_DEFAULT *TStreamLoadPutRequest

func (p *FrontendServiceStreamLoadPutArgs) GetRequest() (v *TStreamLoadPutRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceStreamLoadPutArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceStreamLoadPutArgs) SetRequest(val *TStreamLoadPutRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceStreamLoadPutArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceStreamLoadPutArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceStreamLoadPutArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceStreamLoadPutArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceStreamLoadPutArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTStreamLoadPutRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceStreamLoadPutArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("streamLoadPut_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceStreamLoadPutArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceStreamLoadPutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceStreamLoadPutArgs(%+v)", *p)

}

func (p *FrontendServiceStreamLoadPutArgs) DeepEqual(ano *FrontendServiceStreamLoadPutArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceStreamLoadPutArgs) Field1DeepEqual(src *TStreamLoadPutRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceStreamLoadPutResult struct {
	Success *TStreamLoadPutResult_ `thrift:"success,0,optional" frugal:"0,optional,TStreamLoadPutResult_" json:"success,omitempty"`
}

func NewFrontendServiceStreamLoadPutResult() *FrontendServiceStreamLoadPutResult {
	return &FrontendServiceStreamLoadPutResult{}
}

func (p *FrontendServiceStreamLoadPutResult) InitDefault() {
}

var FrontendServiceStreamLoadPutResult_Success_DEFAULT *TStreamLoadPutResult_

func (p *FrontendServiceStreamLoadPutResult) GetSuccess() (v *TStreamLoadPutResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceStreamLoadPutResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceStreamLoadPutResult) SetSuccess(x interface{}) {
	p.Success = x.(*TStreamLoadPutResult_)
}

var fieldIDToName_FrontendServiceStreamLoadPutResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceStreamLoadPutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceStreamLoadPutResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceStreamLoadPutResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceStreamLoadPutResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTStreamLoadPutResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceStreamLoadPutResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("streamLoadPut_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceStreamLoadPutResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceStreamLoadPutResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceStreamLoadPutResult(%+v)", *p)

}

func (p *FrontendServiceStreamLoadPutResult) DeepEqual(ano *FrontendServiceStreamLoadPutResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceStreamLoadPutResult) Field0DeepEqual(src *TStreamLoadPutResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceStreamLoadMultiTablePutArgs struct {
	Request *TStreamLoadPutRequest `thrift:"request,1" frugal:"1,default,TStreamLoadPutRequest" json:"request"`
}

func NewFrontendServiceStreamLoadMultiTablePutArgs() *FrontendServiceStreamLoadMultiTablePutArgs {
	return &FrontendServiceStreamLoadMultiTablePutArgs{}
}

func (p *FrontendServiceStreamLoadMultiTablePutArgs) InitDefault() {
}

var FrontendServiceStreamLoadMultiTablePutArgs_Request_DEFAULT *TStreamLoadPutRequest

func (p *FrontendServiceStreamLoadMultiTablePutArgs) GetRequest() (v *TStreamLoadPutRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceStreamLoadMultiTablePutArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceStreamLoadMultiTablePutArgs) SetRequest(val *TStreamLoadPutRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceStreamLoadMultiTablePutArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceStreamLoadMultiTablePutArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceStreamLoadMultiTablePutArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceStreamLoadMultiTablePutArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceStreamLoadMultiTablePutArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTStreamLoadPutRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceStreamLoadMultiTablePutArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("streamLoadMultiTablePut_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceStreamLoadMultiTablePutArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceStreamLoadMultiTablePutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceStreamLoadMultiTablePutArgs(%+v)", *p)

}

func (p *FrontendServiceStreamLoadMultiTablePutArgs) DeepEqual(ano *FrontendServiceStreamLoadMultiTablePutArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceStreamLoadMultiTablePutArgs) Field1DeepEqual(src *TStreamLoadPutRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceStreamLoadMultiTablePutResult struct {
	Success *TStreamLoadMultiTablePutResult_ `thrift:"success,0,optional" frugal:"0,optional,TStreamLoadMultiTablePutResult_" json:"success,omitempty"`
}

func NewFrontendServiceStreamLoadMultiTablePutResult() *FrontendServiceStreamLoadMultiTablePutResult {
	return &FrontendServiceStreamLoadMultiTablePutResult{}
}

func (p *FrontendServiceStreamLoadMultiTablePutResult) InitDefault() {
}

var FrontendServiceStreamLoadMultiTablePutResult_Success_DEFAULT *TStreamLoadMultiTablePutResult_

func (p *FrontendServiceStreamLoadMultiTablePutResult) GetSuccess() (v *TStreamLoadMultiTablePutResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceStreamLoadMultiTablePutResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceStreamLoadMultiTablePutResult) SetSuccess(x interface{}) {
	p.Success = x.(*TStreamLoadMultiTablePutResult_)
}

var fieldIDToName_FrontendServiceStreamLoadMultiTablePutResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceStreamLoadMultiTablePutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceStreamLoadMultiTablePutResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceStreamLoadMultiTablePutResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceStreamLoadMultiTablePutResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTStreamLoadMultiTablePutResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceStreamLoadMultiTablePutResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("streamLoadMultiTablePut_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceStreamLoadMultiTablePutResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceStreamLoadMultiTablePutResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceStreamLoadMultiTablePutResult(%+v)", *p)

}

func (p *FrontendServiceStreamLoadMultiTablePutResult) DeepEqual(ano *FrontendServiceStreamLoadMultiTablePutResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceStreamLoadMultiTablePutResult) Field0DeepEqual(src *TStreamLoadMultiTablePutResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceSnapshotLoaderReportArgs struct {
	Request *TSnapshotLoaderReportRequest `thrift:"request,1" frugal:"1,default,TSnapshotLoaderReportRequest" json:"request"`
}

func NewFrontendServiceSnapshotLoaderReportArgs() *FrontendServiceSnapshotLoaderReportArgs {
	return &FrontendServiceSnapshotLoaderReportArgs{}
}

func (p *FrontendServiceSnapshotLoaderReportArgs) InitDefault() {
}

var FrontendServiceSnapshotLoaderReportArgs_Request_DEFAULT *TSnapshotLoaderReportRequest

func (p *FrontendServiceSnapshotLoaderReportArgs) GetRequest() (v *TSnapshotLoaderReportRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceSnapshotLoaderReportArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceSnapshotLoaderReportArgs) SetRequest(val *TSnapshotLoaderReportRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceSnapshotLoaderReportArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceSnapshotLoaderReportArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceSnapshotLoaderReportArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceSnapshotLoaderReportArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceSnapshotLoaderReportArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTSnapshotLoaderReportRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceSnapshotLoaderReportArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("snapshotLoaderReport_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceSnapshotLoaderReportArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceSnapshotLoaderReportArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceSnapshotLoaderReportArgs(%+v)", *p)

}

func (p *FrontendServiceSnapshotLoaderReportArgs) DeepEqual(ano *FrontendServiceSnapshotLoaderReportArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceSnapshotLoaderReportArgs) Field1DeepEqual(src *TSnapshotLoaderReportRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceSnapshotLoaderReportResult struct {
	Success *status.TStatus `thrift:"success,0,optional" frugal:"0,optional,status.TStatus" json:"success,omitempty"`
}

func NewFrontendServiceSnapshotLoaderReportResult() *FrontendServiceSnapshotLoaderReportResult {
	return &FrontendServiceSnapshotLoaderReportResult{}
}

func (p *FrontendServiceSnapshotLoaderReportResult) InitDefault() {
}

var FrontendServiceSnapshotLoaderReportResult_Success_DEFAULT *status.TStatus

func (p *FrontendServiceSnapshotLoaderReportResult) GetSuccess() (v *status.TStatus) {
	if !p.IsSetSuccess() {
		return FrontendServiceSnapshotLoaderReportResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceSnapshotLoaderReportResult) SetSuccess(x interface{}) {
	p.Success = x.(*status.TStatus)
}

var fieldIDToName_FrontendServiceSnapshotLoaderReportResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceSnapshotLoaderReportResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceSnapshotLoaderReportResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceSnapshotLoaderReportResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceSnapshotLoaderReportResult) ReadField0(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceSnapshotLoaderReportResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("snapshotLoaderReport_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceSnapshotLoaderReportResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceSnapshotLoaderReportResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceSnapshotLoaderReportResult(%+v)", *p)

}

func (p *FrontendServiceSnapshotLoaderReportResult) DeepEqual(ano *FrontendServiceSnapshotLoaderReportResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceSnapshotLoaderReportResult) Field0DeepEqual(src *status.TStatus) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServicePingArgs struct {
	Request *TFrontendPingFrontendRequest `thrift:"request,1" frugal:"1,default,TFrontendPingFrontendRequest" json:"request"`
}

func NewFrontendServicePingArgs() *FrontendServicePingArgs {
	return &FrontendServicePingArgs{}
}

func (p *FrontendServicePingArgs) InitDefault() {
}

var FrontendServicePingArgs_Request_DEFAULT *TFrontendPingFrontendRequest

func (p *FrontendServicePingArgs) GetRequest() (v *TFrontendPingFrontendRequest) {
	if !p.IsSetRequest() {
		return FrontendServicePingArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServicePingArgs) SetRequest(val *TFrontendPingFrontendRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServicePingArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServicePingArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServicePingArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServicePingArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServicePingArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTFrontendPingFrontendRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServicePingArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ping_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServicePingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServicePingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServicePingArgs(%+v)", *p)

}

func (p *FrontendServicePingArgs) DeepEqual(ano *FrontendServicePingArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServicePingArgs) Field1DeepEqual(src *TFrontendPingFrontendRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServicePingResult struct {
	Success *TFrontendPingFrontendResult_ `thrift:"success,0,optional" frugal:"0,optional,TFrontendPingFrontendResult_" json:"success,omitempty"`
}

func NewFrontendServicePingResult() *FrontendServicePingResult {
	return &FrontendServicePingResult{}
}

func (p *FrontendServicePingResult) InitDefault() {
}

var FrontendServicePingResult_Success_DEFAULT *TFrontendPingFrontendResult_

func (p *FrontendServicePingResult) GetSuccess() (v *TFrontendPingFrontendResult_) {
	if !p.IsSetSuccess() {
		return FrontendServicePingResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServicePingResult) SetSuccess(x interface{}) {
	p.Success = x.(*TFrontendPingFrontendResult_)
}

var fieldIDToName_FrontendServicePingResult = map[int16]string{
	0: "success",
}

func (p *FrontendServicePingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServicePingResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServicePingResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServicePingResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTFrontendPingFrontendResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServicePingResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ping_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServicePingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServicePingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServicePingResult(%+v)", *p)

}

func (p *FrontendServicePingResult) DeepEqual(ano *FrontendServicePingResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServicePingResult) Field0DeepEqual(src *TFrontendPingFrontendResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceInitExternalCtlMetaArgs struct {
	Request *TInitExternalCtlMetaRequest `thrift:"request,1" frugal:"1,default,TInitExternalCtlMetaRequest" json:"request"`
}

func NewFrontendServiceInitExternalCtlMetaArgs() *FrontendServiceInitExternalCtlMetaArgs {
	return &FrontendServiceInitExternalCtlMetaArgs{}
}

func (p *FrontendServiceInitExternalCtlMetaArgs) InitDefault() {
}

var FrontendServiceInitExternalCtlMetaArgs_Request_DEFAULT *TInitExternalCtlMetaRequest

func (p *FrontendServiceInitExternalCtlMetaArgs) GetRequest() (v *TInitExternalCtlMetaRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceInitExternalCtlMetaArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceInitExternalCtlMetaArgs) SetRequest(val *TInitExternalCtlMetaRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceInitExternalCtlMetaArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceInitExternalCtlMetaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceInitExternalCtlMetaArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceInitExternalCtlMetaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceInitExternalCtlMetaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTInitExternalCtlMetaRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceInitExternalCtlMetaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("initExternalCtlMeta_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceInitExternalCtlMetaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceInitExternalCtlMetaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceInitExternalCtlMetaArgs(%+v)", *p)

}

func (p *FrontendServiceInitExternalCtlMetaArgs) DeepEqual(ano *FrontendServiceInitExternalCtlMetaArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceInitExternalCtlMetaArgs) Field1DeepEqual(src *TInitExternalCtlMetaRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceInitExternalCtlMetaResult struct {
	Success *TInitExternalCtlMetaResult_ `thrift:"success,0,optional" frugal:"0,optional,TInitExternalCtlMetaResult_" json:"success,omitempty"`
}

func NewFrontendServiceInitExternalCtlMetaResult() *FrontendServiceInitExternalCtlMetaResult {
	return &FrontendServiceInitExternalCtlMetaResult{}
}

func (p *FrontendServiceInitExternalCtlMetaResult) InitDefault() {
}

var FrontendServiceInitExternalCtlMetaResult_Success_DEFAULT *TInitExternalCtlMetaResult_

func (p *FrontendServiceInitExternalCtlMetaResult) GetSuccess() (v *TInitExternalCtlMetaResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceInitExternalCtlMetaResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceInitExternalCtlMetaResult) SetSuccess(x interface{}) {
	p.Success = x.(*TInitExternalCtlMetaResult_)
}

var fieldIDToName_FrontendServiceInitExternalCtlMetaResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceInitExternalCtlMetaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceInitExternalCtlMetaResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceInitExternalCtlMetaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceInitExternalCtlMetaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTInitExternalCtlMetaResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceInitExternalCtlMetaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("initExternalCtlMeta_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceInitExternalCtlMetaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceInitExternalCtlMetaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceInitExternalCtlMetaResult(%+v)", *p)

}

func (p *FrontendServiceInitExternalCtlMetaResult) DeepEqual(ano *FrontendServiceInitExternalCtlMetaResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceInitExternalCtlMetaResult) Field0DeepEqual(src *TInitExternalCtlMetaResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceFetchSchemaTableDataArgs struct {
	Request *TFetchSchemaTableDataRequest `thrift:"request,1" frugal:"1,default,TFetchSchemaTableDataRequest" json:"request"`
}

func NewFrontendServiceFetchSchemaTableDataArgs() *FrontendServiceFetchSchemaTableDataArgs {
	return &FrontendServiceFetchSchemaTableDataArgs{}
}

func (p *FrontendServiceFetchSchemaTableDataArgs) InitDefault() {
}

var FrontendServiceFetchSchemaTableDataArgs_Request_DEFAULT *TFetchSchemaTableDataRequest

func (p *FrontendServiceFetchSchemaTableDataArgs) GetRequest() (v *TFetchSchemaTableDataRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceFetchSchemaTableDataArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceFetchSchemaTableDataArgs) SetRequest(val *TFetchSchemaTableDataRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceFetchSchemaTableDataArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceFetchSchemaTableDataArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceFetchSchemaTableDataArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceFetchSchemaTableDataArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceFetchSchemaTableDataArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTFetchSchemaTableDataRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceFetchSchemaTableDataArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("fetchSchemaTableData_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceFetchSchemaTableDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceFetchSchemaTableDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceFetchSchemaTableDataArgs(%+v)", *p)

}

func (p *FrontendServiceFetchSchemaTableDataArgs) DeepEqual(ano *FrontendServiceFetchSchemaTableDataArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceFetchSchemaTableDataArgs) Field1DeepEqual(src *TFetchSchemaTableDataRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceFetchSchemaTableDataResult struct {
	Success *TFetchSchemaTableDataResult_ `thrift:"success,0,optional" frugal:"0,optional,TFetchSchemaTableDataResult_" json:"success,omitempty"`
}

func NewFrontendServiceFetchSchemaTableDataResult() *FrontendServiceFetchSchemaTableDataResult {
	return &FrontendServiceFetchSchemaTableDataResult{}
}

func (p *FrontendServiceFetchSchemaTableDataResult) InitDefault() {
}

var FrontendServiceFetchSchemaTableDataResult_Success_DEFAULT *TFetchSchemaTableDataResult_

func (p *FrontendServiceFetchSchemaTableDataResult) GetSuccess() (v *TFetchSchemaTableDataResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceFetchSchemaTableDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceFetchSchemaTableDataResult) SetSuccess(x interface{}) {
	p.Success = x.(*TFetchSchemaTableDataResult_)
}

var fieldIDToName_FrontendServiceFetchSchemaTableDataResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceFetchSchemaTableDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceFetchSchemaTableDataResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceFetchSchemaTableDataResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceFetchSchemaTableDataResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTFetchSchemaTableDataResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceFetchSchemaTableDataResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("fetchSchemaTableData_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceFetchSchemaTableDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceFetchSchemaTableDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceFetchSchemaTableDataResult(%+v)", *p)

}

func (p *FrontendServiceFetchSchemaTableDataResult) DeepEqual(ano *FrontendServiceFetchSchemaTableDataResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceFetchSchemaTableDataResult) Field0DeepEqual(src *TFetchSchemaTableDataResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceAcquireTokenArgs struct {
}

func NewFrontendServiceAcquireTokenArgs() *FrontendServiceAcquireTokenArgs {
	return &FrontendServiceAcquireTokenArgs{}
}

func (p *FrontendServiceAcquireTokenArgs) InitDefault() {
}

var fieldIDToName_FrontendServiceAcquireTokenArgs = map[int16]string{}

func (p *FrontendServiceAcquireTokenArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceAcquireTokenArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("acquireToken_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceAcquireTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceAcquireTokenArgs(%+v)", *p)

}

func (p *FrontendServiceAcquireTokenArgs) DeepEqual(ano *FrontendServiceAcquireTokenArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type FrontendServiceAcquireTokenResult struct {
	Success *TMySqlLoadAcquireTokenResult_ `thrift:"success,0,optional" frugal:"0,optional,TMySqlLoadAcquireTokenResult_" json:"success,omitempty"`
}

func NewFrontendServiceAcquireTokenResult() *FrontendServiceAcquireTokenResult {
	return &FrontendServiceAcquireTokenResult{}
}

func (p *FrontendServiceAcquireTokenResult) InitDefault() {
}

var FrontendServiceAcquireTokenResult_Success_DEFAULT *TMySqlLoadAcquireTokenResult_

func (p *FrontendServiceAcquireTokenResult) GetSuccess() (v *TMySqlLoadAcquireTokenResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceAcquireTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceAcquireTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*TMySqlLoadAcquireTokenResult_)
}

var fieldIDToName_FrontendServiceAcquireTokenResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceAcquireTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceAcquireTokenResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceAcquireTokenResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceAcquireTokenResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTMySqlLoadAcquireTokenResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceAcquireTokenResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("acquireToken_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceAcquireTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceAcquireTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceAcquireTokenResult(%+v)", *p)

}

func (p *FrontendServiceAcquireTokenResult) DeepEqual(ano *FrontendServiceAcquireTokenResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceAcquireTokenResult) Field0DeepEqual(src *TMySqlLoadAcquireTokenResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceCheckTokenArgs struct {
	Token string `thrift:"token,1" frugal:"1,default,string" json:"token"`
}

func NewFrontendServiceCheckTokenArgs() *FrontendServiceCheckTokenArgs {
	return &FrontendServiceCheckTokenArgs{}
}

func (p *FrontendServiceCheckTokenArgs) InitDefault() {
}

func (p *FrontendServiceCheckTokenArgs) GetToken() (v string) {
	return p.Token
}
func (p *FrontendServiceCheckTokenArgs) SetToken(val string) {
	p.Token = val
}

var fieldIDToName_FrontendServiceCheckTokenArgs = map[int16]string{
	1: "token",
}

func (p *FrontendServiceCheckTokenArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceCheckTokenArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceCheckTokenArgs) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}

func (p *FrontendServiceCheckTokenArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("checkToken_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceCheckTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceCheckTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceCheckTokenArgs(%+v)", *p)

}

func (p *FrontendServiceCheckTokenArgs) DeepEqual(ano *FrontendServiceCheckTokenArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *FrontendServiceCheckTokenArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}

type FrontendServiceCheckTokenResult struct {
	Success *bool `thrift:"success,0,optional" frugal:"0,optional,bool" json:"success,omitempty"`
}

func NewFrontendServiceCheckTokenResult() *FrontendServiceCheckTokenResult {
	return &FrontendServiceCheckTokenResult{}
}

func (p *FrontendServiceCheckTokenResult) InitDefault() {
}

var FrontendServiceCheckTokenResult_Success_DEFAULT bool

func (p *FrontendServiceCheckTokenResult) GetSuccess() (v bool) {
	if !p.IsSetSuccess() {
		return FrontendServiceCheckTokenResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FrontendServiceCheckTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*bool)
}

var fieldIDToName_FrontendServiceCheckTokenResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceCheckTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceCheckTokenResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceCheckTokenResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceCheckTokenResult) ReadField0(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceCheckTokenResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("checkToken_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceCheckTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceCheckTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceCheckTokenResult(%+v)", *p)

}

func (p *FrontendServiceCheckTokenResult) DeepEqual(ano *FrontendServiceCheckTokenResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceCheckTokenResult) Field0DeepEqual(src *bool) bool {

	if p.Success == src {
		return true
	} else if p.Success == nil || src == nil {
		return false
	}
	if *p.Success != *src {
		return false
	}
	return true
}

type FrontendServiceConfirmUnusedRemoteFilesArgs struct {
	Request *TConfirmUnusedRemoteFilesRequest `thrift:"request,1" frugal:"1,default,TConfirmUnusedRemoteFilesRequest" json:"request"`
}

func NewFrontendServiceConfirmUnusedRemoteFilesArgs() *FrontendServiceConfirmUnusedRemoteFilesArgs {
	return &FrontendServiceConfirmUnusedRemoteFilesArgs{}
}

func (p *FrontendServiceConfirmUnusedRemoteFilesArgs) InitDefault() {
}

var FrontendServiceConfirmUnusedRemoteFilesArgs_Request_DEFAULT *TConfirmUnusedRemoteFilesRequest

func (p *FrontendServiceConfirmUnusedRemoteFilesArgs) GetRequest() (v *TConfirmUnusedRemoteFilesRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceConfirmUnusedRemoteFilesArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceConfirmUnusedRemoteFilesArgs) SetRequest(val *TConfirmUnusedRemoteFilesRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceConfirmUnusedRemoteFilesArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceConfirmUnusedRemoteFilesArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceConfirmUnusedRemoteFilesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceConfirmUnusedRemoteFilesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceConfirmUnusedRemoteFilesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTConfirmUnusedRemoteFilesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceConfirmUnusedRemoteFilesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("confirmUnusedRemoteFiles_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceConfirmUnusedRemoteFilesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceConfirmUnusedRemoteFilesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceConfirmUnusedRemoteFilesArgs(%+v)", *p)

}

func (p *FrontendServiceConfirmUnusedRemoteFilesArgs) DeepEqual(ano *FrontendServiceConfirmUnusedRemoteFilesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceConfirmUnusedRemoteFilesArgs) Field1DeepEqual(src *TConfirmUnusedRemoteFilesRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceConfirmUnusedRemoteFilesResult struct {
	Success *TConfirmUnusedRemoteFilesResult_ `thrift:"success,0,optional" frugal:"0,optional,TConfirmUnusedRemoteFilesResult_" json:"success,omitempty"`
}

func NewFrontendServiceConfirmUnusedRemoteFilesResult() *FrontendServiceConfirmUnusedRemoteFilesResult {
	return &FrontendServiceConfirmUnusedRemoteFilesResult{}
}

func (p *FrontendServiceConfirmUnusedRemoteFilesResult) InitDefault() {
}

var FrontendServiceConfirmUnusedRemoteFilesResult_Success_DEFAULT *TConfirmUnusedRemoteFilesResult_

func (p *FrontendServiceConfirmUnusedRemoteFilesResult) GetSuccess() (v *TConfirmUnusedRemoteFilesResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceConfirmUnusedRemoteFilesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceConfirmUnusedRemoteFilesResult) SetSuccess(x interface{}) {
	p.Success = x.(*TConfirmUnusedRemoteFilesResult_)
}

var fieldIDToName_FrontendServiceConfirmUnusedRemoteFilesResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceConfirmUnusedRemoteFilesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceConfirmUnusedRemoteFilesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceConfirmUnusedRemoteFilesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceConfirmUnusedRemoteFilesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTConfirmUnusedRemoteFilesResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceConfirmUnusedRemoteFilesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("confirmUnusedRemoteFiles_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceConfirmUnusedRemoteFilesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceConfirmUnusedRemoteFilesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceConfirmUnusedRemoteFilesResult(%+v)", *p)

}

func (p *FrontendServiceConfirmUnusedRemoteFilesResult) DeepEqual(ano *FrontendServiceConfirmUnusedRemoteFilesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceConfirmUnusedRemoteFilesResult) Field0DeepEqual(src *TConfirmUnusedRemoteFilesResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceCheckAuthArgs struct {
	Request *TCheckAuthRequest `thrift:"request,1" frugal:"1,default,TCheckAuthRequest" json:"request"`
}

func NewFrontendServiceCheckAuthArgs() *FrontendServiceCheckAuthArgs {
	return &FrontendServiceCheckAuthArgs{}
}

func (p *FrontendServiceCheckAuthArgs) InitDefault() {
}

var FrontendServiceCheckAuthArgs_Request_DEFAULT *TCheckAuthRequest

func (p *FrontendServiceCheckAuthArgs) GetRequest() (v *TCheckAuthRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceCheckAuthArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceCheckAuthArgs) SetRequest(val *TCheckAuthRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceCheckAuthArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceCheckAuthArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceCheckAuthArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceCheckAuthArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceCheckAuthArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTCheckAuthRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceCheckAuthArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("checkAuth_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceCheckAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceCheckAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceCheckAuthArgs(%+v)", *p)

}

func (p *FrontendServiceCheckAuthArgs) DeepEqual(ano *FrontendServiceCheckAuthArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceCheckAuthArgs) Field1DeepEqual(src *TCheckAuthRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceCheckAuthResult struct {
	Success *TCheckAuthResult_ `thrift:"success,0,optional" frugal:"0,optional,TCheckAuthResult_" json:"success,omitempty"`
}

func NewFrontendServiceCheckAuthResult() *FrontendServiceCheckAuthResult {
	return &FrontendServiceCheckAuthResult{}
}

func (p *FrontendServiceCheckAuthResult) InitDefault() {
}

var FrontendServiceCheckAuthResult_Success_DEFAULT *TCheckAuthResult_

func (p *FrontendServiceCheckAuthResult) GetSuccess() (v *TCheckAuthResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceCheckAuthResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceCheckAuthResult) SetSuccess(x interface{}) {
	p.Success = x.(*TCheckAuthResult_)
}

var fieldIDToName_FrontendServiceCheckAuthResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceCheckAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceCheckAuthResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceCheckAuthResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceCheckAuthResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTCheckAuthResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceCheckAuthResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("checkAuth_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceCheckAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceCheckAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceCheckAuthResult(%+v)", *p)

}

func (p *FrontendServiceCheckAuthResult) DeepEqual(ano *FrontendServiceCheckAuthResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceCheckAuthResult) Field0DeepEqual(src *TCheckAuthResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetQueryStatsArgs struct {
	Request *TGetQueryStatsRequest `thrift:"request,1" frugal:"1,default,TGetQueryStatsRequest" json:"request"`
}

func NewFrontendServiceGetQueryStatsArgs() *FrontendServiceGetQueryStatsArgs {
	return &FrontendServiceGetQueryStatsArgs{}
}

func (p *FrontendServiceGetQueryStatsArgs) InitDefault() {
}

var FrontendServiceGetQueryStatsArgs_Request_DEFAULT *TGetQueryStatsRequest

func (p *FrontendServiceGetQueryStatsArgs) GetRequest() (v *TGetQueryStatsRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceGetQueryStatsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceGetQueryStatsArgs) SetRequest(val *TGetQueryStatsRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceGetQueryStatsArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceGetQueryStatsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceGetQueryStatsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetQueryStatsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetQueryStatsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTGetQueryStatsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceGetQueryStatsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getQueryStats_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetQueryStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceGetQueryStatsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetQueryStatsArgs(%+v)", *p)

}

func (p *FrontendServiceGetQueryStatsArgs) DeepEqual(ano *FrontendServiceGetQueryStatsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceGetQueryStatsArgs) Field1DeepEqual(src *TGetQueryStatsRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetQueryStatsResult struct {
	Success *TQueryStatsResult_ `thrift:"success,0,optional" frugal:"0,optional,TQueryStatsResult_" json:"success,omitempty"`
}

func NewFrontendServiceGetQueryStatsResult() *FrontendServiceGetQueryStatsResult {
	return &FrontendServiceGetQueryStatsResult{}
}

func (p *FrontendServiceGetQueryStatsResult) InitDefault() {
}

var FrontendServiceGetQueryStatsResult_Success_DEFAULT *TQueryStatsResult_

func (p *FrontendServiceGetQueryStatsResult) GetSuccess() (v *TQueryStatsResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceGetQueryStatsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceGetQueryStatsResult) SetSuccess(x interface{}) {
	p.Success = x.(*TQueryStatsResult_)
}

var fieldIDToName_FrontendServiceGetQueryStatsResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceGetQueryStatsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceGetQueryStatsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetQueryStatsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetQueryStatsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTQueryStatsResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceGetQueryStatsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getQueryStats_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetQueryStatsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceGetQueryStatsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetQueryStatsResult(%+v)", *p)

}

func (p *FrontendServiceGetQueryStatsResult) DeepEqual(ano *FrontendServiceGetQueryStatsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceGetQueryStatsResult) Field0DeepEqual(src *TQueryStatsResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetTabletReplicaInfosArgs struct {
	Request *TGetTabletReplicaInfosRequest `thrift:"request,1" frugal:"1,default,TGetTabletReplicaInfosRequest" json:"request"`
}

func NewFrontendServiceGetTabletReplicaInfosArgs() *FrontendServiceGetTabletReplicaInfosArgs {
	return &FrontendServiceGetTabletReplicaInfosArgs{}
}

func (p *FrontendServiceGetTabletReplicaInfosArgs) InitDefault() {
}

var FrontendServiceGetTabletReplicaInfosArgs_Request_DEFAULT *TGetTabletReplicaInfosRequest

func (p *FrontendServiceGetTabletReplicaInfosArgs) GetRequest() (v *TGetTabletReplicaInfosRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceGetTabletReplicaInfosArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceGetTabletReplicaInfosArgs) SetRequest(val *TGetTabletReplicaInfosRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceGetTabletReplicaInfosArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceGetTabletReplicaInfosArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceGetTabletReplicaInfosArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetTabletReplicaInfosArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetTabletReplicaInfosArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTGetTabletReplicaInfosRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceGetTabletReplicaInfosArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getTabletReplicaInfos_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetTabletReplicaInfosArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceGetTabletReplicaInfosArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetTabletReplicaInfosArgs(%+v)", *p)

}

func (p *FrontendServiceGetTabletReplicaInfosArgs) DeepEqual(ano *FrontendServiceGetTabletReplicaInfosArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceGetTabletReplicaInfosArgs) Field1DeepEqual(src *TGetTabletReplicaInfosRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetTabletReplicaInfosResult struct {
	Success *TGetTabletReplicaInfosResult_ `thrift:"success,0,optional" frugal:"0,optional,TGetTabletReplicaInfosResult_" json:"success,omitempty"`
}

func NewFrontendServiceGetTabletReplicaInfosResult() *FrontendServiceGetTabletReplicaInfosResult {
	return &FrontendServiceGetTabletReplicaInfosResult{}
}

func (p *FrontendServiceGetTabletReplicaInfosResult) InitDefault() {
}

var FrontendServiceGetTabletReplicaInfosResult_Success_DEFAULT *TGetTabletReplicaInfosResult_

func (p *FrontendServiceGetTabletReplicaInfosResult) GetSuccess() (v *TGetTabletReplicaInfosResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceGetTabletReplicaInfosResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceGetTabletReplicaInfosResult) SetSuccess(x interface{}) {
	p.Success = x.(*TGetTabletReplicaInfosResult_)
}

var fieldIDToName_FrontendServiceGetTabletReplicaInfosResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceGetTabletReplicaInfosResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceGetTabletReplicaInfosResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetTabletReplicaInfosResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetTabletReplicaInfosResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTGetTabletReplicaInfosResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceGetTabletReplicaInfosResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getTabletReplicaInfos_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetTabletReplicaInfosResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceGetTabletReplicaInfosResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetTabletReplicaInfosResult(%+v)", *p)

}

func (p *FrontendServiceGetTabletReplicaInfosResult) DeepEqual(ano *FrontendServiceGetTabletReplicaInfosResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceGetTabletReplicaInfosResult) Field0DeepEqual(src *TGetTabletReplicaInfosResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceAddPlsqlStoredProcedureArgs struct {
	Request *TAddPlsqlStoredProcedureRequest `thrift:"request,1" frugal:"1,default,TAddPlsqlStoredProcedureRequest" json:"request"`
}

func NewFrontendServiceAddPlsqlStoredProcedureArgs() *FrontendServiceAddPlsqlStoredProcedureArgs {
	return &FrontendServiceAddPlsqlStoredProcedureArgs{}
}

func (p *FrontendServiceAddPlsqlStoredProcedureArgs) InitDefault() {
}

var FrontendServiceAddPlsqlStoredProcedureArgs_Request_DEFAULT *TAddPlsqlStoredProcedureRequest

func (p *FrontendServiceAddPlsqlStoredProcedureArgs) GetRequest() (v *TAddPlsqlStoredProcedureRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceAddPlsqlStoredProcedureArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceAddPlsqlStoredProcedureArgs) SetRequest(val *TAddPlsqlStoredProcedureRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceAddPlsqlStoredProcedureArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceAddPlsqlStoredProcedureArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceAddPlsqlStoredProcedureArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceAddPlsqlStoredProcedureArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceAddPlsqlStoredProcedureArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTAddPlsqlStoredProcedureRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceAddPlsqlStoredProcedureArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("addPlsqlStoredProcedure_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceAddPlsqlStoredProcedureArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceAddPlsqlStoredProcedureArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceAddPlsqlStoredProcedureArgs(%+v)", *p)

}

func (p *FrontendServiceAddPlsqlStoredProcedureArgs) DeepEqual(ano *FrontendServiceAddPlsqlStoredProcedureArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceAddPlsqlStoredProcedureArgs) Field1DeepEqual(src *TAddPlsqlStoredProcedureRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceAddPlsqlStoredProcedureResult struct {
	Success *TPlsqlStoredProcedureResult_ `thrift:"success,0,optional" frugal:"0,optional,TPlsqlStoredProcedureResult_" json:"success,omitempty"`
}

func NewFrontendServiceAddPlsqlStoredProcedureResult() *FrontendServiceAddPlsqlStoredProcedureResult {
	return &FrontendServiceAddPlsqlStoredProcedureResult{}
}

func (p *FrontendServiceAddPlsqlStoredProcedureResult) InitDefault() {
}

var FrontendServiceAddPlsqlStoredProcedureResult_Success_DEFAULT *TPlsqlStoredProcedureResult_

func (p *FrontendServiceAddPlsqlStoredProcedureResult) GetSuccess() (v *TPlsqlStoredProcedureResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceAddPlsqlStoredProcedureResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceAddPlsqlStoredProcedureResult) SetSuccess(x interface{}) {
	p.Success = x.(*TPlsqlStoredProcedureResult_)
}

var fieldIDToName_FrontendServiceAddPlsqlStoredProcedureResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceAddPlsqlStoredProcedureResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceAddPlsqlStoredProcedureResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceAddPlsqlStoredProcedureResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceAddPlsqlStoredProcedureResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTPlsqlStoredProcedureResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceAddPlsqlStoredProcedureResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("addPlsqlStoredProcedure_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceAddPlsqlStoredProcedureResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceAddPlsqlStoredProcedureResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceAddPlsqlStoredProcedureResult(%+v)", *p)

}

func (p *FrontendServiceAddPlsqlStoredProcedureResult) DeepEqual(ano *FrontendServiceAddPlsqlStoredProcedureResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceAddPlsqlStoredProcedureResult) Field0DeepEqual(src *TPlsqlStoredProcedureResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceDropPlsqlStoredProcedureArgs struct {
	Request *TDropPlsqlStoredProcedureRequest `thrift:"request,1" frugal:"1,default,TDropPlsqlStoredProcedureRequest" json:"request"`
}

func NewFrontendServiceDropPlsqlStoredProcedureArgs() *FrontendServiceDropPlsqlStoredProcedureArgs {
	return &FrontendServiceDropPlsqlStoredProcedureArgs{}
}

func (p *FrontendServiceDropPlsqlStoredProcedureArgs) InitDefault() {
}

var FrontendServiceDropPlsqlStoredProcedureArgs_Request_DEFAULT *TDropPlsqlStoredProcedureRequest

func (p *FrontendServiceDropPlsqlStoredProcedureArgs) GetRequest() (v *TDropPlsqlStoredProcedureRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceDropPlsqlStoredProcedureArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceDropPlsqlStoredProcedureArgs) SetRequest(val *TDropPlsqlStoredProcedureRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceDropPlsqlStoredProcedureArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceDropPlsqlStoredProcedureArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceDropPlsqlStoredProcedureArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceDropPlsqlStoredProcedureArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceDropPlsqlStoredProcedureArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTDropPlsqlStoredProcedureRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceDropPlsqlStoredProcedureArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("dropPlsqlStoredProcedure_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceDropPlsqlStoredProcedureArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceDropPlsqlStoredProcedureArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceDropPlsqlStoredProcedureArgs(%+v)", *p)

}

func (p *FrontendServiceDropPlsqlStoredProcedureArgs) DeepEqual(ano *FrontendServiceDropPlsqlStoredProcedureArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceDropPlsqlStoredProcedureArgs) Field1DeepEqual(src *TDropPlsqlStoredProcedureRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceDropPlsqlStoredProcedureResult struct {
	Success *TPlsqlStoredProcedureResult_ `thrift:"success,0,optional" frugal:"0,optional,TPlsqlStoredProcedureResult_" json:"success,omitempty"`
}

func NewFrontendServiceDropPlsqlStoredProcedureResult() *FrontendServiceDropPlsqlStoredProcedureResult {
	return &FrontendServiceDropPlsqlStoredProcedureResult{}
}

func (p *FrontendServiceDropPlsqlStoredProcedureResult) InitDefault() {
}

var FrontendServiceDropPlsqlStoredProcedureResult_Success_DEFAULT *TPlsqlStoredProcedureResult_

func (p *FrontendServiceDropPlsqlStoredProcedureResult) GetSuccess() (v *TPlsqlStoredProcedureResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceDropPlsqlStoredProcedureResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceDropPlsqlStoredProcedureResult) SetSuccess(x interface{}) {
	p.Success = x.(*TPlsqlStoredProcedureResult_)
}

var fieldIDToName_FrontendServiceDropPlsqlStoredProcedureResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceDropPlsqlStoredProcedureResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceDropPlsqlStoredProcedureResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceDropPlsqlStoredProcedureResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceDropPlsqlStoredProcedureResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTPlsqlStoredProcedureResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceDropPlsqlStoredProcedureResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("dropPlsqlStoredProcedure_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceDropPlsqlStoredProcedureResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceDropPlsqlStoredProcedureResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceDropPlsqlStoredProcedureResult(%+v)", *p)

}

func (p *FrontendServiceDropPlsqlStoredProcedureResult) DeepEqual(ano *FrontendServiceDropPlsqlStoredProcedureResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceDropPlsqlStoredProcedureResult) Field0DeepEqual(src *TPlsqlStoredProcedureResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceAddPlsqlPackageArgs struct {
	Request *TAddPlsqlPackageRequest `thrift:"request,1" frugal:"1,default,TAddPlsqlPackageRequest" json:"request"`
}

func NewFrontendServiceAddPlsqlPackageArgs() *FrontendServiceAddPlsqlPackageArgs {
	return &FrontendServiceAddPlsqlPackageArgs{}
}

func (p *FrontendServiceAddPlsqlPackageArgs) InitDefault() {
}

var FrontendServiceAddPlsqlPackageArgs_Request_DEFAULT *TAddPlsqlPackageRequest

func (p *FrontendServiceAddPlsqlPackageArgs) GetRequest() (v *TAddPlsqlPackageRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceAddPlsqlPackageArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceAddPlsqlPackageArgs) SetRequest(val *TAddPlsqlPackageRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceAddPlsqlPackageArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceAddPlsqlPackageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceAddPlsqlPackageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceAddPlsqlPackageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceAddPlsqlPackageArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTAddPlsqlPackageRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceAddPlsqlPackageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("addPlsqlPackage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceAddPlsqlPackageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceAddPlsqlPackageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceAddPlsqlPackageArgs(%+v)", *p)

}

func (p *FrontendServiceAddPlsqlPackageArgs) DeepEqual(ano *FrontendServiceAddPlsqlPackageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceAddPlsqlPackageArgs) Field1DeepEqual(src *TAddPlsqlPackageRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceAddPlsqlPackageResult struct {
	Success *TPlsqlPackageResult_ `thrift:"success,0,optional" frugal:"0,optional,TPlsqlPackageResult_" json:"success,omitempty"`
}

func NewFrontendServiceAddPlsqlPackageResult() *FrontendServiceAddPlsqlPackageResult {
	return &FrontendServiceAddPlsqlPackageResult{}
}

func (p *FrontendServiceAddPlsqlPackageResult) InitDefault() {
}

var FrontendServiceAddPlsqlPackageResult_Success_DEFAULT *TPlsqlPackageResult_

func (p *FrontendServiceAddPlsqlPackageResult) GetSuccess() (v *TPlsqlPackageResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceAddPlsqlPackageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceAddPlsqlPackageResult) SetSuccess(x interface{}) {
	p.Success = x.(*TPlsqlPackageResult_)
}

var fieldIDToName_FrontendServiceAddPlsqlPackageResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceAddPlsqlPackageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceAddPlsqlPackageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceAddPlsqlPackageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceAddPlsqlPackageResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTPlsqlPackageResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceAddPlsqlPackageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("addPlsqlPackage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceAddPlsqlPackageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceAddPlsqlPackageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceAddPlsqlPackageResult(%+v)", *p)

}

func (p *FrontendServiceAddPlsqlPackageResult) DeepEqual(ano *FrontendServiceAddPlsqlPackageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceAddPlsqlPackageResult) Field0DeepEqual(src *TPlsqlPackageResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceDropPlsqlPackageArgs struct {
	Request *TDropPlsqlPackageRequest `thrift:"request,1" frugal:"1,default,TDropPlsqlPackageRequest" json:"request"`
}

func NewFrontendServiceDropPlsqlPackageArgs() *FrontendServiceDropPlsqlPackageArgs {
	return &FrontendServiceDropPlsqlPackageArgs{}
}

func (p *FrontendServiceDropPlsqlPackageArgs) InitDefault() {
}

var FrontendServiceDropPlsqlPackageArgs_Request_DEFAULT *TDropPlsqlPackageRequest

func (p *FrontendServiceDropPlsqlPackageArgs) GetRequest() (v *TDropPlsqlPackageRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceDropPlsqlPackageArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceDropPlsqlPackageArgs) SetRequest(val *TDropPlsqlPackageRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceDropPlsqlPackageArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceDropPlsqlPackageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceDropPlsqlPackageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceDropPlsqlPackageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceDropPlsqlPackageArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTDropPlsqlPackageRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceDropPlsqlPackageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("dropPlsqlPackage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceDropPlsqlPackageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceDropPlsqlPackageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceDropPlsqlPackageArgs(%+v)", *p)

}

func (p *FrontendServiceDropPlsqlPackageArgs) DeepEqual(ano *FrontendServiceDropPlsqlPackageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceDropPlsqlPackageArgs) Field1DeepEqual(src *TDropPlsqlPackageRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceDropPlsqlPackageResult struct {
	Success *TPlsqlPackageResult_ `thrift:"success,0,optional" frugal:"0,optional,TPlsqlPackageResult_" json:"success,omitempty"`
}

func NewFrontendServiceDropPlsqlPackageResult() *FrontendServiceDropPlsqlPackageResult {
	return &FrontendServiceDropPlsqlPackageResult{}
}

func (p *FrontendServiceDropPlsqlPackageResult) InitDefault() {
}

var FrontendServiceDropPlsqlPackageResult_Success_DEFAULT *TPlsqlPackageResult_

func (p *FrontendServiceDropPlsqlPackageResult) GetSuccess() (v *TPlsqlPackageResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceDropPlsqlPackageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceDropPlsqlPackageResult) SetSuccess(x interface{}) {
	p.Success = x.(*TPlsqlPackageResult_)
}

var fieldIDToName_FrontendServiceDropPlsqlPackageResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceDropPlsqlPackageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceDropPlsqlPackageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceDropPlsqlPackageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceDropPlsqlPackageResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTPlsqlPackageResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceDropPlsqlPackageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("dropPlsqlPackage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceDropPlsqlPackageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceDropPlsqlPackageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceDropPlsqlPackageResult(%+v)", *p)

}

func (p *FrontendServiceDropPlsqlPackageResult) DeepEqual(ano *FrontendServiceDropPlsqlPackageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceDropPlsqlPackageResult) Field0DeepEqual(src *TPlsqlPackageResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetMasterTokenArgs struct {
	Request *TGetMasterTokenRequest `thrift:"request,1" frugal:"1,default,TGetMasterTokenRequest" json:"request"`
}

func NewFrontendServiceGetMasterTokenArgs() *FrontendServiceGetMasterTokenArgs {
	return &FrontendServiceGetMasterTokenArgs{}
}

func (p *FrontendServiceGetMasterTokenArgs) InitDefault() {
}

var FrontendServiceGetMasterTokenArgs_Request_DEFAULT *TGetMasterTokenRequest

func (p *FrontendServiceGetMasterTokenArgs) GetRequest() (v *TGetMasterTokenRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceGetMasterTokenArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceGetMasterTokenArgs) SetRequest(val *TGetMasterTokenRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceGetMasterTokenArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceGetMasterTokenArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceGetMasterTokenArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetMasterTokenArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetMasterTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTGetMasterTokenRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceGetMasterTokenArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getMasterToken_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetMasterTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceGetMasterTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetMasterTokenArgs(%+v)", *p)

}

func (p *FrontendServiceGetMasterTokenArgs) DeepEqual(ano *FrontendServiceGetMasterTokenArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceGetMasterTokenArgs) Field1DeepEqual(src *TGetMasterTokenRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetMasterTokenResult struct {
	Success *TGetMasterTokenResult_ `thrift:"success,0,optional" frugal:"0,optional,TGetMasterTokenResult_" json:"success,omitempty"`
}

func NewFrontendServiceGetMasterTokenResult() *FrontendServiceGetMasterTokenResult {
	return &FrontendServiceGetMasterTokenResult{}
}

func (p *FrontendServiceGetMasterTokenResult) InitDefault() {
}

var FrontendServiceGetMasterTokenResult_Success_DEFAULT *TGetMasterTokenResult_

func (p *FrontendServiceGetMasterTokenResult) GetSuccess() (v *TGetMasterTokenResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceGetMasterTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceGetMasterTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*TGetMasterTokenResult_)
}

var fieldIDToName_FrontendServiceGetMasterTokenResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceGetMasterTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceGetMasterTokenResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetMasterTokenResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetMasterTokenResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTGetMasterTokenResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceGetMasterTokenResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getMasterToken_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetMasterTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceGetMasterTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetMasterTokenResult(%+v)", *p)

}

func (p *FrontendServiceGetMasterTokenResult) DeepEqual(ano *FrontendServiceGetMasterTokenResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceGetMasterTokenResult) Field0DeepEqual(src *TGetMasterTokenResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetBinlogLagArgs struct {
	Request *TGetBinlogLagRequest `thrift:"request,1" frugal:"1,default,TGetBinlogRequest" json:"request"`
}

func NewFrontendServiceGetBinlogLagArgs() *FrontendServiceGetBinlogLagArgs {
	return &FrontendServiceGetBinlogLagArgs{}
}

func (p *FrontendServiceGetBinlogLagArgs) InitDefault() {
}

var FrontendServiceGetBinlogLagArgs_Request_DEFAULT *TGetBinlogLagRequest

func (p *FrontendServiceGetBinlogLagArgs) GetRequest() (v *TGetBinlogLagRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceGetBinlogLagArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceGetBinlogLagArgs) SetRequest(val *TGetBinlogLagRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceGetBinlogLagArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceGetBinlogLagArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceGetBinlogLagArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetBinlogLagArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetBinlogLagArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTGetBinlogLagRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceGetBinlogLagArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getBinlogLag_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetBinlogLagArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceGetBinlogLagArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetBinlogLagArgs(%+v)", *p)

}

func (p *FrontendServiceGetBinlogLagArgs) DeepEqual(ano *FrontendServiceGetBinlogLagArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceGetBinlogLagArgs) Field1DeepEqual(src *TGetBinlogLagRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetBinlogLagResult struct {
	Success *TGetBinlogLagResult_ `thrift:"success,0,optional" frugal:"0,optional,TGetBinlogLagResult_" json:"success,omitempty"`
}

func NewFrontendServiceGetBinlogLagResult() *FrontendServiceGetBinlogLagResult {
	return &FrontendServiceGetBinlogLagResult{}
}

func (p *FrontendServiceGetBinlogLagResult) InitDefault() {
}

var FrontendServiceGetBinlogLagResult_Success_DEFAULT *TGetBinlogLagResult_

func (p *FrontendServiceGetBinlogLagResult) GetSuccess() (v *TGetBinlogLagResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceGetBinlogLagResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceGetBinlogLagResult) SetSuccess(x interface{}) {
	p.Success = x.(*TGetBinlogLagResult_)
}

var fieldIDToName_FrontendServiceGetBinlogLagResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceGetBinlogLagResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceGetBinlogLagResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetBinlogLagResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetBinlogLagResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTGetBinlogLagResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceGetBinlogLagResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getBinlogLag_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetBinlogLagResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceGetBinlogLagResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetBinlogLagResult(%+v)", *p)

}

func (p *FrontendServiceGetBinlogLagResult) DeepEqual(ano *FrontendServiceGetBinlogLagResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceGetBinlogLagResult) Field0DeepEqual(src *TGetBinlogLagResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceUpdateStatsCacheArgs struct {
	Request *TUpdateFollowerStatsCacheRequest `thrift:"request,1" frugal:"1,default,TUpdateFollowerStatsCacheRequest" json:"request"`
}

func NewFrontendServiceUpdateStatsCacheArgs() *FrontendServiceUpdateStatsCacheArgs {
	return &FrontendServiceUpdateStatsCacheArgs{}
}

func (p *FrontendServiceUpdateStatsCacheArgs) InitDefault() {
}

var FrontendServiceUpdateStatsCacheArgs_Request_DEFAULT *TUpdateFollowerStatsCacheRequest

func (p *FrontendServiceUpdateStatsCacheArgs) GetRequest() (v *TUpdateFollowerStatsCacheRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceUpdateStatsCacheArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceUpdateStatsCacheArgs) SetRequest(val *TUpdateFollowerStatsCacheRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceUpdateStatsCacheArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceUpdateStatsCacheArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceUpdateStatsCacheArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceUpdateStatsCacheArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceUpdateStatsCacheArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTUpdateFollowerStatsCacheRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceUpdateStatsCacheArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("updateStatsCache_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceUpdateStatsCacheArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceUpdateStatsCacheArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceUpdateStatsCacheArgs(%+v)", *p)

}

func (p *FrontendServiceUpdateStatsCacheArgs) DeepEqual(ano *FrontendServiceUpdateStatsCacheArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceUpdateStatsCacheArgs) Field1DeepEqual(src *TUpdateFollowerStatsCacheRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceUpdateStatsCacheResult struct {
	Success *status.TStatus `thrift:"success,0,optional" frugal:"0,optional,status.TStatus" json:"success,omitempty"`
}

func NewFrontendServiceUpdateStatsCacheResult() *FrontendServiceUpdateStatsCacheResult {
	return &FrontendServiceUpdateStatsCacheResult{}
}

func (p *FrontendServiceUpdateStatsCacheResult) InitDefault() {
}

var FrontendServiceUpdateStatsCacheResult_Success_DEFAULT *status.TStatus

func (p *FrontendServiceUpdateStatsCacheResult) GetSuccess() (v *status.TStatus) {
	if !p.IsSetSuccess() {
		return FrontendServiceUpdateStatsCacheResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceUpdateStatsCacheResult) SetSuccess(x interface{}) {
	p.Success = x.(*status.TStatus)
}

var fieldIDToName_FrontendServiceUpdateStatsCacheResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceUpdateStatsCacheResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceUpdateStatsCacheResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceUpdateStatsCacheResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceUpdateStatsCacheResult) ReadField0(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceUpdateStatsCacheResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("updateStatsCache_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceUpdateStatsCacheResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceUpdateStatsCacheResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceUpdateStatsCacheResult(%+v)", *p)

}

func (p *FrontendServiceUpdateStatsCacheResult) DeepEqual(ano *FrontendServiceUpdateStatsCacheResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceUpdateStatsCacheResult) Field0DeepEqual(src *status.TStatus) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetAutoIncrementRangeArgs struct {
	Request *TAutoIncrementRangeRequest `thrift:"request,1" frugal:"1,default,TAutoIncrementRangeRequest" json:"request"`
}

func NewFrontendServiceGetAutoIncrementRangeArgs() *FrontendServiceGetAutoIncrementRangeArgs {
	return &FrontendServiceGetAutoIncrementRangeArgs{}
}

func (p *FrontendServiceGetAutoIncrementRangeArgs) InitDefault() {
}

var FrontendServiceGetAutoIncrementRangeArgs_Request_DEFAULT *TAutoIncrementRangeRequest

func (p *FrontendServiceGetAutoIncrementRangeArgs) GetRequest() (v *TAutoIncrementRangeRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceGetAutoIncrementRangeArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceGetAutoIncrementRangeArgs) SetRequest(val *TAutoIncrementRangeRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceGetAutoIncrementRangeArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceGetAutoIncrementRangeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceGetAutoIncrementRangeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetAutoIncrementRangeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetAutoIncrementRangeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTAutoIncrementRangeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceGetAutoIncrementRangeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getAutoIncrementRange_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetAutoIncrementRangeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceGetAutoIncrementRangeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetAutoIncrementRangeArgs(%+v)", *p)

}

func (p *FrontendServiceGetAutoIncrementRangeArgs) DeepEqual(ano *FrontendServiceGetAutoIncrementRangeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceGetAutoIncrementRangeArgs) Field1DeepEqual(src *TAutoIncrementRangeRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetAutoIncrementRangeResult struct {
	Success *TAutoIncrementRangeResult_ `thrift:"success,0,optional" frugal:"0,optional,TAutoIncrementRangeResult_" json:"success,omitempty"`
}

func NewFrontendServiceGetAutoIncrementRangeResult() *FrontendServiceGetAutoIncrementRangeResult {
	return &FrontendServiceGetAutoIncrementRangeResult{}
}

func (p *FrontendServiceGetAutoIncrementRangeResult) InitDefault() {
}

var FrontendServiceGetAutoIncrementRangeResult_Success_DEFAULT *TAutoIncrementRangeResult_

func (p *FrontendServiceGetAutoIncrementRangeResult) GetSuccess() (v *TAutoIncrementRangeResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceGetAutoIncrementRangeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceGetAutoIncrementRangeResult) SetSuccess(x interface{}) {
	p.Success = x.(*TAutoIncrementRangeResult_)
}

var fieldIDToName_FrontendServiceGetAutoIncrementRangeResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceGetAutoIncrementRangeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceGetAutoIncrementRangeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetAutoIncrementRangeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetAutoIncrementRangeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTAutoIncrementRangeResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceGetAutoIncrementRangeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getAutoIncrementRange_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetAutoIncrementRangeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceGetAutoIncrementRangeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetAutoIncrementRangeResult(%+v)", *p)

}

func (p *FrontendServiceGetAutoIncrementRangeResult) DeepEqual(ano *FrontendServiceGetAutoIncrementRangeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceGetAutoIncrementRangeResult) Field0DeepEqual(src *TAutoIncrementRangeResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceCreatePartitionArgs struct {
	Request *TCreatePartitionRequest `thrift:"request,1" frugal:"1,default,TCreatePartitionRequest" json:"request"`
}

func NewFrontendServiceCreatePartitionArgs() *FrontendServiceCreatePartitionArgs {
	return &FrontendServiceCreatePartitionArgs{}
}

func (p *FrontendServiceCreatePartitionArgs) InitDefault() {
}

var FrontendServiceCreatePartitionArgs_Request_DEFAULT *TCreatePartitionRequest

func (p *FrontendServiceCreatePartitionArgs) GetRequest() (v *TCreatePartitionRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceCreatePartitionArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceCreatePartitionArgs) SetRequest(val *TCreatePartitionRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceCreatePartitionArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceCreatePartitionArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceCreatePartitionArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceCreatePartitionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceCreatePartitionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTCreatePartitionRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceCreatePartitionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("createPartition_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceCreatePartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceCreatePartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceCreatePartitionArgs(%+v)", *p)

}

func (p *FrontendServiceCreatePartitionArgs) DeepEqual(ano *FrontendServiceCreatePartitionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceCreatePartitionArgs) Field1DeepEqual(src *TCreatePartitionRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceCreatePartitionResult struct {
	Success *TCreatePartitionResult_ `thrift:"success,0,optional" frugal:"0,optional,TCreatePartitionResult_" json:"success,omitempty"`
}

func NewFrontendServiceCreatePartitionResult() *FrontendServiceCreatePartitionResult {
	return &FrontendServiceCreatePartitionResult{}
}

func (p *FrontendServiceCreatePartitionResult) InitDefault() {
}

var FrontendServiceCreatePartitionResult_Success_DEFAULT *TCreatePartitionResult_

func (p *FrontendServiceCreatePartitionResult) GetSuccess() (v *TCreatePartitionResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceCreatePartitionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceCreatePartitionResult) SetSuccess(x interface{}) {
	p.Success = x.(*TCreatePartitionResult_)
}

var fieldIDToName_FrontendServiceCreatePartitionResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceCreatePartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceCreatePartitionResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceCreatePartitionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceCreatePartitionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTCreatePartitionResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceCreatePartitionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("createPartition_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceCreatePartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceCreatePartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceCreatePartitionResult(%+v)", *p)

}

func (p *FrontendServiceCreatePartitionResult) DeepEqual(ano *FrontendServiceCreatePartitionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceCreatePartitionResult) Field0DeepEqual(src *TCreatePartitionResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceReplacePartitionArgs struct {
	Request *TReplacePartitionRequest `thrift:"request,1" frugal:"1,default,TReplacePartitionRequest" json:"request"`
}

func NewFrontendServiceReplacePartitionArgs() *FrontendServiceReplacePartitionArgs {
	return &FrontendServiceReplacePartitionArgs{}
}

func (p *FrontendServiceReplacePartitionArgs) InitDefault() {
}

var FrontendServiceReplacePartitionArgs_Request_DEFAULT *TReplacePartitionRequest

func (p *FrontendServiceReplacePartitionArgs) GetRequest() (v *TReplacePartitionRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceReplacePartitionArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceReplacePartitionArgs) SetRequest(val *TReplacePartitionRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceReplacePartitionArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceReplacePartitionArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceReplacePartitionArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceReplacePartitionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceReplacePartitionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTReplacePartitionRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceReplacePartitionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("replacePartition_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceReplacePartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceReplacePartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceReplacePartitionArgs(%+v)", *p)

}

func (p *FrontendServiceReplacePartitionArgs) DeepEqual(ano *FrontendServiceReplacePartitionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceReplacePartitionArgs) Field1DeepEqual(src *TReplacePartitionRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceReplacePartitionResult struct {
	Success *TReplacePartitionResult_ `thrift:"success,0,optional" frugal:"0,optional,TReplacePartitionResult_" json:"success,omitempty"`
}

func NewFrontendServiceReplacePartitionResult() *FrontendServiceReplacePartitionResult {
	return &FrontendServiceReplacePartitionResult{}
}

func (p *FrontendServiceReplacePartitionResult) InitDefault() {
}

var FrontendServiceReplacePartitionResult_Success_DEFAULT *TReplacePartitionResult_

func (p *FrontendServiceReplacePartitionResult) GetSuccess() (v *TReplacePartitionResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceReplacePartitionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceReplacePartitionResult) SetSuccess(x interface{}) {
	p.Success = x.(*TReplacePartitionResult_)
}

var fieldIDToName_FrontendServiceReplacePartitionResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceReplacePartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceReplacePartitionResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceReplacePartitionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceReplacePartitionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTReplacePartitionResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceReplacePartitionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("replacePartition_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceReplacePartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceReplacePartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceReplacePartitionResult(%+v)", *p)

}

func (p *FrontendServiceReplacePartitionResult) DeepEqual(ano *FrontendServiceReplacePartitionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceReplacePartitionResult) Field0DeepEqual(src *TReplacePartitionResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetMetaArgs struct {
	Request *TGetMetaRequest `thrift:"request,1" frugal:"1,default,TGetMetaRequest" json:"request"`
}

func NewFrontendServiceGetMetaArgs() *FrontendServiceGetMetaArgs {
	return &FrontendServiceGetMetaArgs{}
}

func (p *FrontendServiceGetMetaArgs) InitDefault() {
}

var FrontendServiceGetMetaArgs_Request_DEFAULT *TGetMetaRequest

func (p *FrontendServiceGetMetaArgs) GetRequest() (v *TGetMetaRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceGetMetaArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceGetMetaArgs) SetRequest(val *TGetMetaRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceGetMetaArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceGetMetaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceGetMetaArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetMetaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetMetaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTGetMetaRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceGetMetaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getMeta_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetMetaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceGetMetaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetMetaArgs(%+v)", *p)

}

func (p *FrontendServiceGetMetaArgs) DeepEqual(ano *FrontendServiceGetMetaArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceGetMetaArgs) Field1DeepEqual(src *TGetMetaRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetMetaResult struct {
	Success *TGetMetaResult_ `thrift:"success,0,optional" frugal:"0,optional,TGetMetaResult_" json:"success,omitempty"`
}

func NewFrontendServiceGetMetaResult() *FrontendServiceGetMetaResult {
	return &FrontendServiceGetMetaResult{}
}

func (p *FrontendServiceGetMetaResult) InitDefault() {
}

var FrontendServiceGetMetaResult_Success_DEFAULT *TGetMetaResult_

func (p *FrontendServiceGetMetaResult) GetSuccess() (v *TGetMetaResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceGetMetaResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceGetMetaResult) SetSuccess(x interface{}) {
	p.Success = x.(*TGetMetaResult_)
}

var fieldIDToName_FrontendServiceGetMetaResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceGetMetaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceGetMetaResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetMetaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetMetaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTGetMetaResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceGetMetaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getMeta_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetMetaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceGetMetaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetMetaResult(%+v)", *p)

}

func (p *FrontendServiceGetMetaResult) DeepEqual(ano *FrontendServiceGetMetaResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceGetMetaResult) Field0DeepEqual(src *TGetMetaResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetBackendMetaArgs struct {
	Request *TGetBackendMetaRequest `thrift:"request,1" frugal:"1,default,TGetBackendMetaRequest" json:"request"`
}

func NewFrontendServiceGetBackendMetaArgs() *FrontendServiceGetBackendMetaArgs {
	return &FrontendServiceGetBackendMetaArgs{}
}

func (p *FrontendServiceGetBackendMetaArgs) InitDefault() {
}

var FrontendServiceGetBackendMetaArgs_Request_DEFAULT *TGetBackendMetaRequest

func (p *FrontendServiceGetBackendMetaArgs) GetRequest() (v *TGetBackendMetaRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceGetBackendMetaArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceGetBackendMetaArgs) SetRequest(val *TGetBackendMetaRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceGetBackendMetaArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceGetBackendMetaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceGetBackendMetaArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetBackendMetaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetBackendMetaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTGetBackendMetaRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceGetBackendMetaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getBackendMeta_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetBackendMetaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceGetBackendMetaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetBackendMetaArgs(%+v)", *p)

}

func (p *FrontendServiceGetBackendMetaArgs) DeepEqual(ano *FrontendServiceGetBackendMetaArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceGetBackendMetaArgs) Field1DeepEqual(src *TGetBackendMetaRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetBackendMetaResult struct {
	Success *TGetBackendMetaResult_ `thrift:"success,0,optional" frugal:"0,optional,TGetBackendMetaResult_" json:"success,omitempty"`
}

func NewFrontendServiceGetBackendMetaResult() *FrontendServiceGetBackendMetaResult {
	return &FrontendServiceGetBackendMetaResult{}
}

func (p *FrontendServiceGetBackendMetaResult) InitDefault() {
}

var FrontendServiceGetBackendMetaResult_Success_DEFAULT *TGetBackendMetaResult_

func (p *FrontendServiceGetBackendMetaResult) GetSuccess() (v *TGetBackendMetaResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceGetBackendMetaResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceGetBackendMetaResult) SetSuccess(x interface{}) {
	p.Success = x.(*TGetBackendMetaResult_)
}

var fieldIDToName_FrontendServiceGetBackendMetaResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceGetBackendMetaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceGetBackendMetaResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetBackendMetaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetBackendMetaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTGetBackendMetaResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceGetBackendMetaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getBackendMeta_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetBackendMetaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceGetBackendMetaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetBackendMetaResult(%+v)", *p)

}

func (p *FrontendServiceGetBackendMetaResult) DeepEqual(ano *FrontendServiceGetBackendMetaResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceGetBackendMetaResult) Field0DeepEqual(src *TGetBackendMetaResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetColumnInfoArgs struct {
	Request *TGetColumnInfoRequest `thrift:"request,1" frugal:"1,default,TGetColumnInfoRequest" json:"request"`
}

func NewFrontendServiceGetColumnInfoArgs() *FrontendServiceGetColumnInfoArgs {
	return &FrontendServiceGetColumnInfoArgs{}
}

func (p *FrontendServiceGetColumnInfoArgs) InitDefault() {
}

var FrontendServiceGetColumnInfoArgs_Request_DEFAULT *TGetColumnInfoRequest

func (p *FrontendServiceGetColumnInfoArgs) GetRequest() (v *TGetColumnInfoRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceGetColumnInfoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceGetColumnInfoArgs) SetRequest(val *TGetColumnInfoRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceGetColumnInfoArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceGetColumnInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceGetColumnInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetColumnInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetColumnInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTGetColumnInfoRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceGetColumnInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getColumnInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetColumnInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceGetColumnInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetColumnInfoArgs(%+v)", *p)

}

func (p *FrontendServiceGetColumnInfoArgs) DeepEqual(ano *FrontendServiceGetColumnInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceGetColumnInfoArgs) Field1DeepEqual(src *TGetColumnInfoRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceGetColumnInfoResult struct {
	Success *TGetColumnInfoResult_ `thrift:"success,0,optional" frugal:"0,optional,TGetColumnInfoResult_" json:"success,omitempty"`
}

func NewFrontendServiceGetColumnInfoResult() *FrontendServiceGetColumnInfoResult {
	return &FrontendServiceGetColumnInfoResult{}
}

func (p *FrontendServiceGetColumnInfoResult) InitDefault() {
}

var FrontendServiceGetColumnInfoResult_Success_DEFAULT *TGetColumnInfoResult_

func (p *FrontendServiceGetColumnInfoResult) GetSuccess() (v *TGetColumnInfoResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceGetColumnInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceGetColumnInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*TGetColumnInfoResult_)
}

var fieldIDToName_FrontendServiceGetColumnInfoResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceGetColumnInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceGetColumnInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceGetColumnInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceGetColumnInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTGetColumnInfoResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceGetColumnInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getColumnInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceGetColumnInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceGetColumnInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceGetColumnInfoResult(%+v)", *p)

}

func (p *FrontendServiceGetColumnInfoResult) DeepEqual(ano *FrontendServiceGetColumnInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceGetColumnInfoResult) Field0DeepEqual(src *TGetColumnInfoResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceInvalidateStatsCacheArgs struct {
	Request *TInvalidateFollowerStatsCacheRequest `thrift:"request,1" frugal:"1,default,TInvalidateFollowerStatsCacheRequest" json:"request"`
}

func NewFrontendServiceInvalidateStatsCacheArgs() *FrontendServiceInvalidateStatsCacheArgs {
	return &FrontendServiceInvalidateStatsCacheArgs{}
}

func (p *FrontendServiceInvalidateStatsCacheArgs) InitDefault() {
}

var FrontendServiceInvalidateStatsCacheArgs_Request_DEFAULT *TInvalidateFollowerStatsCacheRequest

func (p *FrontendServiceInvalidateStatsCacheArgs) GetRequest() (v *TInvalidateFollowerStatsCacheRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceInvalidateStatsCacheArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceInvalidateStatsCacheArgs) SetRequest(val *TInvalidateFollowerStatsCacheRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceInvalidateStatsCacheArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceInvalidateStatsCacheArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceInvalidateStatsCacheArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceInvalidateStatsCacheArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceInvalidateStatsCacheArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTInvalidateFollowerStatsCacheRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceInvalidateStatsCacheArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("invalidateStatsCache_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceInvalidateStatsCacheArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceInvalidateStatsCacheArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceInvalidateStatsCacheArgs(%+v)", *p)

}

func (p *FrontendServiceInvalidateStatsCacheArgs) DeepEqual(ano *FrontendServiceInvalidateStatsCacheArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceInvalidateStatsCacheArgs) Field1DeepEqual(src *TInvalidateFollowerStatsCacheRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceInvalidateStatsCacheResult struct {
	Success *status.TStatus `thrift:"success,0,optional" frugal:"0,optional,status.TStatus" json:"success,omitempty"`
}

func NewFrontendServiceInvalidateStatsCacheResult() *FrontendServiceInvalidateStatsCacheResult {
	return &FrontendServiceInvalidateStatsCacheResult{}
}

func (p *FrontendServiceInvalidateStatsCacheResult) InitDefault() {
}

var FrontendServiceInvalidateStatsCacheResult_Success_DEFAULT *status.TStatus

func (p *FrontendServiceInvalidateStatsCacheResult) GetSuccess() (v *status.TStatus) {
	if !p.IsSetSuccess() {
		return FrontendServiceInvalidateStatsCacheResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceInvalidateStatsCacheResult) SetSuccess(x interface{}) {
	p.Success = x.(*status.TStatus)
}

var fieldIDToName_FrontendServiceInvalidateStatsCacheResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceInvalidateStatsCacheResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceInvalidateStatsCacheResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceInvalidateStatsCacheResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceInvalidateStatsCacheResult) ReadField0(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceInvalidateStatsCacheResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("invalidateStatsCache_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceInvalidateStatsCacheResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceInvalidateStatsCacheResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceInvalidateStatsCacheResult(%+v)", *p)

}

func (p *FrontendServiceInvalidateStatsCacheResult) DeepEqual(ano *FrontendServiceInvalidateStatsCacheResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceInvalidateStatsCacheResult) Field0DeepEqual(src *status.TStatus) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceShowProcessListArgs struct {
	Request *TShowProcessListRequest `thrift:"request,1" frugal:"1,default,TShowProcessListRequest" json:"request"`
}

func NewFrontendServiceShowProcessListArgs() *FrontendServiceShowProcessListArgs {
	return &FrontendServiceShowProcessListArgs{}
}

func (p *FrontendServiceShowProcessListArgs) InitDefault() {
}

var FrontendServiceShowProcessListArgs_Request_DEFAULT *TShowProcessListRequest

func (p *FrontendServiceShowProcessListArgs) GetRequest() (v *TShowProcessListRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceShowProcessListArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceShowProcessListArgs) SetRequest(val *TShowProcessListRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceShowProcessListArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceShowProcessListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceShowProcessListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceShowProcessListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceShowProcessListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTShowProcessListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceShowProcessListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("showProcessList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceShowProcessListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceShowProcessListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceShowProcessListArgs(%+v)", *p)

}

func (p *FrontendServiceShowProcessListArgs) DeepEqual(ano *FrontendServiceShowProcessListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceShowProcessListArgs) Field1DeepEqual(src *TShowProcessListRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceShowProcessListResult struct {
	Success *TShowProcessListResult_ `thrift:"success,0,optional" frugal:"0,optional,TShowProcessListResult_" json:"success,omitempty"`
}

func NewFrontendServiceShowProcessListResult() *FrontendServiceShowProcessListResult {
	return &FrontendServiceShowProcessListResult{}
}

func (p *FrontendServiceShowProcessListResult) InitDefault() {
}

var FrontendServiceShowProcessListResult_Success_DEFAULT *TShowProcessListResult_

func (p *FrontendServiceShowProcessListResult) GetSuccess() (v *TShowProcessListResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceShowProcessListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceShowProcessListResult) SetSuccess(x interface{}) {
	p.Success = x.(*TShowProcessListResult_)
}

var fieldIDToName_FrontendServiceShowProcessListResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceShowProcessListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceShowProcessListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceShowProcessListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceShowProcessListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTShowProcessListResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceShowProcessListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("showProcessList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceShowProcessListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceShowProcessListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceShowProcessListResult(%+v)", *p)

}

func (p *FrontendServiceShowProcessListResult) DeepEqual(ano *FrontendServiceShowProcessListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceShowProcessListResult) Field0DeepEqual(src *TShowProcessListResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceReportCommitTxnResultArgs struct {
	Request *TReportCommitTxnResultRequest `thrift:"request,1" frugal:"1,default,TReportCommitTxnResultRequest" json:"request"`
}

func NewFrontendServiceReportCommitTxnResultArgs() *FrontendServiceReportCommitTxnResultArgs {
	return &FrontendServiceReportCommitTxnResultArgs{}
}

func (p *FrontendServiceReportCommitTxnResultArgs) InitDefault() {
}

var FrontendServiceReportCommitTxnResultArgs_Request_DEFAULT *TReportCommitTxnResultRequest

func (p *FrontendServiceReportCommitTxnResultArgs) GetRequest() (v *TReportCommitTxnResultRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceReportCommitTxnResultArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceReportCommitTxnResultArgs) SetRequest(val *TReportCommitTxnResultRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceReportCommitTxnResultArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceReportCommitTxnResultArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceReportCommitTxnResultArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceReportCommitTxnResultArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceReportCommitTxnResultArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTReportCommitTxnResultRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceReportCommitTxnResultArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("reportCommitTxnResult_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceReportCommitTxnResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceReportCommitTxnResultArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceReportCommitTxnResultArgs(%+v)", *p)

}

func (p *FrontendServiceReportCommitTxnResultArgs) DeepEqual(ano *FrontendServiceReportCommitTxnResultArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceReportCommitTxnResultArgs) Field1DeepEqual(src *TReportCommitTxnResultRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceReportCommitTxnResultResult struct {
	Success *status.TStatus `thrift:"success,0,optional" frugal:"0,optional,status.TStatus" json:"success,omitempty"`
}

func NewFrontendServiceReportCommitTxnResultResult() *FrontendServiceReportCommitTxnResultResult {
	return &FrontendServiceReportCommitTxnResultResult{}
}

func (p *FrontendServiceReportCommitTxnResultResult) InitDefault() {
}

var FrontendServiceReportCommitTxnResultResult_Success_DEFAULT *status.TStatus

func (p *FrontendServiceReportCommitTxnResultResult) GetSuccess() (v *status.TStatus) {
	if !p.IsSetSuccess() {
		return FrontendServiceReportCommitTxnResultResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceReportCommitTxnResultResult) SetSuccess(x interface{}) {
	p.Success = x.(*status.TStatus)
}

var fieldIDToName_FrontendServiceReportCommitTxnResultResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceReportCommitTxnResultResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceReportCommitTxnResultResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceReportCommitTxnResultResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceReportCommitTxnResultResult) ReadField0(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceReportCommitTxnResultResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("reportCommitTxnResult_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceReportCommitTxnResultResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceReportCommitTxnResultResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceReportCommitTxnResultResult(%+v)", *p)

}

func (p *FrontendServiceReportCommitTxnResultResult) DeepEqual(ano *FrontendServiceReportCommitTxnResultResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceReportCommitTxnResultResult) Field0DeepEqual(src *status.TStatus) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceShowUserArgs struct {
	Request *TShowUserRequest `thrift:"request,1" frugal:"1,default,TShowUserRequest" json:"request"`
}

func NewFrontendServiceShowUserArgs() *FrontendServiceShowUserArgs {
	return &FrontendServiceShowUserArgs{}
}

func (p *FrontendServiceShowUserArgs) InitDefault() {
}

var FrontendServiceShowUserArgs_Request_DEFAULT *TShowUserRequest

func (p *FrontendServiceShowUserArgs) GetRequest() (v *TShowUserRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceShowUserArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceShowUserArgs) SetRequest(val *TShowUserRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceShowUserArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceShowUserArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceShowUserArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceShowUserArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceShowUserArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTShowUserRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceShowUserArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("showUser_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceShowUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceShowUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceShowUserArgs(%+v)", *p)

}

func (p *FrontendServiceShowUserArgs) DeepEqual(ano *FrontendServiceShowUserArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceShowUserArgs) Field1DeepEqual(src *TShowUserRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceShowUserResult struct {
	Success *TShowUserResult_ `thrift:"success,0,optional" frugal:"0,optional,TShowUserResult_" json:"success,omitempty"`
}

func NewFrontendServiceShowUserResult() *FrontendServiceShowUserResult {
	return &FrontendServiceShowUserResult{}
}

func (p *FrontendServiceShowUserResult) InitDefault() {
}

var FrontendServiceShowUserResult_Success_DEFAULT *TShowUserResult_

func (p *FrontendServiceShowUserResult) GetSuccess() (v *TShowUserResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceShowUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceShowUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*TShowUserResult_)
}

var fieldIDToName_FrontendServiceShowUserResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceShowUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceShowUserResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceShowUserResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceShowUserResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTShowUserResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceShowUserResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("showUser_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceShowUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceShowUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceShowUserResult(%+v)", *p)

}

func (p *FrontendServiceShowUserResult) DeepEqual(ano *FrontendServiceShowUserResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceShowUserResult) Field0DeepEqual(src *TShowUserResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceSyncQueryColumnsArgs struct {
	Request *TSyncQueryColumns `thrift:"request,1" frugal:"1,default,TSyncQueryColumns" json:"request"`
}

func NewFrontendServiceSyncQueryColumnsArgs() *FrontendServiceSyncQueryColumnsArgs {
	return &FrontendServiceSyncQueryColumnsArgs{}
}

func (p *FrontendServiceSyncQueryColumnsArgs) InitDefault() {
}

var FrontendServiceSyncQueryColumnsArgs_Request_DEFAULT *TSyncQueryColumns

func (p *FrontendServiceSyncQueryColumnsArgs) GetRequest() (v *TSyncQueryColumns) {
	if !p.IsSetRequest() {
		return FrontendServiceSyncQueryColumnsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceSyncQueryColumnsArgs) SetRequest(val *TSyncQueryColumns) {
	p.Request = val
}

var fieldIDToName_FrontendServiceSyncQueryColumnsArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceSyncQueryColumnsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceSyncQueryColumnsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceSyncQueryColumnsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceSyncQueryColumnsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTSyncQueryColumns()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceSyncQueryColumnsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("syncQueryColumns_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceSyncQueryColumnsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceSyncQueryColumnsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceSyncQueryColumnsArgs(%+v)", *p)

}

func (p *FrontendServiceSyncQueryColumnsArgs) DeepEqual(ano *FrontendServiceSyncQueryColumnsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceSyncQueryColumnsArgs) Field1DeepEqual(src *TSyncQueryColumns) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceSyncQueryColumnsResult struct {
	Success *status.TStatus `thrift:"success,0,optional" frugal:"0,optional,status.TStatus" json:"success,omitempty"`
}

func NewFrontendServiceSyncQueryColumnsResult() *FrontendServiceSyncQueryColumnsResult {
	return &FrontendServiceSyncQueryColumnsResult{}
}

func (p *FrontendServiceSyncQueryColumnsResult) InitDefault() {
}

var FrontendServiceSyncQueryColumnsResult_Success_DEFAULT *status.TStatus

func (p *FrontendServiceSyncQueryColumnsResult) GetSuccess() (v *status.TStatus) {
	if !p.IsSetSuccess() {
		return FrontendServiceSyncQueryColumnsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceSyncQueryColumnsResult) SetSuccess(x interface{}) {
	p.Success = x.(*status.TStatus)
}

var fieldIDToName_FrontendServiceSyncQueryColumnsResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceSyncQueryColumnsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceSyncQueryColumnsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceSyncQueryColumnsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceSyncQueryColumnsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceSyncQueryColumnsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("syncQueryColumns_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceSyncQueryColumnsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceSyncQueryColumnsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceSyncQueryColumnsResult(%+v)", *p)

}

func (p *FrontendServiceSyncQueryColumnsResult) DeepEqual(ano *FrontendServiceSyncQueryColumnsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceSyncQueryColumnsResult) Field0DeepEqual(src *status.TStatus) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceFetchSplitBatchArgs struct {
	Request *TFetchSplitBatchRequest `thrift:"request,1" frugal:"1,default,TFetchSplitBatchRequest" json:"request"`
}

func NewFrontendServiceFetchSplitBatchArgs() *FrontendServiceFetchSplitBatchArgs {
	return &FrontendServiceFetchSplitBatchArgs{}
}

func (p *FrontendServiceFetchSplitBatchArgs) InitDefault() {
}

var FrontendServiceFetchSplitBatchArgs_Request_DEFAULT *TFetchSplitBatchRequest

func (p *FrontendServiceFetchSplitBatchArgs) GetRequest() (v *TFetchSplitBatchRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceFetchSplitBatchArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceFetchSplitBatchArgs) SetRequest(val *TFetchSplitBatchRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceFetchSplitBatchArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceFetchSplitBatchArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceFetchSplitBatchArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceFetchSplitBatchArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceFetchSplitBatchArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTFetchSplitBatchRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceFetchSplitBatchArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("fetchSplitBatch_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceFetchSplitBatchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceFetchSplitBatchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceFetchSplitBatchArgs(%+v)", *p)

}

func (p *FrontendServiceFetchSplitBatchArgs) DeepEqual(ano *FrontendServiceFetchSplitBatchArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceFetchSplitBatchArgs) Field1DeepEqual(src *TFetchSplitBatchRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceFetchSplitBatchResult struct {
	Success *TFetchSplitBatchResult_ `thrift:"success,0,optional" frugal:"0,optional,TFetchSplitBatchResult_" json:"success,omitempty"`
}

func NewFrontendServiceFetchSplitBatchResult() *FrontendServiceFetchSplitBatchResult {
	return &FrontendServiceFetchSplitBatchResult{}
}

func (p *FrontendServiceFetchSplitBatchResult) InitDefault() {
}

var FrontendServiceFetchSplitBatchResult_Success_DEFAULT *TFetchSplitBatchResult_

func (p *FrontendServiceFetchSplitBatchResult) GetSuccess() (v *TFetchSplitBatchResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceFetchSplitBatchResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceFetchSplitBatchResult) SetSuccess(x interface{}) {
	p.Success = x.(*TFetchSplitBatchResult_)
}

var fieldIDToName_FrontendServiceFetchSplitBatchResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceFetchSplitBatchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceFetchSplitBatchResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceFetchSplitBatchResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceFetchSplitBatchResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTFetchSplitBatchResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceFetchSplitBatchResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("fetchSplitBatch_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceFetchSplitBatchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceFetchSplitBatchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceFetchSplitBatchResult(%+v)", *p)

}

func (p *FrontendServiceFetchSplitBatchResult) DeepEqual(ano *FrontendServiceFetchSplitBatchResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceFetchSplitBatchResult) Field0DeepEqual(src *TFetchSplitBatchResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceUpdatePartitionStatsCacheArgs struct {
	Request *TUpdateFollowerPartitionStatsCacheRequest `thrift:"request,1" frugal:"1,default,TUpdateFollowerPartitionStatsCacheRequest" json:"request"`
}

func NewFrontendServiceUpdatePartitionStatsCacheArgs() *FrontendServiceUpdatePartitionStatsCacheArgs {
	return &FrontendServiceUpdatePartitionStatsCacheArgs{}
}

func (p *FrontendServiceUpdatePartitionStatsCacheArgs) InitDefault() {
}

var FrontendServiceUpdatePartitionStatsCacheArgs_Request_DEFAULT *TUpdateFollowerPartitionStatsCacheRequest

func (p *FrontendServiceUpdatePartitionStatsCacheArgs) GetRequest() (v *TUpdateFollowerPartitionStatsCacheRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceUpdatePartitionStatsCacheArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceUpdatePartitionStatsCacheArgs) SetRequest(val *TUpdateFollowerPartitionStatsCacheRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceUpdatePartitionStatsCacheArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceUpdatePartitionStatsCacheArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceUpdatePartitionStatsCacheArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceUpdatePartitionStatsCacheArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceUpdatePartitionStatsCacheArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTUpdateFollowerPartitionStatsCacheRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceUpdatePartitionStatsCacheArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("updatePartitionStatsCache_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceUpdatePartitionStatsCacheArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceUpdatePartitionStatsCacheArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceUpdatePartitionStatsCacheArgs(%+v)", *p)

}

func (p *FrontendServiceUpdatePartitionStatsCacheArgs) DeepEqual(ano *FrontendServiceUpdatePartitionStatsCacheArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceUpdatePartitionStatsCacheArgs) Field1DeepEqual(src *TUpdateFollowerPartitionStatsCacheRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceUpdatePartitionStatsCacheResult struct {
	Success *status.TStatus `thrift:"success,0,optional" frugal:"0,optional,status.TStatus" json:"success,omitempty"`
}

func NewFrontendServiceUpdatePartitionStatsCacheResult() *FrontendServiceUpdatePartitionStatsCacheResult {
	return &FrontendServiceUpdatePartitionStatsCacheResult{}
}

func (p *FrontendServiceUpdatePartitionStatsCacheResult) InitDefault() {
}

var FrontendServiceUpdatePartitionStatsCacheResult_Success_DEFAULT *status.TStatus

func (p *FrontendServiceUpdatePartitionStatsCacheResult) GetSuccess() (v *status.TStatus) {
	if !p.IsSetSuccess() {
		return FrontendServiceUpdatePartitionStatsCacheResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceUpdatePartitionStatsCacheResult) SetSuccess(x interface{}) {
	p.Success = x.(*status.TStatus)
}

var fieldIDToName_FrontendServiceUpdatePartitionStatsCacheResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceUpdatePartitionStatsCacheResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceUpdatePartitionStatsCacheResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceUpdatePartitionStatsCacheResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceUpdatePartitionStatsCacheResult) ReadField0(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceUpdatePartitionStatsCacheResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("updatePartitionStatsCache_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceUpdatePartitionStatsCacheResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceUpdatePartitionStatsCacheResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceUpdatePartitionStatsCacheResult(%+v)", *p)

}

func (p *FrontendServiceUpdatePartitionStatsCacheResult) DeepEqual(ano *FrontendServiceUpdatePartitionStatsCacheResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceUpdatePartitionStatsCacheResult) Field0DeepEqual(src *status.TStatus) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceFetchRunningQueriesArgs struct {
	Request *TFetchRunningQueriesRequest `thrift:"request,1" frugal:"1,default,TFetchRunningQueriesRequest" json:"request"`
}

func NewFrontendServiceFetchRunningQueriesArgs() *FrontendServiceFetchRunningQueriesArgs {
	return &FrontendServiceFetchRunningQueriesArgs{}
}

func (p *FrontendServiceFetchRunningQueriesArgs) InitDefault() {
}

var FrontendServiceFetchRunningQueriesArgs_Request_DEFAULT *TFetchRunningQueriesRequest

func (p *FrontendServiceFetchRunningQueriesArgs) GetRequest() (v *TFetchRunningQueriesRequest) {
	if !p.IsSetRequest() {
		return FrontendServiceFetchRunningQueriesArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FrontendServiceFetchRunningQueriesArgs) SetRequest(val *TFetchRunningQueriesRequest) {
	p.Request = val
}

var fieldIDToName_FrontendServiceFetchRunningQueriesArgs = map[int16]string{
	1: "request",
}

func (p *FrontendServiceFetchRunningQueriesArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FrontendServiceFetchRunningQueriesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceFetchRunningQueriesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceFetchRunningQueriesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTFetchRunningQueriesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *FrontendServiceFetchRunningQueriesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("fetchRunningQueries_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceFetchRunningQueriesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FrontendServiceFetchRunningQueriesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceFetchRunningQueriesArgs(%+v)", *p)

}

func (p *FrontendServiceFetchRunningQueriesArgs) DeepEqual(ano *FrontendServiceFetchRunningQueriesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *FrontendServiceFetchRunningQueriesArgs) Field1DeepEqual(src *TFetchRunningQueriesRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type FrontendServiceFetchRunningQueriesResult struct {
	Success *TFetchRunningQueriesResult_ `thrift:"success,0,optional" frugal:"0,optional,TFetchRunningQueriesResult_" json:"success,omitempty"`
}

func NewFrontendServiceFetchRunningQueriesResult() *FrontendServiceFetchRunningQueriesResult {
	return &FrontendServiceFetchRunningQueriesResult{}
}

func (p *FrontendServiceFetchRunningQueriesResult) InitDefault() {
}

var FrontendServiceFetchRunningQueriesResult_Success_DEFAULT *TFetchRunningQueriesResult_

func (p *FrontendServiceFetchRunningQueriesResult) GetSuccess() (v *TFetchRunningQueriesResult_) {
	if !p.IsSetSuccess() {
		return FrontendServiceFetchRunningQueriesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FrontendServiceFetchRunningQueriesResult) SetSuccess(x interface{}) {
	p.Success = x.(*TFetchRunningQueriesResult_)
}

var fieldIDToName_FrontendServiceFetchRunningQueriesResult = map[int16]string{
	0: "success",
}

func (p *FrontendServiceFetchRunningQueriesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendServiceFetchRunningQueriesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FrontendServiceFetchRunningQueriesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FrontendServiceFetchRunningQueriesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTFetchRunningQueriesResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FrontendServiceFetchRunningQueriesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("fetchRunningQueries_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FrontendServiceFetchRunningQueriesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FrontendServiceFetchRunningQueriesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FrontendServiceFetchRunningQueriesResult(%+v)", *p)

}

func (p *FrontendServiceFetchRunningQueriesResult) DeepEqual(ano *FrontendServiceFetchRunningQueriesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FrontendServiceFetchRunningQueriesResult) Field0DeepEqual(src *TFetchRunningQueriesResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
