// Code generated by Kitex v0.8.0. DO NOT EDIT.

package frontendservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	frontendservice "github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/frontendservice"
	masterservice "github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/masterservice"
	status "github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/status"
)

func serviceInfo() *kitex.ServiceInfo {
	return frontendServiceServiceInfo
}

var frontendServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FrontendService"
	handlerType := (*frontendservice.FrontendService)(nil)
	methods := map[string]kitex.MethodInfo{
		"getDbNames":                kitex.NewMethodInfo(getDbNamesHandler, newFrontendServiceGetDbNamesArgs, newFrontendServiceGetDbNamesResult, false),
		"getTableNames":             kitex.NewMethodInfo(getTableNamesHandler, newFrontendServiceGetTableNamesArgs, newFrontendServiceGetTableNamesResult, false),
		"describeTable":             kitex.NewMethodInfo(describeTableHandler, newFrontendServiceDescribeTableArgs, newFrontendServiceDescribeTableResult, false),
		"describeTables":            kitex.NewMethodInfo(describeTablesHandler, newFrontendServiceDescribeTablesArgs, newFrontendServiceDescribeTablesResult, false),
		"showVariables":             kitex.NewMethodInfo(showVariablesHandler, newFrontendServiceShowVariablesArgs, newFrontendServiceShowVariablesResult, false),
		"reportExecStatus":          kitex.NewMethodInfo(reportExecStatusHandler, newFrontendServiceReportExecStatusArgs, newFrontendServiceReportExecStatusResult, false),
		"finishTask":                kitex.NewMethodInfo(finishTaskHandler, newFrontendServiceFinishTaskArgs, newFrontendServiceFinishTaskResult, false),
		"report":                    kitex.NewMethodInfo(reportHandler, newFrontendServiceReportArgs, newFrontendServiceReportResult, false),
		"fetchResource":             kitex.NewMethodInfo(fetchResourceHandler, newFrontendServiceFetchResourceArgs, newFrontendServiceFetchResourceResult, false),
		"forward":                   kitex.NewMethodInfo(forwardHandler, newFrontendServiceForwardArgs, newFrontendServiceForwardResult, false),
		"listTableStatus":           kitex.NewMethodInfo(listTableStatusHandler, newFrontendServiceListTableStatusArgs, newFrontendServiceListTableStatusResult, false),
		"listTableMetadataNameIds":  kitex.NewMethodInfo(listTableMetadataNameIdsHandler, newFrontendServiceListTableMetadataNameIdsArgs, newFrontendServiceListTableMetadataNameIdsResult, false),
		"listTablePrivilegeStatus":  kitex.NewMethodInfo(listTablePrivilegeStatusHandler, newFrontendServiceListTablePrivilegeStatusArgs, newFrontendServiceListTablePrivilegeStatusResult, false),
		"listSchemaPrivilegeStatus": kitex.NewMethodInfo(listSchemaPrivilegeStatusHandler, newFrontendServiceListSchemaPrivilegeStatusArgs, newFrontendServiceListSchemaPrivilegeStatusResult, false),
		"listUserPrivilegeStatus":   kitex.NewMethodInfo(listUserPrivilegeStatusHandler, newFrontendServiceListUserPrivilegeStatusArgs, newFrontendServiceListUserPrivilegeStatusResult, false),
		"updateExportTaskStatus":    kitex.NewMethodInfo(updateExportTaskStatusHandler, newFrontendServiceUpdateExportTaskStatusArgs, newFrontendServiceUpdateExportTaskStatusResult, false),
		"loadTxnBegin":              kitex.NewMethodInfo(loadTxnBeginHandler, newFrontendServiceLoadTxnBeginArgs, newFrontendServiceLoadTxnBeginResult, false),
		"loadTxnPreCommit":          kitex.NewMethodInfo(loadTxnPreCommitHandler, newFrontendServiceLoadTxnPreCommitArgs, newFrontendServiceLoadTxnPreCommitResult, false),
		"loadTxn2PC":                kitex.NewMethodInfo(loadTxn2PCHandler, newFrontendServiceLoadTxn2PCArgs, newFrontendServiceLoadTxn2PCResult, false),
		"loadTxnCommit":             kitex.NewMethodInfo(loadTxnCommitHandler, newFrontendServiceLoadTxnCommitArgs, newFrontendServiceLoadTxnCommitResult, false),
		"loadTxnRollback":           kitex.NewMethodInfo(loadTxnRollbackHandler, newFrontendServiceLoadTxnRollbackArgs, newFrontendServiceLoadTxnRollbackResult, false),
		"beginTxn":                  kitex.NewMethodInfo(beginTxnHandler, newFrontendServiceBeginTxnArgs, newFrontendServiceBeginTxnResult, false),
		"commitTxn":                 kitex.NewMethodInfo(commitTxnHandler, newFrontendServiceCommitTxnArgs, newFrontendServiceCommitTxnResult, false),
		"rollbackTxn":               kitex.NewMethodInfo(rollbackTxnHandler, newFrontendServiceRollbackTxnArgs, newFrontendServiceRollbackTxnResult, false),
		"getBinlog":                 kitex.NewMethodInfo(getBinlogHandler, newFrontendServiceGetBinlogArgs, newFrontendServiceGetBinlogResult, false),
		"getSnapshot":               kitex.NewMethodInfo(getSnapshotHandler, newFrontendServiceGetSnapshotArgs, newFrontendServiceGetSnapshotResult, false),
		"restoreSnapshot":           kitex.NewMethodInfo(restoreSnapshotHandler, newFrontendServiceRestoreSnapshotArgs, newFrontendServiceRestoreSnapshotResult, false),
		"waitingTxnStatus":          kitex.NewMethodInfo(waitingTxnStatusHandler, newFrontendServiceWaitingTxnStatusArgs, newFrontendServiceWaitingTxnStatusResult, false),
		"streamLoadPut":             kitex.NewMethodInfo(streamLoadPutHandler, newFrontendServiceStreamLoadPutArgs, newFrontendServiceStreamLoadPutResult, false),
		"streamLoadMultiTablePut":   kitex.NewMethodInfo(streamLoadMultiTablePutHandler, newFrontendServiceStreamLoadMultiTablePutArgs, newFrontendServiceStreamLoadMultiTablePutResult, false),
		"snapshotLoaderReport":      kitex.NewMethodInfo(snapshotLoaderReportHandler, newFrontendServiceSnapshotLoaderReportArgs, newFrontendServiceSnapshotLoaderReportResult, false),
		"ping":                      kitex.NewMethodInfo(pingHandler, newFrontendServicePingArgs, newFrontendServicePingResult, false),
		"initExternalCtlMeta":       kitex.NewMethodInfo(initExternalCtlMetaHandler, newFrontendServiceInitExternalCtlMetaArgs, newFrontendServiceInitExternalCtlMetaResult, false),
		"fetchSchemaTableData":      kitex.NewMethodInfo(fetchSchemaTableDataHandler, newFrontendServiceFetchSchemaTableDataArgs, newFrontendServiceFetchSchemaTableDataResult, false),
		"acquireToken":              kitex.NewMethodInfo(acquireTokenHandler, newFrontendServiceAcquireTokenArgs, newFrontendServiceAcquireTokenResult, false),
		"checkToken":                kitex.NewMethodInfo(checkTokenHandler, newFrontendServiceCheckTokenArgs, newFrontendServiceCheckTokenResult, false),
		"confirmUnusedRemoteFiles":  kitex.NewMethodInfo(confirmUnusedRemoteFilesHandler, newFrontendServiceConfirmUnusedRemoteFilesArgs, newFrontendServiceConfirmUnusedRemoteFilesResult, false),
		"checkAuth":                 kitex.NewMethodInfo(checkAuthHandler, newFrontendServiceCheckAuthArgs, newFrontendServiceCheckAuthResult, false),
		"getQueryStats":             kitex.NewMethodInfo(getQueryStatsHandler, newFrontendServiceGetQueryStatsArgs, newFrontendServiceGetQueryStatsResult, false),
		"getTabletReplicaInfos":     kitex.NewMethodInfo(getTabletReplicaInfosHandler, newFrontendServiceGetTabletReplicaInfosArgs, newFrontendServiceGetTabletReplicaInfosResult, false),
		"addPlsqlStoredProcedure":   kitex.NewMethodInfo(addPlsqlStoredProcedureHandler, newFrontendServiceAddPlsqlStoredProcedureArgs, newFrontendServiceAddPlsqlStoredProcedureResult, false),
		"dropPlsqlStoredProcedure":  kitex.NewMethodInfo(dropPlsqlStoredProcedureHandler, newFrontendServiceDropPlsqlStoredProcedureArgs, newFrontendServiceDropPlsqlStoredProcedureResult, false),
		"addPlsqlPackage":           kitex.NewMethodInfo(addPlsqlPackageHandler, newFrontendServiceAddPlsqlPackageArgs, newFrontendServiceAddPlsqlPackageResult, false),
		"dropPlsqlPackage":          kitex.NewMethodInfo(dropPlsqlPackageHandler, newFrontendServiceDropPlsqlPackageArgs, newFrontendServiceDropPlsqlPackageResult, false),
		"getMasterToken":            kitex.NewMethodInfo(getMasterTokenHandler, newFrontendServiceGetMasterTokenArgs, newFrontendServiceGetMasterTokenResult, false),
		"getBinlogLag":              kitex.NewMethodInfo(getBinlogLagHandler, newFrontendServiceGetBinlogLagArgs, newFrontendServiceGetBinlogLagResult, false),
		"updateStatsCache":          kitex.NewMethodInfo(updateStatsCacheHandler, newFrontendServiceUpdateStatsCacheArgs, newFrontendServiceUpdateStatsCacheResult, false),
		"getAutoIncrementRange":     kitex.NewMethodInfo(getAutoIncrementRangeHandler, newFrontendServiceGetAutoIncrementRangeArgs, newFrontendServiceGetAutoIncrementRangeResult, false),
		"createPartition":           kitex.NewMethodInfo(createPartitionHandler, newFrontendServiceCreatePartitionArgs, newFrontendServiceCreatePartitionResult, false),
		"replacePartition":          kitex.NewMethodInfo(replacePartitionHandler, newFrontendServiceReplacePartitionArgs, newFrontendServiceReplacePartitionResult, false),
		"getMeta":                   kitex.NewMethodInfo(getMetaHandler, newFrontendServiceGetMetaArgs, newFrontendServiceGetMetaResult, false),
		"getBackendMeta":            kitex.NewMethodInfo(getBackendMetaHandler, newFrontendServiceGetBackendMetaArgs, newFrontendServiceGetBackendMetaResult, false),
		"getColumnInfo":             kitex.NewMethodInfo(getColumnInfoHandler, newFrontendServiceGetColumnInfoArgs, newFrontendServiceGetColumnInfoResult, false),
		"invalidateStatsCache":      kitex.NewMethodInfo(invalidateStatsCacheHandler, newFrontendServiceInvalidateStatsCacheArgs, newFrontendServiceInvalidateStatsCacheResult, false),
		"showProcessList":           kitex.NewMethodInfo(showProcessListHandler, newFrontendServiceShowProcessListArgs, newFrontendServiceShowProcessListResult, false),
		"reportCommitTxnResult":     kitex.NewMethodInfo(reportCommitTxnResult_Handler, newFrontendServiceReportCommitTxnResultArgs, newFrontendServiceReportCommitTxnResultResult, false),
		"showUser":                  kitex.NewMethodInfo(showUserHandler, newFrontendServiceShowUserArgs, newFrontendServiceShowUserResult, false),
		"syncQueryColumns":          kitex.NewMethodInfo(syncQueryColumnsHandler, newFrontendServiceSyncQueryColumnsArgs, newFrontendServiceSyncQueryColumnsResult, false),
		"fetchSplitBatch":           kitex.NewMethodInfo(fetchSplitBatchHandler, newFrontendServiceFetchSplitBatchArgs, newFrontendServiceFetchSplitBatchResult, false),
		"updatePartitionStatsCache": kitex.NewMethodInfo(updatePartitionStatsCacheHandler, newFrontendServiceUpdatePartitionStatsCacheArgs, newFrontendServiceUpdatePartitionStatsCacheResult, false),
		"fetchRunningQueries":       kitex.NewMethodInfo(fetchRunningQueriesHandler, newFrontendServiceFetchRunningQueriesArgs, newFrontendServiceFetchRunningQueriesResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "frontendservice",
		"ServiceFilePath": `thrift/FrontendService.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func getDbNamesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceGetDbNamesArgs)
	realResult := result.(*frontendservice.FrontendServiceGetDbNamesResult)
	success, err := handler.(frontendservice.FrontendService).GetDbNames(ctx, realArg.Params)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceGetDbNamesArgs() interface{} {
	return frontendservice.NewFrontendServiceGetDbNamesArgs()
}

func newFrontendServiceGetDbNamesResult() interface{} {
	return frontendservice.NewFrontendServiceGetDbNamesResult()
}

func getTableNamesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceGetTableNamesArgs)
	realResult := result.(*frontendservice.FrontendServiceGetTableNamesResult)
	success, err := handler.(frontendservice.FrontendService).GetTableNames(ctx, realArg.Params)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceGetTableNamesArgs() interface{} {
	return frontendservice.NewFrontendServiceGetTableNamesArgs()
}

func newFrontendServiceGetTableNamesResult() interface{} {
	return frontendservice.NewFrontendServiceGetTableNamesResult()
}

func describeTableHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceDescribeTableArgs)
	realResult := result.(*frontendservice.FrontendServiceDescribeTableResult)
	success, err := handler.(frontendservice.FrontendService).DescribeTable(ctx, realArg.Params)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceDescribeTableArgs() interface{} {
	return frontendservice.NewFrontendServiceDescribeTableArgs()
}

func newFrontendServiceDescribeTableResult() interface{} {
	return frontendservice.NewFrontendServiceDescribeTableResult()
}

func describeTablesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceDescribeTablesArgs)
	realResult := result.(*frontendservice.FrontendServiceDescribeTablesResult)
	success, err := handler.(frontendservice.FrontendService).DescribeTables(ctx, realArg.Params)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceDescribeTablesArgs() interface{} {
	return frontendservice.NewFrontendServiceDescribeTablesArgs()
}

func newFrontendServiceDescribeTablesResult() interface{} {
	return frontendservice.NewFrontendServiceDescribeTablesResult()
}

func showVariablesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceShowVariablesArgs)
	realResult := result.(*frontendservice.FrontendServiceShowVariablesResult)
	success, err := handler.(frontendservice.FrontendService).ShowVariables(ctx, realArg.Params)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceShowVariablesArgs() interface{} {
	return frontendservice.NewFrontendServiceShowVariablesArgs()
}

func newFrontendServiceShowVariablesResult() interface{} {
	return frontendservice.NewFrontendServiceShowVariablesResult()
}

func reportExecStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceReportExecStatusArgs)
	realResult := result.(*frontendservice.FrontendServiceReportExecStatusResult)
	success, err := handler.(frontendservice.FrontendService).ReportExecStatus(ctx, realArg.Params)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceReportExecStatusArgs() interface{} {
	return frontendservice.NewFrontendServiceReportExecStatusArgs()
}

func newFrontendServiceReportExecStatusResult() interface{} {
	return frontendservice.NewFrontendServiceReportExecStatusResult()
}

func finishTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceFinishTaskArgs)
	realResult := result.(*frontendservice.FrontendServiceFinishTaskResult)
	success, err := handler.(frontendservice.FrontendService).FinishTask(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceFinishTaskArgs() interface{} {
	return frontendservice.NewFrontendServiceFinishTaskArgs()
}

func newFrontendServiceFinishTaskResult() interface{} {
	return frontendservice.NewFrontendServiceFinishTaskResult()
}

func reportHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceReportArgs)
	realResult := result.(*frontendservice.FrontendServiceReportResult)
	success, err := handler.(frontendservice.FrontendService).Report(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceReportArgs() interface{} {
	return frontendservice.NewFrontendServiceReportArgs()
}

func newFrontendServiceReportResult() interface{} {
	return frontendservice.NewFrontendServiceReportResult()
}

func fetchResourceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*frontendservice.FrontendServiceFetchResourceResult)
	success, err := handler.(frontendservice.FrontendService).FetchResource(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceFetchResourceArgs() interface{} {
	return frontendservice.NewFrontendServiceFetchResourceArgs()
}

func newFrontendServiceFetchResourceResult() interface{} {
	return frontendservice.NewFrontendServiceFetchResourceResult()
}

func forwardHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceForwardArgs)
	realResult := result.(*frontendservice.FrontendServiceForwardResult)
	success, err := handler.(frontendservice.FrontendService).Forward(ctx, realArg.Params)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceForwardArgs() interface{} {
	return frontendservice.NewFrontendServiceForwardArgs()
}

func newFrontendServiceForwardResult() interface{} {
	return frontendservice.NewFrontendServiceForwardResult()
}

func listTableStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceListTableStatusArgs)
	realResult := result.(*frontendservice.FrontendServiceListTableStatusResult)
	success, err := handler.(frontendservice.FrontendService).ListTableStatus(ctx, realArg.Params)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceListTableStatusArgs() interface{} {
	return frontendservice.NewFrontendServiceListTableStatusArgs()
}

func newFrontendServiceListTableStatusResult() interface{} {
	return frontendservice.NewFrontendServiceListTableStatusResult()
}

func listTableMetadataNameIdsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceListTableMetadataNameIdsArgs)
	realResult := result.(*frontendservice.FrontendServiceListTableMetadataNameIdsResult)
	success, err := handler.(frontendservice.FrontendService).ListTableMetadataNameIds(ctx, realArg.Params)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceListTableMetadataNameIdsArgs() interface{} {
	return frontendservice.NewFrontendServiceListTableMetadataNameIdsArgs()
}

func newFrontendServiceListTableMetadataNameIdsResult() interface{} {
	return frontendservice.NewFrontendServiceListTableMetadataNameIdsResult()
}

func listTablePrivilegeStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceListTablePrivilegeStatusArgs)
	realResult := result.(*frontendservice.FrontendServiceListTablePrivilegeStatusResult)
	success, err := handler.(frontendservice.FrontendService).ListTablePrivilegeStatus(ctx, realArg.Params)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceListTablePrivilegeStatusArgs() interface{} {
	return frontendservice.NewFrontendServiceListTablePrivilegeStatusArgs()
}

func newFrontendServiceListTablePrivilegeStatusResult() interface{} {
	return frontendservice.NewFrontendServiceListTablePrivilegeStatusResult()
}

func listSchemaPrivilegeStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceListSchemaPrivilegeStatusArgs)
	realResult := result.(*frontendservice.FrontendServiceListSchemaPrivilegeStatusResult)
	success, err := handler.(frontendservice.FrontendService).ListSchemaPrivilegeStatus(ctx, realArg.Params)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceListSchemaPrivilegeStatusArgs() interface{} {
	return frontendservice.NewFrontendServiceListSchemaPrivilegeStatusArgs()
}

func newFrontendServiceListSchemaPrivilegeStatusResult() interface{} {
	return frontendservice.NewFrontendServiceListSchemaPrivilegeStatusResult()
}

func listUserPrivilegeStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceListUserPrivilegeStatusArgs)
	realResult := result.(*frontendservice.FrontendServiceListUserPrivilegeStatusResult)
	success, err := handler.(frontendservice.FrontendService).ListUserPrivilegeStatus(ctx, realArg.Params)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceListUserPrivilegeStatusArgs() interface{} {
	return frontendservice.NewFrontendServiceListUserPrivilegeStatusArgs()
}

func newFrontendServiceListUserPrivilegeStatusResult() interface{} {
	return frontendservice.NewFrontendServiceListUserPrivilegeStatusResult()
}

func updateExportTaskStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceUpdateExportTaskStatusArgs)
	realResult := result.(*frontendservice.FrontendServiceUpdateExportTaskStatusResult)
	success, err := handler.(frontendservice.FrontendService).UpdateExportTaskStatus(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceUpdateExportTaskStatusArgs() interface{} {
	return frontendservice.NewFrontendServiceUpdateExportTaskStatusArgs()
}

func newFrontendServiceUpdateExportTaskStatusResult() interface{} {
	return frontendservice.NewFrontendServiceUpdateExportTaskStatusResult()
}

func loadTxnBeginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceLoadTxnBeginArgs)
	realResult := result.(*frontendservice.FrontendServiceLoadTxnBeginResult)
	success, err := handler.(frontendservice.FrontendService).LoadTxnBegin(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceLoadTxnBeginArgs() interface{} {
	return frontendservice.NewFrontendServiceLoadTxnBeginArgs()
}

func newFrontendServiceLoadTxnBeginResult() interface{} {
	return frontendservice.NewFrontendServiceLoadTxnBeginResult()
}

func loadTxnPreCommitHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceLoadTxnPreCommitArgs)
	realResult := result.(*frontendservice.FrontendServiceLoadTxnPreCommitResult)
	success, err := handler.(frontendservice.FrontendService).LoadTxnPreCommit(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceLoadTxnPreCommitArgs() interface{} {
	return frontendservice.NewFrontendServiceLoadTxnPreCommitArgs()
}

func newFrontendServiceLoadTxnPreCommitResult() interface{} {
	return frontendservice.NewFrontendServiceLoadTxnPreCommitResult()
}

func loadTxn2PCHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceLoadTxn2PCArgs)
	realResult := result.(*frontendservice.FrontendServiceLoadTxn2PCResult)
	success, err := handler.(frontendservice.FrontendService).LoadTxn2PC(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceLoadTxn2PCArgs() interface{} {
	return frontendservice.NewFrontendServiceLoadTxn2PCArgs()
}

func newFrontendServiceLoadTxn2PCResult() interface{} {
	return frontendservice.NewFrontendServiceLoadTxn2PCResult()
}

func loadTxnCommitHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceLoadTxnCommitArgs)
	realResult := result.(*frontendservice.FrontendServiceLoadTxnCommitResult)
	success, err := handler.(frontendservice.FrontendService).LoadTxnCommit(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceLoadTxnCommitArgs() interface{} {
	return frontendservice.NewFrontendServiceLoadTxnCommitArgs()
}

func newFrontendServiceLoadTxnCommitResult() interface{} {
	return frontendservice.NewFrontendServiceLoadTxnCommitResult()
}

func loadTxnRollbackHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceLoadTxnRollbackArgs)
	realResult := result.(*frontendservice.FrontendServiceLoadTxnRollbackResult)
	success, err := handler.(frontendservice.FrontendService).LoadTxnRollback(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceLoadTxnRollbackArgs() interface{} {
	return frontendservice.NewFrontendServiceLoadTxnRollbackArgs()
}

func newFrontendServiceLoadTxnRollbackResult() interface{} {
	return frontendservice.NewFrontendServiceLoadTxnRollbackResult()
}

func beginTxnHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceBeginTxnArgs)
	realResult := result.(*frontendservice.FrontendServiceBeginTxnResult)
	success, err := handler.(frontendservice.FrontendService).BeginTxn(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceBeginTxnArgs() interface{} {
	return frontendservice.NewFrontendServiceBeginTxnArgs()
}

func newFrontendServiceBeginTxnResult() interface{} {
	return frontendservice.NewFrontendServiceBeginTxnResult()
}

func commitTxnHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceCommitTxnArgs)
	realResult := result.(*frontendservice.FrontendServiceCommitTxnResult)
	success, err := handler.(frontendservice.FrontendService).CommitTxn(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceCommitTxnArgs() interface{} {
	return frontendservice.NewFrontendServiceCommitTxnArgs()
}

func newFrontendServiceCommitTxnResult() interface{} {
	return frontendservice.NewFrontendServiceCommitTxnResult()
}

func rollbackTxnHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceRollbackTxnArgs)
	realResult := result.(*frontendservice.FrontendServiceRollbackTxnResult)
	success, err := handler.(frontendservice.FrontendService).RollbackTxn(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceRollbackTxnArgs() interface{} {
	return frontendservice.NewFrontendServiceRollbackTxnArgs()
}

func newFrontendServiceRollbackTxnResult() interface{} {
	return frontendservice.NewFrontendServiceRollbackTxnResult()
}

func getBinlogHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceGetBinlogArgs)
	realResult := result.(*frontendservice.FrontendServiceGetBinlogResult)
	success, err := handler.(frontendservice.FrontendService).GetBinlog(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceGetBinlogArgs() interface{} {
	return frontendservice.NewFrontendServiceGetBinlogArgs()
}

func newFrontendServiceGetBinlogResult() interface{} {
	return frontendservice.NewFrontendServiceGetBinlogResult()
}

func getSnapshotHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceGetSnapshotArgs)
	realResult := result.(*frontendservice.FrontendServiceGetSnapshotResult)
	success, err := handler.(frontendservice.FrontendService).GetSnapshot(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceGetSnapshotArgs() interface{} {
	return frontendservice.NewFrontendServiceGetSnapshotArgs()
}

func newFrontendServiceGetSnapshotResult() interface{} {
	return frontendservice.NewFrontendServiceGetSnapshotResult()
}

func restoreSnapshotHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceRestoreSnapshotArgs)
	realResult := result.(*frontendservice.FrontendServiceRestoreSnapshotResult)
	success, err := handler.(frontendservice.FrontendService).RestoreSnapshot(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceRestoreSnapshotArgs() interface{} {
	return frontendservice.NewFrontendServiceRestoreSnapshotArgs()
}

func newFrontendServiceRestoreSnapshotResult() interface{} {
	return frontendservice.NewFrontendServiceRestoreSnapshotResult()
}

func waitingTxnStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceWaitingTxnStatusArgs)
	realResult := result.(*frontendservice.FrontendServiceWaitingTxnStatusResult)
	success, err := handler.(frontendservice.FrontendService).WaitingTxnStatus(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceWaitingTxnStatusArgs() interface{} {
	return frontendservice.NewFrontendServiceWaitingTxnStatusArgs()
}

func newFrontendServiceWaitingTxnStatusResult() interface{} {
	return frontendservice.NewFrontendServiceWaitingTxnStatusResult()
}

func streamLoadPutHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceStreamLoadPutArgs)
	realResult := result.(*frontendservice.FrontendServiceStreamLoadPutResult)
	success, err := handler.(frontendservice.FrontendService).StreamLoadPut(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceStreamLoadPutArgs() interface{} {
	return frontendservice.NewFrontendServiceStreamLoadPutArgs()
}

func newFrontendServiceStreamLoadPutResult() interface{} {
	return frontendservice.NewFrontendServiceStreamLoadPutResult()
}

func streamLoadMultiTablePutHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceStreamLoadMultiTablePutArgs)
	realResult := result.(*frontendservice.FrontendServiceStreamLoadMultiTablePutResult)
	success, err := handler.(frontendservice.FrontendService).StreamLoadMultiTablePut(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceStreamLoadMultiTablePutArgs() interface{} {
	return frontendservice.NewFrontendServiceStreamLoadMultiTablePutArgs()
}

func newFrontendServiceStreamLoadMultiTablePutResult() interface{} {
	return frontendservice.NewFrontendServiceStreamLoadMultiTablePutResult()
}

func snapshotLoaderReportHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceSnapshotLoaderReportArgs)
	realResult := result.(*frontendservice.FrontendServiceSnapshotLoaderReportResult)
	success, err := handler.(frontendservice.FrontendService).SnapshotLoaderReport(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceSnapshotLoaderReportArgs() interface{} {
	return frontendservice.NewFrontendServiceSnapshotLoaderReportArgs()
}

func newFrontendServiceSnapshotLoaderReportResult() interface{} {
	return frontendservice.NewFrontendServiceSnapshotLoaderReportResult()
}

func pingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServicePingArgs)
	realResult := result.(*frontendservice.FrontendServicePingResult)
	success, err := handler.(frontendservice.FrontendService).Ping(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServicePingArgs() interface{} {
	return frontendservice.NewFrontendServicePingArgs()
}

func newFrontendServicePingResult() interface{} {
	return frontendservice.NewFrontendServicePingResult()
}

func initExternalCtlMetaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceInitExternalCtlMetaArgs)
	realResult := result.(*frontendservice.FrontendServiceInitExternalCtlMetaResult)
	success, err := handler.(frontendservice.FrontendService).InitExternalCtlMeta(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceInitExternalCtlMetaArgs() interface{} {
	return frontendservice.NewFrontendServiceInitExternalCtlMetaArgs()
}

func newFrontendServiceInitExternalCtlMetaResult() interface{} {
	return frontendservice.NewFrontendServiceInitExternalCtlMetaResult()
}

func fetchSchemaTableDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceFetchSchemaTableDataArgs)
	realResult := result.(*frontendservice.FrontendServiceFetchSchemaTableDataResult)
	success, err := handler.(frontendservice.FrontendService).FetchSchemaTableData(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceFetchSchemaTableDataArgs() interface{} {
	return frontendservice.NewFrontendServiceFetchSchemaTableDataArgs()
}

func newFrontendServiceFetchSchemaTableDataResult() interface{} {
	return frontendservice.NewFrontendServiceFetchSchemaTableDataResult()
}

func acquireTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*frontendservice.FrontendServiceAcquireTokenResult)
	success, err := handler.(frontendservice.FrontendService).AcquireToken(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceAcquireTokenArgs() interface{} {
	return frontendservice.NewFrontendServiceAcquireTokenArgs()
}

func newFrontendServiceAcquireTokenResult() interface{} {
	return frontendservice.NewFrontendServiceAcquireTokenResult()
}

func checkTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceCheckTokenArgs)
	realResult := result.(*frontendservice.FrontendServiceCheckTokenResult)
	success, err := handler.(frontendservice.FrontendService).CheckToken(ctx, realArg.Token)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newFrontendServiceCheckTokenArgs() interface{} {
	return frontendservice.NewFrontendServiceCheckTokenArgs()
}

func newFrontendServiceCheckTokenResult() interface{} {
	return frontendservice.NewFrontendServiceCheckTokenResult()
}

func confirmUnusedRemoteFilesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceConfirmUnusedRemoteFilesArgs)
	realResult := result.(*frontendservice.FrontendServiceConfirmUnusedRemoteFilesResult)
	success, err := handler.(frontendservice.FrontendService).ConfirmUnusedRemoteFiles(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceConfirmUnusedRemoteFilesArgs() interface{} {
	return frontendservice.NewFrontendServiceConfirmUnusedRemoteFilesArgs()
}

func newFrontendServiceConfirmUnusedRemoteFilesResult() interface{} {
	return frontendservice.NewFrontendServiceConfirmUnusedRemoteFilesResult()
}

func checkAuthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceCheckAuthArgs)
	realResult := result.(*frontendservice.FrontendServiceCheckAuthResult)
	success, err := handler.(frontendservice.FrontendService).CheckAuth(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceCheckAuthArgs() interface{} {
	return frontendservice.NewFrontendServiceCheckAuthArgs()
}

func newFrontendServiceCheckAuthResult() interface{} {
	return frontendservice.NewFrontendServiceCheckAuthResult()
}

func getQueryStatsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceGetQueryStatsArgs)
	realResult := result.(*frontendservice.FrontendServiceGetQueryStatsResult)
	success, err := handler.(frontendservice.FrontendService).GetQueryStats(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceGetQueryStatsArgs() interface{} {
	return frontendservice.NewFrontendServiceGetQueryStatsArgs()
}

func newFrontendServiceGetQueryStatsResult() interface{} {
	return frontendservice.NewFrontendServiceGetQueryStatsResult()
}

func getTabletReplicaInfosHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceGetTabletReplicaInfosArgs)
	realResult := result.(*frontendservice.FrontendServiceGetTabletReplicaInfosResult)
	success, err := handler.(frontendservice.FrontendService).GetTabletReplicaInfos(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceGetTabletReplicaInfosArgs() interface{} {
	return frontendservice.NewFrontendServiceGetTabletReplicaInfosArgs()
}

func newFrontendServiceGetTabletReplicaInfosResult() interface{} {
	return frontendservice.NewFrontendServiceGetTabletReplicaInfosResult()
}

func addPlsqlStoredProcedureHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceAddPlsqlStoredProcedureArgs)
	realResult := result.(*frontendservice.FrontendServiceAddPlsqlStoredProcedureResult)
	success, err := handler.(frontendservice.FrontendService).AddPlsqlStoredProcedure(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceAddPlsqlStoredProcedureArgs() interface{} {
	return frontendservice.NewFrontendServiceAddPlsqlStoredProcedureArgs()
}

func newFrontendServiceAddPlsqlStoredProcedureResult() interface{} {
	return frontendservice.NewFrontendServiceAddPlsqlStoredProcedureResult()
}

func dropPlsqlStoredProcedureHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceDropPlsqlStoredProcedureArgs)
	realResult := result.(*frontendservice.FrontendServiceDropPlsqlStoredProcedureResult)
	success, err := handler.(frontendservice.FrontendService).DropPlsqlStoredProcedure(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceDropPlsqlStoredProcedureArgs() interface{} {
	return frontendservice.NewFrontendServiceDropPlsqlStoredProcedureArgs()
}

func newFrontendServiceDropPlsqlStoredProcedureResult() interface{} {
	return frontendservice.NewFrontendServiceDropPlsqlStoredProcedureResult()
}

func addPlsqlPackageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceAddPlsqlPackageArgs)
	realResult := result.(*frontendservice.FrontendServiceAddPlsqlPackageResult)
	success, err := handler.(frontendservice.FrontendService).AddPlsqlPackage(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceAddPlsqlPackageArgs() interface{} {
	return frontendservice.NewFrontendServiceAddPlsqlPackageArgs()
}

func newFrontendServiceAddPlsqlPackageResult() interface{} {
	return frontendservice.NewFrontendServiceAddPlsqlPackageResult()
}

func dropPlsqlPackageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceDropPlsqlPackageArgs)
	realResult := result.(*frontendservice.FrontendServiceDropPlsqlPackageResult)
	success, err := handler.(frontendservice.FrontendService).DropPlsqlPackage(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceDropPlsqlPackageArgs() interface{} {
	return frontendservice.NewFrontendServiceDropPlsqlPackageArgs()
}

func newFrontendServiceDropPlsqlPackageResult() interface{} {
	return frontendservice.NewFrontendServiceDropPlsqlPackageResult()
}

func getMasterTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceGetMasterTokenArgs)
	realResult := result.(*frontendservice.FrontendServiceGetMasterTokenResult)
	success, err := handler.(frontendservice.FrontendService).GetMasterToken(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceGetMasterTokenArgs() interface{} {
	return frontendservice.NewFrontendServiceGetMasterTokenArgs()
}

func newFrontendServiceGetMasterTokenResult() interface{} {
	return frontendservice.NewFrontendServiceGetMasterTokenResult()
}

func getBinlogLagHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceGetBinlogLagArgs)
	realResult := result.(*frontendservice.FrontendServiceGetBinlogLagResult)
	success, err := handler.(frontendservice.FrontendService).GetBinlogLag(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceGetBinlogLagArgs() interface{} {
	return frontendservice.NewFrontendServiceGetBinlogLagArgs()
}

func newFrontendServiceGetBinlogLagResult() interface{} {
	return frontendservice.NewFrontendServiceGetBinlogLagResult()
}

func updateStatsCacheHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceUpdateStatsCacheArgs)
	realResult := result.(*frontendservice.FrontendServiceUpdateStatsCacheResult)
	success, err := handler.(frontendservice.FrontendService).UpdateStatsCache(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceUpdateStatsCacheArgs() interface{} {
	return frontendservice.NewFrontendServiceUpdateStatsCacheArgs()
}

func newFrontendServiceUpdateStatsCacheResult() interface{} {
	return frontendservice.NewFrontendServiceUpdateStatsCacheResult()
}

func getAutoIncrementRangeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceGetAutoIncrementRangeArgs)
	realResult := result.(*frontendservice.FrontendServiceGetAutoIncrementRangeResult)
	success, err := handler.(frontendservice.FrontendService).GetAutoIncrementRange(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceGetAutoIncrementRangeArgs() interface{} {
	return frontendservice.NewFrontendServiceGetAutoIncrementRangeArgs()
}

func newFrontendServiceGetAutoIncrementRangeResult() interface{} {
	return frontendservice.NewFrontendServiceGetAutoIncrementRangeResult()
}

func createPartitionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceCreatePartitionArgs)
	realResult := result.(*frontendservice.FrontendServiceCreatePartitionResult)
	success, err := handler.(frontendservice.FrontendService).CreatePartition(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceCreatePartitionArgs() interface{} {
	return frontendservice.NewFrontendServiceCreatePartitionArgs()
}

func newFrontendServiceCreatePartitionResult() interface{} {
	return frontendservice.NewFrontendServiceCreatePartitionResult()
}

func replacePartitionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceReplacePartitionArgs)
	realResult := result.(*frontendservice.FrontendServiceReplacePartitionResult)
	success, err := handler.(frontendservice.FrontendService).ReplacePartition(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceReplacePartitionArgs() interface{} {
	return frontendservice.NewFrontendServiceReplacePartitionArgs()
}

func newFrontendServiceReplacePartitionResult() interface{} {
	return frontendservice.NewFrontendServiceReplacePartitionResult()
}

func getMetaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceGetMetaArgs)
	realResult := result.(*frontendservice.FrontendServiceGetMetaResult)
	success, err := handler.(frontendservice.FrontendService).GetMeta(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceGetMetaArgs() interface{} {
	return frontendservice.NewFrontendServiceGetMetaArgs()
}

func newFrontendServiceGetMetaResult() interface{} {
	return frontendservice.NewFrontendServiceGetMetaResult()
}

func getBackendMetaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceGetBackendMetaArgs)
	realResult := result.(*frontendservice.FrontendServiceGetBackendMetaResult)
	success, err := handler.(frontendservice.FrontendService).GetBackendMeta(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceGetBackendMetaArgs() interface{} {
	return frontendservice.NewFrontendServiceGetBackendMetaArgs()
}

func newFrontendServiceGetBackendMetaResult() interface{} {
	return frontendservice.NewFrontendServiceGetBackendMetaResult()
}

func getColumnInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceGetColumnInfoArgs)
	realResult := result.(*frontendservice.FrontendServiceGetColumnInfoResult)
	success, err := handler.(frontendservice.FrontendService).GetColumnInfo(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceGetColumnInfoArgs() interface{} {
	return frontendservice.NewFrontendServiceGetColumnInfoArgs()
}

func newFrontendServiceGetColumnInfoResult() interface{} {
	return frontendservice.NewFrontendServiceGetColumnInfoResult()
}

func invalidateStatsCacheHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceInvalidateStatsCacheArgs)
	realResult := result.(*frontendservice.FrontendServiceInvalidateStatsCacheResult)
	success, err := handler.(frontendservice.FrontendService).InvalidateStatsCache(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceInvalidateStatsCacheArgs() interface{} {
	return frontendservice.NewFrontendServiceInvalidateStatsCacheArgs()
}

func newFrontendServiceInvalidateStatsCacheResult() interface{} {
	return frontendservice.NewFrontendServiceInvalidateStatsCacheResult()
}

func showProcessListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceShowProcessListArgs)
	realResult := result.(*frontendservice.FrontendServiceShowProcessListResult)
	success, err := handler.(frontendservice.FrontendService).ShowProcessList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceShowProcessListArgs() interface{} {
	return frontendservice.NewFrontendServiceShowProcessListArgs()
}

func newFrontendServiceShowProcessListResult() interface{} {
	return frontendservice.NewFrontendServiceShowProcessListResult()
}

func reportCommitTxnResult_Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceReportCommitTxnResultArgs)
	realResult := result.(*frontendservice.FrontendServiceReportCommitTxnResultResult)
	success, err := handler.(frontendservice.FrontendService).ReportCommitTxnResult_(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceReportCommitTxnResultArgs() interface{} {
	return frontendservice.NewFrontendServiceReportCommitTxnResultArgs()
}

func newFrontendServiceReportCommitTxnResultResult() interface{} {
	return frontendservice.NewFrontendServiceReportCommitTxnResultResult()
}

func showUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceShowUserArgs)
	realResult := result.(*frontendservice.FrontendServiceShowUserResult)
	success, err := handler.(frontendservice.FrontendService).ShowUser(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceShowUserArgs() interface{} {
	return frontendservice.NewFrontendServiceShowUserArgs()
}

func newFrontendServiceShowUserResult() interface{} {
	return frontendservice.NewFrontendServiceShowUserResult()
}

func syncQueryColumnsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceSyncQueryColumnsArgs)
	realResult := result.(*frontendservice.FrontendServiceSyncQueryColumnsResult)
	success, err := handler.(frontendservice.FrontendService).SyncQueryColumns(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceSyncQueryColumnsArgs() interface{} {
	return frontendservice.NewFrontendServiceSyncQueryColumnsArgs()
}

func newFrontendServiceSyncQueryColumnsResult() interface{} {
	return frontendservice.NewFrontendServiceSyncQueryColumnsResult()
}

func fetchSplitBatchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceFetchSplitBatchArgs)
	realResult := result.(*frontendservice.FrontendServiceFetchSplitBatchResult)
	success, err := handler.(frontendservice.FrontendService).FetchSplitBatch(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceFetchSplitBatchArgs() interface{} {
	return frontendservice.NewFrontendServiceFetchSplitBatchArgs()
}

func newFrontendServiceFetchSplitBatchResult() interface{} {
	return frontendservice.NewFrontendServiceFetchSplitBatchResult()
}

func updatePartitionStatsCacheHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceUpdatePartitionStatsCacheArgs)
	realResult := result.(*frontendservice.FrontendServiceUpdatePartitionStatsCacheResult)
	success, err := handler.(frontendservice.FrontendService).UpdatePartitionStatsCache(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceUpdatePartitionStatsCacheArgs() interface{} {
	return frontendservice.NewFrontendServiceUpdatePartitionStatsCacheArgs()
}

func newFrontendServiceUpdatePartitionStatsCacheResult() interface{} {
	return frontendservice.NewFrontendServiceUpdatePartitionStatsCacheResult()
}

func fetchRunningQueriesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*frontendservice.FrontendServiceFetchRunningQueriesArgs)
	realResult := result.(*frontendservice.FrontendServiceFetchRunningQueriesResult)
	success, err := handler.(frontendservice.FrontendService).FetchRunningQueries(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFrontendServiceFetchRunningQueriesArgs() interface{} {
	return frontendservice.NewFrontendServiceFetchRunningQueriesArgs()
}

func newFrontendServiceFetchRunningQueriesResult() interface{} {
	return frontendservice.NewFrontendServiceFetchRunningQueriesResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetDbNames(ctx context.Context, params *frontendservice.TGetDbsParams) (r *frontendservice.TGetDbsResult_, err error) {
	var _args frontendservice.FrontendServiceGetDbNamesArgs
	_args.Params = params
	var _result frontendservice.FrontendServiceGetDbNamesResult
	if err = p.c.Call(ctx, "getDbNames", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTableNames(ctx context.Context, params *frontendservice.TGetTablesParams) (r *frontendservice.TGetTablesResult_, err error) {
	var _args frontendservice.FrontendServiceGetTableNamesArgs
	_args.Params = params
	var _result frontendservice.FrontendServiceGetTableNamesResult
	if err = p.c.Call(ctx, "getTableNames", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DescribeTable(ctx context.Context, params *frontendservice.TDescribeTableParams) (r *frontendservice.TDescribeTableResult_, err error) {
	var _args frontendservice.FrontendServiceDescribeTableArgs
	_args.Params = params
	var _result frontendservice.FrontendServiceDescribeTableResult
	if err = p.c.Call(ctx, "describeTable", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DescribeTables(ctx context.Context, params *frontendservice.TDescribeTablesParams) (r *frontendservice.TDescribeTablesResult_, err error) {
	var _args frontendservice.FrontendServiceDescribeTablesArgs
	_args.Params = params
	var _result frontendservice.FrontendServiceDescribeTablesResult
	if err = p.c.Call(ctx, "describeTables", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ShowVariables(ctx context.Context, params *frontendservice.TShowVariableRequest) (r *frontendservice.TShowVariableResult_, err error) {
	var _args frontendservice.FrontendServiceShowVariablesArgs
	_args.Params = params
	var _result frontendservice.FrontendServiceShowVariablesResult
	if err = p.c.Call(ctx, "showVariables", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ReportExecStatus(ctx context.Context, params *frontendservice.TReportExecStatusParams) (r *frontendservice.TReportExecStatusResult_, err error) {
	var _args frontendservice.FrontendServiceReportExecStatusArgs
	_args.Params = params
	var _result frontendservice.FrontendServiceReportExecStatusResult
	if err = p.c.Call(ctx, "reportExecStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FinishTask(ctx context.Context, request *masterservice.TFinishTaskRequest) (r *masterservice.TMasterResult_, err error) {
	var _args frontendservice.FrontendServiceFinishTaskArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceFinishTaskResult
	if err = p.c.Call(ctx, "finishTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Report(ctx context.Context, request *masterservice.TReportRequest) (r *masterservice.TMasterResult_, err error) {
	var _args frontendservice.FrontendServiceReportArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceReportResult
	if err = p.c.Call(ctx, "report", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FetchResource(ctx context.Context) (r *masterservice.TFetchResourceResult_, err error) {
	var _args frontendservice.FrontendServiceFetchResourceArgs
	var _result frontendservice.FrontendServiceFetchResourceResult
	if err = p.c.Call(ctx, "fetchResource", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Forward(ctx context.Context, params *frontendservice.TMasterOpRequest) (r *frontendservice.TMasterOpResult_, err error) {
	var _args frontendservice.FrontendServiceForwardArgs
	_args.Params = params
	var _result frontendservice.FrontendServiceForwardResult
	if err = p.c.Call(ctx, "forward", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListTableStatus(ctx context.Context, params *frontendservice.TGetTablesParams) (r *frontendservice.TListTableStatusResult_, err error) {
	var _args frontendservice.FrontendServiceListTableStatusArgs
	_args.Params = params
	var _result frontendservice.FrontendServiceListTableStatusResult
	if err = p.c.Call(ctx, "listTableStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListTableMetadataNameIds(ctx context.Context, params *frontendservice.TGetTablesParams) (r *frontendservice.TListTableMetadataNameIdsResult_, err error) {
	var _args frontendservice.FrontendServiceListTableMetadataNameIdsArgs
	_args.Params = params
	var _result frontendservice.FrontendServiceListTableMetadataNameIdsResult
	if err = p.c.Call(ctx, "listTableMetadataNameIds", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListTablePrivilegeStatus(ctx context.Context, params *frontendservice.TGetTablesParams) (r *frontendservice.TListPrivilegesResult_, err error) {
	var _args frontendservice.FrontendServiceListTablePrivilegeStatusArgs
	_args.Params = params
	var _result frontendservice.FrontendServiceListTablePrivilegeStatusResult
	if err = p.c.Call(ctx, "listTablePrivilegeStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSchemaPrivilegeStatus(ctx context.Context, params *frontendservice.TGetTablesParams) (r *frontendservice.TListPrivilegesResult_, err error) {
	var _args frontendservice.FrontendServiceListSchemaPrivilegeStatusArgs
	_args.Params = params
	var _result frontendservice.FrontendServiceListSchemaPrivilegeStatusResult
	if err = p.c.Call(ctx, "listSchemaPrivilegeStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListUserPrivilegeStatus(ctx context.Context, params *frontendservice.TGetTablesParams) (r *frontendservice.TListPrivilegesResult_, err error) {
	var _args frontendservice.FrontendServiceListUserPrivilegeStatusArgs
	_args.Params = params
	var _result frontendservice.FrontendServiceListUserPrivilegeStatusResult
	if err = p.c.Call(ctx, "listUserPrivilegeStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateExportTaskStatus(ctx context.Context, request *frontendservice.TUpdateExportTaskStatusRequest) (r *frontendservice.TFeResult_, err error) {
	var _args frontendservice.FrontendServiceUpdateExportTaskStatusArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceUpdateExportTaskStatusResult
	if err = p.c.Call(ctx, "updateExportTaskStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoadTxnBegin(ctx context.Context, request *frontendservice.TLoadTxnBeginRequest) (r *frontendservice.TLoadTxnBeginResult_, err error) {
	var _args frontendservice.FrontendServiceLoadTxnBeginArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceLoadTxnBeginResult
	if err = p.c.Call(ctx, "loadTxnBegin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoadTxnPreCommit(ctx context.Context, request *frontendservice.TLoadTxnCommitRequest) (r *frontendservice.TLoadTxnCommitResult_, err error) {
	var _args frontendservice.FrontendServiceLoadTxnPreCommitArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceLoadTxnPreCommitResult
	if err = p.c.Call(ctx, "loadTxnPreCommit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoadTxn2PC(ctx context.Context, request *frontendservice.TLoadTxn2PCRequest) (r *frontendservice.TLoadTxn2PCResult_, err error) {
	var _args frontendservice.FrontendServiceLoadTxn2PCArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceLoadTxn2PCResult
	if err = p.c.Call(ctx, "loadTxn2PC", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoadTxnCommit(ctx context.Context, request *frontendservice.TLoadTxnCommitRequest) (r *frontendservice.TLoadTxnCommitResult_, err error) {
	var _args frontendservice.FrontendServiceLoadTxnCommitArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceLoadTxnCommitResult
	if err = p.c.Call(ctx, "loadTxnCommit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoadTxnRollback(ctx context.Context, request *frontendservice.TLoadTxnRollbackRequest) (r *frontendservice.TLoadTxnRollbackResult_, err error) {
	var _args frontendservice.FrontendServiceLoadTxnRollbackArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceLoadTxnRollbackResult
	if err = p.c.Call(ctx, "loadTxnRollback", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BeginTxn(ctx context.Context, request *frontendservice.TBeginTxnRequest) (r *frontendservice.TBeginTxnResult_, err error) {
	var _args frontendservice.FrontendServiceBeginTxnArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceBeginTxnResult
	if err = p.c.Call(ctx, "beginTxn", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommitTxn(ctx context.Context, request *frontendservice.TCommitTxnRequest) (r *frontendservice.TCommitTxnResult_, err error) {
	var _args frontendservice.FrontendServiceCommitTxnArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceCommitTxnResult
	if err = p.c.Call(ctx, "commitTxn", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RollbackTxn(ctx context.Context, request *frontendservice.TRollbackTxnRequest) (r *frontendservice.TRollbackTxnResult_, err error) {
	var _args frontendservice.FrontendServiceRollbackTxnArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceRollbackTxnResult
	if err = p.c.Call(ctx, "rollbackTxn", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBinlog(ctx context.Context, request *frontendservice.TGetBinlogRequest) (r *frontendservice.TGetBinlogResult_, err error) {
	var _args frontendservice.FrontendServiceGetBinlogArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceGetBinlogResult
	if err = p.c.Call(ctx, "getBinlog", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSnapshot(ctx context.Context, request *frontendservice.TGetSnapshotRequest) (r *frontendservice.TGetSnapshotResult_, err error) {
	var _args frontendservice.FrontendServiceGetSnapshotArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceGetSnapshotResult
	if err = p.c.Call(ctx, "getSnapshot", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RestoreSnapshot(ctx context.Context, request *frontendservice.TRestoreSnapshotRequest) (r *frontendservice.TRestoreSnapshotResult_, err error) {
	var _args frontendservice.FrontendServiceRestoreSnapshotArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceRestoreSnapshotResult
	if err = p.c.Call(ctx, "restoreSnapshot", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) WaitingTxnStatus(ctx context.Context, request *frontendservice.TWaitingTxnStatusRequest) (r *frontendservice.TWaitingTxnStatusResult_, err error) {
	var _args frontendservice.FrontendServiceWaitingTxnStatusArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceWaitingTxnStatusResult
	if err = p.c.Call(ctx, "waitingTxnStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StreamLoadPut(ctx context.Context, request *frontendservice.TStreamLoadPutRequest) (r *frontendservice.TStreamLoadPutResult_, err error) {
	var _args frontendservice.FrontendServiceStreamLoadPutArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceStreamLoadPutResult
	if err = p.c.Call(ctx, "streamLoadPut", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StreamLoadMultiTablePut(ctx context.Context, request *frontendservice.TStreamLoadPutRequest) (r *frontendservice.TStreamLoadMultiTablePutResult_, err error) {
	var _args frontendservice.FrontendServiceStreamLoadMultiTablePutArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceStreamLoadMultiTablePutResult
	if err = p.c.Call(ctx, "streamLoadMultiTablePut", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SnapshotLoaderReport(ctx context.Context, request *frontendservice.TSnapshotLoaderReportRequest) (r *status.TStatus, err error) {
	var _args frontendservice.FrontendServiceSnapshotLoaderReportArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceSnapshotLoaderReportResult
	if err = p.c.Call(ctx, "snapshotLoaderReport", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Ping(ctx context.Context, request *frontendservice.TFrontendPingFrontendRequest) (r *frontendservice.TFrontendPingFrontendResult_, err error) {
	var _args frontendservice.FrontendServicePingArgs
	_args.Request = request
	var _result frontendservice.FrontendServicePingResult
	if err = p.c.Call(ctx, "ping", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InitExternalCtlMeta(ctx context.Context, request *frontendservice.TInitExternalCtlMetaRequest) (r *frontendservice.TInitExternalCtlMetaResult_, err error) {
	var _args frontendservice.FrontendServiceInitExternalCtlMetaArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceInitExternalCtlMetaResult
	if err = p.c.Call(ctx, "initExternalCtlMeta", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FetchSchemaTableData(ctx context.Context, request *frontendservice.TFetchSchemaTableDataRequest) (r *frontendservice.TFetchSchemaTableDataResult_, err error) {
	var _args frontendservice.FrontendServiceFetchSchemaTableDataArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceFetchSchemaTableDataResult
	if err = p.c.Call(ctx, "fetchSchemaTableData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AcquireToken(ctx context.Context) (r *frontendservice.TMySqlLoadAcquireTokenResult_, err error) {
	var _args frontendservice.FrontendServiceAcquireTokenArgs
	var _result frontendservice.FrontendServiceAcquireTokenResult
	if err = p.c.Call(ctx, "acquireToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckToken(ctx context.Context, token string) (r bool, err error) {
	var _args frontendservice.FrontendServiceCheckTokenArgs
	_args.Token = token
	var _result frontendservice.FrontendServiceCheckTokenResult
	if err = p.c.Call(ctx, "checkToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ConfirmUnusedRemoteFiles(ctx context.Context, request *frontendservice.TConfirmUnusedRemoteFilesRequest) (r *frontendservice.TConfirmUnusedRemoteFilesResult_, err error) {
	var _args frontendservice.FrontendServiceConfirmUnusedRemoteFilesArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceConfirmUnusedRemoteFilesResult
	if err = p.c.Call(ctx, "confirmUnusedRemoteFiles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckAuth(ctx context.Context, request *frontendservice.TCheckAuthRequest) (r *frontendservice.TCheckAuthResult_, err error) {
	var _args frontendservice.FrontendServiceCheckAuthArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceCheckAuthResult
	if err = p.c.Call(ctx, "checkAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetQueryStats(ctx context.Context, request *frontendservice.TGetQueryStatsRequest) (r *frontendservice.TQueryStatsResult_, err error) {
	var _args frontendservice.FrontendServiceGetQueryStatsArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceGetQueryStatsResult
	if err = p.c.Call(ctx, "getQueryStats", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTabletReplicaInfos(ctx context.Context, request *frontendservice.TGetTabletReplicaInfosRequest) (r *frontendservice.TGetTabletReplicaInfosResult_, err error) {
	var _args frontendservice.FrontendServiceGetTabletReplicaInfosArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceGetTabletReplicaInfosResult
	if err = p.c.Call(ctx, "getTabletReplicaInfos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddPlsqlStoredProcedure(ctx context.Context, request *frontendservice.TAddPlsqlStoredProcedureRequest) (r *frontendservice.TPlsqlStoredProcedureResult_, err error) {
	var _args frontendservice.FrontendServiceAddPlsqlStoredProcedureArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceAddPlsqlStoredProcedureResult
	if err = p.c.Call(ctx, "addPlsqlStoredProcedure", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DropPlsqlStoredProcedure(ctx context.Context, request *frontendservice.TDropPlsqlStoredProcedureRequest) (r *frontendservice.TPlsqlStoredProcedureResult_, err error) {
	var _args frontendservice.FrontendServiceDropPlsqlStoredProcedureArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceDropPlsqlStoredProcedureResult
	if err = p.c.Call(ctx, "dropPlsqlStoredProcedure", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddPlsqlPackage(ctx context.Context, request *frontendservice.TAddPlsqlPackageRequest) (r *frontendservice.TPlsqlPackageResult_, err error) {
	var _args frontendservice.FrontendServiceAddPlsqlPackageArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceAddPlsqlPackageResult
	if err = p.c.Call(ctx, "addPlsqlPackage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DropPlsqlPackage(ctx context.Context, request *frontendservice.TDropPlsqlPackageRequest) (r *frontendservice.TPlsqlPackageResult_, err error) {
	var _args frontendservice.FrontendServiceDropPlsqlPackageArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceDropPlsqlPackageResult
	if err = p.c.Call(ctx, "dropPlsqlPackage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMasterToken(ctx context.Context, request *frontendservice.TGetMasterTokenRequest) (r *frontendservice.TGetMasterTokenResult_, err error) {
	var _args frontendservice.FrontendServiceGetMasterTokenArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceGetMasterTokenResult
	if err = p.c.Call(ctx, "getMasterToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBinlogLag(ctx context.Context, request *frontendservice.TGetBinlogLagRequest) (r *frontendservice.TGetBinlogLagResult_, err error) {
	var _args frontendservice.FrontendServiceGetBinlogLagArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceGetBinlogLagResult
	if err = p.c.Call(ctx, "getBinlogLag", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateStatsCache(ctx context.Context, request *frontendservice.TUpdateFollowerStatsCacheRequest) (r *status.TStatus, err error) {
	var _args frontendservice.FrontendServiceUpdateStatsCacheArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceUpdateStatsCacheResult
	if err = p.c.Call(ctx, "updateStatsCache", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAutoIncrementRange(ctx context.Context, request *frontendservice.TAutoIncrementRangeRequest) (r *frontendservice.TAutoIncrementRangeResult_, err error) {
	var _args frontendservice.FrontendServiceGetAutoIncrementRangeArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceGetAutoIncrementRangeResult
	if err = p.c.Call(ctx, "getAutoIncrementRange", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreatePartition(ctx context.Context, request *frontendservice.TCreatePartitionRequest) (r *frontendservice.TCreatePartitionResult_, err error) {
	var _args frontendservice.FrontendServiceCreatePartitionArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceCreatePartitionResult
	if err = p.c.Call(ctx, "createPartition", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ReplacePartition(ctx context.Context, request *frontendservice.TReplacePartitionRequest) (r *frontendservice.TReplacePartitionResult_, err error) {
	var _args frontendservice.FrontendServiceReplacePartitionArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceReplacePartitionResult
	if err = p.c.Call(ctx, "replacePartition", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMeta(ctx context.Context, request *frontendservice.TGetMetaRequest) (r *frontendservice.TGetMetaResult_, err error) {
	var _args frontendservice.FrontendServiceGetMetaArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceGetMetaResult
	if err = p.c.Call(ctx, "getMeta", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBackendMeta(ctx context.Context, request *frontendservice.TGetBackendMetaRequest) (r *frontendservice.TGetBackendMetaResult_, err error) {
	var _args frontendservice.FrontendServiceGetBackendMetaArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceGetBackendMetaResult
	if err = p.c.Call(ctx, "getBackendMeta", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetColumnInfo(ctx context.Context, request *frontendservice.TGetColumnInfoRequest) (r *frontendservice.TGetColumnInfoResult_, err error) {
	var _args frontendservice.FrontendServiceGetColumnInfoArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceGetColumnInfoResult
	if err = p.c.Call(ctx, "getColumnInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InvalidateStatsCache(ctx context.Context, request *frontendservice.TInvalidateFollowerStatsCacheRequest) (r *status.TStatus, err error) {
	var _args frontendservice.FrontendServiceInvalidateStatsCacheArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceInvalidateStatsCacheResult
	if err = p.c.Call(ctx, "invalidateStatsCache", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ShowProcessList(ctx context.Context, request *frontendservice.TShowProcessListRequest) (r *frontendservice.TShowProcessListResult_, err error) {
	var _args frontendservice.FrontendServiceShowProcessListArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceShowProcessListResult
	if err = p.c.Call(ctx, "showProcessList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ReportCommitTxnResult_(ctx context.Context, request *frontendservice.TReportCommitTxnResultRequest) (r *status.TStatus, err error) {
	var _args frontendservice.FrontendServiceReportCommitTxnResultArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceReportCommitTxnResultResult
	if err = p.c.Call(ctx, "reportCommitTxnResult", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ShowUser(ctx context.Context, request *frontendservice.TShowUserRequest) (r *frontendservice.TShowUserResult_, err error) {
	var _args frontendservice.FrontendServiceShowUserArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceShowUserResult
	if err = p.c.Call(ctx, "showUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SyncQueryColumns(ctx context.Context, request *frontendservice.TSyncQueryColumns) (r *status.TStatus, err error) {
	var _args frontendservice.FrontendServiceSyncQueryColumnsArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceSyncQueryColumnsResult
	if err = p.c.Call(ctx, "syncQueryColumns", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FetchSplitBatch(ctx context.Context, request *frontendservice.TFetchSplitBatchRequest) (r *frontendservice.TFetchSplitBatchResult_, err error) {
	var _args frontendservice.FrontendServiceFetchSplitBatchArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceFetchSplitBatchResult
	if err = p.c.Call(ctx, "fetchSplitBatch", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdatePartitionStatsCache(ctx context.Context, request *frontendservice.TUpdateFollowerPartitionStatsCacheRequest) (r *status.TStatus, err error) {
	var _args frontendservice.FrontendServiceUpdatePartitionStatsCacheArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceUpdatePartitionStatsCacheResult
	if err = p.c.Call(ctx, "updatePartitionStatsCache", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FetchRunningQueries(ctx context.Context, request *frontendservice.TFetchRunningQueriesRequest) (r *frontendservice.TFetchRunningQueriesResult_, err error) {
	var _args frontendservice.FrontendServiceFetchRunningQueriesArgs
	_args.Request = request
	var _result frontendservice.FrontendServiceFetchRunningQueriesResult
	if err = p.c.Call(ctx, "fetchRunningQueries", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
