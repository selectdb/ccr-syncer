// Code generated by Kitex v0.8.0. DO NOT EDIT.

package palointernalservice

import (
	"bytes"
	"fmt"
	"reflect"
	"strings"

	"github.com/apache/thrift/lib/go/thrift"

	"github.com/cloudwego/kitex/pkg/protocol/bthrift"

	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/data"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/datasinks"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/descriptors"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/exprs"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/paloservice"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/planner"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/plannodes"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/runtimeprofile"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/status"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/types"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = thrift.TProtocol(nil)
	_ = bthrift.BinaryWriter(nil)
	_ = data.KitexUnusedProtection
	_ = datasinks.KitexUnusedProtection
	_ = descriptors.KitexUnusedProtection
	_ = exprs.KitexUnusedProtection
	_ = paloservice.KitexUnusedProtection
	_ = planner.KitexUnusedProtection
	_ = plannodes.KitexUnusedProtection
	_ = runtimeprofile.KitexUnusedProtection
	_ = status.KitexUnusedProtection
	_ = types.KitexUnusedProtection
)

func (p *TMysqlErrorHubInfo) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetHost bool = false
	var issetPort bool = false
	var issetUser bool = false
	var issetPasswd bool = false
	var issetDb bool = false
	var issetTable bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetHost = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPort = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetUser = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPasswd = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetDb = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTable = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetHost {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPort {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetUser {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPasswd {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetDb {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetTable {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMysqlErrorHubInfo[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TMysqlErrorHubInfo[fieldId]))
}

func (p *TMysqlErrorHubInfo) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Host = v

	}
	return offset, nil
}

func (p *TMysqlErrorHubInfo) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Port = v

	}
	return offset, nil
}

func (p *TMysqlErrorHubInfo) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.User = v

	}
	return offset, nil
}

func (p *TMysqlErrorHubInfo) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Passwd = v

	}
	return offset, nil
}

func (p *TMysqlErrorHubInfo) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Db = v

	}
	return offset, nil
}

func (p *TMysqlErrorHubInfo) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Table = v

	}
	return offset, nil
}

// for compatibility
func (p *TMysqlErrorHubInfo) FastWrite(buf []byte) int {
	return 0
}

func (p *TMysqlErrorHubInfo) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TMysqlErrorHubInfo")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TMysqlErrorHubInfo) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TMysqlErrorHubInfo")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TMysqlErrorHubInfo) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "host", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Host)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TMysqlErrorHubInfo) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "port", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.Port)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TMysqlErrorHubInfo) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "user", thrift.STRING, 3)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.User)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TMysqlErrorHubInfo) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "passwd", thrift.STRING, 4)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Passwd)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TMysqlErrorHubInfo) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "db", thrift.STRING, 5)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Db)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TMysqlErrorHubInfo) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "table", thrift.STRING, 6)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Table)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TMysqlErrorHubInfo) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("host", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.Host)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TMysqlErrorHubInfo) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("port", thrift.I32, 2)
	l += bthrift.Binary.I32Length(p.Port)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TMysqlErrorHubInfo) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("user", thrift.STRING, 3)
	l += bthrift.Binary.StringLengthNocopy(p.User)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TMysqlErrorHubInfo) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("passwd", thrift.STRING, 4)
	l += bthrift.Binary.StringLengthNocopy(p.Passwd)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TMysqlErrorHubInfo) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("db", thrift.STRING, 5)
	l += bthrift.Binary.StringLengthNocopy(p.Db)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TMysqlErrorHubInfo) field6Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("table", thrift.STRING, 6)
	l += bthrift.Binary.StringLengthNocopy(p.Table)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TBrokerErrorHubInfo) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBrokerAddr bool = false
	var issetPath bool = false
	var issetProp bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetBrokerAddr = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPath = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetProp = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetBrokerAddr {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPath {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetProp {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TBrokerErrorHubInfo[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TBrokerErrorHubInfo[fieldId]))
}

func (p *TBrokerErrorHubInfo) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTNetworkAddress()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.BrokerAddr = tmp
	return offset, nil
}

func (p *TBrokerErrorHubInfo) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Path = v

	}
	return offset, nil
}

func (p *TBrokerErrorHubInfo) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Prop = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.Prop[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TBrokerErrorHubInfo) FastWrite(buf []byte) int {
	return 0
}

func (p *TBrokerErrorHubInfo) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TBrokerErrorHubInfo")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TBrokerErrorHubInfo) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TBrokerErrorHubInfo")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TBrokerErrorHubInfo) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "broker_addr", thrift.STRUCT, 1)
	offset += p.BrokerAddr.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TBrokerErrorHubInfo) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "path", thrift.STRING, 2)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.Path)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TBrokerErrorHubInfo) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "prop", thrift.MAP, 3)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, 0)
	var length int
	for k, v := range p.Prop {
		length++

		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)

		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRING, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TBrokerErrorHubInfo) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("broker_addr", thrift.STRUCT, 1)
	l += p.BrokerAddr.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TBrokerErrorHubInfo) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("path", thrift.STRING, 2)
	l += bthrift.Binary.StringLengthNocopy(p.Path)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TBrokerErrorHubInfo) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("prop", thrift.MAP, 3)
	l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, len(p.Prop))
	for k, v := range p.Prop {

		l += bthrift.Binary.StringLengthNocopy(k)

		l += bthrift.Binary.StringLengthNocopy(v)

	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TLoadErrorHubInfo) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TLoadErrorHubInfo[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TLoadErrorHubInfo[fieldId]))
}

func (p *TLoadErrorHubInfo) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Type = TErrorHubType(v)

	}
	return offset, nil
}

func (p *TLoadErrorHubInfo) FastReadField2(buf []byte) (int, error) {
	offset := 0

	tmp := NewTMysqlErrorHubInfo()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.MysqlInfo = tmp
	return offset, nil
}

func (p *TLoadErrorHubInfo) FastReadField3(buf []byte) (int, error) {
	offset := 0

	tmp := NewTBrokerErrorHubInfo()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.BrokerInfo = tmp
	return offset, nil
}

// for compatibility
func (p *TLoadErrorHubInfo) FastWrite(buf []byte) int {
	return 0
}

func (p *TLoadErrorHubInfo) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TLoadErrorHubInfo")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TLoadErrorHubInfo) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TLoadErrorHubInfo")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TLoadErrorHubInfo) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "type", thrift.I32, 1)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.Type))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TLoadErrorHubInfo) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMysqlInfo() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "mysql_info", thrift.STRUCT, 2)
		offset += p.MysqlInfo.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TLoadErrorHubInfo) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBrokerInfo() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "broker_info", thrift.STRUCT, 3)
		offset += p.BrokerInfo.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TLoadErrorHubInfo) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("type", thrift.I32, 1)
	l += bthrift.Binary.I32Length(int32(p.Type))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TLoadErrorHubInfo) field2Length() int {
	l := 0
	if p.IsSetMysqlInfo() {
		l += bthrift.Binary.FieldBeginLength("mysql_info", thrift.STRUCT, 2)
		l += p.MysqlInfo.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TLoadErrorHubInfo) field3Length() int {
	l := 0
	if p.IsSetBrokerInfo() {
		l += bthrift.Binary.FieldBeginLength("broker_info", thrift.STRUCT, 3)
		l += p.BrokerInfo.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TResourceLimit) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TResourceLimit[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TResourceLimit) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.CpuLimit = &v

	}
	return offset, nil
}

// for compatibility
func (p *TResourceLimit) FastWrite(buf []byte) int {
	return 0
}

func (p *TResourceLimit) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TResourceLimit")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TResourceLimit) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TResourceLimit")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TResourceLimit) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCpuLimit() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "cpu_limit", thrift.I32, 1)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.CpuLimit)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TResourceLimit) field1Length() int {
	l := 0
	if p.IsSetCpuLimit() {
		l += bthrift.Binary.FieldBeginLength("cpu_limit", thrift.I32, 1)
		l += bthrift.Binary.I32Length(*p.CpuLimit)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField15(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField16(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField17(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField18(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField19(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField20(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField21(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField22(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 23:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField23(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 24:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField24(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 25:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField25(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 26:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField26(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 27:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField27(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 28:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField28(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 29:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField29(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 30:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField30(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 31:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField31(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 32:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField32(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 33:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField33(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 34:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField34(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 42:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField42(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 43:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField43(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 44:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField44(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 45:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField45(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 46:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField46(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 48:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField48(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 49:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField49(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 50:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField50(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 51:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField51(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 52:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField52(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 53:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField53(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 54:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField54(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 55:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField55(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 56:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField56(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 57:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField57(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 58:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField58(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 59:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField59(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 60:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField60(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 61:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField61(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 62:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField62(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 63:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField63(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 64:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField64(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 65:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField65(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 66:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField66(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 67:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField67(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 68:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField68(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 69:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField69(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 70:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField70(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 71:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField71(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 72:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField72(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 73:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField73(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 74:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField74(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 75:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField75(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 76:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField76(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 77:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField77(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 78:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField78(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 79:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField79(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 80:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField80(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 81:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField81(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 82:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField82(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 83:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField83(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 84:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField84(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 85:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField85(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 86:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField86(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 87:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField87(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 88:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField88(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 89:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField89(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 90:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField90(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 91:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField91(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 92:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField92(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 93:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField93(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 94:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField94(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 95:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField95(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 96:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField96(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 97:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField97(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 98:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField98(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 99:
			if fieldTypeId == thrift.DOUBLE {
				l, err = p.FastReadField99(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 100:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField100(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 101:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField101(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 102:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField102(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 103:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField103(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 104:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField104(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 105:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField105(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 106:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField106(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 107:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField107(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 108:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField108(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 109:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField109(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 110:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField110(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 111:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField111(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 112:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField112(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 113:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField113(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 114:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField114(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 115:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField115(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 116:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField116(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 117:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField117(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 1000:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField1000(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TQueryOptions[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TQueryOptions) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.AbortOnError = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.MaxErrors = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.DisableCodegen = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.BatchSize = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.NumNodes = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.MaxScanRangeLength = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField7(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.NumScannerThreads = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.MaxIoBuffers = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.AllowUnsupportedFormats = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField10(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.DefaultOrderByLimit = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField12(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.MemLimit = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField13(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.AbortOnDefaultLimitExceeded = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField14(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.QueryTimeout = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField15(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.IsReportSuccess = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField16(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.CodegenLevel = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField17(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.KuduLatestObservedTs = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField18(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.QueryType = TQueryType(v)

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField19(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.MinReservation = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField20(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.MaxReservation = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField21(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.InitialReservationTotalClaims = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField22(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.BufferPoolLimit = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField23(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.DefaultSpillableBufferSize = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField24(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.MinSpillableBufferSize = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField25(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.MaxRowSize = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField26(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.DisableStreamPreaggregations = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField27(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.MtDop = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField28(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.LoadMemLimit = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField29(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.MaxScanKeyNum = &v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField30(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.MaxPushdownConditionsPerColumn = &v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField31(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableSpilling = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField32(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableEnableExchangeNodeParallelMerge = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField33(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.RuntimeFilterWaitTimeMs = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField34(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.RuntimeFilterMaxInNum = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField42(buf []byte) (int, error) {
	offset := 0

	tmp := NewTResourceLimit()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ResourceLimit = tmp
	return offset, nil
}

func (p *TQueryOptions) FastReadField43(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ReturnObjectDataAsBinary = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField44(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TrimTailingSpacesForExternalTableQuery = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField45(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.EnableFunctionPushdown = &v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField46(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.FragmentTransmissionCompressionCodec = &v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField48(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.EnableLocalExchange = &v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField49(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SkipStorageEngineMerge = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField50(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SkipDeletePredicate = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField51(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.EnableNewShuffleHashMethod = &v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField52(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.BeExecVersion = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField53(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.PartitionedHashJoinRowsThreshold = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField54(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.EnableShareHashTableForBroadcastJoin = &v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField55(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.CheckOverflowForDecimal = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField56(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SkipDeleteBitmap = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField57(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnablePipelineEngine = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField58(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.RepeatMaxNum = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField59(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ExternalSortBytesThreshold = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField60(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.PartitionedHashAggRowsThreshold = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField61(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableFileCache = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField62(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.InsertTimeout = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField63(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ExecutionTimeout = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField64(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.DryRunQuery = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField65(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableCommonExprPushdown = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField66(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ParallelInstance = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField67(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.MysqlRowBinaryFormat = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField68(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ExternalAggBytesThreshold = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField69(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ExternalAggPartitionBits = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField70(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.FileCacheBasePath = &v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField71(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableParquetLazyMat = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField72(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableOrcLazyMat = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField73(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ScanQueueMemLimit = &v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField74(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableScanNodeRunSerial = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField75(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableInsertStrict = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField76(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableInvertedIndexQuery = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField77(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TruncateCharOrVarcharColumns = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField78(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableHashJoinEarlyStartProbe = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField79(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnablePipelineXEngine = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField80(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableMemtableOnSinkNode = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField81(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableDeleteSubPredicateV2 = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField82(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.FeProcessUuid = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField83(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.InvertedIndexConjunctionOptThreshold = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField84(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableProfile = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField85(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnablePageCache = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField86(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.AnalyzeTimeout = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField87(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.FasterFloatConvert = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField88(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableDecimal256 = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField89(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableLocalShuffle = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField90(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SkipMissingVersion = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField91(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.RuntimeFilterWaitInfinitely = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField92(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.WaitFullBlockScheduleTimes = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField93(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.InvertedIndexMaxExpansions = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField94(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.InvertedIndexSkipThreshold = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField95(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableParallelScan = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField96(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ParallelScanMaxScannersCount = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField97(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ParallelScanMinRowsPerScanner = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField98(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SkipBadTablet = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField99(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadDouble(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ScannerScaleUpRatio = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField100(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableDistinctStreamingAggregation = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField101(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableJoinSpill = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField102(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableSortSpill = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField103(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableAggSpill = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField104(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.MinRevocableMem = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField105(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SpillStreamingAggMemLimit = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField106(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.DataQueueMaxBlocks = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField107(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableCommonExprPushdownForInvertedIndex = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField108(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.LocalExchangeFreeBlocksLimit = &v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField109(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableForceSpill = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField110(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableParquetFilterByMinMax = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField111(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableOrcFilterByMinMax = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField112(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.MaxColumnReaderNum = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField113(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableLocalMergeSort = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField114(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableParallelResultSink = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField115(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableShortCircuitQueryAccessColumnStore = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField116(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnableNoNeedReadDataOpt = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField117(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ReadCsvEmptyLineAsNull = v

	}
	return offset, nil
}

func (p *TQueryOptions) FastReadField1000(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.DisableFileCache = v

	}
	return offset, nil
}

// for compatibility
func (p *TQueryOptions) FastWrite(buf []byte) int {
	return 0
}

func (p *TQueryOptions) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TQueryOptions")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
		offset += p.fastWriteField15(buf[offset:], binaryWriter)
		offset += p.fastWriteField16(buf[offset:], binaryWriter)
		offset += p.fastWriteField17(buf[offset:], binaryWriter)
		offset += p.fastWriteField19(buf[offset:], binaryWriter)
		offset += p.fastWriteField20(buf[offset:], binaryWriter)
		offset += p.fastWriteField21(buf[offset:], binaryWriter)
		offset += p.fastWriteField22(buf[offset:], binaryWriter)
		offset += p.fastWriteField23(buf[offset:], binaryWriter)
		offset += p.fastWriteField24(buf[offset:], binaryWriter)
		offset += p.fastWriteField25(buf[offset:], binaryWriter)
		offset += p.fastWriteField26(buf[offset:], binaryWriter)
		offset += p.fastWriteField27(buf[offset:], binaryWriter)
		offset += p.fastWriteField28(buf[offset:], binaryWriter)
		offset += p.fastWriteField29(buf[offset:], binaryWriter)
		offset += p.fastWriteField30(buf[offset:], binaryWriter)
		offset += p.fastWriteField31(buf[offset:], binaryWriter)
		offset += p.fastWriteField32(buf[offset:], binaryWriter)
		offset += p.fastWriteField33(buf[offset:], binaryWriter)
		offset += p.fastWriteField34(buf[offset:], binaryWriter)
		offset += p.fastWriteField43(buf[offset:], binaryWriter)
		offset += p.fastWriteField44(buf[offset:], binaryWriter)
		offset += p.fastWriteField45(buf[offset:], binaryWriter)
		offset += p.fastWriteField48(buf[offset:], binaryWriter)
		offset += p.fastWriteField49(buf[offset:], binaryWriter)
		offset += p.fastWriteField50(buf[offset:], binaryWriter)
		offset += p.fastWriteField51(buf[offset:], binaryWriter)
		offset += p.fastWriteField52(buf[offset:], binaryWriter)
		offset += p.fastWriteField53(buf[offset:], binaryWriter)
		offset += p.fastWriteField54(buf[offset:], binaryWriter)
		offset += p.fastWriteField55(buf[offset:], binaryWriter)
		offset += p.fastWriteField56(buf[offset:], binaryWriter)
		offset += p.fastWriteField57(buf[offset:], binaryWriter)
		offset += p.fastWriteField58(buf[offset:], binaryWriter)
		offset += p.fastWriteField59(buf[offset:], binaryWriter)
		offset += p.fastWriteField60(buf[offset:], binaryWriter)
		offset += p.fastWriteField61(buf[offset:], binaryWriter)
		offset += p.fastWriteField62(buf[offset:], binaryWriter)
		offset += p.fastWriteField63(buf[offset:], binaryWriter)
		offset += p.fastWriteField64(buf[offset:], binaryWriter)
		offset += p.fastWriteField65(buf[offset:], binaryWriter)
		offset += p.fastWriteField66(buf[offset:], binaryWriter)
		offset += p.fastWriteField67(buf[offset:], binaryWriter)
		offset += p.fastWriteField68(buf[offset:], binaryWriter)
		offset += p.fastWriteField69(buf[offset:], binaryWriter)
		offset += p.fastWriteField71(buf[offset:], binaryWriter)
		offset += p.fastWriteField72(buf[offset:], binaryWriter)
		offset += p.fastWriteField73(buf[offset:], binaryWriter)
		offset += p.fastWriteField74(buf[offset:], binaryWriter)
		offset += p.fastWriteField75(buf[offset:], binaryWriter)
		offset += p.fastWriteField76(buf[offset:], binaryWriter)
		offset += p.fastWriteField77(buf[offset:], binaryWriter)
		offset += p.fastWriteField78(buf[offset:], binaryWriter)
		offset += p.fastWriteField79(buf[offset:], binaryWriter)
		offset += p.fastWriteField80(buf[offset:], binaryWriter)
		offset += p.fastWriteField81(buf[offset:], binaryWriter)
		offset += p.fastWriteField82(buf[offset:], binaryWriter)
		offset += p.fastWriteField83(buf[offset:], binaryWriter)
		offset += p.fastWriteField84(buf[offset:], binaryWriter)
		offset += p.fastWriteField85(buf[offset:], binaryWriter)
		offset += p.fastWriteField86(buf[offset:], binaryWriter)
		offset += p.fastWriteField87(buf[offset:], binaryWriter)
		offset += p.fastWriteField88(buf[offset:], binaryWriter)
		offset += p.fastWriteField89(buf[offset:], binaryWriter)
		offset += p.fastWriteField90(buf[offset:], binaryWriter)
		offset += p.fastWriteField91(buf[offset:], binaryWriter)
		offset += p.fastWriteField92(buf[offset:], binaryWriter)
		offset += p.fastWriteField93(buf[offset:], binaryWriter)
		offset += p.fastWriteField94(buf[offset:], binaryWriter)
		offset += p.fastWriteField95(buf[offset:], binaryWriter)
		offset += p.fastWriteField96(buf[offset:], binaryWriter)
		offset += p.fastWriteField97(buf[offset:], binaryWriter)
		offset += p.fastWriteField98(buf[offset:], binaryWriter)
		offset += p.fastWriteField99(buf[offset:], binaryWriter)
		offset += p.fastWriteField100(buf[offset:], binaryWriter)
		offset += p.fastWriteField101(buf[offset:], binaryWriter)
		offset += p.fastWriteField102(buf[offset:], binaryWriter)
		offset += p.fastWriteField103(buf[offset:], binaryWriter)
		offset += p.fastWriteField104(buf[offset:], binaryWriter)
		offset += p.fastWriteField105(buf[offset:], binaryWriter)
		offset += p.fastWriteField106(buf[offset:], binaryWriter)
		offset += p.fastWriteField107(buf[offset:], binaryWriter)
		offset += p.fastWriteField108(buf[offset:], binaryWriter)
		offset += p.fastWriteField109(buf[offset:], binaryWriter)
		offset += p.fastWriteField110(buf[offset:], binaryWriter)
		offset += p.fastWriteField111(buf[offset:], binaryWriter)
		offset += p.fastWriteField112(buf[offset:], binaryWriter)
		offset += p.fastWriteField113(buf[offset:], binaryWriter)
		offset += p.fastWriteField114(buf[offset:], binaryWriter)
		offset += p.fastWriteField115(buf[offset:], binaryWriter)
		offset += p.fastWriteField116(buf[offset:], binaryWriter)
		offset += p.fastWriteField117(buf[offset:], binaryWriter)
		offset += p.fastWriteField1000(buf[offset:], binaryWriter)
		offset += p.fastWriteField18(buf[offset:], binaryWriter)
		offset += p.fastWriteField42(buf[offset:], binaryWriter)
		offset += p.fastWriteField46(buf[offset:], binaryWriter)
		offset += p.fastWriteField70(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TQueryOptions) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TQueryOptions")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
		l += p.field15Length()
		l += p.field16Length()
		l += p.field17Length()
		l += p.field18Length()
		l += p.field19Length()
		l += p.field20Length()
		l += p.field21Length()
		l += p.field22Length()
		l += p.field23Length()
		l += p.field24Length()
		l += p.field25Length()
		l += p.field26Length()
		l += p.field27Length()
		l += p.field28Length()
		l += p.field29Length()
		l += p.field30Length()
		l += p.field31Length()
		l += p.field32Length()
		l += p.field33Length()
		l += p.field34Length()
		l += p.field42Length()
		l += p.field43Length()
		l += p.field44Length()
		l += p.field45Length()
		l += p.field46Length()
		l += p.field48Length()
		l += p.field49Length()
		l += p.field50Length()
		l += p.field51Length()
		l += p.field52Length()
		l += p.field53Length()
		l += p.field54Length()
		l += p.field55Length()
		l += p.field56Length()
		l += p.field57Length()
		l += p.field58Length()
		l += p.field59Length()
		l += p.field60Length()
		l += p.field61Length()
		l += p.field62Length()
		l += p.field63Length()
		l += p.field64Length()
		l += p.field65Length()
		l += p.field66Length()
		l += p.field67Length()
		l += p.field68Length()
		l += p.field69Length()
		l += p.field70Length()
		l += p.field71Length()
		l += p.field72Length()
		l += p.field73Length()
		l += p.field74Length()
		l += p.field75Length()
		l += p.field76Length()
		l += p.field77Length()
		l += p.field78Length()
		l += p.field79Length()
		l += p.field80Length()
		l += p.field81Length()
		l += p.field82Length()
		l += p.field83Length()
		l += p.field84Length()
		l += p.field85Length()
		l += p.field86Length()
		l += p.field87Length()
		l += p.field88Length()
		l += p.field89Length()
		l += p.field90Length()
		l += p.field91Length()
		l += p.field92Length()
		l += p.field93Length()
		l += p.field94Length()
		l += p.field95Length()
		l += p.field96Length()
		l += p.field97Length()
		l += p.field98Length()
		l += p.field99Length()
		l += p.field100Length()
		l += p.field101Length()
		l += p.field102Length()
		l += p.field103Length()
		l += p.field104Length()
		l += p.field105Length()
		l += p.field106Length()
		l += p.field107Length()
		l += p.field108Length()
		l += p.field109Length()
		l += p.field110Length()
		l += p.field111Length()
		l += p.field112Length()
		l += p.field113Length()
		l += p.field114Length()
		l += p.field115Length()
		l += p.field116Length()
		l += p.field117Length()
		l += p.field1000Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TQueryOptions) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetAbortOnError() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "abort_on_error", thrift.BOOL, 1)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.AbortOnError)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMaxErrors() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "max_errors", thrift.I32, 2)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.MaxErrors)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDisableCodegen() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "disable_codegen", thrift.BOOL, 3)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.DisableCodegen)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBatchSize() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "batch_size", thrift.I32, 4)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.BatchSize)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetNumNodes() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "num_nodes", thrift.I32, 5)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.NumNodes)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMaxScanRangeLength() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "max_scan_range_length", thrift.I64, 6)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.MaxScanRangeLength)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetNumScannerThreads() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "num_scanner_threads", thrift.I32, 7)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.NumScannerThreads)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMaxIoBuffers() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "max_io_buffers", thrift.I32, 8)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.MaxIoBuffers)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetAllowUnsupportedFormats() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "allow_unsupported_formats", thrift.BOOL, 9)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.AllowUnsupportedFormats)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDefaultOrderByLimit() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "default_order_by_limit", thrift.I64, 10)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.DefaultOrderByLimit)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMemLimit() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "mem_limit", thrift.I64, 12)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.MemLimit)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetAbortOnDefaultLimitExceeded() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "abort_on_default_limit_exceeded", thrift.BOOL, 13)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.AbortOnDefaultLimitExceeded)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetQueryTimeout() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "query_timeout", thrift.I32, 14)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.QueryTimeout)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField15(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsReportSuccess() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_report_success", thrift.BOOL, 15)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.IsReportSuccess)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField16(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCodegenLevel() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "codegen_level", thrift.I32, 16)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.CodegenLevel)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField17(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetKuduLatestObservedTs() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "kudu_latest_observed_ts", thrift.I64, 17)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.KuduLatestObservedTs)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField18(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetQueryType() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "query_type", thrift.I32, 18)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.QueryType))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField19(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMinReservation() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "min_reservation", thrift.I64, 19)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.MinReservation)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField20(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMaxReservation() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "max_reservation", thrift.I64, 20)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.MaxReservation)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField21(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetInitialReservationTotalClaims() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "initial_reservation_total_claims", thrift.I64, 21)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.InitialReservationTotalClaims)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField22(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBufferPoolLimit() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "buffer_pool_limit", thrift.I64, 22)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.BufferPoolLimit)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField23(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDefaultSpillableBufferSize() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "default_spillable_buffer_size", thrift.I64, 23)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.DefaultSpillableBufferSize)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField24(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMinSpillableBufferSize() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "min_spillable_buffer_size", thrift.I64, 24)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.MinSpillableBufferSize)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField25(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMaxRowSize() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "max_row_size", thrift.I64, 25)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.MaxRowSize)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField26(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDisableStreamPreaggregations() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "disable_stream_preaggregations", thrift.BOOL, 26)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.DisableStreamPreaggregations)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField27(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMtDop() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "mt_dop", thrift.I32, 27)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.MtDop)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField28(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetLoadMemLimit() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "load_mem_limit", thrift.I64, 28)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.LoadMemLimit)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField29(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMaxScanKeyNum() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "max_scan_key_num", thrift.I32, 29)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.MaxScanKeyNum)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField30(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMaxPushdownConditionsPerColumn() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "max_pushdown_conditions_per_column", thrift.I32, 30)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.MaxPushdownConditionsPerColumn)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField31(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableSpilling() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_spilling", thrift.BOOL, 31)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableSpilling)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField32(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableEnableExchangeNodeParallelMerge() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_enable_exchange_node_parallel_merge", thrift.BOOL, 32)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableEnableExchangeNodeParallelMerge)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField33(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRuntimeFilterWaitTimeMs() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "runtime_filter_wait_time_ms", thrift.I32, 33)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.RuntimeFilterWaitTimeMs)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField34(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRuntimeFilterMaxInNum() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "runtime_filter_max_in_num", thrift.I32, 34)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.RuntimeFilterMaxInNum)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField42(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetResourceLimit() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "resource_limit", thrift.STRUCT, 42)
		offset += p.ResourceLimit.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField43(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetReturnObjectDataAsBinary() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "return_object_data_as_binary", thrift.BOOL, 43)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.ReturnObjectDataAsBinary)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField44(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTrimTailingSpacesForExternalTableQuery() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "trim_tailing_spaces_for_external_table_query", thrift.BOOL, 44)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.TrimTailingSpacesForExternalTableQuery)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField45(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableFunctionPushdown() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_function_pushdown", thrift.BOOL, 45)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.EnableFunctionPushdown)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField46(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFragmentTransmissionCompressionCodec() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "fragment_transmission_compression_codec", thrift.STRING, 46)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.FragmentTransmissionCompressionCodec)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField48(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableLocalExchange() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_local_exchange", thrift.BOOL, 48)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.EnableLocalExchange)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField49(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSkipStorageEngineMerge() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "skip_storage_engine_merge", thrift.BOOL, 49)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.SkipStorageEngineMerge)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField50(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSkipDeletePredicate() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "skip_delete_predicate", thrift.BOOL, 50)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.SkipDeletePredicate)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField51(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableNewShuffleHashMethod() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_new_shuffle_hash_method", thrift.BOOL, 51)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.EnableNewShuffleHashMethod)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField52(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBeExecVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "be_exec_version", thrift.I32, 52)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.BeExecVersion)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField53(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPartitionedHashJoinRowsThreshold() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "partitioned_hash_join_rows_threshold", thrift.I32, 53)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.PartitionedHashJoinRowsThreshold)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField54(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableShareHashTableForBroadcastJoin() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_share_hash_table_for_broadcast_join", thrift.BOOL, 54)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.EnableShareHashTableForBroadcastJoin)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField55(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCheckOverflowForDecimal() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "check_overflow_for_decimal", thrift.BOOL, 55)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.CheckOverflowForDecimal)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField56(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSkipDeleteBitmap() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "skip_delete_bitmap", thrift.BOOL, 56)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.SkipDeleteBitmap)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField57(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnablePipelineEngine() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_pipeline_engine", thrift.BOOL, 57)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnablePipelineEngine)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField58(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRepeatMaxNum() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "repeat_max_num", thrift.I32, 58)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.RepeatMaxNum)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField59(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetExternalSortBytesThreshold() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "external_sort_bytes_threshold", thrift.I64, 59)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.ExternalSortBytesThreshold)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField60(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPartitionedHashAggRowsThreshold() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "partitioned_hash_agg_rows_threshold", thrift.I32, 60)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.PartitionedHashAggRowsThreshold)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField61(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableFileCache() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_file_cache", thrift.BOOL, 61)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableFileCache)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField62(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetInsertTimeout() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "insert_timeout", thrift.I32, 62)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.InsertTimeout)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField63(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetExecutionTimeout() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "execution_timeout", thrift.I32, 63)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.ExecutionTimeout)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField64(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDryRunQuery() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "dry_run_query", thrift.BOOL, 64)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.DryRunQuery)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField65(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableCommonExprPushdown() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_common_expr_pushdown", thrift.BOOL, 65)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableCommonExprPushdown)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField66(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetParallelInstance() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "parallel_instance", thrift.I32, 66)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.ParallelInstance)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField67(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMysqlRowBinaryFormat() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "mysql_row_binary_format", thrift.BOOL, 67)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.MysqlRowBinaryFormat)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField68(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetExternalAggBytesThreshold() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "external_agg_bytes_threshold", thrift.I64, 68)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.ExternalAggBytesThreshold)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField69(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetExternalAggPartitionBits() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "external_agg_partition_bits", thrift.I32, 69)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.ExternalAggPartitionBits)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField70(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFileCacheBasePath() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "file_cache_base_path", thrift.STRING, 70)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.FileCacheBasePath)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField71(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableParquetLazyMat() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_parquet_lazy_mat", thrift.BOOL, 71)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableParquetLazyMat)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField72(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableOrcLazyMat() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_orc_lazy_mat", thrift.BOOL, 72)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableOrcLazyMat)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField73(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetScanQueueMemLimit() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "scan_queue_mem_limit", thrift.I64, 73)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.ScanQueueMemLimit)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField74(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableScanNodeRunSerial() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_scan_node_run_serial", thrift.BOOL, 74)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableScanNodeRunSerial)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField75(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableInsertStrict() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_insert_strict", thrift.BOOL, 75)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableInsertStrict)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField76(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableInvertedIndexQuery() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_inverted_index_query", thrift.BOOL, 76)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableInvertedIndexQuery)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField77(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTruncateCharOrVarcharColumns() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "truncate_char_or_varchar_columns", thrift.BOOL, 77)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.TruncateCharOrVarcharColumns)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField78(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableHashJoinEarlyStartProbe() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_hash_join_early_start_probe", thrift.BOOL, 78)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableHashJoinEarlyStartProbe)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField79(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnablePipelineXEngine() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_pipeline_x_engine", thrift.BOOL, 79)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnablePipelineXEngine)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField80(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableMemtableOnSinkNode() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_memtable_on_sink_node", thrift.BOOL, 80)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableMemtableOnSinkNode)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField81(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableDeleteSubPredicateV2() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_delete_sub_predicate_v2", thrift.BOOL, 81)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableDeleteSubPredicateV2)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField82(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFeProcessUuid() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "fe_process_uuid", thrift.I64, 82)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.FeProcessUuid)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField83(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetInvertedIndexConjunctionOptThreshold() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "inverted_index_conjunction_opt_threshold", thrift.I32, 83)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.InvertedIndexConjunctionOptThreshold)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField84(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableProfile() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_profile", thrift.BOOL, 84)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableProfile)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField85(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnablePageCache() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_page_cache", thrift.BOOL, 85)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnablePageCache)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField86(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetAnalyzeTimeout() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "analyze_timeout", thrift.I32, 86)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.AnalyzeTimeout)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField87(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFasterFloatConvert() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "faster_float_convert", thrift.BOOL, 87)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.FasterFloatConvert)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField88(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableDecimal256() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_decimal256", thrift.BOOL, 88)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableDecimal256)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField89(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableLocalShuffle() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_local_shuffle", thrift.BOOL, 89)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableLocalShuffle)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField90(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSkipMissingVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "skip_missing_version", thrift.BOOL, 90)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.SkipMissingVersion)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField91(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRuntimeFilterWaitInfinitely() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "runtime_filter_wait_infinitely", thrift.BOOL, 91)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.RuntimeFilterWaitInfinitely)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField92(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetWaitFullBlockScheduleTimes() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "wait_full_block_schedule_times", thrift.I32, 92)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.WaitFullBlockScheduleTimes)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField93(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetInvertedIndexMaxExpansions() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "inverted_index_max_expansions", thrift.I32, 93)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.InvertedIndexMaxExpansions)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField94(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetInvertedIndexSkipThreshold() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "inverted_index_skip_threshold", thrift.I32, 94)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.InvertedIndexSkipThreshold)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField95(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableParallelScan() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_parallel_scan", thrift.BOOL, 95)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableParallelScan)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField96(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetParallelScanMaxScannersCount() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "parallel_scan_max_scanners_count", thrift.I32, 96)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.ParallelScanMaxScannersCount)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField97(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetParallelScanMinRowsPerScanner() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "parallel_scan_min_rows_per_scanner", thrift.I64, 97)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.ParallelScanMinRowsPerScanner)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField98(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSkipBadTablet() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "skip_bad_tablet", thrift.BOOL, 98)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.SkipBadTablet)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField99(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetScannerScaleUpRatio() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "scanner_scale_up_ratio", thrift.DOUBLE, 99)
		offset += bthrift.Binary.WriteDouble(buf[offset:], p.ScannerScaleUpRatio)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField100(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableDistinctStreamingAggregation() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_distinct_streaming_aggregation", thrift.BOOL, 100)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableDistinctStreamingAggregation)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField101(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableJoinSpill() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_join_spill", thrift.BOOL, 101)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableJoinSpill)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField102(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableSortSpill() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_sort_spill", thrift.BOOL, 102)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableSortSpill)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField103(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableAggSpill() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_agg_spill", thrift.BOOL, 103)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableAggSpill)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField104(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMinRevocableMem() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "min_revocable_mem", thrift.I64, 104)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.MinRevocableMem)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField105(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSpillStreamingAggMemLimit() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "spill_streaming_agg_mem_limit", thrift.I64, 105)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.SpillStreamingAggMemLimit)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField106(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDataQueueMaxBlocks() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "data_queue_max_blocks", thrift.I64, 106)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.DataQueueMaxBlocks)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField107(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableCommonExprPushdownForInvertedIndex() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_common_expr_pushdown_for_inverted_index", thrift.BOOL, 107)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableCommonExprPushdownForInvertedIndex)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField108(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetLocalExchangeFreeBlocksLimit() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "local_exchange_free_blocks_limit", thrift.I64, 108)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.LocalExchangeFreeBlocksLimit)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField109(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableForceSpill() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_force_spill", thrift.BOOL, 109)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableForceSpill)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField110(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableParquetFilterByMinMax() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_parquet_filter_by_min_max", thrift.BOOL, 110)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableParquetFilterByMinMax)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField111(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableOrcFilterByMinMax() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_orc_filter_by_min_max", thrift.BOOL, 111)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableOrcFilterByMinMax)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField112(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMaxColumnReaderNum() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "max_column_reader_num", thrift.I32, 112)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.MaxColumnReaderNum)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField113(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableLocalMergeSort() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_local_merge_sort", thrift.BOOL, 113)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableLocalMergeSort)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField114(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableParallelResultSink() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_parallel_result_sink", thrift.BOOL, 114)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableParallelResultSink)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField115(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableShortCircuitQueryAccessColumnStore() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_short_circuit_query_access_column_store", thrift.BOOL, 115)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableShortCircuitQueryAccessColumnStore)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField116(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnableNoNeedReadDataOpt() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_no_need_read_data_opt", thrift.BOOL, 116)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnableNoNeedReadDataOpt)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField117(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetReadCsvEmptyLineAsNull() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "read_csv_empty_line_as_null", thrift.BOOL, 117)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.ReadCsvEmptyLineAsNull)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) fastWriteField1000(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDisableFileCache() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "disable_file_cache", thrift.BOOL, 1000)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.DisableFileCache)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryOptions) field1Length() int {
	l := 0
	if p.IsSetAbortOnError() {
		l += bthrift.Binary.FieldBeginLength("abort_on_error", thrift.BOOL, 1)
		l += bthrift.Binary.BoolLength(p.AbortOnError)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field2Length() int {
	l := 0
	if p.IsSetMaxErrors() {
		l += bthrift.Binary.FieldBeginLength("max_errors", thrift.I32, 2)
		l += bthrift.Binary.I32Length(p.MaxErrors)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field3Length() int {
	l := 0
	if p.IsSetDisableCodegen() {
		l += bthrift.Binary.FieldBeginLength("disable_codegen", thrift.BOOL, 3)
		l += bthrift.Binary.BoolLength(p.DisableCodegen)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field4Length() int {
	l := 0
	if p.IsSetBatchSize() {
		l += bthrift.Binary.FieldBeginLength("batch_size", thrift.I32, 4)
		l += bthrift.Binary.I32Length(p.BatchSize)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field5Length() int {
	l := 0
	if p.IsSetNumNodes() {
		l += bthrift.Binary.FieldBeginLength("num_nodes", thrift.I32, 5)
		l += bthrift.Binary.I32Length(p.NumNodes)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field6Length() int {
	l := 0
	if p.IsSetMaxScanRangeLength() {
		l += bthrift.Binary.FieldBeginLength("max_scan_range_length", thrift.I64, 6)
		l += bthrift.Binary.I64Length(p.MaxScanRangeLength)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field7Length() int {
	l := 0
	if p.IsSetNumScannerThreads() {
		l += bthrift.Binary.FieldBeginLength("num_scanner_threads", thrift.I32, 7)
		l += bthrift.Binary.I32Length(p.NumScannerThreads)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field8Length() int {
	l := 0
	if p.IsSetMaxIoBuffers() {
		l += bthrift.Binary.FieldBeginLength("max_io_buffers", thrift.I32, 8)
		l += bthrift.Binary.I32Length(p.MaxIoBuffers)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field9Length() int {
	l := 0
	if p.IsSetAllowUnsupportedFormats() {
		l += bthrift.Binary.FieldBeginLength("allow_unsupported_formats", thrift.BOOL, 9)
		l += bthrift.Binary.BoolLength(p.AllowUnsupportedFormats)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field10Length() int {
	l := 0
	if p.IsSetDefaultOrderByLimit() {
		l += bthrift.Binary.FieldBeginLength("default_order_by_limit", thrift.I64, 10)
		l += bthrift.Binary.I64Length(p.DefaultOrderByLimit)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field12Length() int {
	l := 0
	if p.IsSetMemLimit() {
		l += bthrift.Binary.FieldBeginLength("mem_limit", thrift.I64, 12)
		l += bthrift.Binary.I64Length(p.MemLimit)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field13Length() int {
	l := 0
	if p.IsSetAbortOnDefaultLimitExceeded() {
		l += bthrift.Binary.FieldBeginLength("abort_on_default_limit_exceeded", thrift.BOOL, 13)
		l += bthrift.Binary.BoolLength(p.AbortOnDefaultLimitExceeded)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field14Length() int {
	l := 0
	if p.IsSetQueryTimeout() {
		l += bthrift.Binary.FieldBeginLength("query_timeout", thrift.I32, 14)
		l += bthrift.Binary.I32Length(p.QueryTimeout)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field15Length() int {
	l := 0
	if p.IsSetIsReportSuccess() {
		l += bthrift.Binary.FieldBeginLength("is_report_success", thrift.BOOL, 15)
		l += bthrift.Binary.BoolLength(p.IsReportSuccess)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field16Length() int {
	l := 0
	if p.IsSetCodegenLevel() {
		l += bthrift.Binary.FieldBeginLength("codegen_level", thrift.I32, 16)
		l += bthrift.Binary.I32Length(p.CodegenLevel)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field17Length() int {
	l := 0
	if p.IsSetKuduLatestObservedTs() {
		l += bthrift.Binary.FieldBeginLength("kudu_latest_observed_ts", thrift.I64, 17)
		l += bthrift.Binary.I64Length(p.KuduLatestObservedTs)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field18Length() int {
	l := 0
	if p.IsSetQueryType() {
		l += bthrift.Binary.FieldBeginLength("query_type", thrift.I32, 18)
		l += bthrift.Binary.I32Length(int32(p.QueryType))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field19Length() int {
	l := 0
	if p.IsSetMinReservation() {
		l += bthrift.Binary.FieldBeginLength("min_reservation", thrift.I64, 19)
		l += bthrift.Binary.I64Length(p.MinReservation)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field20Length() int {
	l := 0
	if p.IsSetMaxReservation() {
		l += bthrift.Binary.FieldBeginLength("max_reservation", thrift.I64, 20)
		l += bthrift.Binary.I64Length(p.MaxReservation)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field21Length() int {
	l := 0
	if p.IsSetInitialReservationTotalClaims() {
		l += bthrift.Binary.FieldBeginLength("initial_reservation_total_claims", thrift.I64, 21)
		l += bthrift.Binary.I64Length(p.InitialReservationTotalClaims)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field22Length() int {
	l := 0
	if p.IsSetBufferPoolLimit() {
		l += bthrift.Binary.FieldBeginLength("buffer_pool_limit", thrift.I64, 22)
		l += bthrift.Binary.I64Length(p.BufferPoolLimit)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field23Length() int {
	l := 0
	if p.IsSetDefaultSpillableBufferSize() {
		l += bthrift.Binary.FieldBeginLength("default_spillable_buffer_size", thrift.I64, 23)
		l += bthrift.Binary.I64Length(p.DefaultSpillableBufferSize)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field24Length() int {
	l := 0
	if p.IsSetMinSpillableBufferSize() {
		l += bthrift.Binary.FieldBeginLength("min_spillable_buffer_size", thrift.I64, 24)
		l += bthrift.Binary.I64Length(p.MinSpillableBufferSize)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field25Length() int {
	l := 0
	if p.IsSetMaxRowSize() {
		l += bthrift.Binary.FieldBeginLength("max_row_size", thrift.I64, 25)
		l += bthrift.Binary.I64Length(p.MaxRowSize)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field26Length() int {
	l := 0
	if p.IsSetDisableStreamPreaggregations() {
		l += bthrift.Binary.FieldBeginLength("disable_stream_preaggregations", thrift.BOOL, 26)
		l += bthrift.Binary.BoolLength(p.DisableStreamPreaggregations)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field27Length() int {
	l := 0
	if p.IsSetMtDop() {
		l += bthrift.Binary.FieldBeginLength("mt_dop", thrift.I32, 27)
		l += bthrift.Binary.I32Length(p.MtDop)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field28Length() int {
	l := 0
	if p.IsSetLoadMemLimit() {
		l += bthrift.Binary.FieldBeginLength("load_mem_limit", thrift.I64, 28)
		l += bthrift.Binary.I64Length(p.LoadMemLimit)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field29Length() int {
	l := 0
	if p.IsSetMaxScanKeyNum() {
		l += bthrift.Binary.FieldBeginLength("max_scan_key_num", thrift.I32, 29)
		l += bthrift.Binary.I32Length(*p.MaxScanKeyNum)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field30Length() int {
	l := 0
	if p.IsSetMaxPushdownConditionsPerColumn() {
		l += bthrift.Binary.FieldBeginLength("max_pushdown_conditions_per_column", thrift.I32, 30)
		l += bthrift.Binary.I32Length(*p.MaxPushdownConditionsPerColumn)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field31Length() int {
	l := 0
	if p.IsSetEnableSpilling() {
		l += bthrift.Binary.FieldBeginLength("enable_spilling", thrift.BOOL, 31)
		l += bthrift.Binary.BoolLength(p.EnableSpilling)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field32Length() int {
	l := 0
	if p.IsSetEnableEnableExchangeNodeParallelMerge() {
		l += bthrift.Binary.FieldBeginLength("enable_enable_exchange_node_parallel_merge", thrift.BOOL, 32)
		l += bthrift.Binary.BoolLength(p.EnableEnableExchangeNodeParallelMerge)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field33Length() int {
	l := 0
	if p.IsSetRuntimeFilterWaitTimeMs() {
		l += bthrift.Binary.FieldBeginLength("runtime_filter_wait_time_ms", thrift.I32, 33)
		l += bthrift.Binary.I32Length(p.RuntimeFilterWaitTimeMs)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field34Length() int {
	l := 0
	if p.IsSetRuntimeFilterMaxInNum() {
		l += bthrift.Binary.FieldBeginLength("runtime_filter_max_in_num", thrift.I32, 34)
		l += bthrift.Binary.I32Length(p.RuntimeFilterMaxInNum)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field42Length() int {
	l := 0
	if p.IsSetResourceLimit() {
		l += bthrift.Binary.FieldBeginLength("resource_limit", thrift.STRUCT, 42)
		l += p.ResourceLimit.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field43Length() int {
	l := 0
	if p.IsSetReturnObjectDataAsBinary() {
		l += bthrift.Binary.FieldBeginLength("return_object_data_as_binary", thrift.BOOL, 43)
		l += bthrift.Binary.BoolLength(p.ReturnObjectDataAsBinary)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field44Length() int {
	l := 0
	if p.IsSetTrimTailingSpacesForExternalTableQuery() {
		l += bthrift.Binary.FieldBeginLength("trim_tailing_spaces_for_external_table_query", thrift.BOOL, 44)
		l += bthrift.Binary.BoolLength(p.TrimTailingSpacesForExternalTableQuery)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field45Length() int {
	l := 0
	if p.IsSetEnableFunctionPushdown() {
		l += bthrift.Binary.FieldBeginLength("enable_function_pushdown", thrift.BOOL, 45)
		l += bthrift.Binary.BoolLength(*p.EnableFunctionPushdown)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field46Length() int {
	l := 0
	if p.IsSetFragmentTransmissionCompressionCodec() {
		l += bthrift.Binary.FieldBeginLength("fragment_transmission_compression_codec", thrift.STRING, 46)
		l += bthrift.Binary.StringLengthNocopy(*p.FragmentTransmissionCompressionCodec)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field48Length() int {
	l := 0
	if p.IsSetEnableLocalExchange() {
		l += bthrift.Binary.FieldBeginLength("enable_local_exchange", thrift.BOOL, 48)
		l += bthrift.Binary.BoolLength(*p.EnableLocalExchange)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field49Length() int {
	l := 0
	if p.IsSetSkipStorageEngineMerge() {
		l += bthrift.Binary.FieldBeginLength("skip_storage_engine_merge", thrift.BOOL, 49)
		l += bthrift.Binary.BoolLength(p.SkipStorageEngineMerge)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field50Length() int {
	l := 0
	if p.IsSetSkipDeletePredicate() {
		l += bthrift.Binary.FieldBeginLength("skip_delete_predicate", thrift.BOOL, 50)
		l += bthrift.Binary.BoolLength(p.SkipDeletePredicate)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field51Length() int {
	l := 0
	if p.IsSetEnableNewShuffleHashMethod() {
		l += bthrift.Binary.FieldBeginLength("enable_new_shuffle_hash_method", thrift.BOOL, 51)
		l += bthrift.Binary.BoolLength(*p.EnableNewShuffleHashMethod)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field52Length() int {
	l := 0
	if p.IsSetBeExecVersion() {
		l += bthrift.Binary.FieldBeginLength("be_exec_version", thrift.I32, 52)
		l += bthrift.Binary.I32Length(p.BeExecVersion)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field53Length() int {
	l := 0
	if p.IsSetPartitionedHashJoinRowsThreshold() {
		l += bthrift.Binary.FieldBeginLength("partitioned_hash_join_rows_threshold", thrift.I32, 53)
		l += bthrift.Binary.I32Length(p.PartitionedHashJoinRowsThreshold)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field54Length() int {
	l := 0
	if p.IsSetEnableShareHashTableForBroadcastJoin() {
		l += bthrift.Binary.FieldBeginLength("enable_share_hash_table_for_broadcast_join", thrift.BOOL, 54)
		l += bthrift.Binary.BoolLength(*p.EnableShareHashTableForBroadcastJoin)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field55Length() int {
	l := 0
	if p.IsSetCheckOverflowForDecimal() {
		l += bthrift.Binary.FieldBeginLength("check_overflow_for_decimal", thrift.BOOL, 55)
		l += bthrift.Binary.BoolLength(p.CheckOverflowForDecimal)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field56Length() int {
	l := 0
	if p.IsSetSkipDeleteBitmap() {
		l += bthrift.Binary.FieldBeginLength("skip_delete_bitmap", thrift.BOOL, 56)
		l += bthrift.Binary.BoolLength(p.SkipDeleteBitmap)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field57Length() int {
	l := 0
	if p.IsSetEnablePipelineEngine() {
		l += bthrift.Binary.FieldBeginLength("enable_pipeline_engine", thrift.BOOL, 57)
		l += bthrift.Binary.BoolLength(p.EnablePipelineEngine)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field58Length() int {
	l := 0
	if p.IsSetRepeatMaxNum() {
		l += bthrift.Binary.FieldBeginLength("repeat_max_num", thrift.I32, 58)
		l += bthrift.Binary.I32Length(p.RepeatMaxNum)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field59Length() int {
	l := 0
	if p.IsSetExternalSortBytesThreshold() {
		l += bthrift.Binary.FieldBeginLength("external_sort_bytes_threshold", thrift.I64, 59)
		l += bthrift.Binary.I64Length(p.ExternalSortBytesThreshold)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field60Length() int {
	l := 0
	if p.IsSetPartitionedHashAggRowsThreshold() {
		l += bthrift.Binary.FieldBeginLength("partitioned_hash_agg_rows_threshold", thrift.I32, 60)
		l += bthrift.Binary.I32Length(p.PartitionedHashAggRowsThreshold)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field61Length() int {
	l := 0
	if p.IsSetEnableFileCache() {
		l += bthrift.Binary.FieldBeginLength("enable_file_cache", thrift.BOOL, 61)
		l += bthrift.Binary.BoolLength(p.EnableFileCache)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field62Length() int {
	l := 0
	if p.IsSetInsertTimeout() {
		l += bthrift.Binary.FieldBeginLength("insert_timeout", thrift.I32, 62)
		l += bthrift.Binary.I32Length(p.InsertTimeout)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field63Length() int {
	l := 0
	if p.IsSetExecutionTimeout() {
		l += bthrift.Binary.FieldBeginLength("execution_timeout", thrift.I32, 63)
		l += bthrift.Binary.I32Length(p.ExecutionTimeout)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field64Length() int {
	l := 0
	if p.IsSetDryRunQuery() {
		l += bthrift.Binary.FieldBeginLength("dry_run_query", thrift.BOOL, 64)
		l += bthrift.Binary.BoolLength(p.DryRunQuery)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field65Length() int {
	l := 0
	if p.IsSetEnableCommonExprPushdown() {
		l += bthrift.Binary.FieldBeginLength("enable_common_expr_pushdown", thrift.BOOL, 65)
		l += bthrift.Binary.BoolLength(p.EnableCommonExprPushdown)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field66Length() int {
	l := 0
	if p.IsSetParallelInstance() {
		l += bthrift.Binary.FieldBeginLength("parallel_instance", thrift.I32, 66)
		l += bthrift.Binary.I32Length(p.ParallelInstance)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field67Length() int {
	l := 0
	if p.IsSetMysqlRowBinaryFormat() {
		l += bthrift.Binary.FieldBeginLength("mysql_row_binary_format", thrift.BOOL, 67)
		l += bthrift.Binary.BoolLength(p.MysqlRowBinaryFormat)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field68Length() int {
	l := 0
	if p.IsSetExternalAggBytesThreshold() {
		l += bthrift.Binary.FieldBeginLength("external_agg_bytes_threshold", thrift.I64, 68)
		l += bthrift.Binary.I64Length(p.ExternalAggBytesThreshold)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field69Length() int {
	l := 0
	if p.IsSetExternalAggPartitionBits() {
		l += bthrift.Binary.FieldBeginLength("external_agg_partition_bits", thrift.I32, 69)
		l += bthrift.Binary.I32Length(p.ExternalAggPartitionBits)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field70Length() int {
	l := 0
	if p.IsSetFileCacheBasePath() {
		l += bthrift.Binary.FieldBeginLength("file_cache_base_path", thrift.STRING, 70)
		l += bthrift.Binary.StringLengthNocopy(*p.FileCacheBasePath)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field71Length() int {
	l := 0
	if p.IsSetEnableParquetLazyMat() {
		l += bthrift.Binary.FieldBeginLength("enable_parquet_lazy_mat", thrift.BOOL, 71)
		l += bthrift.Binary.BoolLength(p.EnableParquetLazyMat)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field72Length() int {
	l := 0
	if p.IsSetEnableOrcLazyMat() {
		l += bthrift.Binary.FieldBeginLength("enable_orc_lazy_mat", thrift.BOOL, 72)
		l += bthrift.Binary.BoolLength(p.EnableOrcLazyMat)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field73Length() int {
	l := 0
	if p.IsSetScanQueueMemLimit() {
		l += bthrift.Binary.FieldBeginLength("scan_queue_mem_limit", thrift.I64, 73)
		l += bthrift.Binary.I64Length(*p.ScanQueueMemLimit)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field74Length() int {
	l := 0
	if p.IsSetEnableScanNodeRunSerial() {
		l += bthrift.Binary.FieldBeginLength("enable_scan_node_run_serial", thrift.BOOL, 74)
		l += bthrift.Binary.BoolLength(p.EnableScanNodeRunSerial)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field75Length() int {
	l := 0
	if p.IsSetEnableInsertStrict() {
		l += bthrift.Binary.FieldBeginLength("enable_insert_strict", thrift.BOOL, 75)
		l += bthrift.Binary.BoolLength(p.EnableInsertStrict)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field76Length() int {
	l := 0
	if p.IsSetEnableInvertedIndexQuery() {
		l += bthrift.Binary.FieldBeginLength("enable_inverted_index_query", thrift.BOOL, 76)
		l += bthrift.Binary.BoolLength(p.EnableInvertedIndexQuery)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field77Length() int {
	l := 0
	if p.IsSetTruncateCharOrVarcharColumns() {
		l += bthrift.Binary.FieldBeginLength("truncate_char_or_varchar_columns", thrift.BOOL, 77)
		l += bthrift.Binary.BoolLength(p.TruncateCharOrVarcharColumns)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field78Length() int {
	l := 0
	if p.IsSetEnableHashJoinEarlyStartProbe() {
		l += bthrift.Binary.FieldBeginLength("enable_hash_join_early_start_probe", thrift.BOOL, 78)
		l += bthrift.Binary.BoolLength(p.EnableHashJoinEarlyStartProbe)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field79Length() int {
	l := 0
	if p.IsSetEnablePipelineXEngine() {
		l += bthrift.Binary.FieldBeginLength("enable_pipeline_x_engine", thrift.BOOL, 79)
		l += bthrift.Binary.BoolLength(p.EnablePipelineXEngine)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field80Length() int {
	l := 0
	if p.IsSetEnableMemtableOnSinkNode() {
		l += bthrift.Binary.FieldBeginLength("enable_memtable_on_sink_node", thrift.BOOL, 80)
		l += bthrift.Binary.BoolLength(p.EnableMemtableOnSinkNode)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field81Length() int {
	l := 0
	if p.IsSetEnableDeleteSubPredicateV2() {
		l += bthrift.Binary.FieldBeginLength("enable_delete_sub_predicate_v2", thrift.BOOL, 81)
		l += bthrift.Binary.BoolLength(p.EnableDeleteSubPredicateV2)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field82Length() int {
	l := 0
	if p.IsSetFeProcessUuid() {
		l += bthrift.Binary.FieldBeginLength("fe_process_uuid", thrift.I64, 82)
		l += bthrift.Binary.I64Length(p.FeProcessUuid)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field83Length() int {
	l := 0
	if p.IsSetInvertedIndexConjunctionOptThreshold() {
		l += bthrift.Binary.FieldBeginLength("inverted_index_conjunction_opt_threshold", thrift.I32, 83)
		l += bthrift.Binary.I32Length(p.InvertedIndexConjunctionOptThreshold)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field84Length() int {
	l := 0
	if p.IsSetEnableProfile() {
		l += bthrift.Binary.FieldBeginLength("enable_profile", thrift.BOOL, 84)
		l += bthrift.Binary.BoolLength(p.EnableProfile)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field85Length() int {
	l := 0
	if p.IsSetEnablePageCache() {
		l += bthrift.Binary.FieldBeginLength("enable_page_cache", thrift.BOOL, 85)
		l += bthrift.Binary.BoolLength(p.EnablePageCache)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field86Length() int {
	l := 0
	if p.IsSetAnalyzeTimeout() {
		l += bthrift.Binary.FieldBeginLength("analyze_timeout", thrift.I32, 86)
		l += bthrift.Binary.I32Length(p.AnalyzeTimeout)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field87Length() int {
	l := 0
	if p.IsSetFasterFloatConvert() {
		l += bthrift.Binary.FieldBeginLength("faster_float_convert", thrift.BOOL, 87)
		l += bthrift.Binary.BoolLength(p.FasterFloatConvert)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field88Length() int {
	l := 0
	if p.IsSetEnableDecimal256() {
		l += bthrift.Binary.FieldBeginLength("enable_decimal256", thrift.BOOL, 88)
		l += bthrift.Binary.BoolLength(p.EnableDecimal256)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field89Length() int {
	l := 0
	if p.IsSetEnableLocalShuffle() {
		l += bthrift.Binary.FieldBeginLength("enable_local_shuffle", thrift.BOOL, 89)
		l += bthrift.Binary.BoolLength(p.EnableLocalShuffle)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field90Length() int {
	l := 0
	if p.IsSetSkipMissingVersion() {
		l += bthrift.Binary.FieldBeginLength("skip_missing_version", thrift.BOOL, 90)
		l += bthrift.Binary.BoolLength(p.SkipMissingVersion)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field91Length() int {
	l := 0
	if p.IsSetRuntimeFilterWaitInfinitely() {
		l += bthrift.Binary.FieldBeginLength("runtime_filter_wait_infinitely", thrift.BOOL, 91)
		l += bthrift.Binary.BoolLength(p.RuntimeFilterWaitInfinitely)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field92Length() int {
	l := 0
	if p.IsSetWaitFullBlockScheduleTimes() {
		l += bthrift.Binary.FieldBeginLength("wait_full_block_schedule_times", thrift.I32, 92)
		l += bthrift.Binary.I32Length(p.WaitFullBlockScheduleTimes)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field93Length() int {
	l := 0
	if p.IsSetInvertedIndexMaxExpansions() {
		l += bthrift.Binary.FieldBeginLength("inverted_index_max_expansions", thrift.I32, 93)
		l += bthrift.Binary.I32Length(p.InvertedIndexMaxExpansions)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field94Length() int {
	l := 0
	if p.IsSetInvertedIndexSkipThreshold() {
		l += bthrift.Binary.FieldBeginLength("inverted_index_skip_threshold", thrift.I32, 94)
		l += bthrift.Binary.I32Length(p.InvertedIndexSkipThreshold)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field95Length() int {
	l := 0
	if p.IsSetEnableParallelScan() {
		l += bthrift.Binary.FieldBeginLength("enable_parallel_scan", thrift.BOOL, 95)
		l += bthrift.Binary.BoolLength(p.EnableParallelScan)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field96Length() int {
	l := 0
	if p.IsSetParallelScanMaxScannersCount() {
		l += bthrift.Binary.FieldBeginLength("parallel_scan_max_scanners_count", thrift.I32, 96)
		l += bthrift.Binary.I32Length(p.ParallelScanMaxScannersCount)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field97Length() int {
	l := 0
	if p.IsSetParallelScanMinRowsPerScanner() {
		l += bthrift.Binary.FieldBeginLength("parallel_scan_min_rows_per_scanner", thrift.I64, 97)
		l += bthrift.Binary.I64Length(p.ParallelScanMinRowsPerScanner)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field98Length() int {
	l := 0
	if p.IsSetSkipBadTablet() {
		l += bthrift.Binary.FieldBeginLength("skip_bad_tablet", thrift.BOOL, 98)
		l += bthrift.Binary.BoolLength(p.SkipBadTablet)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field99Length() int {
	l := 0
	if p.IsSetScannerScaleUpRatio() {
		l += bthrift.Binary.FieldBeginLength("scanner_scale_up_ratio", thrift.DOUBLE, 99)
		l += bthrift.Binary.DoubleLength(p.ScannerScaleUpRatio)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field100Length() int {
	l := 0
	if p.IsSetEnableDistinctStreamingAggregation() {
		l += bthrift.Binary.FieldBeginLength("enable_distinct_streaming_aggregation", thrift.BOOL, 100)
		l += bthrift.Binary.BoolLength(p.EnableDistinctStreamingAggregation)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field101Length() int {
	l := 0
	if p.IsSetEnableJoinSpill() {
		l += bthrift.Binary.FieldBeginLength("enable_join_spill", thrift.BOOL, 101)
		l += bthrift.Binary.BoolLength(p.EnableJoinSpill)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field102Length() int {
	l := 0
	if p.IsSetEnableSortSpill() {
		l += bthrift.Binary.FieldBeginLength("enable_sort_spill", thrift.BOOL, 102)
		l += bthrift.Binary.BoolLength(p.EnableSortSpill)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field103Length() int {
	l := 0
	if p.IsSetEnableAggSpill() {
		l += bthrift.Binary.FieldBeginLength("enable_agg_spill", thrift.BOOL, 103)
		l += bthrift.Binary.BoolLength(p.EnableAggSpill)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field104Length() int {
	l := 0
	if p.IsSetMinRevocableMem() {
		l += bthrift.Binary.FieldBeginLength("min_revocable_mem", thrift.I64, 104)
		l += bthrift.Binary.I64Length(p.MinRevocableMem)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field105Length() int {
	l := 0
	if p.IsSetSpillStreamingAggMemLimit() {
		l += bthrift.Binary.FieldBeginLength("spill_streaming_agg_mem_limit", thrift.I64, 105)
		l += bthrift.Binary.I64Length(p.SpillStreamingAggMemLimit)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field106Length() int {
	l := 0
	if p.IsSetDataQueueMaxBlocks() {
		l += bthrift.Binary.FieldBeginLength("data_queue_max_blocks", thrift.I64, 106)
		l += bthrift.Binary.I64Length(p.DataQueueMaxBlocks)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field107Length() int {
	l := 0
	if p.IsSetEnableCommonExprPushdownForInvertedIndex() {
		l += bthrift.Binary.FieldBeginLength("enable_common_expr_pushdown_for_inverted_index", thrift.BOOL, 107)
		l += bthrift.Binary.BoolLength(p.EnableCommonExprPushdownForInvertedIndex)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field108Length() int {
	l := 0
	if p.IsSetLocalExchangeFreeBlocksLimit() {
		l += bthrift.Binary.FieldBeginLength("local_exchange_free_blocks_limit", thrift.I64, 108)
		l += bthrift.Binary.I64Length(*p.LocalExchangeFreeBlocksLimit)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field109Length() int {
	l := 0
	if p.IsSetEnableForceSpill() {
		l += bthrift.Binary.FieldBeginLength("enable_force_spill", thrift.BOOL, 109)
		l += bthrift.Binary.BoolLength(p.EnableForceSpill)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field110Length() int {
	l := 0
	if p.IsSetEnableParquetFilterByMinMax() {
		l += bthrift.Binary.FieldBeginLength("enable_parquet_filter_by_min_max", thrift.BOOL, 110)
		l += bthrift.Binary.BoolLength(p.EnableParquetFilterByMinMax)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field111Length() int {
	l := 0
	if p.IsSetEnableOrcFilterByMinMax() {
		l += bthrift.Binary.FieldBeginLength("enable_orc_filter_by_min_max", thrift.BOOL, 111)
		l += bthrift.Binary.BoolLength(p.EnableOrcFilterByMinMax)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field112Length() int {
	l := 0
	if p.IsSetMaxColumnReaderNum() {
		l += bthrift.Binary.FieldBeginLength("max_column_reader_num", thrift.I32, 112)
		l += bthrift.Binary.I32Length(p.MaxColumnReaderNum)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field113Length() int {
	l := 0
	if p.IsSetEnableLocalMergeSort() {
		l += bthrift.Binary.FieldBeginLength("enable_local_merge_sort", thrift.BOOL, 113)
		l += bthrift.Binary.BoolLength(p.EnableLocalMergeSort)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field114Length() int {
	l := 0
	if p.IsSetEnableParallelResultSink() {
		l += bthrift.Binary.FieldBeginLength("enable_parallel_result_sink", thrift.BOOL, 114)
		l += bthrift.Binary.BoolLength(p.EnableParallelResultSink)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field115Length() int {
	l := 0
	if p.IsSetEnableShortCircuitQueryAccessColumnStore() {
		l += bthrift.Binary.FieldBeginLength("enable_short_circuit_query_access_column_store", thrift.BOOL, 115)
		l += bthrift.Binary.BoolLength(p.EnableShortCircuitQueryAccessColumnStore)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field116Length() int {
	l := 0
	if p.IsSetEnableNoNeedReadDataOpt() {
		l += bthrift.Binary.FieldBeginLength("enable_no_need_read_data_opt", thrift.BOOL, 116)
		l += bthrift.Binary.BoolLength(p.EnableNoNeedReadDataOpt)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field117Length() int {
	l := 0
	if p.IsSetReadCsvEmptyLineAsNull() {
		l += bthrift.Binary.FieldBeginLength("read_csv_empty_line_as_null", thrift.BOOL, 117)
		l += bthrift.Binary.BoolLength(p.ReadCsvEmptyLineAsNull)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryOptions) field1000Length() int {
	l := 0
	if p.IsSetDisableFileCache() {
		l += bthrift.Binary.FieldBeginLength("disable_file_cache", thrift.BOOL, 1000)
		l += bthrift.Binary.BoolLength(p.DisableFileCache)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TScanRangeParams) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetScanRange bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetScanRange = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetScanRange {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TScanRangeParams[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TScanRangeParams[fieldId]))
}

func (p *TScanRangeParams) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := plannodes.NewTScanRange()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ScanRange = tmp
	return offset, nil
}

func (p *TScanRangeParams) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.VolumeId = v

	}
	return offset, nil
}

// for compatibility
func (p *TScanRangeParams) FastWrite(buf []byte) int {
	return 0
}

func (p *TScanRangeParams) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TScanRangeParams")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TScanRangeParams) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TScanRangeParams")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TScanRangeParams) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "scan_range", thrift.STRUCT, 1)
	offset += p.ScanRange.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TScanRangeParams) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetVolumeId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "volume_id", thrift.I32, 2)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.VolumeId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TScanRangeParams) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("scan_range", thrift.STRUCT, 1)
	l += p.ScanRange.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TScanRangeParams) field2Length() int {
	l := 0
	if p.IsSetVolumeId() {
		l += bthrift.Binary.FieldBeginLength("volume_id", thrift.I32, 2)
		l += bthrift.Binary.I32Length(p.VolumeId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TRuntimeFilterTargetParams) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTargetFragmentInstanceId bool = false
	var issetTargetFragmentInstanceAddr bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTargetFragmentInstanceId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTargetFragmentInstanceAddr = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTargetFragmentInstanceId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTargetFragmentInstanceAddr {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRuntimeFilterTargetParams[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TRuntimeFilterTargetParams[fieldId]))
}

func (p *TRuntimeFilterTargetParams) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTUniqueId()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.TargetFragmentInstanceId = tmp
	return offset, nil
}

func (p *TRuntimeFilterTargetParams) FastReadField2(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTNetworkAddress()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.TargetFragmentInstanceAddr = tmp
	return offset, nil
}

// for compatibility
func (p *TRuntimeFilterTargetParams) FastWrite(buf []byte) int {
	return 0
}

func (p *TRuntimeFilterTargetParams) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TRuntimeFilterTargetParams")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TRuntimeFilterTargetParams) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TRuntimeFilterTargetParams")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TRuntimeFilterTargetParams) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "target_fragment_instance_id", thrift.STRUCT, 1)
	offset += p.TargetFragmentInstanceId.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TRuntimeFilterTargetParams) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "target_fragment_instance_addr", thrift.STRUCT, 2)
	offset += p.TargetFragmentInstanceAddr.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TRuntimeFilterTargetParams) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("target_fragment_instance_id", thrift.STRUCT, 1)
	l += p.TargetFragmentInstanceId.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TRuntimeFilterTargetParams) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("target_fragment_instance_addr", thrift.STRUCT, 2)
	l += p.TargetFragmentInstanceAddr.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TRuntimeFilterTargetParamsV2) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTargetFragmentInstanceIds bool = false
	var issetTargetFragmentInstanceAddr bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTargetFragmentInstanceIds = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTargetFragmentInstanceAddr = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetTargetFragmentInstanceIds {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTargetFragmentInstanceAddr {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRuntimeFilterTargetParamsV2[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TRuntimeFilterTargetParamsV2[fieldId]))
}

func (p *TRuntimeFilterTargetParamsV2) FastReadField1(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.TargetFragmentInstanceIds = make([]*types.TUniqueId, 0, size)
	for i := 0; i < size; i++ {
		_elem := types.NewTUniqueId()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.TargetFragmentInstanceIds = append(p.TargetFragmentInstanceIds, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TRuntimeFilterTargetParamsV2) FastReadField2(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTNetworkAddress()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.TargetFragmentInstanceAddr = tmp
	return offset, nil
}

// for compatibility
func (p *TRuntimeFilterTargetParamsV2) FastWrite(buf []byte) int {
	return 0
}

func (p *TRuntimeFilterTargetParamsV2) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TRuntimeFilterTargetParamsV2")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TRuntimeFilterTargetParamsV2) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TRuntimeFilterTargetParamsV2")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TRuntimeFilterTargetParamsV2) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "target_fragment_instance_ids", thrift.LIST, 1)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.TargetFragmentInstanceIds {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TRuntimeFilterTargetParamsV2) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "target_fragment_instance_addr", thrift.STRUCT, 2)
	offset += p.TargetFragmentInstanceAddr.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TRuntimeFilterTargetParamsV2) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("target_fragment_instance_ids", thrift.LIST, 1)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.TargetFragmentInstanceIds))
	for _, v := range p.TargetFragmentInstanceIds {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TRuntimeFilterTargetParamsV2) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("target_fragment_instance_addr", thrift.STRUCT, 2)
	l += p.TargetFragmentInstanceAddr.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TRuntimeFilterParams) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRuntimeFilterParams[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TRuntimeFilterParams) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTNetworkAddress()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.RuntimeFilterMergeAddr = tmp
	return offset, nil
}

func (p *TRuntimeFilterParams) FastReadField2(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.RidToTargetParam = make(map[int32][]*TRuntimeFilterTargetParams, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
		offset += l
		if err != nil {
			return offset, err
		}
		_val := make([]*TRuntimeFilterTargetParams, 0, size)
		for i := 0; i < size; i++ {
			_elem := NewTRuntimeFilterTargetParams()
			if l, err := _elem.FastRead(buf[offset:]); err != nil {
				return offset, err
			} else {
				offset += l
			}

			_val = append(_val, _elem)
		}
		if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.RidToTargetParam[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TRuntimeFilterParams) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.RidToRuntimeFilter = make(map[int32]*plannodes.TRuntimeFilterDesc, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}
		_val := plannodes.NewTRuntimeFilterDesc()
		if l, err := _val.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.RidToRuntimeFilter[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TRuntimeFilterParams) FastReadField4(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.RuntimeFilterBuilderNum = make(map[int32]int32, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.RuntimeFilterBuilderNum[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TRuntimeFilterParams) FastReadField5(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.RidToTargetParamv2 = make(map[int32][]*TRuntimeFilterTargetParamsV2, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
		offset += l
		if err != nil {
			return offset, err
		}
		_val := make([]*TRuntimeFilterTargetParamsV2, 0, size)
		for i := 0; i < size; i++ {
			_elem := NewTRuntimeFilterTargetParamsV2()
			if l, err := _elem.FastRead(buf[offset:]); err != nil {
				return offset, err
			} else {
				offset += l
			}

			_val = append(_val, _elem)
		}
		if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.RidToTargetParamv2[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TRuntimeFilterParams) FastWrite(buf []byte) int {
	return 0
}

func (p *TRuntimeFilterParams) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TRuntimeFilterParams")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TRuntimeFilterParams) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TRuntimeFilterParams")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TRuntimeFilterParams) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRuntimeFilterMergeAddr() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "runtime_filter_merge_addr", thrift.STRUCT, 1)
		offset += p.RuntimeFilterMergeAddr.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TRuntimeFilterParams) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRidToTargetParam() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "rid_to_target_param", thrift.MAP, 2)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.LIST, 0)
		var length int
		for k, v := range p.RidToTargetParam {
			length++

			offset += bthrift.Binary.WriteI32(buf[offset:], k)

			listBeginOffset := offset
			offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
			var length int
			for _, v := range v {
				length++
				offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
			}
			bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
			offset += bthrift.Binary.WriteListEnd(buf[offset:])
		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.LIST, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TRuntimeFilterParams) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRidToRuntimeFilter() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "rid_to_runtime_filter", thrift.MAP, 3)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.STRUCT, 0)
		var length int
		for k, v := range p.RidToRuntimeFilter {
			length++

			offset += bthrift.Binary.WriteI32(buf[offset:], k)

			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.STRUCT, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TRuntimeFilterParams) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRuntimeFilterBuilderNum() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "runtime_filter_builder_num", thrift.MAP, 4)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I32, 0)
		var length int
		for k, v := range p.RuntimeFilterBuilderNum {
			length++

			offset += bthrift.Binary.WriteI32(buf[offset:], k)

			offset += bthrift.Binary.WriteI32(buf[offset:], v)

		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.I32, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TRuntimeFilterParams) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRidToTargetParamv2() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "rid_to_target_paramv2", thrift.MAP, 5)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.LIST, 0)
		var length int
		for k, v := range p.RidToTargetParamv2 {
			length++

			offset += bthrift.Binary.WriteI32(buf[offset:], k)

			listBeginOffset := offset
			offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
			var length int
			for _, v := range v {
				length++
				offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
			}
			bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
			offset += bthrift.Binary.WriteListEnd(buf[offset:])
		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.LIST, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TRuntimeFilterParams) field1Length() int {
	l := 0
	if p.IsSetRuntimeFilterMergeAddr() {
		l += bthrift.Binary.FieldBeginLength("runtime_filter_merge_addr", thrift.STRUCT, 1)
		l += p.RuntimeFilterMergeAddr.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TRuntimeFilterParams) field2Length() int {
	l := 0
	if p.IsSetRidToTargetParam() {
		l += bthrift.Binary.FieldBeginLength("rid_to_target_param", thrift.MAP, 2)
		l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.LIST, len(p.RidToTargetParam))
		for k, v := range p.RidToTargetParam {

			l += bthrift.Binary.I32Length(k)

			l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(v))
			for _, v := range v {
				l += v.BLength()
			}
			l += bthrift.Binary.ListEndLength()
		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TRuntimeFilterParams) field3Length() int {
	l := 0
	if p.IsSetRidToRuntimeFilter() {
		l += bthrift.Binary.FieldBeginLength("rid_to_runtime_filter", thrift.MAP, 3)
		l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.STRUCT, len(p.RidToRuntimeFilter))
		for k, v := range p.RidToRuntimeFilter {

			l += bthrift.Binary.I32Length(k)

			l += v.BLength()
		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TRuntimeFilterParams) field4Length() int {
	l := 0
	if p.IsSetRuntimeFilterBuilderNum() {
		l += bthrift.Binary.FieldBeginLength("runtime_filter_builder_num", thrift.MAP, 4)
		l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I32, len(p.RuntimeFilterBuilderNum))
		var tmpK int32
		var tmpV int32
		l += (bthrift.Binary.I32Length(int32(tmpK)) + bthrift.Binary.I32Length(int32(tmpV))) * len(p.RuntimeFilterBuilderNum)
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TRuntimeFilterParams) field5Length() int {
	l := 0
	if p.IsSetRidToTargetParamv2() {
		l += bthrift.Binary.FieldBeginLength("rid_to_target_paramv2", thrift.MAP, 5)
		l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.LIST, len(p.RidToTargetParamv2))
		for k, v := range p.RidToTargetParamv2 {

			l += bthrift.Binary.I32Length(k)

			l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(v))
			for _, v := range v {
				l += v.BLength()
			}
			l += bthrift.Binary.ListEndLength()
		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPlanFragmentExecParams) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetQueryId bool = false
	var issetFragmentInstanceId bool = false
	var issetPerNodeScanRanges bool = false
	var issetPerExchNumSenders bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetQueryId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetFragmentInstanceId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPerNodeScanRanges = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPerExchNumSenders = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetQueryId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetFragmentInstanceId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPerNodeScanRanges {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPerExchNumSenders {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPlanFragmentExecParams[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPlanFragmentExecParams[fieldId]))
}

func (p *TPlanFragmentExecParams) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTUniqueId()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.QueryId = tmp
	return offset, nil
}

func (p *TPlanFragmentExecParams) FastReadField2(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTUniqueId()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.FragmentInstanceId = tmp
	return offset, nil
}

func (p *TPlanFragmentExecParams) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.PerNodeScanRanges = make(map[types.TPlanNodeId][]*TScanRangeParams, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
		offset += l
		if err != nil {
			return offset, err
		}
		_val := make([]*TScanRangeParams, 0, size)
		for i := 0; i < size; i++ {
			_elem := NewTScanRangeParams()
			if l, err := _elem.FastRead(buf[offset:]); err != nil {
				return offset, err
			} else {
				offset += l
			}

			_val = append(_val, _elem)
		}
		if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.PerNodeScanRanges[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPlanFragmentExecParams) FastReadField4(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.PerExchNumSenders = make(map[types.TPlanNodeId]int32, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.PerExchNumSenders[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPlanFragmentExecParams) FastReadField5(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Destinations = make([]*datasinks.TPlanFragmentDestination, 0, size)
	for i := 0; i < size; i++ {
		_elem := datasinks.NewTPlanFragmentDestination()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Destinations = append(p.Destinations, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPlanFragmentExecParams) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.SenderId = &v

	}
	return offset, nil
}

func (p *TPlanFragmentExecParams) FastReadField10(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.NumSenders = &v

	}
	return offset, nil
}

func (p *TPlanFragmentExecParams) FastReadField11(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.SendQueryStatisticsWithEveryBatch = &v

	}
	return offset, nil
}

func (p *TPlanFragmentExecParams) FastReadField12(buf []byte) (int, error) {
	offset := 0

	tmp := NewTRuntimeFilterParams()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.RuntimeFilterParams = tmp
	return offset, nil
}

func (p *TPlanFragmentExecParams) FastReadField13(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.GroupCommit = &v

	}
	return offset, nil
}

func (p *TPlanFragmentExecParams) FastReadField14(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.TopnFilterSourceNodeIds = make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.TopnFilterSourceNodeIds = append(p.TopnFilterSourceNodeIds, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TPlanFragmentExecParams) FastWrite(buf []byte) int {
	return 0
}

func (p *TPlanFragmentExecParams) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TPlanFragmentExecParams")
	if p != nil {
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TPlanFragmentExecParams) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TPlanFragmentExecParams")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TPlanFragmentExecParams) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "query_id", thrift.STRUCT, 1)
	offset += p.QueryId.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPlanFragmentExecParams) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "fragment_instance_id", thrift.STRUCT, 2)
	offset += p.FragmentInstanceId.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPlanFragmentExecParams) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "per_node_scan_ranges", thrift.MAP, 3)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.LIST, 0)
	var length int
	for k, v := range p.PerNodeScanRanges {
		length++

		offset += bthrift.Binary.WriteI32(buf[offset:], k)

		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range v {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.LIST, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPlanFragmentExecParams) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "per_exch_num_senders", thrift.MAP, 4)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I32, 0)
	var length int
	for k, v := range p.PerExchNumSenders {
		length++

		offset += bthrift.Binary.WriteI32(buf[offset:], k)

		offset += bthrift.Binary.WriteI32(buf[offset:], v)

	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.I32, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPlanFragmentExecParams) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "destinations", thrift.LIST, 5)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.Destinations {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPlanFragmentExecParams) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSenderId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "sender_id", thrift.I32, 9)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.SenderId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPlanFragmentExecParams) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetNumSenders() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "num_senders", thrift.I32, 10)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.NumSenders)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPlanFragmentExecParams) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSendQueryStatisticsWithEveryBatch() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "send_query_statistics_with_every_batch", thrift.BOOL, 11)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.SendQueryStatisticsWithEveryBatch)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPlanFragmentExecParams) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRuntimeFilterParams() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "runtime_filter_params", thrift.STRUCT, 12)
		offset += p.RuntimeFilterParams.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPlanFragmentExecParams) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetGroupCommit() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "group_commit", thrift.BOOL, 13)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.GroupCommit)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPlanFragmentExecParams) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTopnFilterSourceNodeIds() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "topn_filter_source_node_ids", thrift.LIST, 14)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.I32, 0)
		var length int
		for _, v := range p.TopnFilterSourceNodeIds {
			length++
			offset += bthrift.Binary.WriteI32(buf[offset:], v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I32, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPlanFragmentExecParams) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("query_id", thrift.STRUCT, 1)
	l += p.QueryId.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPlanFragmentExecParams) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("fragment_instance_id", thrift.STRUCT, 2)
	l += p.FragmentInstanceId.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPlanFragmentExecParams) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("per_node_scan_ranges", thrift.MAP, 3)
	l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.LIST, len(p.PerNodeScanRanges))
	for k, v := range p.PerNodeScanRanges {

		l += bthrift.Binary.I32Length(k)

		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(v))
		for _, v := range v {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPlanFragmentExecParams) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("per_exch_num_senders", thrift.MAP, 4)
	l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I32, len(p.PerExchNumSenders))
	var tmpK types.TPlanNodeId
	var tmpV int32
	l += (bthrift.Binary.I32Length(int32(tmpK)) + bthrift.Binary.I32Length(int32(tmpV))) * len(p.PerExchNumSenders)
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPlanFragmentExecParams) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("destinations", thrift.LIST, 5)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.Destinations))
	for _, v := range p.Destinations {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPlanFragmentExecParams) field9Length() int {
	l := 0
	if p.IsSetSenderId() {
		l += bthrift.Binary.FieldBeginLength("sender_id", thrift.I32, 9)
		l += bthrift.Binary.I32Length(*p.SenderId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPlanFragmentExecParams) field10Length() int {
	l := 0
	if p.IsSetNumSenders() {
		l += bthrift.Binary.FieldBeginLength("num_senders", thrift.I32, 10)
		l += bthrift.Binary.I32Length(*p.NumSenders)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPlanFragmentExecParams) field11Length() int {
	l := 0
	if p.IsSetSendQueryStatisticsWithEveryBatch() {
		l += bthrift.Binary.FieldBeginLength("send_query_statistics_with_every_batch", thrift.BOOL, 11)
		l += bthrift.Binary.BoolLength(*p.SendQueryStatisticsWithEveryBatch)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPlanFragmentExecParams) field12Length() int {
	l := 0
	if p.IsSetRuntimeFilterParams() {
		l += bthrift.Binary.FieldBeginLength("runtime_filter_params", thrift.STRUCT, 12)
		l += p.RuntimeFilterParams.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPlanFragmentExecParams) field13Length() int {
	l := 0
	if p.IsSetGroupCommit() {
		l += bthrift.Binary.FieldBeginLength("group_commit", thrift.BOOL, 13)
		l += bthrift.Binary.BoolLength(*p.GroupCommit)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPlanFragmentExecParams) field14Length() int {
	l := 0
	if p.IsSetTopnFilterSourceNodeIds() {
		l += bthrift.Binary.FieldBeginLength("topn_filter_source_node_ids", thrift.LIST, 14)
		l += bthrift.Binary.ListBeginLength(thrift.I32, len(p.TopnFilterSourceNodeIds))
		var tmpV int32
		l += bthrift.Binary.I32Length(int32(tmpV)) * len(p.TopnFilterSourceNodeIds)
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryGlobals) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNowString bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetNowString = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetNowString {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TQueryGlobals[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TQueryGlobals[fieldId]))
}

func (p *TQueryGlobals) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.NowString = v

	}
	return offset, nil
}

func (p *TQueryGlobals) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TimestampMs = &v

	}
	return offset, nil
}

func (p *TQueryGlobals) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TimeZone = &v

	}
	return offset, nil
}

func (p *TQueryGlobals) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.LoadZeroTolerance = v

	}
	return offset, nil
}

func (p *TQueryGlobals) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.NanoSeconds = &v

	}
	return offset, nil
}

// for compatibility
func (p *TQueryGlobals) FastWrite(buf []byte) int {
	return 0
}

func (p *TQueryGlobals) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TQueryGlobals")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TQueryGlobals) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TQueryGlobals")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TQueryGlobals) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "now_string", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.NowString)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TQueryGlobals) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTimestampMs() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "timestamp_ms", thrift.I64, 2)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TimestampMs)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryGlobals) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTimeZone() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "time_zone", thrift.STRING, 3)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.TimeZone)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryGlobals) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetLoadZeroTolerance() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "load_zero_tolerance", thrift.BOOL, 4)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.LoadZeroTolerance)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryGlobals) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetNanoSeconds() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "nano_seconds", thrift.I32, 5)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.NanoSeconds)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TQueryGlobals) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("now_string", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.NowString)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TQueryGlobals) field2Length() int {
	l := 0
	if p.IsSetTimestampMs() {
		l += bthrift.Binary.FieldBeginLength("timestamp_ms", thrift.I64, 2)
		l += bthrift.Binary.I64Length(*p.TimestampMs)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryGlobals) field3Length() int {
	l := 0
	if p.IsSetTimeZone() {
		l += bthrift.Binary.FieldBeginLength("time_zone", thrift.STRING, 3)
		l += bthrift.Binary.StringLengthNocopy(*p.TimeZone)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryGlobals) field4Length() int {
	l := 0
	if p.IsSetLoadZeroTolerance() {
		l += bthrift.Binary.FieldBeginLength("load_zero_tolerance", thrift.BOOL, 4)
		l += bthrift.Binary.BoolLength(p.LoadZeroTolerance)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TQueryGlobals) field5Length() int {
	l := 0
	if p.IsSetNanoSeconds() {
		l += bthrift.Binary.FieldBeginLength("nano_seconds", thrift.I32, 5)
		l += bthrift.Binary.I32Length(*p.NanoSeconds)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTxnParams) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.DOUBLE {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTxnParams[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTxnParams) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.NeedTxn = &v

	}
	return offset, nil
}

func (p *TTxnParams) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Token = &v

	}
	return offset, nil
}

func (p *TTxnParams) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ThriftRpcTimeoutMs = &v

	}
	return offset, nil
}

func (p *TTxnParams) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Db = &v

	}
	return offset, nil
}

func (p *TTxnParams) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Tbl = &v

	}
	return offset, nil
}

func (p *TTxnParams) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.UserIp = &v

	}
	return offset, nil
}

func (p *TTxnParams) FastReadField7(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TxnId = &v

	}
	return offset, nil
}

func (p *TTxnParams) FastReadField8(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTUniqueId()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.FragmentInstanceId = tmp
	return offset, nil
}

func (p *TTxnParams) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.DbId = &v

	}
	return offset, nil
}

func (p *TTxnParams) FastReadField10(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadDouble(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.MaxFilterRatio = &v

	}
	return offset, nil
}

func (p *TTxnParams) FastReadField11(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.EnablePipelineTxnLoad = v

	}
	return offset, nil
}

// for compatibility
func (p *TTxnParams) FastWrite(buf []byte) int {
	return 0
}

func (p *TTxnParams) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTxnParams")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTxnParams) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTxnParams")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTxnParams) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetNeedTxn() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "need_txn", thrift.BOOL, 1)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.NeedTxn)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTxnParams) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetToken() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "token", thrift.STRING, 2)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Token)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTxnParams) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetThriftRpcTimeoutMs() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "thrift_rpc_timeout_ms", thrift.I64, 3)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.ThriftRpcTimeoutMs)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTxnParams) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDb() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "db", thrift.STRING, 4)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Db)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTxnParams) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTbl() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tbl", thrift.STRING, 5)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Tbl)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTxnParams) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetUserIp() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "user_ip", thrift.STRING, 6)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.UserIp)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTxnParams) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTxnId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "txn_id", thrift.I64, 7)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.TxnId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTxnParams) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFragmentInstanceId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "fragment_instance_id", thrift.STRUCT, 8)
		offset += p.FragmentInstanceId.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTxnParams) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDbId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "db_id", thrift.I64, 9)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.DbId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTxnParams) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMaxFilterRatio() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "max_filter_ratio", thrift.DOUBLE, 10)
		offset += bthrift.Binary.WriteDouble(buf[offset:], *p.MaxFilterRatio)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTxnParams) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnablePipelineTxnLoad() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enable_pipeline_txn_load", thrift.BOOL, 11)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.EnablePipelineTxnLoad)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTxnParams) field1Length() int {
	l := 0
	if p.IsSetNeedTxn() {
		l += bthrift.Binary.FieldBeginLength("need_txn", thrift.BOOL, 1)
		l += bthrift.Binary.BoolLength(*p.NeedTxn)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTxnParams) field2Length() int {
	l := 0
	if p.IsSetToken() {
		l += bthrift.Binary.FieldBeginLength("token", thrift.STRING, 2)
		l += bthrift.Binary.StringLengthNocopy(*p.Token)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTxnParams) field3Length() int {
	l := 0
	if p.IsSetThriftRpcTimeoutMs() {
		l += bthrift.Binary.FieldBeginLength("thrift_rpc_timeout_ms", thrift.I64, 3)
		l += bthrift.Binary.I64Length(*p.ThriftRpcTimeoutMs)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTxnParams) field4Length() int {
	l := 0
	if p.IsSetDb() {
		l += bthrift.Binary.FieldBeginLength("db", thrift.STRING, 4)
		l += bthrift.Binary.StringLengthNocopy(*p.Db)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTxnParams) field5Length() int {
	l := 0
	if p.IsSetTbl() {
		l += bthrift.Binary.FieldBeginLength("tbl", thrift.STRING, 5)
		l += bthrift.Binary.StringLengthNocopy(*p.Tbl)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTxnParams) field6Length() int {
	l := 0
	if p.IsSetUserIp() {
		l += bthrift.Binary.FieldBeginLength("user_ip", thrift.STRING, 6)
		l += bthrift.Binary.StringLengthNocopy(*p.UserIp)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTxnParams) field7Length() int {
	l := 0
	if p.IsSetTxnId() {
		l += bthrift.Binary.FieldBeginLength("txn_id", thrift.I64, 7)
		l += bthrift.Binary.I64Length(*p.TxnId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTxnParams) field8Length() int {
	l := 0
	if p.IsSetFragmentInstanceId() {
		l += bthrift.Binary.FieldBeginLength("fragment_instance_id", thrift.STRUCT, 8)
		l += p.FragmentInstanceId.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTxnParams) field9Length() int {
	l := 0
	if p.IsSetDbId() {
		l += bthrift.Binary.FieldBeginLength("db_id", thrift.I64, 9)
		l += bthrift.Binary.I64Length(*p.DbId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTxnParams) field10Length() int {
	l := 0
	if p.IsSetMaxFilterRatio() {
		l += bthrift.Binary.FieldBeginLength("max_filter_ratio", thrift.DOUBLE, 10)
		l += bthrift.Binary.DoubleLength(*p.MaxFilterRatio)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTxnParams) field11Length() int {
	l := 0
	if p.IsSetEnablePipelineTxnLoad() {
		l += bthrift.Binary.FieldBeginLength("enable_pipeline_txn_load", thrift.BOOL, 11)
		l += bthrift.Binary.BoolLength(p.EnablePipelineTxnLoad)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TColumnDict) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TColumnDict[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TColumnDict) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		tmp := types.TPrimitiveType(v)
		p.Type = &tmp

	}
	return offset, nil
}

func (p *TColumnDict) FastReadField2(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.StrDict = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.StrDict = append(p.StrDict, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TColumnDict) FastWrite(buf []byte) int {
	return 0
}

func (p *TColumnDict) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TColumnDict")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TColumnDict) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TColumnDict")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TColumnDict) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetType() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "type", thrift.I32, 1)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(*p.Type))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TColumnDict) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "str_dict", thrift.LIST, 2)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRING, 0)
	var length int
	for _, v := range p.StrDict {
		length++
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRING, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TColumnDict) field1Length() int {
	l := 0
	if p.IsSetType() {
		l += bthrift.Binary.FieldBeginLength("type", thrift.I32, 1)
		l += bthrift.Binary.I32Length(int32(*p.Type))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TColumnDict) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("str_dict", thrift.LIST, 2)
	l += bthrift.Binary.ListBeginLength(thrift.STRING, len(p.StrDict))
	for _, v := range p.StrDict {
		l += bthrift.Binary.StringLengthNocopy(v)

	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TGlobalDict) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGlobalDict[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGlobalDict) FastReadField1(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Dicts = make(map[int32]*TColumnDict, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}
		_val := NewTColumnDict()
		if l, err := _val.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Dicts[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TGlobalDict) FastReadField2(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.SlotDicts = make(map[int32]int32, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.SlotDicts[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TGlobalDict) FastWrite(buf []byte) int {
	return 0
}

func (p *TGlobalDict) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TGlobalDict")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TGlobalDict) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TGlobalDict")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TGlobalDict) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDicts() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "dicts", thrift.MAP, 1)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.STRUCT, 0)
		var length int
		for k, v := range p.Dicts {
			length++

			offset += bthrift.Binary.WriteI32(buf[offset:], k)

			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.STRUCT, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TGlobalDict) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSlotDicts() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "slot_dicts", thrift.MAP, 2)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I32, 0)
		var length int
		for k, v := range p.SlotDicts {
			length++

			offset += bthrift.Binary.WriteI32(buf[offset:], k)

			offset += bthrift.Binary.WriteI32(buf[offset:], v)

		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.I32, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TGlobalDict) field1Length() int {
	l := 0
	if p.IsSetDicts() {
		l += bthrift.Binary.FieldBeginLength("dicts", thrift.MAP, 1)
		l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.STRUCT, len(p.Dicts))
		for k, v := range p.Dicts {

			l += bthrift.Binary.I32Length(k)

			l += v.BLength()
		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TGlobalDict) field2Length() int {
	l := 0
	if p.IsSetSlotDicts() {
		l += bthrift.Binary.FieldBeginLength("slot_dicts", thrift.MAP, 2)
		l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I32, len(p.SlotDicts))
		var tmpK int32
		var tmpV int32
		l += (bthrift.Binary.I32Length(int32(tmpK)) + bthrift.Binary.I32Length(int32(tmpV))) * len(p.SlotDicts)
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineWorkloadGroup) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPipelineWorkloadGroup[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TPipelineWorkloadGroup) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Id = &v

	}
	return offset, nil
}

func (p *TPipelineWorkloadGroup) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Name = &v

	}
	return offset, nil
}

func (p *TPipelineWorkloadGroup) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Properties = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.Properties[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPipelineWorkloadGroup) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Version = &v

	}
	return offset, nil
}

// for compatibility
func (p *TPipelineWorkloadGroup) FastWrite(buf []byte) int {
	return 0
}

func (p *TPipelineWorkloadGroup) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TPipelineWorkloadGroup")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TPipelineWorkloadGroup) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TPipelineWorkloadGroup")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TPipelineWorkloadGroup) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "id", thrift.I64, 1)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.Id)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineWorkloadGroup) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetName() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "name", thrift.STRING, 2)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Name)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineWorkloadGroup) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetProperties() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "properties", thrift.MAP, 3)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, 0)
		var length int
		for k, v := range p.Properties {
			length++

			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)

			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRING, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineWorkloadGroup) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetVersion() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "version", thrift.I64, 4)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.Version)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineWorkloadGroup) field1Length() int {
	l := 0
	if p.IsSetId() {
		l += bthrift.Binary.FieldBeginLength("id", thrift.I64, 1)
		l += bthrift.Binary.I64Length(*p.Id)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineWorkloadGroup) field2Length() int {
	l := 0
	if p.IsSetName() {
		l += bthrift.Binary.FieldBeginLength("name", thrift.STRING, 2)
		l += bthrift.Binary.StringLengthNocopy(*p.Name)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineWorkloadGroup) field3Length() int {
	l := 0
	if p.IsSetProperties() {
		l += bthrift.Binary.FieldBeginLength("properties", thrift.MAP, 3)
		l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, len(p.Properties))
		for k, v := range p.Properties {

			l += bthrift.Binary.StringLengthNocopy(k)

			l += bthrift.Binary.StringLengthNocopy(v)

		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineWorkloadGroup) field4Length() int {
	l := 0
	if p.IsSetVersion() {
		l += bthrift.Binary.FieldBeginLength("version", thrift.I64, 4)
		l += bthrift.Binary.I64Length(*p.Version)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField15(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField16(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField17(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField18(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField19(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField20(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField21(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField22(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField23(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 24:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField24(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 25:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField25(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 26:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField26(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 27:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField27(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 28:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField28(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 29:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField29(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 30:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField30(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 31:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField31(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 32:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField32(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 1000:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField1000(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExecPlanFragmentParams[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TExecPlanFragmentParams[fieldId]))
}

func (p *TExecPlanFragmentParams) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ProtocolVersion = PaloInternalServiceVersion(v)

	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField2(buf []byte) (int, error) {
	offset := 0

	tmp := planner.NewTPlanFragment()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Fragment = tmp
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField3(buf []byte) (int, error) {
	offset := 0

	tmp := descriptors.NewTDescriptorTable()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.DescTbl = tmp
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField4(buf []byte) (int, error) {
	offset := 0

	tmp := NewTPlanFragmentExecParams()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Params = tmp
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField5(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTNetworkAddress()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Coord = tmp
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.BackendNum = &v

	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField7(buf []byte) (int, error) {
	offset := 0

	tmp := NewTQueryGlobals()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.QueryGlobals = tmp
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField8(buf []byte) (int, error) {
	offset := 0

	tmp := NewTQueryOptions()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.QueryOptions = tmp
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.IsReportSuccess = &v

	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField10(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTResourceInfo()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ResourceInfo = tmp
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField11(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ImportLabel = &v

	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField12(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.DbName = &v

	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField13(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.LoadJobId = &v

	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField14(buf []byte) (int, error) {
	offset := 0

	tmp := NewTLoadErrorHubInfo()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.LoadErrorHubInfo = tmp
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField15(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.FragmentNumOnHost = &v

	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField16(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.IsSimplifiedParam = v

	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField17(buf []byte) (int, error) {
	offset := 0

	tmp := NewTTxnParams()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.TxnConf = tmp
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField18(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.BackendId = &v

	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField19(buf []byte) (int, error) {
	offset := 0

	tmp := NewTGlobalDict()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.GlobalDict = tmp
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField20(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.NeedWaitExecutionTrigger = v

	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField21(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.BuildHashTableForBroadcastJoin = v

	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField22(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.InstancesSharingHashTable = make([]*types.TUniqueId, 0, size)
	for i := 0; i < size; i++ {
		_elem := types.NewTUniqueId()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.InstancesSharingHashTable = append(p.InstancesSharingHashTable, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField23(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TableName = &v

	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField24(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.FileScanParams = make(map[types.TPlanNodeId]*plannodes.TFileScanRangeParams, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}
		_val := plannodes.NewTFileScanRangeParams()
		if l, err := _val.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.FileScanParams[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField25(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.WalId = &v

	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField26(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.LoadStreamPerNode = &v

	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField27(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TotalLoadStreams = &v

	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField28(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.NumLocalSink = &v

	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField29(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ContentLength = &v

	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField30(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.WorkloadGroups = make([]*TPipelineWorkloadGroup, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTPipelineWorkloadGroup()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.WorkloadGroups = append(p.WorkloadGroups, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField31(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.IsNereids = v

	}
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField32(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTNetworkAddress()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.CurrentConnectFe = tmp
	return offset, nil
}

func (p *TExecPlanFragmentParams) FastReadField1000(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.IsMowTable = &v

	}
	return offset, nil
}

// for compatibility
func (p *TExecPlanFragmentParams) FastWrite(buf []byte) int {
	return 0
}

func (p *TExecPlanFragmentParams) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TExecPlanFragmentParams")
	if p != nil {
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField15(buf[offset:], binaryWriter)
		offset += p.fastWriteField16(buf[offset:], binaryWriter)
		offset += p.fastWriteField18(buf[offset:], binaryWriter)
		offset += p.fastWriteField20(buf[offset:], binaryWriter)
		offset += p.fastWriteField21(buf[offset:], binaryWriter)
		offset += p.fastWriteField25(buf[offset:], binaryWriter)
		offset += p.fastWriteField26(buf[offset:], binaryWriter)
		offset += p.fastWriteField27(buf[offset:], binaryWriter)
		offset += p.fastWriteField28(buf[offset:], binaryWriter)
		offset += p.fastWriteField29(buf[offset:], binaryWriter)
		offset += p.fastWriteField31(buf[offset:], binaryWriter)
		offset += p.fastWriteField1000(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
		offset += p.fastWriteField17(buf[offset:], binaryWriter)
		offset += p.fastWriteField19(buf[offset:], binaryWriter)
		offset += p.fastWriteField22(buf[offset:], binaryWriter)
		offset += p.fastWriteField23(buf[offset:], binaryWriter)
		offset += p.fastWriteField24(buf[offset:], binaryWriter)
		offset += p.fastWriteField30(buf[offset:], binaryWriter)
		offset += p.fastWriteField32(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TExecPlanFragmentParams) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TExecPlanFragmentParams")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
		l += p.field15Length()
		l += p.field16Length()
		l += p.field17Length()
		l += p.field18Length()
		l += p.field19Length()
		l += p.field20Length()
		l += p.field21Length()
		l += p.field22Length()
		l += p.field23Length()
		l += p.field24Length()
		l += p.field25Length()
		l += p.field26Length()
		l += p.field27Length()
		l += p.field28Length()
		l += p.field29Length()
		l += p.field30Length()
		l += p.field31Length()
		l += p.field32Length()
		l += p.field1000Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TExecPlanFragmentParams) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "protocol_version", thrift.I32, 1)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.ProtocolVersion))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFragment() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "fragment", thrift.STRUCT, 2)
		offset += p.Fragment.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDescTbl() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "desc_tbl", thrift.STRUCT, 3)
		offset += p.DescTbl.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetParams() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "params", thrift.STRUCT, 4)
		offset += p.Params.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCoord() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "coord", thrift.STRUCT, 5)
		offset += p.Coord.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBackendNum() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "backend_num", thrift.I32, 6)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.BackendNum)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetQueryGlobals() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "query_globals", thrift.STRUCT, 7)
		offset += p.QueryGlobals.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetQueryOptions() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "query_options", thrift.STRUCT, 8)
		offset += p.QueryOptions.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsReportSuccess() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_report_success", thrift.BOOL, 9)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.IsReportSuccess)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetResourceInfo() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "resource_info", thrift.STRUCT, 10)
		offset += p.ResourceInfo.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetImportLabel() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "import_label", thrift.STRING, 11)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.ImportLabel)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDbName() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "db_name", thrift.STRING, 12)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.DbName)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetLoadJobId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "load_job_id", thrift.I64, 13)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.LoadJobId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetLoadErrorHubInfo() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "load_error_hub_info", thrift.STRUCT, 14)
		offset += p.LoadErrorHubInfo.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField15(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFragmentNumOnHost() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "fragment_num_on_host", thrift.I32, 15)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.FragmentNumOnHost)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField16(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsSimplifiedParam() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_simplified_param", thrift.BOOL, 16)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.IsSimplifiedParam)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField17(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTxnConf() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "txn_conf", thrift.STRUCT, 17)
		offset += p.TxnConf.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField18(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBackendId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "backend_id", thrift.I64, 18)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.BackendId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField19(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetGlobalDict() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "global_dict", thrift.STRUCT, 19)
		offset += p.GlobalDict.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField20(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetNeedWaitExecutionTrigger() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "need_wait_execution_trigger", thrift.BOOL, 20)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.NeedWaitExecutionTrigger)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField21(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBuildHashTableForBroadcastJoin() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "build_hash_table_for_broadcast_join", thrift.BOOL, 21)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.BuildHashTableForBroadcastJoin)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField22(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetInstancesSharingHashTable() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "instances_sharing_hash_table", thrift.LIST, 22)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.InstancesSharingHashTable {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField23(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTableName() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "table_name", thrift.STRING, 23)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.TableName)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField24(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFileScanParams() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "file_scan_params", thrift.MAP, 24)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.STRUCT, 0)
		var length int
		for k, v := range p.FileScanParams {
			length++

			offset += bthrift.Binary.WriteI32(buf[offset:], k)

			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.STRUCT, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField25(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetWalId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "wal_id", thrift.I64, 25)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.WalId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField26(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetLoadStreamPerNode() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "load_stream_per_node", thrift.I32, 26)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.LoadStreamPerNode)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField27(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTotalLoadStreams() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "total_load_streams", thrift.I32, 27)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.TotalLoadStreams)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField28(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetNumLocalSink() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "num_local_sink", thrift.I32, 28)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.NumLocalSink)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField29(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetContentLength() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "content_length", thrift.I64, 29)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.ContentLength)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField30(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetWorkloadGroups() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "workload_groups", thrift.LIST, 30)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.WorkloadGroups {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField31(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsNereids() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_nereids", thrift.BOOL, 31)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.IsNereids)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField32(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCurrentConnectFe() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "current_connect_fe", thrift.STRUCT, 32)
		offset += p.CurrentConnectFe.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) fastWriteField1000(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsMowTable() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_mow_table", thrift.BOOL, 1000)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.IsMowTable)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParams) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("protocol_version", thrift.I32, 1)
	l += bthrift.Binary.I32Length(int32(p.ProtocolVersion))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TExecPlanFragmentParams) field2Length() int {
	l := 0
	if p.IsSetFragment() {
		l += bthrift.Binary.FieldBeginLength("fragment", thrift.STRUCT, 2)
		l += p.Fragment.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field3Length() int {
	l := 0
	if p.IsSetDescTbl() {
		l += bthrift.Binary.FieldBeginLength("desc_tbl", thrift.STRUCT, 3)
		l += p.DescTbl.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field4Length() int {
	l := 0
	if p.IsSetParams() {
		l += bthrift.Binary.FieldBeginLength("params", thrift.STRUCT, 4)
		l += p.Params.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field5Length() int {
	l := 0
	if p.IsSetCoord() {
		l += bthrift.Binary.FieldBeginLength("coord", thrift.STRUCT, 5)
		l += p.Coord.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field6Length() int {
	l := 0
	if p.IsSetBackendNum() {
		l += bthrift.Binary.FieldBeginLength("backend_num", thrift.I32, 6)
		l += bthrift.Binary.I32Length(*p.BackendNum)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field7Length() int {
	l := 0
	if p.IsSetQueryGlobals() {
		l += bthrift.Binary.FieldBeginLength("query_globals", thrift.STRUCT, 7)
		l += p.QueryGlobals.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field8Length() int {
	l := 0
	if p.IsSetQueryOptions() {
		l += bthrift.Binary.FieldBeginLength("query_options", thrift.STRUCT, 8)
		l += p.QueryOptions.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field9Length() int {
	l := 0
	if p.IsSetIsReportSuccess() {
		l += bthrift.Binary.FieldBeginLength("is_report_success", thrift.BOOL, 9)
		l += bthrift.Binary.BoolLength(*p.IsReportSuccess)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field10Length() int {
	l := 0
	if p.IsSetResourceInfo() {
		l += bthrift.Binary.FieldBeginLength("resource_info", thrift.STRUCT, 10)
		l += p.ResourceInfo.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field11Length() int {
	l := 0
	if p.IsSetImportLabel() {
		l += bthrift.Binary.FieldBeginLength("import_label", thrift.STRING, 11)
		l += bthrift.Binary.StringLengthNocopy(*p.ImportLabel)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field12Length() int {
	l := 0
	if p.IsSetDbName() {
		l += bthrift.Binary.FieldBeginLength("db_name", thrift.STRING, 12)
		l += bthrift.Binary.StringLengthNocopy(*p.DbName)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field13Length() int {
	l := 0
	if p.IsSetLoadJobId() {
		l += bthrift.Binary.FieldBeginLength("load_job_id", thrift.I64, 13)
		l += bthrift.Binary.I64Length(*p.LoadJobId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field14Length() int {
	l := 0
	if p.IsSetLoadErrorHubInfo() {
		l += bthrift.Binary.FieldBeginLength("load_error_hub_info", thrift.STRUCT, 14)
		l += p.LoadErrorHubInfo.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field15Length() int {
	l := 0
	if p.IsSetFragmentNumOnHost() {
		l += bthrift.Binary.FieldBeginLength("fragment_num_on_host", thrift.I32, 15)
		l += bthrift.Binary.I32Length(*p.FragmentNumOnHost)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field16Length() int {
	l := 0
	if p.IsSetIsSimplifiedParam() {
		l += bthrift.Binary.FieldBeginLength("is_simplified_param", thrift.BOOL, 16)
		l += bthrift.Binary.BoolLength(p.IsSimplifiedParam)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field17Length() int {
	l := 0
	if p.IsSetTxnConf() {
		l += bthrift.Binary.FieldBeginLength("txn_conf", thrift.STRUCT, 17)
		l += p.TxnConf.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field18Length() int {
	l := 0
	if p.IsSetBackendId() {
		l += bthrift.Binary.FieldBeginLength("backend_id", thrift.I64, 18)
		l += bthrift.Binary.I64Length(*p.BackendId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field19Length() int {
	l := 0
	if p.IsSetGlobalDict() {
		l += bthrift.Binary.FieldBeginLength("global_dict", thrift.STRUCT, 19)
		l += p.GlobalDict.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field20Length() int {
	l := 0
	if p.IsSetNeedWaitExecutionTrigger() {
		l += bthrift.Binary.FieldBeginLength("need_wait_execution_trigger", thrift.BOOL, 20)
		l += bthrift.Binary.BoolLength(p.NeedWaitExecutionTrigger)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field21Length() int {
	l := 0
	if p.IsSetBuildHashTableForBroadcastJoin() {
		l += bthrift.Binary.FieldBeginLength("build_hash_table_for_broadcast_join", thrift.BOOL, 21)
		l += bthrift.Binary.BoolLength(p.BuildHashTableForBroadcastJoin)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field22Length() int {
	l := 0
	if p.IsSetInstancesSharingHashTable() {
		l += bthrift.Binary.FieldBeginLength("instances_sharing_hash_table", thrift.LIST, 22)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.InstancesSharingHashTable))
		for _, v := range p.InstancesSharingHashTable {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field23Length() int {
	l := 0
	if p.IsSetTableName() {
		l += bthrift.Binary.FieldBeginLength("table_name", thrift.STRING, 23)
		l += bthrift.Binary.StringLengthNocopy(*p.TableName)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field24Length() int {
	l := 0
	if p.IsSetFileScanParams() {
		l += bthrift.Binary.FieldBeginLength("file_scan_params", thrift.MAP, 24)
		l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.STRUCT, len(p.FileScanParams))
		for k, v := range p.FileScanParams {

			l += bthrift.Binary.I32Length(k)

			l += v.BLength()
		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field25Length() int {
	l := 0
	if p.IsSetWalId() {
		l += bthrift.Binary.FieldBeginLength("wal_id", thrift.I64, 25)
		l += bthrift.Binary.I64Length(*p.WalId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field26Length() int {
	l := 0
	if p.IsSetLoadStreamPerNode() {
		l += bthrift.Binary.FieldBeginLength("load_stream_per_node", thrift.I32, 26)
		l += bthrift.Binary.I32Length(*p.LoadStreamPerNode)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field27Length() int {
	l := 0
	if p.IsSetTotalLoadStreams() {
		l += bthrift.Binary.FieldBeginLength("total_load_streams", thrift.I32, 27)
		l += bthrift.Binary.I32Length(*p.TotalLoadStreams)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field28Length() int {
	l := 0
	if p.IsSetNumLocalSink() {
		l += bthrift.Binary.FieldBeginLength("num_local_sink", thrift.I32, 28)
		l += bthrift.Binary.I32Length(*p.NumLocalSink)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field29Length() int {
	l := 0
	if p.IsSetContentLength() {
		l += bthrift.Binary.FieldBeginLength("content_length", thrift.I64, 29)
		l += bthrift.Binary.I64Length(*p.ContentLength)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field30Length() int {
	l := 0
	if p.IsSetWorkloadGroups() {
		l += bthrift.Binary.FieldBeginLength("workload_groups", thrift.LIST, 30)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.WorkloadGroups))
		for _, v := range p.WorkloadGroups {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field31Length() int {
	l := 0
	if p.IsSetIsNereids() {
		l += bthrift.Binary.FieldBeginLength("is_nereids", thrift.BOOL, 31)
		l += bthrift.Binary.BoolLength(p.IsNereids)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field32Length() int {
	l := 0
	if p.IsSetCurrentConnectFe() {
		l += bthrift.Binary.FieldBeginLength("current_connect_fe", thrift.STRUCT, 32)
		l += p.CurrentConnectFe.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParams) field1000Length() int {
	l := 0
	if p.IsSetIsMowTable() {
		l += bthrift.Binary.FieldBeginLength("is_mow_table", thrift.BOOL, 1000)
		l += bthrift.Binary.BoolLength(*p.IsMowTable)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentParamsList) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExecPlanFragmentParamsList[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TExecPlanFragmentParamsList) FastReadField1(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.ParamsList = make([]*TExecPlanFragmentParams, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTExecPlanFragmentParams()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.ParamsList = append(p.ParamsList, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TExecPlanFragmentParamsList) FastWrite(buf []byte) int {
	return 0
}

func (p *TExecPlanFragmentParamsList) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TExecPlanFragmentParamsList")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TExecPlanFragmentParamsList) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TExecPlanFragmentParamsList")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TExecPlanFragmentParamsList) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetParamsList() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "paramsList", thrift.LIST, 1)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.ParamsList {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentParamsList) field1Length() int {
	l := 0
	if p.IsSetParamsList() {
		l += bthrift.Binary.FieldBeginLength("paramsList", thrift.LIST, 1)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.ParamsList))
		for _, v := range p.ParamsList {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExecPlanFragmentResult_) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExecPlanFragmentResult_[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TExecPlanFragmentResult_) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := status.NewTStatus()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Status = tmp
	return offset, nil
}

// for compatibility
func (p *TExecPlanFragmentResult_) FastWrite(buf []byte) int {
	return 0
}

func (p *TExecPlanFragmentResult_) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TExecPlanFragmentResult")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TExecPlanFragmentResult_) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TExecPlanFragmentResult")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TExecPlanFragmentResult_) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStatus() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "status", thrift.STRUCT, 1)
		offset += p.Status.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExecPlanFragmentResult_) field1Length() int {
	l := 0
	if p.IsSetStatus() {
		l += bthrift.Binary.FieldBeginLength("status", thrift.STRUCT, 1)
		l += p.Status.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCancelPlanFragmentParams) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCancelPlanFragmentParams[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCancelPlanFragmentParams[fieldId]))
}

func (p *TCancelPlanFragmentParams) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ProtocolVersion = PaloInternalServiceVersion(v)

	}
	return offset, nil
}

func (p *TCancelPlanFragmentParams) FastReadField2(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTUniqueId()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.FragmentInstanceId = tmp
	return offset, nil
}

// for compatibility
func (p *TCancelPlanFragmentParams) FastWrite(buf []byte) int {
	return 0
}

func (p *TCancelPlanFragmentParams) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TCancelPlanFragmentParams")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TCancelPlanFragmentParams) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TCancelPlanFragmentParams")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TCancelPlanFragmentParams) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "protocol_version", thrift.I32, 1)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.ProtocolVersion))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCancelPlanFragmentParams) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFragmentInstanceId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "fragment_instance_id", thrift.STRUCT, 2)
		offset += p.FragmentInstanceId.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCancelPlanFragmentParams) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("protocol_version", thrift.I32, 1)
	l += bthrift.Binary.I32Length(int32(p.ProtocolVersion))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCancelPlanFragmentParams) field2Length() int {
	l := 0
	if p.IsSetFragmentInstanceId() {
		l += bthrift.Binary.FieldBeginLength("fragment_instance_id", thrift.STRUCT, 2)
		l += p.FragmentInstanceId.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCancelPlanFragmentResult_) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCancelPlanFragmentResult_[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TCancelPlanFragmentResult_) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := status.NewTStatus()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Status = tmp
	return offset, nil
}

// for compatibility
func (p *TCancelPlanFragmentResult_) FastWrite(buf []byte) int {
	return 0
}

func (p *TCancelPlanFragmentResult_) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TCancelPlanFragmentResult")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TCancelPlanFragmentResult_) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TCancelPlanFragmentResult")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TCancelPlanFragmentResult_) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStatus() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "status", thrift.STRUCT, 1)
		offset += p.Status.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCancelPlanFragmentResult_) field1Length() int {
	l := 0
	if p.IsSetStatus() {
		l += bthrift.Binary.FieldBeginLength("status", thrift.STRUCT, 1)
		l += p.Status.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExprMap) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetExprMap bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetExprMap = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetExprMap {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExprMap[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TExprMap[fieldId]))
}

func (p *TExprMap) FastReadField1(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.ExprMap = make(map[string]*exprs.TExpr, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}
		_val := exprs.NewTExpr()
		if l, err := _val.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.ExprMap[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TExprMap) FastWrite(buf []byte) int {
	return 0
}

func (p *TExprMap) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TExprMap")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TExprMap) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TExprMap")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TExprMap) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "expr_map", thrift.MAP, 1)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, 0)
	var length int
	for k, v := range p.ExprMap {
		length++

		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)

		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRUCT, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TExprMap) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("expr_map", thrift.MAP, 1)
	l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, len(p.ExprMap))
	for k, v := range p.ExprMap {

		l += bthrift.Binary.StringLengthNocopy(k)

		l += v.BLength()
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFoldConstantParams) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetExprMap bool = false
	var issetQueryGlobals bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetExprMap = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetQueryGlobals = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetExprMap {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetQueryGlobals {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFoldConstantParams[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFoldConstantParams[fieldId]))
}

func (p *TFoldConstantParams) FastReadField1(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.ExprMap = make(map[string]map[string]*exprs.TExpr, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
		offset += l
		if err != nil {
			return offset, err
		}
		_val := make(map[string]*exprs.TExpr, size)
		for i := 0; i < size; i++ {
			var _key1 string
			if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
				return offset, err
			} else {
				offset += l

				_key1 = v

			}
			_val1 := exprs.NewTExpr()
			if l, err := _val1.FastRead(buf[offset:]); err != nil {
				return offset, err
			} else {
				offset += l
			}

			_val[_key1] = _val1
		}
		if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.ExprMap[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TFoldConstantParams) FastReadField2(buf []byte) (int, error) {
	offset := 0

	tmp := NewTQueryGlobals()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.QueryGlobals = tmp
	return offset, nil
}

func (p *TFoldConstantParams) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.VecExec = &v

	}
	return offset, nil
}

func (p *TFoldConstantParams) FastReadField4(buf []byte) (int, error) {
	offset := 0

	tmp := NewTQueryOptions()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.QueryOptions = tmp
	return offset, nil
}

func (p *TFoldConstantParams) FastReadField5(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTUniqueId()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.QueryId = tmp
	return offset, nil
}

func (p *TFoldConstantParams) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.IsNereids = &v

	}
	return offset, nil
}

// for compatibility
func (p *TFoldConstantParams) FastWrite(buf []byte) int {
	return 0
}

func (p *TFoldConstantParams) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TFoldConstantParams")
	if p != nil {
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TFoldConstantParams) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TFoldConstantParams")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TFoldConstantParams) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "expr_map", thrift.MAP, 1)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.MAP, 0)
	var length int
	for k, v := range p.ExprMap {
		length++

		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)

		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, 0)
		var length int
		for k, v := range v {
			length++

			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)

			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRUCT, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.MAP, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFoldConstantParams) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "query_globals", thrift.STRUCT, 2)
	offset += p.QueryGlobals.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFoldConstantParams) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetVecExec() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "vec_exec", thrift.BOOL, 3)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.VecExec)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFoldConstantParams) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetQueryOptions() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "query_options", thrift.STRUCT, 4)
		offset += p.QueryOptions.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFoldConstantParams) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetQueryId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "query_id", thrift.STRUCT, 5)
		offset += p.QueryId.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFoldConstantParams) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsNereids() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_nereids", thrift.BOOL, 6)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.IsNereids)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFoldConstantParams) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("expr_map", thrift.MAP, 1)
	l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.MAP, len(p.ExprMap))
	for k, v := range p.ExprMap {

		l += bthrift.Binary.StringLengthNocopy(k)

		l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, len(v))
		for k, v := range v {

			l += bthrift.Binary.StringLengthNocopy(k)

			l += v.BLength()
		}
		l += bthrift.Binary.MapEndLength()
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFoldConstantParams) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("query_globals", thrift.STRUCT, 2)
	l += p.QueryGlobals.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFoldConstantParams) field3Length() int {
	l := 0
	if p.IsSetVecExec() {
		l += bthrift.Binary.FieldBeginLength("vec_exec", thrift.BOOL, 3)
		l += bthrift.Binary.BoolLength(*p.VecExec)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFoldConstantParams) field4Length() int {
	l := 0
	if p.IsSetQueryOptions() {
		l += bthrift.Binary.FieldBeginLength("query_options", thrift.STRUCT, 4)
		l += p.QueryOptions.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFoldConstantParams) field5Length() int {
	l := 0
	if p.IsSetQueryId() {
		l += bthrift.Binary.FieldBeginLength("query_id", thrift.STRUCT, 5)
		l += p.QueryId.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TFoldConstantParams) field6Length() int {
	l := 0
	if p.IsSetIsNereids() {
		l += bthrift.Binary.FieldBeginLength("is_nereids", thrift.BOOL, 6)
		l += bthrift.Binary.BoolLength(*p.IsNereids)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTransmitDataParams) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTransmitDataParams[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTransmitDataParams[fieldId]))
}

func (p *TTransmitDataParams) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ProtocolVersion = PaloInternalServiceVersion(v)

	}
	return offset, nil
}

func (p *TTransmitDataParams) FastReadField2(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTUniqueId()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.DestFragmentInstanceId = tmp
	return offset, nil
}

func (p *TTransmitDataParams) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.DestNodeId = &v

	}
	return offset, nil
}

func (p *TTransmitDataParams) FastReadField5(buf []byte) (int, error) {
	offset := 0

	tmp := data.NewTRowBatch()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.RowBatch = tmp
	return offset, nil
}

func (p *TTransmitDataParams) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Eos = &v

	}
	return offset, nil
}

func (p *TTransmitDataParams) FastReadField7(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.BeNumber = &v

	}
	return offset, nil
}

func (p *TTransmitDataParams) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.PacketSeq = &v

	}
	return offset, nil
}

func (p *TTransmitDataParams) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.SenderId = &v

	}
	return offset, nil
}

// for compatibility
func (p *TTransmitDataParams) FastWrite(buf []byte) int {
	return 0
}

func (p *TTransmitDataParams) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTransmitDataParams")
	if p != nil {
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTransmitDataParams) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTransmitDataParams")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTransmitDataParams) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "protocol_version", thrift.I32, 1)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.ProtocolVersion))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTransmitDataParams) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDestFragmentInstanceId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "dest_fragment_instance_id", thrift.STRUCT, 2)
		offset += p.DestFragmentInstanceId.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTransmitDataParams) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDestNodeId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "dest_node_id", thrift.I32, 4)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.DestNodeId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTransmitDataParams) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRowBatch() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "row_batch", thrift.STRUCT, 5)
		offset += p.RowBatch.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTransmitDataParams) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEos() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "eos", thrift.BOOL, 6)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.Eos)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTransmitDataParams) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBeNumber() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "be_number", thrift.I32, 7)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.BeNumber)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTransmitDataParams) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPacketSeq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "packet_seq", thrift.I64, 8)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.PacketSeq)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTransmitDataParams) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSenderId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "sender_id", thrift.I32, 9)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.SenderId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTransmitDataParams) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("protocol_version", thrift.I32, 1)
	l += bthrift.Binary.I32Length(int32(p.ProtocolVersion))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTransmitDataParams) field2Length() int {
	l := 0
	if p.IsSetDestFragmentInstanceId() {
		l += bthrift.Binary.FieldBeginLength("dest_fragment_instance_id", thrift.STRUCT, 2)
		l += p.DestFragmentInstanceId.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTransmitDataParams) field4Length() int {
	l := 0
	if p.IsSetDestNodeId() {
		l += bthrift.Binary.FieldBeginLength("dest_node_id", thrift.I32, 4)
		l += bthrift.Binary.I32Length(*p.DestNodeId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTransmitDataParams) field5Length() int {
	l := 0
	if p.IsSetRowBatch() {
		l += bthrift.Binary.FieldBeginLength("row_batch", thrift.STRUCT, 5)
		l += p.RowBatch.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTransmitDataParams) field6Length() int {
	l := 0
	if p.IsSetEos() {
		l += bthrift.Binary.FieldBeginLength("eos", thrift.BOOL, 6)
		l += bthrift.Binary.BoolLength(*p.Eos)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTransmitDataParams) field7Length() int {
	l := 0
	if p.IsSetBeNumber() {
		l += bthrift.Binary.FieldBeginLength("be_number", thrift.I32, 7)
		l += bthrift.Binary.I32Length(*p.BeNumber)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTransmitDataParams) field8Length() int {
	l := 0
	if p.IsSetPacketSeq() {
		l += bthrift.Binary.FieldBeginLength("packet_seq", thrift.I64, 8)
		l += bthrift.Binary.I64Length(*p.PacketSeq)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTransmitDataParams) field9Length() int {
	l := 0
	if p.IsSetSenderId() {
		l += bthrift.Binary.FieldBeginLength("sender_id", thrift.I32, 9)
		l += bthrift.Binary.I32Length(*p.SenderId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTransmitDataResult_) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTransmitDataResult_[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTransmitDataResult_) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := status.NewTStatus()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Status = tmp
	return offset, nil
}

func (p *TTransmitDataResult_) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.PacketSeq = &v

	}
	return offset, nil
}

func (p *TTransmitDataResult_) FastReadField3(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTUniqueId()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.DestFragmentInstanceId = tmp
	return offset, nil
}

func (p *TTransmitDataResult_) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.DestNodeId = &v

	}
	return offset, nil
}

// for compatibility
func (p *TTransmitDataResult_) FastWrite(buf []byte) int {
	return 0
}

func (p *TTransmitDataResult_) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTransmitDataResult")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTransmitDataResult_) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTransmitDataResult")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTransmitDataResult_) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStatus() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "status", thrift.STRUCT, 1)
		offset += p.Status.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTransmitDataResult_) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPacketSeq() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "packet_seq", thrift.I64, 2)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.PacketSeq)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTransmitDataResult_) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDestFragmentInstanceId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "dest_fragment_instance_id", thrift.STRUCT, 3)
		offset += p.DestFragmentInstanceId.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTransmitDataResult_) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDestNodeId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "dest_node_id", thrift.I32, 4)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.DestNodeId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TTransmitDataResult_) field1Length() int {
	l := 0
	if p.IsSetStatus() {
		l += bthrift.Binary.FieldBeginLength("status", thrift.STRUCT, 1)
		l += p.Status.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTransmitDataResult_) field2Length() int {
	l := 0
	if p.IsSetPacketSeq() {
		l += bthrift.Binary.FieldBeginLength("packet_seq", thrift.I64, 2)
		l += bthrift.Binary.I64Length(*p.PacketSeq)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTransmitDataResult_) field3Length() int {
	l := 0
	if p.IsSetDestFragmentInstanceId() {
		l += bthrift.Binary.FieldBeginLength("dest_fragment_instance_id", thrift.STRUCT, 3)
		l += p.DestFragmentInstanceId.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTransmitDataResult_) field4Length() int {
	l := 0
	if p.IsSetDestNodeId() {
		l += bthrift.Binary.FieldBeginLength("dest_node_id", thrift.I32, 4)
		l += bthrift.Binary.I32Length(*p.DestNodeId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TTabletWithPartition) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPartitionId bool = false
	var issetTabletId bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPartitionId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetPartitionId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTabletId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletWithPartition[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletWithPartition[fieldId]))
}

func (p *TTabletWithPartition) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.PartitionId = v

	}
	return offset, nil
}

func (p *TTabletWithPartition) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TabletId = v

	}
	return offset, nil
}

// for compatibility
func (p *TTabletWithPartition) FastWrite(buf []byte) int {
	return 0
}

func (p *TTabletWithPartition) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTabletWithPartition")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTabletWithPartition) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTabletWithPartition")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTabletWithPartition) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "partition_id", thrift.I64, 1)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.PartitionId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWithPartition) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_id", thrift.I64, 2)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TabletId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWithPartition) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("partition_id", thrift.I64, 1)
	l += bthrift.Binary.I64Length(p.PartitionId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWithPartition) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablet_id", thrift.I64, 2)
	l += bthrift.Binary.I64Length(p.TabletId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterOpenParams) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetIndexId bool = false
	var issetTxnId bool = false
	var issetSchema bool = false
	var issetTablets bool = false
	var issetNumSenders bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetIndexId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTxnId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSchema = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTablets = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetNumSenders = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetIndexId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTxnId {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetSchema {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTablets {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetNumSenders {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletWriterOpenParams[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletWriterOpenParams[fieldId]))
}

func (p *TTabletWriterOpenParams) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTUniqueId()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Id = tmp
	return offset, nil
}

func (p *TTabletWriterOpenParams) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.IndexId = v

	}
	return offset, nil
}

func (p *TTabletWriterOpenParams) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.TxnId = v

	}
	return offset, nil
}

func (p *TTabletWriterOpenParams) FastReadField4(buf []byte) (int, error) {
	offset := 0

	tmp := descriptors.NewTOlapTableSchemaParam()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Schema = tmp
	return offset, nil
}

func (p *TTabletWriterOpenParams) FastReadField5(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Tablets = make([]*TTabletWithPartition, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTTabletWithPartition()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Tablets = append(p.Tablets, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TTabletWriterOpenParams) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.NumSenders = v

	}
	return offset, nil
}

// for compatibility
func (p *TTabletWriterOpenParams) FastWrite(buf []byte) int {
	return 0
}

func (p *TTabletWriterOpenParams) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTabletWriterOpenParams")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterOpenParams) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTabletWriterOpenParams")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTabletWriterOpenParams) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "id", thrift.STRUCT, 1)
	offset += p.Id.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterOpenParams) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "index_id", thrift.I64, 2)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.IndexId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterOpenParams) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "txn_id", thrift.I64, 3)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.TxnId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterOpenParams) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "schema", thrift.STRUCT, 4)
	offset += p.Schema.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterOpenParams) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablets", thrift.LIST, 5)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.Tablets {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterOpenParams) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "num_senders", thrift.I32, 6)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.NumSenders)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterOpenParams) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("id", thrift.STRUCT, 1)
	l += p.Id.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterOpenParams) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("index_id", thrift.I64, 2)
	l += bthrift.Binary.I64Length(p.IndexId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterOpenParams) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("txn_id", thrift.I64, 3)
	l += bthrift.Binary.I64Length(p.TxnId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterOpenParams) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("schema", thrift.STRUCT, 4)
	l += p.Schema.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterOpenParams) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablets", thrift.LIST, 5)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.Tablets))
	for _, v := range p.Tablets {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterOpenParams) field6Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("num_senders", thrift.I32, 6)
	l += bthrift.Binary.I32Length(p.NumSenders)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterOpenResult_) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletWriterOpenResult_[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletWriterOpenResult_[fieldId]))
}

func (p *TTabletWriterOpenResult_) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := status.NewTStatus()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Status = tmp
	return offset, nil
}

// for compatibility
func (p *TTabletWriterOpenResult_) FastWrite(buf []byte) int {
	return 0
}

func (p *TTabletWriterOpenResult_) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTabletWriterOpenResult")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterOpenResult_) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTabletWriterOpenResult")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTabletWriterOpenResult_) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "status", thrift.STRUCT, 1)
	offset += p.Status.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterOpenResult_) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("status", thrift.STRUCT, 1)
	l += p.Status.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterAddBatchParams) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetIndexId bool = false
	var issetPacketSeq bool = false
	var issetTabletIds bool = false
	var issetRowBatch bool = false
	var issetSenderNo bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetIndexId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPacketSeq = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetTabletIds = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetRowBatch = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSenderNo = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetIndexId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPacketSeq {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetTabletIds {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetRowBatch {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetSenderNo {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletWriterAddBatchParams[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletWriterAddBatchParams[fieldId]))
}

func (p *TTabletWriterAddBatchParams) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTUniqueId()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Id = tmp
	return offset, nil
}

func (p *TTabletWriterAddBatchParams) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.IndexId = v

	}
	return offset, nil
}

func (p *TTabletWriterAddBatchParams) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.PacketSeq = v

	}
	return offset, nil
}

func (p *TTabletWriterAddBatchParams) FastReadField4(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.TabletIds = make([]types.TTabletId, 0, size)
	for i := 0; i < size; i++ {
		var _elem types.TTabletId
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.TabletIds = append(p.TabletIds, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TTabletWriterAddBatchParams) FastReadField5(buf []byte) (int, error) {
	offset := 0

	tmp := data.NewTRowBatch()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.RowBatch = tmp
	return offset, nil
}

func (p *TTabletWriterAddBatchParams) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SenderNo = v

	}
	return offset, nil
}

// for compatibility
func (p *TTabletWriterAddBatchParams) FastWrite(buf []byte) int {
	return 0
}

func (p *TTabletWriterAddBatchParams) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTabletWriterAddBatchParams")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterAddBatchParams) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTabletWriterAddBatchParams")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTabletWriterAddBatchParams) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "id", thrift.STRUCT, 1)
	offset += p.Id.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterAddBatchParams) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "index_id", thrift.I64, 2)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.IndexId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterAddBatchParams) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "packet_seq", thrift.I64, 3)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.PacketSeq)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterAddBatchParams) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "tablet_ids", thrift.LIST, 4)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.I64, 0)
	var length int
	for _, v := range p.TabletIds {
		length++
		offset += bthrift.Binary.WriteI64(buf[offset:], v)

	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I64, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterAddBatchParams) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "row_batch", thrift.STRUCT, 5)
	offset += p.RowBatch.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterAddBatchParams) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "sender_no", thrift.I32, 6)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.SenderNo)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterAddBatchParams) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("id", thrift.STRUCT, 1)
	l += p.Id.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterAddBatchParams) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("index_id", thrift.I64, 2)
	l += bthrift.Binary.I64Length(p.IndexId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterAddBatchParams) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("packet_seq", thrift.I64, 3)
	l += bthrift.Binary.I64Length(p.PacketSeq)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterAddBatchParams) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("tablet_ids", thrift.LIST, 4)
	l += bthrift.Binary.ListBeginLength(thrift.I64, len(p.TabletIds))
	var tmpV types.TTabletId
	l += bthrift.Binary.I64Length(int64(tmpV)) * len(p.TabletIds)
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterAddBatchParams) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("row_batch", thrift.STRUCT, 5)
	l += p.RowBatch.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterAddBatchParams) field6Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("sender_no", thrift.I32, 6)
	l += bthrift.Binary.I32Length(p.SenderNo)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterAddBatchResult_) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletWriterAddBatchResult_[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletWriterAddBatchResult_[fieldId]))
}

func (p *TTabletWriterAddBatchResult_) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := status.NewTStatus()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Status = tmp
	return offset, nil
}

// for compatibility
func (p *TTabletWriterAddBatchResult_) FastWrite(buf []byte) int {
	return 0
}

func (p *TTabletWriterAddBatchResult_) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTabletWriterAddBatchResult")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterAddBatchResult_) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTabletWriterAddBatchResult")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTabletWriterAddBatchResult_) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "status", thrift.STRUCT, 1)
	offset += p.Status.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterAddBatchResult_) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("status", thrift.STRUCT, 1)
	l += p.Status.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterCloseParams) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetIndexId bool = false
	var issetSenderNo bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetIndexId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSenderNo = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetIndexId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSenderNo {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletWriterCloseParams[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletWriterCloseParams[fieldId]))
}

func (p *TTabletWriterCloseParams) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTUniqueId()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Id = tmp
	return offset, nil
}

func (p *TTabletWriterCloseParams) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.IndexId = v

	}
	return offset, nil
}

func (p *TTabletWriterCloseParams) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SenderNo = v

	}
	return offset, nil
}

// for compatibility
func (p *TTabletWriterCloseParams) FastWrite(buf []byte) int {
	return 0
}

func (p *TTabletWriterCloseParams) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTabletWriterCloseParams")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterCloseParams) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTabletWriterCloseParams")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTabletWriterCloseParams) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "id", thrift.STRUCT, 1)
	offset += p.Id.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterCloseParams) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "index_id", thrift.I64, 2)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.IndexId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterCloseParams) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "sender_no", thrift.I32, 3)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.SenderNo)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterCloseParams) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("id", thrift.STRUCT, 1)
	l += p.Id.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterCloseParams) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("index_id", thrift.I64, 2)
	l += bthrift.Binary.I64Length(p.IndexId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterCloseParams) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("sender_no", thrift.I32, 3)
	l += bthrift.Binary.I32Length(p.SenderNo)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterCloseResult_) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletWriterCloseResult_[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletWriterCloseResult_[fieldId]))
}

func (p *TTabletWriterCloseResult_) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := status.NewTStatus()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Status = tmp
	return offset, nil
}

// for compatibility
func (p *TTabletWriterCloseResult_) FastWrite(buf []byte) int {
	return 0
}

func (p *TTabletWriterCloseResult_) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTabletWriterCloseResult")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterCloseResult_) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTabletWriterCloseResult")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTabletWriterCloseResult_) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "status", thrift.STRUCT, 1)
	offset += p.Status.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterCloseResult_) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("status", thrift.STRUCT, 1)
	l += p.Status.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterCancelParams) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetIndexId bool = false
	var issetSenderNo bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetIndexId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSenderNo = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetIndexId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSenderNo {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletWriterCancelParams[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletWriterCancelParams[fieldId]))
}

func (p *TTabletWriterCancelParams) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTUniqueId()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Id = tmp
	return offset, nil
}

func (p *TTabletWriterCancelParams) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.IndexId = v

	}
	return offset, nil
}

func (p *TTabletWriterCancelParams) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.SenderNo = v

	}
	return offset, nil
}

// for compatibility
func (p *TTabletWriterCancelParams) FastWrite(buf []byte) int {
	return 0
}

func (p *TTabletWriterCancelParams) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTabletWriterCancelParams")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterCancelParams) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTabletWriterCancelParams")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TTabletWriterCancelParams) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "id", thrift.STRUCT, 1)
	offset += p.Id.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterCancelParams) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "index_id", thrift.I64, 2)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.IndexId)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterCancelParams) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "sender_no", thrift.I32, 3)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.SenderNo)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterCancelParams) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("id", thrift.STRUCT, 1)
	l += p.Id.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterCancelParams) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("index_id", thrift.I64, 2)
	l += bthrift.Binary.I64Length(p.IndexId)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterCancelParams) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("sender_no", thrift.I32, 3)
	l += bthrift.Binary.I32Length(p.SenderNo)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TTabletWriterCancelResult_) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
		offset += l
		if err != nil {
			goto SkipFieldError
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

// for compatibility
func (p *TTabletWriterCancelResult_) FastWrite(buf []byte) int {
	return 0
}

func (p *TTabletWriterCancelResult_) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TTabletWriterCancelResult")
	if p != nil {
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TTabletWriterCancelResult_) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TTabletWriterCancelResult")
	if p != nil {
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TFetchDataParams) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false
	var issetFragmentInstanceId bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetFragmentInstanceId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetFragmentInstanceId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFetchDataParams[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFetchDataParams[fieldId]))
}

func (p *TFetchDataParams) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ProtocolVersion = PaloInternalServiceVersion(v)

	}
	return offset, nil
}

func (p *TFetchDataParams) FastReadField2(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTUniqueId()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.FragmentInstanceId = tmp
	return offset, nil
}

// for compatibility
func (p *TFetchDataParams) FastWrite(buf []byte) int {
	return 0
}

func (p *TFetchDataParams) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TFetchDataParams")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TFetchDataParams) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TFetchDataParams")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TFetchDataParams) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "protocol_version", thrift.I32, 1)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.ProtocolVersion))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFetchDataParams) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "fragment_instance_id", thrift.STRUCT, 2)
	offset += p.FragmentInstanceId.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFetchDataParams) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("protocol_version", thrift.I32, 1)
	l += bthrift.Binary.I32Length(int32(p.ProtocolVersion))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFetchDataParams) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("fragment_instance_id", thrift.STRUCT, 2)
	l += p.FragmentInstanceId.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFetchDataResult_) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetResultBatch bool = false
	var issetEos bool = false
	var issetPacketNum bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetResultBatch = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetEos = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPacketNum = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetResultBatch {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEos {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPacketNum {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFetchDataResult_[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFetchDataResult_[fieldId]))
}

func (p *TFetchDataResult_) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := data.NewTResultBatch()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ResultBatch = tmp
	return offset, nil
}

func (p *TFetchDataResult_) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.Eos = v

	}
	return offset, nil
}

func (p *TFetchDataResult_) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.PacketNum = v

	}
	return offset, nil
}

func (p *TFetchDataResult_) FastReadField4(buf []byte) (int, error) {
	offset := 0

	tmp := status.NewTStatus()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Status = tmp
	return offset, nil
}

// for compatibility
func (p *TFetchDataResult_) FastWrite(buf []byte) int {
	return 0
}

func (p *TFetchDataResult_) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TFetchDataResult")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TFetchDataResult_) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TFetchDataResult")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TFetchDataResult_) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "result_batch", thrift.STRUCT, 1)
	offset += p.ResultBatch.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFetchDataResult_) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "eos", thrift.BOOL, 2)
	offset += bthrift.Binary.WriteBool(buf[offset:], p.Eos)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFetchDataResult_) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "packet_num", thrift.I32, 3)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.PacketNum)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TFetchDataResult_) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStatus() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "status", thrift.STRUCT, 4)
		offset += p.Status.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TFetchDataResult_) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("result_batch", thrift.STRUCT, 1)
	l += p.ResultBatch.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFetchDataResult_) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("eos", thrift.BOOL, 2)
	l += bthrift.Binary.BoolLength(p.Eos)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFetchDataResult_) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("packet_num", thrift.I32, 3)
	l += bthrift.Binary.I32Length(p.PacketNum)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TFetchDataResult_) field4Length() int {
	l := 0
	if p.IsSetStatus() {
		l += bthrift.Binary.FieldBeginLength("status", thrift.STRUCT, 4)
		l += p.Status.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCondition) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetColumnName bool = false
	var issetConditionOp bool = false
	var issetConditionValues bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetColumnName = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetConditionOp = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetConditionValues = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 1000:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1000(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetColumnName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetConditionOp {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetConditionValues {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCondition[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCondition[fieldId]))
}

func (p *TCondition) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ColumnName = v

	}
	return offset, nil
}

func (p *TCondition) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ConditionOp = v

	}
	return offset, nil
}

func (p *TCondition) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.ConditionValues = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.ConditionValues = append(p.ConditionValues, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TCondition) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ColumnUniqueId = &v

	}
	return offset, nil
}

func (p *TCondition) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.MarkedByRuntimeFilter = v

	}
	return offset, nil
}

func (p *TCondition) FastReadField1000(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.CompoundType = TCompoundType(v)

	}
	return offset, nil
}

// for compatibility
func (p *TCondition) FastWrite(buf []byte) int {
	return 0
}

func (p *TCondition) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TCondition")
	if p != nil {
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField1000(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TCondition) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TCondition")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field1000Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TCondition) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "column_name", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.ColumnName)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCondition) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "condition_op", thrift.STRING, 2)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.ConditionOp)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCondition) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "condition_values", thrift.LIST, 3)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRING, 0)
	var length int
	for _, v := range p.ConditionValues {
		length++
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRING, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TCondition) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetColumnUniqueId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "column_unique_id", thrift.I32, 4)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.ColumnUniqueId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCondition) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMarkedByRuntimeFilter() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "marked_by_runtime_filter", thrift.BOOL, 5)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.MarkedByRuntimeFilter)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCondition) fastWriteField1000(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCompoundType() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "compound_type", thrift.I32, 1000)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.CompoundType))

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TCondition) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("column_name", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.ColumnName)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCondition) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("condition_op", thrift.STRING, 2)
	l += bthrift.Binary.StringLengthNocopy(p.ConditionOp)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCondition) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("condition_values", thrift.LIST, 3)
	l += bthrift.Binary.ListBeginLength(thrift.STRING, len(p.ConditionValues))
	for _, v := range p.ConditionValues {
		l += bthrift.Binary.StringLengthNocopy(v)

	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TCondition) field4Length() int {
	l := 0
	if p.IsSetColumnUniqueId() {
		l += bthrift.Binary.FieldBeginLength("column_unique_id", thrift.I32, 4)
		l += bthrift.Binary.I32Length(*p.ColumnUniqueId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCondition) field5Length() int {
	l := 0
	if p.IsSetMarkedByRuntimeFilter() {
		l += bthrift.Binary.FieldBeginLength("marked_by_runtime_filter", thrift.BOOL, 5)
		l += bthrift.Binary.BoolLength(p.MarkedByRuntimeFilter)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TCondition) field1000Length() int {
	l := 0
	if p.IsSetCompoundType() {
		l += bthrift.Binary.FieldBeginLength("compound_type", thrift.I32, 1000)
		l += bthrift.Binary.I32Length(int32(p.CompoundType))

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TExportStatusResult_) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false
	var issetState bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetState = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetState {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExportStatusResult_[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TExportStatusResult_[fieldId]))
}

func (p *TExportStatusResult_) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := status.NewTStatus()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Status = tmp
	return offset, nil
}

func (p *TExportStatusResult_) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.State = types.TExportState(v)

	}
	return offset, nil
}

func (p *TExportStatusResult_) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Files = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.Files = append(p.Files, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TExportStatusResult_) FastWrite(buf []byte) int {
	return 0
}

func (p *TExportStatusResult_) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TExportStatusResult")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TExportStatusResult_) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TExportStatusResult")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TExportStatusResult_) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "status", thrift.STRUCT, 1)
	offset += p.Status.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TExportStatusResult_) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "state", thrift.I32, 2)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.State))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TExportStatusResult_) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFiles() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "files", thrift.LIST, 3)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRING, 0)
		var length int
		for _, v := range p.Files {
			length++
			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRING, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TExportStatusResult_) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("status", thrift.STRUCT, 1)
	l += p.Status.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TExportStatusResult_) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("state", thrift.I32, 2)
	l += bthrift.Binary.I32Length(int32(p.State))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TExportStatusResult_) field3Length() int {
	l := 0
	if p.IsSetFiles() {
		l += bthrift.Binary.FieldBeginLength("files", thrift.LIST, 3)
		l += bthrift.Binary.ListBeginLength(thrift.STRING, len(p.Files))
		for _, v := range p.Files {
			l += bthrift.Binary.StringLengthNocopy(v)

		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineInstanceParams) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFragmentInstanceId bool = false
	var issetPerNodeScanRanges bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetFragmentInstanceId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPerNodeScanRanges = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetFragmentInstanceId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPerNodeScanRanges {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPipelineInstanceParams[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPipelineInstanceParams[fieldId]))
}

func (p *TPipelineInstanceParams) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTUniqueId()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.FragmentInstanceId = tmp
	return offset, nil
}

func (p *TPipelineInstanceParams) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.BuildHashTableForBroadcastJoin = v

	}
	return offset, nil
}

func (p *TPipelineInstanceParams) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.PerNodeScanRanges = make(map[types.TPlanNodeId][]*TScanRangeParams, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
		offset += l
		if err != nil {
			return offset, err
		}
		_val := make([]*TScanRangeParams, 0, size)
		for i := 0; i < size; i++ {
			_elem := NewTScanRangeParams()
			if l, err := _elem.FastRead(buf[offset:]); err != nil {
				return offset, err
			} else {
				offset += l
			}

			_val = append(_val, _elem)
		}
		if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.PerNodeScanRanges[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPipelineInstanceParams) FastReadField4(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.SenderId = &v

	}
	return offset, nil
}

func (p *TPipelineInstanceParams) FastReadField5(buf []byte) (int, error) {
	offset := 0

	tmp := NewTRuntimeFilterParams()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.RuntimeFilterParams = tmp
	return offset, nil
}

func (p *TPipelineInstanceParams) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.BackendNum = &v

	}
	return offset, nil
}

func (p *TPipelineInstanceParams) FastReadField7(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.PerNodeSharedScans = make(map[types.TPlanNodeId]bool, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val bool
		if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.PerNodeSharedScans[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPipelineInstanceParams) FastReadField8(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.TopnFilterSourceNodeIds = make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		p.TopnFilterSourceNodeIds = append(p.TopnFilterSourceNodeIds, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPipelineInstanceParams) FastReadField9(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.TopnFilterDescs = make([]*plannodes.TTopnFilterDesc, 0, size)
	for i := 0; i < size; i++ {
		_elem := plannodes.NewTTopnFilterDesc()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.TopnFilterDescs = append(p.TopnFilterDescs, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TPipelineInstanceParams) FastWrite(buf []byte) int {
	return 0
}

func (p *TPipelineInstanceParams) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TPipelineInstanceParams")
	if p != nil {
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TPipelineInstanceParams) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TPipelineInstanceParams")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TPipelineInstanceParams) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "fragment_instance_id", thrift.STRUCT, 1)
	offset += p.FragmentInstanceId.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPipelineInstanceParams) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBuildHashTableForBroadcastJoin() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "build_hash_table_for_broadcast_join", thrift.BOOL, 2)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.BuildHashTableForBroadcastJoin)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineInstanceParams) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "per_node_scan_ranges", thrift.MAP, 3)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.LIST, 0)
	var length int
	for k, v := range p.PerNodeScanRanges {
		length++

		offset += bthrift.Binary.WriteI32(buf[offset:], k)

		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range v {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.LIST, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPipelineInstanceParams) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSenderId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "sender_id", thrift.I32, 4)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.SenderId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineInstanceParams) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetRuntimeFilterParams() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "runtime_filter_params", thrift.STRUCT, 5)
		offset += p.RuntimeFilterParams.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineInstanceParams) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBackendNum() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "backend_num", thrift.I32, 6)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.BackendNum)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineInstanceParams) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPerNodeSharedScans() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "per_node_shared_scans", thrift.MAP, 7)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.BOOL, 0)
		var length int
		for k, v := range p.PerNodeSharedScans {
			length++

			offset += bthrift.Binary.WriteI32(buf[offset:], k)

			offset += bthrift.Binary.WriteBool(buf[offset:], v)

		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.BOOL, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineInstanceParams) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTopnFilterSourceNodeIds() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "topn_filter_source_node_ids", thrift.LIST, 8)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.I32, 0)
		var length int
		for _, v := range p.TopnFilterSourceNodeIds {
			length++
			offset += bthrift.Binary.WriteI32(buf[offset:], v)

		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I32, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineInstanceParams) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTopnFilterDescs() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "topn_filter_descs", thrift.LIST, 9)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.TopnFilterDescs {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineInstanceParams) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("fragment_instance_id", thrift.STRUCT, 1)
	l += p.FragmentInstanceId.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPipelineInstanceParams) field2Length() int {
	l := 0
	if p.IsSetBuildHashTableForBroadcastJoin() {
		l += bthrift.Binary.FieldBeginLength("build_hash_table_for_broadcast_join", thrift.BOOL, 2)
		l += bthrift.Binary.BoolLength(p.BuildHashTableForBroadcastJoin)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineInstanceParams) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("per_node_scan_ranges", thrift.MAP, 3)
	l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.LIST, len(p.PerNodeScanRanges))
	for k, v := range p.PerNodeScanRanges {

		l += bthrift.Binary.I32Length(k)

		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(v))
		for _, v := range v {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPipelineInstanceParams) field4Length() int {
	l := 0
	if p.IsSetSenderId() {
		l += bthrift.Binary.FieldBeginLength("sender_id", thrift.I32, 4)
		l += bthrift.Binary.I32Length(*p.SenderId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineInstanceParams) field5Length() int {
	l := 0
	if p.IsSetRuntimeFilterParams() {
		l += bthrift.Binary.FieldBeginLength("runtime_filter_params", thrift.STRUCT, 5)
		l += p.RuntimeFilterParams.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineInstanceParams) field6Length() int {
	l := 0
	if p.IsSetBackendNum() {
		l += bthrift.Binary.FieldBeginLength("backend_num", thrift.I32, 6)
		l += bthrift.Binary.I32Length(*p.BackendNum)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineInstanceParams) field7Length() int {
	l := 0
	if p.IsSetPerNodeSharedScans() {
		l += bthrift.Binary.FieldBeginLength("per_node_shared_scans", thrift.MAP, 7)
		l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.BOOL, len(p.PerNodeSharedScans))
		var tmpK types.TPlanNodeId
		var tmpV bool
		l += (bthrift.Binary.I32Length(int32(tmpK)) + bthrift.Binary.BoolLength(bool(tmpV))) * len(p.PerNodeSharedScans)
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineInstanceParams) field8Length() int {
	l := 0
	if p.IsSetTopnFilterSourceNodeIds() {
		l += bthrift.Binary.FieldBeginLength("topn_filter_source_node_ids", thrift.LIST, 8)
		l += bthrift.Binary.ListBeginLength(thrift.I32, len(p.TopnFilterSourceNodeIds))
		var tmpV int32
		l += bthrift.Binary.I32Length(int32(tmpV)) * len(p.TopnFilterSourceNodeIds)
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineInstanceParams) field9Length() int {
	l := 0
	if p.IsSetTopnFilterDescs() {
		l += bthrift.Binary.FieldBeginLength("topn_filter_descs", thrift.LIST, 9)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.TopnFilterDescs))
		for _, v := range p.TopnFilterDescs {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false
	var issetQueryId bool = false
	var issetPerExchNumSenders bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetQueryId = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetPerExchNumSenders = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField15(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField16(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField17(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField18(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField19(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField20(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField21(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField22(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 23:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField23(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 24:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField24(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 26:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField26(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 27:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField27(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 28:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField28(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 29:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField29(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 30:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField30(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 31:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField31(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 32:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField32(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 33:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField33(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 34:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField34(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 35:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField35(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 36:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField36(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 37:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField37(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 38:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField38(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 39:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField39(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 40:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField40(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 41:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField41(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 42:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField42(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 43:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField43(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 1000:
			if fieldTypeId == thrift.BOOL {
				l, err = p.FastReadField1000(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetQueryId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPerExchNumSenders {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPipelineFragmentParams[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPipelineFragmentParams[fieldId]))
}

func (p *TPipelineFragmentParams) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.ProtocolVersion = PaloInternalServiceVersion(v)

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField2(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTUniqueId()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.QueryId = tmp
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField3(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.FragmentId = &v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField4(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.PerExchNumSenders = make(map[types.TPlanNodeId]int32, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.PerExchNumSenders[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField5(buf []byte) (int, error) {
	offset := 0

	tmp := descriptors.NewTDescriptorTable()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.DescTbl = tmp
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField6(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTResourceInfo()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ResourceInfo = tmp
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField7(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.Destinations = make([]*datasinks.TPlanFragmentDestination, 0, size)
	for i := 0; i < size; i++ {
		_elem := datasinks.NewTPlanFragmentDestination()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.Destinations = append(p.Destinations, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField8(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.NumSenders = &v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField9(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.SendQueryStatisticsWithEveryBatch = &v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField10(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTNetworkAddress()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Coord = tmp
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField11(buf []byte) (int, error) {
	offset := 0

	tmp := NewTQueryGlobals()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.QueryGlobals = tmp
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField12(buf []byte) (int, error) {
	offset := 0

	tmp := NewTQueryOptions()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.QueryOptions = tmp
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField13(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ImportLabel = &v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField14(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.DbName = &v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField15(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.LoadJobId = &v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField16(buf []byte) (int, error) {
	offset := 0

	tmp := NewTLoadErrorHubInfo()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.LoadErrorHubInfo = tmp
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField17(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.FragmentNumOnHost = &v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField18(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.BackendId = &v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField19(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.NeedWaitExecutionTrigger = v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField20(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.InstancesSharingHashTable = make([]*types.TUniqueId, 0, size)
	for i := 0; i < size; i++ {
		_elem := types.NewTUniqueId()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.InstancesSharingHashTable = append(p.InstancesSharingHashTable, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField21(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.IsSimplifiedParam = v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField22(buf []byte) (int, error) {
	offset := 0

	tmp := NewTGlobalDict()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.GlobalDict = tmp
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField23(buf []byte) (int, error) {
	offset := 0

	tmp := planner.NewTPlanFragment()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Fragment = tmp
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField24(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.LocalParams = make([]*TPipelineInstanceParams, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTPipelineInstanceParams()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.LocalParams = append(p.LocalParams, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField26(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.WorkloadGroups = make([]*TPipelineWorkloadGroup, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTPipelineWorkloadGroup()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.WorkloadGroups = append(p.WorkloadGroups, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField27(buf []byte) (int, error) {
	offset := 0

	tmp := NewTTxnParams()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.TxnConf = tmp
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField28(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TableName = &v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField29(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.FileScanParams = make(map[types.TPlanNodeId]*plannodes.TFileScanRangeParams, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}
		_val := plannodes.NewTFileScanRangeParams()
		if l, err := _val.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.FileScanParams[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField30(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.GroupCommit = v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField31(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.LoadStreamPerNode = &v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField32(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TotalLoadStreams = &v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField33(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.NumLocalSink = &v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField34(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.NumBuckets = &v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField35(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.BucketSeqToInstanceIdx = make(map[int32]int32, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.BucketSeqToInstanceIdx[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField36(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.PerNodeSharedScans = make(map[types.TPlanNodeId]bool, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val bool
		if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.PerNodeSharedScans[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField37(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ParallelInstances = &v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField38(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.TotalInstances = &v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField39(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.ShuffleIdxToInstanceIdx = make(map[int32]int32, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		p.ShuffleIdxToInstanceIdx[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField40(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.IsNereids = v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField41(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.WalId = &v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField42(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.ContentLength = &v

	}
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField43(buf []byte) (int, error) {
	offset := 0

	tmp := types.NewTNetworkAddress()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.CurrentConnectFe = tmp
	return offset, nil
}

func (p *TPipelineFragmentParams) FastReadField1000(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadBool(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.IsMowTable = &v

	}
	return offset, nil
}

// for compatibility
func (p *TPipelineFragmentParams) FastWrite(buf []byte) int {
	return 0
}

func (p *TPipelineFragmentParams) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TPipelineFragmentParams")
	if p != nil {
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField15(buf[offset:], binaryWriter)
		offset += p.fastWriteField17(buf[offset:], binaryWriter)
		offset += p.fastWriteField18(buf[offset:], binaryWriter)
		offset += p.fastWriteField19(buf[offset:], binaryWriter)
		offset += p.fastWriteField21(buf[offset:], binaryWriter)
		offset += p.fastWriteField30(buf[offset:], binaryWriter)
		offset += p.fastWriteField31(buf[offset:], binaryWriter)
		offset += p.fastWriteField32(buf[offset:], binaryWriter)
		offset += p.fastWriteField33(buf[offset:], binaryWriter)
		offset += p.fastWriteField34(buf[offset:], binaryWriter)
		offset += p.fastWriteField37(buf[offset:], binaryWriter)
		offset += p.fastWriteField38(buf[offset:], binaryWriter)
		offset += p.fastWriteField40(buf[offset:], binaryWriter)
		offset += p.fastWriteField41(buf[offset:], binaryWriter)
		offset += p.fastWriteField42(buf[offset:], binaryWriter)
		offset += p.fastWriteField1000(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
		offset += p.fastWriteField16(buf[offset:], binaryWriter)
		offset += p.fastWriteField20(buf[offset:], binaryWriter)
		offset += p.fastWriteField22(buf[offset:], binaryWriter)
		offset += p.fastWriteField23(buf[offset:], binaryWriter)
		offset += p.fastWriteField24(buf[offset:], binaryWriter)
		offset += p.fastWriteField26(buf[offset:], binaryWriter)
		offset += p.fastWriteField27(buf[offset:], binaryWriter)
		offset += p.fastWriteField28(buf[offset:], binaryWriter)
		offset += p.fastWriteField29(buf[offset:], binaryWriter)
		offset += p.fastWriteField35(buf[offset:], binaryWriter)
		offset += p.fastWriteField36(buf[offset:], binaryWriter)
		offset += p.fastWriteField39(buf[offset:], binaryWriter)
		offset += p.fastWriteField43(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TPipelineFragmentParams) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TPipelineFragmentParams")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
		l += p.field15Length()
		l += p.field16Length()
		l += p.field17Length()
		l += p.field18Length()
		l += p.field19Length()
		l += p.field20Length()
		l += p.field21Length()
		l += p.field22Length()
		l += p.field23Length()
		l += p.field24Length()
		l += p.field26Length()
		l += p.field27Length()
		l += p.field28Length()
		l += p.field29Length()
		l += p.field30Length()
		l += p.field31Length()
		l += p.field32Length()
		l += p.field33Length()
		l += p.field34Length()
		l += p.field35Length()
		l += p.field36Length()
		l += p.field37Length()
		l += p.field38Length()
		l += p.field39Length()
		l += p.field40Length()
		l += p.field41Length()
		l += p.field42Length()
		l += p.field43Length()
		l += p.field1000Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TPipelineFragmentParams) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "protocol_version", thrift.I32, 1)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.ProtocolVersion))

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "query_id", thrift.STRUCT, 2)
	offset += p.QueryId.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFragmentId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "fragment_id", thrift.I32, 3)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.FragmentId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "per_exch_num_senders", thrift.MAP, 4)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I32, 0)
	var length int
	for k, v := range p.PerExchNumSenders {
		length++

		offset += bthrift.Binary.WriteI32(buf[offset:], k)

		offset += bthrift.Binary.WriteI32(buf[offset:], v)

	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.I32, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDescTbl() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "desc_tbl", thrift.STRUCT, 5)
		offset += p.DescTbl.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetResourceInfo() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "resource_info", thrift.STRUCT, 6)
		offset += p.ResourceInfo.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "destinations", thrift.LIST, 7)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.Destinations {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetNumSenders() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "num_senders", thrift.I32, 8)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.NumSenders)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSendQueryStatisticsWithEveryBatch() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "send_query_statistics_with_every_batch", thrift.BOOL, 9)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.SendQueryStatisticsWithEveryBatch)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCoord() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "coord", thrift.STRUCT, 10)
		offset += p.Coord.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetQueryGlobals() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "query_globals", thrift.STRUCT, 11)
		offset += p.QueryGlobals.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetQueryOptions() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "query_options", thrift.STRUCT, 12)
		offset += p.QueryOptions.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetImportLabel() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "import_label", thrift.STRING, 13)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.ImportLabel)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDbName() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "db_name", thrift.STRING, 14)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.DbName)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField15(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetLoadJobId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "load_job_id", thrift.I64, 15)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.LoadJobId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField16(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetLoadErrorHubInfo() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "load_error_hub_info", thrift.STRUCT, 16)
		offset += p.LoadErrorHubInfo.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField17(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFragmentNumOnHost() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "fragment_num_on_host", thrift.I32, 17)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.FragmentNumOnHost)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField18(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBackendId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "backend_id", thrift.I64, 18)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.BackendId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField19(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetNeedWaitExecutionTrigger() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "need_wait_execution_trigger", thrift.BOOL, 19)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.NeedWaitExecutionTrigger)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField20(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetInstancesSharingHashTable() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "instances_sharing_hash_table", thrift.LIST, 20)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.InstancesSharingHashTable {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField21(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsSimplifiedParam() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_simplified_param", thrift.BOOL, 21)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.IsSimplifiedParam)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField22(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetGlobalDict() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "global_dict", thrift.STRUCT, 22)
		offset += p.GlobalDict.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField23(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFragment() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "fragment", thrift.STRUCT, 23)
		offset += p.Fragment.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField24(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "local_params", thrift.LIST, 24)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.LocalParams {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField26(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetWorkloadGroups() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "workload_groups", thrift.LIST, 26)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.WorkloadGroups {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField27(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTxnConf() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "txn_conf", thrift.STRUCT, 27)
		offset += p.TxnConf.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField28(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTableName() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "table_name", thrift.STRING, 28)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.TableName)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField29(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetFileScanParams() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "file_scan_params", thrift.MAP, 29)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.STRUCT, 0)
		var length int
		for k, v := range p.FileScanParams {
			length++

			offset += bthrift.Binary.WriteI32(buf[offset:], k)

			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.STRUCT, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField30(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetGroupCommit() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "group_commit", thrift.BOOL, 30)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.GroupCommit)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField31(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetLoadStreamPerNode() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "load_stream_per_node", thrift.I32, 31)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.LoadStreamPerNode)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField32(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTotalLoadStreams() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "total_load_streams", thrift.I32, 32)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.TotalLoadStreams)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField33(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetNumLocalSink() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "num_local_sink", thrift.I32, 33)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.NumLocalSink)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField34(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetNumBuckets() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "num_buckets", thrift.I32, 34)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.NumBuckets)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField35(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBucketSeqToInstanceIdx() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "bucket_seq_to_instance_idx", thrift.MAP, 35)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I32, 0)
		var length int
		for k, v := range p.BucketSeqToInstanceIdx {
			length++

			offset += bthrift.Binary.WriteI32(buf[offset:], k)

			offset += bthrift.Binary.WriteI32(buf[offset:], v)

		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.I32, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField36(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetPerNodeSharedScans() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "per_node_shared_scans", thrift.MAP, 36)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.BOOL, 0)
		var length int
		for k, v := range p.PerNodeSharedScans {
			length++

			offset += bthrift.Binary.WriteI32(buf[offset:], k)

			offset += bthrift.Binary.WriteBool(buf[offset:], v)

		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.BOOL, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField37(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetParallelInstances() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "parallel_instances", thrift.I32, 37)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.ParallelInstances)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField38(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetTotalInstances() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "total_instances", thrift.I32, 38)
		offset += bthrift.Binary.WriteI32(buf[offset:], *p.TotalInstances)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField39(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetShuffleIdxToInstanceIdx() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "shuffle_idx_to_instance_idx", thrift.MAP, 39)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I32, 0)
		var length int
		for k, v := range p.ShuffleIdxToInstanceIdx {
			length++

			offset += bthrift.Binary.WriteI32(buf[offset:], k)

			offset += bthrift.Binary.WriteI32(buf[offset:], v)

		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.I32, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField40(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsNereids() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_nereids", thrift.BOOL, 40)
		offset += bthrift.Binary.WriteBool(buf[offset:], p.IsNereids)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField41(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetWalId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "wal_id", thrift.I64, 41)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.WalId)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField42(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetContentLength() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "content_length", thrift.I64, 42)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.ContentLength)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField43(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetCurrentConnectFe() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "current_connect_fe", thrift.STRUCT, 43)
		offset += p.CurrentConnectFe.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) fastWriteField1000(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetIsMowTable() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "is_mow_table", thrift.BOOL, 1000)
		offset += bthrift.Binary.WriteBool(buf[offset:], *p.IsMowTable)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParams) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("protocol_version", thrift.I32, 1)
	l += bthrift.Binary.I32Length(int32(p.ProtocolVersion))

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPipelineFragmentParams) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("query_id", thrift.STRUCT, 2)
	l += p.QueryId.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPipelineFragmentParams) field3Length() int {
	l := 0
	if p.IsSetFragmentId() {
		l += bthrift.Binary.FieldBeginLength("fragment_id", thrift.I32, 3)
		l += bthrift.Binary.I32Length(*p.FragmentId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("per_exch_num_senders", thrift.MAP, 4)
	l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I32, len(p.PerExchNumSenders))
	var tmpK types.TPlanNodeId
	var tmpV int32
	l += (bthrift.Binary.I32Length(int32(tmpK)) + bthrift.Binary.I32Length(int32(tmpV))) * len(p.PerExchNumSenders)
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPipelineFragmentParams) field5Length() int {
	l := 0
	if p.IsSetDescTbl() {
		l += bthrift.Binary.FieldBeginLength("desc_tbl", thrift.STRUCT, 5)
		l += p.DescTbl.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field6Length() int {
	l := 0
	if p.IsSetResourceInfo() {
		l += bthrift.Binary.FieldBeginLength("resource_info", thrift.STRUCT, 6)
		l += p.ResourceInfo.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field7Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("destinations", thrift.LIST, 7)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.Destinations))
	for _, v := range p.Destinations {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPipelineFragmentParams) field8Length() int {
	l := 0
	if p.IsSetNumSenders() {
		l += bthrift.Binary.FieldBeginLength("num_senders", thrift.I32, 8)
		l += bthrift.Binary.I32Length(*p.NumSenders)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field9Length() int {
	l := 0
	if p.IsSetSendQueryStatisticsWithEveryBatch() {
		l += bthrift.Binary.FieldBeginLength("send_query_statistics_with_every_batch", thrift.BOOL, 9)
		l += bthrift.Binary.BoolLength(*p.SendQueryStatisticsWithEveryBatch)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field10Length() int {
	l := 0
	if p.IsSetCoord() {
		l += bthrift.Binary.FieldBeginLength("coord", thrift.STRUCT, 10)
		l += p.Coord.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field11Length() int {
	l := 0
	if p.IsSetQueryGlobals() {
		l += bthrift.Binary.FieldBeginLength("query_globals", thrift.STRUCT, 11)
		l += p.QueryGlobals.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field12Length() int {
	l := 0
	if p.IsSetQueryOptions() {
		l += bthrift.Binary.FieldBeginLength("query_options", thrift.STRUCT, 12)
		l += p.QueryOptions.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field13Length() int {
	l := 0
	if p.IsSetImportLabel() {
		l += bthrift.Binary.FieldBeginLength("import_label", thrift.STRING, 13)
		l += bthrift.Binary.StringLengthNocopy(*p.ImportLabel)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field14Length() int {
	l := 0
	if p.IsSetDbName() {
		l += bthrift.Binary.FieldBeginLength("db_name", thrift.STRING, 14)
		l += bthrift.Binary.StringLengthNocopy(*p.DbName)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field15Length() int {
	l := 0
	if p.IsSetLoadJobId() {
		l += bthrift.Binary.FieldBeginLength("load_job_id", thrift.I64, 15)
		l += bthrift.Binary.I64Length(*p.LoadJobId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field16Length() int {
	l := 0
	if p.IsSetLoadErrorHubInfo() {
		l += bthrift.Binary.FieldBeginLength("load_error_hub_info", thrift.STRUCT, 16)
		l += p.LoadErrorHubInfo.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field17Length() int {
	l := 0
	if p.IsSetFragmentNumOnHost() {
		l += bthrift.Binary.FieldBeginLength("fragment_num_on_host", thrift.I32, 17)
		l += bthrift.Binary.I32Length(*p.FragmentNumOnHost)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field18Length() int {
	l := 0
	if p.IsSetBackendId() {
		l += bthrift.Binary.FieldBeginLength("backend_id", thrift.I64, 18)
		l += bthrift.Binary.I64Length(*p.BackendId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field19Length() int {
	l := 0
	if p.IsSetNeedWaitExecutionTrigger() {
		l += bthrift.Binary.FieldBeginLength("need_wait_execution_trigger", thrift.BOOL, 19)
		l += bthrift.Binary.BoolLength(p.NeedWaitExecutionTrigger)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field20Length() int {
	l := 0
	if p.IsSetInstancesSharingHashTable() {
		l += bthrift.Binary.FieldBeginLength("instances_sharing_hash_table", thrift.LIST, 20)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.InstancesSharingHashTable))
		for _, v := range p.InstancesSharingHashTable {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field21Length() int {
	l := 0
	if p.IsSetIsSimplifiedParam() {
		l += bthrift.Binary.FieldBeginLength("is_simplified_param", thrift.BOOL, 21)
		l += bthrift.Binary.BoolLength(p.IsSimplifiedParam)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field22Length() int {
	l := 0
	if p.IsSetGlobalDict() {
		l += bthrift.Binary.FieldBeginLength("global_dict", thrift.STRUCT, 22)
		l += p.GlobalDict.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field23Length() int {
	l := 0
	if p.IsSetFragment() {
		l += bthrift.Binary.FieldBeginLength("fragment", thrift.STRUCT, 23)
		l += p.Fragment.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field24Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("local_params", thrift.LIST, 24)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.LocalParams))
	for _, v := range p.LocalParams {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *TPipelineFragmentParams) field26Length() int {
	l := 0
	if p.IsSetWorkloadGroups() {
		l += bthrift.Binary.FieldBeginLength("workload_groups", thrift.LIST, 26)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.WorkloadGroups))
		for _, v := range p.WorkloadGroups {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field27Length() int {
	l := 0
	if p.IsSetTxnConf() {
		l += bthrift.Binary.FieldBeginLength("txn_conf", thrift.STRUCT, 27)
		l += p.TxnConf.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field28Length() int {
	l := 0
	if p.IsSetTableName() {
		l += bthrift.Binary.FieldBeginLength("table_name", thrift.STRING, 28)
		l += bthrift.Binary.StringLengthNocopy(*p.TableName)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field29Length() int {
	l := 0
	if p.IsSetFileScanParams() {
		l += bthrift.Binary.FieldBeginLength("file_scan_params", thrift.MAP, 29)
		l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.STRUCT, len(p.FileScanParams))
		for k, v := range p.FileScanParams {

			l += bthrift.Binary.I32Length(k)

			l += v.BLength()
		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field30Length() int {
	l := 0
	if p.IsSetGroupCommit() {
		l += bthrift.Binary.FieldBeginLength("group_commit", thrift.BOOL, 30)
		l += bthrift.Binary.BoolLength(p.GroupCommit)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field31Length() int {
	l := 0
	if p.IsSetLoadStreamPerNode() {
		l += bthrift.Binary.FieldBeginLength("load_stream_per_node", thrift.I32, 31)
		l += bthrift.Binary.I32Length(*p.LoadStreamPerNode)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field32Length() int {
	l := 0
	if p.IsSetTotalLoadStreams() {
		l += bthrift.Binary.FieldBeginLength("total_load_streams", thrift.I32, 32)
		l += bthrift.Binary.I32Length(*p.TotalLoadStreams)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field33Length() int {
	l := 0
	if p.IsSetNumLocalSink() {
		l += bthrift.Binary.FieldBeginLength("num_local_sink", thrift.I32, 33)
		l += bthrift.Binary.I32Length(*p.NumLocalSink)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field34Length() int {
	l := 0
	if p.IsSetNumBuckets() {
		l += bthrift.Binary.FieldBeginLength("num_buckets", thrift.I32, 34)
		l += bthrift.Binary.I32Length(*p.NumBuckets)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field35Length() int {
	l := 0
	if p.IsSetBucketSeqToInstanceIdx() {
		l += bthrift.Binary.FieldBeginLength("bucket_seq_to_instance_idx", thrift.MAP, 35)
		l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I32, len(p.BucketSeqToInstanceIdx))
		var tmpK int32
		var tmpV int32
		l += (bthrift.Binary.I32Length(int32(tmpK)) + bthrift.Binary.I32Length(int32(tmpV))) * len(p.BucketSeqToInstanceIdx)
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field36Length() int {
	l := 0
	if p.IsSetPerNodeSharedScans() {
		l += bthrift.Binary.FieldBeginLength("per_node_shared_scans", thrift.MAP, 36)
		l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.BOOL, len(p.PerNodeSharedScans))
		var tmpK types.TPlanNodeId
		var tmpV bool
		l += (bthrift.Binary.I32Length(int32(tmpK)) + bthrift.Binary.BoolLength(bool(tmpV))) * len(p.PerNodeSharedScans)
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field37Length() int {
	l := 0
	if p.IsSetParallelInstances() {
		l += bthrift.Binary.FieldBeginLength("parallel_instances", thrift.I32, 37)
		l += bthrift.Binary.I32Length(*p.ParallelInstances)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field38Length() int {
	l := 0
	if p.IsSetTotalInstances() {
		l += bthrift.Binary.FieldBeginLength("total_instances", thrift.I32, 38)
		l += bthrift.Binary.I32Length(*p.TotalInstances)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field39Length() int {
	l := 0
	if p.IsSetShuffleIdxToInstanceIdx() {
		l += bthrift.Binary.FieldBeginLength("shuffle_idx_to_instance_idx", thrift.MAP, 39)
		l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I32, len(p.ShuffleIdxToInstanceIdx))
		var tmpK int32
		var tmpV int32
		l += (bthrift.Binary.I32Length(int32(tmpK)) + bthrift.Binary.I32Length(int32(tmpV))) * len(p.ShuffleIdxToInstanceIdx)
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field40Length() int {
	l := 0
	if p.IsSetIsNereids() {
		l += bthrift.Binary.FieldBeginLength("is_nereids", thrift.BOOL, 40)
		l += bthrift.Binary.BoolLength(p.IsNereids)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field41Length() int {
	l := 0
	if p.IsSetWalId() {
		l += bthrift.Binary.FieldBeginLength("wal_id", thrift.I64, 41)
		l += bthrift.Binary.I64Length(*p.WalId)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field42Length() int {
	l := 0
	if p.IsSetContentLength() {
		l += bthrift.Binary.FieldBeginLength("content_length", thrift.I64, 42)
		l += bthrift.Binary.I64Length(*p.ContentLength)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field43Length() int {
	l := 0
	if p.IsSetCurrentConnectFe() {
		l += bthrift.Binary.FieldBeginLength("current_connect_fe", thrift.STRUCT, 43)
		l += p.CurrentConnectFe.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParams) field1000Length() int {
	l := 0
	if p.IsSetIsMowTable() {
		l += bthrift.Binary.FieldBeginLength("is_mow_table", thrift.BOOL, 1000)
		l += bthrift.Binary.BoolLength(*p.IsMowTable)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *TPipelineFragmentParamsList) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPipelineFragmentParamsList[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TPipelineFragmentParamsList) FastReadField1(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.ParamsList = make([]*TPipelineFragmentParams, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTPipelineFragmentParams()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.ParamsList = append(p.ParamsList, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *TPipelineFragmentParamsList) FastWrite(buf []byte) int {
	return 0
}

func (p *TPipelineFragmentParamsList) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "TPipelineFragmentParamsList")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *TPipelineFragmentParamsList) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("TPipelineFragmentParamsList")
	if p != nil {
		l += p.field1Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *TPipelineFragmentParamsList) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetParamsList() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "params_list", thrift.LIST, 1)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.ParamsList {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *TPipelineFragmentParamsList) field1Length() int {
	l := 0
	if p.IsSetParamsList() {
		l += bthrift.Binary.FieldBeginLength("params_list", thrift.LIST, 1)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.ParamsList))
		for _, v := range p.ParamsList {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}
