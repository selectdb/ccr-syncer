// Code generated by thriftgo (0.3.13). DO NOT EDIT.

package palointernalservice

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/data"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/datasinks"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/descriptors"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/exprs"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/planner"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/plannodes"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/status"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/types"
	"strings"
)

const (
	NUM_NODES_ALL = 0

	NUM_NODES_ALL_RACKS = -1

	INVALID_PLAN_NODE_ID = -1

	DEFAULT_PARTITION_ID = -1
)

type TQueryType int64

const (
	TQueryType_SELECT   TQueryType = 0
	TQueryType_LOAD     TQueryType = 1
	TQueryType_EXTERNAL TQueryType = 2
)

func (p TQueryType) String() string {
	switch p {
	case TQueryType_SELECT:
		return "SELECT"
	case TQueryType_LOAD:
		return "LOAD"
	case TQueryType_EXTERNAL:
		return "EXTERNAL"
	}
	return "<UNSET>"
}

func TQueryTypeFromString(s string) (TQueryType, error) {
	switch s {
	case "SELECT":
		return TQueryType_SELECT, nil
	case "LOAD":
		return TQueryType_LOAD, nil
	case "EXTERNAL":
		return TQueryType_EXTERNAL, nil
	}
	return TQueryType(0), fmt.Errorf("not a valid TQueryType string")
}

func TQueryTypePtr(v TQueryType) *TQueryType { return &v }
func (p *TQueryType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TQueryType(result.Int64)
	return
}

func (p *TQueryType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TErrorHubType int64

const (
	TErrorHubType_MYSQL     TErrorHubType = 0
	TErrorHubType_BROKER    TErrorHubType = 1
	TErrorHubType_NULL_TYPE TErrorHubType = 2
)

func (p TErrorHubType) String() string {
	switch p {
	case TErrorHubType_MYSQL:
		return "MYSQL"
	case TErrorHubType_BROKER:
		return "BROKER"
	case TErrorHubType_NULL_TYPE:
		return "NULL_TYPE"
	}
	return "<UNSET>"
}

func TErrorHubTypeFromString(s string) (TErrorHubType, error) {
	switch s {
	case "MYSQL":
		return TErrorHubType_MYSQL, nil
	case "BROKER":
		return TErrorHubType_BROKER, nil
	case "NULL_TYPE":
		return TErrorHubType_NULL_TYPE, nil
	}
	return TErrorHubType(0), fmt.Errorf("not a valid TErrorHubType string")
}

func TErrorHubTypePtr(v TErrorHubType) *TErrorHubType { return &v }
func (p *TErrorHubType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TErrorHubType(result.Int64)
	return
}

func (p *TErrorHubType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TPrefetchMode int64

const (
	TPrefetchMode_NONE      TPrefetchMode = 0
	TPrefetchMode_HT_BUCKET TPrefetchMode = 1
)

func (p TPrefetchMode) String() string {
	switch p {
	case TPrefetchMode_NONE:
		return "NONE"
	case TPrefetchMode_HT_BUCKET:
		return "HT_BUCKET"
	}
	return "<UNSET>"
}

func TPrefetchModeFromString(s string) (TPrefetchMode, error) {
	switch s {
	case "NONE":
		return TPrefetchMode_NONE, nil
	case "HT_BUCKET":
		return TPrefetchMode_HT_BUCKET, nil
	}
	return TPrefetchMode(0), fmt.Errorf("not a valid TPrefetchMode string")
}

func TPrefetchModePtr(v TPrefetchMode) *TPrefetchMode { return &v }
func (p *TPrefetchMode) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TPrefetchMode(result.Int64)
	return
}

func (p *TPrefetchMode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type PaloInternalServiceVersion int64

const (
	PaloInternalServiceVersion_V1 PaloInternalServiceVersion = 0
)

func (p PaloInternalServiceVersion) String() string {
	switch p {
	case PaloInternalServiceVersion_V1:
		return "V1"
	}
	return "<UNSET>"
}

func PaloInternalServiceVersionFromString(s string) (PaloInternalServiceVersion, error) {
	switch s {
	case "V1":
		return PaloInternalServiceVersion_V1, nil
	}
	return PaloInternalServiceVersion(0), fmt.Errorf("not a valid PaloInternalServiceVersion string")
}

func PaloInternalServiceVersionPtr(v PaloInternalServiceVersion) *PaloInternalServiceVersion {
	return &v
}
func (p *PaloInternalServiceVersion) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = PaloInternalServiceVersion(result.Int64)
	return
}

func (p *PaloInternalServiceVersion) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TCompoundType int64

const (
	TCompoundType_UNKNOWN TCompoundType = 0
	TCompoundType_AND     TCompoundType = 1
	TCompoundType_OR      TCompoundType = 2
	TCompoundType_NOT     TCompoundType = 3
)

func (p TCompoundType) String() string {
	switch p {
	case TCompoundType_UNKNOWN:
		return "UNKNOWN"
	case TCompoundType_AND:
		return "AND"
	case TCompoundType_OR:
		return "OR"
	case TCompoundType_NOT:
		return "NOT"
	}
	return "<UNSET>"
}

func TCompoundTypeFromString(s string) (TCompoundType, error) {
	switch s {
	case "UNKNOWN":
		return TCompoundType_UNKNOWN, nil
	case "AND":
		return TCompoundType_AND, nil
	case "OR":
		return TCompoundType_OR, nil
	case "NOT":
		return TCompoundType_NOT, nil
	}
	return TCompoundType(0), fmt.Errorf("not a valid TCompoundType string")
}

func TCompoundTypePtr(v TCompoundType) *TCompoundType { return &v }
func (p *TCompoundType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TCompoundType(result.Int64)
	return
}

func (p *TCompoundType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TMysqlErrorHubInfo struct {
	Host   string `thrift:"host,1,required" frugal:"1,required,string" json:"host"`
	Port   int32  `thrift:"port,2,required" frugal:"2,required,i32" json:"port"`
	User   string `thrift:"user,3,required" frugal:"3,required,string" json:"user"`
	Passwd string `thrift:"passwd,4,required" frugal:"4,required,string" json:"passwd"`
	Db     string `thrift:"db,5,required" frugal:"5,required,string" json:"db"`
	Table  string `thrift:"table,6,required" frugal:"6,required,string" json:"table"`
}

func NewTMysqlErrorHubInfo() *TMysqlErrorHubInfo {
	return &TMysqlErrorHubInfo{}
}

func (p *TMysqlErrorHubInfo) InitDefault() {
}

func (p *TMysqlErrorHubInfo) GetHost() (v string) {
	return p.Host
}

func (p *TMysqlErrorHubInfo) GetPort() (v int32) {
	return p.Port
}

func (p *TMysqlErrorHubInfo) GetUser() (v string) {
	return p.User
}

func (p *TMysqlErrorHubInfo) GetPasswd() (v string) {
	return p.Passwd
}

func (p *TMysqlErrorHubInfo) GetDb() (v string) {
	return p.Db
}

func (p *TMysqlErrorHubInfo) GetTable() (v string) {
	return p.Table
}
func (p *TMysqlErrorHubInfo) SetHost(val string) {
	p.Host = val
}
func (p *TMysqlErrorHubInfo) SetPort(val int32) {
	p.Port = val
}
func (p *TMysqlErrorHubInfo) SetUser(val string) {
	p.User = val
}
func (p *TMysqlErrorHubInfo) SetPasswd(val string) {
	p.Passwd = val
}
func (p *TMysqlErrorHubInfo) SetDb(val string) {
	p.Db = val
}
func (p *TMysqlErrorHubInfo) SetTable(val string) {
	p.Table = val
}

var fieldIDToName_TMysqlErrorHubInfo = map[int16]string{
	1: "host",
	2: "port",
	3: "user",
	4: "passwd",
	5: "db",
	6: "table",
}

func (p *TMysqlErrorHubInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetHost bool = false
	var issetPort bool = false
	var issetUser bool = false
	var issetPasswd bool = false
	var issetDb bool = false
	var issetTable bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetHost = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPort = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetUser = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPasswd = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetDb = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetTable = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetHost {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPort {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetUser {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPasswd {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetDb {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetTable {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TMysqlErrorHubInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TMysqlErrorHubInfo[fieldId]))
}

func (p *TMysqlErrorHubInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Host = _field
	return nil
}
func (p *TMysqlErrorHubInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Port = _field
	return nil
}
func (p *TMysqlErrorHubInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.User = _field
	return nil
}
func (p *TMysqlErrorHubInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Passwd = _field
	return nil
}
func (p *TMysqlErrorHubInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Db = _field
	return nil
}
func (p *TMysqlErrorHubInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Table = _field
	return nil
}

func (p *TMysqlErrorHubInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TMysqlErrorHubInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TMysqlErrorHubInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Host); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TMysqlErrorHubInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Port); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TMysqlErrorHubInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.User); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TMysqlErrorHubInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Passwd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TMysqlErrorHubInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("db", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Db); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TMysqlErrorHubInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("table", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Table); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TMysqlErrorHubInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMysqlErrorHubInfo(%+v)", *p)

}

func (p *TMysqlErrorHubInfo) DeepEqual(ano *TMysqlErrorHubInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Host) {
		return false
	}
	if !p.Field2DeepEqual(ano.Port) {
		return false
	}
	if !p.Field3DeepEqual(ano.User) {
		return false
	}
	if !p.Field4DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field5DeepEqual(ano.Db) {
		return false
	}
	if !p.Field6DeepEqual(ano.Table) {
		return false
	}
	return true
}

func (p *TMysqlErrorHubInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Host, src) != 0 {
		return false
	}
	return true
}
func (p *TMysqlErrorHubInfo) Field2DeepEqual(src int32) bool {

	if p.Port != src {
		return false
	}
	return true
}
func (p *TMysqlErrorHubInfo) Field3DeepEqual(src string) bool {

	if strings.Compare(p.User, src) != 0 {
		return false
	}
	return true
}
func (p *TMysqlErrorHubInfo) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Passwd, src) != 0 {
		return false
	}
	return true
}
func (p *TMysqlErrorHubInfo) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Db, src) != 0 {
		return false
	}
	return true
}
func (p *TMysqlErrorHubInfo) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Table, src) != 0 {
		return false
	}
	return true
}

type TBrokerErrorHubInfo struct {
	BrokerAddr *types.TNetworkAddress `thrift:"broker_addr,1,required" frugal:"1,required,types.TNetworkAddress" json:"broker_addr"`
	Path       string                 `thrift:"path,2,required" frugal:"2,required,string" json:"path"`
	Prop       map[string]string      `thrift:"prop,3,required" frugal:"3,required,map<string:string>" json:"prop"`
}

func NewTBrokerErrorHubInfo() *TBrokerErrorHubInfo {
	return &TBrokerErrorHubInfo{}
}

func (p *TBrokerErrorHubInfo) InitDefault() {
}

var TBrokerErrorHubInfo_BrokerAddr_DEFAULT *types.TNetworkAddress

func (p *TBrokerErrorHubInfo) GetBrokerAddr() (v *types.TNetworkAddress) {
	if !p.IsSetBrokerAddr() {
		return TBrokerErrorHubInfo_BrokerAddr_DEFAULT
	}
	return p.BrokerAddr
}

func (p *TBrokerErrorHubInfo) GetPath() (v string) {
	return p.Path
}

func (p *TBrokerErrorHubInfo) GetProp() (v map[string]string) {
	return p.Prop
}
func (p *TBrokerErrorHubInfo) SetBrokerAddr(val *types.TNetworkAddress) {
	p.BrokerAddr = val
}
func (p *TBrokerErrorHubInfo) SetPath(val string) {
	p.Path = val
}
func (p *TBrokerErrorHubInfo) SetProp(val map[string]string) {
	p.Prop = val
}

var fieldIDToName_TBrokerErrorHubInfo = map[int16]string{
	1: "broker_addr",
	2: "path",
	3: "prop",
}

func (p *TBrokerErrorHubInfo) IsSetBrokerAddr() bool {
	return p.BrokerAddr != nil
}

func (p *TBrokerErrorHubInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBrokerAddr bool = false
	var issetPath bool = false
	var issetProp bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBrokerAddr = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPath = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetProp = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBrokerAddr {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPath {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetProp {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TBrokerErrorHubInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TBrokerErrorHubInfo[fieldId]))
}

func (p *TBrokerErrorHubInfo) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BrokerAddr = _field
	return nil
}
func (p *TBrokerErrorHubInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Path = _field
	return nil
}
func (p *TBrokerErrorHubInfo) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Prop = _field
	return nil
}

func (p *TBrokerErrorHubInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TBrokerErrorHubInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TBrokerErrorHubInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("broker_addr", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BrokerAddr.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TBrokerErrorHubInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("path", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Path); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TBrokerErrorHubInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("prop", thrift.MAP, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Prop)); err != nil {
		return err
	}
	for k, v := range p.Prop {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TBrokerErrorHubInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBrokerErrorHubInfo(%+v)", *p)

}

func (p *TBrokerErrorHubInfo) DeepEqual(ano *TBrokerErrorHubInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BrokerAddr) {
		return false
	}
	if !p.Field2DeepEqual(ano.Path) {
		return false
	}
	if !p.Field3DeepEqual(ano.Prop) {
		return false
	}
	return true
}

func (p *TBrokerErrorHubInfo) Field1DeepEqual(src *types.TNetworkAddress) bool {

	if !p.BrokerAddr.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TBrokerErrorHubInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Path, src) != 0 {
		return false
	}
	return true
}
func (p *TBrokerErrorHubInfo) Field3DeepEqual(src map[string]string) bool {

	if len(p.Prop) != len(src) {
		return false
	}
	for k, v := range p.Prop {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type TLoadErrorHubInfo struct {
	Type       TErrorHubType        `thrift:"type,1,required" frugal:"1,required,TErrorHubType" json:"type"`
	MysqlInfo  *TMysqlErrorHubInfo  `thrift:"mysql_info,2,optional" frugal:"2,optional,TMysqlErrorHubInfo" json:"mysql_info,omitempty"`
	BrokerInfo *TBrokerErrorHubInfo `thrift:"broker_info,3,optional" frugal:"3,optional,TBrokerErrorHubInfo" json:"broker_info,omitempty"`
}

func NewTLoadErrorHubInfo() *TLoadErrorHubInfo {
	return &TLoadErrorHubInfo{

		Type: TErrorHubType_NULL_TYPE,
	}
}

func (p *TLoadErrorHubInfo) InitDefault() {
	p.Type = TErrorHubType_NULL_TYPE
}

func (p *TLoadErrorHubInfo) GetType() (v TErrorHubType) {
	return p.Type
}

var TLoadErrorHubInfo_MysqlInfo_DEFAULT *TMysqlErrorHubInfo

func (p *TLoadErrorHubInfo) GetMysqlInfo() (v *TMysqlErrorHubInfo) {
	if !p.IsSetMysqlInfo() {
		return TLoadErrorHubInfo_MysqlInfo_DEFAULT
	}
	return p.MysqlInfo
}

var TLoadErrorHubInfo_BrokerInfo_DEFAULT *TBrokerErrorHubInfo

func (p *TLoadErrorHubInfo) GetBrokerInfo() (v *TBrokerErrorHubInfo) {
	if !p.IsSetBrokerInfo() {
		return TLoadErrorHubInfo_BrokerInfo_DEFAULT
	}
	return p.BrokerInfo
}
func (p *TLoadErrorHubInfo) SetType(val TErrorHubType) {
	p.Type = val
}
func (p *TLoadErrorHubInfo) SetMysqlInfo(val *TMysqlErrorHubInfo) {
	p.MysqlInfo = val
}
func (p *TLoadErrorHubInfo) SetBrokerInfo(val *TBrokerErrorHubInfo) {
	p.BrokerInfo = val
}

var fieldIDToName_TLoadErrorHubInfo = map[int16]string{
	1: "type",
	2: "mysql_info",
	3: "broker_info",
}

func (p *TLoadErrorHubInfo) IsSetMysqlInfo() bool {
	return p.MysqlInfo != nil
}

func (p *TLoadErrorHubInfo) IsSetBrokerInfo() bool {
	return p.BrokerInfo != nil
}

func (p *TLoadErrorHubInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TLoadErrorHubInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TLoadErrorHubInfo[fieldId]))
}

func (p *TLoadErrorHubInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field TErrorHubType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TErrorHubType(v)
	}
	p.Type = _field
	return nil
}
func (p *TLoadErrorHubInfo) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTMysqlErrorHubInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MysqlInfo = _field
	return nil
}
func (p *TLoadErrorHubInfo) ReadField3(iprot thrift.TProtocol) error {
	_field := NewTBrokerErrorHubInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BrokerInfo = _field
	return nil
}

func (p *TLoadErrorHubInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TLoadErrorHubInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TLoadErrorHubInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TLoadErrorHubInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMysqlInfo() {
		if err = oprot.WriteFieldBegin("mysql_info", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MysqlInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TLoadErrorHubInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBrokerInfo() {
		if err = oprot.WriteFieldBegin("broker_info", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BrokerInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TLoadErrorHubInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TLoadErrorHubInfo(%+v)", *p)

}

func (p *TLoadErrorHubInfo) DeepEqual(ano *TLoadErrorHubInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.MysqlInfo) {
		return false
	}
	if !p.Field3DeepEqual(ano.BrokerInfo) {
		return false
	}
	return true
}

func (p *TLoadErrorHubInfo) Field1DeepEqual(src TErrorHubType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *TLoadErrorHubInfo) Field2DeepEqual(src *TMysqlErrorHubInfo) bool {

	if !p.MysqlInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TLoadErrorHubInfo) Field3DeepEqual(src *TBrokerErrorHubInfo) bool {

	if !p.BrokerInfo.DeepEqual(src) {
		return false
	}
	return true
}

type TResourceLimit struct {
	CpuLimit *int32 `thrift:"cpu_limit,1,optional" frugal:"1,optional,i32" json:"cpu_limit,omitempty"`
}

func NewTResourceLimit() *TResourceLimit {
	return &TResourceLimit{}
}

func (p *TResourceLimit) InitDefault() {
}

var TResourceLimit_CpuLimit_DEFAULT int32

func (p *TResourceLimit) GetCpuLimit() (v int32) {
	if !p.IsSetCpuLimit() {
		return TResourceLimit_CpuLimit_DEFAULT
	}
	return *p.CpuLimit
}
func (p *TResourceLimit) SetCpuLimit(val *int32) {
	p.CpuLimit = val
}

var fieldIDToName_TResourceLimit = map[int16]string{
	1: "cpu_limit",
}

func (p *TResourceLimit) IsSetCpuLimit() bool {
	return p.CpuLimit != nil
}

func (p *TResourceLimit) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TResourceLimit[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TResourceLimit) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CpuLimit = _field
	return nil
}

func (p *TResourceLimit) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TResourceLimit"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TResourceLimit) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpuLimit() {
		if err = oprot.WriteFieldBegin("cpu_limit", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.CpuLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TResourceLimit) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TResourceLimit(%+v)", *p)

}

func (p *TResourceLimit) DeepEqual(ano *TResourceLimit) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CpuLimit) {
		return false
	}
	return true
}

func (p *TResourceLimit) Field1DeepEqual(src *int32) bool {

	if p.CpuLimit == src {
		return true
	} else if p.CpuLimit == nil || src == nil {
		return false
	}
	if *p.CpuLimit != *src {
		return false
	}
	return true
}

type TQueryOptions struct {
	AbortOnError                             bool            `thrift:"abort_on_error,1,optional" frugal:"1,optional,bool" json:"abort_on_error,omitempty"`
	MaxErrors                                int32           `thrift:"max_errors,2,optional" frugal:"2,optional,i32" json:"max_errors,omitempty"`
	DisableCodegen                           bool            `thrift:"disable_codegen,3,optional" frugal:"3,optional,bool" json:"disable_codegen,omitempty"`
	BatchSize                                int32           `thrift:"batch_size,4,optional" frugal:"4,optional,i32" json:"batch_size,omitempty"`
	NumNodes                                 int32           `thrift:"num_nodes,5,optional" frugal:"5,optional,i32" json:"num_nodes,omitempty"`
	MaxScanRangeLength                       int64           `thrift:"max_scan_range_length,6,optional" frugal:"6,optional,i64" json:"max_scan_range_length,omitempty"`
	NumScannerThreads                        int32           `thrift:"num_scanner_threads,7,optional" frugal:"7,optional,i32" json:"num_scanner_threads,omitempty"`
	MaxIoBuffers                             int32           `thrift:"max_io_buffers,8,optional" frugal:"8,optional,i32" json:"max_io_buffers,omitempty"`
	AllowUnsupportedFormats                  bool            `thrift:"allow_unsupported_formats,9,optional" frugal:"9,optional,bool" json:"allow_unsupported_formats,omitempty"`
	DefaultOrderByLimit                      int64           `thrift:"default_order_by_limit,10,optional" frugal:"10,optional,i64" json:"default_order_by_limit,omitempty"`
	MemLimit                                 int64           `thrift:"mem_limit,12,optional" frugal:"12,optional,i64" json:"mem_limit,omitempty"`
	AbortOnDefaultLimitExceeded              bool            `thrift:"abort_on_default_limit_exceeded,13,optional" frugal:"13,optional,bool" json:"abort_on_default_limit_exceeded,omitempty"`
	QueryTimeout                             int32           `thrift:"query_timeout,14,optional" frugal:"14,optional,i32" json:"query_timeout,omitempty"`
	IsReportSuccess                          bool            `thrift:"is_report_success,15,optional" frugal:"15,optional,bool" json:"is_report_success,omitempty"`
	CodegenLevel                             int32           `thrift:"codegen_level,16,optional" frugal:"16,optional,i32" json:"codegen_level,omitempty"`
	KuduLatestObservedTs                     int64           `thrift:"kudu_latest_observed_ts,17,optional" frugal:"17,optional,i64" json:"kudu_latest_observed_ts,omitempty"`
	QueryType                                TQueryType      `thrift:"query_type,18,optional" frugal:"18,optional,TQueryType" json:"query_type,omitempty"`
	MinReservation                           int64           `thrift:"min_reservation,19,optional" frugal:"19,optional,i64" json:"min_reservation,omitempty"`
	MaxReservation                           int64           `thrift:"max_reservation,20,optional" frugal:"20,optional,i64" json:"max_reservation,omitempty"`
	InitialReservationTotalClaims            int64           `thrift:"initial_reservation_total_claims,21,optional" frugal:"21,optional,i64" json:"initial_reservation_total_claims,omitempty"`
	BufferPoolLimit                          int64           `thrift:"buffer_pool_limit,22,optional" frugal:"22,optional,i64" json:"buffer_pool_limit,omitempty"`
	DefaultSpillableBufferSize               int64           `thrift:"default_spillable_buffer_size,23,optional" frugal:"23,optional,i64" json:"default_spillable_buffer_size,omitempty"`
	MinSpillableBufferSize                   int64           `thrift:"min_spillable_buffer_size,24,optional" frugal:"24,optional,i64" json:"min_spillable_buffer_size,omitempty"`
	MaxRowSize                               int64           `thrift:"max_row_size,25,optional" frugal:"25,optional,i64" json:"max_row_size,omitempty"`
	DisableStreamPreaggregations             bool            `thrift:"disable_stream_preaggregations,26,optional" frugal:"26,optional,bool" json:"disable_stream_preaggregations,omitempty"`
	MtDop                                    int32           `thrift:"mt_dop,27,optional" frugal:"27,optional,i32" json:"mt_dop,omitempty"`
	LoadMemLimit                             int64           `thrift:"load_mem_limit,28,optional" frugal:"28,optional,i64" json:"load_mem_limit,omitempty"`
	MaxScanKeyNum                            *int32          `thrift:"max_scan_key_num,29,optional" frugal:"29,optional,i32" json:"max_scan_key_num,omitempty"`
	MaxPushdownConditionsPerColumn           *int32          `thrift:"max_pushdown_conditions_per_column,30,optional" frugal:"30,optional,i32" json:"max_pushdown_conditions_per_column,omitempty"`
	EnableSpilling                           bool            `thrift:"enable_spilling,31,optional" frugal:"31,optional,bool" json:"enable_spilling,omitempty"`
	EnableEnableExchangeNodeParallelMerge    bool            `thrift:"enable_enable_exchange_node_parallel_merge,32,optional" frugal:"32,optional,bool" json:"enable_enable_exchange_node_parallel_merge,omitempty"`
	RuntimeFilterWaitTimeMs                  int32           `thrift:"runtime_filter_wait_time_ms,33,optional" frugal:"33,optional,i32" json:"runtime_filter_wait_time_ms,omitempty"`
	RuntimeFilterMaxInNum                    int32           `thrift:"runtime_filter_max_in_num,34,optional" frugal:"34,optional,i32" json:"runtime_filter_max_in_num,omitempty"`
	ResourceLimit                            *TResourceLimit `thrift:"resource_limit,42,optional" frugal:"42,optional,TResourceLimit" json:"resource_limit,omitempty"`
	ReturnObjectDataAsBinary                 bool            `thrift:"return_object_data_as_binary,43,optional" frugal:"43,optional,bool" json:"return_object_data_as_binary,omitempty"`
	TrimTailingSpacesForExternalTableQuery   bool            `thrift:"trim_tailing_spaces_for_external_table_query,44,optional" frugal:"44,optional,bool" json:"trim_tailing_spaces_for_external_table_query,omitempty"`
	EnableFunctionPushdown                   *bool           `thrift:"enable_function_pushdown,45,optional" frugal:"45,optional,bool" json:"enable_function_pushdown,omitempty"`
	FragmentTransmissionCompressionCodec     *string         `thrift:"fragment_transmission_compression_codec,46,optional" frugal:"46,optional,string" json:"fragment_transmission_compression_codec,omitempty"`
	EnableLocalExchange                      *bool           `thrift:"enable_local_exchange,48,optional" frugal:"48,optional,bool" json:"enable_local_exchange,omitempty"`
	SkipStorageEngineMerge                   bool            `thrift:"skip_storage_engine_merge,49,optional" frugal:"49,optional,bool" json:"skip_storage_engine_merge,omitempty"`
	SkipDeletePredicate                      bool            `thrift:"skip_delete_predicate,50,optional" frugal:"50,optional,bool" json:"skip_delete_predicate,omitempty"`
	EnableNewShuffleHashMethod               *bool           `thrift:"enable_new_shuffle_hash_method,51,optional" frugal:"51,optional,bool" json:"enable_new_shuffle_hash_method,omitempty"`
	BeExecVersion                            int32           `thrift:"be_exec_version,52,optional" frugal:"52,optional,i32" json:"be_exec_version,omitempty"`
	PartitionedHashJoinRowsThreshold         int32           `thrift:"partitioned_hash_join_rows_threshold,53,optional" frugal:"53,optional,i32" json:"partitioned_hash_join_rows_threshold,omitempty"`
	EnableShareHashTableForBroadcastJoin     *bool           `thrift:"enable_share_hash_table_for_broadcast_join,54,optional" frugal:"54,optional,bool" json:"enable_share_hash_table_for_broadcast_join,omitempty"`
	CheckOverflowForDecimal                  bool            `thrift:"check_overflow_for_decimal,55,optional" frugal:"55,optional,bool" json:"check_overflow_for_decimal,omitempty"`
	SkipDeleteBitmap                         bool            `thrift:"skip_delete_bitmap,56,optional" frugal:"56,optional,bool" json:"skip_delete_bitmap,omitempty"`
	EnablePipelineEngine                     bool            `thrift:"enable_pipeline_engine,57,optional" frugal:"57,optional,bool" json:"enable_pipeline_engine,omitempty"`
	RepeatMaxNum                             int32           `thrift:"repeat_max_num,58,optional" frugal:"58,optional,i32" json:"repeat_max_num,omitempty"`
	ExternalSortBytesThreshold               int64           `thrift:"external_sort_bytes_threshold,59,optional" frugal:"59,optional,i64" json:"external_sort_bytes_threshold,omitempty"`
	PartitionedHashAggRowsThreshold          int32           `thrift:"partitioned_hash_agg_rows_threshold,60,optional" frugal:"60,optional,i32" json:"partitioned_hash_agg_rows_threshold,omitempty"`
	EnableFileCache                          bool            `thrift:"enable_file_cache,61,optional" frugal:"61,optional,bool" json:"enable_file_cache,omitempty"`
	InsertTimeout                            int32           `thrift:"insert_timeout,62,optional" frugal:"62,optional,i32" json:"insert_timeout,omitempty"`
	ExecutionTimeout                         int32           `thrift:"execution_timeout,63,optional" frugal:"63,optional,i32" json:"execution_timeout,omitempty"`
	DryRunQuery                              bool            `thrift:"dry_run_query,64,optional" frugal:"64,optional,bool" json:"dry_run_query,omitempty"`
	EnableCommonExprPushdown                 bool            `thrift:"enable_common_expr_pushdown,65,optional" frugal:"65,optional,bool" json:"enable_common_expr_pushdown,omitempty"`
	ParallelInstance                         int32           `thrift:"parallel_instance,66,optional" frugal:"66,optional,i32" json:"parallel_instance,omitempty"`
	MysqlRowBinaryFormat                     bool            `thrift:"mysql_row_binary_format,67,optional" frugal:"67,optional,bool" json:"mysql_row_binary_format,omitempty"`
	ExternalAggBytesThreshold                int64           `thrift:"external_agg_bytes_threshold,68,optional" frugal:"68,optional,i64" json:"external_agg_bytes_threshold,omitempty"`
	ExternalAggPartitionBits                 int32           `thrift:"external_agg_partition_bits,69,optional" frugal:"69,optional,i32" json:"external_agg_partition_bits,omitempty"`
	FileCacheBasePath                        *string         `thrift:"file_cache_base_path,70,optional" frugal:"70,optional,string" json:"file_cache_base_path,omitempty"`
	EnableParquetLazyMat                     bool            `thrift:"enable_parquet_lazy_mat,71,optional" frugal:"71,optional,bool" json:"enable_parquet_lazy_mat,omitempty"`
	EnableOrcLazyMat                         bool            `thrift:"enable_orc_lazy_mat,72,optional" frugal:"72,optional,bool" json:"enable_orc_lazy_mat,omitempty"`
	ScanQueueMemLimit                        *int64          `thrift:"scan_queue_mem_limit,73,optional" frugal:"73,optional,i64" json:"scan_queue_mem_limit,omitempty"`
	EnableScanNodeRunSerial                  bool            `thrift:"enable_scan_node_run_serial,74,optional" frugal:"74,optional,bool" json:"enable_scan_node_run_serial,omitempty"`
	EnableInsertStrict                       bool            `thrift:"enable_insert_strict,75,optional" frugal:"75,optional,bool" json:"enable_insert_strict,omitempty"`
	EnableInvertedIndexQuery                 bool            `thrift:"enable_inverted_index_query,76,optional" frugal:"76,optional,bool" json:"enable_inverted_index_query,omitempty"`
	TruncateCharOrVarcharColumns             bool            `thrift:"truncate_char_or_varchar_columns,77,optional" frugal:"77,optional,bool" json:"truncate_char_or_varchar_columns,omitempty"`
	EnableHashJoinEarlyStartProbe            bool            `thrift:"enable_hash_join_early_start_probe,78,optional" frugal:"78,optional,bool" json:"enable_hash_join_early_start_probe,omitempty"`
	EnablePipelineXEngine                    bool            `thrift:"enable_pipeline_x_engine,79,optional" frugal:"79,optional,bool" json:"enable_pipeline_x_engine,omitempty"`
	EnableMemtableOnSinkNode                 bool            `thrift:"enable_memtable_on_sink_node,80,optional" frugal:"80,optional,bool" json:"enable_memtable_on_sink_node,omitempty"`
	EnableDeleteSubPredicateV2               bool            `thrift:"enable_delete_sub_predicate_v2,81,optional" frugal:"81,optional,bool" json:"enable_delete_sub_predicate_v2,omitempty"`
	FeProcessUuid                            int64           `thrift:"fe_process_uuid,82,optional" frugal:"82,optional,i64" json:"fe_process_uuid,omitempty"`
	InvertedIndexConjunctionOptThreshold     int32           `thrift:"inverted_index_conjunction_opt_threshold,83,optional" frugal:"83,optional,i32" json:"inverted_index_conjunction_opt_threshold,omitempty"`
	EnableProfile                            bool            `thrift:"enable_profile,84,optional" frugal:"84,optional,bool" json:"enable_profile,omitempty"`
	EnablePageCache                          bool            `thrift:"enable_page_cache,85,optional" frugal:"85,optional,bool" json:"enable_page_cache,omitempty"`
	AnalyzeTimeout                           int32           `thrift:"analyze_timeout,86,optional" frugal:"86,optional,i32" json:"analyze_timeout,omitempty"`
	FasterFloatConvert                       bool            `thrift:"faster_float_convert,87,optional" frugal:"87,optional,bool" json:"faster_float_convert,omitempty"`
	EnableDecimal256                         bool            `thrift:"enable_decimal256,88,optional" frugal:"88,optional,bool" json:"enable_decimal256,omitempty"`
	EnableLocalShuffle                       bool            `thrift:"enable_local_shuffle,89,optional" frugal:"89,optional,bool" json:"enable_local_shuffle,omitempty"`
	SkipMissingVersion                       bool            `thrift:"skip_missing_version,90,optional" frugal:"90,optional,bool" json:"skip_missing_version,omitempty"`
	RuntimeFilterWaitInfinitely              bool            `thrift:"runtime_filter_wait_infinitely,91,optional" frugal:"91,optional,bool" json:"runtime_filter_wait_infinitely,omitempty"`
	WaitFullBlockScheduleTimes               int32           `thrift:"wait_full_block_schedule_times,92,optional" frugal:"92,optional,i32" json:"wait_full_block_schedule_times,omitempty"`
	InvertedIndexMaxExpansions               int32           `thrift:"inverted_index_max_expansions,93,optional" frugal:"93,optional,i32" json:"inverted_index_max_expansions,omitempty"`
	InvertedIndexSkipThreshold               int32           `thrift:"inverted_index_skip_threshold,94,optional" frugal:"94,optional,i32" json:"inverted_index_skip_threshold,omitempty"`
	EnableParallelScan                       bool            `thrift:"enable_parallel_scan,95,optional" frugal:"95,optional,bool" json:"enable_parallel_scan,omitempty"`
	ParallelScanMaxScannersCount             int32           `thrift:"parallel_scan_max_scanners_count,96,optional" frugal:"96,optional,i32" json:"parallel_scan_max_scanners_count,omitempty"`
	ParallelScanMinRowsPerScanner            int64           `thrift:"parallel_scan_min_rows_per_scanner,97,optional" frugal:"97,optional,i64" json:"parallel_scan_min_rows_per_scanner,omitempty"`
	SkipBadTablet                            bool            `thrift:"skip_bad_tablet,98,optional" frugal:"98,optional,bool" json:"skip_bad_tablet,omitempty"`
	ScannerScaleUpRatio                      float64         `thrift:"scanner_scale_up_ratio,99,optional" frugal:"99,optional,double" json:"scanner_scale_up_ratio,omitempty"`
	EnableDistinctStreamingAggregation       bool            `thrift:"enable_distinct_streaming_aggregation,100,optional" frugal:"100,optional,bool" json:"enable_distinct_streaming_aggregation,omitempty"`
	EnableJoinSpill                          bool            `thrift:"enable_join_spill,101,optional" frugal:"101,optional,bool" json:"enable_join_spill,omitempty"`
	EnableSortSpill                          bool            `thrift:"enable_sort_spill,102,optional" frugal:"102,optional,bool" json:"enable_sort_spill,omitempty"`
	EnableAggSpill                           bool            `thrift:"enable_agg_spill,103,optional" frugal:"103,optional,bool" json:"enable_agg_spill,omitempty"`
	MinRevocableMem                          int64           `thrift:"min_revocable_mem,104,optional" frugal:"104,optional,i64" json:"min_revocable_mem,omitempty"`
	SpillStreamingAggMemLimit                int64           `thrift:"spill_streaming_agg_mem_limit,105,optional" frugal:"105,optional,i64" json:"spill_streaming_agg_mem_limit,omitempty"`
	DataQueueMaxBlocks                       int64           `thrift:"data_queue_max_blocks,106,optional" frugal:"106,optional,i64" json:"data_queue_max_blocks,omitempty"`
	EnableCommonExprPushdownForInvertedIndex bool            `thrift:"enable_common_expr_pushdown_for_inverted_index,107,optional" frugal:"107,optional,bool" json:"enable_common_expr_pushdown_for_inverted_index,omitempty"`
	LocalExchangeFreeBlocksLimit             *int64          `thrift:"local_exchange_free_blocks_limit,108,optional" frugal:"108,optional,i64" json:"local_exchange_free_blocks_limit,omitempty"`
	EnableForceSpill                         bool            `thrift:"enable_force_spill,109,optional" frugal:"109,optional,bool" json:"enable_force_spill,omitempty"`
	EnableParquetFilterByMinMax              bool            `thrift:"enable_parquet_filter_by_min_max,110,optional" frugal:"110,optional,bool" json:"enable_parquet_filter_by_min_max,omitempty"`
	EnableOrcFilterByMinMax                  bool            `thrift:"enable_orc_filter_by_min_max,111,optional" frugal:"111,optional,bool" json:"enable_orc_filter_by_min_max,omitempty"`
	MaxColumnReaderNum                       int32           `thrift:"max_column_reader_num,112,optional" frugal:"112,optional,i32" json:"max_column_reader_num,omitempty"`
	EnableLocalMergeSort                     bool            `thrift:"enable_local_merge_sort,113,optional" frugal:"113,optional,bool" json:"enable_local_merge_sort,omitempty"`
	EnableParallelResultSink                 bool            `thrift:"enable_parallel_result_sink,114,optional" frugal:"114,optional,bool" json:"enable_parallel_result_sink,omitempty"`
	EnableShortCircuitQueryAccessColumnStore bool            `thrift:"enable_short_circuit_query_access_column_store,115,optional" frugal:"115,optional,bool" json:"enable_short_circuit_query_access_column_store,omitempty"`
	EnableNoNeedReadDataOpt                  bool            `thrift:"enable_no_need_read_data_opt,116,optional" frugal:"116,optional,bool" json:"enable_no_need_read_data_opt,omitempty"`
	ReadCsvEmptyLineAsNull                   bool            `thrift:"read_csv_empty_line_as_null,117,optional" frugal:"117,optional,bool" json:"read_csv_empty_line_as_null,omitempty"`
	DisableFileCache                         bool            `thrift:"disable_file_cache,1000,optional" frugal:"1000,optional,bool" json:"disable_file_cache,omitempty"`
}

func NewTQueryOptions() *TQueryOptions {
	return &TQueryOptions{

		AbortOnError:                             false,
		MaxErrors:                                0,
		DisableCodegen:                           true,
		BatchSize:                                0,
		NumNodes:                                 int32(NUM_NODES_ALL),
		MaxScanRangeLength:                       0,
		NumScannerThreads:                        0,
		MaxIoBuffers:                             0,
		AllowUnsupportedFormats:                  false,
		DefaultOrderByLimit:                      -1,
		MemLimit:                                 2147483648,
		AbortOnDefaultLimitExceeded:              false,
		QueryTimeout:                             3600,
		IsReportSuccess:                          false,
		CodegenLevel:                             0,
		KuduLatestObservedTs:                     9223372036854775807,
		QueryType:                                TQueryType_SELECT,
		MinReservation:                           0,
		MaxReservation:                           107374182400,
		InitialReservationTotalClaims:            2147483647,
		BufferPoolLimit:                          2147483648,
		DefaultSpillableBufferSize:               2097152,
		MinSpillableBufferSize:                   65536,
		MaxRowSize:                               524288,
		DisableStreamPreaggregations:             false,
		MtDop:                                    0,
		LoadMemLimit:                             0,
		EnableSpilling:                           false,
		EnableEnableExchangeNodeParallelMerge:    false,
		RuntimeFilterWaitTimeMs:                  1000,
		RuntimeFilterMaxInNum:                    1024,
		ReturnObjectDataAsBinary:                 false,
		TrimTailingSpacesForExternalTableQuery:   false,
		SkipStorageEngineMerge:                   false,
		SkipDeletePredicate:                      false,
		BeExecVersion:                            0,
		PartitionedHashJoinRowsThreshold:         0,
		CheckOverflowForDecimal:                  true,
		SkipDeleteBitmap:                         false,
		EnablePipelineEngine:                     true,
		RepeatMaxNum:                             0,
		ExternalSortBytesThreshold:               0,
		PartitionedHashAggRowsThreshold:          0,
		EnableFileCache:                          false,
		InsertTimeout:                            14400,
		ExecutionTimeout:                         3600,
		DryRunQuery:                              false,
		EnableCommonExprPushdown:                 false,
		ParallelInstance:                         1,
		MysqlRowBinaryFormat:                     false,
		ExternalAggBytesThreshold:                0,
		ExternalAggPartitionBits:                 4,
		EnableParquetLazyMat:                     true,
		EnableOrcLazyMat:                         true,
		EnableScanNodeRunSerial:                  false,
		EnableInsertStrict:                       false,
		EnableInvertedIndexQuery:                 true,
		TruncateCharOrVarcharColumns:             false,
		EnableHashJoinEarlyStartProbe:            false,
		EnablePipelineXEngine:                    true,
		EnableMemtableOnSinkNode:                 false,
		EnableDeleteSubPredicateV2:               false,
		FeProcessUuid:                            0,
		InvertedIndexConjunctionOptThreshold:     1000,
		EnableProfile:                            false,
		EnablePageCache:                          false,
		AnalyzeTimeout:                           43200,
		FasterFloatConvert:                       false,
		EnableDecimal256:                         false,
		EnableLocalShuffle:                       false,
		SkipMissingVersion:                       false,
		RuntimeFilterWaitInfinitely:              false,
		WaitFullBlockScheduleTimes:               1,
		InvertedIndexMaxExpansions:               50,
		InvertedIndexSkipThreshold:               50,
		EnableParallelScan:                       false,
		ParallelScanMaxScannersCount:             0,
		ParallelScanMinRowsPerScanner:            0,
		SkipBadTablet:                            false,
		ScannerScaleUpRatio:                      0.0,
		EnableDistinctStreamingAggregation:       true,
		EnableJoinSpill:                          false,
		EnableSortSpill:                          false,
		EnableAggSpill:                           false,
		MinRevocableMem:                          0,
		SpillStreamingAggMemLimit:                0,
		DataQueueMaxBlocks:                       0,
		EnableCommonExprPushdownForInvertedIndex: false,
		EnableForceSpill:                         false,
		EnableParquetFilterByMinMax:              true,
		EnableOrcFilterByMinMax:                  true,
		MaxColumnReaderNum:                       0,
		EnableLocalMergeSort:                     false,
		EnableParallelResultSink:                 false,
		EnableShortCircuitQueryAccessColumnStore: false,
		EnableNoNeedReadDataOpt:                  true,
		ReadCsvEmptyLineAsNull:                   false,
		DisableFileCache:                         false,
	}
}

func (p *TQueryOptions) InitDefault() {
	p.AbortOnError = false
	p.MaxErrors = 0
	p.DisableCodegen = true
	p.BatchSize = 0
	p.NumNodes = int32(NUM_NODES_ALL)
	p.MaxScanRangeLength = 0
	p.NumScannerThreads = 0
	p.MaxIoBuffers = 0
	p.AllowUnsupportedFormats = false
	p.DefaultOrderByLimit = -1
	p.MemLimit = 2147483648
	p.AbortOnDefaultLimitExceeded = false
	p.QueryTimeout = 3600
	p.IsReportSuccess = false
	p.CodegenLevel = 0
	p.KuduLatestObservedTs = 9223372036854775807
	p.QueryType = TQueryType_SELECT
	p.MinReservation = 0
	p.MaxReservation = 107374182400
	p.InitialReservationTotalClaims = 2147483647
	p.BufferPoolLimit = 2147483648
	p.DefaultSpillableBufferSize = 2097152
	p.MinSpillableBufferSize = 65536
	p.MaxRowSize = 524288
	p.DisableStreamPreaggregations = false
	p.MtDop = 0
	p.LoadMemLimit = 0
	p.EnableSpilling = false
	p.EnableEnableExchangeNodeParallelMerge = false
	p.RuntimeFilterWaitTimeMs = 1000
	p.RuntimeFilterMaxInNum = 1024
	p.ReturnObjectDataAsBinary = false
	p.TrimTailingSpacesForExternalTableQuery = false
	p.SkipStorageEngineMerge = false
	p.SkipDeletePredicate = false
	p.BeExecVersion = 0
	p.PartitionedHashJoinRowsThreshold = 0
	p.CheckOverflowForDecimal = true
	p.SkipDeleteBitmap = false
	p.EnablePipelineEngine = true
	p.RepeatMaxNum = 0
	p.ExternalSortBytesThreshold = 0
	p.PartitionedHashAggRowsThreshold = 0
	p.EnableFileCache = false
	p.InsertTimeout = 14400
	p.ExecutionTimeout = 3600
	p.DryRunQuery = false
	p.EnableCommonExprPushdown = false
	p.ParallelInstance = 1
	p.MysqlRowBinaryFormat = false
	p.ExternalAggBytesThreshold = 0
	p.ExternalAggPartitionBits = 4
	p.EnableParquetLazyMat = true
	p.EnableOrcLazyMat = true
	p.EnableScanNodeRunSerial = false
	p.EnableInsertStrict = false
	p.EnableInvertedIndexQuery = true
	p.TruncateCharOrVarcharColumns = false
	p.EnableHashJoinEarlyStartProbe = false
	p.EnablePipelineXEngine = true
	p.EnableMemtableOnSinkNode = false
	p.EnableDeleteSubPredicateV2 = false
	p.FeProcessUuid = 0
	p.InvertedIndexConjunctionOptThreshold = 1000
	p.EnableProfile = false
	p.EnablePageCache = false
	p.AnalyzeTimeout = 43200
	p.FasterFloatConvert = false
	p.EnableDecimal256 = false
	p.EnableLocalShuffle = false
	p.SkipMissingVersion = false
	p.RuntimeFilterWaitInfinitely = false
	p.WaitFullBlockScheduleTimes = 1
	p.InvertedIndexMaxExpansions = 50
	p.InvertedIndexSkipThreshold = 50
	p.EnableParallelScan = false
	p.ParallelScanMaxScannersCount = 0
	p.ParallelScanMinRowsPerScanner = 0
	p.SkipBadTablet = false
	p.ScannerScaleUpRatio = 0.0
	p.EnableDistinctStreamingAggregation = true
	p.EnableJoinSpill = false
	p.EnableSortSpill = false
	p.EnableAggSpill = false
	p.MinRevocableMem = 0
	p.SpillStreamingAggMemLimit = 0
	p.DataQueueMaxBlocks = 0
	p.EnableCommonExprPushdownForInvertedIndex = false
	p.EnableForceSpill = false
	p.EnableParquetFilterByMinMax = true
	p.EnableOrcFilterByMinMax = true
	p.MaxColumnReaderNum = 0
	p.EnableLocalMergeSort = false
	p.EnableParallelResultSink = false
	p.EnableShortCircuitQueryAccessColumnStore = false
	p.EnableNoNeedReadDataOpt = true
	p.ReadCsvEmptyLineAsNull = false
	p.DisableFileCache = false
}

var TQueryOptions_AbortOnError_DEFAULT bool = false

func (p *TQueryOptions) GetAbortOnError() (v bool) {
	if !p.IsSetAbortOnError() {
		return TQueryOptions_AbortOnError_DEFAULT
	}
	return p.AbortOnError
}

var TQueryOptions_MaxErrors_DEFAULT int32 = 0

func (p *TQueryOptions) GetMaxErrors() (v int32) {
	if !p.IsSetMaxErrors() {
		return TQueryOptions_MaxErrors_DEFAULT
	}
	return p.MaxErrors
}

var TQueryOptions_DisableCodegen_DEFAULT bool = true

func (p *TQueryOptions) GetDisableCodegen() (v bool) {
	if !p.IsSetDisableCodegen() {
		return TQueryOptions_DisableCodegen_DEFAULT
	}
	return p.DisableCodegen
}

var TQueryOptions_BatchSize_DEFAULT int32 = 0

func (p *TQueryOptions) GetBatchSize() (v int32) {
	if !p.IsSetBatchSize() {
		return TQueryOptions_BatchSize_DEFAULT
	}
	return p.BatchSize
}

var TQueryOptions_NumNodes_DEFAULT int32 = int32(NUM_NODES_ALL)

func (p *TQueryOptions) GetNumNodes() (v int32) {
	if !p.IsSetNumNodes() {
		return TQueryOptions_NumNodes_DEFAULT
	}
	return p.NumNodes
}

var TQueryOptions_MaxScanRangeLength_DEFAULT int64 = 0

func (p *TQueryOptions) GetMaxScanRangeLength() (v int64) {
	if !p.IsSetMaxScanRangeLength() {
		return TQueryOptions_MaxScanRangeLength_DEFAULT
	}
	return p.MaxScanRangeLength
}

var TQueryOptions_NumScannerThreads_DEFAULT int32 = 0

func (p *TQueryOptions) GetNumScannerThreads() (v int32) {
	if !p.IsSetNumScannerThreads() {
		return TQueryOptions_NumScannerThreads_DEFAULT
	}
	return p.NumScannerThreads
}

var TQueryOptions_MaxIoBuffers_DEFAULT int32 = 0

func (p *TQueryOptions) GetMaxIoBuffers() (v int32) {
	if !p.IsSetMaxIoBuffers() {
		return TQueryOptions_MaxIoBuffers_DEFAULT
	}
	return p.MaxIoBuffers
}

var TQueryOptions_AllowUnsupportedFormats_DEFAULT bool = false

func (p *TQueryOptions) GetAllowUnsupportedFormats() (v bool) {
	if !p.IsSetAllowUnsupportedFormats() {
		return TQueryOptions_AllowUnsupportedFormats_DEFAULT
	}
	return p.AllowUnsupportedFormats
}

var TQueryOptions_DefaultOrderByLimit_DEFAULT int64 = -1

func (p *TQueryOptions) GetDefaultOrderByLimit() (v int64) {
	if !p.IsSetDefaultOrderByLimit() {
		return TQueryOptions_DefaultOrderByLimit_DEFAULT
	}
	return p.DefaultOrderByLimit
}

var TQueryOptions_MemLimit_DEFAULT int64 = 2147483648

func (p *TQueryOptions) GetMemLimit() (v int64) {
	if !p.IsSetMemLimit() {
		return TQueryOptions_MemLimit_DEFAULT
	}
	return p.MemLimit
}

var TQueryOptions_AbortOnDefaultLimitExceeded_DEFAULT bool = false

func (p *TQueryOptions) GetAbortOnDefaultLimitExceeded() (v bool) {
	if !p.IsSetAbortOnDefaultLimitExceeded() {
		return TQueryOptions_AbortOnDefaultLimitExceeded_DEFAULT
	}
	return p.AbortOnDefaultLimitExceeded
}

var TQueryOptions_QueryTimeout_DEFAULT int32 = 3600

func (p *TQueryOptions) GetQueryTimeout() (v int32) {
	if !p.IsSetQueryTimeout() {
		return TQueryOptions_QueryTimeout_DEFAULT
	}
	return p.QueryTimeout
}

var TQueryOptions_IsReportSuccess_DEFAULT bool = false

func (p *TQueryOptions) GetIsReportSuccess() (v bool) {
	if !p.IsSetIsReportSuccess() {
		return TQueryOptions_IsReportSuccess_DEFAULT
	}
	return p.IsReportSuccess
}

var TQueryOptions_CodegenLevel_DEFAULT int32 = 0

func (p *TQueryOptions) GetCodegenLevel() (v int32) {
	if !p.IsSetCodegenLevel() {
		return TQueryOptions_CodegenLevel_DEFAULT
	}
	return p.CodegenLevel
}

var TQueryOptions_KuduLatestObservedTs_DEFAULT int64 = 9223372036854775807

func (p *TQueryOptions) GetKuduLatestObservedTs() (v int64) {
	if !p.IsSetKuduLatestObservedTs() {
		return TQueryOptions_KuduLatestObservedTs_DEFAULT
	}
	return p.KuduLatestObservedTs
}

var TQueryOptions_QueryType_DEFAULT TQueryType = TQueryType_SELECT

func (p *TQueryOptions) GetQueryType() (v TQueryType) {
	if !p.IsSetQueryType() {
		return TQueryOptions_QueryType_DEFAULT
	}
	return p.QueryType
}

var TQueryOptions_MinReservation_DEFAULT int64 = 0

func (p *TQueryOptions) GetMinReservation() (v int64) {
	if !p.IsSetMinReservation() {
		return TQueryOptions_MinReservation_DEFAULT
	}
	return p.MinReservation
}

var TQueryOptions_MaxReservation_DEFAULT int64 = 107374182400

func (p *TQueryOptions) GetMaxReservation() (v int64) {
	if !p.IsSetMaxReservation() {
		return TQueryOptions_MaxReservation_DEFAULT
	}
	return p.MaxReservation
}

var TQueryOptions_InitialReservationTotalClaims_DEFAULT int64 = 2147483647

func (p *TQueryOptions) GetInitialReservationTotalClaims() (v int64) {
	if !p.IsSetInitialReservationTotalClaims() {
		return TQueryOptions_InitialReservationTotalClaims_DEFAULT
	}
	return p.InitialReservationTotalClaims
}

var TQueryOptions_BufferPoolLimit_DEFAULT int64 = 2147483648

func (p *TQueryOptions) GetBufferPoolLimit() (v int64) {
	if !p.IsSetBufferPoolLimit() {
		return TQueryOptions_BufferPoolLimit_DEFAULT
	}
	return p.BufferPoolLimit
}

var TQueryOptions_DefaultSpillableBufferSize_DEFAULT int64 = 2097152

func (p *TQueryOptions) GetDefaultSpillableBufferSize() (v int64) {
	if !p.IsSetDefaultSpillableBufferSize() {
		return TQueryOptions_DefaultSpillableBufferSize_DEFAULT
	}
	return p.DefaultSpillableBufferSize
}

var TQueryOptions_MinSpillableBufferSize_DEFAULT int64 = 65536

func (p *TQueryOptions) GetMinSpillableBufferSize() (v int64) {
	if !p.IsSetMinSpillableBufferSize() {
		return TQueryOptions_MinSpillableBufferSize_DEFAULT
	}
	return p.MinSpillableBufferSize
}

var TQueryOptions_MaxRowSize_DEFAULT int64 = 524288

func (p *TQueryOptions) GetMaxRowSize() (v int64) {
	if !p.IsSetMaxRowSize() {
		return TQueryOptions_MaxRowSize_DEFAULT
	}
	return p.MaxRowSize
}

var TQueryOptions_DisableStreamPreaggregations_DEFAULT bool = false

func (p *TQueryOptions) GetDisableStreamPreaggregations() (v bool) {
	if !p.IsSetDisableStreamPreaggregations() {
		return TQueryOptions_DisableStreamPreaggregations_DEFAULT
	}
	return p.DisableStreamPreaggregations
}

var TQueryOptions_MtDop_DEFAULT int32 = 0

func (p *TQueryOptions) GetMtDop() (v int32) {
	if !p.IsSetMtDop() {
		return TQueryOptions_MtDop_DEFAULT
	}
	return p.MtDop
}

var TQueryOptions_LoadMemLimit_DEFAULT int64 = 0

func (p *TQueryOptions) GetLoadMemLimit() (v int64) {
	if !p.IsSetLoadMemLimit() {
		return TQueryOptions_LoadMemLimit_DEFAULT
	}
	return p.LoadMemLimit
}

var TQueryOptions_MaxScanKeyNum_DEFAULT int32

func (p *TQueryOptions) GetMaxScanKeyNum() (v int32) {
	if !p.IsSetMaxScanKeyNum() {
		return TQueryOptions_MaxScanKeyNum_DEFAULT
	}
	return *p.MaxScanKeyNum
}

var TQueryOptions_MaxPushdownConditionsPerColumn_DEFAULT int32

func (p *TQueryOptions) GetMaxPushdownConditionsPerColumn() (v int32) {
	if !p.IsSetMaxPushdownConditionsPerColumn() {
		return TQueryOptions_MaxPushdownConditionsPerColumn_DEFAULT
	}
	return *p.MaxPushdownConditionsPerColumn
}

var TQueryOptions_EnableSpilling_DEFAULT bool = false

func (p *TQueryOptions) GetEnableSpilling() (v bool) {
	if !p.IsSetEnableSpilling() {
		return TQueryOptions_EnableSpilling_DEFAULT
	}
	return p.EnableSpilling
}

var TQueryOptions_EnableEnableExchangeNodeParallelMerge_DEFAULT bool = false

func (p *TQueryOptions) GetEnableEnableExchangeNodeParallelMerge() (v bool) {
	if !p.IsSetEnableEnableExchangeNodeParallelMerge() {
		return TQueryOptions_EnableEnableExchangeNodeParallelMerge_DEFAULT
	}
	return p.EnableEnableExchangeNodeParallelMerge
}

var TQueryOptions_RuntimeFilterWaitTimeMs_DEFAULT int32 = 1000

func (p *TQueryOptions) GetRuntimeFilterWaitTimeMs() (v int32) {
	if !p.IsSetRuntimeFilterWaitTimeMs() {
		return TQueryOptions_RuntimeFilterWaitTimeMs_DEFAULT
	}
	return p.RuntimeFilterWaitTimeMs
}

var TQueryOptions_RuntimeFilterMaxInNum_DEFAULT int32 = 1024

func (p *TQueryOptions) GetRuntimeFilterMaxInNum() (v int32) {
	if !p.IsSetRuntimeFilterMaxInNum() {
		return TQueryOptions_RuntimeFilterMaxInNum_DEFAULT
	}
	return p.RuntimeFilterMaxInNum
}

var TQueryOptions_ResourceLimit_DEFAULT *TResourceLimit

func (p *TQueryOptions) GetResourceLimit() (v *TResourceLimit) {
	if !p.IsSetResourceLimit() {
		return TQueryOptions_ResourceLimit_DEFAULT
	}
	return p.ResourceLimit
}

var TQueryOptions_ReturnObjectDataAsBinary_DEFAULT bool = false

func (p *TQueryOptions) GetReturnObjectDataAsBinary() (v bool) {
	if !p.IsSetReturnObjectDataAsBinary() {
		return TQueryOptions_ReturnObjectDataAsBinary_DEFAULT
	}
	return p.ReturnObjectDataAsBinary
}

var TQueryOptions_TrimTailingSpacesForExternalTableQuery_DEFAULT bool = false

func (p *TQueryOptions) GetTrimTailingSpacesForExternalTableQuery() (v bool) {
	if !p.IsSetTrimTailingSpacesForExternalTableQuery() {
		return TQueryOptions_TrimTailingSpacesForExternalTableQuery_DEFAULT
	}
	return p.TrimTailingSpacesForExternalTableQuery
}

var TQueryOptions_EnableFunctionPushdown_DEFAULT bool

func (p *TQueryOptions) GetEnableFunctionPushdown() (v bool) {
	if !p.IsSetEnableFunctionPushdown() {
		return TQueryOptions_EnableFunctionPushdown_DEFAULT
	}
	return *p.EnableFunctionPushdown
}

var TQueryOptions_FragmentTransmissionCompressionCodec_DEFAULT string

func (p *TQueryOptions) GetFragmentTransmissionCompressionCodec() (v string) {
	if !p.IsSetFragmentTransmissionCompressionCodec() {
		return TQueryOptions_FragmentTransmissionCompressionCodec_DEFAULT
	}
	return *p.FragmentTransmissionCompressionCodec
}

var TQueryOptions_EnableLocalExchange_DEFAULT bool

func (p *TQueryOptions) GetEnableLocalExchange() (v bool) {
	if !p.IsSetEnableLocalExchange() {
		return TQueryOptions_EnableLocalExchange_DEFAULT
	}
	return *p.EnableLocalExchange
}

var TQueryOptions_SkipStorageEngineMerge_DEFAULT bool = false

func (p *TQueryOptions) GetSkipStorageEngineMerge() (v bool) {
	if !p.IsSetSkipStorageEngineMerge() {
		return TQueryOptions_SkipStorageEngineMerge_DEFAULT
	}
	return p.SkipStorageEngineMerge
}

var TQueryOptions_SkipDeletePredicate_DEFAULT bool = false

func (p *TQueryOptions) GetSkipDeletePredicate() (v bool) {
	if !p.IsSetSkipDeletePredicate() {
		return TQueryOptions_SkipDeletePredicate_DEFAULT
	}
	return p.SkipDeletePredicate
}

var TQueryOptions_EnableNewShuffleHashMethod_DEFAULT bool

func (p *TQueryOptions) GetEnableNewShuffleHashMethod() (v bool) {
	if !p.IsSetEnableNewShuffleHashMethod() {
		return TQueryOptions_EnableNewShuffleHashMethod_DEFAULT
	}
	return *p.EnableNewShuffleHashMethod
}

var TQueryOptions_BeExecVersion_DEFAULT int32 = 0

func (p *TQueryOptions) GetBeExecVersion() (v int32) {
	if !p.IsSetBeExecVersion() {
		return TQueryOptions_BeExecVersion_DEFAULT
	}
	return p.BeExecVersion
}

var TQueryOptions_PartitionedHashJoinRowsThreshold_DEFAULT int32 = 0

func (p *TQueryOptions) GetPartitionedHashJoinRowsThreshold() (v int32) {
	if !p.IsSetPartitionedHashJoinRowsThreshold() {
		return TQueryOptions_PartitionedHashJoinRowsThreshold_DEFAULT
	}
	return p.PartitionedHashJoinRowsThreshold
}

var TQueryOptions_EnableShareHashTableForBroadcastJoin_DEFAULT bool

func (p *TQueryOptions) GetEnableShareHashTableForBroadcastJoin() (v bool) {
	if !p.IsSetEnableShareHashTableForBroadcastJoin() {
		return TQueryOptions_EnableShareHashTableForBroadcastJoin_DEFAULT
	}
	return *p.EnableShareHashTableForBroadcastJoin
}

var TQueryOptions_CheckOverflowForDecimal_DEFAULT bool = true

func (p *TQueryOptions) GetCheckOverflowForDecimal() (v bool) {
	if !p.IsSetCheckOverflowForDecimal() {
		return TQueryOptions_CheckOverflowForDecimal_DEFAULT
	}
	return p.CheckOverflowForDecimal
}

var TQueryOptions_SkipDeleteBitmap_DEFAULT bool = false

func (p *TQueryOptions) GetSkipDeleteBitmap() (v bool) {
	if !p.IsSetSkipDeleteBitmap() {
		return TQueryOptions_SkipDeleteBitmap_DEFAULT
	}
	return p.SkipDeleteBitmap
}

var TQueryOptions_EnablePipelineEngine_DEFAULT bool = true

func (p *TQueryOptions) GetEnablePipelineEngine() (v bool) {
	if !p.IsSetEnablePipelineEngine() {
		return TQueryOptions_EnablePipelineEngine_DEFAULT
	}
	return p.EnablePipelineEngine
}

var TQueryOptions_RepeatMaxNum_DEFAULT int32 = 0

func (p *TQueryOptions) GetRepeatMaxNum() (v int32) {
	if !p.IsSetRepeatMaxNum() {
		return TQueryOptions_RepeatMaxNum_DEFAULT
	}
	return p.RepeatMaxNum
}

var TQueryOptions_ExternalSortBytesThreshold_DEFAULT int64 = 0

func (p *TQueryOptions) GetExternalSortBytesThreshold() (v int64) {
	if !p.IsSetExternalSortBytesThreshold() {
		return TQueryOptions_ExternalSortBytesThreshold_DEFAULT
	}
	return p.ExternalSortBytesThreshold
}

var TQueryOptions_PartitionedHashAggRowsThreshold_DEFAULT int32 = 0

func (p *TQueryOptions) GetPartitionedHashAggRowsThreshold() (v int32) {
	if !p.IsSetPartitionedHashAggRowsThreshold() {
		return TQueryOptions_PartitionedHashAggRowsThreshold_DEFAULT
	}
	return p.PartitionedHashAggRowsThreshold
}

var TQueryOptions_EnableFileCache_DEFAULT bool = false

func (p *TQueryOptions) GetEnableFileCache() (v bool) {
	if !p.IsSetEnableFileCache() {
		return TQueryOptions_EnableFileCache_DEFAULT
	}
	return p.EnableFileCache
}

var TQueryOptions_InsertTimeout_DEFAULT int32 = 14400

func (p *TQueryOptions) GetInsertTimeout() (v int32) {
	if !p.IsSetInsertTimeout() {
		return TQueryOptions_InsertTimeout_DEFAULT
	}
	return p.InsertTimeout
}

var TQueryOptions_ExecutionTimeout_DEFAULT int32 = 3600

func (p *TQueryOptions) GetExecutionTimeout() (v int32) {
	if !p.IsSetExecutionTimeout() {
		return TQueryOptions_ExecutionTimeout_DEFAULT
	}
	return p.ExecutionTimeout
}

var TQueryOptions_DryRunQuery_DEFAULT bool = false

func (p *TQueryOptions) GetDryRunQuery() (v bool) {
	if !p.IsSetDryRunQuery() {
		return TQueryOptions_DryRunQuery_DEFAULT
	}
	return p.DryRunQuery
}

var TQueryOptions_EnableCommonExprPushdown_DEFAULT bool = false

func (p *TQueryOptions) GetEnableCommonExprPushdown() (v bool) {
	if !p.IsSetEnableCommonExprPushdown() {
		return TQueryOptions_EnableCommonExprPushdown_DEFAULT
	}
	return p.EnableCommonExprPushdown
}

var TQueryOptions_ParallelInstance_DEFAULT int32 = 1

func (p *TQueryOptions) GetParallelInstance() (v int32) {
	if !p.IsSetParallelInstance() {
		return TQueryOptions_ParallelInstance_DEFAULT
	}
	return p.ParallelInstance
}

var TQueryOptions_MysqlRowBinaryFormat_DEFAULT bool = false

func (p *TQueryOptions) GetMysqlRowBinaryFormat() (v bool) {
	if !p.IsSetMysqlRowBinaryFormat() {
		return TQueryOptions_MysqlRowBinaryFormat_DEFAULT
	}
	return p.MysqlRowBinaryFormat
}

var TQueryOptions_ExternalAggBytesThreshold_DEFAULT int64 = 0

func (p *TQueryOptions) GetExternalAggBytesThreshold() (v int64) {
	if !p.IsSetExternalAggBytesThreshold() {
		return TQueryOptions_ExternalAggBytesThreshold_DEFAULT
	}
	return p.ExternalAggBytesThreshold
}

var TQueryOptions_ExternalAggPartitionBits_DEFAULT int32 = 4

func (p *TQueryOptions) GetExternalAggPartitionBits() (v int32) {
	if !p.IsSetExternalAggPartitionBits() {
		return TQueryOptions_ExternalAggPartitionBits_DEFAULT
	}
	return p.ExternalAggPartitionBits
}

var TQueryOptions_FileCacheBasePath_DEFAULT string

func (p *TQueryOptions) GetFileCacheBasePath() (v string) {
	if !p.IsSetFileCacheBasePath() {
		return TQueryOptions_FileCacheBasePath_DEFAULT
	}
	return *p.FileCacheBasePath
}

var TQueryOptions_EnableParquetLazyMat_DEFAULT bool = true

func (p *TQueryOptions) GetEnableParquetLazyMat() (v bool) {
	if !p.IsSetEnableParquetLazyMat() {
		return TQueryOptions_EnableParquetLazyMat_DEFAULT
	}
	return p.EnableParquetLazyMat
}

var TQueryOptions_EnableOrcLazyMat_DEFAULT bool = true

func (p *TQueryOptions) GetEnableOrcLazyMat() (v bool) {
	if !p.IsSetEnableOrcLazyMat() {
		return TQueryOptions_EnableOrcLazyMat_DEFAULT
	}
	return p.EnableOrcLazyMat
}

var TQueryOptions_ScanQueueMemLimit_DEFAULT int64

func (p *TQueryOptions) GetScanQueueMemLimit() (v int64) {
	if !p.IsSetScanQueueMemLimit() {
		return TQueryOptions_ScanQueueMemLimit_DEFAULT
	}
	return *p.ScanQueueMemLimit
}

var TQueryOptions_EnableScanNodeRunSerial_DEFAULT bool = false

func (p *TQueryOptions) GetEnableScanNodeRunSerial() (v bool) {
	if !p.IsSetEnableScanNodeRunSerial() {
		return TQueryOptions_EnableScanNodeRunSerial_DEFAULT
	}
	return p.EnableScanNodeRunSerial
}

var TQueryOptions_EnableInsertStrict_DEFAULT bool = false

func (p *TQueryOptions) GetEnableInsertStrict() (v bool) {
	if !p.IsSetEnableInsertStrict() {
		return TQueryOptions_EnableInsertStrict_DEFAULT
	}
	return p.EnableInsertStrict
}

var TQueryOptions_EnableInvertedIndexQuery_DEFAULT bool = true

func (p *TQueryOptions) GetEnableInvertedIndexQuery() (v bool) {
	if !p.IsSetEnableInvertedIndexQuery() {
		return TQueryOptions_EnableInvertedIndexQuery_DEFAULT
	}
	return p.EnableInvertedIndexQuery
}

var TQueryOptions_TruncateCharOrVarcharColumns_DEFAULT bool = false

func (p *TQueryOptions) GetTruncateCharOrVarcharColumns() (v bool) {
	if !p.IsSetTruncateCharOrVarcharColumns() {
		return TQueryOptions_TruncateCharOrVarcharColumns_DEFAULT
	}
	return p.TruncateCharOrVarcharColumns
}

var TQueryOptions_EnableHashJoinEarlyStartProbe_DEFAULT bool = false

func (p *TQueryOptions) GetEnableHashJoinEarlyStartProbe() (v bool) {
	if !p.IsSetEnableHashJoinEarlyStartProbe() {
		return TQueryOptions_EnableHashJoinEarlyStartProbe_DEFAULT
	}
	return p.EnableHashJoinEarlyStartProbe
}

var TQueryOptions_EnablePipelineXEngine_DEFAULT bool = true

func (p *TQueryOptions) GetEnablePipelineXEngine() (v bool) {
	if !p.IsSetEnablePipelineXEngine() {
		return TQueryOptions_EnablePipelineXEngine_DEFAULT
	}
	return p.EnablePipelineXEngine
}

var TQueryOptions_EnableMemtableOnSinkNode_DEFAULT bool = false

func (p *TQueryOptions) GetEnableMemtableOnSinkNode() (v bool) {
	if !p.IsSetEnableMemtableOnSinkNode() {
		return TQueryOptions_EnableMemtableOnSinkNode_DEFAULT
	}
	return p.EnableMemtableOnSinkNode
}

var TQueryOptions_EnableDeleteSubPredicateV2_DEFAULT bool = false

func (p *TQueryOptions) GetEnableDeleteSubPredicateV2() (v bool) {
	if !p.IsSetEnableDeleteSubPredicateV2() {
		return TQueryOptions_EnableDeleteSubPredicateV2_DEFAULT
	}
	return p.EnableDeleteSubPredicateV2
}

var TQueryOptions_FeProcessUuid_DEFAULT int64 = 0

func (p *TQueryOptions) GetFeProcessUuid() (v int64) {
	if !p.IsSetFeProcessUuid() {
		return TQueryOptions_FeProcessUuid_DEFAULT
	}
	return p.FeProcessUuid
}

var TQueryOptions_InvertedIndexConjunctionOptThreshold_DEFAULT int32 = 1000

func (p *TQueryOptions) GetInvertedIndexConjunctionOptThreshold() (v int32) {
	if !p.IsSetInvertedIndexConjunctionOptThreshold() {
		return TQueryOptions_InvertedIndexConjunctionOptThreshold_DEFAULT
	}
	return p.InvertedIndexConjunctionOptThreshold
}

var TQueryOptions_EnableProfile_DEFAULT bool = false

func (p *TQueryOptions) GetEnableProfile() (v bool) {
	if !p.IsSetEnableProfile() {
		return TQueryOptions_EnableProfile_DEFAULT
	}
	return p.EnableProfile
}

var TQueryOptions_EnablePageCache_DEFAULT bool = false

func (p *TQueryOptions) GetEnablePageCache() (v bool) {
	if !p.IsSetEnablePageCache() {
		return TQueryOptions_EnablePageCache_DEFAULT
	}
	return p.EnablePageCache
}

var TQueryOptions_AnalyzeTimeout_DEFAULT int32 = 43200

func (p *TQueryOptions) GetAnalyzeTimeout() (v int32) {
	if !p.IsSetAnalyzeTimeout() {
		return TQueryOptions_AnalyzeTimeout_DEFAULT
	}
	return p.AnalyzeTimeout
}

var TQueryOptions_FasterFloatConvert_DEFAULT bool = false

func (p *TQueryOptions) GetFasterFloatConvert() (v bool) {
	if !p.IsSetFasterFloatConvert() {
		return TQueryOptions_FasterFloatConvert_DEFAULT
	}
	return p.FasterFloatConvert
}

var TQueryOptions_EnableDecimal256_DEFAULT bool = false

func (p *TQueryOptions) GetEnableDecimal256() (v bool) {
	if !p.IsSetEnableDecimal256() {
		return TQueryOptions_EnableDecimal256_DEFAULT
	}
	return p.EnableDecimal256
}

var TQueryOptions_EnableLocalShuffle_DEFAULT bool = false

func (p *TQueryOptions) GetEnableLocalShuffle() (v bool) {
	if !p.IsSetEnableLocalShuffle() {
		return TQueryOptions_EnableLocalShuffle_DEFAULT
	}
	return p.EnableLocalShuffle
}

var TQueryOptions_SkipMissingVersion_DEFAULT bool = false

func (p *TQueryOptions) GetSkipMissingVersion() (v bool) {
	if !p.IsSetSkipMissingVersion() {
		return TQueryOptions_SkipMissingVersion_DEFAULT
	}
	return p.SkipMissingVersion
}

var TQueryOptions_RuntimeFilterWaitInfinitely_DEFAULT bool = false

func (p *TQueryOptions) GetRuntimeFilterWaitInfinitely() (v bool) {
	if !p.IsSetRuntimeFilterWaitInfinitely() {
		return TQueryOptions_RuntimeFilterWaitInfinitely_DEFAULT
	}
	return p.RuntimeFilterWaitInfinitely
}

var TQueryOptions_WaitFullBlockScheduleTimes_DEFAULT int32 = 1

func (p *TQueryOptions) GetWaitFullBlockScheduleTimes() (v int32) {
	if !p.IsSetWaitFullBlockScheduleTimes() {
		return TQueryOptions_WaitFullBlockScheduleTimes_DEFAULT
	}
	return p.WaitFullBlockScheduleTimes
}

var TQueryOptions_InvertedIndexMaxExpansions_DEFAULT int32 = 50

func (p *TQueryOptions) GetInvertedIndexMaxExpansions() (v int32) {
	if !p.IsSetInvertedIndexMaxExpansions() {
		return TQueryOptions_InvertedIndexMaxExpansions_DEFAULT
	}
	return p.InvertedIndexMaxExpansions
}

var TQueryOptions_InvertedIndexSkipThreshold_DEFAULT int32 = 50

func (p *TQueryOptions) GetInvertedIndexSkipThreshold() (v int32) {
	if !p.IsSetInvertedIndexSkipThreshold() {
		return TQueryOptions_InvertedIndexSkipThreshold_DEFAULT
	}
	return p.InvertedIndexSkipThreshold
}

var TQueryOptions_EnableParallelScan_DEFAULT bool = false

func (p *TQueryOptions) GetEnableParallelScan() (v bool) {
	if !p.IsSetEnableParallelScan() {
		return TQueryOptions_EnableParallelScan_DEFAULT
	}
	return p.EnableParallelScan
}

var TQueryOptions_ParallelScanMaxScannersCount_DEFAULT int32 = 0

func (p *TQueryOptions) GetParallelScanMaxScannersCount() (v int32) {
	if !p.IsSetParallelScanMaxScannersCount() {
		return TQueryOptions_ParallelScanMaxScannersCount_DEFAULT
	}
	return p.ParallelScanMaxScannersCount
}

var TQueryOptions_ParallelScanMinRowsPerScanner_DEFAULT int64 = 0

func (p *TQueryOptions) GetParallelScanMinRowsPerScanner() (v int64) {
	if !p.IsSetParallelScanMinRowsPerScanner() {
		return TQueryOptions_ParallelScanMinRowsPerScanner_DEFAULT
	}
	return p.ParallelScanMinRowsPerScanner
}

var TQueryOptions_SkipBadTablet_DEFAULT bool = false

func (p *TQueryOptions) GetSkipBadTablet() (v bool) {
	if !p.IsSetSkipBadTablet() {
		return TQueryOptions_SkipBadTablet_DEFAULT
	}
	return p.SkipBadTablet
}

var TQueryOptions_ScannerScaleUpRatio_DEFAULT float64 = 0.0

func (p *TQueryOptions) GetScannerScaleUpRatio() (v float64) {
	if !p.IsSetScannerScaleUpRatio() {
		return TQueryOptions_ScannerScaleUpRatio_DEFAULT
	}
	return p.ScannerScaleUpRatio
}

var TQueryOptions_EnableDistinctStreamingAggregation_DEFAULT bool = true

func (p *TQueryOptions) GetEnableDistinctStreamingAggregation() (v bool) {
	if !p.IsSetEnableDistinctStreamingAggregation() {
		return TQueryOptions_EnableDistinctStreamingAggregation_DEFAULT
	}
	return p.EnableDistinctStreamingAggregation
}

var TQueryOptions_EnableJoinSpill_DEFAULT bool = false

func (p *TQueryOptions) GetEnableJoinSpill() (v bool) {
	if !p.IsSetEnableJoinSpill() {
		return TQueryOptions_EnableJoinSpill_DEFAULT
	}
	return p.EnableJoinSpill
}

var TQueryOptions_EnableSortSpill_DEFAULT bool = false

func (p *TQueryOptions) GetEnableSortSpill() (v bool) {
	if !p.IsSetEnableSortSpill() {
		return TQueryOptions_EnableSortSpill_DEFAULT
	}
	return p.EnableSortSpill
}

var TQueryOptions_EnableAggSpill_DEFAULT bool = false

func (p *TQueryOptions) GetEnableAggSpill() (v bool) {
	if !p.IsSetEnableAggSpill() {
		return TQueryOptions_EnableAggSpill_DEFAULT
	}
	return p.EnableAggSpill
}

var TQueryOptions_MinRevocableMem_DEFAULT int64 = 0

func (p *TQueryOptions) GetMinRevocableMem() (v int64) {
	if !p.IsSetMinRevocableMem() {
		return TQueryOptions_MinRevocableMem_DEFAULT
	}
	return p.MinRevocableMem
}

var TQueryOptions_SpillStreamingAggMemLimit_DEFAULT int64 = 0

func (p *TQueryOptions) GetSpillStreamingAggMemLimit() (v int64) {
	if !p.IsSetSpillStreamingAggMemLimit() {
		return TQueryOptions_SpillStreamingAggMemLimit_DEFAULT
	}
	return p.SpillStreamingAggMemLimit
}

var TQueryOptions_DataQueueMaxBlocks_DEFAULT int64 = 0

func (p *TQueryOptions) GetDataQueueMaxBlocks() (v int64) {
	if !p.IsSetDataQueueMaxBlocks() {
		return TQueryOptions_DataQueueMaxBlocks_DEFAULT
	}
	return p.DataQueueMaxBlocks
}

var TQueryOptions_EnableCommonExprPushdownForInvertedIndex_DEFAULT bool = false

func (p *TQueryOptions) GetEnableCommonExprPushdownForInvertedIndex() (v bool) {
	if !p.IsSetEnableCommonExprPushdownForInvertedIndex() {
		return TQueryOptions_EnableCommonExprPushdownForInvertedIndex_DEFAULT
	}
	return p.EnableCommonExprPushdownForInvertedIndex
}

var TQueryOptions_LocalExchangeFreeBlocksLimit_DEFAULT int64

func (p *TQueryOptions) GetLocalExchangeFreeBlocksLimit() (v int64) {
	if !p.IsSetLocalExchangeFreeBlocksLimit() {
		return TQueryOptions_LocalExchangeFreeBlocksLimit_DEFAULT
	}
	return *p.LocalExchangeFreeBlocksLimit
}

var TQueryOptions_EnableForceSpill_DEFAULT bool = false

func (p *TQueryOptions) GetEnableForceSpill() (v bool) {
	if !p.IsSetEnableForceSpill() {
		return TQueryOptions_EnableForceSpill_DEFAULT
	}
	return p.EnableForceSpill
}

var TQueryOptions_EnableParquetFilterByMinMax_DEFAULT bool = true

func (p *TQueryOptions) GetEnableParquetFilterByMinMax() (v bool) {
	if !p.IsSetEnableParquetFilterByMinMax() {
		return TQueryOptions_EnableParquetFilterByMinMax_DEFAULT
	}
	return p.EnableParquetFilterByMinMax
}

var TQueryOptions_EnableOrcFilterByMinMax_DEFAULT bool = true

func (p *TQueryOptions) GetEnableOrcFilterByMinMax() (v bool) {
	if !p.IsSetEnableOrcFilterByMinMax() {
		return TQueryOptions_EnableOrcFilterByMinMax_DEFAULT
	}
	return p.EnableOrcFilterByMinMax
}

var TQueryOptions_MaxColumnReaderNum_DEFAULT int32 = 0

func (p *TQueryOptions) GetMaxColumnReaderNum() (v int32) {
	if !p.IsSetMaxColumnReaderNum() {
		return TQueryOptions_MaxColumnReaderNum_DEFAULT
	}
	return p.MaxColumnReaderNum
}

var TQueryOptions_EnableLocalMergeSort_DEFAULT bool = false

func (p *TQueryOptions) GetEnableLocalMergeSort() (v bool) {
	if !p.IsSetEnableLocalMergeSort() {
		return TQueryOptions_EnableLocalMergeSort_DEFAULT
	}
	return p.EnableLocalMergeSort
}

var TQueryOptions_EnableParallelResultSink_DEFAULT bool = false

func (p *TQueryOptions) GetEnableParallelResultSink() (v bool) {
	if !p.IsSetEnableParallelResultSink() {
		return TQueryOptions_EnableParallelResultSink_DEFAULT
	}
	return p.EnableParallelResultSink
}

var TQueryOptions_EnableShortCircuitQueryAccessColumnStore_DEFAULT bool = false

func (p *TQueryOptions) GetEnableShortCircuitQueryAccessColumnStore() (v bool) {
	if !p.IsSetEnableShortCircuitQueryAccessColumnStore() {
		return TQueryOptions_EnableShortCircuitQueryAccessColumnStore_DEFAULT
	}
	return p.EnableShortCircuitQueryAccessColumnStore
}

var TQueryOptions_EnableNoNeedReadDataOpt_DEFAULT bool = true

func (p *TQueryOptions) GetEnableNoNeedReadDataOpt() (v bool) {
	if !p.IsSetEnableNoNeedReadDataOpt() {
		return TQueryOptions_EnableNoNeedReadDataOpt_DEFAULT
	}
	return p.EnableNoNeedReadDataOpt
}

var TQueryOptions_ReadCsvEmptyLineAsNull_DEFAULT bool = false

func (p *TQueryOptions) GetReadCsvEmptyLineAsNull() (v bool) {
	if !p.IsSetReadCsvEmptyLineAsNull() {
		return TQueryOptions_ReadCsvEmptyLineAsNull_DEFAULT
	}
	return p.ReadCsvEmptyLineAsNull
}

var TQueryOptions_DisableFileCache_DEFAULT bool = false

func (p *TQueryOptions) GetDisableFileCache() (v bool) {
	if !p.IsSetDisableFileCache() {
		return TQueryOptions_DisableFileCache_DEFAULT
	}
	return p.DisableFileCache
}
func (p *TQueryOptions) SetAbortOnError(val bool) {
	p.AbortOnError = val
}
func (p *TQueryOptions) SetMaxErrors(val int32) {
	p.MaxErrors = val
}
func (p *TQueryOptions) SetDisableCodegen(val bool) {
	p.DisableCodegen = val
}
func (p *TQueryOptions) SetBatchSize(val int32) {
	p.BatchSize = val
}
func (p *TQueryOptions) SetNumNodes(val int32) {
	p.NumNodes = val
}
func (p *TQueryOptions) SetMaxScanRangeLength(val int64) {
	p.MaxScanRangeLength = val
}
func (p *TQueryOptions) SetNumScannerThreads(val int32) {
	p.NumScannerThreads = val
}
func (p *TQueryOptions) SetMaxIoBuffers(val int32) {
	p.MaxIoBuffers = val
}
func (p *TQueryOptions) SetAllowUnsupportedFormats(val bool) {
	p.AllowUnsupportedFormats = val
}
func (p *TQueryOptions) SetDefaultOrderByLimit(val int64) {
	p.DefaultOrderByLimit = val
}
func (p *TQueryOptions) SetMemLimit(val int64) {
	p.MemLimit = val
}
func (p *TQueryOptions) SetAbortOnDefaultLimitExceeded(val bool) {
	p.AbortOnDefaultLimitExceeded = val
}
func (p *TQueryOptions) SetQueryTimeout(val int32) {
	p.QueryTimeout = val
}
func (p *TQueryOptions) SetIsReportSuccess(val bool) {
	p.IsReportSuccess = val
}
func (p *TQueryOptions) SetCodegenLevel(val int32) {
	p.CodegenLevel = val
}
func (p *TQueryOptions) SetKuduLatestObservedTs(val int64) {
	p.KuduLatestObservedTs = val
}
func (p *TQueryOptions) SetQueryType(val TQueryType) {
	p.QueryType = val
}
func (p *TQueryOptions) SetMinReservation(val int64) {
	p.MinReservation = val
}
func (p *TQueryOptions) SetMaxReservation(val int64) {
	p.MaxReservation = val
}
func (p *TQueryOptions) SetInitialReservationTotalClaims(val int64) {
	p.InitialReservationTotalClaims = val
}
func (p *TQueryOptions) SetBufferPoolLimit(val int64) {
	p.BufferPoolLimit = val
}
func (p *TQueryOptions) SetDefaultSpillableBufferSize(val int64) {
	p.DefaultSpillableBufferSize = val
}
func (p *TQueryOptions) SetMinSpillableBufferSize(val int64) {
	p.MinSpillableBufferSize = val
}
func (p *TQueryOptions) SetMaxRowSize(val int64) {
	p.MaxRowSize = val
}
func (p *TQueryOptions) SetDisableStreamPreaggregations(val bool) {
	p.DisableStreamPreaggregations = val
}
func (p *TQueryOptions) SetMtDop(val int32) {
	p.MtDop = val
}
func (p *TQueryOptions) SetLoadMemLimit(val int64) {
	p.LoadMemLimit = val
}
func (p *TQueryOptions) SetMaxScanKeyNum(val *int32) {
	p.MaxScanKeyNum = val
}
func (p *TQueryOptions) SetMaxPushdownConditionsPerColumn(val *int32) {
	p.MaxPushdownConditionsPerColumn = val
}
func (p *TQueryOptions) SetEnableSpilling(val bool) {
	p.EnableSpilling = val
}
func (p *TQueryOptions) SetEnableEnableExchangeNodeParallelMerge(val bool) {
	p.EnableEnableExchangeNodeParallelMerge = val
}
func (p *TQueryOptions) SetRuntimeFilterWaitTimeMs(val int32) {
	p.RuntimeFilterWaitTimeMs = val
}
func (p *TQueryOptions) SetRuntimeFilterMaxInNum(val int32) {
	p.RuntimeFilterMaxInNum = val
}
func (p *TQueryOptions) SetResourceLimit(val *TResourceLimit) {
	p.ResourceLimit = val
}
func (p *TQueryOptions) SetReturnObjectDataAsBinary(val bool) {
	p.ReturnObjectDataAsBinary = val
}
func (p *TQueryOptions) SetTrimTailingSpacesForExternalTableQuery(val bool) {
	p.TrimTailingSpacesForExternalTableQuery = val
}
func (p *TQueryOptions) SetEnableFunctionPushdown(val *bool) {
	p.EnableFunctionPushdown = val
}
func (p *TQueryOptions) SetFragmentTransmissionCompressionCodec(val *string) {
	p.FragmentTransmissionCompressionCodec = val
}
func (p *TQueryOptions) SetEnableLocalExchange(val *bool) {
	p.EnableLocalExchange = val
}
func (p *TQueryOptions) SetSkipStorageEngineMerge(val bool) {
	p.SkipStorageEngineMerge = val
}
func (p *TQueryOptions) SetSkipDeletePredicate(val bool) {
	p.SkipDeletePredicate = val
}
func (p *TQueryOptions) SetEnableNewShuffleHashMethod(val *bool) {
	p.EnableNewShuffleHashMethod = val
}
func (p *TQueryOptions) SetBeExecVersion(val int32) {
	p.BeExecVersion = val
}
func (p *TQueryOptions) SetPartitionedHashJoinRowsThreshold(val int32) {
	p.PartitionedHashJoinRowsThreshold = val
}
func (p *TQueryOptions) SetEnableShareHashTableForBroadcastJoin(val *bool) {
	p.EnableShareHashTableForBroadcastJoin = val
}
func (p *TQueryOptions) SetCheckOverflowForDecimal(val bool) {
	p.CheckOverflowForDecimal = val
}
func (p *TQueryOptions) SetSkipDeleteBitmap(val bool) {
	p.SkipDeleteBitmap = val
}
func (p *TQueryOptions) SetEnablePipelineEngine(val bool) {
	p.EnablePipelineEngine = val
}
func (p *TQueryOptions) SetRepeatMaxNum(val int32) {
	p.RepeatMaxNum = val
}
func (p *TQueryOptions) SetExternalSortBytesThreshold(val int64) {
	p.ExternalSortBytesThreshold = val
}
func (p *TQueryOptions) SetPartitionedHashAggRowsThreshold(val int32) {
	p.PartitionedHashAggRowsThreshold = val
}
func (p *TQueryOptions) SetEnableFileCache(val bool) {
	p.EnableFileCache = val
}
func (p *TQueryOptions) SetInsertTimeout(val int32) {
	p.InsertTimeout = val
}
func (p *TQueryOptions) SetExecutionTimeout(val int32) {
	p.ExecutionTimeout = val
}
func (p *TQueryOptions) SetDryRunQuery(val bool) {
	p.DryRunQuery = val
}
func (p *TQueryOptions) SetEnableCommonExprPushdown(val bool) {
	p.EnableCommonExprPushdown = val
}
func (p *TQueryOptions) SetParallelInstance(val int32) {
	p.ParallelInstance = val
}
func (p *TQueryOptions) SetMysqlRowBinaryFormat(val bool) {
	p.MysqlRowBinaryFormat = val
}
func (p *TQueryOptions) SetExternalAggBytesThreshold(val int64) {
	p.ExternalAggBytesThreshold = val
}
func (p *TQueryOptions) SetExternalAggPartitionBits(val int32) {
	p.ExternalAggPartitionBits = val
}
func (p *TQueryOptions) SetFileCacheBasePath(val *string) {
	p.FileCacheBasePath = val
}
func (p *TQueryOptions) SetEnableParquetLazyMat(val bool) {
	p.EnableParquetLazyMat = val
}
func (p *TQueryOptions) SetEnableOrcLazyMat(val bool) {
	p.EnableOrcLazyMat = val
}
func (p *TQueryOptions) SetScanQueueMemLimit(val *int64) {
	p.ScanQueueMemLimit = val
}
func (p *TQueryOptions) SetEnableScanNodeRunSerial(val bool) {
	p.EnableScanNodeRunSerial = val
}
func (p *TQueryOptions) SetEnableInsertStrict(val bool) {
	p.EnableInsertStrict = val
}
func (p *TQueryOptions) SetEnableInvertedIndexQuery(val bool) {
	p.EnableInvertedIndexQuery = val
}
func (p *TQueryOptions) SetTruncateCharOrVarcharColumns(val bool) {
	p.TruncateCharOrVarcharColumns = val
}
func (p *TQueryOptions) SetEnableHashJoinEarlyStartProbe(val bool) {
	p.EnableHashJoinEarlyStartProbe = val
}
func (p *TQueryOptions) SetEnablePipelineXEngine(val bool) {
	p.EnablePipelineXEngine = val
}
func (p *TQueryOptions) SetEnableMemtableOnSinkNode(val bool) {
	p.EnableMemtableOnSinkNode = val
}
func (p *TQueryOptions) SetEnableDeleteSubPredicateV2(val bool) {
	p.EnableDeleteSubPredicateV2 = val
}
func (p *TQueryOptions) SetFeProcessUuid(val int64) {
	p.FeProcessUuid = val
}
func (p *TQueryOptions) SetInvertedIndexConjunctionOptThreshold(val int32) {
	p.InvertedIndexConjunctionOptThreshold = val
}
func (p *TQueryOptions) SetEnableProfile(val bool) {
	p.EnableProfile = val
}
func (p *TQueryOptions) SetEnablePageCache(val bool) {
	p.EnablePageCache = val
}
func (p *TQueryOptions) SetAnalyzeTimeout(val int32) {
	p.AnalyzeTimeout = val
}
func (p *TQueryOptions) SetFasterFloatConvert(val bool) {
	p.FasterFloatConvert = val
}
func (p *TQueryOptions) SetEnableDecimal256(val bool) {
	p.EnableDecimal256 = val
}
func (p *TQueryOptions) SetEnableLocalShuffle(val bool) {
	p.EnableLocalShuffle = val
}
func (p *TQueryOptions) SetSkipMissingVersion(val bool) {
	p.SkipMissingVersion = val
}
func (p *TQueryOptions) SetRuntimeFilterWaitInfinitely(val bool) {
	p.RuntimeFilterWaitInfinitely = val
}
func (p *TQueryOptions) SetWaitFullBlockScheduleTimes(val int32) {
	p.WaitFullBlockScheduleTimes = val
}
func (p *TQueryOptions) SetInvertedIndexMaxExpansions(val int32) {
	p.InvertedIndexMaxExpansions = val
}
func (p *TQueryOptions) SetInvertedIndexSkipThreshold(val int32) {
	p.InvertedIndexSkipThreshold = val
}
func (p *TQueryOptions) SetEnableParallelScan(val bool) {
	p.EnableParallelScan = val
}
func (p *TQueryOptions) SetParallelScanMaxScannersCount(val int32) {
	p.ParallelScanMaxScannersCount = val
}
func (p *TQueryOptions) SetParallelScanMinRowsPerScanner(val int64) {
	p.ParallelScanMinRowsPerScanner = val
}
func (p *TQueryOptions) SetSkipBadTablet(val bool) {
	p.SkipBadTablet = val
}
func (p *TQueryOptions) SetScannerScaleUpRatio(val float64) {
	p.ScannerScaleUpRatio = val
}
func (p *TQueryOptions) SetEnableDistinctStreamingAggregation(val bool) {
	p.EnableDistinctStreamingAggregation = val
}
func (p *TQueryOptions) SetEnableJoinSpill(val bool) {
	p.EnableJoinSpill = val
}
func (p *TQueryOptions) SetEnableSortSpill(val bool) {
	p.EnableSortSpill = val
}
func (p *TQueryOptions) SetEnableAggSpill(val bool) {
	p.EnableAggSpill = val
}
func (p *TQueryOptions) SetMinRevocableMem(val int64) {
	p.MinRevocableMem = val
}
func (p *TQueryOptions) SetSpillStreamingAggMemLimit(val int64) {
	p.SpillStreamingAggMemLimit = val
}
func (p *TQueryOptions) SetDataQueueMaxBlocks(val int64) {
	p.DataQueueMaxBlocks = val
}
func (p *TQueryOptions) SetEnableCommonExprPushdownForInvertedIndex(val bool) {
	p.EnableCommonExprPushdownForInvertedIndex = val
}
func (p *TQueryOptions) SetLocalExchangeFreeBlocksLimit(val *int64) {
	p.LocalExchangeFreeBlocksLimit = val
}
func (p *TQueryOptions) SetEnableForceSpill(val bool) {
	p.EnableForceSpill = val
}
func (p *TQueryOptions) SetEnableParquetFilterByMinMax(val bool) {
	p.EnableParquetFilterByMinMax = val
}
func (p *TQueryOptions) SetEnableOrcFilterByMinMax(val bool) {
	p.EnableOrcFilterByMinMax = val
}
func (p *TQueryOptions) SetMaxColumnReaderNum(val int32) {
	p.MaxColumnReaderNum = val
}
func (p *TQueryOptions) SetEnableLocalMergeSort(val bool) {
	p.EnableLocalMergeSort = val
}
func (p *TQueryOptions) SetEnableParallelResultSink(val bool) {
	p.EnableParallelResultSink = val
}
func (p *TQueryOptions) SetEnableShortCircuitQueryAccessColumnStore(val bool) {
	p.EnableShortCircuitQueryAccessColumnStore = val
}
func (p *TQueryOptions) SetEnableNoNeedReadDataOpt(val bool) {
	p.EnableNoNeedReadDataOpt = val
}
func (p *TQueryOptions) SetReadCsvEmptyLineAsNull(val bool) {
	p.ReadCsvEmptyLineAsNull = val
}
func (p *TQueryOptions) SetDisableFileCache(val bool) {
	p.DisableFileCache = val
}

var fieldIDToName_TQueryOptions = map[int16]string{
	1:    "abort_on_error",
	2:    "max_errors",
	3:    "disable_codegen",
	4:    "batch_size",
	5:    "num_nodes",
	6:    "max_scan_range_length",
	7:    "num_scanner_threads",
	8:    "max_io_buffers",
	9:    "allow_unsupported_formats",
	10:   "default_order_by_limit",
	12:   "mem_limit",
	13:   "abort_on_default_limit_exceeded",
	14:   "query_timeout",
	15:   "is_report_success",
	16:   "codegen_level",
	17:   "kudu_latest_observed_ts",
	18:   "query_type",
	19:   "min_reservation",
	20:   "max_reservation",
	21:   "initial_reservation_total_claims",
	22:   "buffer_pool_limit",
	23:   "default_spillable_buffer_size",
	24:   "min_spillable_buffer_size",
	25:   "max_row_size",
	26:   "disable_stream_preaggregations",
	27:   "mt_dop",
	28:   "load_mem_limit",
	29:   "max_scan_key_num",
	30:   "max_pushdown_conditions_per_column",
	31:   "enable_spilling",
	32:   "enable_enable_exchange_node_parallel_merge",
	33:   "runtime_filter_wait_time_ms",
	34:   "runtime_filter_max_in_num",
	42:   "resource_limit",
	43:   "return_object_data_as_binary",
	44:   "trim_tailing_spaces_for_external_table_query",
	45:   "enable_function_pushdown",
	46:   "fragment_transmission_compression_codec",
	48:   "enable_local_exchange",
	49:   "skip_storage_engine_merge",
	50:   "skip_delete_predicate",
	51:   "enable_new_shuffle_hash_method",
	52:   "be_exec_version",
	53:   "partitioned_hash_join_rows_threshold",
	54:   "enable_share_hash_table_for_broadcast_join",
	55:   "check_overflow_for_decimal",
	56:   "skip_delete_bitmap",
	57:   "enable_pipeline_engine",
	58:   "repeat_max_num",
	59:   "external_sort_bytes_threshold",
	60:   "partitioned_hash_agg_rows_threshold",
	61:   "enable_file_cache",
	62:   "insert_timeout",
	63:   "execution_timeout",
	64:   "dry_run_query",
	65:   "enable_common_expr_pushdown",
	66:   "parallel_instance",
	67:   "mysql_row_binary_format",
	68:   "external_agg_bytes_threshold",
	69:   "external_agg_partition_bits",
	70:   "file_cache_base_path",
	71:   "enable_parquet_lazy_mat",
	72:   "enable_orc_lazy_mat",
	73:   "scan_queue_mem_limit",
	74:   "enable_scan_node_run_serial",
	75:   "enable_insert_strict",
	76:   "enable_inverted_index_query",
	77:   "truncate_char_or_varchar_columns",
	78:   "enable_hash_join_early_start_probe",
	79:   "enable_pipeline_x_engine",
	80:   "enable_memtable_on_sink_node",
	81:   "enable_delete_sub_predicate_v2",
	82:   "fe_process_uuid",
	83:   "inverted_index_conjunction_opt_threshold",
	84:   "enable_profile",
	85:   "enable_page_cache",
	86:   "analyze_timeout",
	87:   "faster_float_convert",
	88:   "enable_decimal256",
	89:   "enable_local_shuffle",
	90:   "skip_missing_version",
	91:   "runtime_filter_wait_infinitely",
	92:   "wait_full_block_schedule_times",
	93:   "inverted_index_max_expansions",
	94:   "inverted_index_skip_threshold",
	95:   "enable_parallel_scan",
	96:   "parallel_scan_max_scanners_count",
	97:   "parallel_scan_min_rows_per_scanner",
	98:   "skip_bad_tablet",
	99:   "scanner_scale_up_ratio",
	100:  "enable_distinct_streaming_aggregation",
	101:  "enable_join_spill",
	102:  "enable_sort_spill",
	103:  "enable_agg_spill",
	104:  "min_revocable_mem",
	105:  "spill_streaming_agg_mem_limit",
	106:  "data_queue_max_blocks",
	107:  "enable_common_expr_pushdown_for_inverted_index",
	108:  "local_exchange_free_blocks_limit",
	109:  "enable_force_spill",
	110:  "enable_parquet_filter_by_min_max",
	111:  "enable_orc_filter_by_min_max",
	112:  "max_column_reader_num",
	113:  "enable_local_merge_sort",
	114:  "enable_parallel_result_sink",
	115:  "enable_short_circuit_query_access_column_store",
	116:  "enable_no_need_read_data_opt",
	117:  "read_csv_empty_line_as_null",
	1000: "disable_file_cache",
}

func (p *TQueryOptions) IsSetAbortOnError() bool {
	return p.AbortOnError != TQueryOptions_AbortOnError_DEFAULT
}

func (p *TQueryOptions) IsSetMaxErrors() bool {
	return p.MaxErrors != TQueryOptions_MaxErrors_DEFAULT
}

func (p *TQueryOptions) IsSetDisableCodegen() bool {
	return p.DisableCodegen != TQueryOptions_DisableCodegen_DEFAULT
}

func (p *TQueryOptions) IsSetBatchSize() bool {
	return p.BatchSize != TQueryOptions_BatchSize_DEFAULT
}

func (p *TQueryOptions) IsSetNumNodes() bool {
	return p.NumNodes != TQueryOptions_NumNodes_DEFAULT
}

func (p *TQueryOptions) IsSetMaxScanRangeLength() bool {
	return p.MaxScanRangeLength != TQueryOptions_MaxScanRangeLength_DEFAULT
}

func (p *TQueryOptions) IsSetNumScannerThreads() bool {
	return p.NumScannerThreads != TQueryOptions_NumScannerThreads_DEFAULT
}

func (p *TQueryOptions) IsSetMaxIoBuffers() bool {
	return p.MaxIoBuffers != TQueryOptions_MaxIoBuffers_DEFAULT
}

func (p *TQueryOptions) IsSetAllowUnsupportedFormats() bool {
	return p.AllowUnsupportedFormats != TQueryOptions_AllowUnsupportedFormats_DEFAULT
}

func (p *TQueryOptions) IsSetDefaultOrderByLimit() bool {
	return p.DefaultOrderByLimit != TQueryOptions_DefaultOrderByLimit_DEFAULT
}

func (p *TQueryOptions) IsSetMemLimit() bool {
	return p.MemLimit != TQueryOptions_MemLimit_DEFAULT
}

func (p *TQueryOptions) IsSetAbortOnDefaultLimitExceeded() bool {
	return p.AbortOnDefaultLimitExceeded != TQueryOptions_AbortOnDefaultLimitExceeded_DEFAULT
}

func (p *TQueryOptions) IsSetQueryTimeout() bool {
	return p.QueryTimeout != TQueryOptions_QueryTimeout_DEFAULT
}

func (p *TQueryOptions) IsSetIsReportSuccess() bool {
	return p.IsReportSuccess != TQueryOptions_IsReportSuccess_DEFAULT
}

func (p *TQueryOptions) IsSetCodegenLevel() bool {
	return p.CodegenLevel != TQueryOptions_CodegenLevel_DEFAULT
}

func (p *TQueryOptions) IsSetKuduLatestObservedTs() bool {
	return p.KuduLatestObservedTs != TQueryOptions_KuduLatestObservedTs_DEFAULT
}

func (p *TQueryOptions) IsSetQueryType() bool {
	return p.QueryType != TQueryOptions_QueryType_DEFAULT
}

func (p *TQueryOptions) IsSetMinReservation() bool {
	return p.MinReservation != TQueryOptions_MinReservation_DEFAULT
}

func (p *TQueryOptions) IsSetMaxReservation() bool {
	return p.MaxReservation != TQueryOptions_MaxReservation_DEFAULT
}

func (p *TQueryOptions) IsSetInitialReservationTotalClaims() bool {
	return p.InitialReservationTotalClaims != TQueryOptions_InitialReservationTotalClaims_DEFAULT
}

func (p *TQueryOptions) IsSetBufferPoolLimit() bool {
	return p.BufferPoolLimit != TQueryOptions_BufferPoolLimit_DEFAULT
}

func (p *TQueryOptions) IsSetDefaultSpillableBufferSize() bool {
	return p.DefaultSpillableBufferSize != TQueryOptions_DefaultSpillableBufferSize_DEFAULT
}

func (p *TQueryOptions) IsSetMinSpillableBufferSize() bool {
	return p.MinSpillableBufferSize != TQueryOptions_MinSpillableBufferSize_DEFAULT
}

func (p *TQueryOptions) IsSetMaxRowSize() bool {
	return p.MaxRowSize != TQueryOptions_MaxRowSize_DEFAULT
}

func (p *TQueryOptions) IsSetDisableStreamPreaggregations() bool {
	return p.DisableStreamPreaggregations != TQueryOptions_DisableStreamPreaggregations_DEFAULT
}

func (p *TQueryOptions) IsSetMtDop() bool {
	return p.MtDop != TQueryOptions_MtDop_DEFAULT
}

func (p *TQueryOptions) IsSetLoadMemLimit() bool {
	return p.LoadMemLimit != TQueryOptions_LoadMemLimit_DEFAULT
}

func (p *TQueryOptions) IsSetMaxScanKeyNum() bool {
	return p.MaxScanKeyNum != nil
}

func (p *TQueryOptions) IsSetMaxPushdownConditionsPerColumn() bool {
	return p.MaxPushdownConditionsPerColumn != nil
}

func (p *TQueryOptions) IsSetEnableSpilling() bool {
	return p.EnableSpilling != TQueryOptions_EnableSpilling_DEFAULT
}

func (p *TQueryOptions) IsSetEnableEnableExchangeNodeParallelMerge() bool {
	return p.EnableEnableExchangeNodeParallelMerge != TQueryOptions_EnableEnableExchangeNodeParallelMerge_DEFAULT
}

func (p *TQueryOptions) IsSetRuntimeFilterWaitTimeMs() bool {
	return p.RuntimeFilterWaitTimeMs != TQueryOptions_RuntimeFilterWaitTimeMs_DEFAULT
}

func (p *TQueryOptions) IsSetRuntimeFilterMaxInNum() bool {
	return p.RuntimeFilterMaxInNum != TQueryOptions_RuntimeFilterMaxInNum_DEFAULT
}

func (p *TQueryOptions) IsSetResourceLimit() bool {
	return p.ResourceLimit != nil
}

func (p *TQueryOptions) IsSetReturnObjectDataAsBinary() bool {
	return p.ReturnObjectDataAsBinary != TQueryOptions_ReturnObjectDataAsBinary_DEFAULT
}

func (p *TQueryOptions) IsSetTrimTailingSpacesForExternalTableQuery() bool {
	return p.TrimTailingSpacesForExternalTableQuery != TQueryOptions_TrimTailingSpacesForExternalTableQuery_DEFAULT
}

func (p *TQueryOptions) IsSetEnableFunctionPushdown() bool {
	return p.EnableFunctionPushdown != nil
}

func (p *TQueryOptions) IsSetFragmentTransmissionCompressionCodec() bool {
	return p.FragmentTransmissionCompressionCodec != nil
}

func (p *TQueryOptions) IsSetEnableLocalExchange() bool {
	return p.EnableLocalExchange != nil
}

func (p *TQueryOptions) IsSetSkipStorageEngineMerge() bool {
	return p.SkipStorageEngineMerge != TQueryOptions_SkipStorageEngineMerge_DEFAULT
}

func (p *TQueryOptions) IsSetSkipDeletePredicate() bool {
	return p.SkipDeletePredicate != TQueryOptions_SkipDeletePredicate_DEFAULT
}

func (p *TQueryOptions) IsSetEnableNewShuffleHashMethod() bool {
	return p.EnableNewShuffleHashMethod != nil
}

func (p *TQueryOptions) IsSetBeExecVersion() bool {
	return p.BeExecVersion != TQueryOptions_BeExecVersion_DEFAULT
}

func (p *TQueryOptions) IsSetPartitionedHashJoinRowsThreshold() bool {
	return p.PartitionedHashJoinRowsThreshold != TQueryOptions_PartitionedHashJoinRowsThreshold_DEFAULT
}

func (p *TQueryOptions) IsSetEnableShareHashTableForBroadcastJoin() bool {
	return p.EnableShareHashTableForBroadcastJoin != nil
}

func (p *TQueryOptions) IsSetCheckOverflowForDecimal() bool {
	return p.CheckOverflowForDecimal != TQueryOptions_CheckOverflowForDecimal_DEFAULT
}

func (p *TQueryOptions) IsSetSkipDeleteBitmap() bool {
	return p.SkipDeleteBitmap != TQueryOptions_SkipDeleteBitmap_DEFAULT
}

func (p *TQueryOptions) IsSetEnablePipelineEngine() bool {
	return p.EnablePipelineEngine != TQueryOptions_EnablePipelineEngine_DEFAULT
}

func (p *TQueryOptions) IsSetRepeatMaxNum() bool {
	return p.RepeatMaxNum != TQueryOptions_RepeatMaxNum_DEFAULT
}

func (p *TQueryOptions) IsSetExternalSortBytesThreshold() bool {
	return p.ExternalSortBytesThreshold != TQueryOptions_ExternalSortBytesThreshold_DEFAULT
}

func (p *TQueryOptions) IsSetPartitionedHashAggRowsThreshold() bool {
	return p.PartitionedHashAggRowsThreshold != TQueryOptions_PartitionedHashAggRowsThreshold_DEFAULT
}

func (p *TQueryOptions) IsSetEnableFileCache() bool {
	return p.EnableFileCache != TQueryOptions_EnableFileCache_DEFAULT
}

func (p *TQueryOptions) IsSetInsertTimeout() bool {
	return p.InsertTimeout != TQueryOptions_InsertTimeout_DEFAULT
}

func (p *TQueryOptions) IsSetExecutionTimeout() bool {
	return p.ExecutionTimeout != TQueryOptions_ExecutionTimeout_DEFAULT
}

func (p *TQueryOptions) IsSetDryRunQuery() bool {
	return p.DryRunQuery != TQueryOptions_DryRunQuery_DEFAULT
}

func (p *TQueryOptions) IsSetEnableCommonExprPushdown() bool {
	return p.EnableCommonExprPushdown != TQueryOptions_EnableCommonExprPushdown_DEFAULT
}

func (p *TQueryOptions) IsSetParallelInstance() bool {
	return p.ParallelInstance != TQueryOptions_ParallelInstance_DEFAULT
}

func (p *TQueryOptions) IsSetMysqlRowBinaryFormat() bool {
	return p.MysqlRowBinaryFormat != TQueryOptions_MysqlRowBinaryFormat_DEFAULT
}

func (p *TQueryOptions) IsSetExternalAggBytesThreshold() bool {
	return p.ExternalAggBytesThreshold != TQueryOptions_ExternalAggBytesThreshold_DEFAULT
}

func (p *TQueryOptions) IsSetExternalAggPartitionBits() bool {
	return p.ExternalAggPartitionBits != TQueryOptions_ExternalAggPartitionBits_DEFAULT
}

func (p *TQueryOptions) IsSetFileCacheBasePath() bool {
	return p.FileCacheBasePath != nil
}

func (p *TQueryOptions) IsSetEnableParquetLazyMat() bool {
	return p.EnableParquetLazyMat != TQueryOptions_EnableParquetLazyMat_DEFAULT
}

func (p *TQueryOptions) IsSetEnableOrcLazyMat() bool {
	return p.EnableOrcLazyMat != TQueryOptions_EnableOrcLazyMat_DEFAULT
}

func (p *TQueryOptions) IsSetScanQueueMemLimit() bool {
	return p.ScanQueueMemLimit != nil
}

func (p *TQueryOptions) IsSetEnableScanNodeRunSerial() bool {
	return p.EnableScanNodeRunSerial != TQueryOptions_EnableScanNodeRunSerial_DEFAULT
}

func (p *TQueryOptions) IsSetEnableInsertStrict() bool {
	return p.EnableInsertStrict != TQueryOptions_EnableInsertStrict_DEFAULT
}

func (p *TQueryOptions) IsSetEnableInvertedIndexQuery() bool {
	return p.EnableInvertedIndexQuery != TQueryOptions_EnableInvertedIndexQuery_DEFAULT
}

func (p *TQueryOptions) IsSetTruncateCharOrVarcharColumns() bool {
	return p.TruncateCharOrVarcharColumns != TQueryOptions_TruncateCharOrVarcharColumns_DEFAULT
}

func (p *TQueryOptions) IsSetEnableHashJoinEarlyStartProbe() bool {
	return p.EnableHashJoinEarlyStartProbe != TQueryOptions_EnableHashJoinEarlyStartProbe_DEFAULT
}

func (p *TQueryOptions) IsSetEnablePipelineXEngine() bool {
	return p.EnablePipelineXEngine != TQueryOptions_EnablePipelineXEngine_DEFAULT
}

func (p *TQueryOptions) IsSetEnableMemtableOnSinkNode() bool {
	return p.EnableMemtableOnSinkNode != TQueryOptions_EnableMemtableOnSinkNode_DEFAULT
}

func (p *TQueryOptions) IsSetEnableDeleteSubPredicateV2() bool {
	return p.EnableDeleteSubPredicateV2 != TQueryOptions_EnableDeleteSubPredicateV2_DEFAULT
}

func (p *TQueryOptions) IsSetFeProcessUuid() bool {
	return p.FeProcessUuid != TQueryOptions_FeProcessUuid_DEFAULT
}

func (p *TQueryOptions) IsSetInvertedIndexConjunctionOptThreshold() bool {
	return p.InvertedIndexConjunctionOptThreshold != TQueryOptions_InvertedIndexConjunctionOptThreshold_DEFAULT
}

func (p *TQueryOptions) IsSetEnableProfile() bool {
	return p.EnableProfile != TQueryOptions_EnableProfile_DEFAULT
}

func (p *TQueryOptions) IsSetEnablePageCache() bool {
	return p.EnablePageCache != TQueryOptions_EnablePageCache_DEFAULT
}

func (p *TQueryOptions) IsSetAnalyzeTimeout() bool {
	return p.AnalyzeTimeout != TQueryOptions_AnalyzeTimeout_DEFAULT
}

func (p *TQueryOptions) IsSetFasterFloatConvert() bool {
	return p.FasterFloatConvert != TQueryOptions_FasterFloatConvert_DEFAULT
}

func (p *TQueryOptions) IsSetEnableDecimal256() bool {
	return p.EnableDecimal256 != TQueryOptions_EnableDecimal256_DEFAULT
}

func (p *TQueryOptions) IsSetEnableLocalShuffle() bool {
	return p.EnableLocalShuffle != TQueryOptions_EnableLocalShuffle_DEFAULT
}

func (p *TQueryOptions) IsSetSkipMissingVersion() bool {
	return p.SkipMissingVersion != TQueryOptions_SkipMissingVersion_DEFAULT
}

func (p *TQueryOptions) IsSetRuntimeFilterWaitInfinitely() bool {
	return p.RuntimeFilterWaitInfinitely != TQueryOptions_RuntimeFilterWaitInfinitely_DEFAULT
}

func (p *TQueryOptions) IsSetWaitFullBlockScheduleTimes() bool {
	return p.WaitFullBlockScheduleTimes != TQueryOptions_WaitFullBlockScheduleTimes_DEFAULT
}

func (p *TQueryOptions) IsSetInvertedIndexMaxExpansions() bool {
	return p.InvertedIndexMaxExpansions != TQueryOptions_InvertedIndexMaxExpansions_DEFAULT
}

func (p *TQueryOptions) IsSetInvertedIndexSkipThreshold() bool {
	return p.InvertedIndexSkipThreshold != TQueryOptions_InvertedIndexSkipThreshold_DEFAULT
}

func (p *TQueryOptions) IsSetEnableParallelScan() bool {
	return p.EnableParallelScan != TQueryOptions_EnableParallelScan_DEFAULT
}

func (p *TQueryOptions) IsSetParallelScanMaxScannersCount() bool {
	return p.ParallelScanMaxScannersCount != TQueryOptions_ParallelScanMaxScannersCount_DEFAULT
}

func (p *TQueryOptions) IsSetParallelScanMinRowsPerScanner() bool {
	return p.ParallelScanMinRowsPerScanner != TQueryOptions_ParallelScanMinRowsPerScanner_DEFAULT
}

func (p *TQueryOptions) IsSetSkipBadTablet() bool {
	return p.SkipBadTablet != TQueryOptions_SkipBadTablet_DEFAULT
}

func (p *TQueryOptions) IsSetScannerScaleUpRatio() bool {
	return p.ScannerScaleUpRatio != TQueryOptions_ScannerScaleUpRatio_DEFAULT
}

func (p *TQueryOptions) IsSetEnableDistinctStreamingAggregation() bool {
	return p.EnableDistinctStreamingAggregation != TQueryOptions_EnableDistinctStreamingAggregation_DEFAULT
}

func (p *TQueryOptions) IsSetEnableJoinSpill() bool {
	return p.EnableJoinSpill != TQueryOptions_EnableJoinSpill_DEFAULT
}

func (p *TQueryOptions) IsSetEnableSortSpill() bool {
	return p.EnableSortSpill != TQueryOptions_EnableSortSpill_DEFAULT
}

func (p *TQueryOptions) IsSetEnableAggSpill() bool {
	return p.EnableAggSpill != TQueryOptions_EnableAggSpill_DEFAULT
}

func (p *TQueryOptions) IsSetMinRevocableMem() bool {
	return p.MinRevocableMem != TQueryOptions_MinRevocableMem_DEFAULT
}

func (p *TQueryOptions) IsSetSpillStreamingAggMemLimit() bool {
	return p.SpillStreamingAggMemLimit != TQueryOptions_SpillStreamingAggMemLimit_DEFAULT
}

func (p *TQueryOptions) IsSetDataQueueMaxBlocks() bool {
	return p.DataQueueMaxBlocks != TQueryOptions_DataQueueMaxBlocks_DEFAULT
}

func (p *TQueryOptions) IsSetEnableCommonExprPushdownForInvertedIndex() bool {
	return p.EnableCommonExprPushdownForInvertedIndex != TQueryOptions_EnableCommonExprPushdownForInvertedIndex_DEFAULT
}

func (p *TQueryOptions) IsSetLocalExchangeFreeBlocksLimit() bool {
	return p.LocalExchangeFreeBlocksLimit != nil
}

func (p *TQueryOptions) IsSetEnableForceSpill() bool {
	return p.EnableForceSpill != TQueryOptions_EnableForceSpill_DEFAULT
}

func (p *TQueryOptions) IsSetEnableParquetFilterByMinMax() bool {
	return p.EnableParquetFilterByMinMax != TQueryOptions_EnableParquetFilterByMinMax_DEFAULT
}

func (p *TQueryOptions) IsSetEnableOrcFilterByMinMax() bool {
	return p.EnableOrcFilterByMinMax != TQueryOptions_EnableOrcFilterByMinMax_DEFAULT
}

func (p *TQueryOptions) IsSetMaxColumnReaderNum() bool {
	return p.MaxColumnReaderNum != TQueryOptions_MaxColumnReaderNum_DEFAULT
}

func (p *TQueryOptions) IsSetEnableLocalMergeSort() bool {
	return p.EnableLocalMergeSort != TQueryOptions_EnableLocalMergeSort_DEFAULT
}

func (p *TQueryOptions) IsSetEnableParallelResultSink() bool {
	return p.EnableParallelResultSink != TQueryOptions_EnableParallelResultSink_DEFAULT
}

func (p *TQueryOptions) IsSetEnableShortCircuitQueryAccessColumnStore() bool {
	return p.EnableShortCircuitQueryAccessColumnStore != TQueryOptions_EnableShortCircuitQueryAccessColumnStore_DEFAULT
}

func (p *TQueryOptions) IsSetEnableNoNeedReadDataOpt() bool {
	return p.EnableNoNeedReadDataOpt != TQueryOptions_EnableNoNeedReadDataOpt_DEFAULT
}

func (p *TQueryOptions) IsSetReadCsvEmptyLineAsNull() bool {
	return p.ReadCsvEmptyLineAsNull != TQueryOptions_ReadCsvEmptyLineAsNull_DEFAULT
}

func (p *TQueryOptions) IsSetDisableFileCache() bool {
	return p.DisableFileCache != TQueryOptions_DisableFileCache_DEFAULT
}

func (p *TQueryOptions) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 29:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 30:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 32:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 33:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField33(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 34:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField34(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 42:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField42(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 43:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField43(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 44:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField44(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 45:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField45(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 46:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField46(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 48:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField48(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 49:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField49(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 50:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField50(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 51:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField51(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 52:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField52(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 53:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField53(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 54:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField54(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 55:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField55(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 56:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField56(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 57:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField57(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 58:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField58(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 59:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField59(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 60:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField60(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 61:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField61(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 62:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField62(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 63:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField63(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 64:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField64(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 65:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField65(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 66:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField66(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 67:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField67(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 68:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField68(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 69:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField69(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 70:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField70(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 71:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField71(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 72:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField72(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 73:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField73(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 74:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField74(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 75:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField75(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 76:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField76(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 77:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField77(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 78:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField78(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 79:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField79(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 80:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField80(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 81:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField81(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 82:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField82(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 83:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField83(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 84:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField84(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 85:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField85(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 86:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField86(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 87:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField87(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 88:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField88(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 89:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField89(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 90:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField90(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 91:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField91(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 92:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField92(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 93:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField93(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 94:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField94(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 95:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField95(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 96:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField96(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 97:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField97(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 98:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField98(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 99:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField99(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 104:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField104(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 105:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField105(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 106:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField106(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 107:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField107(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 108:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField108(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 109:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField109(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 110:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField110(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 111:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField111(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 112:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField112(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 113:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField113(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 114:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField114(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 115:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField115(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 116:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField116(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 117:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField117(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1000:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1000(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TQueryOptions[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TQueryOptions) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AbortOnError = _field
	return nil
}
func (p *TQueryOptions) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxErrors = _field
	return nil
}
func (p *TQueryOptions) ReadField3(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DisableCodegen = _field
	return nil
}
func (p *TQueryOptions) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BatchSize = _field
	return nil
}
func (p *TQueryOptions) ReadField5(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumNodes = _field
	return nil
}
func (p *TQueryOptions) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxScanRangeLength = _field
	return nil
}
func (p *TQueryOptions) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumScannerThreads = _field
	return nil
}
func (p *TQueryOptions) ReadField8(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxIoBuffers = _field
	return nil
}
func (p *TQueryOptions) ReadField9(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AllowUnsupportedFormats = _field
	return nil
}
func (p *TQueryOptions) ReadField10(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DefaultOrderByLimit = _field
	return nil
}
func (p *TQueryOptions) ReadField12(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemLimit = _field
	return nil
}
func (p *TQueryOptions) ReadField13(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AbortOnDefaultLimitExceeded = _field
	return nil
}
func (p *TQueryOptions) ReadField14(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.QueryTimeout = _field
	return nil
}
func (p *TQueryOptions) ReadField15(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsReportSuccess = _field
	return nil
}
func (p *TQueryOptions) ReadField16(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CodegenLevel = _field
	return nil
}
func (p *TQueryOptions) ReadField17(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.KuduLatestObservedTs = _field
	return nil
}
func (p *TQueryOptions) ReadField18(iprot thrift.TProtocol) error {

	var _field TQueryType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TQueryType(v)
	}
	p.QueryType = _field
	return nil
}
func (p *TQueryOptions) ReadField19(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MinReservation = _field
	return nil
}
func (p *TQueryOptions) ReadField20(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxReservation = _field
	return nil
}
func (p *TQueryOptions) ReadField21(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.InitialReservationTotalClaims = _field
	return nil
}
func (p *TQueryOptions) ReadField22(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BufferPoolLimit = _field
	return nil
}
func (p *TQueryOptions) ReadField23(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DefaultSpillableBufferSize = _field
	return nil
}
func (p *TQueryOptions) ReadField24(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MinSpillableBufferSize = _field
	return nil
}
func (p *TQueryOptions) ReadField25(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxRowSize = _field
	return nil
}
func (p *TQueryOptions) ReadField26(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DisableStreamPreaggregations = _field
	return nil
}
func (p *TQueryOptions) ReadField27(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MtDop = _field
	return nil
}
func (p *TQueryOptions) ReadField28(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LoadMemLimit = _field
	return nil
}
func (p *TQueryOptions) ReadField29(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxScanKeyNum = _field
	return nil
}
func (p *TQueryOptions) ReadField30(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxPushdownConditionsPerColumn = _field
	return nil
}
func (p *TQueryOptions) ReadField31(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableSpilling = _field
	return nil
}
func (p *TQueryOptions) ReadField32(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableEnableExchangeNodeParallelMerge = _field
	return nil
}
func (p *TQueryOptions) ReadField33(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RuntimeFilterWaitTimeMs = _field
	return nil
}
func (p *TQueryOptions) ReadField34(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RuntimeFilterMaxInNum = _field
	return nil
}
func (p *TQueryOptions) ReadField42(iprot thrift.TProtocol) error {
	_field := NewTResourceLimit()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ResourceLimit = _field
	return nil
}
func (p *TQueryOptions) ReadField43(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ReturnObjectDataAsBinary = _field
	return nil
}
func (p *TQueryOptions) ReadField44(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TrimTailingSpacesForExternalTableQuery = _field
	return nil
}
func (p *TQueryOptions) ReadField45(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnableFunctionPushdown = _field
	return nil
}
func (p *TQueryOptions) ReadField46(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FragmentTransmissionCompressionCodec = _field
	return nil
}
func (p *TQueryOptions) ReadField48(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnableLocalExchange = _field
	return nil
}
func (p *TQueryOptions) ReadField49(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SkipStorageEngineMerge = _field
	return nil
}
func (p *TQueryOptions) ReadField50(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SkipDeletePredicate = _field
	return nil
}
func (p *TQueryOptions) ReadField51(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnableNewShuffleHashMethod = _field
	return nil
}
func (p *TQueryOptions) ReadField52(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BeExecVersion = _field
	return nil
}
func (p *TQueryOptions) ReadField53(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PartitionedHashJoinRowsThreshold = _field
	return nil
}
func (p *TQueryOptions) ReadField54(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnableShareHashTableForBroadcastJoin = _field
	return nil
}
func (p *TQueryOptions) ReadField55(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CheckOverflowForDecimal = _field
	return nil
}
func (p *TQueryOptions) ReadField56(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SkipDeleteBitmap = _field
	return nil
}
func (p *TQueryOptions) ReadField57(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnablePipelineEngine = _field
	return nil
}
func (p *TQueryOptions) ReadField58(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RepeatMaxNum = _field
	return nil
}
func (p *TQueryOptions) ReadField59(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExternalSortBytesThreshold = _field
	return nil
}
func (p *TQueryOptions) ReadField60(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PartitionedHashAggRowsThreshold = _field
	return nil
}
func (p *TQueryOptions) ReadField61(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableFileCache = _field
	return nil
}
func (p *TQueryOptions) ReadField62(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.InsertTimeout = _field
	return nil
}
func (p *TQueryOptions) ReadField63(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExecutionTimeout = _field
	return nil
}
func (p *TQueryOptions) ReadField64(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DryRunQuery = _field
	return nil
}
func (p *TQueryOptions) ReadField65(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableCommonExprPushdown = _field
	return nil
}
func (p *TQueryOptions) ReadField66(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ParallelInstance = _field
	return nil
}
func (p *TQueryOptions) ReadField67(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MysqlRowBinaryFormat = _field
	return nil
}
func (p *TQueryOptions) ReadField68(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExternalAggBytesThreshold = _field
	return nil
}
func (p *TQueryOptions) ReadField69(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExternalAggPartitionBits = _field
	return nil
}
func (p *TQueryOptions) ReadField70(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FileCacheBasePath = _field
	return nil
}
func (p *TQueryOptions) ReadField71(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableParquetLazyMat = _field
	return nil
}
func (p *TQueryOptions) ReadField72(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableOrcLazyMat = _field
	return nil
}
func (p *TQueryOptions) ReadField73(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ScanQueueMemLimit = _field
	return nil
}
func (p *TQueryOptions) ReadField74(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableScanNodeRunSerial = _field
	return nil
}
func (p *TQueryOptions) ReadField75(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableInsertStrict = _field
	return nil
}
func (p *TQueryOptions) ReadField76(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableInvertedIndexQuery = _field
	return nil
}
func (p *TQueryOptions) ReadField77(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TruncateCharOrVarcharColumns = _field
	return nil
}
func (p *TQueryOptions) ReadField78(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableHashJoinEarlyStartProbe = _field
	return nil
}
func (p *TQueryOptions) ReadField79(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnablePipelineXEngine = _field
	return nil
}
func (p *TQueryOptions) ReadField80(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableMemtableOnSinkNode = _field
	return nil
}
func (p *TQueryOptions) ReadField81(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableDeleteSubPredicateV2 = _field
	return nil
}
func (p *TQueryOptions) ReadField82(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FeProcessUuid = _field
	return nil
}
func (p *TQueryOptions) ReadField83(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.InvertedIndexConjunctionOptThreshold = _field
	return nil
}
func (p *TQueryOptions) ReadField84(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableProfile = _field
	return nil
}
func (p *TQueryOptions) ReadField85(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnablePageCache = _field
	return nil
}
func (p *TQueryOptions) ReadField86(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AnalyzeTimeout = _field
	return nil
}
func (p *TQueryOptions) ReadField87(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FasterFloatConvert = _field
	return nil
}
func (p *TQueryOptions) ReadField88(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableDecimal256 = _field
	return nil
}
func (p *TQueryOptions) ReadField89(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableLocalShuffle = _field
	return nil
}
func (p *TQueryOptions) ReadField90(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SkipMissingVersion = _field
	return nil
}
func (p *TQueryOptions) ReadField91(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RuntimeFilterWaitInfinitely = _field
	return nil
}
func (p *TQueryOptions) ReadField92(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WaitFullBlockScheduleTimes = _field
	return nil
}
func (p *TQueryOptions) ReadField93(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.InvertedIndexMaxExpansions = _field
	return nil
}
func (p *TQueryOptions) ReadField94(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.InvertedIndexSkipThreshold = _field
	return nil
}
func (p *TQueryOptions) ReadField95(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableParallelScan = _field
	return nil
}
func (p *TQueryOptions) ReadField96(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ParallelScanMaxScannersCount = _field
	return nil
}
func (p *TQueryOptions) ReadField97(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ParallelScanMinRowsPerScanner = _field
	return nil
}
func (p *TQueryOptions) ReadField98(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SkipBadTablet = _field
	return nil
}
func (p *TQueryOptions) ReadField99(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ScannerScaleUpRatio = _field
	return nil
}
func (p *TQueryOptions) ReadField100(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableDistinctStreamingAggregation = _field
	return nil
}
func (p *TQueryOptions) ReadField101(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableJoinSpill = _field
	return nil
}
func (p *TQueryOptions) ReadField102(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableSortSpill = _field
	return nil
}
func (p *TQueryOptions) ReadField103(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableAggSpill = _field
	return nil
}
func (p *TQueryOptions) ReadField104(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MinRevocableMem = _field
	return nil
}
func (p *TQueryOptions) ReadField105(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SpillStreamingAggMemLimit = _field
	return nil
}
func (p *TQueryOptions) ReadField106(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DataQueueMaxBlocks = _field
	return nil
}
func (p *TQueryOptions) ReadField107(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableCommonExprPushdownForInvertedIndex = _field
	return nil
}
func (p *TQueryOptions) ReadField108(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LocalExchangeFreeBlocksLimit = _field
	return nil
}
func (p *TQueryOptions) ReadField109(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableForceSpill = _field
	return nil
}
func (p *TQueryOptions) ReadField110(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableParquetFilterByMinMax = _field
	return nil
}
func (p *TQueryOptions) ReadField111(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableOrcFilterByMinMax = _field
	return nil
}
func (p *TQueryOptions) ReadField112(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxColumnReaderNum = _field
	return nil
}
func (p *TQueryOptions) ReadField113(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableLocalMergeSort = _field
	return nil
}
func (p *TQueryOptions) ReadField114(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableParallelResultSink = _field
	return nil
}
func (p *TQueryOptions) ReadField115(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableShortCircuitQueryAccessColumnStore = _field
	return nil
}
func (p *TQueryOptions) ReadField116(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnableNoNeedReadDataOpt = _field
	return nil
}
func (p *TQueryOptions) ReadField117(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ReadCsvEmptyLineAsNull = _field
	return nil
}
func (p *TQueryOptions) ReadField1000(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DisableFileCache = _field
	return nil
}

func (p *TQueryOptions) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TQueryOptions"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField33(oprot); err != nil {
			fieldId = 33
			goto WriteFieldError
		}
		if err = p.writeField34(oprot); err != nil {
			fieldId = 34
			goto WriteFieldError
		}
		if err = p.writeField42(oprot); err != nil {
			fieldId = 42
			goto WriteFieldError
		}
		if err = p.writeField43(oprot); err != nil {
			fieldId = 43
			goto WriteFieldError
		}
		if err = p.writeField44(oprot); err != nil {
			fieldId = 44
			goto WriteFieldError
		}
		if err = p.writeField45(oprot); err != nil {
			fieldId = 45
			goto WriteFieldError
		}
		if err = p.writeField46(oprot); err != nil {
			fieldId = 46
			goto WriteFieldError
		}
		if err = p.writeField48(oprot); err != nil {
			fieldId = 48
			goto WriteFieldError
		}
		if err = p.writeField49(oprot); err != nil {
			fieldId = 49
			goto WriteFieldError
		}
		if err = p.writeField50(oprot); err != nil {
			fieldId = 50
			goto WriteFieldError
		}
		if err = p.writeField51(oprot); err != nil {
			fieldId = 51
			goto WriteFieldError
		}
		if err = p.writeField52(oprot); err != nil {
			fieldId = 52
			goto WriteFieldError
		}
		if err = p.writeField53(oprot); err != nil {
			fieldId = 53
			goto WriteFieldError
		}
		if err = p.writeField54(oprot); err != nil {
			fieldId = 54
			goto WriteFieldError
		}
		if err = p.writeField55(oprot); err != nil {
			fieldId = 55
			goto WriteFieldError
		}
		if err = p.writeField56(oprot); err != nil {
			fieldId = 56
			goto WriteFieldError
		}
		if err = p.writeField57(oprot); err != nil {
			fieldId = 57
			goto WriteFieldError
		}
		if err = p.writeField58(oprot); err != nil {
			fieldId = 58
			goto WriteFieldError
		}
		if err = p.writeField59(oprot); err != nil {
			fieldId = 59
			goto WriteFieldError
		}
		if err = p.writeField60(oprot); err != nil {
			fieldId = 60
			goto WriteFieldError
		}
		if err = p.writeField61(oprot); err != nil {
			fieldId = 61
			goto WriteFieldError
		}
		if err = p.writeField62(oprot); err != nil {
			fieldId = 62
			goto WriteFieldError
		}
		if err = p.writeField63(oprot); err != nil {
			fieldId = 63
			goto WriteFieldError
		}
		if err = p.writeField64(oprot); err != nil {
			fieldId = 64
			goto WriteFieldError
		}
		if err = p.writeField65(oprot); err != nil {
			fieldId = 65
			goto WriteFieldError
		}
		if err = p.writeField66(oprot); err != nil {
			fieldId = 66
			goto WriteFieldError
		}
		if err = p.writeField67(oprot); err != nil {
			fieldId = 67
			goto WriteFieldError
		}
		if err = p.writeField68(oprot); err != nil {
			fieldId = 68
			goto WriteFieldError
		}
		if err = p.writeField69(oprot); err != nil {
			fieldId = 69
			goto WriteFieldError
		}
		if err = p.writeField70(oprot); err != nil {
			fieldId = 70
			goto WriteFieldError
		}
		if err = p.writeField71(oprot); err != nil {
			fieldId = 71
			goto WriteFieldError
		}
		if err = p.writeField72(oprot); err != nil {
			fieldId = 72
			goto WriteFieldError
		}
		if err = p.writeField73(oprot); err != nil {
			fieldId = 73
			goto WriteFieldError
		}
		if err = p.writeField74(oprot); err != nil {
			fieldId = 74
			goto WriteFieldError
		}
		if err = p.writeField75(oprot); err != nil {
			fieldId = 75
			goto WriteFieldError
		}
		if err = p.writeField76(oprot); err != nil {
			fieldId = 76
			goto WriteFieldError
		}
		if err = p.writeField77(oprot); err != nil {
			fieldId = 77
			goto WriteFieldError
		}
		if err = p.writeField78(oprot); err != nil {
			fieldId = 78
			goto WriteFieldError
		}
		if err = p.writeField79(oprot); err != nil {
			fieldId = 79
			goto WriteFieldError
		}
		if err = p.writeField80(oprot); err != nil {
			fieldId = 80
			goto WriteFieldError
		}
		if err = p.writeField81(oprot); err != nil {
			fieldId = 81
			goto WriteFieldError
		}
		if err = p.writeField82(oprot); err != nil {
			fieldId = 82
			goto WriteFieldError
		}
		if err = p.writeField83(oprot); err != nil {
			fieldId = 83
			goto WriteFieldError
		}
		if err = p.writeField84(oprot); err != nil {
			fieldId = 84
			goto WriteFieldError
		}
		if err = p.writeField85(oprot); err != nil {
			fieldId = 85
			goto WriteFieldError
		}
		if err = p.writeField86(oprot); err != nil {
			fieldId = 86
			goto WriteFieldError
		}
		if err = p.writeField87(oprot); err != nil {
			fieldId = 87
			goto WriteFieldError
		}
		if err = p.writeField88(oprot); err != nil {
			fieldId = 88
			goto WriteFieldError
		}
		if err = p.writeField89(oprot); err != nil {
			fieldId = 89
			goto WriteFieldError
		}
		if err = p.writeField90(oprot); err != nil {
			fieldId = 90
			goto WriteFieldError
		}
		if err = p.writeField91(oprot); err != nil {
			fieldId = 91
			goto WriteFieldError
		}
		if err = p.writeField92(oprot); err != nil {
			fieldId = 92
			goto WriteFieldError
		}
		if err = p.writeField93(oprot); err != nil {
			fieldId = 93
			goto WriteFieldError
		}
		if err = p.writeField94(oprot); err != nil {
			fieldId = 94
			goto WriteFieldError
		}
		if err = p.writeField95(oprot); err != nil {
			fieldId = 95
			goto WriteFieldError
		}
		if err = p.writeField96(oprot); err != nil {
			fieldId = 96
			goto WriteFieldError
		}
		if err = p.writeField97(oprot); err != nil {
			fieldId = 97
			goto WriteFieldError
		}
		if err = p.writeField98(oprot); err != nil {
			fieldId = 98
			goto WriteFieldError
		}
		if err = p.writeField99(oprot); err != nil {
			fieldId = 99
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField104(oprot); err != nil {
			fieldId = 104
			goto WriteFieldError
		}
		if err = p.writeField105(oprot); err != nil {
			fieldId = 105
			goto WriteFieldError
		}
		if err = p.writeField106(oprot); err != nil {
			fieldId = 106
			goto WriteFieldError
		}
		if err = p.writeField107(oprot); err != nil {
			fieldId = 107
			goto WriteFieldError
		}
		if err = p.writeField108(oprot); err != nil {
			fieldId = 108
			goto WriteFieldError
		}
		if err = p.writeField109(oprot); err != nil {
			fieldId = 109
			goto WriteFieldError
		}
		if err = p.writeField110(oprot); err != nil {
			fieldId = 110
			goto WriteFieldError
		}
		if err = p.writeField111(oprot); err != nil {
			fieldId = 111
			goto WriteFieldError
		}
		if err = p.writeField112(oprot); err != nil {
			fieldId = 112
			goto WriteFieldError
		}
		if err = p.writeField113(oprot); err != nil {
			fieldId = 113
			goto WriteFieldError
		}
		if err = p.writeField114(oprot); err != nil {
			fieldId = 114
			goto WriteFieldError
		}
		if err = p.writeField115(oprot); err != nil {
			fieldId = 115
			goto WriteFieldError
		}
		if err = p.writeField116(oprot); err != nil {
			fieldId = 116
			goto WriteFieldError
		}
		if err = p.writeField117(oprot); err != nil {
			fieldId = 117
			goto WriteFieldError
		}
		if err = p.writeField1000(oprot); err != nil {
			fieldId = 1000
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TQueryOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAbortOnError() {
		if err = oprot.WriteFieldBegin("abort_on_error", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.AbortOnError); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TQueryOptions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxErrors() {
		if err = oprot.WriteFieldBegin("max_errors", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.MaxErrors); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TQueryOptions) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisableCodegen() {
		if err = oprot.WriteFieldBegin("disable_codegen", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.DisableCodegen); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TQueryOptions) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBatchSize() {
		if err = oprot.WriteFieldBegin("batch_size", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.BatchSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TQueryOptions) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumNodes() {
		if err = oprot.WriteFieldBegin("num_nodes", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.NumNodes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TQueryOptions) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxScanRangeLength() {
		if err = oprot.WriteFieldBegin("max_scan_range_length", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MaxScanRangeLength); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TQueryOptions) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumScannerThreads() {
		if err = oprot.WriteFieldBegin("num_scanner_threads", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.NumScannerThreads); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TQueryOptions) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxIoBuffers() {
		if err = oprot.WriteFieldBegin("max_io_buffers", thrift.I32, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.MaxIoBuffers); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TQueryOptions) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllowUnsupportedFormats() {
		if err = oprot.WriteFieldBegin("allow_unsupported_formats", thrift.BOOL, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.AllowUnsupportedFormats); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TQueryOptions) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultOrderByLimit() {
		if err = oprot.WriteFieldBegin("default_order_by_limit", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.DefaultOrderByLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TQueryOptions) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemLimit() {
		if err = oprot.WriteFieldBegin("mem_limit", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MemLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TQueryOptions) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetAbortOnDefaultLimitExceeded() {
		if err = oprot.WriteFieldBegin("abort_on_default_limit_exceeded", thrift.BOOL, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.AbortOnDefaultLimitExceeded); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TQueryOptions) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryTimeout() {
		if err = oprot.WriteFieldBegin("query_timeout", thrift.I32, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.QueryTimeout); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TQueryOptions) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsReportSuccess() {
		if err = oprot.WriteFieldBegin("is_report_success", thrift.BOOL, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsReportSuccess); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TQueryOptions) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetCodegenLevel() {
		if err = oprot.WriteFieldBegin("codegen_level", thrift.I32, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.CodegenLevel); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TQueryOptions) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetKuduLatestObservedTs() {
		if err = oprot.WriteFieldBegin("kudu_latest_observed_ts", thrift.I64, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.KuduLatestObservedTs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TQueryOptions) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryType() {
		if err = oprot.WriteFieldBegin("query_type", thrift.I32, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(p.QueryType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TQueryOptions) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetMinReservation() {
		if err = oprot.WriteFieldBegin("min_reservation", thrift.I64, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MinReservation); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TQueryOptions) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxReservation() {
		if err = oprot.WriteFieldBegin("max_reservation", thrift.I64, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MaxReservation); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *TQueryOptions) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetInitialReservationTotalClaims() {
		if err = oprot.WriteFieldBegin("initial_reservation_total_claims", thrift.I64, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.InitialReservationTotalClaims); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *TQueryOptions) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetBufferPoolLimit() {
		if err = oprot.WriteFieldBegin("buffer_pool_limit", thrift.I64, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.BufferPoolLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *TQueryOptions) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultSpillableBufferSize() {
		if err = oprot.WriteFieldBegin("default_spillable_buffer_size", thrift.I64, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.DefaultSpillableBufferSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *TQueryOptions) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetMinSpillableBufferSize() {
		if err = oprot.WriteFieldBegin("min_spillable_buffer_size", thrift.I64, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MinSpillableBufferSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *TQueryOptions) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxRowSize() {
		if err = oprot.WriteFieldBegin("max_row_size", thrift.I64, 25); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MaxRowSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *TQueryOptions) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisableStreamPreaggregations() {
		if err = oprot.WriteFieldBegin("disable_stream_preaggregations", thrift.BOOL, 26); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.DisableStreamPreaggregations); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *TQueryOptions) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetMtDop() {
		if err = oprot.WriteFieldBegin("mt_dop", thrift.I32, 27); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.MtDop); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *TQueryOptions) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadMemLimit() {
		if err = oprot.WriteFieldBegin("load_mem_limit", thrift.I64, 28); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.LoadMemLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *TQueryOptions) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxScanKeyNum() {
		if err = oprot.WriteFieldBegin("max_scan_key_num", thrift.I32, 29); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.MaxScanKeyNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}

func (p *TQueryOptions) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxPushdownConditionsPerColumn() {
		if err = oprot.WriteFieldBegin("max_pushdown_conditions_per_column", thrift.I32, 30); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.MaxPushdownConditionsPerColumn); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}

func (p *TQueryOptions) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableSpilling() {
		if err = oprot.WriteFieldBegin("enable_spilling", thrift.BOOL, 31); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableSpilling); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}

func (p *TQueryOptions) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableEnableExchangeNodeParallelMerge() {
		if err = oprot.WriteFieldBegin("enable_enable_exchange_node_parallel_merge", thrift.BOOL, 32); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableEnableExchangeNodeParallelMerge); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}

func (p *TQueryOptions) writeField33(oprot thrift.TProtocol) (err error) {
	if p.IsSetRuntimeFilterWaitTimeMs() {
		if err = oprot.WriteFieldBegin("runtime_filter_wait_time_ms", thrift.I32, 33); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.RuntimeFilterWaitTimeMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 end error: ", p), err)
}

func (p *TQueryOptions) writeField34(oprot thrift.TProtocol) (err error) {
	if p.IsSetRuntimeFilterMaxInNum() {
		if err = oprot.WriteFieldBegin("runtime_filter_max_in_num", thrift.I32, 34); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.RuntimeFilterMaxInNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 end error: ", p), err)
}

func (p *TQueryOptions) writeField42(oprot thrift.TProtocol) (err error) {
	if p.IsSetResourceLimit() {
		if err = oprot.WriteFieldBegin("resource_limit", thrift.STRUCT, 42); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ResourceLimit.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 42 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 42 end error: ", p), err)
}

func (p *TQueryOptions) writeField43(oprot thrift.TProtocol) (err error) {
	if p.IsSetReturnObjectDataAsBinary() {
		if err = oprot.WriteFieldBegin("return_object_data_as_binary", thrift.BOOL, 43); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.ReturnObjectDataAsBinary); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 43 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 43 end error: ", p), err)
}

func (p *TQueryOptions) writeField44(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrimTailingSpacesForExternalTableQuery() {
		if err = oprot.WriteFieldBegin("trim_tailing_spaces_for_external_table_query", thrift.BOOL, 44); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.TrimTailingSpacesForExternalTableQuery); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 44 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 44 end error: ", p), err)
}

func (p *TQueryOptions) writeField45(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableFunctionPushdown() {
		if err = oprot.WriteFieldBegin("enable_function_pushdown", thrift.BOOL, 45); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableFunctionPushdown); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 45 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 45 end error: ", p), err)
}

func (p *TQueryOptions) writeField46(oprot thrift.TProtocol) (err error) {
	if p.IsSetFragmentTransmissionCompressionCodec() {
		if err = oprot.WriteFieldBegin("fragment_transmission_compression_codec", thrift.STRING, 46); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FragmentTransmissionCompressionCodec); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 46 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 46 end error: ", p), err)
}

func (p *TQueryOptions) writeField48(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableLocalExchange() {
		if err = oprot.WriteFieldBegin("enable_local_exchange", thrift.BOOL, 48); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableLocalExchange); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 48 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 48 end error: ", p), err)
}

func (p *TQueryOptions) writeField49(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipStorageEngineMerge() {
		if err = oprot.WriteFieldBegin("skip_storage_engine_merge", thrift.BOOL, 49); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.SkipStorageEngineMerge); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 49 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 49 end error: ", p), err)
}

func (p *TQueryOptions) writeField50(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipDeletePredicate() {
		if err = oprot.WriteFieldBegin("skip_delete_predicate", thrift.BOOL, 50); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.SkipDeletePredicate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 50 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 50 end error: ", p), err)
}

func (p *TQueryOptions) writeField51(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableNewShuffleHashMethod() {
		if err = oprot.WriteFieldBegin("enable_new_shuffle_hash_method", thrift.BOOL, 51); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableNewShuffleHashMethod); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 51 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 51 end error: ", p), err)
}

func (p *TQueryOptions) writeField52(oprot thrift.TProtocol) (err error) {
	if p.IsSetBeExecVersion() {
		if err = oprot.WriteFieldBegin("be_exec_version", thrift.I32, 52); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.BeExecVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 52 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 52 end error: ", p), err)
}

func (p *TQueryOptions) writeField53(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionedHashJoinRowsThreshold() {
		if err = oprot.WriteFieldBegin("partitioned_hash_join_rows_threshold", thrift.I32, 53); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.PartitionedHashJoinRowsThreshold); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 53 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 53 end error: ", p), err)
}

func (p *TQueryOptions) writeField54(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableShareHashTableForBroadcastJoin() {
		if err = oprot.WriteFieldBegin("enable_share_hash_table_for_broadcast_join", thrift.BOOL, 54); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableShareHashTableForBroadcastJoin); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 54 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 54 end error: ", p), err)
}

func (p *TQueryOptions) writeField55(oprot thrift.TProtocol) (err error) {
	if p.IsSetCheckOverflowForDecimal() {
		if err = oprot.WriteFieldBegin("check_overflow_for_decimal", thrift.BOOL, 55); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.CheckOverflowForDecimal); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 55 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 55 end error: ", p), err)
}

func (p *TQueryOptions) writeField56(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipDeleteBitmap() {
		if err = oprot.WriteFieldBegin("skip_delete_bitmap", thrift.BOOL, 56); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.SkipDeleteBitmap); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 56 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 56 end error: ", p), err)
}

func (p *TQueryOptions) writeField57(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnablePipelineEngine() {
		if err = oprot.WriteFieldBegin("enable_pipeline_engine", thrift.BOOL, 57); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnablePipelineEngine); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 57 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 57 end error: ", p), err)
}

func (p *TQueryOptions) writeField58(oprot thrift.TProtocol) (err error) {
	if p.IsSetRepeatMaxNum() {
		if err = oprot.WriteFieldBegin("repeat_max_num", thrift.I32, 58); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.RepeatMaxNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 58 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 58 end error: ", p), err)
}

func (p *TQueryOptions) writeField59(oprot thrift.TProtocol) (err error) {
	if p.IsSetExternalSortBytesThreshold() {
		if err = oprot.WriteFieldBegin("external_sort_bytes_threshold", thrift.I64, 59); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ExternalSortBytesThreshold); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 59 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 59 end error: ", p), err)
}

func (p *TQueryOptions) writeField60(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionedHashAggRowsThreshold() {
		if err = oprot.WriteFieldBegin("partitioned_hash_agg_rows_threshold", thrift.I32, 60); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.PartitionedHashAggRowsThreshold); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 60 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 60 end error: ", p), err)
}

func (p *TQueryOptions) writeField61(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableFileCache() {
		if err = oprot.WriteFieldBegin("enable_file_cache", thrift.BOOL, 61); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableFileCache); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 61 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 61 end error: ", p), err)
}

func (p *TQueryOptions) writeField62(oprot thrift.TProtocol) (err error) {
	if p.IsSetInsertTimeout() {
		if err = oprot.WriteFieldBegin("insert_timeout", thrift.I32, 62); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.InsertTimeout); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 62 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 62 end error: ", p), err)
}

func (p *TQueryOptions) writeField63(oprot thrift.TProtocol) (err error) {
	if p.IsSetExecutionTimeout() {
		if err = oprot.WriteFieldBegin("execution_timeout", thrift.I32, 63); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.ExecutionTimeout); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 63 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 63 end error: ", p), err)
}

func (p *TQueryOptions) writeField64(oprot thrift.TProtocol) (err error) {
	if p.IsSetDryRunQuery() {
		if err = oprot.WriteFieldBegin("dry_run_query", thrift.BOOL, 64); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.DryRunQuery); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 64 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 64 end error: ", p), err)
}

func (p *TQueryOptions) writeField65(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableCommonExprPushdown() {
		if err = oprot.WriteFieldBegin("enable_common_expr_pushdown", thrift.BOOL, 65); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableCommonExprPushdown); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 65 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 65 end error: ", p), err)
}

func (p *TQueryOptions) writeField66(oprot thrift.TProtocol) (err error) {
	if p.IsSetParallelInstance() {
		if err = oprot.WriteFieldBegin("parallel_instance", thrift.I32, 66); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.ParallelInstance); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 66 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 66 end error: ", p), err)
}

func (p *TQueryOptions) writeField67(oprot thrift.TProtocol) (err error) {
	if p.IsSetMysqlRowBinaryFormat() {
		if err = oprot.WriteFieldBegin("mysql_row_binary_format", thrift.BOOL, 67); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.MysqlRowBinaryFormat); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 67 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 67 end error: ", p), err)
}

func (p *TQueryOptions) writeField68(oprot thrift.TProtocol) (err error) {
	if p.IsSetExternalAggBytesThreshold() {
		if err = oprot.WriteFieldBegin("external_agg_bytes_threshold", thrift.I64, 68); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ExternalAggBytesThreshold); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 68 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 68 end error: ", p), err)
}

func (p *TQueryOptions) writeField69(oprot thrift.TProtocol) (err error) {
	if p.IsSetExternalAggPartitionBits() {
		if err = oprot.WriteFieldBegin("external_agg_partition_bits", thrift.I32, 69); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.ExternalAggPartitionBits); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 69 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 69 end error: ", p), err)
}

func (p *TQueryOptions) writeField70(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileCacheBasePath() {
		if err = oprot.WriteFieldBegin("file_cache_base_path", thrift.STRING, 70); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FileCacheBasePath); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 70 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 70 end error: ", p), err)
}

func (p *TQueryOptions) writeField71(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableParquetLazyMat() {
		if err = oprot.WriteFieldBegin("enable_parquet_lazy_mat", thrift.BOOL, 71); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableParquetLazyMat); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 71 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 71 end error: ", p), err)
}

func (p *TQueryOptions) writeField72(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableOrcLazyMat() {
		if err = oprot.WriteFieldBegin("enable_orc_lazy_mat", thrift.BOOL, 72); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableOrcLazyMat); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 72 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 72 end error: ", p), err)
}

func (p *TQueryOptions) writeField73(oprot thrift.TProtocol) (err error) {
	if p.IsSetScanQueueMemLimit() {
		if err = oprot.WriteFieldBegin("scan_queue_mem_limit", thrift.I64, 73); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ScanQueueMemLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 73 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 73 end error: ", p), err)
}

func (p *TQueryOptions) writeField74(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableScanNodeRunSerial() {
		if err = oprot.WriteFieldBegin("enable_scan_node_run_serial", thrift.BOOL, 74); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableScanNodeRunSerial); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 74 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 74 end error: ", p), err)
}

func (p *TQueryOptions) writeField75(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableInsertStrict() {
		if err = oprot.WriteFieldBegin("enable_insert_strict", thrift.BOOL, 75); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableInsertStrict); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 75 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 75 end error: ", p), err)
}

func (p *TQueryOptions) writeField76(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableInvertedIndexQuery() {
		if err = oprot.WriteFieldBegin("enable_inverted_index_query", thrift.BOOL, 76); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableInvertedIndexQuery); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 76 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 76 end error: ", p), err)
}

func (p *TQueryOptions) writeField77(oprot thrift.TProtocol) (err error) {
	if p.IsSetTruncateCharOrVarcharColumns() {
		if err = oprot.WriteFieldBegin("truncate_char_or_varchar_columns", thrift.BOOL, 77); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.TruncateCharOrVarcharColumns); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 77 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 77 end error: ", p), err)
}

func (p *TQueryOptions) writeField78(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableHashJoinEarlyStartProbe() {
		if err = oprot.WriteFieldBegin("enable_hash_join_early_start_probe", thrift.BOOL, 78); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableHashJoinEarlyStartProbe); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 78 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 78 end error: ", p), err)
}

func (p *TQueryOptions) writeField79(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnablePipelineXEngine() {
		if err = oprot.WriteFieldBegin("enable_pipeline_x_engine", thrift.BOOL, 79); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnablePipelineXEngine); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 79 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 79 end error: ", p), err)
}

func (p *TQueryOptions) writeField80(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableMemtableOnSinkNode() {
		if err = oprot.WriteFieldBegin("enable_memtable_on_sink_node", thrift.BOOL, 80); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableMemtableOnSinkNode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 80 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 80 end error: ", p), err)
}

func (p *TQueryOptions) writeField81(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableDeleteSubPredicateV2() {
		if err = oprot.WriteFieldBegin("enable_delete_sub_predicate_v2", thrift.BOOL, 81); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableDeleteSubPredicateV2); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 81 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 81 end error: ", p), err)
}

func (p *TQueryOptions) writeField82(oprot thrift.TProtocol) (err error) {
	if p.IsSetFeProcessUuid() {
		if err = oprot.WriteFieldBegin("fe_process_uuid", thrift.I64, 82); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.FeProcessUuid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 82 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 82 end error: ", p), err)
}

func (p *TQueryOptions) writeField83(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvertedIndexConjunctionOptThreshold() {
		if err = oprot.WriteFieldBegin("inverted_index_conjunction_opt_threshold", thrift.I32, 83); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.InvertedIndexConjunctionOptThreshold); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 83 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 83 end error: ", p), err)
}

func (p *TQueryOptions) writeField84(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableProfile() {
		if err = oprot.WriteFieldBegin("enable_profile", thrift.BOOL, 84); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableProfile); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 84 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 84 end error: ", p), err)
}

func (p *TQueryOptions) writeField85(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnablePageCache() {
		if err = oprot.WriteFieldBegin("enable_page_cache", thrift.BOOL, 85); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnablePageCache); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 85 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 85 end error: ", p), err)
}

func (p *TQueryOptions) writeField86(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnalyzeTimeout() {
		if err = oprot.WriteFieldBegin("analyze_timeout", thrift.I32, 86); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.AnalyzeTimeout); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 86 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 86 end error: ", p), err)
}

func (p *TQueryOptions) writeField87(oprot thrift.TProtocol) (err error) {
	if p.IsSetFasterFloatConvert() {
		if err = oprot.WriteFieldBegin("faster_float_convert", thrift.BOOL, 87); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.FasterFloatConvert); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 87 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 87 end error: ", p), err)
}

func (p *TQueryOptions) writeField88(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableDecimal256() {
		if err = oprot.WriteFieldBegin("enable_decimal256", thrift.BOOL, 88); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableDecimal256); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 88 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 88 end error: ", p), err)
}

func (p *TQueryOptions) writeField89(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableLocalShuffle() {
		if err = oprot.WriteFieldBegin("enable_local_shuffle", thrift.BOOL, 89); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableLocalShuffle); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 89 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 89 end error: ", p), err)
}

func (p *TQueryOptions) writeField90(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipMissingVersion() {
		if err = oprot.WriteFieldBegin("skip_missing_version", thrift.BOOL, 90); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.SkipMissingVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 90 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 90 end error: ", p), err)
}

func (p *TQueryOptions) writeField91(oprot thrift.TProtocol) (err error) {
	if p.IsSetRuntimeFilterWaitInfinitely() {
		if err = oprot.WriteFieldBegin("runtime_filter_wait_infinitely", thrift.BOOL, 91); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.RuntimeFilterWaitInfinitely); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 91 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 91 end error: ", p), err)
}

func (p *TQueryOptions) writeField92(oprot thrift.TProtocol) (err error) {
	if p.IsSetWaitFullBlockScheduleTimes() {
		if err = oprot.WriteFieldBegin("wait_full_block_schedule_times", thrift.I32, 92); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.WaitFullBlockScheduleTimes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 92 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 92 end error: ", p), err)
}

func (p *TQueryOptions) writeField93(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvertedIndexMaxExpansions() {
		if err = oprot.WriteFieldBegin("inverted_index_max_expansions", thrift.I32, 93); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.InvertedIndexMaxExpansions); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 93 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 93 end error: ", p), err)
}

func (p *TQueryOptions) writeField94(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvertedIndexSkipThreshold() {
		if err = oprot.WriteFieldBegin("inverted_index_skip_threshold", thrift.I32, 94); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.InvertedIndexSkipThreshold); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 94 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 94 end error: ", p), err)
}

func (p *TQueryOptions) writeField95(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableParallelScan() {
		if err = oprot.WriteFieldBegin("enable_parallel_scan", thrift.BOOL, 95); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableParallelScan); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 95 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 95 end error: ", p), err)
}

func (p *TQueryOptions) writeField96(oprot thrift.TProtocol) (err error) {
	if p.IsSetParallelScanMaxScannersCount() {
		if err = oprot.WriteFieldBegin("parallel_scan_max_scanners_count", thrift.I32, 96); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.ParallelScanMaxScannersCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 96 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 96 end error: ", p), err)
}

func (p *TQueryOptions) writeField97(oprot thrift.TProtocol) (err error) {
	if p.IsSetParallelScanMinRowsPerScanner() {
		if err = oprot.WriteFieldBegin("parallel_scan_min_rows_per_scanner", thrift.I64, 97); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.ParallelScanMinRowsPerScanner); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 97 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 97 end error: ", p), err)
}

func (p *TQueryOptions) writeField98(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipBadTablet() {
		if err = oprot.WriteFieldBegin("skip_bad_tablet", thrift.BOOL, 98); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.SkipBadTablet); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 98 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 98 end error: ", p), err)
}

func (p *TQueryOptions) writeField99(oprot thrift.TProtocol) (err error) {
	if p.IsSetScannerScaleUpRatio() {
		if err = oprot.WriteFieldBegin("scanner_scale_up_ratio", thrift.DOUBLE, 99); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(p.ScannerScaleUpRatio); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 99 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 99 end error: ", p), err)
}

func (p *TQueryOptions) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableDistinctStreamingAggregation() {
		if err = oprot.WriteFieldBegin("enable_distinct_streaming_aggregation", thrift.BOOL, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableDistinctStreamingAggregation); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *TQueryOptions) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableJoinSpill() {
		if err = oprot.WriteFieldBegin("enable_join_spill", thrift.BOOL, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableJoinSpill); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}

func (p *TQueryOptions) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableSortSpill() {
		if err = oprot.WriteFieldBegin("enable_sort_spill", thrift.BOOL, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableSortSpill); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}

func (p *TQueryOptions) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableAggSpill() {
		if err = oprot.WriteFieldBegin("enable_agg_spill", thrift.BOOL, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableAggSpill); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}

func (p *TQueryOptions) writeField104(oprot thrift.TProtocol) (err error) {
	if p.IsSetMinRevocableMem() {
		if err = oprot.WriteFieldBegin("min_revocable_mem", thrift.I64, 104); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.MinRevocableMem); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 104 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 104 end error: ", p), err)
}

func (p *TQueryOptions) writeField105(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpillStreamingAggMemLimit() {
		if err = oprot.WriteFieldBegin("spill_streaming_agg_mem_limit", thrift.I64, 105); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.SpillStreamingAggMemLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 105 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 105 end error: ", p), err)
}

func (p *TQueryOptions) writeField106(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataQueueMaxBlocks() {
		if err = oprot.WriteFieldBegin("data_queue_max_blocks", thrift.I64, 106); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(p.DataQueueMaxBlocks); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 106 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 106 end error: ", p), err)
}

func (p *TQueryOptions) writeField107(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableCommonExprPushdownForInvertedIndex() {
		if err = oprot.WriteFieldBegin("enable_common_expr_pushdown_for_inverted_index", thrift.BOOL, 107); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableCommonExprPushdownForInvertedIndex); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 107 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 107 end error: ", p), err)
}

func (p *TQueryOptions) writeField108(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocalExchangeFreeBlocksLimit() {
		if err = oprot.WriteFieldBegin("local_exchange_free_blocks_limit", thrift.I64, 108); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LocalExchangeFreeBlocksLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 108 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 108 end error: ", p), err)
}

func (p *TQueryOptions) writeField109(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableForceSpill() {
		if err = oprot.WriteFieldBegin("enable_force_spill", thrift.BOOL, 109); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableForceSpill); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 109 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 109 end error: ", p), err)
}

func (p *TQueryOptions) writeField110(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableParquetFilterByMinMax() {
		if err = oprot.WriteFieldBegin("enable_parquet_filter_by_min_max", thrift.BOOL, 110); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableParquetFilterByMinMax); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 110 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 110 end error: ", p), err)
}

func (p *TQueryOptions) writeField111(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableOrcFilterByMinMax() {
		if err = oprot.WriteFieldBegin("enable_orc_filter_by_min_max", thrift.BOOL, 111); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableOrcFilterByMinMax); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 111 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 111 end error: ", p), err)
}

func (p *TQueryOptions) writeField112(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxColumnReaderNum() {
		if err = oprot.WriteFieldBegin("max_column_reader_num", thrift.I32, 112); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.MaxColumnReaderNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 112 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 112 end error: ", p), err)
}

func (p *TQueryOptions) writeField113(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableLocalMergeSort() {
		if err = oprot.WriteFieldBegin("enable_local_merge_sort", thrift.BOOL, 113); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableLocalMergeSort); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 113 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 113 end error: ", p), err)
}

func (p *TQueryOptions) writeField114(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableParallelResultSink() {
		if err = oprot.WriteFieldBegin("enable_parallel_result_sink", thrift.BOOL, 114); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableParallelResultSink); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 114 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 114 end error: ", p), err)
}

func (p *TQueryOptions) writeField115(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableShortCircuitQueryAccessColumnStore() {
		if err = oprot.WriteFieldBegin("enable_short_circuit_query_access_column_store", thrift.BOOL, 115); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableShortCircuitQueryAccessColumnStore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 115 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 115 end error: ", p), err)
}

func (p *TQueryOptions) writeField116(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableNoNeedReadDataOpt() {
		if err = oprot.WriteFieldBegin("enable_no_need_read_data_opt", thrift.BOOL, 116); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableNoNeedReadDataOpt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 116 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 116 end error: ", p), err)
}

func (p *TQueryOptions) writeField117(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadCsvEmptyLineAsNull() {
		if err = oprot.WriteFieldBegin("read_csv_empty_line_as_null", thrift.BOOL, 117); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.ReadCsvEmptyLineAsNull); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 117 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 117 end error: ", p), err)
}

func (p *TQueryOptions) writeField1000(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisableFileCache() {
		if err = oprot.WriteFieldBegin("disable_file_cache", thrift.BOOL, 1000); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.DisableFileCache); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 end error: ", p), err)
}

func (p *TQueryOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TQueryOptions(%+v)", *p)

}

func (p *TQueryOptions) DeepEqual(ano *TQueryOptions) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AbortOnError) {
		return false
	}
	if !p.Field2DeepEqual(ano.MaxErrors) {
		return false
	}
	if !p.Field3DeepEqual(ano.DisableCodegen) {
		return false
	}
	if !p.Field4DeepEqual(ano.BatchSize) {
		return false
	}
	if !p.Field5DeepEqual(ano.NumNodes) {
		return false
	}
	if !p.Field6DeepEqual(ano.MaxScanRangeLength) {
		return false
	}
	if !p.Field7DeepEqual(ano.NumScannerThreads) {
		return false
	}
	if !p.Field8DeepEqual(ano.MaxIoBuffers) {
		return false
	}
	if !p.Field9DeepEqual(ano.AllowUnsupportedFormats) {
		return false
	}
	if !p.Field10DeepEqual(ano.DefaultOrderByLimit) {
		return false
	}
	if !p.Field12DeepEqual(ano.MemLimit) {
		return false
	}
	if !p.Field13DeepEqual(ano.AbortOnDefaultLimitExceeded) {
		return false
	}
	if !p.Field14DeepEqual(ano.QueryTimeout) {
		return false
	}
	if !p.Field15DeepEqual(ano.IsReportSuccess) {
		return false
	}
	if !p.Field16DeepEqual(ano.CodegenLevel) {
		return false
	}
	if !p.Field17DeepEqual(ano.KuduLatestObservedTs) {
		return false
	}
	if !p.Field18DeepEqual(ano.QueryType) {
		return false
	}
	if !p.Field19DeepEqual(ano.MinReservation) {
		return false
	}
	if !p.Field20DeepEqual(ano.MaxReservation) {
		return false
	}
	if !p.Field21DeepEqual(ano.InitialReservationTotalClaims) {
		return false
	}
	if !p.Field22DeepEqual(ano.BufferPoolLimit) {
		return false
	}
	if !p.Field23DeepEqual(ano.DefaultSpillableBufferSize) {
		return false
	}
	if !p.Field24DeepEqual(ano.MinSpillableBufferSize) {
		return false
	}
	if !p.Field25DeepEqual(ano.MaxRowSize) {
		return false
	}
	if !p.Field26DeepEqual(ano.DisableStreamPreaggregations) {
		return false
	}
	if !p.Field27DeepEqual(ano.MtDop) {
		return false
	}
	if !p.Field28DeepEqual(ano.LoadMemLimit) {
		return false
	}
	if !p.Field29DeepEqual(ano.MaxScanKeyNum) {
		return false
	}
	if !p.Field30DeepEqual(ano.MaxPushdownConditionsPerColumn) {
		return false
	}
	if !p.Field31DeepEqual(ano.EnableSpilling) {
		return false
	}
	if !p.Field32DeepEqual(ano.EnableEnableExchangeNodeParallelMerge) {
		return false
	}
	if !p.Field33DeepEqual(ano.RuntimeFilterWaitTimeMs) {
		return false
	}
	if !p.Field34DeepEqual(ano.RuntimeFilterMaxInNum) {
		return false
	}
	if !p.Field42DeepEqual(ano.ResourceLimit) {
		return false
	}
	if !p.Field43DeepEqual(ano.ReturnObjectDataAsBinary) {
		return false
	}
	if !p.Field44DeepEqual(ano.TrimTailingSpacesForExternalTableQuery) {
		return false
	}
	if !p.Field45DeepEqual(ano.EnableFunctionPushdown) {
		return false
	}
	if !p.Field46DeepEqual(ano.FragmentTransmissionCompressionCodec) {
		return false
	}
	if !p.Field48DeepEqual(ano.EnableLocalExchange) {
		return false
	}
	if !p.Field49DeepEqual(ano.SkipStorageEngineMerge) {
		return false
	}
	if !p.Field50DeepEqual(ano.SkipDeletePredicate) {
		return false
	}
	if !p.Field51DeepEqual(ano.EnableNewShuffleHashMethod) {
		return false
	}
	if !p.Field52DeepEqual(ano.BeExecVersion) {
		return false
	}
	if !p.Field53DeepEqual(ano.PartitionedHashJoinRowsThreshold) {
		return false
	}
	if !p.Field54DeepEqual(ano.EnableShareHashTableForBroadcastJoin) {
		return false
	}
	if !p.Field55DeepEqual(ano.CheckOverflowForDecimal) {
		return false
	}
	if !p.Field56DeepEqual(ano.SkipDeleteBitmap) {
		return false
	}
	if !p.Field57DeepEqual(ano.EnablePipelineEngine) {
		return false
	}
	if !p.Field58DeepEqual(ano.RepeatMaxNum) {
		return false
	}
	if !p.Field59DeepEqual(ano.ExternalSortBytesThreshold) {
		return false
	}
	if !p.Field60DeepEqual(ano.PartitionedHashAggRowsThreshold) {
		return false
	}
	if !p.Field61DeepEqual(ano.EnableFileCache) {
		return false
	}
	if !p.Field62DeepEqual(ano.InsertTimeout) {
		return false
	}
	if !p.Field63DeepEqual(ano.ExecutionTimeout) {
		return false
	}
	if !p.Field64DeepEqual(ano.DryRunQuery) {
		return false
	}
	if !p.Field65DeepEqual(ano.EnableCommonExprPushdown) {
		return false
	}
	if !p.Field66DeepEqual(ano.ParallelInstance) {
		return false
	}
	if !p.Field67DeepEqual(ano.MysqlRowBinaryFormat) {
		return false
	}
	if !p.Field68DeepEqual(ano.ExternalAggBytesThreshold) {
		return false
	}
	if !p.Field69DeepEqual(ano.ExternalAggPartitionBits) {
		return false
	}
	if !p.Field70DeepEqual(ano.FileCacheBasePath) {
		return false
	}
	if !p.Field71DeepEqual(ano.EnableParquetLazyMat) {
		return false
	}
	if !p.Field72DeepEqual(ano.EnableOrcLazyMat) {
		return false
	}
	if !p.Field73DeepEqual(ano.ScanQueueMemLimit) {
		return false
	}
	if !p.Field74DeepEqual(ano.EnableScanNodeRunSerial) {
		return false
	}
	if !p.Field75DeepEqual(ano.EnableInsertStrict) {
		return false
	}
	if !p.Field76DeepEqual(ano.EnableInvertedIndexQuery) {
		return false
	}
	if !p.Field77DeepEqual(ano.TruncateCharOrVarcharColumns) {
		return false
	}
	if !p.Field78DeepEqual(ano.EnableHashJoinEarlyStartProbe) {
		return false
	}
	if !p.Field79DeepEqual(ano.EnablePipelineXEngine) {
		return false
	}
	if !p.Field80DeepEqual(ano.EnableMemtableOnSinkNode) {
		return false
	}
	if !p.Field81DeepEqual(ano.EnableDeleteSubPredicateV2) {
		return false
	}
	if !p.Field82DeepEqual(ano.FeProcessUuid) {
		return false
	}
	if !p.Field83DeepEqual(ano.InvertedIndexConjunctionOptThreshold) {
		return false
	}
	if !p.Field84DeepEqual(ano.EnableProfile) {
		return false
	}
	if !p.Field85DeepEqual(ano.EnablePageCache) {
		return false
	}
	if !p.Field86DeepEqual(ano.AnalyzeTimeout) {
		return false
	}
	if !p.Field87DeepEqual(ano.FasterFloatConvert) {
		return false
	}
	if !p.Field88DeepEqual(ano.EnableDecimal256) {
		return false
	}
	if !p.Field89DeepEqual(ano.EnableLocalShuffle) {
		return false
	}
	if !p.Field90DeepEqual(ano.SkipMissingVersion) {
		return false
	}
	if !p.Field91DeepEqual(ano.RuntimeFilterWaitInfinitely) {
		return false
	}
	if !p.Field92DeepEqual(ano.WaitFullBlockScheduleTimes) {
		return false
	}
	if !p.Field93DeepEqual(ano.InvertedIndexMaxExpansions) {
		return false
	}
	if !p.Field94DeepEqual(ano.InvertedIndexSkipThreshold) {
		return false
	}
	if !p.Field95DeepEqual(ano.EnableParallelScan) {
		return false
	}
	if !p.Field96DeepEqual(ano.ParallelScanMaxScannersCount) {
		return false
	}
	if !p.Field97DeepEqual(ano.ParallelScanMinRowsPerScanner) {
		return false
	}
	if !p.Field98DeepEqual(ano.SkipBadTablet) {
		return false
	}
	if !p.Field99DeepEqual(ano.ScannerScaleUpRatio) {
		return false
	}
	if !p.Field100DeepEqual(ano.EnableDistinctStreamingAggregation) {
		return false
	}
	if !p.Field101DeepEqual(ano.EnableJoinSpill) {
		return false
	}
	if !p.Field102DeepEqual(ano.EnableSortSpill) {
		return false
	}
	if !p.Field103DeepEqual(ano.EnableAggSpill) {
		return false
	}
	if !p.Field104DeepEqual(ano.MinRevocableMem) {
		return false
	}
	if !p.Field105DeepEqual(ano.SpillStreamingAggMemLimit) {
		return false
	}
	if !p.Field106DeepEqual(ano.DataQueueMaxBlocks) {
		return false
	}
	if !p.Field107DeepEqual(ano.EnableCommonExprPushdownForInvertedIndex) {
		return false
	}
	if !p.Field108DeepEqual(ano.LocalExchangeFreeBlocksLimit) {
		return false
	}
	if !p.Field109DeepEqual(ano.EnableForceSpill) {
		return false
	}
	if !p.Field110DeepEqual(ano.EnableParquetFilterByMinMax) {
		return false
	}
	if !p.Field111DeepEqual(ano.EnableOrcFilterByMinMax) {
		return false
	}
	if !p.Field112DeepEqual(ano.MaxColumnReaderNum) {
		return false
	}
	if !p.Field113DeepEqual(ano.EnableLocalMergeSort) {
		return false
	}
	if !p.Field114DeepEqual(ano.EnableParallelResultSink) {
		return false
	}
	if !p.Field115DeepEqual(ano.EnableShortCircuitQueryAccessColumnStore) {
		return false
	}
	if !p.Field116DeepEqual(ano.EnableNoNeedReadDataOpt) {
		return false
	}
	if !p.Field117DeepEqual(ano.ReadCsvEmptyLineAsNull) {
		return false
	}
	if !p.Field1000DeepEqual(ano.DisableFileCache) {
		return false
	}
	return true
}

func (p *TQueryOptions) Field1DeepEqual(src bool) bool {

	if p.AbortOnError != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field2DeepEqual(src int32) bool {

	if p.MaxErrors != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field3DeepEqual(src bool) bool {

	if p.DisableCodegen != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field4DeepEqual(src int32) bool {

	if p.BatchSize != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field5DeepEqual(src int32) bool {

	if p.NumNodes != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field6DeepEqual(src int64) bool {

	if p.MaxScanRangeLength != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field7DeepEqual(src int32) bool {

	if p.NumScannerThreads != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field8DeepEqual(src int32) bool {

	if p.MaxIoBuffers != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field9DeepEqual(src bool) bool {

	if p.AllowUnsupportedFormats != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field10DeepEqual(src int64) bool {

	if p.DefaultOrderByLimit != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field12DeepEqual(src int64) bool {

	if p.MemLimit != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field13DeepEqual(src bool) bool {

	if p.AbortOnDefaultLimitExceeded != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field14DeepEqual(src int32) bool {

	if p.QueryTimeout != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field15DeepEqual(src bool) bool {

	if p.IsReportSuccess != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field16DeepEqual(src int32) bool {

	if p.CodegenLevel != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field17DeepEqual(src int64) bool {

	if p.KuduLatestObservedTs != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field18DeepEqual(src TQueryType) bool {

	if p.QueryType != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field19DeepEqual(src int64) bool {

	if p.MinReservation != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field20DeepEqual(src int64) bool {

	if p.MaxReservation != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field21DeepEqual(src int64) bool {

	if p.InitialReservationTotalClaims != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field22DeepEqual(src int64) bool {

	if p.BufferPoolLimit != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field23DeepEqual(src int64) bool {

	if p.DefaultSpillableBufferSize != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field24DeepEqual(src int64) bool {

	if p.MinSpillableBufferSize != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field25DeepEqual(src int64) bool {

	if p.MaxRowSize != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field26DeepEqual(src bool) bool {

	if p.DisableStreamPreaggregations != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field27DeepEqual(src int32) bool {

	if p.MtDop != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field28DeepEqual(src int64) bool {

	if p.LoadMemLimit != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field29DeepEqual(src *int32) bool {

	if p.MaxScanKeyNum == src {
		return true
	} else if p.MaxScanKeyNum == nil || src == nil {
		return false
	}
	if *p.MaxScanKeyNum != *src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field30DeepEqual(src *int32) bool {

	if p.MaxPushdownConditionsPerColumn == src {
		return true
	} else if p.MaxPushdownConditionsPerColumn == nil || src == nil {
		return false
	}
	if *p.MaxPushdownConditionsPerColumn != *src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field31DeepEqual(src bool) bool {

	if p.EnableSpilling != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field32DeepEqual(src bool) bool {

	if p.EnableEnableExchangeNodeParallelMerge != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field33DeepEqual(src int32) bool {

	if p.RuntimeFilterWaitTimeMs != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field34DeepEqual(src int32) bool {

	if p.RuntimeFilterMaxInNum != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field42DeepEqual(src *TResourceLimit) bool {

	if !p.ResourceLimit.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TQueryOptions) Field43DeepEqual(src bool) bool {

	if p.ReturnObjectDataAsBinary != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field44DeepEqual(src bool) bool {

	if p.TrimTailingSpacesForExternalTableQuery != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field45DeepEqual(src *bool) bool {

	if p.EnableFunctionPushdown == src {
		return true
	} else if p.EnableFunctionPushdown == nil || src == nil {
		return false
	}
	if *p.EnableFunctionPushdown != *src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field46DeepEqual(src *string) bool {

	if p.FragmentTransmissionCompressionCodec == src {
		return true
	} else if p.FragmentTransmissionCompressionCodec == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FragmentTransmissionCompressionCodec, *src) != 0 {
		return false
	}
	return true
}
func (p *TQueryOptions) Field48DeepEqual(src *bool) bool {

	if p.EnableLocalExchange == src {
		return true
	} else if p.EnableLocalExchange == nil || src == nil {
		return false
	}
	if *p.EnableLocalExchange != *src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field49DeepEqual(src bool) bool {

	if p.SkipStorageEngineMerge != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field50DeepEqual(src bool) bool {

	if p.SkipDeletePredicate != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field51DeepEqual(src *bool) bool {

	if p.EnableNewShuffleHashMethod == src {
		return true
	} else if p.EnableNewShuffleHashMethod == nil || src == nil {
		return false
	}
	if *p.EnableNewShuffleHashMethod != *src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field52DeepEqual(src int32) bool {

	if p.BeExecVersion != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field53DeepEqual(src int32) bool {

	if p.PartitionedHashJoinRowsThreshold != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field54DeepEqual(src *bool) bool {

	if p.EnableShareHashTableForBroadcastJoin == src {
		return true
	} else if p.EnableShareHashTableForBroadcastJoin == nil || src == nil {
		return false
	}
	if *p.EnableShareHashTableForBroadcastJoin != *src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field55DeepEqual(src bool) bool {

	if p.CheckOverflowForDecimal != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field56DeepEqual(src bool) bool {

	if p.SkipDeleteBitmap != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field57DeepEqual(src bool) bool {

	if p.EnablePipelineEngine != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field58DeepEqual(src int32) bool {

	if p.RepeatMaxNum != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field59DeepEqual(src int64) bool {

	if p.ExternalSortBytesThreshold != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field60DeepEqual(src int32) bool {

	if p.PartitionedHashAggRowsThreshold != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field61DeepEqual(src bool) bool {

	if p.EnableFileCache != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field62DeepEqual(src int32) bool {

	if p.InsertTimeout != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field63DeepEqual(src int32) bool {

	if p.ExecutionTimeout != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field64DeepEqual(src bool) bool {

	if p.DryRunQuery != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field65DeepEqual(src bool) bool {

	if p.EnableCommonExprPushdown != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field66DeepEqual(src int32) bool {

	if p.ParallelInstance != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field67DeepEqual(src bool) bool {

	if p.MysqlRowBinaryFormat != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field68DeepEqual(src int64) bool {

	if p.ExternalAggBytesThreshold != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field69DeepEqual(src int32) bool {

	if p.ExternalAggPartitionBits != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field70DeepEqual(src *string) bool {

	if p.FileCacheBasePath == src {
		return true
	} else if p.FileCacheBasePath == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FileCacheBasePath, *src) != 0 {
		return false
	}
	return true
}
func (p *TQueryOptions) Field71DeepEqual(src bool) bool {

	if p.EnableParquetLazyMat != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field72DeepEqual(src bool) bool {

	if p.EnableOrcLazyMat != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field73DeepEqual(src *int64) bool {

	if p.ScanQueueMemLimit == src {
		return true
	} else if p.ScanQueueMemLimit == nil || src == nil {
		return false
	}
	if *p.ScanQueueMemLimit != *src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field74DeepEqual(src bool) bool {

	if p.EnableScanNodeRunSerial != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field75DeepEqual(src bool) bool {

	if p.EnableInsertStrict != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field76DeepEqual(src bool) bool {

	if p.EnableInvertedIndexQuery != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field77DeepEqual(src bool) bool {

	if p.TruncateCharOrVarcharColumns != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field78DeepEqual(src bool) bool {

	if p.EnableHashJoinEarlyStartProbe != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field79DeepEqual(src bool) bool {

	if p.EnablePipelineXEngine != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field80DeepEqual(src bool) bool {

	if p.EnableMemtableOnSinkNode != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field81DeepEqual(src bool) bool {

	if p.EnableDeleteSubPredicateV2 != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field82DeepEqual(src int64) bool {

	if p.FeProcessUuid != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field83DeepEqual(src int32) bool {

	if p.InvertedIndexConjunctionOptThreshold != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field84DeepEqual(src bool) bool {

	if p.EnableProfile != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field85DeepEqual(src bool) bool {

	if p.EnablePageCache != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field86DeepEqual(src int32) bool {

	if p.AnalyzeTimeout != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field87DeepEqual(src bool) bool {

	if p.FasterFloatConvert != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field88DeepEqual(src bool) bool {

	if p.EnableDecimal256 != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field89DeepEqual(src bool) bool {

	if p.EnableLocalShuffle != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field90DeepEqual(src bool) bool {

	if p.SkipMissingVersion != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field91DeepEqual(src bool) bool {

	if p.RuntimeFilterWaitInfinitely != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field92DeepEqual(src int32) bool {

	if p.WaitFullBlockScheduleTimes != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field93DeepEqual(src int32) bool {

	if p.InvertedIndexMaxExpansions != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field94DeepEqual(src int32) bool {

	if p.InvertedIndexSkipThreshold != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field95DeepEqual(src bool) bool {

	if p.EnableParallelScan != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field96DeepEqual(src int32) bool {

	if p.ParallelScanMaxScannersCount != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field97DeepEqual(src int64) bool {

	if p.ParallelScanMinRowsPerScanner != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field98DeepEqual(src bool) bool {

	if p.SkipBadTablet != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field99DeepEqual(src float64) bool {

	if p.ScannerScaleUpRatio != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field100DeepEqual(src bool) bool {

	if p.EnableDistinctStreamingAggregation != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field101DeepEqual(src bool) bool {

	if p.EnableJoinSpill != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field102DeepEqual(src bool) bool {

	if p.EnableSortSpill != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field103DeepEqual(src bool) bool {

	if p.EnableAggSpill != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field104DeepEqual(src int64) bool {

	if p.MinRevocableMem != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field105DeepEqual(src int64) bool {

	if p.SpillStreamingAggMemLimit != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field106DeepEqual(src int64) bool {

	if p.DataQueueMaxBlocks != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field107DeepEqual(src bool) bool {

	if p.EnableCommonExprPushdownForInvertedIndex != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field108DeepEqual(src *int64) bool {

	if p.LocalExchangeFreeBlocksLimit == src {
		return true
	} else if p.LocalExchangeFreeBlocksLimit == nil || src == nil {
		return false
	}
	if *p.LocalExchangeFreeBlocksLimit != *src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field109DeepEqual(src bool) bool {

	if p.EnableForceSpill != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field110DeepEqual(src bool) bool {

	if p.EnableParquetFilterByMinMax != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field111DeepEqual(src bool) bool {

	if p.EnableOrcFilterByMinMax != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field112DeepEqual(src int32) bool {

	if p.MaxColumnReaderNum != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field113DeepEqual(src bool) bool {

	if p.EnableLocalMergeSort != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field114DeepEqual(src bool) bool {

	if p.EnableParallelResultSink != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field115DeepEqual(src bool) bool {

	if p.EnableShortCircuitQueryAccessColumnStore != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field116DeepEqual(src bool) bool {

	if p.EnableNoNeedReadDataOpt != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field117DeepEqual(src bool) bool {

	if p.ReadCsvEmptyLineAsNull != src {
		return false
	}
	return true
}
func (p *TQueryOptions) Field1000DeepEqual(src bool) bool {

	if p.DisableFileCache != src {
		return false
	}
	return true
}

type TScanRangeParams struct {
	ScanRange *plannodes.TScanRange `thrift:"scan_range,1,required" frugal:"1,required,plannodes.TScanRange" json:"scan_range"`
	VolumeId  int32                 `thrift:"volume_id,2,optional" frugal:"2,optional,i32" json:"volume_id,omitempty"`
}

func NewTScanRangeParams() *TScanRangeParams {
	return &TScanRangeParams{

		VolumeId: -1,
	}
}

func (p *TScanRangeParams) InitDefault() {
	p.VolumeId = -1
}

var TScanRangeParams_ScanRange_DEFAULT *plannodes.TScanRange

func (p *TScanRangeParams) GetScanRange() (v *plannodes.TScanRange) {
	if !p.IsSetScanRange() {
		return TScanRangeParams_ScanRange_DEFAULT
	}
	return p.ScanRange
}

var TScanRangeParams_VolumeId_DEFAULT int32 = -1

func (p *TScanRangeParams) GetVolumeId() (v int32) {
	if !p.IsSetVolumeId() {
		return TScanRangeParams_VolumeId_DEFAULT
	}
	return p.VolumeId
}
func (p *TScanRangeParams) SetScanRange(val *plannodes.TScanRange) {
	p.ScanRange = val
}
func (p *TScanRangeParams) SetVolumeId(val int32) {
	p.VolumeId = val
}

var fieldIDToName_TScanRangeParams = map[int16]string{
	1: "scan_range",
	2: "volume_id",
}

func (p *TScanRangeParams) IsSetScanRange() bool {
	return p.ScanRange != nil
}

func (p *TScanRangeParams) IsSetVolumeId() bool {
	return p.VolumeId != TScanRangeParams_VolumeId_DEFAULT
}

func (p *TScanRangeParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetScanRange bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetScanRange = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetScanRange {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TScanRangeParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TScanRangeParams[fieldId]))
}

func (p *TScanRangeParams) ReadField1(iprot thrift.TProtocol) error {
	_field := plannodes.NewTScanRange()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ScanRange = _field
	return nil
}
func (p *TScanRangeParams) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VolumeId = _field
	return nil
}

func (p *TScanRangeParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TScanRangeParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TScanRangeParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("scan_range", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ScanRange.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TScanRangeParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVolumeId() {
		if err = oprot.WriteFieldBegin("volume_id", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.VolumeId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TScanRangeParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScanRangeParams(%+v)", *p)

}

func (p *TScanRangeParams) DeepEqual(ano *TScanRangeParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ScanRange) {
		return false
	}
	if !p.Field2DeepEqual(ano.VolumeId) {
		return false
	}
	return true
}

func (p *TScanRangeParams) Field1DeepEqual(src *plannodes.TScanRange) bool {

	if !p.ScanRange.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TScanRangeParams) Field2DeepEqual(src int32) bool {

	if p.VolumeId != src {
		return false
	}
	return true
}

type TRuntimeFilterTargetParams struct {
	TargetFragmentInstanceId   *types.TUniqueId       `thrift:"target_fragment_instance_id,1,required" frugal:"1,required,types.TUniqueId" json:"target_fragment_instance_id"`
	TargetFragmentInstanceAddr *types.TNetworkAddress `thrift:"target_fragment_instance_addr,2,required" frugal:"2,required,types.TNetworkAddress" json:"target_fragment_instance_addr"`
}

func NewTRuntimeFilterTargetParams() *TRuntimeFilterTargetParams {
	return &TRuntimeFilterTargetParams{}
}

func (p *TRuntimeFilterTargetParams) InitDefault() {
}

var TRuntimeFilterTargetParams_TargetFragmentInstanceId_DEFAULT *types.TUniqueId

func (p *TRuntimeFilterTargetParams) GetTargetFragmentInstanceId() (v *types.TUniqueId) {
	if !p.IsSetTargetFragmentInstanceId() {
		return TRuntimeFilterTargetParams_TargetFragmentInstanceId_DEFAULT
	}
	return p.TargetFragmentInstanceId
}

var TRuntimeFilterTargetParams_TargetFragmentInstanceAddr_DEFAULT *types.TNetworkAddress

func (p *TRuntimeFilterTargetParams) GetTargetFragmentInstanceAddr() (v *types.TNetworkAddress) {
	if !p.IsSetTargetFragmentInstanceAddr() {
		return TRuntimeFilterTargetParams_TargetFragmentInstanceAddr_DEFAULT
	}
	return p.TargetFragmentInstanceAddr
}
func (p *TRuntimeFilterTargetParams) SetTargetFragmentInstanceId(val *types.TUniqueId) {
	p.TargetFragmentInstanceId = val
}
func (p *TRuntimeFilterTargetParams) SetTargetFragmentInstanceAddr(val *types.TNetworkAddress) {
	p.TargetFragmentInstanceAddr = val
}

var fieldIDToName_TRuntimeFilterTargetParams = map[int16]string{
	1: "target_fragment_instance_id",
	2: "target_fragment_instance_addr",
}

func (p *TRuntimeFilterTargetParams) IsSetTargetFragmentInstanceId() bool {
	return p.TargetFragmentInstanceId != nil
}

func (p *TRuntimeFilterTargetParams) IsSetTargetFragmentInstanceAddr() bool {
	return p.TargetFragmentInstanceAddr != nil
}

func (p *TRuntimeFilterTargetParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTargetFragmentInstanceId bool = false
	var issetTargetFragmentInstanceAddr bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTargetFragmentInstanceId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTargetFragmentInstanceAddr = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTargetFragmentInstanceId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTargetFragmentInstanceAddr {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRuntimeFilterTargetParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TRuntimeFilterTargetParams[fieldId]))
}

func (p *TRuntimeFilterTargetParams) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TargetFragmentInstanceId = _field
	return nil
}
func (p *TRuntimeFilterTargetParams) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TargetFragmentInstanceAddr = _field
	return nil
}

func (p *TRuntimeFilterTargetParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TRuntimeFilterTargetParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TRuntimeFilterTargetParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("target_fragment_instance_id", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.TargetFragmentInstanceId.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TRuntimeFilterTargetParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("target_fragment_instance_addr", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.TargetFragmentInstanceAddr.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TRuntimeFilterTargetParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRuntimeFilterTargetParams(%+v)", *p)

}

func (p *TRuntimeFilterTargetParams) DeepEqual(ano *TRuntimeFilterTargetParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TargetFragmentInstanceId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TargetFragmentInstanceAddr) {
		return false
	}
	return true
}

func (p *TRuntimeFilterTargetParams) Field1DeepEqual(src *types.TUniqueId) bool {

	if !p.TargetFragmentInstanceId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TRuntimeFilterTargetParams) Field2DeepEqual(src *types.TNetworkAddress) bool {

	if !p.TargetFragmentInstanceAddr.DeepEqual(src) {
		return false
	}
	return true
}

type TRuntimeFilterTargetParamsV2 struct {
	TargetFragmentInstanceIds  []*types.TUniqueId     `thrift:"target_fragment_instance_ids,1,required" frugal:"1,required,list<types.TUniqueId>" json:"target_fragment_instance_ids"`
	TargetFragmentInstanceAddr *types.TNetworkAddress `thrift:"target_fragment_instance_addr,2,required" frugal:"2,required,types.TNetworkAddress" json:"target_fragment_instance_addr"`
}

func NewTRuntimeFilterTargetParamsV2() *TRuntimeFilterTargetParamsV2 {
	return &TRuntimeFilterTargetParamsV2{}
}

func (p *TRuntimeFilterTargetParamsV2) InitDefault() {
}

func (p *TRuntimeFilterTargetParamsV2) GetTargetFragmentInstanceIds() (v []*types.TUniqueId) {
	return p.TargetFragmentInstanceIds
}

var TRuntimeFilterTargetParamsV2_TargetFragmentInstanceAddr_DEFAULT *types.TNetworkAddress

func (p *TRuntimeFilterTargetParamsV2) GetTargetFragmentInstanceAddr() (v *types.TNetworkAddress) {
	if !p.IsSetTargetFragmentInstanceAddr() {
		return TRuntimeFilterTargetParamsV2_TargetFragmentInstanceAddr_DEFAULT
	}
	return p.TargetFragmentInstanceAddr
}
func (p *TRuntimeFilterTargetParamsV2) SetTargetFragmentInstanceIds(val []*types.TUniqueId) {
	p.TargetFragmentInstanceIds = val
}
func (p *TRuntimeFilterTargetParamsV2) SetTargetFragmentInstanceAddr(val *types.TNetworkAddress) {
	p.TargetFragmentInstanceAddr = val
}

var fieldIDToName_TRuntimeFilterTargetParamsV2 = map[int16]string{
	1: "target_fragment_instance_ids",
	2: "target_fragment_instance_addr",
}

func (p *TRuntimeFilterTargetParamsV2) IsSetTargetFragmentInstanceAddr() bool {
	return p.TargetFragmentInstanceAddr != nil
}

func (p *TRuntimeFilterTargetParamsV2) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTargetFragmentInstanceIds bool = false
	var issetTargetFragmentInstanceAddr bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTargetFragmentInstanceIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTargetFragmentInstanceAddr = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTargetFragmentInstanceIds {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTargetFragmentInstanceAddr {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRuntimeFilterTargetParamsV2[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TRuntimeFilterTargetParamsV2[fieldId]))
}

func (p *TRuntimeFilterTargetParamsV2) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*types.TUniqueId, 0, size)
	values := make([]types.TUniqueId, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TargetFragmentInstanceIds = _field
	return nil
}
func (p *TRuntimeFilterTargetParamsV2) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TargetFragmentInstanceAddr = _field
	return nil
}

func (p *TRuntimeFilterTargetParamsV2) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TRuntimeFilterTargetParamsV2"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TRuntimeFilterTargetParamsV2) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("target_fragment_instance_ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TargetFragmentInstanceIds)); err != nil {
		return err
	}
	for _, v := range p.TargetFragmentInstanceIds {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TRuntimeFilterTargetParamsV2) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("target_fragment_instance_addr", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.TargetFragmentInstanceAddr.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TRuntimeFilterTargetParamsV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRuntimeFilterTargetParamsV2(%+v)", *p)

}

func (p *TRuntimeFilterTargetParamsV2) DeepEqual(ano *TRuntimeFilterTargetParamsV2) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TargetFragmentInstanceIds) {
		return false
	}
	if !p.Field2DeepEqual(ano.TargetFragmentInstanceAddr) {
		return false
	}
	return true
}

func (p *TRuntimeFilterTargetParamsV2) Field1DeepEqual(src []*types.TUniqueId) bool {

	if len(p.TargetFragmentInstanceIds) != len(src) {
		return false
	}
	for i, v := range p.TargetFragmentInstanceIds {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TRuntimeFilterTargetParamsV2) Field2DeepEqual(src *types.TNetworkAddress) bool {

	if !p.TargetFragmentInstanceAddr.DeepEqual(src) {
		return false
	}
	return true
}

type TRuntimeFilterParams struct {
	RuntimeFilterMergeAddr  *types.TNetworkAddress                    `thrift:"runtime_filter_merge_addr,1,optional" frugal:"1,optional,types.TNetworkAddress" json:"runtime_filter_merge_addr,omitempty"`
	RidToTargetParam        map[int32][]*TRuntimeFilterTargetParams   `thrift:"rid_to_target_param,2,optional" frugal:"2,optional,map<i32:list<TRuntimeFilterTargetParams>>" json:"rid_to_target_param,omitempty"`
	RidToRuntimeFilter      map[int32]*plannodes.TRuntimeFilterDesc   `thrift:"rid_to_runtime_filter,3,optional" frugal:"3,optional,map<i32:plannodes.TRuntimeFilterDesc>" json:"rid_to_runtime_filter,omitempty"`
	RuntimeFilterBuilderNum map[int32]int32                           `thrift:"runtime_filter_builder_num,4,optional" frugal:"4,optional,map<i32:i32>" json:"runtime_filter_builder_num,omitempty"`
	RidToTargetParamv2      map[int32][]*TRuntimeFilterTargetParamsV2 `thrift:"rid_to_target_paramv2,5,optional" frugal:"5,optional,map<i32:list<TRuntimeFilterTargetParamsV2>>" json:"rid_to_target_paramv2,omitempty"`
}

func NewTRuntimeFilterParams() *TRuntimeFilterParams {
	return &TRuntimeFilterParams{}
}

func (p *TRuntimeFilterParams) InitDefault() {
}

var TRuntimeFilterParams_RuntimeFilterMergeAddr_DEFAULT *types.TNetworkAddress

func (p *TRuntimeFilterParams) GetRuntimeFilterMergeAddr() (v *types.TNetworkAddress) {
	if !p.IsSetRuntimeFilterMergeAddr() {
		return TRuntimeFilterParams_RuntimeFilterMergeAddr_DEFAULT
	}
	return p.RuntimeFilterMergeAddr
}

var TRuntimeFilterParams_RidToTargetParam_DEFAULT map[int32][]*TRuntimeFilterTargetParams

func (p *TRuntimeFilterParams) GetRidToTargetParam() (v map[int32][]*TRuntimeFilterTargetParams) {
	if !p.IsSetRidToTargetParam() {
		return TRuntimeFilterParams_RidToTargetParam_DEFAULT
	}
	return p.RidToTargetParam
}

var TRuntimeFilterParams_RidToRuntimeFilter_DEFAULT map[int32]*plannodes.TRuntimeFilterDesc

func (p *TRuntimeFilterParams) GetRidToRuntimeFilter() (v map[int32]*plannodes.TRuntimeFilterDesc) {
	if !p.IsSetRidToRuntimeFilter() {
		return TRuntimeFilterParams_RidToRuntimeFilter_DEFAULT
	}
	return p.RidToRuntimeFilter
}

var TRuntimeFilterParams_RuntimeFilterBuilderNum_DEFAULT map[int32]int32

func (p *TRuntimeFilterParams) GetRuntimeFilterBuilderNum() (v map[int32]int32) {
	if !p.IsSetRuntimeFilterBuilderNum() {
		return TRuntimeFilterParams_RuntimeFilterBuilderNum_DEFAULT
	}
	return p.RuntimeFilterBuilderNum
}

var TRuntimeFilterParams_RidToTargetParamv2_DEFAULT map[int32][]*TRuntimeFilterTargetParamsV2

func (p *TRuntimeFilterParams) GetRidToTargetParamv2() (v map[int32][]*TRuntimeFilterTargetParamsV2) {
	if !p.IsSetRidToTargetParamv2() {
		return TRuntimeFilterParams_RidToTargetParamv2_DEFAULT
	}
	return p.RidToTargetParamv2
}
func (p *TRuntimeFilterParams) SetRuntimeFilterMergeAddr(val *types.TNetworkAddress) {
	p.RuntimeFilterMergeAddr = val
}
func (p *TRuntimeFilterParams) SetRidToTargetParam(val map[int32][]*TRuntimeFilterTargetParams) {
	p.RidToTargetParam = val
}
func (p *TRuntimeFilterParams) SetRidToRuntimeFilter(val map[int32]*plannodes.TRuntimeFilterDesc) {
	p.RidToRuntimeFilter = val
}
func (p *TRuntimeFilterParams) SetRuntimeFilterBuilderNum(val map[int32]int32) {
	p.RuntimeFilterBuilderNum = val
}
func (p *TRuntimeFilterParams) SetRidToTargetParamv2(val map[int32][]*TRuntimeFilterTargetParamsV2) {
	p.RidToTargetParamv2 = val
}

var fieldIDToName_TRuntimeFilterParams = map[int16]string{
	1: "runtime_filter_merge_addr",
	2: "rid_to_target_param",
	3: "rid_to_runtime_filter",
	4: "runtime_filter_builder_num",
	5: "rid_to_target_paramv2",
}

func (p *TRuntimeFilterParams) IsSetRuntimeFilterMergeAddr() bool {
	return p.RuntimeFilterMergeAddr != nil
}

func (p *TRuntimeFilterParams) IsSetRidToTargetParam() bool {
	return p.RidToTargetParam != nil
}

func (p *TRuntimeFilterParams) IsSetRidToRuntimeFilter() bool {
	return p.RidToRuntimeFilter != nil
}

func (p *TRuntimeFilterParams) IsSetRuntimeFilterBuilderNum() bool {
	return p.RuntimeFilterBuilderNum != nil
}

func (p *TRuntimeFilterParams) IsSetRidToTargetParamv2() bool {
	return p.RidToTargetParamv2 != nil
}

func (p *TRuntimeFilterParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRuntimeFilterParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TRuntimeFilterParams) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.RuntimeFilterMergeAddr = _field
	return nil
}
func (p *TRuntimeFilterParams) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int32][]*TRuntimeFilterTargetParams, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]*TRuntimeFilterTargetParams, 0, size)
		values := make([]TRuntimeFilterTargetParams, size)
		for i := 0; i < size; i++ {
			_elem := &values[i]
			_elem.InitDefault()

			if err := _elem.Read(iprot); err != nil {
				return err
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.RidToTargetParam = _field
	return nil
}
func (p *TRuntimeFilterParams) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int32]*plannodes.TRuntimeFilterDesc, size)
	values := make([]plannodes.TRuntimeFilterDesc, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.RidToRuntimeFilter = _field
	return nil
}
func (p *TRuntimeFilterParams) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int32]int32, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.RuntimeFilterBuilderNum = _field
	return nil
}
func (p *TRuntimeFilterParams) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int32][]*TRuntimeFilterTargetParamsV2, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]*TRuntimeFilterTargetParamsV2, 0, size)
		values := make([]TRuntimeFilterTargetParamsV2, size)
		for i := 0; i < size; i++ {
			_elem := &values[i]
			_elem.InitDefault()

			if err := _elem.Read(iprot); err != nil {
				return err
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.RidToTargetParamv2 = _field
	return nil
}

func (p *TRuntimeFilterParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TRuntimeFilterParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TRuntimeFilterParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRuntimeFilterMergeAddr() {
		if err = oprot.WriteFieldBegin("runtime_filter_merge_addr", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.RuntimeFilterMergeAddr.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TRuntimeFilterParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRidToTargetParam() {
		if err = oprot.WriteFieldBegin("rid_to_target_param", thrift.MAP, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.RidToTargetParam)); err != nil {
			return err
		}
		for k, v := range p.RidToTargetParam {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TRuntimeFilterParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRidToRuntimeFilter() {
		if err = oprot.WriteFieldBegin("rid_to_runtime_filter", thrift.MAP, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.RidToRuntimeFilter)); err != nil {
			return err
		}
		for k, v := range p.RidToRuntimeFilter {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TRuntimeFilterParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRuntimeFilterBuilderNum() {
		if err = oprot.WriteFieldBegin("runtime_filter_builder_num", thrift.MAP, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.RuntimeFilterBuilderNum)); err != nil {
			return err
		}
		for k, v := range p.RuntimeFilterBuilderNum {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TRuntimeFilterParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRidToTargetParamv2() {
		if err = oprot.WriteFieldBegin("rid_to_target_paramv2", thrift.MAP, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.RidToTargetParamv2)); err != nil {
			return err
		}
		for k, v := range p.RidToTargetParamv2 {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TRuntimeFilterParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRuntimeFilterParams(%+v)", *p)

}

func (p *TRuntimeFilterParams) DeepEqual(ano *TRuntimeFilterParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RuntimeFilterMergeAddr) {
		return false
	}
	if !p.Field2DeepEqual(ano.RidToTargetParam) {
		return false
	}
	if !p.Field3DeepEqual(ano.RidToRuntimeFilter) {
		return false
	}
	if !p.Field4DeepEqual(ano.RuntimeFilterBuilderNum) {
		return false
	}
	if !p.Field5DeepEqual(ano.RidToTargetParamv2) {
		return false
	}
	return true
}

func (p *TRuntimeFilterParams) Field1DeepEqual(src *types.TNetworkAddress) bool {

	if !p.RuntimeFilterMergeAddr.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TRuntimeFilterParams) Field2DeepEqual(src map[int32][]*TRuntimeFilterTargetParams) bool {

	if len(p.RidToTargetParam) != len(src) {
		return false
	}
	for k, v := range p.RidToTargetParam {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *TRuntimeFilterParams) Field3DeepEqual(src map[int32]*plannodes.TRuntimeFilterDesc) bool {

	if len(p.RidToRuntimeFilter) != len(src) {
		return false
	}
	for k, v := range p.RidToRuntimeFilter {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TRuntimeFilterParams) Field4DeepEqual(src map[int32]int32) bool {

	if len(p.RuntimeFilterBuilderNum) != len(src) {
		return false
	}
	for k, v := range p.RuntimeFilterBuilderNum {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TRuntimeFilterParams) Field5DeepEqual(src map[int32][]*TRuntimeFilterTargetParamsV2) bool {

	if len(p.RidToTargetParamv2) != len(src) {
		return false
	}
	for k, v := range p.RidToTargetParamv2 {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}

type TPlanFragmentExecParams struct {
	QueryId                           *types.TUniqueId                          `thrift:"query_id,1,required" frugal:"1,required,types.TUniqueId" json:"query_id"`
	FragmentInstanceId                *types.TUniqueId                          `thrift:"fragment_instance_id,2,required" frugal:"2,required,types.TUniqueId" json:"fragment_instance_id"`
	PerNodeScanRanges                 map[types.TPlanNodeId][]*TScanRangeParams `thrift:"per_node_scan_ranges,3,required" frugal:"3,required,map<i32:list<TScanRangeParams>>" json:"per_node_scan_ranges"`
	PerExchNumSenders                 map[types.TPlanNodeId]int32               `thrift:"per_exch_num_senders,4,required" frugal:"4,required,map<i32:i32>" json:"per_exch_num_senders"`
	Destinations                      []*datasinks.TPlanFragmentDestination     `thrift:"destinations,5" frugal:"5,default,list<datasinks.TPlanFragmentDestination>" json:"destinations"`
	SenderId                          *int32                                    `thrift:"sender_id,9,optional" frugal:"9,optional,i32" json:"sender_id,omitempty"`
	NumSenders                        *int32                                    `thrift:"num_senders,10,optional" frugal:"10,optional,i32" json:"num_senders,omitempty"`
	SendQueryStatisticsWithEveryBatch *bool                                     `thrift:"send_query_statistics_with_every_batch,11,optional" frugal:"11,optional,bool" json:"send_query_statistics_with_every_batch,omitempty"`
	RuntimeFilterParams               *TRuntimeFilterParams                     `thrift:"runtime_filter_params,12,optional" frugal:"12,optional,TRuntimeFilterParams" json:"runtime_filter_params,omitempty"`
	GroupCommit                       *bool                                     `thrift:"group_commit,13,optional" frugal:"13,optional,bool" json:"group_commit,omitempty"`
	TopnFilterSourceNodeIds           []int32                                   `thrift:"topn_filter_source_node_ids,14,optional" frugal:"14,optional,list<i32>" json:"topn_filter_source_node_ids,omitempty"`
}

func NewTPlanFragmentExecParams() *TPlanFragmentExecParams {
	return &TPlanFragmentExecParams{}
}

func (p *TPlanFragmentExecParams) InitDefault() {
}

var TPlanFragmentExecParams_QueryId_DEFAULT *types.TUniqueId

func (p *TPlanFragmentExecParams) GetQueryId() (v *types.TUniqueId) {
	if !p.IsSetQueryId() {
		return TPlanFragmentExecParams_QueryId_DEFAULT
	}
	return p.QueryId
}

var TPlanFragmentExecParams_FragmentInstanceId_DEFAULT *types.TUniqueId

func (p *TPlanFragmentExecParams) GetFragmentInstanceId() (v *types.TUniqueId) {
	if !p.IsSetFragmentInstanceId() {
		return TPlanFragmentExecParams_FragmentInstanceId_DEFAULT
	}
	return p.FragmentInstanceId
}

func (p *TPlanFragmentExecParams) GetPerNodeScanRanges() (v map[types.TPlanNodeId][]*TScanRangeParams) {
	return p.PerNodeScanRanges
}

func (p *TPlanFragmentExecParams) GetPerExchNumSenders() (v map[types.TPlanNodeId]int32) {
	return p.PerExchNumSenders
}

func (p *TPlanFragmentExecParams) GetDestinations() (v []*datasinks.TPlanFragmentDestination) {
	return p.Destinations
}

var TPlanFragmentExecParams_SenderId_DEFAULT int32

func (p *TPlanFragmentExecParams) GetSenderId() (v int32) {
	if !p.IsSetSenderId() {
		return TPlanFragmentExecParams_SenderId_DEFAULT
	}
	return *p.SenderId
}

var TPlanFragmentExecParams_NumSenders_DEFAULT int32

func (p *TPlanFragmentExecParams) GetNumSenders() (v int32) {
	if !p.IsSetNumSenders() {
		return TPlanFragmentExecParams_NumSenders_DEFAULT
	}
	return *p.NumSenders
}

var TPlanFragmentExecParams_SendQueryStatisticsWithEveryBatch_DEFAULT bool

func (p *TPlanFragmentExecParams) GetSendQueryStatisticsWithEveryBatch() (v bool) {
	if !p.IsSetSendQueryStatisticsWithEveryBatch() {
		return TPlanFragmentExecParams_SendQueryStatisticsWithEveryBatch_DEFAULT
	}
	return *p.SendQueryStatisticsWithEveryBatch
}

var TPlanFragmentExecParams_RuntimeFilterParams_DEFAULT *TRuntimeFilterParams

func (p *TPlanFragmentExecParams) GetRuntimeFilterParams() (v *TRuntimeFilterParams) {
	if !p.IsSetRuntimeFilterParams() {
		return TPlanFragmentExecParams_RuntimeFilterParams_DEFAULT
	}
	return p.RuntimeFilterParams
}

var TPlanFragmentExecParams_GroupCommit_DEFAULT bool

func (p *TPlanFragmentExecParams) GetGroupCommit() (v bool) {
	if !p.IsSetGroupCommit() {
		return TPlanFragmentExecParams_GroupCommit_DEFAULT
	}
	return *p.GroupCommit
}

var TPlanFragmentExecParams_TopnFilterSourceNodeIds_DEFAULT []int32

func (p *TPlanFragmentExecParams) GetTopnFilterSourceNodeIds() (v []int32) {
	if !p.IsSetTopnFilterSourceNodeIds() {
		return TPlanFragmentExecParams_TopnFilterSourceNodeIds_DEFAULT
	}
	return p.TopnFilterSourceNodeIds
}
func (p *TPlanFragmentExecParams) SetQueryId(val *types.TUniqueId) {
	p.QueryId = val
}
func (p *TPlanFragmentExecParams) SetFragmentInstanceId(val *types.TUniqueId) {
	p.FragmentInstanceId = val
}
func (p *TPlanFragmentExecParams) SetPerNodeScanRanges(val map[types.TPlanNodeId][]*TScanRangeParams) {
	p.PerNodeScanRanges = val
}
func (p *TPlanFragmentExecParams) SetPerExchNumSenders(val map[types.TPlanNodeId]int32) {
	p.PerExchNumSenders = val
}
func (p *TPlanFragmentExecParams) SetDestinations(val []*datasinks.TPlanFragmentDestination) {
	p.Destinations = val
}
func (p *TPlanFragmentExecParams) SetSenderId(val *int32) {
	p.SenderId = val
}
func (p *TPlanFragmentExecParams) SetNumSenders(val *int32) {
	p.NumSenders = val
}
func (p *TPlanFragmentExecParams) SetSendQueryStatisticsWithEveryBatch(val *bool) {
	p.SendQueryStatisticsWithEveryBatch = val
}
func (p *TPlanFragmentExecParams) SetRuntimeFilterParams(val *TRuntimeFilterParams) {
	p.RuntimeFilterParams = val
}
func (p *TPlanFragmentExecParams) SetGroupCommit(val *bool) {
	p.GroupCommit = val
}
func (p *TPlanFragmentExecParams) SetTopnFilterSourceNodeIds(val []int32) {
	p.TopnFilterSourceNodeIds = val
}

var fieldIDToName_TPlanFragmentExecParams = map[int16]string{
	1:  "query_id",
	2:  "fragment_instance_id",
	3:  "per_node_scan_ranges",
	4:  "per_exch_num_senders",
	5:  "destinations",
	9:  "sender_id",
	10: "num_senders",
	11: "send_query_statistics_with_every_batch",
	12: "runtime_filter_params",
	13: "group_commit",
	14: "topn_filter_source_node_ids",
}

func (p *TPlanFragmentExecParams) IsSetQueryId() bool {
	return p.QueryId != nil
}

func (p *TPlanFragmentExecParams) IsSetFragmentInstanceId() bool {
	return p.FragmentInstanceId != nil
}

func (p *TPlanFragmentExecParams) IsSetSenderId() bool {
	return p.SenderId != nil
}

func (p *TPlanFragmentExecParams) IsSetNumSenders() bool {
	return p.NumSenders != nil
}

func (p *TPlanFragmentExecParams) IsSetSendQueryStatisticsWithEveryBatch() bool {
	return p.SendQueryStatisticsWithEveryBatch != nil
}

func (p *TPlanFragmentExecParams) IsSetRuntimeFilterParams() bool {
	return p.RuntimeFilterParams != nil
}

func (p *TPlanFragmentExecParams) IsSetGroupCommit() bool {
	return p.GroupCommit != nil
}

func (p *TPlanFragmentExecParams) IsSetTopnFilterSourceNodeIds() bool {
	return p.TopnFilterSourceNodeIds != nil
}

func (p *TPlanFragmentExecParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetQueryId bool = false
	var issetFragmentInstanceId bool = false
	var issetPerNodeScanRanges bool = false
	var issetPerExchNumSenders bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetQueryId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetFragmentInstanceId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPerNodeScanRanges = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPerExchNumSenders = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetQueryId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetFragmentInstanceId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPerNodeScanRanges {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPerExchNumSenders {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPlanFragmentExecParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPlanFragmentExecParams[fieldId]))
}

func (p *TPlanFragmentExecParams) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryId = _field
	return nil
}
func (p *TPlanFragmentExecParams) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FragmentInstanceId = _field
	return nil
}
func (p *TPlanFragmentExecParams) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TPlanNodeId][]*TScanRangeParams, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]*TScanRangeParams, 0, size)
		values := make([]TScanRangeParams, size)
		for i := 0; i < size; i++ {
			_elem := &values[i]
			_elem.InitDefault()

			if err := _elem.Read(iprot); err != nil {
				return err
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.PerNodeScanRanges = _field
	return nil
}
func (p *TPlanFragmentExecParams) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TPlanNodeId]int32, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.PerExchNumSenders = _field
	return nil
}
func (p *TPlanFragmentExecParams) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*datasinks.TPlanFragmentDestination, 0, size)
	values := make([]datasinks.TPlanFragmentDestination, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Destinations = _field
	return nil
}
func (p *TPlanFragmentExecParams) ReadField9(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SenderId = _field
	return nil
}
func (p *TPlanFragmentExecParams) ReadField10(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NumSenders = _field
	return nil
}
func (p *TPlanFragmentExecParams) ReadField11(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SendQueryStatisticsWithEveryBatch = _field
	return nil
}
func (p *TPlanFragmentExecParams) ReadField12(iprot thrift.TProtocol) error {
	_field := NewTRuntimeFilterParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.RuntimeFilterParams = _field
	return nil
}
func (p *TPlanFragmentExecParams) ReadField13(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.GroupCommit = _field
	return nil
}
func (p *TPlanFragmentExecParams) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TopnFilterSourceNodeIds = _field
	return nil
}

func (p *TPlanFragmentExecParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPlanFragmentExecParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPlanFragmentExecParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("query_id", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.QueryId.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPlanFragmentExecParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fragment_instance_id", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.FragmentInstanceId.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPlanFragmentExecParams) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("per_node_scan_ranges", thrift.MAP, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.PerNodeScanRanges)); err != nil {
		return err
	}
	for k, v := range p.PerNodeScanRanges {
		if err := oprot.WriteI32(k); err != nil {
			return err
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPlanFragmentExecParams) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("per_exch_num_senders", thrift.MAP, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.PerExchNumSenders)); err != nil {
		return err
	}
	for k, v := range p.PerExchNumSenders {
		if err := oprot.WriteI32(k); err != nil {
			return err
		}
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TPlanFragmentExecParams) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("destinations", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Destinations)); err != nil {
		return err
	}
	for _, v := range p.Destinations {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TPlanFragmentExecParams) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSenderId() {
		if err = oprot.WriteFieldBegin("sender_id", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SenderId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TPlanFragmentExecParams) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumSenders() {
		if err = oprot.WriteFieldBegin("num_senders", thrift.I32, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.NumSenders); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TPlanFragmentExecParams) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSendQueryStatisticsWithEveryBatch() {
		if err = oprot.WriteFieldBegin("send_query_statistics_with_every_batch", thrift.BOOL, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.SendQueryStatisticsWithEveryBatch); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TPlanFragmentExecParams) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetRuntimeFilterParams() {
		if err = oprot.WriteFieldBegin("runtime_filter_params", thrift.STRUCT, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.RuntimeFilterParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TPlanFragmentExecParams) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupCommit() {
		if err = oprot.WriteFieldBegin("group_commit", thrift.BOOL, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.GroupCommit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TPlanFragmentExecParams) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopnFilterSourceNodeIds() {
		if err = oprot.WriteFieldBegin("topn_filter_source_node_ids", thrift.LIST, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.TopnFilterSourceNodeIds)); err != nil {
			return err
		}
		for _, v := range p.TopnFilterSourceNodeIds {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TPlanFragmentExecParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPlanFragmentExecParams(%+v)", *p)

}

func (p *TPlanFragmentExecParams) DeepEqual(ano *TPlanFragmentExecParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.QueryId) {
		return false
	}
	if !p.Field2DeepEqual(ano.FragmentInstanceId) {
		return false
	}
	if !p.Field3DeepEqual(ano.PerNodeScanRanges) {
		return false
	}
	if !p.Field4DeepEqual(ano.PerExchNumSenders) {
		return false
	}
	if !p.Field5DeepEqual(ano.Destinations) {
		return false
	}
	if !p.Field9DeepEqual(ano.SenderId) {
		return false
	}
	if !p.Field10DeepEqual(ano.NumSenders) {
		return false
	}
	if !p.Field11DeepEqual(ano.SendQueryStatisticsWithEveryBatch) {
		return false
	}
	if !p.Field12DeepEqual(ano.RuntimeFilterParams) {
		return false
	}
	if !p.Field13DeepEqual(ano.GroupCommit) {
		return false
	}
	if !p.Field14DeepEqual(ano.TopnFilterSourceNodeIds) {
		return false
	}
	return true
}

func (p *TPlanFragmentExecParams) Field1DeepEqual(src *types.TUniqueId) bool {

	if !p.QueryId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanFragmentExecParams) Field2DeepEqual(src *types.TUniqueId) bool {

	if !p.FragmentInstanceId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanFragmentExecParams) Field3DeepEqual(src map[types.TPlanNodeId][]*TScanRangeParams) bool {

	if len(p.PerNodeScanRanges) != len(src) {
		return false
	}
	for k, v := range p.PerNodeScanRanges {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *TPlanFragmentExecParams) Field4DeepEqual(src map[types.TPlanNodeId]int32) bool {

	if len(p.PerExchNumSenders) != len(src) {
		return false
	}
	for k, v := range p.PerExchNumSenders {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TPlanFragmentExecParams) Field5DeepEqual(src []*datasinks.TPlanFragmentDestination) bool {

	if len(p.Destinations) != len(src) {
		return false
	}
	for i, v := range p.Destinations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPlanFragmentExecParams) Field9DeepEqual(src *int32) bool {

	if p.SenderId == src {
		return true
	} else if p.SenderId == nil || src == nil {
		return false
	}
	if *p.SenderId != *src {
		return false
	}
	return true
}
func (p *TPlanFragmentExecParams) Field10DeepEqual(src *int32) bool {

	if p.NumSenders == src {
		return true
	} else if p.NumSenders == nil || src == nil {
		return false
	}
	if *p.NumSenders != *src {
		return false
	}
	return true
}
func (p *TPlanFragmentExecParams) Field11DeepEqual(src *bool) bool {

	if p.SendQueryStatisticsWithEveryBatch == src {
		return true
	} else if p.SendQueryStatisticsWithEveryBatch == nil || src == nil {
		return false
	}
	if *p.SendQueryStatisticsWithEveryBatch != *src {
		return false
	}
	return true
}
func (p *TPlanFragmentExecParams) Field12DeepEqual(src *TRuntimeFilterParams) bool {

	if !p.RuntimeFilterParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPlanFragmentExecParams) Field13DeepEqual(src *bool) bool {

	if p.GroupCommit == src {
		return true
	} else if p.GroupCommit == nil || src == nil {
		return false
	}
	if *p.GroupCommit != *src {
		return false
	}
	return true
}
func (p *TPlanFragmentExecParams) Field14DeepEqual(src []int32) bool {

	if len(p.TopnFilterSourceNodeIds) != len(src) {
		return false
	}
	for i, v := range p.TopnFilterSourceNodeIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type TQueryGlobals struct {
	NowString         string  `thrift:"now_string,1,required" frugal:"1,required,string" json:"now_string"`
	TimestampMs       *int64  `thrift:"timestamp_ms,2,optional" frugal:"2,optional,i64" json:"timestamp_ms,omitempty"`
	TimeZone          *string `thrift:"time_zone,3,optional" frugal:"3,optional,string" json:"time_zone,omitempty"`
	LoadZeroTolerance bool    `thrift:"load_zero_tolerance,4,optional" frugal:"4,optional,bool" json:"load_zero_tolerance,omitempty"`
	NanoSeconds       *int32  `thrift:"nano_seconds,5,optional" frugal:"5,optional,i32" json:"nano_seconds,omitempty"`
}

func NewTQueryGlobals() *TQueryGlobals {
	return &TQueryGlobals{

		LoadZeroTolerance: false,
	}
}

func (p *TQueryGlobals) InitDefault() {
	p.LoadZeroTolerance = false
}

func (p *TQueryGlobals) GetNowString() (v string) {
	return p.NowString
}

var TQueryGlobals_TimestampMs_DEFAULT int64

func (p *TQueryGlobals) GetTimestampMs() (v int64) {
	if !p.IsSetTimestampMs() {
		return TQueryGlobals_TimestampMs_DEFAULT
	}
	return *p.TimestampMs
}

var TQueryGlobals_TimeZone_DEFAULT string

func (p *TQueryGlobals) GetTimeZone() (v string) {
	if !p.IsSetTimeZone() {
		return TQueryGlobals_TimeZone_DEFAULT
	}
	return *p.TimeZone
}

var TQueryGlobals_LoadZeroTolerance_DEFAULT bool = false

func (p *TQueryGlobals) GetLoadZeroTolerance() (v bool) {
	if !p.IsSetLoadZeroTolerance() {
		return TQueryGlobals_LoadZeroTolerance_DEFAULT
	}
	return p.LoadZeroTolerance
}

var TQueryGlobals_NanoSeconds_DEFAULT int32

func (p *TQueryGlobals) GetNanoSeconds() (v int32) {
	if !p.IsSetNanoSeconds() {
		return TQueryGlobals_NanoSeconds_DEFAULT
	}
	return *p.NanoSeconds
}
func (p *TQueryGlobals) SetNowString(val string) {
	p.NowString = val
}
func (p *TQueryGlobals) SetTimestampMs(val *int64) {
	p.TimestampMs = val
}
func (p *TQueryGlobals) SetTimeZone(val *string) {
	p.TimeZone = val
}
func (p *TQueryGlobals) SetLoadZeroTolerance(val bool) {
	p.LoadZeroTolerance = val
}
func (p *TQueryGlobals) SetNanoSeconds(val *int32) {
	p.NanoSeconds = val
}

var fieldIDToName_TQueryGlobals = map[int16]string{
	1: "now_string",
	2: "timestamp_ms",
	3: "time_zone",
	4: "load_zero_tolerance",
	5: "nano_seconds",
}

func (p *TQueryGlobals) IsSetTimestampMs() bool {
	return p.TimestampMs != nil
}

func (p *TQueryGlobals) IsSetTimeZone() bool {
	return p.TimeZone != nil
}

func (p *TQueryGlobals) IsSetLoadZeroTolerance() bool {
	return p.LoadZeroTolerance != TQueryGlobals_LoadZeroTolerance_DEFAULT
}

func (p *TQueryGlobals) IsSetNanoSeconds() bool {
	return p.NanoSeconds != nil
}

func (p *TQueryGlobals) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNowString bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetNowString = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNowString {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TQueryGlobals[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TQueryGlobals[fieldId]))
}

func (p *TQueryGlobals) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NowString = _field
	return nil
}
func (p *TQueryGlobals) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TimestampMs = _field
	return nil
}
func (p *TQueryGlobals) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TimeZone = _field
	return nil
}
func (p *TQueryGlobals) ReadField4(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LoadZeroTolerance = _field
	return nil
}
func (p *TQueryGlobals) ReadField5(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NanoSeconds = _field
	return nil
}

func (p *TQueryGlobals) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TQueryGlobals"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TQueryGlobals) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("now_string", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NowString); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TQueryGlobals) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestampMs() {
		if err = oprot.WriteFieldBegin("timestamp_ms", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TimestampMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TQueryGlobals) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeZone() {
		if err = oprot.WriteFieldBegin("time_zone", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TimeZone); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TQueryGlobals) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadZeroTolerance() {
		if err = oprot.WriteFieldBegin("load_zero_tolerance", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.LoadZeroTolerance); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TQueryGlobals) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNanoSeconds() {
		if err = oprot.WriteFieldBegin("nano_seconds", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.NanoSeconds); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TQueryGlobals) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TQueryGlobals(%+v)", *p)

}

func (p *TQueryGlobals) DeepEqual(ano *TQueryGlobals) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.NowString) {
		return false
	}
	if !p.Field2DeepEqual(ano.TimestampMs) {
		return false
	}
	if !p.Field3DeepEqual(ano.TimeZone) {
		return false
	}
	if !p.Field4DeepEqual(ano.LoadZeroTolerance) {
		return false
	}
	if !p.Field5DeepEqual(ano.NanoSeconds) {
		return false
	}
	return true
}

func (p *TQueryGlobals) Field1DeepEqual(src string) bool {

	if strings.Compare(p.NowString, src) != 0 {
		return false
	}
	return true
}
func (p *TQueryGlobals) Field2DeepEqual(src *int64) bool {

	if p.TimestampMs == src {
		return true
	} else if p.TimestampMs == nil || src == nil {
		return false
	}
	if *p.TimestampMs != *src {
		return false
	}
	return true
}
func (p *TQueryGlobals) Field3DeepEqual(src *string) bool {

	if p.TimeZone == src {
		return true
	} else if p.TimeZone == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TimeZone, *src) != 0 {
		return false
	}
	return true
}
func (p *TQueryGlobals) Field4DeepEqual(src bool) bool {

	if p.LoadZeroTolerance != src {
		return false
	}
	return true
}
func (p *TQueryGlobals) Field5DeepEqual(src *int32) bool {

	if p.NanoSeconds == src {
		return true
	} else if p.NanoSeconds == nil || src == nil {
		return false
	}
	if *p.NanoSeconds != *src {
		return false
	}
	return true
}

type TTxnParams struct {
	NeedTxn               *bool            `thrift:"need_txn,1,optional" frugal:"1,optional,bool" json:"need_txn,omitempty"`
	Token                 *string          `thrift:"token,2,optional" frugal:"2,optional,string" json:"token,omitempty"`
	ThriftRpcTimeoutMs    *int64           `thrift:"thrift_rpc_timeout_ms,3,optional" frugal:"3,optional,i64" json:"thrift_rpc_timeout_ms,omitempty"`
	Db                    *string          `thrift:"db,4,optional" frugal:"4,optional,string" json:"db,omitempty"`
	Tbl                   *string          `thrift:"tbl,5,optional" frugal:"5,optional,string" json:"tbl,omitempty"`
	UserIp                *string          `thrift:"user_ip,6,optional" frugal:"6,optional,string" json:"user_ip,omitempty"`
	TxnId                 *int64           `thrift:"txn_id,7,optional" frugal:"7,optional,i64" json:"txn_id,omitempty"`
	FragmentInstanceId    *types.TUniqueId `thrift:"fragment_instance_id,8,optional" frugal:"8,optional,types.TUniqueId" json:"fragment_instance_id,omitempty"`
	DbId                  *int64           `thrift:"db_id,9,optional" frugal:"9,optional,i64" json:"db_id,omitempty"`
	MaxFilterRatio        *float64         `thrift:"max_filter_ratio,10,optional" frugal:"10,optional,double" json:"max_filter_ratio,omitempty"`
	EnablePipelineTxnLoad bool             `thrift:"enable_pipeline_txn_load,11,optional" frugal:"11,optional,bool" json:"enable_pipeline_txn_load,omitempty"`
}

func NewTTxnParams() *TTxnParams {
	return &TTxnParams{

		EnablePipelineTxnLoad: true,
	}
}

func (p *TTxnParams) InitDefault() {
	p.EnablePipelineTxnLoad = true
}

var TTxnParams_NeedTxn_DEFAULT bool

func (p *TTxnParams) GetNeedTxn() (v bool) {
	if !p.IsSetNeedTxn() {
		return TTxnParams_NeedTxn_DEFAULT
	}
	return *p.NeedTxn
}

var TTxnParams_Token_DEFAULT string

func (p *TTxnParams) GetToken() (v string) {
	if !p.IsSetToken() {
		return TTxnParams_Token_DEFAULT
	}
	return *p.Token
}

var TTxnParams_ThriftRpcTimeoutMs_DEFAULT int64

func (p *TTxnParams) GetThriftRpcTimeoutMs() (v int64) {
	if !p.IsSetThriftRpcTimeoutMs() {
		return TTxnParams_ThriftRpcTimeoutMs_DEFAULT
	}
	return *p.ThriftRpcTimeoutMs
}

var TTxnParams_Db_DEFAULT string

func (p *TTxnParams) GetDb() (v string) {
	if !p.IsSetDb() {
		return TTxnParams_Db_DEFAULT
	}
	return *p.Db
}

var TTxnParams_Tbl_DEFAULT string

func (p *TTxnParams) GetTbl() (v string) {
	if !p.IsSetTbl() {
		return TTxnParams_Tbl_DEFAULT
	}
	return *p.Tbl
}

var TTxnParams_UserIp_DEFAULT string

func (p *TTxnParams) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TTxnParams_UserIp_DEFAULT
	}
	return *p.UserIp
}

var TTxnParams_TxnId_DEFAULT int64

func (p *TTxnParams) GetTxnId() (v int64) {
	if !p.IsSetTxnId() {
		return TTxnParams_TxnId_DEFAULT
	}
	return *p.TxnId
}

var TTxnParams_FragmentInstanceId_DEFAULT *types.TUniqueId

func (p *TTxnParams) GetFragmentInstanceId() (v *types.TUniqueId) {
	if !p.IsSetFragmentInstanceId() {
		return TTxnParams_FragmentInstanceId_DEFAULT
	}
	return p.FragmentInstanceId
}

var TTxnParams_DbId_DEFAULT int64

func (p *TTxnParams) GetDbId() (v int64) {
	if !p.IsSetDbId() {
		return TTxnParams_DbId_DEFAULT
	}
	return *p.DbId
}

var TTxnParams_MaxFilterRatio_DEFAULT float64

func (p *TTxnParams) GetMaxFilterRatio() (v float64) {
	if !p.IsSetMaxFilterRatio() {
		return TTxnParams_MaxFilterRatio_DEFAULT
	}
	return *p.MaxFilterRatio
}

var TTxnParams_EnablePipelineTxnLoad_DEFAULT bool = true

func (p *TTxnParams) GetEnablePipelineTxnLoad() (v bool) {
	if !p.IsSetEnablePipelineTxnLoad() {
		return TTxnParams_EnablePipelineTxnLoad_DEFAULT
	}
	return p.EnablePipelineTxnLoad
}
func (p *TTxnParams) SetNeedTxn(val *bool) {
	p.NeedTxn = val
}
func (p *TTxnParams) SetToken(val *string) {
	p.Token = val
}
func (p *TTxnParams) SetThriftRpcTimeoutMs(val *int64) {
	p.ThriftRpcTimeoutMs = val
}
func (p *TTxnParams) SetDb(val *string) {
	p.Db = val
}
func (p *TTxnParams) SetTbl(val *string) {
	p.Tbl = val
}
func (p *TTxnParams) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TTxnParams) SetTxnId(val *int64) {
	p.TxnId = val
}
func (p *TTxnParams) SetFragmentInstanceId(val *types.TUniqueId) {
	p.FragmentInstanceId = val
}
func (p *TTxnParams) SetDbId(val *int64) {
	p.DbId = val
}
func (p *TTxnParams) SetMaxFilterRatio(val *float64) {
	p.MaxFilterRatio = val
}
func (p *TTxnParams) SetEnablePipelineTxnLoad(val bool) {
	p.EnablePipelineTxnLoad = val
}

var fieldIDToName_TTxnParams = map[int16]string{
	1:  "need_txn",
	2:  "token",
	3:  "thrift_rpc_timeout_ms",
	4:  "db",
	5:  "tbl",
	6:  "user_ip",
	7:  "txn_id",
	8:  "fragment_instance_id",
	9:  "db_id",
	10: "max_filter_ratio",
	11: "enable_pipeline_txn_load",
}

func (p *TTxnParams) IsSetNeedTxn() bool {
	return p.NeedTxn != nil
}

func (p *TTxnParams) IsSetToken() bool {
	return p.Token != nil
}

func (p *TTxnParams) IsSetThriftRpcTimeoutMs() bool {
	return p.ThriftRpcTimeoutMs != nil
}

func (p *TTxnParams) IsSetDb() bool {
	return p.Db != nil
}

func (p *TTxnParams) IsSetTbl() bool {
	return p.Tbl != nil
}

func (p *TTxnParams) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TTxnParams) IsSetTxnId() bool {
	return p.TxnId != nil
}

func (p *TTxnParams) IsSetFragmentInstanceId() bool {
	return p.FragmentInstanceId != nil
}

func (p *TTxnParams) IsSetDbId() bool {
	return p.DbId != nil
}

func (p *TTxnParams) IsSetMaxFilterRatio() bool {
	return p.MaxFilterRatio != nil
}

func (p *TTxnParams) IsSetEnablePipelineTxnLoad() bool {
	return p.EnablePipelineTxnLoad != TTxnParams_EnablePipelineTxnLoad_DEFAULT
}

func (p *TTxnParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTxnParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTxnParams) ReadField1(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NeedTxn = _field
	return nil
}
func (p *TTxnParams) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}
func (p *TTxnParams) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ThriftRpcTimeoutMs = _field
	return nil
}
func (p *TTxnParams) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Db = _field
	return nil
}
func (p *TTxnParams) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Tbl = _field
	return nil
}
func (p *TTxnParams) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserIp = _field
	return nil
}
func (p *TTxnParams) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TxnId = _field
	return nil
}
func (p *TTxnParams) ReadField8(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FragmentInstanceId = _field
	return nil
}
func (p *TTxnParams) ReadField9(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbId = _field
	return nil
}
func (p *TTxnParams) ReadField10(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxFilterRatio = _field
	return nil
}
func (p *TTxnParams) ReadField11(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EnablePipelineTxnLoad = _field
	return nil
}

func (p *TTxnParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTxnParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTxnParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNeedTxn() {
		if err = oprot.WriteFieldBegin("need_txn", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.NeedTxn); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTxnParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTxnParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetThriftRpcTimeoutMs() {
		if err = oprot.WriteFieldBegin("thrift_rpc_timeout_ms", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ThriftRpcTimeoutMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTxnParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDb() {
		if err = oprot.WriteFieldBegin("db", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Db); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TTxnParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTbl() {
		if err = oprot.WriteFieldBegin("tbl", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Tbl); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TTxnParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TTxnParams) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnId() {
		if err = oprot.WriteFieldBegin("txn_id", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TxnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TTxnParams) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetFragmentInstanceId() {
		if err = oprot.WriteFieldBegin("fragment_instance_id", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FragmentInstanceId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TTxnParams) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbId() {
		if err = oprot.WriteFieldBegin("db_id", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DbId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TTxnParams) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxFilterRatio() {
		if err = oprot.WriteFieldBegin("max_filter_ratio", thrift.DOUBLE, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.MaxFilterRatio); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TTxnParams) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnablePipelineTxnLoad() {
		if err = oprot.WriteFieldBegin("enable_pipeline_txn_load", thrift.BOOL, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnablePipelineTxnLoad); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TTxnParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTxnParams(%+v)", *p)

}

func (p *TTxnParams) DeepEqual(ano *TTxnParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.NeedTxn) {
		return false
	}
	if !p.Field2DeepEqual(ano.Token) {
		return false
	}
	if !p.Field3DeepEqual(ano.ThriftRpcTimeoutMs) {
		return false
	}
	if !p.Field4DeepEqual(ano.Db) {
		return false
	}
	if !p.Field5DeepEqual(ano.Tbl) {
		return false
	}
	if !p.Field6DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field7DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field8DeepEqual(ano.FragmentInstanceId) {
		return false
	}
	if !p.Field9DeepEqual(ano.DbId) {
		return false
	}
	if !p.Field10DeepEqual(ano.MaxFilterRatio) {
		return false
	}
	if !p.Field11DeepEqual(ano.EnablePipelineTxnLoad) {
		return false
	}
	return true
}

func (p *TTxnParams) Field1DeepEqual(src *bool) bool {

	if p.NeedTxn == src {
		return true
	} else if p.NeedTxn == nil || src == nil {
		return false
	}
	if *p.NeedTxn != *src {
		return false
	}
	return true
}
func (p *TTxnParams) Field2DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *TTxnParams) Field3DeepEqual(src *int64) bool {

	if p.ThriftRpcTimeoutMs == src {
		return true
	} else if p.ThriftRpcTimeoutMs == nil || src == nil {
		return false
	}
	if *p.ThriftRpcTimeoutMs != *src {
		return false
	}
	return true
}
func (p *TTxnParams) Field4DeepEqual(src *string) bool {

	if p.Db == src {
		return true
	} else if p.Db == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Db, *src) != 0 {
		return false
	}
	return true
}
func (p *TTxnParams) Field5DeepEqual(src *string) bool {

	if p.Tbl == src {
		return true
	} else if p.Tbl == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Tbl, *src) != 0 {
		return false
	}
	return true
}
func (p *TTxnParams) Field6DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TTxnParams) Field7DeepEqual(src *int64) bool {

	if p.TxnId == src {
		return true
	} else if p.TxnId == nil || src == nil {
		return false
	}
	if *p.TxnId != *src {
		return false
	}
	return true
}
func (p *TTxnParams) Field8DeepEqual(src *types.TUniqueId) bool {

	if !p.FragmentInstanceId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTxnParams) Field9DeepEqual(src *int64) bool {

	if p.DbId == src {
		return true
	} else if p.DbId == nil || src == nil {
		return false
	}
	if *p.DbId != *src {
		return false
	}
	return true
}
func (p *TTxnParams) Field10DeepEqual(src *float64) bool {

	if p.MaxFilterRatio == src {
		return true
	} else if p.MaxFilterRatio == nil || src == nil {
		return false
	}
	if *p.MaxFilterRatio != *src {
		return false
	}
	return true
}
func (p *TTxnParams) Field11DeepEqual(src bool) bool {

	if p.EnablePipelineTxnLoad != src {
		return false
	}
	return true
}

type TColumnDict struct {
	Type    *types.TPrimitiveType `thrift:"type,1,optional" frugal:"1,optional,TPrimitiveType" json:"type,omitempty"`
	StrDict []string              `thrift:"str_dict,2" frugal:"2,default,list<string>" json:"str_dict"`
}

func NewTColumnDict() *TColumnDict {
	return &TColumnDict{}
}

func (p *TColumnDict) InitDefault() {
}

var TColumnDict_Type_DEFAULT types.TPrimitiveType

func (p *TColumnDict) GetType() (v types.TPrimitiveType) {
	if !p.IsSetType() {
		return TColumnDict_Type_DEFAULT
	}
	return *p.Type
}

func (p *TColumnDict) GetStrDict() (v []string) {
	return p.StrDict
}
func (p *TColumnDict) SetType(val *types.TPrimitiveType) {
	p.Type = val
}
func (p *TColumnDict) SetStrDict(val []string) {
	p.StrDict = val
}

var fieldIDToName_TColumnDict = map[int16]string{
	1: "type",
	2: "str_dict",
}

func (p *TColumnDict) IsSetType() bool {
	return p.Type != nil
}

func (p *TColumnDict) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TColumnDict[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TColumnDict) ReadField1(iprot thrift.TProtocol) error {

	var _field *types.TPrimitiveType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TPrimitiveType(v)
		_field = &tmp
	}
	p.Type = _field
	return nil
}
func (p *TColumnDict) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.StrDict = _field
	return nil
}

func (p *TColumnDict) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TColumnDict"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TColumnDict) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TColumnDict) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("str_dict", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.StrDict)); err != nil {
		return err
	}
	for _, v := range p.StrDict {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TColumnDict) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumnDict(%+v)", *p)

}

func (p *TColumnDict) DeepEqual(ano *TColumnDict) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.StrDict) {
		return false
	}
	return true
}

func (p *TColumnDict) Field1DeepEqual(src *types.TPrimitiveType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if *p.Type != *src {
		return false
	}
	return true
}
func (p *TColumnDict) Field2DeepEqual(src []string) bool {

	if len(p.StrDict) != len(src) {
		return false
	}
	for i, v := range p.StrDict {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type TGlobalDict struct {
	Dicts     map[int32]*TColumnDict `thrift:"dicts,1,optional" frugal:"1,optional,map<i32:TColumnDict>" json:"dicts,omitempty"`
	SlotDicts map[int32]int32        `thrift:"slot_dicts,2,optional" frugal:"2,optional,map<i32:i32>" json:"slot_dicts,omitempty"`
}

func NewTGlobalDict() *TGlobalDict {
	return &TGlobalDict{}
}

func (p *TGlobalDict) InitDefault() {
}

var TGlobalDict_Dicts_DEFAULT map[int32]*TColumnDict

func (p *TGlobalDict) GetDicts() (v map[int32]*TColumnDict) {
	if !p.IsSetDicts() {
		return TGlobalDict_Dicts_DEFAULT
	}
	return p.Dicts
}

var TGlobalDict_SlotDicts_DEFAULT map[int32]int32

func (p *TGlobalDict) GetSlotDicts() (v map[int32]int32) {
	if !p.IsSetSlotDicts() {
		return TGlobalDict_SlotDicts_DEFAULT
	}
	return p.SlotDicts
}
func (p *TGlobalDict) SetDicts(val map[int32]*TColumnDict) {
	p.Dicts = val
}
func (p *TGlobalDict) SetSlotDicts(val map[int32]int32) {
	p.SlotDicts = val
}

var fieldIDToName_TGlobalDict = map[int16]string{
	1: "dicts",
	2: "slot_dicts",
}

func (p *TGlobalDict) IsSetDicts() bool {
	return p.Dicts != nil
}

func (p *TGlobalDict) IsSetSlotDicts() bool {
	return p.SlotDicts != nil
}

func (p *TGlobalDict) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TGlobalDict[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TGlobalDict) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int32]*TColumnDict, size)
	values := make([]TColumnDict, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Dicts = _field
	return nil
}
func (p *TGlobalDict) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int32]int32, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.SlotDicts = _field
	return nil
}

func (p *TGlobalDict) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TGlobalDict"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TGlobalDict) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDicts() {
		if err = oprot.WriteFieldBegin("dicts", thrift.MAP, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Dicts)); err != nil {
			return err
		}
		for k, v := range p.Dicts {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TGlobalDict) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSlotDicts() {
		if err = oprot.WriteFieldBegin("slot_dicts", thrift.MAP, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.SlotDicts)); err != nil {
			return err
		}
		for k, v := range p.SlotDicts {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TGlobalDict) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGlobalDict(%+v)", *p)

}

func (p *TGlobalDict) DeepEqual(ano *TGlobalDict) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Dicts) {
		return false
	}
	if !p.Field2DeepEqual(ano.SlotDicts) {
		return false
	}
	return true
}

func (p *TGlobalDict) Field1DeepEqual(src map[int32]*TColumnDict) bool {

	if len(p.Dicts) != len(src) {
		return false
	}
	for k, v := range p.Dicts {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TGlobalDict) Field2DeepEqual(src map[int32]int32) bool {

	if len(p.SlotDicts) != len(src) {
		return false
	}
	for k, v := range p.SlotDicts {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}

type TPipelineWorkloadGroup struct {
	Id         *int64            `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name       *string           `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Properties map[string]string `thrift:"properties,3,optional" frugal:"3,optional,map<string:string>" json:"properties,omitempty"`
	Version    *int64            `thrift:"version,4,optional" frugal:"4,optional,i64" json:"version,omitempty"`
}

func NewTPipelineWorkloadGroup() *TPipelineWorkloadGroup {
	return &TPipelineWorkloadGroup{}
}

func (p *TPipelineWorkloadGroup) InitDefault() {
}

var TPipelineWorkloadGroup_Id_DEFAULT int64

func (p *TPipelineWorkloadGroup) GetId() (v int64) {
	if !p.IsSetId() {
		return TPipelineWorkloadGroup_Id_DEFAULT
	}
	return *p.Id
}

var TPipelineWorkloadGroup_Name_DEFAULT string

func (p *TPipelineWorkloadGroup) GetName() (v string) {
	if !p.IsSetName() {
		return TPipelineWorkloadGroup_Name_DEFAULT
	}
	return *p.Name
}

var TPipelineWorkloadGroup_Properties_DEFAULT map[string]string

func (p *TPipelineWorkloadGroup) GetProperties() (v map[string]string) {
	if !p.IsSetProperties() {
		return TPipelineWorkloadGroup_Properties_DEFAULT
	}
	return p.Properties
}

var TPipelineWorkloadGroup_Version_DEFAULT int64

func (p *TPipelineWorkloadGroup) GetVersion() (v int64) {
	if !p.IsSetVersion() {
		return TPipelineWorkloadGroup_Version_DEFAULT
	}
	return *p.Version
}
func (p *TPipelineWorkloadGroup) SetId(val *int64) {
	p.Id = val
}
func (p *TPipelineWorkloadGroup) SetName(val *string) {
	p.Name = val
}
func (p *TPipelineWorkloadGroup) SetProperties(val map[string]string) {
	p.Properties = val
}
func (p *TPipelineWorkloadGroup) SetVersion(val *int64) {
	p.Version = val
}

var fieldIDToName_TPipelineWorkloadGroup = map[int16]string{
	1: "id",
	2: "name",
	3: "properties",
	4: "version",
}

func (p *TPipelineWorkloadGroup) IsSetId() bool {
	return p.Id != nil
}

func (p *TPipelineWorkloadGroup) IsSetName() bool {
	return p.Name != nil
}

func (p *TPipelineWorkloadGroup) IsSetProperties() bool {
	return p.Properties != nil
}

func (p *TPipelineWorkloadGroup) IsSetVersion() bool {
	return p.Version != nil
}

func (p *TPipelineWorkloadGroup) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPipelineWorkloadGroup[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TPipelineWorkloadGroup) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *TPipelineWorkloadGroup) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *TPipelineWorkloadGroup) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Properties = _field
	return nil
}
func (p *TPipelineWorkloadGroup) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}

func (p *TPipelineWorkloadGroup) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPipelineWorkloadGroup"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPipelineWorkloadGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPipelineWorkloadGroup) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPipelineWorkloadGroup) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperties() {
		if err = oprot.WriteFieldBegin("properties", thrift.MAP, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
			return err
		}
		for k, v := range p.Properties {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPipelineWorkloadGroup) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TPipelineWorkloadGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPipelineWorkloadGroup(%+v)", *p)

}

func (p *TPipelineWorkloadGroup) DeepEqual(ano *TPipelineWorkloadGroup) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Properties) {
		return false
	}
	if !p.Field4DeepEqual(ano.Version) {
		return false
	}
	return true
}

func (p *TPipelineWorkloadGroup) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *TPipelineWorkloadGroup) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *TPipelineWorkloadGroup) Field3DeepEqual(src map[string]string) bool {

	if len(p.Properties) != len(src) {
		return false
	}
	for k, v := range p.Properties {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TPipelineWorkloadGroup) Field4DeepEqual(src *int64) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if *p.Version != *src {
		return false
	}
	return true
}

type TExecPlanFragmentParams struct {
	ProtocolVersion                PaloInternalServiceVersion                            `thrift:"protocol_version,1,required" frugal:"1,required,PaloInternalServiceVersion" json:"protocol_version"`
	Fragment                       *planner.TPlanFragment                                `thrift:"fragment,2,optional" frugal:"2,optional,planner.TPlanFragment" json:"fragment,omitempty"`
	DescTbl                        *descriptors.TDescriptorTable                         `thrift:"desc_tbl,3,optional" frugal:"3,optional,descriptors.TDescriptorTable" json:"desc_tbl,omitempty"`
	Params                         *TPlanFragmentExecParams                              `thrift:"params,4,optional" frugal:"4,optional,TPlanFragmentExecParams" json:"params,omitempty"`
	Coord                          *types.TNetworkAddress                                `thrift:"coord,5,optional" frugal:"5,optional,types.TNetworkAddress" json:"coord,omitempty"`
	BackendNum                     *int32                                                `thrift:"backend_num,6,optional" frugal:"6,optional,i32" json:"backend_num,omitempty"`
	QueryGlobals                   *TQueryGlobals                                        `thrift:"query_globals,7,optional" frugal:"7,optional,TQueryGlobals" json:"query_globals,omitempty"`
	QueryOptions                   *TQueryOptions                                        `thrift:"query_options,8,optional" frugal:"8,optional,TQueryOptions" json:"query_options,omitempty"`
	IsReportSuccess                *bool                                                 `thrift:"is_report_success,9,optional" frugal:"9,optional,bool" json:"is_report_success,omitempty"`
	ResourceInfo                   *types.TResourceInfo                                  `thrift:"resource_info,10,optional" frugal:"10,optional,types.TResourceInfo" json:"resource_info,omitempty"`
	ImportLabel                    *string                                               `thrift:"import_label,11,optional" frugal:"11,optional,string" json:"import_label,omitempty"`
	DbName                         *string                                               `thrift:"db_name,12,optional" frugal:"12,optional,string" json:"db_name,omitempty"`
	LoadJobId                      *int64                                                `thrift:"load_job_id,13,optional" frugal:"13,optional,i64" json:"load_job_id,omitempty"`
	LoadErrorHubInfo               *TLoadErrorHubInfo                                    `thrift:"load_error_hub_info,14,optional" frugal:"14,optional,TLoadErrorHubInfo" json:"load_error_hub_info,omitempty"`
	FragmentNumOnHost              *int32                                                `thrift:"fragment_num_on_host,15,optional" frugal:"15,optional,i32" json:"fragment_num_on_host,omitempty"`
	IsSimplifiedParam              bool                                                  `thrift:"is_simplified_param,16,optional" frugal:"16,optional,bool" json:"is_simplified_param,omitempty"`
	TxnConf                        *TTxnParams                                           `thrift:"txn_conf,17,optional" frugal:"17,optional,TTxnParams" json:"txn_conf,omitempty"`
	BackendId                      *int64                                                `thrift:"backend_id,18,optional" frugal:"18,optional,i64" json:"backend_id,omitempty"`
	GlobalDict                     *TGlobalDict                                          `thrift:"global_dict,19,optional" frugal:"19,optional,TGlobalDict" json:"global_dict,omitempty"`
	NeedWaitExecutionTrigger       bool                                                  `thrift:"need_wait_execution_trigger,20,optional" frugal:"20,optional,bool" json:"need_wait_execution_trigger,omitempty"`
	BuildHashTableForBroadcastJoin bool                                                  `thrift:"build_hash_table_for_broadcast_join,21,optional" frugal:"21,optional,bool" json:"build_hash_table_for_broadcast_join,omitempty"`
	InstancesSharingHashTable      []*types.TUniqueId                                    `thrift:"instances_sharing_hash_table,22,optional" frugal:"22,optional,list<types.TUniqueId>" json:"instances_sharing_hash_table,omitempty"`
	TableName                      *string                                               `thrift:"table_name,23,optional" frugal:"23,optional,string" json:"table_name,omitempty"`
	FileScanParams                 map[types.TPlanNodeId]*plannodes.TFileScanRangeParams `thrift:"file_scan_params,24,optional" frugal:"24,optional,map<i32:plannodes.TFileScanRangeParams>" json:"file_scan_params,omitempty"`
	WalId                          *int64                                                `thrift:"wal_id,25,optional" frugal:"25,optional,i64" json:"wal_id,omitempty"`
	LoadStreamPerNode              *int32                                                `thrift:"load_stream_per_node,26,optional" frugal:"26,optional,i32" json:"load_stream_per_node,omitempty"`
	TotalLoadStreams               *int32                                                `thrift:"total_load_streams,27,optional" frugal:"27,optional,i32" json:"total_load_streams,omitempty"`
	NumLocalSink                   *int32                                                `thrift:"num_local_sink,28,optional" frugal:"28,optional,i32" json:"num_local_sink,omitempty"`
	ContentLength                  *int64                                                `thrift:"content_length,29,optional" frugal:"29,optional,i64" json:"content_length,omitempty"`
	WorkloadGroups                 []*TPipelineWorkloadGroup                             `thrift:"workload_groups,30,optional" frugal:"30,optional,list<TPipelineWorkloadGroup>" json:"workload_groups,omitempty"`
	IsNereids                      bool                                                  `thrift:"is_nereids,31,optional" frugal:"31,optional,bool" json:"is_nereids,omitempty"`
	CurrentConnectFe               *types.TNetworkAddress                                `thrift:"current_connect_fe,32,optional" frugal:"32,optional,types.TNetworkAddress" json:"current_connect_fe,omitempty"`
	IsMowTable                     *bool                                                 `thrift:"is_mow_table,1000,optional" frugal:"1000,optional,bool" json:"is_mow_table,omitempty"`
}

func NewTExecPlanFragmentParams() *TExecPlanFragmentParams {
	return &TExecPlanFragmentParams{

		IsSimplifiedParam:              false,
		NeedWaitExecutionTrigger:       false,
		BuildHashTableForBroadcastJoin: false,
		IsNereids:                      true,
	}
}

func (p *TExecPlanFragmentParams) InitDefault() {
	p.IsSimplifiedParam = false
	p.NeedWaitExecutionTrigger = false
	p.BuildHashTableForBroadcastJoin = false
	p.IsNereids = true
}

func (p *TExecPlanFragmentParams) GetProtocolVersion() (v PaloInternalServiceVersion) {
	return p.ProtocolVersion
}

var TExecPlanFragmentParams_Fragment_DEFAULT *planner.TPlanFragment

func (p *TExecPlanFragmentParams) GetFragment() (v *planner.TPlanFragment) {
	if !p.IsSetFragment() {
		return TExecPlanFragmentParams_Fragment_DEFAULT
	}
	return p.Fragment
}

var TExecPlanFragmentParams_DescTbl_DEFAULT *descriptors.TDescriptorTable

func (p *TExecPlanFragmentParams) GetDescTbl() (v *descriptors.TDescriptorTable) {
	if !p.IsSetDescTbl() {
		return TExecPlanFragmentParams_DescTbl_DEFAULT
	}
	return p.DescTbl
}

var TExecPlanFragmentParams_Params_DEFAULT *TPlanFragmentExecParams

func (p *TExecPlanFragmentParams) GetParams() (v *TPlanFragmentExecParams) {
	if !p.IsSetParams() {
		return TExecPlanFragmentParams_Params_DEFAULT
	}
	return p.Params
}

var TExecPlanFragmentParams_Coord_DEFAULT *types.TNetworkAddress

func (p *TExecPlanFragmentParams) GetCoord() (v *types.TNetworkAddress) {
	if !p.IsSetCoord() {
		return TExecPlanFragmentParams_Coord_DEFAULT
	}
	return p.Coord
}

var TExecPlanFragmentParams_BackendNum_DEFAULT int32

func (p *TExecPlanFragmentParams) GetBackendNum() (v int32) {
	if !p.IsSetBackendNum() {
		return TExecPlanFragmentParams_BackendNum_DEFAULT
	}
	return *p.BackendNum
}

var TExecPlanFragmentParams_QueryGlobals_DEFAULT *TQueryGlobals

func (p *TExecPlanFragmentParams) GetQueryGlobals() (v *TQueryGlobals) {
	if !p.IsSetQueryGlobals() {
		return TExecPlanFragmentParams_QueryGlobals_DEFAULT
	}
	return p.QueryGlobals
}

var TExecPlanFragmentParams_QueryOptions_DEFAULT *TQueryOptions

func (p *TExecPlanFragmentParams) GetQueryOptions() (v *TQueryOptions) {
	if !p.IsSetQueryOptions() {
		return TExecPlanFragmentParams_QueryOptions_DEFAULT
	}
	return p.QueryOptions
}

var TExecPlanFragmentParams_IsReportSuccess_DEFAULT bool

func (p *TExecPlanFragmentParams) GetIsReportSuccess() (v bool) {
	if !p.IsSetIsReportSuccess() {
		return TExecPlanFragmentParams_IsReportSuccess_DEFAULT
	}
	return *p.IsReportSuccess
}

var TExecPlanFragmentParams_ResourceInfo_DEFAULT *types.TResourceInfo

func (p *TExecPlanFragmentParams) GetResourceInfo() (v *types.TResourceInfo) {
	if !p.IsSetResourceInfo() {
		return TExecPlanFragmentParams_ResourceInfo_DEFAULT
	}
	return p.ResourceInfo
}

var TExecPlanFragmentParams_ImportLabel_DEFAULT string

func (p *TExecPlanFragmentParams) GetImportLabel() (v string) {
	if !p.IsSetImportLabel() {
		return TExecPlanFragmentParams_ImportLabel_DEFAULT
	}
	return *p.ImportLabel
}

var TExecPlanFragmentParams_DbName_DEFAULT string

func (p *TExecPlanFragmentParams) GetDbName() (v string) {
	if !p.IsSetDbName() {
		return TExecPlanFragmentParams_DbName_DEFAULT
	}
	return *p.DbName
}

var TExecPlanFragmentParams_LoadJobId_DEFAULT int64

func (p *TExecPlanFragmentParams) GetLoadJobId() (v int64) {
	if !p.IsSetLoadJobId() {
		return TExecPlanFragmentParams_LoadJobId_DEFAULT
	}
	return *p.LoadJobId
}

var TExecPlanFragmentParams_LoadErrorHubInfo_DEFAULT *TLoadErrorHubInfo

func (p *TExecPlanFragmentParams) GetLoadErrorHubInfo() (v *TLoadErrorHubInfo) {
	if !p.IsSetLoadErrorHubInfo() {
		return TExecPlanFragmentParams_LoadErrorHubInfo_DEFAULT
	}
	return p.LoadErrorHubInfo
}

var TExecPlanFragmentParams_FragmentNumOnHost_DEFAULT int32

func (p *TExecPlanFragmentParams) GetFragmentNumOnHost() (v int32) {
	if !p.IsSetFragmentNumOnHost() {
		return TExecPlanFragmentParams_FragmentNumOnHost_DEFAULT
	}
	return *p.FragmentNumOnHost
}

var TExecPlanFragmentParams_IsSimplifiedParam_DEFAULT bool = false

func (p *TExecPlanFragmentParams) GetIsSimplifiedParam() (v bool) {
	if !p.IsSetIsSimplifiedParam() {
		return TExecPlanFragmentParams_IsSimplifiedParam_DEFAULT
	}
	return p.IsSimplifiedParam
}

var TExecPlanFragmentParams_TxnConf_DEFAULT *TTxnParams

func (p *TExecPlanFragmentParams) GetTxnConf() (v *TTxnParams) {
	if !p.IsSetTxnConf() {
		return TExecPlanFragmentParams_TxnConf_DEFAULT
	}
	return p.TxnConf
}

var TExecPlanFragmentParams_BackendId_DEFAULT int64

func (p *TExecPlanFragmentParams) GetBackendId() (v int64) {
	if !p.IsSetBackendId() {
		return TExecPlanFragmentParams_BackendId_DEFAULT
	}
	return *p.BackendId
}

var TExecPlanFragmentParams_GlobalDict_DEFAULT *TGlobalDict

func (p *TExecPlanFragmentParams) GetGlobalDict() (v *TGlobalDict) {
	if !p.IsSetGlobalDict() {
		return TExecPlanFragmentParams_GlobalDict_DEFAULT
	}
	return p.GlobalDict
}

var TExecPlanFragmentParams_NeedWaitExecutionTrigger_DEFAULT bool = false

func (p *TExecPlanFragmentParams) GetNeedWaitExecutionTrigger() (v bool) {
	if !p.IsSetNeedWaitExecutionTrigger() {
		return TExecPlanFragmentParams_NeedWaitExecutionTrigger_DEFAULT
	}
	return p.NeedWaitExecutionTrigger
}

var TExecPlanFragmentParams_BuildHashTableForBroadcastJoin_DEFAULT bool = false

func (p *TExecPlanFragmentParams) GetBuildHashTableForBroadcastJoin() (v bool) {
	if !p.IsSetBuildHashTableForBroadcastJoin() {
		return TExecPlanFragmentParams_BuildHashTableForBroadcastJoin_DEFAULT
	}
	return p.BuildHashTableForBroadcastJoin
}

var TExecPlanFragmentParams_InstancesSharingHashTable_DEFAULT []*types.TUniqueId

func (p *TExecPlanFragmentParams) GetInstancesSharingHashTable() (v []*types.TUniqueId) {
	if !p.IsSetInstancesSharingHashTable() {
		return TExecPlanFragmentParams_InstancesSharingHashTable_DEFAULT
	}
	return p.InstancesSharingHashTable
}

var TExecPlanFragmentParams_TableName_DEFAULT string

func (p *TExecPlanFragmentParams) GetTableName() (v string) {
	if !p.IsSetTableName() {
		return TExecPlanFragmentParams_TableName_DEFAULT
	}
	return *p.TableName
}

var TExecPlanFragmentParams_FileScanParams_DEFAULT map[types.TPlanNodeId]*plannodes.TFileScanRangeParams

func (p *TExecPlanFragmentParams) GetFileScanParams() (v map[types.TPlanNodeId]*plannodes.TFileScanRangeParams) {
	if !p.IsSetFileScanParams() {
		return TExecPlanFragmentParams_FileScanParams_DEFAULT
	}
	return p.FileScanParams
}

var TExecPlanFragmentParams_WalId_DEFAULT int64

func (p *TExecPlanFragmentParams) GetWalId() (v int64) {
	if !p.IsSetWalId() {
		return TExecPlanFragmentParams_WalId_DEFAULT
	}
	return *p.WalId
}

var TExecPlanFragmentParams_LoadStreamPerNode_DEFAULT int32

func (p *TExecPlanFragmentParams) GetLoadStreamPerNode() (v int32) {
	if !p.IsSetLoadStreamPerNode() {
		return TExecPlanFragmentParams_LoadStreamPerNode_DEFAULT
	}
	return *p.LoadStreamPerNode
}

var TExecPlanFragmentParams_TotalLoadStreams_DEFAULT int32

func (p *TExecPlanFragmentParams) GetTotalLoadStreams() (v int32) {
	if !p.IsSetTotalLoadStreams() {
		return TExecPlanFragmentParams_TotalLoadStreams_DEFAULT
	}
	return *p.TotalLoadStreams
}

var TExecPlanFragmentParams_NumLocalSink_DEFAULT int32

func (p *TExecPlanFragmentParams) GetNumLocalSink() (v int32) {
	if !p.IsSetNumLocalSink() {
		return TExecPlanFragmentParams_NumLocalSink_DEFAULT
	}
	return *p.NumLocalSink
}

var TExecPlanFragmentParams_ContentLength_DEFAULT int64

func (p *TExecPlanFragmentParams) GetContentLength() (v int64) {
	if !p.IsSetContentLength() {
		return TExecPlanFragmentParams_ContentLength_DEFAULT
	}
	return *p.ContentLength
}

var TExecPlanFragmentParams_WorkloadGroups_DEFAULT []*TPipelineWorkloadGroup

func (p *TExecPlanFragmentParams) GetWorkloadGroups() (v []*TPipelineWorkloadGroup) {
	if !p.IsSetWorkloadGroups() {
		return TExecPlanFragmentParams_WorkloadGroups_DEFAULT
	}
	return p.WorkloadGroups
}

var TExecPlanFragmentParams_IsNereids_DEFAULT bool = true

func (p *TExecPlanFragmentParams) GetIsNereids() (v bool) {
	if !p.IsSetIsNereids() {
		return TExecPlanFragmentParams_IsNereids_DEFAULT
	}
	return p.IsNereids
}

var TExecPlanFragmentParams_CurrentConnectFe_DEFAULT *types.TNetworkAddress

func (p *TExecPlanFragmentParams) GetCurrentConnectFe() (v *types.TNetworkAddress) {
	if !p.IsSetCurrentConnectFe() {
		return TExecPlanFragmentParams_CurrentConnectFe_DEFAULT
	}
	return p.CurrentConnectFe
}

var TExecPlanFragmentParams_IsMowTable_DEFAULT bool

func (p *TExecPlanFragmentParams) GetIsMowTable() (v bool) {
	if !p.IsSetIsMowTable() {
		return TExecPlanFragmentParams_IsMowTable_DEFAULT
	}
	return *p.IsMowTable
}
func (p *TExecPlanFragmentParams) SetProtocolVersion(val PaloInternalServiceVersion) {
	p.ProtocolVersion = val
}
func (p *TExecPlanFragmentParams) SetFragment(val *planner.TPlanFragment) {
	p.Fragment = val
}
func (p *TExecPlanFragmentParams) SetDescTbl(val *descriptors.TDescriptorTable) {
	p.DescTbl = val
}
func (p *TExecPlanFragmentParams) SetParams(val *TPlanFragmentExecParams) {
	p.Params = val
}
func (p *TExecPlanFragmentParams) SetCoord(val *types.TNetworkAddress) {
	p.Coord = val
}
func (p *TExecPlanFragmentParams) SetBackendNum(val *int32) {
	p.BackendNum = val
}
func (p *TExecPlanFragmentParams) SetQueryGlobals(val *TQueryGlobals) {
	p.QueryGlobals = val
}
func (p *TExecPlanFragmentParams) SetQueryOptions(val *TQueryOptions) {
	p.QueryOptions = val
}
func (p *TExecPlanFragmentParams) SetIsReportSuccess(val *bool) {
	p.IsReportSuccess = val
}
func (p *TExecPlanFragmentParams) SetResourceInfo(val *types.TResourceInfo) {
	p.ResourceInfo = val
}
func (p *TExecPlanFragmentParams) SetImportLabel(val *string) {
	p.ImportLabel = val
}
func (p *TExecPlanFragmentParams) SetDbName(val *string) {
	p.DbName = val
}
func (p *TExecPlanFragmentParams) SetLoadJobId(val *int64) {
	p.LoadJobId = val
}
func (p *TExecPlanFragmentParams) SetLoadErrorHubInfo(val *TLoadErrorHubInfo) {
	p.LoadErrorHubInfo = val
}
func (p *TExecPlanFragmentParams) SetFragmentNumOnHost(val *int32) {
	p.FragmentNumOnHost = val
}
func (p *TExecPlanFragmentParams) SetIsSimplifiedParam(val bool) {
	p.IsSimplifiedParam = val
}
func (p *TExecPlanFragmentParams) SetTxnConf(val *TTxnParams) {
	p.TxnConf = val
}
func (p *TExecPlanFragmentParams) SetBackendId(val *int64) {
	p.BackendId = val
}
func (p *TExecPlanFragmentParams) SetGlobalDict(val *TGlobalDict) {
	p.GlobalDict = val
}
func (p *TExecPlanFragmentParams) SetNeedWaitExecutionTrigger(val bool) {
	p.NeedWaitExecutionTrigger = val
}
func (p *TExecPlanFragmentParams) SetBuildHashTableForBroadcastJoin(val bool) {
	p.BuildHashTableForBroadcastJoin = val
}
func (p *TExecPlanFragmentParams) SetInstancesSharingHashTable(val []*types.TUniqueId) {
	p.InstancesSharingHashTable = val
}
func (p *TExecPlanFragmentParams) SetTableName(val *string) {
	p.TableName = val
}
func (p *TExecPlanFragmentParams) SetFileScanParams(val map[types.TPlanNodeId]*plannodes.TFileScanRangeParams) {
	p.FileScanParams = val
}
func (p *TExecPlanFragmentParams) SetWalId(val *int64) {
	p.WalId = val
}
func (p *TExecPlanFragmentParams) SetLoadStreamPerNode(val *int32) {
	p.LoadStreamPerNode = val
}
func (p *TExecPlanFragmentParams) SetTotalLoadStreams(val *int32) {
	p.TotalLoadStreams = val
}
func (p *TExecPlanFragmentParams) SetNumLocalSink(val *int32) {
	p.NumLocalSink = val
}
func (p *TExecPlanFragmentParams) SetContentLength(val *int64) {
	p.ContentLength = val
}
func (p *TExecPlanFragmentParams) SetWorkloadGroups(val []*TPipelineWorkloadGroup) {
	p.WorkloadGroups = val
}
func (p *TExecPlanFragmentParams) SetIsNereids(val bool) {
	p.IsNereids = val
}
func (p *TExecPlanFragmentParams) SetCurrentConnectFe(val *types.TNetworkAddress) {
	p.CurrentConnectFe = val
}
func (p *TExecPlanFragmentParams) SetIsMowTable(val *bool) {
	p.IsMowTable = val
}

var fieldIDToName_TExecPlanFragmentParams = map[int16]string{
	1:    "protocol_version",
	2:    "fragment",
	3:    "desc_tbl",
	4:    "params",
	5:    "coord",
	6:    "backend_num",
	7:    "query_globals",
	8:    "query_options",
	9:    "is_report_success",
	10:   "resource_info",
	11:   "import_label",
	12:   "db_name",
	13:   "load_job_id",
	14:   "load_error_hub_info",
	15:   "fragment_num_on_host",
	16:   "is_simplified_param",
	17:   "txn_conf",
	18:   "backend_id",
	19:   "global_dict",
	20:   "need_wait_execution_trigger",
	21:   "build_hash_table_for_broadcast_join",
	22:   "instances_sharing_hash_table",
	23:   "table_name",
	24:   "file_scan_params",
	25:   "wal_id",
	26:   "load_stream_per_node",
	27:   "total_load_streams",
	28:   "num_local_sink",
	29:   "content_length",
	30:   "workload_groups",
	31:   "is_nereids",
	32:   "current_connect_fe",
	1000: "is_mow_table",
}

func (p *TExecPlanFragmentParams) IsSetFragment() bool {
	return p.Fragment != nil
}

func (p *TExecPlanFragmentParams) IsSetDescTbl() bool {
	return p.DescTbl != nil
}

func (p *TExecPlanFragmentParams) IsSetParams() bool {
	return p.Params != nil
}

func (p *TExecPlanFragmentParams) IsSetCoord() bool {
	return p.Coord != nil
}

func (p *TExecPlanFragmentParams) IsSetBackendNum() bool {
	return p.BackendNum != nil
}

func (p *TExecPlanFragmentParams) IsSetQueryGlobals() bool {
	return p.QueryGlobals != nil
}

func (p *TExecPlanFragmentParams) IsSetQueryOptions() bool {
	return p.QueryOptions != nil
}

func (p *TExecPlanFragmentParams) IsSetIsReportSuccess() bool {
	return p.IsReportSuccess != nil
}

func (p *TExecPlanFragmentParams) IsSetResourceInfo() bool {
	return p.ResourceInfo != nil
}

func (p *TExecPlanFragmentParams) IsSetImportLabel() bool {
	return p.ImportLabel != nil
}

func (p *TExecPlanFragmentParams) IsSetDbName() bool {
	return p.DbName != nil
}

func (p *TExecPlanFragmentParams) IsSetLoadJobId() bool {
	return p.LoadJobId != nil
}

func (p *TExecPlanFragmentParams) IsSetLoadErrorHubInfo() bool {
	return p.LoadErrorHubInfo != nil
}

func (p *TExecPlanFragmentParams) IsSetFragmentNumOnHost() bool {
	return p.FragmentNumOnHost != nil
}

func (p *TExecPlanFragmentParams) IsSetIsSimplifiedParam() bool {
	return p.IsSimplifiedParam != TExecPlanFragmentParams_IsSimplifiedParam_DEFAULT
}

func (p *TExecPlanFragmentParams) IsSetTxnConf() bool {
	return p.TxnConf != nil
}

func (p *TExecPlanFragmentParams) IsSetBackendId() bool {
	return p.BackendId != nil
}

func (p *TExecPlanFragmentParams) IsSetGlobalDict() bool {
	return p.GlobalDict != nil
}

func (p *TExecPlanFragmentParams) IsSetNeedWaitExecutionTrigger() bool {
	return p.NeedWaitExecutionTrigger != TExecPlanFragmentParams_NeedWaitExecutionTrigger_DEFAULT
}

func (p *TExecPlanFragmentParams) IsSetBuildHashTableForBroadcastJoin() bool {
	return p.BuildHashTableForBroadcastJoin != TExecPlanFragmentParams_BuildHashTableForBroadcastJoin_DEFAULT
}

func (p *TExecPlanFragmentParams) IsSetInstancesSharingHashTable() bool {
	return p.InstancesSharingHashTable != nil
}

func (p *TExecPlanFragmentParams) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *TExecPlanFragmentParams) IsSetFileScanParams() bool {
	return p.FileScanParams != nil
}

func (p *TExecPlanFragmentParams) IsSetWalId() bool {
	return p.WalId != nil
}

func (p *TExecPlanFragmentParams) IsSetLoadStreamPerNode() bool {
	return p.LoadStreamPerNode != nil
}

func (p *TExecPlanFragmentParams) IsSetTotalLoadStreams() bool {
	return p.TotalLoadStreams != nil
}

func (p *TExecPlanFragmentParams) IsSetNumLocalSink() bool {
	return p.NumLocalSink != nil
}

func (p *TExecPlanFragmentParams) IsSetContentLength() bool {
	return p.ContentLength != nil
}

func (p *TExecPlanFragmentParams) IsSetWorkloadGroups() bool {
	return p.WorkloadGroups != nil
}

func (p *TExecPlanFragmentParams) IsSetIsNereids() bool {
	return p.IsNereids != TExecPlanFragmentParams_IsNereids_DEFAULT
}

func (p *TExecPlanFragmentParams) IsSetCurrentConnectFe() bool {
	return p.CurrentConnectFe != nil
}

func (p *TExecPlanFragmentParams) IsSetIsMowTable() bool {
	return p.IsMowTable != nil
}

func (p *TExecPlanFragmentParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 29:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 30:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 32:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1000:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1000(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExecPlanFragmentParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TExecPlanFragmentParams[fieldId]))
}

func (p *TExecPlanFragmentParams) ReadField1(iprot thrift.TProtocol) error {

	var _field PaloInternalServiceVersion
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = PaloInternalServiceVersion(v)
	}
	p.ProtocolVersion = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField2(iprot thrift.TProtocol) error {
	_field := planner.NewTPlanFragment()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Fragment = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField3(iprot thrift.TProtocol) error {
	_field := descriptors.NewTDescriptorTable()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DescTbl = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField4(iprot thrift.TProtocol) error {
	_field := NewTPlanFragmentExecParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Params = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField5(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Coord = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField6(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BackendNum = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField7(iprot thrift.TProtocol) error {
	_field := NewTQueryGlobals()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryGlobals = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField8(iprot thrift.TProtocol) error {
	_field := NewTQueryOptions()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryOptions = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField9(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsReportSuccess = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField10(iprot thrift.TProtocol) error {
	_field := types.NewTResourceInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ResourceInfo = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ImportLabel = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbName = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField13(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LoadJobId = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField14(iprot thrift.TProtocol) error {
	_field := NewTLoadErrorHubInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.LoadErrorHubInfo = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField15(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FragmentNumOnHost = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField16(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsSimplifiedParam = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField17(iprot thrift.TProtocol) error {
	_field := NewTTxnParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TxnConf = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField18(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BackendId = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField19(iprot thrift.TProtocol) error {
	_field := NewTGlobalDict()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.GlobalDict = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField20(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NeedWaitExecutionTrigger = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField21(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BuildHashTableForBroadcastJoin = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField22(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*types.TUniqueId, 0, size)
	values := make([]types.TUniqueId, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.InstancesSharingHashTable = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField23(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableName = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField24(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TPlanNodeId]*plannodes.TFileScanRangeParams, size)
	values := make([]plannodes.TFileScanRangeParams, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.FileScanParams = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField25(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WalId = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField26(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LoadStreamPerNode = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField27(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TotalLoadStreams = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField28(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NumLocalSink = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField29(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ContentLength = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField30(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TPipelineWorkloadGroup, 0, size)
	values := make([]TPipelineWorkloadGroup, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.WorkloadGroups = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField31(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsNereids = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField32(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CurrentConnectFe = _field
	return nil
}
func (p *TExecPlanFragmentParams) ReadField1000(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsMowTable = _field
	return nil
}

func (p *TExecPlanFragmentParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TExecPlanFragmentParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField1000(oprot); err != nil {
			fieldId = 1000
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFragment() {
		if err = oprot.WriteFieldBegin("fragment", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Fragment.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescTbl() {
		if err = oprot.WriteFieldBegin("desc_tbl", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DescTbl.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetParams() {
		if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Params.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCoord() {
		if err = oprot.WriteFieldBegin("coord", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Coord.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackendNum() {
		if err = oprot.WriteFieldBegin("backend_num", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BackendNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryGlobals() {
		if err = oprot.WriteFieldBegin("query_globals", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.QueryGlobals.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryOptions() {
		if err = oprot.WriteFieldBegin("query_options", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.QueryOptions.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsReportSuccess() {
		if err = oprot.WriteFieldBegin("is_report_success", thrift.BOOL, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsReportSuccess); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetResourceInfo() {
		if err = oprot.WriteFieldBegin("resource_info", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ResourceInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetImportLabel() {
		if err = oprot.WriteFieldBegin("import_label", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ImportLabel); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbName() {
		if err = oprot.WriteFieldBegin("db_name", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DbName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadJobId() {
		if err = oprot.WriteFieldBegin("load_job_id", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LoadJobId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadErrorHubInfo() {
		if err = oprot.WriteFieldBegin("load_error_hub_info", thrift.STRUCT, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.LoadErrorHubInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetFragmentNumOnHost() {
		if err = oprot.WriteFieldBegin("fragment_num_on_host", thrift.I32, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.FragmentNumOnHost); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsSimplifiedParam() {
		if err = oprot.WriteFieldBegin("is_simplified_param", thrift.BOOL, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsSimplifiedParam); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnConf() {
		if err = oprot.WriteFieldBegin("txn_conf", thrift.STRUCT, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TxnConf.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackendId() {
		if err = oprot.WriteFieldBegin("backend_id", thrift.I64, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BackendId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetGlobalDict() {
		if err = oprot.WriteFieldBegin("global_dict", thrift.STRUCT, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.GlobalDict.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetNeedWaitExecutionTrigger() {
		if err = oprot.WriteFieldBegin("need_wait_execution_trigger", thrift.BOOL, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.NeedWaitExecutionTrigger); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetBuildHashTableForBroadcastJoin() {
		if err = oprot.WriteFieldBegin("build_hash_table_for_broadcast_join", thrift.BOOL, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.BuildHashTableForBroadcastJoin); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetInstancesSharingHashTable() {
		if err = oprot.WriteFieldBegin("instances_sharing_hash_table", thrift.LIST, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InstancesSharingHashTable)); err != nil {
			return err
		}
		for _, v := range p.InstancesSharingHashTable {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err = oprot.WriteFieldBegin("table_name", thrift.STRING, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TableName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileScanParams() {
		if err = oprot.WriteFieldBegin("file_scan_params", thrift.MAP, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.FileScanParams)); err != nil {
			return err
		}
		for k, v := range p.FileScanParams {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetWalId() {
		if err = oprot.WriteFieldBegin("wal_id", thrift.I64, 25); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WalId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadStreamPerNode() {
		if err = oprot.WriteFieldBegin("load_stream_per_node", thrift.I32, 26); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.LoadStreamPerNode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalLoadStreams() {
		if err = oprot.WriteFieldBegin("total_load_streams", thrift.I32, 27); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TotalLoadStreams); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumLocalSink() {
		if err = oprot.WriteFieldBegin("num_local_sink", thrift.I32, 28); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.NumLocalSink); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentLength() {
		if err = oprot.WriteFieldBegin("content_length", thrift.I64, 29); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ContentLength); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkloadGroups() {
		if err = oprot.WriteFieldBegin("workload_groups", thrift.LIST, 30); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.WorkloadGroups)); err != nil {
			return err
		}
		for _, v := range p.WorkloadGroups {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsNereids() {
		if err = oprot.WriteFieldBegin("is_nereids", thrift.BOOL, 31); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsNereids); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentConnectFe() {
		if err = oprot.WriteFieldBegin("current_connect_fe", thrift.STRUCT, 32); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CurrentConnectFe.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) writeField1000(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsMowTable() {
		if err = oprot.WriteFieldBegin("is_mow_table", thrift.BOOL, 1000); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsMowTable); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 end error: ", p), err)
}

func (p *TExecPlanFragmentParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExecPlanFragmentParams(%+v)", *p)

}

func (p *TExecPlanFragmentParams) DeepEqual(ano *TExecPlanFragmentParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ProtocolVersion) {
		return false
	}
	if !p.Field2DeepEqual(ano.Fragment) {
		return false
	}
	if !p.Field3DeepEqual(ano.DescTbl) {
		return false
	}
	if !p.Field4DeepEqual(ano.Params) {
		return false
	}
	if !p.Field5DeepEqual(ano.Coord) {
		return false
	}
	if !p.Field6DeepEqual(ano.BackendNum) {
		return false
	}
	if !p.Field7DeepEqual(ano.QueryGlobals) {
		return false
	}
	if !p.Field8DeepEqual(ano.QueryOptions) {
		return false
	}
	if !p.Field9DeepEqual(ano.IsReportSuccess) {
		return false
	}
	if !p.Field10DeepEqual(ano.ResourceInfo) {
		return false
	}
	if !p.Field11DeepEqual(ano.ImportLabel) {
		return false
	}
	if !p.Field12DeepEqual(ano.DbName) {
		return false
	}
	if !p.Field13DeepEqual(ano.LoadJobId) {
		return false
	}
	if !p.Field14DeepEqual(ano.LoadErrorHubInfo) {
		return false
	}
	if !p.Field15DeepEqual(ano.FragmentNumOnHost) {
		return false
	}
	if !p.Field16DeepEqual(ano.IsSimplifiedParam) {
		return false
	}
	if !p.Field17DeepEqual(ano.TxnConf) {
		return false
	}
	if !p.Field18DeepEqual(ano.BackendId) {
		return false
	}
	if !p.Field19DeepEqual(ano.GlobalDict) {
		return false
	}
	if !p.Field20DeepEqual(ano.NeedWaitExecutionTrigger) {
		return false
	}
	if !p.Field21DeepEqual(ano.BuildHashTableForBroadcastJoin) {
		return false
	}
	if !p.Field22DeepEqual(ano.InstancesSharingHashTable) {
		return false
	}
	if !p.Field23DeepEqual(ano.TableName) {
		return false
	}
	if !p.Field24DeepEqual(ano.FileScanParams) {
		return false
	}
	if !p.Field25DeepEqual(ano.WalId) {
		return false
	}
	if !p.Field26DeepEqual(ano.LoadStreamPerNode) {
		return false
	}
	if !p.Field27DeepEqual(ano.TotalLoadStreams) {
		return false
	}
	if !p.Field28DeepEqual(ano.NumLocalSink) {
		return false
	}
	if !p.Field29DeepEqual(ano.ContentLength) {
		return false
	}
	if !p.Field30DeepEqual(ano.WorkloadGroups) {
		return false
	}
	if !p.Field31DeepEqual(ano.IsNereids) {
		return false
	}
	if !p.Field32DeepEqual(ano.CurrentConnectFe) {
		return false
	}
	if !p.Field1000DeepEqual(ano.IsMowTable) {
		return false
	}
	return true
}

func (p *TExecPlanFragmentParams) Field1DeepEqual(src PaloInternalServiceVersion) bool {

	if p.ProtocolVersion != src {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field2DeepEqual(src *planner.TPlanFragment) bool {

	if !p.Fragment.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field3DeepEqual(src *descriptors.TDescriptorTable) bool {

	if !p.DescTbl.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field4DeepEqual(src *TPlanFragmentExecParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field5DeepEqual(src *types.TNetworkAddress) bool {

	if !p.Coord.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field6DeepEqual(src *int32) bool {

	if p.BackendNum == src {
		return true
	} else if p.BackendNum == nil || src == nil {
		return false
	}
	if *p.BackendNum != *src {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field7DeepEqual(src *TQueryGlobals) bool {

	if !p.QueryGlobals.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field8DeepEqual(src *TQueryOptions) bool {

	if !p.QueryOptions.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field9DeepEqual(src *bool) bool {

	if p.IsReportSuccess == src {
		return true
	} else if p.IsReportSuccess == nil || src == nil {
		return false
	}
	if *p.IsReportSuccess != *src {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field10DeepEqual(src *types.TResourceInfo) bool {

	if !p.ResourceInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field11DeepEqual(src *string) bool {

	if p.ImportLabel == src {
		return true
	} else if p.ImportLabel == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ImportLabel, *src) != 0 {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field12DeepEqual(src *string) bool {

	if p.DbName == src {
		return true
	} else if p.DbName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DbName, *src) != 0 {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field13DeepEqual(src *int64) bool {

	if p.LoadJobId == src {
		return true
	} else if p.LoadJobId == nil || src == nil {
		return false
	}
	if *p.LoadJobId != *src {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field14DeepEqual(src *TLoadErrorHubInfo) bool {

	if !p.LoadErrorHubInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field15DeepEqual(src *int32) bool {

	if p.FragmentNumOnHost == src {
		return true
	} else if p.FragmentNumOnHost == nil || src == nil {
		return false
	}
	if *p.FragmentNumOnHost != *src {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field16DeepEqual(src bool) bool {

	if p.IsSimplifiedParam != src {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field17DeepEqual(src *TTxnParams) bool {

	if !p.TxnConf.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field18DeepEqual(src *int64) bool {

	if p.BackendId == src {
		return true
	} else if p.BackendId == nil || src == nil {
		return false
	}
	if *p.BackendId != *src {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field19DeepEqual(src *TGlobalDict) bool {

	if !p.GlobalDict.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field20DeepEqual(src bool) bool {

	if p.NeedWaitExecutionTrigger != src {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field21DeepEqual(src bool) bool {

	if p.BuildHashTableForBroadcastJoin != src {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field22DeepEqual(src []*types.TUniqueId) bool {

	if len(p.InstancesSharingHashTable) != len(src) {
		return false
	}
	for i, v := range p.InstancesSharingHashTable {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TExecPlanFragmentParams) Field23DeepEqual(src *string) bool {

	if p.TableName == src {
		return true
	} else if p.TableName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TableName, *src) != 0 {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field24DeepEqual(src map[types.TPlanNodeId]*plannodes.TFileScanRangeParams) bool {

	if len(p.FileScanParams) != len(src) {
		return false
	}
	for k, v := range p.FileScanParams {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TExecPlanFragmentParams) Field25DeepEqual(src *int64) bool {

	if p.WalId == src {
		return true
	} else if p.WalId == nil || src == nil {
		return false
	}
	if *p.WalId != *src {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field26DeepEqual(src *int32) bool {

	if p.LoadStreamPerNode == src {
		return true
	} else if p.LoadStreamPerNode == nil || src == nil {
		return false
	}
	if *p.LoadStreamPerNode != *src {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field27DeepEqual(src *int32) bool {

	if p.TotalLoadStreams == src {
		return true
	} else if p.TotalLoadStreams == nil || src == nil {
		return false
	}
	if *p.TotalLoadStreams != *src {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field28DeepEqual(src *int32) bool {

	if p.NumLocalSink == src {
		return true
	} else if p.NumLocalSink == nil || src == nil {
		return false
	}
	if *p.NumLocalSink != *src {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field29DeepEqual(src *int64) bool {

	if p.ContentLength == src {
		return true
	} else if p.ContentLength == nil || src == nil {
		return false
	}
	if *p.ContentLength != *src {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field30DeepEqual(src []*TPipelineWorkloadGroup) bool {

	if len(p.WorkloadGroups) != len(src) {
		return false
	}
	for i, v := range p.WorkloadGroups {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TExecPlanFragmentParams) Field31DeepEqual(src bool) bool {

	if p.IsNereids != src {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field32DeepEqual(src *types.TNetworkAddress) bool {

	if !p.CurrentConnectFe.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExecPlanFragmentParams) Field1000DeepEqual(src *bool) bool {

	if p.IsMowTable == src {
		return true
	} else if p.IsMowTable == nil || src == nil {
		return false
	}
	if *p.IsMowTable != *src {
		return false
	}
	return true
}

type TExecPlanFragmentParamsList struct {
	ParamsList []*TExecPlanFragmentParams `thrift:"paramsList,1,optional" frugal:"1,optional,list<TExecPlanFragmentParams>" json:"paramsList,omitempty"`
}

func NewTExecPlanFragmentParamsList() *TExecPlanFragmentParamsList {
	return &TExecPlanFragmentParamsList{}
}

func (p *TExecPlanFragmentParamsList) InitDefault() {
}

var TExecPlanFragmentParamsList_ParamsList_DEFAULT []*TExecPlanFragmentParams

func (p *TExecPlanFragmentParamsList) GetParamsList() (v []*TExecPlanFragmentParams) {
	if !p.IsSetParamsList() {
		return TExecPlanFragmentParamsList_ParamsList_DEFAULT
	}
	return p.ParamsList
}
func (p *TExecPlanFragmentParamsList) SetParamsList(val []*TExecPlanFragmentParams) {
	p.ParamsList = val
}

var fieldIDToName_TExecPlanFragmentParamsList = map[int16]string{
	1: "paramsList",
}

func (p *TExecPlanFragmentParamsList) IsSetParamsList() bool {
	return p.ParamsList != nil
}

func (p *TExecPlanFragmentParamsList) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExecPlanFragmentParamsList[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TExecPlanFragmentParamsList) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TExecPlanFragmentParams, 0, size)
	values := make([]TExecPlanFragmentParams, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ParamsList = _field
	return nil
}

func (p *TExecPlanFragmentParamsList) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TExecPlanFragmentParamsList"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TExecPlanFragmentParamsList) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetParamsList() {
		if err = oprot.WriteFieldBegin("paramsList", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ParamsList)); err != nil {
			return err
		}
		for _, v := range p.ParamsList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TExecPlanFragmentParamsList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExecPlanFragmentParamsList(%+v)", *p)

}

func (p *TExecPlanFragmentParamsList) DeepEqual(ano *TExecPlanFragmentParamsList) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ParamsList) {
		return false
	}
	return true
}

func (p *TExecPlanFragmentParamsList) Field1DeepEqual(src []*TExecPlanFragmentParams) bool {

	if len(p.ParamsList) != len(src) {
		return false
	}
	for i, v := range p.ParamsList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TExecPlanFragmentResult_ struct {
	Status *status.TStatus `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
}

func NewTExecPlanFragmentResult_() *TExecPlanFragmentResult_ {
	return &TExecPlanFragmentResult_{}
}

func (p *TExecPlanFragmentResult_) InitDefault() {
}

var TExecPlanFragmentResult__Status_DEFAULT *status.TStatus

func (p *TExecPlanFragmentResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TExecPlanFragmentResult__Status_DEFAULT
	}
	return p.Status
}
func (p *TExecPlanFragmentResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}

var fieldIDToName_TExecPlanFragmentResult_ = map[int16]string{
	1: "status",
}

func (p *TExecPlanFragmentResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TExecPlanFragmentResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExecPlanFragmentResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TExecPlanFragmentResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}

func (p *TExecPlanFragmentResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TExecPlanFragmentResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TExecPlanFragmentResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TExecPlanFragmentResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExecPlanFragmentResult_(%+v)", *p)

}

func (p *TExecPlanFragmentResult_) DeepEqual(ano *TExecPlanFragmentResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *TExecPlanFragmentResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type TCancelPlanFragmentParams struct {
	ProtocolVersion    PaloInternalServiceVersion `thrift:"protocol_version,1,required" frugal:"1,required,PaloInternalServiceVersion" json:"protocol_version"`
	FragmentInstanceId *types.TUniqueId           `thrift:"fragment_instance_id,2,optional" frugal:"2,optional,types.TUniqueId" json:"fragment_instance_id,omitempty"`
}

func NewTCancelPlanFragmentParams() *TCancelPlanFragmentParams {
	return &TCancelPlanFragmentParams{}
}

func (p *TCancelPlanFragmentParams) InitDefault() {
}

func (p *TCancelPlanFragmentParams) GetProtocolVersion() (v PaloInternalServiceVersion) {
	return p.ProtocolVersion
}

var TCancelPlanFragmentParams_FragmentInstanceId_DEFAULT *types.TUniqueId

func (p *TCancelPlanFragmentParams) GetFragmentInstanceId() (v *types.TUniqueId) {
	if !p.IsSetFragmentInstanceId() {
		return TCancelPlanFragmentParams_FragmentInstanceId_DEFAULT
	}
	return p.FragmentInstanceId
}
func (p *TCancelPlanFragmentParams) SetProtocolVersion(val PaloInternalServiceVersion) {
	p.ProtocolVersion = val
}
func (p *TCancelPlanFragmentParams) SetFragmentInstanceId(val *types.TUniqueId) {
	p.FragmentInstanceId = val
}

var fieldIDToName_TCancelPlanFragmentParams = map[int16]string{
	1: "protocol_version",
	2: "fragment_instance_id",
}

func (p *TCancelPlanFragmentParams) IsSetFragmentInstanceId() bool {
	return p.FragmentInstanceId != nil
}

func (p *TCancelPlanFragmentParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCancelPlanFragmentParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCancelPlanFragmentParams[fieldId]))
}

func (p *TCancelPlanFragmentParams) ReadField1(iprot thrift.TProtocol) error {

	var _field PaloInternalServiceVersion
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = PaloInternalServiceVersion(v)
	}
	p.ProtocolVersion = _field
	return nil
}
func (p *TCancelPlanFragmentParams) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FragmentInstanceId = _field
	return nil
}

func (p *TCancelPlanFragmentParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCancelPlanFragmentParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCancelPlanFragmentParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCancelPlanFragmentParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFragmentInstanceId() {
		if err = oprot.WriteFieldBegin("fragment_instance_id", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FragmentInstanceId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCancelPlanFragmentParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCancelPlanFragmentParams(%+v)", *p)

}

func (p *TCancelPlanFragmentParams) DeepEqual(ano *TCancelPlanFragmentParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ProtocolVersion) {
		return false
	}
	if !p.Field2DeepEqual(ano.FragmentInstanceId) {
		return false
	}
	return true
}

func (p *TCancelPlanFragmentParams) Field1DeepEqual(src PaloInternalServiceVersion) bool {

	if p.ProtocolVersion != src {
		return false
	}
	return true
}
func (p *TCancelPlanFragmentParams) Field2DeepEqual(src *types.TUniqueId) bool {

	if !p.FragmentInstanceId.DeepEqual(src) {
		return false
	}
	return true
}

type TCancelPlanFragmentResult_ struct {
	Status *status.TStatus `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
}

func NewTCancelPlanFragmentResult_() *TCancelPlanFragmentResult_ {
	return &TCancelPlanFragmentResult_{}
}

func (p *TCancelPlanFragmentResult_) InitDefault() {
}

var TCancelPlanFragmentResult__Status_DEFAULT *status.TStatus

func (p *TCancelPlanFragmentResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TCancelPlanFragmentResult__Status_DEFAULT
	}
	return p.Status
}
func (p *TCancelPlanFragmentResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}

var fieldIDToName_TCancelPlanFragmentResult_ = map[int16]string{
	1: "status",
}

func (p *TCancelPlanFragmentResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TCancelPlanFragmentResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCancelPlanFragmentResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TCancelPlanFragmentResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}

func (p *TCancelPlanFragmentResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCancelPlanFragmentResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCancelPlanFragmentResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCancelPlanFragmentResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCancelPlanFragmentResult_(%+v)", *p)

}

func (p *TCancelPlanFragmentResult_) DeepEqual(ano *TCancelPlanFragmentResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *TCancelPlanFragmentResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type TExprMap struct {
	ExprMap map[string]*exprs.TExpr `thrift:"expr_map,1,required" frugal:"1,required,map<string:exprs.TExpr>" json:"expr_map"`
}

func NewTExprMap() *TExprMap {
	return &TExprMap{}
}

func (p *TExprMap) InitDefault() {
}

func (p *TExprMap) GetExprMap() (v map[string]*exprs.TExpr) {
	return p.ExprMap
}
func (p *TExprMap) SetExprMap(val map[string]*exprs.TExpr) {
	p.ExprMap = val
}

var fieldIDToName_TExprMap = map[int16]string{
	1: "expr_map",
}

func (p *TExprMap) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetExprMap bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetExprMap = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetExprMap {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExprMap[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TExprMap[fieldId]))
}

func (p *TExprMap) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]*exprs.TExpr, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.ExprMap = _field
	return nil
}

func (p *TExprMap) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TExprMap"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TExprMap) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("expr_map", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ExprMap)); err != nil {
		return err
	}
	for k, v := range p.ExprMap {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TExprMap) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExprMap(%+v)", *p)

}

func (p *TExprMap) DeepEqual(ano *TExprMap) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ExprMap) {
		return false
	}
	return true
}

func (p *TExprMap) Field1DeepEqual(src map[string]*exprs.TExpr) bool {

	if len(p.ExprMap) != len(src) {
		return false
	}
	for k, v := range p.ExprMap {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TFoldConstantParams struct {
	ExprMap      map[string]map[string]*exprs.TExpr `thrift:"expr_map,1,required" frugal:"1,required,map<string:map<string:exprs.TExpr>>" json:"expr_map"`
	QueryGlobals *TQueryGlobals                     `thrift:"query_globals,2,required" frugal:"2,required,TQueryGlobals" json:"query_globals"`
	VecExec      *bool                              `thrift:"vec_exec,3,optional" frugal:"3,optional,bool" json:"vec_exec,omitempty"`
	QueryOptions *TQueryOptions                     `thrift:"query_options,4,optional" frugal:"4,optional,TQueryOptions" json:"query_options,omitempty"`
	QueryId      *types.TUniqueId                   `thrift:"query_id,5,optional" frugal:"5,optional,types.TUniqueId" json:"query_id,omitempty"`
	IsNereids    *bool                              `thrift:"is_nereids,6,optional" frugal:"6,optional,bool" json:"is_nereids,omitempty"`
}

func NewTFoldConstantParams() *TFoldConstantParams {
	return &TFoldConstantParams{}
}

func (p *TFoldConstantParams) InitDefault() {
}

func (p *TFoldConstantParams) GetExprMap() (v map[string]map[string]*exprs.TExpr) {
	return p.ExprMap
}

var TFoldConstantParams_QueryGlobals_DEFAULT *TQueryGlobals

func (p *TFoldConstantParams) GetQueryGlobals() (v *TQueryGlobals) {
	if !p.IsSetQueryGlobals() {
		return TFoldConstantParams_QueryGlobals_DEFAULT
	}
	return p.QueryGlobals
}

var TFoldConstantParams_VecExec_DEFAULT bool

func (p *TFoldConstantParams) GetVecExec() (v bool) {
	if !p.IsSetVecExec() {
		return TFoldConstantParams_VecExec_DEFAULT
	}
	return *p.VecExec
}

var TFoldConstantParams_QueryOptions_DEFAULT *TQueryOptions

func (p *TFoldConstantParams) GetQueryOptions() (v *TQueryOptions) {
	if !p.IsSetQueryOptions() {
		return TFoldConstantParams_QueryOptions_DEFAULT
	}
	return p.QueryOptions
}

var TFoldConstantParams_QueryId_DEFAULT *types.TUniqueId

func (p *TFoldConstantParams) GetQueryId() (v *types.TUniqueId) {
	if !p.IsSetQueryId() {
		return TFoldConstantParams_QueryId_DEFAULT
	}
	return p.QueryId
}

var TFoldConstantParams_IsNereids_DEFAULT bool

func (p *TFoldConstantParams) GetIsNereids() (v bool) {
	if !p.IsSetIsNereids() {
		return TFoldConstantParams_IsNereids_DEFAULT
	}
	return *p.IsNereids
}
func (p *TFoldConstantParams) SetExprMap(val map[string]map[string]*exprs.TExpr) {
	p.ExprMap = val
}
func (p *TFoldConstantParams) SetQueryGlobals(val *TQueryGlobals) {
	p.QueryGlobals = val
}
func (p *TFoldConstantParams) SetVecExec(val *bool) {
	p.VecExec = val
}
func (p *TFoldConstantParams) SetQueryOptions(val *TQueryOptions) {
	p.QueryOptions = val
}
func (p *TFoldConstantParams) SetQueryId(val *types.TUniqueId) {
	p.QueryId = val
}
func (p *TFoldConstantParams) SetIsNereids(val *bool) {
	p.IsNereids = val
}

var fieldIDToName_TFoldConstantParams = map[int16]string{
	1: "expr_map",
	2: "query_globals",
	3: "vec_exec",
	4: "query_options",
	5: "query_id",
	6: "is_nereids",
}

func (p *TFoldConstantParams) IsSetQueryGlobals() bool {
	return p.QueryGlobals != nil
}

func (p *TFoldConstantParams) IsSetVecExec() bool {
	return p.VecExec != nil
}

func (p *TFoldConstantParams) IsSetQueryOptions() bool {
	return p.QueryOptions != nil
}

func (p *TFoldConstantParams) IsSetQueryId() bool {
	return p.QueryId != nil
}

func (p *TFoldConstantParams) IsSetIsNereids() bool {
	return p.IsNereids != nil
}

func (p *TFoldConstantParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetExprMap bool = false
	var issetQueryGlobals bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetExprMap = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetQueryGlobals = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetExprMap {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetQueryGlobals {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFoldConstantParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFoldConstantParams[fieldId]))
}

func (p *TFoldConstantParams) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]map[string]*exprs.TExpr, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[string]*exprs.TExpr, size)
		values := make([]exprs.TExpr, size)
		for i := 0; i < size; i++ {
			var _key1 string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_key1 = v
			}

			_val1 := &values[i]
			_val1.InitDefault()
			if err := _val1.Read(iprot); err != nil {
				return err
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.ExprMap = _field
	return nil
}
func (p *TFoldConstantParams) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTQueryGlobals()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryGlobals = _field
	return nil
}
func (p *TFoldConstantParams) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VecExec = _field
	return nil
}
func (p *TFoldConstantParams) ReadField4(iprot thrift.TProtocol) error {
	_field := NewTQueryOptions()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryOptions = _field
	return nil
}
func (p *TFoldConstantParams) ReadField5(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryId = _field
	return nil
}
func (p *TFoldConstantParams) ReadField6(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsNereids = _field
	return nil
}

func (p *TFoldConstantParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFoldConstantParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFoldConstantParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("expr_map", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.ExprMap)); err != nil {
		return err
	}
	for k, v := range p.ExprMap {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for k, v := range v {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFoldConstantParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("query_globals", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.QueryGlobals.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFoldConstantParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVecExec() {
		if err = oprot.WriteFieldBegin("vec_exec", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.VecExec); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TFoldConstantParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryOptions() {
		if err = oprot.WriteFieldBegin("query_options", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.QueryOptions.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TFoldConstantParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryId() {
		if err = oprot.WriteFieldBegin("query_id", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.QueryId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TFoldConstantParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsNereids() {
		if err = oprot.WriteFieldBegin("is_nereids", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsNereids); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TFoldConstantParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFoldConstantParams(%+v)", *p)

}

func (p *TFoldConstantParams) DeepEqual(ano *TFoldConstantParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ExprMap) {
		return false
	}
	if !p.Field2DeepEqual(ano.QueryGlobals) {
		return false
	}
	if !p.Field3DeepEqual(ano.VecExec) {
		return false
	}
	if !p.Field4DeepEqual(ano.QueryOptions) {
		return false
	}
	if !p.Field5DeepEqual(ano.QueryId) {
		return false
	}
	if !p.Field6DeepEqual(ano.IsNereids) {
		return false
	}
	return true
}

func (p *TFoldConstantParams) Field1DeepEqual(src map[string]map[string]*exprs.TExpr) bool {

	if len(p.ExprMap) != len(src) {
		return false
	}
	for k, v := range p.ExprMap {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for k, v := range v {
			_src1 := _src[k]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *TFoldConstantParams) Field2DeepEqual(src *TQueryGlobals) bool {

	if !p.QueryGlobals.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFoldConstantParams) Field3DeepEqual(src *bool) bool {

	if p.VecExec == src {
		return true
	} else if p.VecExec == nil || src == nil {
		return false
	}
	if *p.VecExec != *src {
		return false
	}
	return true
}
func (p *TFoldConstantParams) Field4DeepEqual(src *TQueryOptions) bool {

	if !p.QueryOptions.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFoldConstantParams) Field5DeepEqual(src *types.TUniqueId) bool {

	if !p.QueryId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFoldConstantParams) Field6DeepEqual(src *bool) bool {

	if p.IsNereids == src {
		return true
	} else if p.IsNereids == nil || src == nil {
		return false
	}
	if *p.IsNereids != *src {
		return false
	}
	return true
}

type TTransmitDataParams struct {
	ProtocolVersion        PaloInternalServiceVersion `thrift:"protocol_version,1,required" frugal:"1,required,PaloInternalServiceVersion" json:"protocol_version"`
	DestFragmentInstanceId *types.TUniqueId           `thrift:"dest_fragment_instance_id,2,optional" frugal:"2,optional,types.TUniqueId" json:"dest_fragment_instance_id,omitempty"`
	DestNodeId             *types.TPlanNodeId         `thrift:"dest_node_id,4,optional" frugal:"4,optional,i32" json:"dest_node_id,omitempty"`
	RowBatch               *data.TRowBatch            `thrift:"row_batch,5,optional" frugal:"5,optional,data.TRowBatch" json:"row_batch,omitempty"`
	Eos                    *bool                      `thrift:"eos,6,optional" frugal:"6,optional,bool" json:"eos,omitempty"`
	BeNumber               *int32                     `thrift:"be_number,7,optional" frugal:"7,optional,i32" json:"be_number,omitempty"`
	PacketSeq              *int64                     `thrift:"packet_seq,8,optional" frugal:"8,optional,i64" json:"packet_seq,omitempty"`
	SenderId               *int32                     `thrift:"sender_id,9,optional" frugal:"9,optional,i32" json:"sender_id,omitempty"`
}

func NewTTransmitDataParams() *TTransmitDataParams {
	return &TTransmitDataParams{}
}

func (p *TTransmitDataParams) InitDefault() {
}

func (p *TTransmitDataParams) GetProtocolVersion() (v PaloInternalServiceVersion) {
	return p.ProtocolVersion
}

var TTransmitDataParams_DestFragmentInstanceId_DEFAULT *types.TUniqueId

func (p *TTransmitDataParams) GetDestFragmentInstanceId() (v *types.TUniqueId) {
	if !p.IsSetDestFragmentInstanceId() {
		return TTransmitDataParams_DestFragmentInstanceId_DEFAULT
	}
	return p.DestFragmentInstanceId
}

var TTransmitDataParams_DestNodeId_DEFAULT types.TPlanNodeId

func (p *TTransmitDataParams) GetDestNodeId() (v types.TPlanNodeId) {
	if !p.IsSetDestNodeId() {
		return TTransmitDataParams_DestNodeId_DEFAULT
	}
	return *p.DestNodeId
}

var TTransmitDataParams_RowBatch_DEFAULT *data.TRowBatch

func (p *TTransmitDataParams) GetRowBatch() (v *data.TRowBatch) {
	if !p.IsSetRowBatch() {
		return TTransmitDataParams_RowBatch_DEFAULT
	}
	return p.RowBatch
}

var TTransmitDataParams_Eos_DEFAULT bool

func (p *TTransmitDataParams) GetEos() (v bool) {
	if !p.IsSetEos() {
		return TTransmitDataParams_Eos_DEFAULT
	}
	return *p.Eos
}

var TTransmitDataParams_BeNumber_DEFAULT int32

func (p *TTransmitDataParams) GetBeNumber() (v int32) {
	if !p.IsSetBeNumber() {
		return TTransmitDataParams_BeNumber_DEFAULT
	}
	return *p.BeNumber
}

var TTransmitDataParams_PacketSeq_DEFAULT int64

func (p *TTransmitDataParams) GetPacketSeq() (v int64) {
	if !p.IsSetPacketSeq() {
		return TTransmitDataParams_PacketSeq_DEFAULT
	}
	return *p.PacketSeq
}

var TTransmitDataParams_SenderId_DEFAULT int32

func (p *TTransmitDataParams) GetSenderId() (v int32) {
	if !p.IsSetSenderId() {
		return TTransmitDataParams_SenderId_DEFAULT
	}
	return *p.SenderId
}
func (p *TTransmitDataParams) SetProtocolVersion(val PaloInternalServiceVersion) {
	p.ProtocolVersion = val
}
func (p *TTransmitDataParams) SetDestFragmentInstanceId(val *types.TUniqueId) {
	p.DestFragmentInstanceId = val
}
func (p *TTransmitDataParams) SetDestNodeId(val *types.TPlanNodeId) {
	p.DestNodeId = val
}
func (p *TTransmitDataParams) SetRowBatch(val *data.TRowBatch) {
	p.RowBatch = val
}
func (p *TTransmitDataParams) SetEos(val *bool) {
	p.Eos = val
}
func (p *TTransmitDataParams) SetBeNumber(val *int32) {
	p.BeNumber = val
}
func (p *TTransmitDataParams) SetPacketSeq(val *int64) {
	p.PacketSeq = val
}
func (p *TTransmitDataParams) SetSenderId(val *int32) {
	p.SenderId = val
}

var fieldIDToName_TTransmitDataParams = map[int16]string{
	1: "protocol_version",
	2: "dest_fragment_instance_id",
	4: "dest_node_id",
	5: "row_batch",
	6: "eos",
	7: "be_number",
	8: "packet_seq",
	9: "sender_id",
}

func (p *TTransmitDataParams) IsSetDestFragmentInstanceId() bool {
	return p.DestFragmentInstanceId != nil
}

func (p *TTransmitDataParams) IsSetDestNodeId() bool {
	return p.DestNodeId != nil
}

func (p *TTransmitDataParams) IsSetRowBatch() bool {
	return p.RowBatch != nil
}

func (p *TTransmitDataParams) IsSetEos() bool {
	return p.Eos != nil
}

func (p *TTransmitDataParams) IsSetBeNumber() bool {
	return p.BeNumber != nil
}

func (p *TTransmitDataParams) IsSetPacketSeq() bool {
	return p.PacketSeq != nil
}

func (p *TTransmitDataParams) IsSetSenderId() bool {
	return p.SenderId != nil
}

func (p *TTransmitDataParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTransmitDataParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTransmitDataParams[fieldId]))
}

func (p *TTransmitDataParams) ReadField1(iprot thrift.TProtocol) error {

	var _field PaloInternalServiceVersion
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = PaloInternalServiceVersion(v)
	}
	p.ProtocolVersion = _field
	return nil
}
func (p *TTransmitDataParams) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DestFragmentInstanceId = _field
	return nil
}
func (p *TTransmitDataParams) ReadField4(iprot thrift.TProtocol) error {

	var _field *types.TPlanNodeId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DestNodeId = _field
	return nil
}
func (p *TTransmitDataParams) ReadField5(iprot thrift.TProtocol) error {
	_field := data.NewTRowBatch()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.RowBatch = _field
	return nil
}
func (p *TTransmitDataParams) ReadField6(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Eos = _field
	return nil
}
func (p *TTransmitDataParams) ReadField7(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BeNumber = _field
	return nil
}
func (p *TTransmitDataParams) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PacketSeq = _field
	return nil
}
func (p *TTransmitDataParams) ReadField9(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SenderId = _field
	return nil
}

func (p *TTransmitDataParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTransmitDataParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTransmitDataParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTransmitDataParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestFragmentInstanceId() {
		if err = oprot.WriteFieldBegin("dest_fragment_instance_id", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DestFragmentInstanceId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTransmitDataParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestNodeId() {
		if err = oprot.WriteFieldBegin("dest_node_id", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.DestNodeId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TTransmitDataParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRowBatch() {
		if err = oprot.WriteFieldBegin("row_batch", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.RowBatch.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TTransmitDataParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetEos() {
		if err = oprot.WriteFieldBegin("eos", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Eos); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TTransmitDataParams) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetBeNumber() {
		if err = oprot.WriteFieldBegin("be_number", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BeNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TTransmitDataParams) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPacketSeq() {
		if err = oprot.WriteFieldBegin("packet_seq", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PacketSeq); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TTransmitDataParams) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSenderId() {
		if err = oprot.WriteFieldBegin("sender_id", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SenderId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TTransmitDataParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTransmitDataParams(%+v)", *p)

}

func (p *TTransmitDataParams) DeepEqual(ano *TTransmitDataParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ProtocolVersion) {
		return false
	}
	if !p.Field2DeepEqual(ano.DestFragmentInstanceId) {
		return false
	}
	if !p.Field4DeepEqual(ano.DestNodeId) {
		return false
	}
	if !p.Field5DeepEqual(ano.RowBatch) {
		return false
	}
	if !p.Field6DeepEqual(ano.Eos) {
		return false
	}
	if !p.Field7DeepEqual(ano.BeNumber) {
		return false
	}
	if !p.Field8DeepEqual(ano.PacketSeq) {
		return false
	}
	if !p.Field9DeepEqual(ano.SenderId) {
		return false
	}
	return true
}

func (p *TTransmitDataParams) Field1DeepEqual(src PaloInternalServiceVersion) bool {

	if p.ProtocolVersion != src {
		return false
	}
	return true
}
func (p *TTransmitDataParams) Field2DeepEqual(src *types.TUniqueId) bool {

	if !p.DestFragmentInstanceId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTransmitDataParams) Field4DeepEqual(src *types.TPlanNodeId) bool {

	if p.DestNodeId == src {
		return true
	} else if p.DestNodeId == nil || src == nil {
		return false
	}
	if *p.DestNodeId != *src {
		return false
	}
	return true
}
func (p *TTransmitDataParams) Field5DeepEqual(src *data.TRowBatch) bool {

	if !p.RowBatch.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTransmitDataParams) Field6DeepEqual(src *bool) bool {

	if p.Eos == src {
		return true
	} else if p.Eos == nil || src == nil {
		return false
	}
	if *p.Eos != *src {
		return false
	}
	return true
}
func (p *TTransmitDataParams) Field7DeepEqual(src *int32) bool {

	if p.BeNumber == src {
		return true
	} else if p.BeNumber == nil || src == nil {
		return false
	}
	if *p.BeNumber != *src {
		return false
	}
	return true
}
func (p *TTransmitDataParams) Field8DeepEqual(src *int64) bool {

	if p.PacketSeq == src {
		return true
	} else if p.PacketSeq == nil || src == nil {
		return false
	}
	if *p.PacketSeq != *src {
		return false
	}
	return true
}
func (p *TTransmitDataParams) Field9DeepEqual(src *int32) bool {

	if p.SenderId == src {
		return true
	} else if p.SenderId == nil || src == nil {
		return false
	}
	if *p.SenderId != *src {
		return false
	}
	return true
}

type TTransmitDataResult_ struct {
	Status                 *status.TStatus    `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	PacketSeq              *int64             `thrift:"packet_seq,2,optional" frugal:"2,optional,i64" json:"packet_seq,omitempty"`
	DestFragmentInstanceId *types.TUniqueId   `thrift:"dest_fragment_instance_id,3,optional" frugal:"3,optional,types.TUniqueId" json:"dest_fragment_instance_id,omitempty"`
	DestNodeId             *types.TPlanNodeId `thrift:"dest_node_id,4,optional" frugal:"4,optional,i32" json:"dest_node_id,omitempty"`
}

func NewTTransmitDataResult_() *TTransmitDataResult_ {
	return &TTransmitDataResult_{}
}

func (p *TTransmitDataResult_) InitDefault() {
}

var TTransmitDataResult__Status_DEFAULT *status.TStatus

func (p *TTransmitDataResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TTransmitDataResult__Status_DEFAULT
	}
	return p.Status
}

var TTransmitDataResult__PacketSeq_DEFAULT int64

func (p *TTransmitDataResult_) GetPacketSeq() (v int64) {
	if !p.IsSetPacketSeq() {
		return TTransmitDataResult__PacketSeq_DEFAULT
	}
	return *p.PacketSeq
}

var TTransmitDataResult__DestFragmentInstanceId_DEFAULT *types.TUniqueId

func (p *TTransmitDataResult_) GetDestFragmentInstanceId() (v *types.TUniqueId) {
	if !p.IsSetDestFragmentInstanceId() {
		return TTransmitDataResult__DestFragmentInstanceId_DEFAULT
	}
	return p.DestFragmentInstanceId
}

var TTransmitDataResult__DestNodeId_DEFAULT types.TPlanNodeId

func (p *TTransmitDataResult_) GetDestNodeId() (v types.TPlanNodeId) {
	if !p.IsSetDestNodeId() {
		return TTransmitDataResult__DestNodeId_DEFAULT
	}
	return *p.DestNodeId
}
func (p *TTransmitDataResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TTransmitDataResult_) SetPacketSeq(val *int64) {
	p.PacketSeq = val
}
func (p *TTransmitDataResult_) SetDestFragmentInstanceId(val *types.TUniqueId) {
	p.DestFragmentInstanceId = val
}
func (p *TTransmitDataResult_) SetDestNodeId(val *types.TPlanNodeId) {
	p.DestNodeId = val
}

var fieldIDToName_TTransmitDataResult_ = map[int16]string{
	1: "status",
	2: "packet_seq",
	3: "dest_fragment_instance_id",
	4: "dest_node_id",
}

func (p *TTransmitDataResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TTransmitDataResult_) IsSetPacketSeq() bool {
	return p.PacketSeq != nil
}

func (p *TTransmitDataResult_) IsSetDestFragmentInstanceId() bool {
	return p.DestFragmentInstanceId != nil
}

func (p *TTransmitDataResult_) IsSetDestNodeId() bool {
	return p.DestNodeId != nil
}

func (p *TTransmitDataResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTransmitDataResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTransmitDataResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TTransmitDataResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PacketSeq = _field
	return nil
}
func (p *TTransmitDataResult_) ReadField3(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DestFragmentInstanceId = _field
	return nil
}
func (p *TTransmitDataResult_) ReadField4(iprot thrift.TProtocol) error {

	var _field *types.TPlanNodeId
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DestNodeId = _field
	return nil
}

func (p *TTransmitDataResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTransmitDataResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTransmitDataResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTransmitDataResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPacketSeq() {
		if err = oprot.WriteFieldBegin("packet_seq", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PacketSeq); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTransmitDataResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestFragmentInstanceId() {
		if err = oprot.WriteFieldBegin("dest_fragment_instance_id", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DestFragmentInstanceId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTransmitDataResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestNodeId() {
		if err = oprot.WriteFieldBegin("dest_node_id", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.DestNodeId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TTransmitDataResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTransmitDataResult_(%+v)", *p)

}

func (p *TTransmitDataResult_) DeepEqual(ano *TTransmitDataResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.PacketSeq) {
		return false
	}
	if !p.Field3DeepEqual(ano.DestFragmentInstanceId) {
		return false
	}
	if !p.Field4DeepEqual(ano.DestNodeId) {
		return false
	}
	return true
}

func (p *TTransmitDataResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTransmitDataResult_) Field2DeepEqual(src *int64) bool {

	if p.PacketSeq == src {
		return true
	} else if p.PacketSeq == nil || src == nil {
		return false
	}
	if *p.PacketSeq != *src {
		return false
	}
	return true
}
func (p *TTransmitDataResult_) Field3DeepEqual(src *types.TUniqueId) bool {

	if !p.DestFragmentInstanceId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTransmitDataResult_) Field4DeepEqual(src *types.TPlanNodeId) bool {

	if p.DestNodeId == src {
		return true
	} else if p.DestNodeId == nil || src == nil {
		return false
	}
	if *p.DestNodeId != *src {
		return false
	}
	return true
}

type TTabletWithPartition struct {
	PartitionId int64 `thrift:"partition_id,1,required" frugal:"1,required,i64" json:"partition_id"`
	TabletId    int64 `thrift:"tablet_id,2,required" frugal:"2,required,i64" json:"tablet_id"`
}

func NewTTabletWithPartition() *TTabletWithPartition {
	return &TTabletWithPartition{}
}

func (p *TTabletWithPartition) InitDefault() {
}

func (p *TTabletWithPartition) GetPartitionId() (v int64) {
	return p.PartitionId
}

func (p *TTabletWithPartition) GetTabletId() (v int64) {
	return p.TabletId
}
func (p *TTabletWithPartition) SetPartitionId(val int64) {
	p.PartitionId = val
}
func (p *TTabletWithPartition) SetTabletId(val int64) {
	p.TabletId = val
}

var fieldIDToName_TTabletWithPartition = map[int16]string{
	1: "partition_id",
	2: "tablet_id",
}

func (p *TTabletWithPartition) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPartitionId bool = false
	var issetTabletId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPartitionId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPartitionId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTabletId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletWithPartition[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletWithPartition[fieldId]))
}

func (p *TTabletWithPartition) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PartitionId = _field
	return nil
}
func (p *TTabletWithPartition) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TabletId = _field
	return nil
}

func (p *TTabletWithPartition) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTabletWithPartition"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTabletWithPartition) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("partition_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PartitionId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTabletWithPartition) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTabletWithPartition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTabletWithPartition(%+v)", *p)

}

func (p *TTabletWithPartition) DeepEqual(ano *TTabletWithPartition) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PartitionId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TabletId) {
		return false
	}
	return true
}

func (p *TTabletWithPartition) Field1DeepEqual(src int64) bool {

	if p.PartitionId != src {
		return false
	}
	return true
}
func (p *TTabletWithPartition) Field2DeepEqual(src int64) bool {

	if p.TabletId != src {
		return false
	}
	return true
}

type TTabletWriterOpenParams struct {
	Id         *types.TUniqueId                   `thrift:"id,1,required" frugal:"1,required,types.TUniqueId" json:"id"`
	IndexId    int64                              `thrift:"index_id,2,required" frugal:"2,required,i64" json:"index_id"`
	TxnId      int64                              `thrift:"txn_id,3,required" frugal:"3,required,i64" json:"txn_id"`
	Schema     *descriptors.TOlapTableSchemaParam `thrift:"schema,4,required" frugal:"4,required,descriptors.TOlapTableSchemaParam" json:"schema"`
	Tablets    []*TTabletWithPartition            `thrift:"tablets,5,required" frugal:"5,required,list<TTabletWithPartition>" json:"tablets"`
	NumSenders int32                              `thrift:"num_senders,6,required" frugal:"6,required,i32" json:"num_senders"`
}

func NewTTabletWriterOpenParams() *TTabletWriterOpenParams {
	return &TTabletWriterOpenParams{}
}

func (p *TTabletWriterOpenParams) InitDefault() {
}

var TTabletWriterOpenParams_Id_DEFAULT *types.TUniqueId

func (p *TTabletWriterOpenParams) GetId() (v *types.TUniqueId) {
	if !p.IsSetId() {
		return TTabletWriterOpenParams_Id_DEFAULT
	}
	return p.Id
}

func (p *TTabletWriterOpenParams) GetIndexId() (v int64) {
	return p.IndexId
}

func (p *TTabletWriterOpenParams) GetTxnId() (v int64) {
	return p.TxnId
}

var TTabletWriterOpenParams_Schema_DEFAULT *descriptors.TOlapTableSchemaParam

func (p *TTabletWriterOpenParams) GetSchema() (v *descriptors.TOlapTableSchemaParam) {
	if !p.IsSetSchema() {
		return TTabletWriterOpenParams_Schema_DEFAULT
	}
	return p.Schema
}

func (p *TTabletWriterOpenParams) GetTablets() (v []*TTabletWithPartition) {
	return p.Tablets
}

func (p *TTabletWriterOpenParams) GetNumSenders() (v int32) {
	return p.NumSenders
}
func (p *TTabletWriterOpenParams) SetId(val *types.TUniqueId) {
	p.Id = val
}
func (p *TTabletWriterOpenParams) SetIndexId(val int64) {
	p.IndexId = val
}
func (p *TTabletWriterOpenParams) SetTxnId(val int64) {
	p.TxnId = val
}
func (p *TTabletWriterOpenParams) SetSchema(val *descriptors.TOlapTableSchemaParam) {
	p.Schema = val
}
func (p *TTabletWriterOpenParams) SetTablets(val []*TTabletWithPartition) {
	p.Tablets = val
}
func (p *TTabletWriterOpenParams) SetNumSenders(val int32) {
	p.NumSenders = val
}

var fieldIDToName_TTabletWriterOpenParams = map[int16]string{
	1: "id",
	2: "index_id",
	3: "txn_id",
	4: "schema",
	5: "tablets",
	6: "num_senders",
}

func (p *TTabletWriterOpenParams) IsSetId() bool {
	return p.Id != nil
}

func (p *TTabletWriterOpenParams) IsSetSchema() bool {
	return p.Schema != nil
}

func (p *TTabletWriterOpenParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetIndexId bool = false
	var issetTxnId bool = false
	var issetSchema bool = false
	var issetTablets bool = false
	var issetNumSenders bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetIndexId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetTxnId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchema = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetTablets = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetNumSenders = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetIndexId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTxnId {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetSchema {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTablets {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetNumSenders {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletWriterOpenParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletWriterOpenParams[fieldId]))
}

func (p *TTabletWriterOpenParams) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Id = _field
	return nil
}
func (p *TTabletWriterOpenParams) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IndexId = _field
	return nil
}
func (p *TTabletWriterOpenParams) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TxnId = _field
	return nil
}
func (p *TTabletWriterOpenParams) ReadField4(iprot thrift.TProtocol) error {
	_field := descriptors.NewTOlapTableSchemaParam()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Schema = _field
	return nil
}
func (p *TTabletWriterOpenParams) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TTabletWithPartition, 0, size)
	values := make([]TTabletWithPartition, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tablets = _field
	return nil
}
func (p *TTabletWriterOpenParams) ReadField6(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NumSenders = _field
	return nil
}

func (p *TTabletWriterOpenParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTabletWriterOpenParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTabletWriterOpenParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Id.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTabletWriterOpenParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("index_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.IndexId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTabletWriterOpenParams) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("txn_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TxnId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTabletWriterOpenParams) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schema", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Schema.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TTabletWriterOpenParams) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablets", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tablets)); err != nil {
		return err
	}
	for _, v := range p.Tablets {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TTabletWriterOpenParams) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("num_senders", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NumSenders); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TTabletWriterOpenParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTabletWriterOpenParams(%+v)", *p)

}

func (p *TTabletWriterOpenParams) DeepEqual(ano *TTabletWriterOpenParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.IndexId) {
		return false
	}
	if !p.Field3DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field4DeepEqual(ano.Schema) {
		return false
	}
	if !p.Field5DeepEqual(ano.Tablets) {
		return false
	}
	if !p.Field6DeepEqual(ano.NumSenders) {
		return false
	}
	return true
}

func (p *TTabletWriterOpenParams) Field1DeepEqual(src *types.TUniqueId) bool {

	if !p.Id.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTabletWriterOpenParams) Field2DeepEqual(src int64) bool {

	if p.IndexId != src {
		return false
	}
	return true
}
func (p *TTabletWriterOpenParams) Field3DeepEqual(src int64) bool {

	if p.TxnId != src {
		return false
	}
	return true
}
func (p *TTabletWriterOpenParams) Field4DeepEqual(src *descriptors.TOlapTableSchemaParam) bool {

	if !p.Schema.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTabletWriterOpenParams) Field5DeepEqual(src []*TTabletWithPartition) bool {

	if len(p.Tablets) != len(src) {
		return false
	}
	for i, v := range p.Tablets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TTabletWriterOpenParams) Field6DeepEqual(src int32) bool {

	if p.NumSenders != src {
		return false
	}
	return true
}

type TTabletWriterOpenResult_ struct {
	Status *status.TStatus `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
}

func NewTTabletWriterOpenResult_() *TTabletWriterOpenResult_ {
	return &TTabletWriterOpenResult_{}
}

func (p *TTabletWriterOpenResult_) InitDefault() {
}

var TTabletWriterOpenResult__Status_DEFAULT *status.TStatus

func (p *TTabletWriterOpenResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TTabletWriterOpenResult__Status_DEFAULT
	}
	return p.Status
}
func (p *TTabletWriterOpenResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}

var fieldIDToName_TTabletWriterOpenResult_ = map[int16]string{
	1: "status",
}

func (p *TTabletWriterOpenResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TTabletWriterOpenResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletWriterOpenResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletWriterOpenResult_[fieldId]))
}

func (p *TTabletWriterOpenResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}

func (p *TTabletWriterOpenResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTabletWriterOpenResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTabletWriterOpenResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTabletWriterOpenResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTabletWriterOpenResult_(%+v)", *p)

}

func (p *TTabletWriterOpenResult_) DeepEqual(ano *TTabletWriterOpenResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *TTabletWriterOpenResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type TTabletWriterAddBatchParams struct {
	Id        *types.TUniqueId  `thrift:"id,1,required" frugal:"1,required,types.TUniqueId" json:"id"`
	IndexId   int64             `thrift:"index_id,2,required" frugal:"2,required,i64" json:"index_id"`
	PacketSeq int64             `thrift:"packet_seq,3,required" frugal:"3,required,i64" json:"packet_seq"`
	TabletIds []types.TTabletId `thrift:"tablet_ids,4,required" frugal:"4,required,list<i64>" json:"tablet_ids"`
	RowBatch  *data.TRowBatch   `thrift:"row_batch,5,required" frugal:"5,required,data.TRowBatch" json:"row_batch"`
	SenderNo  int32             `thrift:"sender_no,6,required" frugal:"6,required,i32" json:"sender_no"`
}

func NewTTabletWriterAddBatchParams() *TTabletWriterAddBatchParams {
	return &TTabletWriterAddBatchParams{}
}

func (p *TTabletWriterAddBatchParams) InitDefault() {
}

var TTabletWriterAddBatchParams_Id_DEFAULT *types.TUniqueId

func (p *TTabletWriterAddBatchParams) GetId() (v *types.TUniqueId) {
	if !p.IsSetId() {
		return TTabletWriterAddBatchParams_Id_DEFAULT
	}
	return p.Id
}

func (p *TTabletWriterAddBatchParams) GetIndexId() (v int64) {
	return p.IndexId
}

func (p *TTabletWriterAddBatchParams) GetPacketSeq() (v int64) {
	return p.PacketSeq
}

func (p *TTabletWriterAddBatchParams) GetTabletIds() (v []types.TTabletId) {
	return p.TabletIds
}

var TTabletWriterAddBatchParams_RowBatch_DEFAULT *data.TRowBatch

func (p *TTabletWriterAddBatchParams) GetRowBatch() (v *data.TRowBatch) {
	if !p.IsSetRowBatch() {
		return TTabletWriterAddBatchParams_RowBatch_DEFAULT
	}
	return p.RowBatch
}

func (p *TTabletWriterAddBatchParams) GetSenderNo() (v int32) {
	return p.SenderNo
}
func (p *TTabletWriterAddBatchParams) SetId(val *types.TUniqueId) {
	p.Id = val
}
func (p *TTabletWriterAddBatchParams) SetIndexId(val int64) {
	p.IndexId = val
}
func (p *TTabletWriterAddBatchParams) SetPacketSeq(val int64) {
	p.PacketSeq = val
}
func (p *TTabletWriterAddBatchParams) SetTabletIds(val []types.TTabletId) {
	p.TabletIds = val
}
func (p *TTabletWriterAddBatchParams) SetRowBatch(val *data.TRowBatch) {
	p.RowBatch = val
}
func (p *TTabletWriterAddBatchParams) SetSenderNo(val int32) {
	p.SenderNo = val
}

var fieldIDToName_TTabletWriterAddBatchParams = map[int16]string{
	1: "id",
	2: "index_id",
	3: "packet_seq",
	4: "tablet_ids",
	5: "row_batch",
	6: "sender_no",
}

func (p *TTabletWriterAddBatchParams) IsSetId() bool {
	return p.Id != nil
}

func (p *TTabletWriterAddBatchParams) IsSetRowBatch() bool {
	return p.RowBatch != nil
}

func (p *TTabletWriterAddBatchParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetIndexId bool = false
	var issetPacketSeq bool = false
	var issetTabletIds bool = false
	var issetRowBatch bool = false
	var issetSenderNo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetIndexId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPacketSeq = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetRowBatch = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetSenderNo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetIndexId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPacketSeq {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetTabletIds {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetRowBatch {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetSenderNo {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletWriterAddBatchParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletWriterAddBatchParams[fieldId]))
}

func (p *TTabletWriterAddBatchParams) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Id = _field
	return nil
}
func (p *TTabletWriterAddBatchParams) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IndexId = _field
	return nil
}
func (p *TTabletWriterAddBatchParams) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PacketSeq = _field
	return nil
}
func (p *TTabletWriterAddBatchParams) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]types.TTabletId, 0, size)
	for i := 0; i < size; i++ {

		var _elem types.TTabletId
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TabletIds = _field
	return nil
}
func (p *TTabletWriterAddBatchParams) ReadField5(iprot thrift.TProtocol) error {
	_field := data.NewTRowBatch()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.RowBatch = _field
	return nil
}
func (p *TTabletWriterAddBatchParams) ReadField6(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SenderNo = _field
	return nil
}

func (p *TTabletWriterAddBatchParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTabletWriterAddBatchParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTabletWriterAddBatchParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Id.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTabletWriterAddBatchParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("index_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.IndexId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTabletWriterAddBatchParams) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("packet_seq", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PacketSeq); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTabletWriterAddBatchParams) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_ids", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.TabletIds)); err != nil {
		return err
	}
	for _, v := range p.TabletIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TTabletWriterAddBatchParams) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("row_batch", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.RowBatch.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TTabletWriterAddBatchParams) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sender_no", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SenderNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TTabletWriterAddBatchParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTabletWriterAddBatchParams(%+v)", *p)

}

func (p *TTabletWriterAddBatchParams) DeepEqual(ano *TTabletWriterAddBatchParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.IndexId) {
		return false
	}
	if !p.Field3DeepEqual(ano.PacketSeq) {
		return false
	}
	if !p.Field4DeepEqual(ano.TabletIds) {
		return false
	}
	if !p.Field5DeepEqual(ano.RowBatch) {
		return false
	}
	if !p.Field6DeepEqual(ano.SenderNo) {
		return false
	}
	return true
}

func (p *TTabletWriterAddBatchParams) Field1DeepEqual(src *types.TUniqueId) bool {

	if !p.Id.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTabletWriterAddBatchParams) Field2DeepEqual(src int64) bool {

	if p.IndexId != src {
		return false
	}
	return true
}
func (p *TTabletWriterAddBatchParams) Field3DeepEqual(src int64) bool {

	if p.PacketSeq != src {
		return false
	}
	return true
}
func (p *TTabletWriterAddBatchParams) Field4DeepEqual(src []types.TTabletId) bool {

	if len(p.TabletIds) != len(src) {
		return false
	}
	for i, v := range p.TabletIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TTabletWriterAddBatchParams) Field5DeepEqual(src *data.TRowBatch) bool {

	if !p.RowBatch.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTabletWriterAddBatchParams) Field6DeepEqual(src int32) bool {

	if p.SenderNo != src {
		return false
	}
	return true
}

type TTabletWriterAddBatchResult_ struct {
	Status *status.TStatus `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
}

func NewTTabletWriterAddBatchResult_() *TTabletWriterAddBatchResult_ {
	return &TTabletWriterAddBatchResult_{}
}

func (p *TTabletWriterAddBatchResult_) InitDefault() {
}

var TTabletWriterAddBatchResult__Status_DEFAULT *status.TStatus

func (p *TTabletWriterAddBatchResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TTabletWriterAddBatchResult__Status_DEFAULT
	}
	return p.Status
}
func (p *TTabletWriterAddBatchResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}

var fieldIDToName_TTabletWriterAddBatchResult_ = map[int16]string{
	1: "status",
}

func (p *TTabletWriterAddBatchResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TTabletWriterAddBatchResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletWriterAddBatchResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletWriterAddBatchResult_[fieldId]))
}

func (p *TTabletWriterAddBatchResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}

func (p *TTabletWriterAddBatchResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTabletWriterAddBatchResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTabletWriterAddBatchResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTabletWriterAddBatchResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTabletWriterAddBatchResult_(%+v)", *p)

}

func (p *TTabletWriterAddBatchResult_) DeepEqual(ano *TTabletWriterAddBatchResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *TTabletWriterAddBatchResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type TTabletWriterCloseParams struct {
	Id       *types.TUniqueId `thrift:"id,1,required" frugal:"1,required,types.TUniqueId" json:"id"`
	IndexId  int64            `thrift:"index_id,2,required" frugal:"2,required,i64" json:"index_id"`
	SenderNo int32            `thrift:"sender_no,3,required" frugal:"3,required,i32" json:"sender_no"`
}

func NewTTabletWriterCloseParams() *TTabletWriterCloseParams {
	return &TTabletWriterCloseParams{}
}

func (p *TTabletWriterCloseParams) InitDefault() {
}

var TTabletWriterCloseParams_Id_DEFAULT *types.TUniqueId

func (p *TTabletWriterCloseParams) GetId() (v *types.TUniqueId) {
	if !p.IsSetId() {
		return TTabletWriterCloseParams_Id_DEFAULT
	}
	return p.Id
}

func (p *TTabletWriterCloseParams) GetIndexId() (v int64) {
	return p.IndexId
}

func (p *TTabletWriterCloseParams) GetSenderNo() (v int32) {
	return p.SenderNo
}
func (p *TTabletWriterCloseParams) SetId(val *types.TUniqueId) {
	p.Id = val
}
func (p *TTabletWriterCloseParams) SetIndexId(val int64) {
	p.IndexId = val
}
func (p *TTabletWriterCloseParams) SetSenderNo(val int32) {
	p.SenderNo = val
}

var fieldIDToName_TTabletWriterCloseParams = map[int16]string{
	1: "id",
	2: "index_id",
	3: "sender_no",
}

func (p *TTabletWriterCloseParams) IsSetId() bool {
	return p.Id != nil
}

func (p *TTabletWriterCloseParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetIndexId bool = false
	var issetSenderNo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetIndexId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSenderNo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetIndexId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSenderNo {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletWriterCloseParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletWriterCloseParams[fieldId]))
}

func (p *TTabletWriterCloseParams) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Id = _field
	return nil
}
func (p *TTabletWriterCloseParams) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IndexId = _field
	return nil
}
func (p *TTabletWriterCloseParams) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SenderNo = _field
	return nil
}

func (p *TTabletWriterCloseParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTabletWriterCloseParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTabletWriterCloseParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Id.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTabletWriterCloseParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("index_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.IndexId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTabletWriterCloseParams) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sender_no", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SenderNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTabletWriterCloseParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTabletWriterCloseParams(%+v)", *p)

}

func (p *TTabletWriterCloseParams) DeepEqual(ano *TTabletWriterCloseParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.IndexId) {
		return false
	}
	if !p.Field3DeepEqual(ano.SenderNo) {
		return false
	}
	return true
}

func (p *TTabletWriterCloseParams) Field1DeepEqual(src *types.TUniqueId) bool {

	if !p.Id.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTabletWriterCloseParams) Field2DeepEqual(src int64) bool {

	if p.IndexId != src {
		return false
	}
	return true
}
func (p *TTabletWriterCloseParams) Field3DeepEqual(src int32) bool {

	if p.SenderNo != src {
		return false
	}
	return true
}

type TTabletWriterCloseResult_ struct {
	Status *status.TStatus `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
}

func NewTTabletWriterCloseResult_() *TTabletWriterCloseResult_ {
	return &TTabletWriterCloseResult_{}
}

func (p *TTabletWriterCloseResult_) InitDefault() {
}

var TTabletWriterCloseResult__Status_DEFAULT *status.TStatus

func (p *TTabletWriterCloseResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TTabletWriterCloseResult__Status_DEFAULT
	}
	return p.Status
}
func (p *TTabletWriterCloseResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}

var fieldIDToName_TTabletWriterCloseResult_ = map[int16]string{
	1: "status",
}

func (p *TTabletWriterCloseResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TTabletWriterCloseResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletWriterCloseResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletWriterCloseResult_[fieldId]))
}

func (p *TTabletWriterCloseResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}

func (p *TTabletWriterCloseResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTabletWriterCloseResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTabletWriterCloseResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTabletWriterCloseResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTabletWriterCloseResult_(%+v)", *p)

}

func (p *TTabletWriterCloseResult_) DeepEqual(ano *TTabletWriterCloseResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *TTabletWriterCloseResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type TTabletWriterCancelParams struct {
	Id       *types.TUniqueId `thrift:"id,1,required" frugal:"1,required,types.TUniqueId" json:"id"`
	IndexId  int64            `thrift:"index_id,2,required" frugal:"2,required,i64" json:"index_id"`
	SenderNo int32            `thrift:"sender_no,3,required" frugal:"3,required,i32" json:"sender_no"`
}

func NewTTabletWriterCancelParams() *TTabletWriterCancelParams {
	return &TTabletWriterCancelParams{}
}

func (p *TTabletWriterCancelParams) InitDefault() {
}

var TTabletWriterCancelParams_Id_DEFAULT *types.TUniqueId

func (p *TTabletWriterCancelParams) GetId() (v *types.TUniqueId) {
	if !p.IsSetId() {
		return TTabletWriterCancelParams_Id_DEFAULT
	}
	return p.Id
}

func (p *TTabletWriterCancelParams) GetIndexId() (v int64) {
	return p.IndexId
}

func (p *TTabletWriterCancelParams) GetSenderNo() (v int32) {
	return p.SenderNo
}
func (p *TTabletWriterCancelParams) SetId(val *types.TUniqueId) {
	p.Id = val
}
func (p *TTabletWriterCancelParams) SetIndexId(val int64) {
	p.IndexId = val
}
func (p *TTabletWriterCancelParams) SetSenderNo(val int32) {
	p.SenderNo = val
}

var fieldIDToName_TTabletWriterCancelParams = map[int16]string{
	1: "id",
	2: "index_id",
	3: "sender_no",
}

func (p *TTabletWriterCancelParams) IsSetId() bool {
	return p.Id != nil
}

func (p *TTabletWriterCancelParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetIndexId bool = false
	var issetSenderNo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetIndexId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSenderNo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetIndexId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSenderNo {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletWriterCancelParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletWriterCancelParams[fieldId]))
}

func (p *TTabletWriterCancelParams) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Id = _field
	return nil
}
func (p *TTabletWriterCancelParams) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IndexId = _field
	return nil
}
func (p *TTabletWriterCancelParams) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SenderNo = _field
	return nil
}

func (p *TTabletWriterCancelParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTabletWriterCancelParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTabletWriterCancelParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Id.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTabletWriterCancelParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("index_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.IndexId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTabletWriterCancelParams) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sender_no", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SenderNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTabletWriterCancelParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTabletWriterCancelParams(%+v)", *p)

}

func (p *TTabletWriterCancelParams) DeepEqual(ano *TTabletWriterCancelParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.IndexId) {
		return false
	}
	if !p.Field3DeepEqual(ano.SenderNo) {
		return false
	}
	return true
}

func (p *TTabletWriterCancelParams) Field1DeepEqual(src *types.TUniqueId) bool {

	if !p.Id.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TTabletWriterCancelParams) Field2DeepEqual(src int64) bool {

	if p.IndexId != src {
		return false
	}
	return true
}
func (p *TTabletWriterCancelParams) Field3DeepEqual(src int32) bool {

	if p.SenderNo != src {
		return false
	}
	return true
}

type TTabletWriterCancelResult_ struct {
}

func NewTTabletWriterCancelResult_() *TTabletWriterCancelResult_ {
	return &TTabletWriterCancelResult_{}
}

func (p *TTabletWriterCancelResult_) InitDefault() {
}

var fieldIDToName_TTabletWriterCancelResult_ = map[int16]string{}

func (p *TTabletWriterCancelResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TTabletWriterCancelResult_) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("TTabletWriterCancelResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTabletWriterCancelResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTabletWriterCancelResult_(%+v)", *p)

}

func (p *TTabletWriterCancelResult_) DeepEqual(ano *TTabletWriterCancelResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type TFetchDataParams struct {
	ProtocolVersion    PaloInternalServiceVersion `thrift:"protocol_version,1,required" frugal:"1,required,PaloInternalServiceVersion" json:"protocol_version"`
	FragmentInstanceId *types.TUniqueId           `thrift:"fragment_instance_id,2,required" frugal:"2,required,types.TUniqueId" json:"fragment_instance_id"`
}

func NewTFetchDataParams() *TFetchDataParams {
	return &TFetchDataParams{}
}

func (p *TFetchDataParams) InitDefault() {
}

func (p *TFetchDataParams) GetProtocolVersion() (v PaloInternalServiceVersion) {
	return p.ProtocolVersion
}

var TFetchDataParams_FragmentInstanceId_DEFAULT *types.TUniqueId

func (p *TFetchDataParams) GetFragmentInstanceId() (v *types.TUniqueId) {
	if !p.IsSetFragmentInstanceId() {
		return TFetchDataParams_FragmentInstanceId_DEFAULT
	}
	return p.FragmentInstanceId
}
func (p *TFetchDataParams) SetProtocolVersion(val PaloInternalServiceVersion) {
	p.ProtocolVersion = val
}
func (p *TFetchDataParams) SetFragmentInstanceId(val *types.TUniqueId) {
	p.FragmentInstanceId = val
}

var fieldIDToName_TFetchDataParams = map[int16]string{
	1: "protocol_version",
	2: "fragment_instance_id",
}

func (p *TFetchDataParams) IsSetFragmentInstanceId() bool {
	return p.FragmentInstanceId != nil
}

func (p *TFetchDataParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false
	var issetFragmentInstanceId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetFragmentInstanceId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetFragmentInstanceId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFetchDataParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFetchDataParams[fieldId]))
}

func (p *TFetchDataParams) ReadField1(iprot thrift.TProtocol) error {

	var _field PaloInternalServiceVersion
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = PaloInternalServiceVersion(v)
	}
	p.ProtocolVersion = _field
	return nil
}
func (p *TFetchDataParams) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FragmentInstanceId = _field
	return nil
}

func (p *TFetchDataParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFetchDataParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFetchDataParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFetchDataParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fragment_instance_id", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.FragmentInstanceId.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFetchDataParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFetchDataParams(%+v)", *p)

}

func (p *TFetchDataParams) DeepEqual(ano *TFetchDataParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ProtocolVersion) {
		return false
	}
	if !p.Field2DeepEqual(ano.FragmentInstanceId) {
		return false
	}
	return true
}

func (p *TFetchDataParams) Field1DeepEqual(src PaloInternalServiceVersion) bool {

	if p.ProtocolVersion != src {
		return false
	}
	return true
}
func (p *TFetchDataParams) Field2DeepEqual(src *types.TUniqueId) bool {

	if !p.FragmentInstanceId.DeepEqual(src) {
		return false
	}
	return true
}

type TFetchDataResult_ struct {
	ResultBatch *data.TResultBatch `thrift:"result_batch,1,required" frugal:"1,required,data.TResultBatch" json:"result_batch"`
	Eos         bool               `thrift:"eos,2,required" frugal:"2,required,bool" json:"eos"`
	PacketNum   int32              `thrift:"packet_num,3,required" frugal:"3,required,i32" json:"packet_num"`
	Status      *status.TStatus    `thrift:"status,4,optional" frugal:"4,optional,status.TStatus" json:"status,omitempty"`
}

func NewTFetchDataResult_() *TFetchDataResult_ {
	return &TFetchDataResult_{}
}

func (p *TFetchDataResult_) InitDefault() {
}

var TFetchDataResult__ResultBatch_DEFAULT *data.TResultBatch

func (p *TFetchDataResult_) GetResultBatch() (v *data.TResultBatch) {
	if !p.IsSetResultBatch() {
		return TFetchDataResult__ResultBatch_DEFAULT
	}
	return p.ResultBatch
}

func (p *TFetchDataResult_) GetEos() (v bool) {
	return p.Eos
}

func (p *TFetchDataResult_) GetPacketNum() (v int32) {
	return p.PacketNum
}

var TFetchDataResult__Status_DEFAULT *status.TStatus

func (p *TFetchDataResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TFetchDataResult__Status_DEFAULT
	}
	return p.Status
}
func (p *TFetchDataResult_) SetResultBatch(val *data.TResultBatch) {
	p.ResultBatch = val
}
func (p *TFetchDataResult_) SetEos(val bool) {
	p.Eos = val
}
func (p *TFetchDataResult_) SetPacketNum(val int32) {
	p.PacketNum = val
}
func (p *TFetchDataResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}

var fieldIDToName_TFetchDataResult_ = map[int16]string{
	1: "result_batch",
	2: "eos",
	3: "packet_num",
	4: "status",
}

func (p *TFetchDataResult_) IsSetResultBatch() bool {
	return p.ResultBatch != nil
}

func (p *TFetchDataResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TFetchDataResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetResultBatch bool = false
	var issetEos bool = false
	var issetPacketNum bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetResultBatch = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEos = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPacketNum = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetResultBatch {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEos {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPacketNum {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TFetchDataResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TFetchDataResult_[fieldId]))
}

func (p *TFetchDataResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := data.NewTResultBatch()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ResultBatch = _field
	return nil
}
func (p *TFetchDataResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Eos = _field
	return nil
}
func (p *TFetchDataResult_) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PacketNum = _field
	return nil
}
func (p *TFetchDataResult_) ReadField4(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}

func (p *TFetchDataResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TFetchDataResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TFetchDataResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("result_batch", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ResultBatch.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TFetchDataResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eos", thrift.BOOL, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Eos); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TFetchDataResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("packet_num", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PacketNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TFetchDataResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TFetchDataResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFetchDataResult_(%+v)", *p)

}

func (p *TFetchDataResult_) DeepEqual(ano *TFetchDataResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ResultBatch) {
		return false
	}
	if !p.Field2DeepEqual(ano.Eos) {
		return false
	}
	if !p.Field3DeepEqual(ano.PacketNum) {
		return false
	}
	if !p.Field4DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *TFetchDataResult_) Field1DeepEqual(src *data.TResultBatch) bool {

	if !p.ResultBatch.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TFetchDataResult_) Field2DeepEqual(src bool) bool {

	if p.Eos != src {
		return false
	}
	return true
}
func (p *TFetchDataResult_) Field3DeepEqual(src int32) bool {

	if p.PacketNum != src {
		return false
	}
	return true
}
func (p *TFetchDataResult_) Field4DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type TCondition struct {
	ColumnName            string        `thrift:"column_name,1,required" frugal:"1,required,string" json:"column_name"`
	ConditionOp           string        `thrift:"condition_op,2,required" frugal:"2,required,string" json:"condition_op"`
	ConditionValues       []string      `thrift:"condition_values,3,required" frugal:"3,required,list<string>" json:"condition_values"`
	ColumnUniqueId        *int32        `thrift:"column_unique_id,4,optional" frugal:"4,optional,i32" json:"column_unique_id,omitempty"`
	MarkedByRuntimeFilter bool          `thrift:"marked_by_runtime_filter,5,optional" frugal:"5,optional,bool" json:"marked_by_runtime_filter,omitempty"`
	CompoundType          TCompoundType `thrift:"compound_type,1000,optional" frugal:"1000,optional,TCompoundType" json:"compound_type,omitempty"`
}

func NewTCondition() *TCondition {
	return &TCondition{

		MarkedByRuntimeFilter: false,
		CompoundType:          TCompoundType_UNKNOWN,
	}
}

func (p *TCondition) InitDefault() {
	p.MarkedByRuntimeFilter = false
	p.CompoundType = TCompoundType_UNKNOWN
}

func (p *TCondition) GetColumnName() (v string) {
	return p.ColumnName
}

func (p *TCondition) GetConditionOp() (v string) {
	return p.ConditionOp
}

func (p *TCondition) GetConditionValues() (v []string) {
	return p.ConditionValues
}

var TCondition_ColumnUniqueId_DEFAULT int32

func (p *TCondition) GetColumnUniqueId() (v int32) {
	if !p.IsSetColumnUniqueId() {
		return TCondition_ColumnUniqueId_DEFAULT
	}
	return *p.ColumnUniqueId
}

var TCondition_MarkedByRuntimeFilter_DEFAULT bool = false

func (p *TCondition) GetMarkedByRuntimeFilter() (v bool) {
	if !p.IsSetMarkedByRuntimeFilter() {
		return TCondition_MarkedByRuntimeFilter_DEFAULT
	}
	return p.MarkedByRuntimeFilter
}

var TCondition_CompoundType_DEFAULT TCompoundType = TCompoundType_UNKNOWN

func (p *TCondition) GetCompoundType() (v TCompoundType) {
	if !p.IsSetCompoundType() {
		return TCondition_CompoundType_DEFAULT
	}
	return p.CompoundType
}
func (p *TCondition) SetColumnName(val string) {
	p.ColumnName = val
}
func (p *TCondition) SetConditionOp(val string) {
	p.ConditionOp = val
}
func (p *TCondition) SetConditionValues(val []string) {
	p.ConditionValues = val
}
func (p *TCondition) SetColumnUniqueId(val *int32) {
	p.ColumnUniqueId = val
}
func (p *TCondition) SetMarkedByRuntimeFilter(val bool) {
	p.MarkedByRuntimeFilter = val
}
func (p *TCondition) SetCompoundType(val TCompoundType) {
	p.CompoundType = val
}

var fieldIDToName_TCondition = map[int16]string{
	1:    "column_name",
	2:    "condition_op",
	3:    "condition_values",
	4:    "column_unique_id",
	5:    "marked_by_runtime_filter",
	1000: "compound_type",
}

func (p *TCondition) IsSetColumnUniqueId() bool {
	return p.ColumnUniqueId != nil
}

func (p *TCondition) IsSetMarkedByRuntimeFilter() bool {
	return p.MarkedByRuntimeFilter != TCondition_MarkedByRuntimeFilter_DEFAULT
}

func (p *TCondition) IsSetCompoundType() bool {
	return p.CompoundType != TCondition_CompoundType_DEFAULT
}

func (p *TCondition) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetColumnName bool = false
	var issetConditionOp bool = false
	var issetConditionValues bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumnName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetConditionOp = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetConditionValues = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1000:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1000(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetColumnName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetConditionOp {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetConditionValues {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCondition[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TCondition[fieldId]))
}

func (p *TCondition) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ColumnName = _field
	return nil
}
func (p *TCondition) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ConditionOp = _field
	return nil
}
func (p *TCondition) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ConditionValues = _field
	return nil
}
func (p *TCondition) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ColumnUniqueId = _field
	return nil
}
func (p *TCondition) ReadField5(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MarkedByRuntimeFilter = _field
	return nil
}
func (p *TCondition) ReadField1000(iprot thrift.TProtocol) error {

	var _field TCompoundType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TCompoundType(v)
	}
	p.CompoundType = _field
	return nil
}

func (p *TCondition) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCondition"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField1000(oprot); err != nil {
			fieldId = 1000
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCondition) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("column_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ColumnName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCondition) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("condition_op", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ConditionOp); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCondition) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("condition_values", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ConditionValues)); err != nil {
		return err
	}
	for _, v := range p.ConditionValues {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TCondition) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnUniqueId() {
		if err = oprot.WriteFieldBegin("column_unique_id", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ColumnUniqueId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TCondition) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMarkedByRuntimeFilter() {
		if err = oprot.WriteFieldBegin("marked_by_runtime_filter", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.MarkedByRuntimeFilter); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TCondition) writeField1000(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompoundType() {
		if err = oprot.WriteFieldBegin("compound_type", thrift.I32, 1000); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(p.CompoundType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 end error: ", p), err)
}

func (p *TCondition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCondition(%+v)", *p)

}

func (p *TCondition) DeepEqual(ano *TCondition) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnName) {
		return false
	}
	if !p.Field2DeepEqual(ano.ConditionOp) {
		return false
	}
	if !p.Field3DeepEqual(ano.ConditionValues) {
		return false
	}
	if !p.Field4DeepEqual(ano.ColumnUniqueId) {
		return false
	}
	if !p.Field5DeepEqual(ano.MarkedByRuntimeFilter) {
		return false
	}
	if !p.Field1000DeepEqual(ano.CompoundType) {
		return false
	}
	return true
}

func (p *TCondition) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ColumnName, src) != 0 {
		return false
	}
	return true
}
func (p *TCondition) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ConditionOp, src) != 0 {
		return false
	}
	return true
}
func (p *TCondition) Field3DeepEqual(src []string) bool {

	if len(p.ConditionValues) != len(src) {
		return false
	}
	for i, v := range p.ConditionValues {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TCondition) Field4DeepEqual(src *int32) bool {

	if p.ColumnUniqueId == src {
		return true
	} else if p.ColumnUniqueId == nil || src == nil {
		return false
	}
	if *p.ColumnUniqueId != *src {
		return false
	}
	return true
}
func (p *TCondition) Field5DeepEqual(src bool) bool {

	if p.MarkedByRuntimeFilter != src {
		return false
	}
	return true
}
func (p *TCondition) Field1000DeepEqual(src TCompoundType) bool {

	if p.CompoundType != src {
		return false
	}
	return true
}

type TExportStatusResult_ struct {
	Status *status.TStatus    `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
	State  types.TExportState `thrift:"state,2,required" frugal:"2,required,TExportState" json:"state"`
	Files  []string           `thrift:"files,3,optional" frugal:"3,optional,list<string>" json:"files,omitempty"`
}

func NewTExportStatusResult_() *TExportStatusResult_ {
	return &TExportStatusResult_{}
}

func (p *TExportStatusResult_) InitDefault() {
}

var TExportStatusResult__Status_DEFAULT *status.TStatus

func (p *TExportStatusResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TExportStatusResult__Status_DEFAULT
	}
	return p.Status
}

func (p *TExportStatusResult_) GetState() (v types.TExportState) {
	return p.State
}

var TExportStatusResult__Files_DEFAULT []string

func (p *TExportStatusResult_) GetFiles() (v []string) {
	if !p.IsSetFiles() {
		return TExportStatusResult__Files_DEFAULT
	}
	return p.Files
}
func (p *TExportStatusResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TExportStatusResult_) SetState(val types.TExportState) {
	p.State = val
}
func (p *TExportStatusResult_) SetFiles(val []string) {
	p.Files = val
}

var fieldIDToName_TExportStatusResult_ = map[int16]string{
	1: "status",
	2: "state",
	3: "files",
}

func (p *TExportStatusResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TExportStatusResult_) IsSetFiles() bool {
	return p.Files != nil
}

func (p *TExportStatusResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false
	var issetState bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetState = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetState {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExportStatusResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TExportStatusResult_[fieldId]))
}

func (p *TExportStatusResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := status.NewTStatus()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Status = _field
	return nil
}
func (p *TExportStatusResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field types.TExportState
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = types.TExportState(v)
	}
	p.State = _field
	return nil
}
func (p *TExportStatusResult_) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Files = _field
	return nil
}

func (p *TExportStatusResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TExportStatusResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TExportStatusResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TExportStatusResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("state", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TExportStatusResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFiles() {
		if err = oprot.WriteFieldBegin("files", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Files)); err != nil {
			return err
		}
		for _, v := range p.Files {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TExportStatusResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExportStatusResult_(%+v)", *p)

}

func (p *TExportStatusResult_) DeepEqual(ano *TExportStatusResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.State) {
		return false
	}
	if !p.Field3DeepEqual(ano.Files) {
		return false
	}
	return true
}

func (p *TExportStatusResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TExportStatusResult_) Field2DeepEqual(src types.TExportState) bool {

	if p.State != src {
		return false
	}
	return true
}
func (p *TExportStatusResult_) Field3DeepEqual(src []string) bool {

	if len(p.Files) != len(src) {
		return false
	}
	for i, v := range p.Files {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type TPipelineInstanceParams struct {
	FragmentInstanceId             *types.TUniqueId                          `thrift:"fragment_instance_id,1,required" frugal:"1,required,types.TUniqueId" json:"fragment_instance_id"`
	BuildHashTableForBroadcastJoin bool                                      `thrift:"build_hash_table_for_broadcast_join,2,optional" frugal:"2,optional,bool" json:"build_hash_table_for_broadcast_join,omitempty"`
	PerNodeScanRanges              map[types.TPlanNodeId][]*TScanRangeParams `thrift:"per_node_scan_ranges,3,required" frugal:"3,required,map<i32:list<TScanRangeParams>>" json:"per_node_scan_ranges"`
	SenderId                       *int32                                    `thrift:"sender_id,4,optional" frugal:"4,optional,i32" json:"sender_id,omitempty"`
	RuntimeFilterParams            *TRuntimeFilterParams                     `thrift:"runtime_filter_params,5,optional" frugal:"5,optional,TRuntimeFilterParams" json:"runtime_filter_params,omitempty"`
	BackendNum                     *int32                                    `thrift:"backend_num,6,optional" frugal:"6,optional,i32" json:"backend_num,omitempty"`
	PerNodeSharedScans             map[types.TPlanNodeId]bool                `thrift:"per_node_shared_scans,7,optional" frugal:"7,optional,map<i32:bool>" json:"per_node_shared_scans,omitempty"`
	TopnFilterSourceNodeIds        []int32                                   `thrift:"topn_filter_source_node_ids,8,optional" frugal:"8,optional,list<i32>" json:"topn_filter_source_node_ids,omitempty"`
	TopnFilterDescs                []*plannodes.TTopnFilterDesc              `thrift:"topn_filter_descs,9,optional" frugal:"9,optional,list<plannodes.TTopnFilterDesc>" json:"topn_filter_descs,omitempty"`
}

func NewTPipelineInstanceParams() *TPipelineInstanceParams {
	return &TPipelineInstanceParams{

		BuildHashTableForBroadcastJoin: false,
	}
}

func (p *TPipelineInstanceParams) InitDefault() {
	p.BuildHashTableForBroadcastJoin = false
}

var TPipelineInstanceParams_FragmentInstanceId_DEFAULT *types.TUniqueId

func (p *TPipelineInstanceParams) GetFragmentInstanceId() (v *types.TUniqueId) {
	if !p.IsSetFragmentInstanceId() {
		return TPipelineInstanceParams_FragmentInstanceId_DEFAULT
	}
	return p.FragmentInstanceId
}

var TPipelineInstanceParams_BuildHashTableForBroadcastJoin_DEFAULT bool = false

func (p *TPipelineInstanceParams) GetBuildHashTableForBroadcastJoin() (v bool) {
	if !p.IsSetBuildHashTableForBroadcastJoin() {
		return TPipelineInstanceParams_BuildHashTableForBroadcastJoin_DEFAULT
	}
	return p.BuildHashTableForBroadcastJoin
}

func (p *TPipelineInstanceParams) GetPerNodeScanRanges() (v map[types.TPlanNodeId][]*TScanRangeParams) {
	return p.PerNodeScanRanges
}

var TPipelineInstanceParams_SenderId_DEFAULT int32

func (p *TPipelineInstanceParams) GetSenderId() (v int32) {
	if !p.IsSetSenderId() {
		return TPipelineInstanceParams_SenderId_DEFAULT
	}
	return *p.SenderId
}

var TPipelineInstanceParams_RuntimeFilterParams_DEFAULT *TRuntimeFilterParams

func (p *TPipelineInstanceParams) GetRuntimeFilterParams() (v *TRuntimeFilterParams) {
	if !p.IsSetRuntimeFilterParams() {
		return TPipelineInstanceParams_RuntimeFilterParams_DEFAULT
	}
	return p.RuntimeFilterParams
}

var TPipelineInstanceParams_BackendNum_DEFAULT int32

func (p *TPipelineInstanceParams) GetBackendNum() (v int32) {
	if !p.IsSetBackendNum() {
		return TPipelineInstanceParams_BackendNum_DEFAULT
	}
	return *p.BackendNum
}

var TPipelineInstanceParams_PerNodeSharedScans_DEFAULT map[types.TPlanNodeId]bool

func (p *TPipelineInstanceParams) GetPerNodeSharedScans() (v map[types.TPlanNodeId]bool) {
	if !p.IsSetPerNodeSharedScans() {
		return TPipelineInstanceParams_PerNodeSharedScans_DEFAULT
	}
	return p.PerNodeSharedScans
}

var TPipelineInstanceParams_TopnFilterSourceNodeIds_DEFAULT []int32

func (p *TPipelineInstanceParams) GetTopnFilterSourceNodeIds() (v []int32) {
	if !p.IsSetTopnFilterSourceNodeIds() {
		return TPipelineInstanceParams_TopnFilterSourceNodeIds_DEFAULT
	}
	return p.TopnFilterSourceNodeIds
}

var TPipelineInstanceParams_TopnFilterDescs_DEFAULT []*plannodes.TTopnFilterDesc

func (p *TPipelineInstanceParams) GetTopnFilterDescs() (v []*plannodes.TTopnFilterDesc) {
	if !p.IsSetTopnFilterDescs() {
		return TPipelineInstanceParams_TopnFilterDescs_DEFAULT
	}
	return p.TopnFilterDescs
}
func (p *TPipelineInstanceParams) SetFragmentInstanceId(val *types.TUniqueId) {
	p.FragmentInstanceId = val
}
func (p *TPipelineInstanceParams) SetBuildHashTableForBroadcastJoin(val bool) {
	p.BuildHashTableForBroadcastJoin = val
}
func (p *TPipelineInstanceParams) SetPerNodeScanRanges(val map[types.TPlanNodeId][]*TScanRangeParams) {
	p.PerNodeScanRanges = val
}
func (p *TPipelineInstanceParams) SetSenderId(val *int32) {
	p.SenderId = val
}
func (p *TPipelineInstanceParams) SetRuntimeFilterParams(val *TRuntimeFilterParams) {
	p.RuntimeFilterParams = val
}
func (p *TPipelineInstanceParams) SetBackendNum(val *int32) {
	p.BackendNum = val
}
func (p *TPipelineInstanceParams) SetPerNodeSharedScans(val map[types.TPlanNodeId]bool) {
	p.PerNodeSharedScans = val
}
func (p *TPipelineInstanceParams) SetTopnFilterSourceNodeIds(val []int32) {
	p.TopnFilterSourceNodeIds = val
}
func (p *TPipelineInstanceParams) SetTopnFilterDescs(val []*plannodes.TTopnFilterDesc) {
	p.TopnFilterDescs = val
}

var fieldIDToName_TPipelineInstanceParams = map[int16]string{
	1: "fragment_instance_id",
	2: "build_hash_table_for_broadcast_join",
	3: "per_node_scan_ranges",
	4: "sender_id",
	5: "runtime_filter_params",
	6: "backend_num",
	7: "per_node_shared_scans",
	8: "topn_filter_source_node_ids",
	9: "topn_filter_descs",
}

func (p *TPipelineInstanceParams) IsSetFragmentInstanceId() bool {
	return p.FragmentInstanceId != nil
}

func (p *TPipelineInstanceParams) IsSetBuildHashTableForBroadcastJoin() bool {
	return p.BuildHashTableForBroadcastJoin != TPipelineInstanceParams_BuildHashTableForBroadcastJoin_DEFAULT
}

func (p *TPipelineInstanceParams) IsSetSenderId() bool {
	return p.SenderId != nil
}

func (p *TPipelineInstanceParams) IsSetRuntimeFilterParams() bool {
	return p.RuntimeFilterParams != nil
}

func (p *TPipelineInstanceParams) IsSetBackendNum() bool {
	return p.BackendNum != nil
}

func (p *TPipelineInstanceParams) IsSetPerNodeSharedScans() bool {
	return p.PerNodeSharedScans != nil
}

func (p *TPipelineInstanceParams) IsSetTopnFilterSourceNodeIds() bool {
	return p.TopnFilterSourceNodeIds != nil
}

func (p *TPipelineInstanceParams) IsSetTopnFilterDescs() bool {
	return p.TopnFilterDescs != nil
}

func (p *TPipelineInstanceParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFragmentInstanceId bool = false
	var issetPerNodeScanRanges bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFragmentInstanceId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPerNodeScanRanges = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFragmentInstanceId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPerNodeScanRanges {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPipelineInstanceParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPipelineInstanceParams[fieldId]))
}

func (p *TPipelineInstanceParams) ReadField1(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FragmentInstanceId = _field
	return nil
}
func (p *TPipelineInstanceParams) ReadField2(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BuildHashTableForBroadcastJoin = _field
	return nil
}
func (p *TPipelineInstanceParams) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TPlanNodeId][]*TScanRangeParams, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]*TScanRangeParams, 0, size)
		values := make([]TScanRangeParams, size)
		for i := 0; i < size; i++ {
			_elem := &values[i]
			_elem.InitDefault()

			if err := _elem.Read(iprot); err != nil {
				return err
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.PerNodeScanRanges = _field
	return nil
}
func (p *TPipelineInstanceParams) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SenderId = _field
	return nil
}
func (p *TPipelineInstanceParams) ReadField5(iprot thrift.TProtocol) error {
	_field := NewTRuntimeFilterParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.RuntimeFilterParams = _field
	return nil
}
func (p *TPipelineInstanceParams) ReadField6(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BackendNum = _field
	return nil
}
func (p *TPipelineInstanceParams) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TPlanNodeId]bool, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val bool
		if v, err := iprot.ReadBool(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.PerNodeSharedScans = _field
	return nil
}
func (p *TPipelineInstanceParams) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TopnFilterSourceNodeIds = _field
	return nil
}
func (p *TPipelineInstanceParams) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*plannodes.TTopnFilterDesc, 0, size)
	values := make([]plannodes.TTopnFilterDesc, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TopnFilterDescs = _field
	return nil
}

func (p *TPipelineInstanceParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPipelineInstanceParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPipelineInstanceParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fragment_instance_id", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.FragmentInstanceId.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPipelineInstanceParams) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetBuildHashTableForBroadcastJoin() {
		if err = oprot.WriteFieldBegin("build_hash_table_for_broadcast_join", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.BuildHashTableForBroadcastJoin); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPipelineInstanceParams) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("per_node_scan_ranges", thrift.MAP, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.PerNodeScanRanges)); err != nil {
		return err
	}
	for k, v := range p.PerNodeScanRanges {
		if err := oprot.WriteI32(k); err != nil {
			return err
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPipelineInstanceParams) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSenderId() {
		if err = oprot.WriteFieldBegin("sender_id", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SenderId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TPipelineInstanceParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRuntimeFilterParams() {
		if err = oprot.WriteFieldBegin("runtime_filter_params", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.RuntimeFilterParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TPipelineInstanceParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackendNum() {
		if err = oprot.WriteFieldBegin("backend_num", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BackendNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TPipelineInstanceParams) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPerNodeSharedScans() {
		if err = oprot.WriteFieldBegin("per_node_shared_scans", thrift.MAP, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.BOOL, len(p.PerNodeSharedScans)); err != nil {
			return err
		}
		for k, v := range p.PerNodeSharedScans {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := oprot.WriteBool(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TPipelineInstanceParams) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopnFilterSourceNodeIds() {
		if err = oprot.WriteFieldBegin("topn_filter_source_node_ids", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.TopnFilterSourceNodeIds)); err != nil {
			return err
		}
		for _, v := range p.TopnFilterSourceNodeIds {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TPipelineInstanceParams) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopnFilterDescs() {
		if err = oprot.WriteFieldBegin("topn_filter_descs", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TopnFilterDescs)); err != nil {
			return err
		}
		for _, v := range p.TopnFilterDescs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TPipelineInstanceParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPipelineInstanceParams(%+v)", *p)

}

func (p *TPipelineInstanceParams) DeepEqual(ano *TPipelineInstanceParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FragmentInstanceId) {
		return false
	}
	if !p.Field2DeepEqual(ano.BuildHashTableForBroadcastJoin) {
		return false
	}
	if !p.Field3DeepEqual(ano.PerNodeScanRanges) {
		return false
	}
	if !p.Field4DeepEqual(ano.SenderId) {
		return false
	}
	if !p.Field5DeepEqual(ano.RuntimeFilterParams) {
		return false
	}
	if !p.Field6DeepEqual(ano.BackendNum) {
		return false
	}
	if !p.Field7DeepEqual(ano.PerNodeSharedScans) {
		return false
	}
	if !p.Field8DeepEqual(ano.TopnFilterSourceNodeIds) {
		return false
	}
	if !p.Field9DeepEqual(ano.TopnFilterDescs) {
		return false
	}
	return true
}

func (p *TPipelineInstanceParams) Field1DeepEqual(src *types.TUniqueId) bool {

	if !p.FragmentInstanceId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPipelineInstanceParams) Field2DeepEqual(src bool) bool {

	if p.BuildHashTableForBroadcastJoin != src {
		return false
	}
	return true
}
func (p *TPipelineInstanceParams) Field3DeepEqual(src map[types.TPlanNodeId][]*TScanRangeParams) bool {

	if len(p.PerNodeScanRanges) != len(src) {
		return false
	}
	for k, v := range p.PerNodeScanRanges {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *TPipelineInstanceParams) Field4DeepEqual(src *int32) bool {

	if p.SenderId == src {
		return true
	} else if p.SenderId == nil || src == nil {
		return false
	}
	if *p.SenderId != *src {
		return false
	}
	return true
}
func (p *TPipelineInstanceParams) Field5DeepEqual(src *TRuntimeFilterParams) bool {

	if !p.RuntimeFilterParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPipelineInstanceParams) Field6DeepEqual(src *int32) bool {

	if p.BackendNum == src {
		return true
	} else if p.BackendNum == nil || src == nil {
		return false
	}
	if *p.BackendNum != *src {
		return false
	}
	return true
}
func (p *TPipelineInstanceParams) Field7DeepEqual(src map[types.TPlanNodeId]bool) bool {

	if len(p.PerNodeSharedScans) != len(src) {
		return false
	}
	for k, v := range p.PerNodeSharedScans {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TPipelineInstanceParams) Field8DeepEqual(src []int32) bool {

	if len(p.TopnFilterSourceNodeIds) != len(src) {
		return false
	}
	for i, v := range p.TopnFilterSourceNodeIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TPipelineInstanceParams) Field9DeepEqual(src []*plannodes.TTopnFilterDesc) bool {

	if len(p.TopnFilterDescs) != len(src) {
		return false
	}
	for i, v := range p.TopnFilterDescs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TPipelineFragmentParams struct {
	ProtocolVersion                   PaloInternalServiceVersion                            `thrift:"protocol_version,1,required" frugal:"1,required,PaloInternalServiceVersion" json:"protocol_version"`
	QueryId                           *types.TUniqueId                                      `thrift:"query_id,2,required" frugal:"2,required,types.TUniqueId" json:"query_id"`
	FragmentId                        *int32                                                `thrift:"fragment_id,3,optional" frugal:"3,optional,i32" json:"fragment_id,omitempty"`
	PerExchNumSenders                 map[types.TPlanNodeId]int32                           `thrift:"per_exch_num_senders,4,required" frugal:"4,required,map<i32:i32>" json:"per_exch_num_senders"`
	DescTbl                           *descriptors.TDescriptorTable                         `thrift:"desc_tbl,5,optional" frugal:"5,optional,descriptors.TDescriptorTable" json:"desc_tbl,omitempty"`
	ResourceInfo                      *types.TResourceInfo                                  `thrift:"resource_info,6,optional" frugal:"6,optional,types.TResourceInfo" json:"resource_info,omitempty"`
	Destinations                      []*datasinks.TPlanFragmentDestination                 `thrift:"destinations,7" frugal:"7,default,list<datasinks.TPlanFragmentDestination>" json:"destinations"`
	NumSenders                        *int32                                                `thrift:"num_senders,8,optional" frugal:"8,optional,i32" json:"num_senders,omitempty"`
	SendQueryStatisticsWithEveryBatch *bool                                                 `thrift:"send_query_statistics_with_every_batch,9,optional" frugal:"9,optional,bool" json:"send_query_statistics_with_every_batch,omitempty"`
	Coord                             *types.TNetworkAddress                                `thrift:"coord,10,optional" frugal:"10,optional,types.TNetworkAddress" json:"coord,omitempty"`
	QueryGlobals                      *TQueryGlobals                                        `thrift:"query_globals,11,optional" frugal:"11,optional,TQueryGlobals" json:"query_globals,omitempty"`
	QueryOptions                      *TQueryOptions                                        `thrift:"query_options,12,optional" frugal:"12,optional,TQueryOptions" json:"query_options,omitempty"`
	ImportLabel                       *string                                               `thrift:"import_label,13,optional" frugal:"13,optional,string" json:"import_label,omitempty"`
	DbName                            *string                                               `thrift:"db_name,14,optional" frugal:"14,optional,string" json:"db_name,omitempty"`
	LoadJobId                         *int64                                                `thrift:"load_job_id,15,optional" frugal:"15,optional,i64" json:"load_job_id,omitempty"`
	LoadErrorHubInfo                  *TLoadErrorHubInfo                                    `thrift:"load_error_hub_info,16,optional" frugal:"16,optional,TLoadErrorHubInfo" json:"load_error_hub_info,omitempty"`
	FragmentNumOnHost                 *int32                                                `thrift:"fragment_num_on_host,17,optional" frugal:"17,optional,i32" json:"fragment_num_on_host,omitempty"`
	BackendId                         *int64                                                `thrift:"backend_id,18,optional" frugal:"18,optional,i64" json:"backend_id,omitempty"`
	NeedWaitExecutionTrigger          bool                                                  `thrift:"need_wait_execution_trigger,19,optional" frugal:"19,optional,bool" json:"need_wait_execution_trigger,omitempty"`
	InstancesSharingHashTable         []*types.TUniqueId                                    `thrift:"instances_sharing_hash_table,20,optional" frugal:"20,optional,list<types.TUniqueId>" json:"instances_sharing_hash_table,omitempty"`
	IsSimplifiedParam                 bool                                                  `thrift:"is_simplified_param,21,optional" frugal:"21,optional,bool" json:"is_simplified_param,omitempty"`
	GlobalDict                        *TGlobalDict                                          `thrift:"global_dict,22,optional" frugal:"22,optional,TGlobalDict" json:"global_dict,omitempty"`
	Fragment                          *planner.TPlanFragment                                `thrift:"fragment,23,optional" frugal:"23,optional,planner.TPlanFragment" json:"fragment,omitempty"`
	LocalParams                       []*TPipelineInstanceParams                            `thrift:"local_params,24" frugal:"24,default,list<TPipelineInstanceParams>" json:"local_params"`
	WorkloadGroups                    []*TPipelineWorkloadGroup                             `thrift:"workload_groups,26,optional" frugal:"26,optional,list<TPipelineWorkloadGroup>" json:"workload_groups,omitempty"`
	TxnConf                           *TTxnParams                                           `thrift:"txn_conf,27,optional" frugal:"27,optional,TTxnParams" json:"txn_conf,omitempty"`
	TableName                         *string                                               `thrift:"table_name,28,optional" frugal:"28,optional,string" json:"table_name,omitempty"`
	FileScanParams                    map[types.TPlanNodeId]*plannodes.TFileScanRangeParams `thrift:"file_scan_params,29,optional" frugal:"29,optional,map<i32:plannodes.TFileScanRangeParams>" json:"file_scan_params,omitempty"`
	GroupCommit                       bool                                                  `thrift:"group_commit,30,optional" frugal:"30,optional,bool" json:"group_commit,omitempty"`
	LoadStreamPerNode                 *int32                                                `thrift:"load_stream_per_node,31,optional" frugal:"31,optional,i32" json:"load_stream_per_node,omitempty"`
	TotalLoadStreams                  *int32                                                `thrift:"total_load_streams,32,optional" frugal:"32,optional,i32" json:"total_load_streams,omitempty"`
	NumLocalSink                      *int32                                                `thrift:"num_local_sink,33,optional" frugal:"33,optional,i32" json:"num_local_sink,omitempty"`
	NumBuckets                        *int32                                                `thrift:"num_buckets,34,optional" frugal:"34,optional,i32" json:"num_buckets,omitempty"`
	BucketSeqToInstanceIdx            map[int32]int32                                       `thrift:"bucket_seq_to_instance_idx,35,optional" frugal:"35,optional,map<i32:i32>" json:"bucket_seq_to_instance_idx,omitempty"`
	PerNodeSharedScans                map[types.TPlanNodeId]bool                            `thrift:"per_node_shared_scans,36,optional" frugal:"36,optional,map<i32:bool>" json:"per_node_shared_scans,omitempty"`
	ParallelInstances                 *int32                                                `thrift:"parallel_instances,37,optional" frugal:"37,optional,i32" json:"parallel_instances,omitempty"`
	TotalInstances                    *int32                                                `thrift:"total_instances,38,optional" frugal:"38,optional,i32" json:"total_instances,omitempty"`
	ShuffleIdxToInstanceIdx           map[int32]int32                                       `thrift:"shuffle_idx_to_instance_idx,39,optional" frugal:"39,optional,map<i32:i32>" json:"shuffle_idx_to_instance_idx,omitempty"`
	IsNereids                         bool                                                  `thrift:"is_nereids,40,optional" frugal:"40,optional,bool" json:"is_nereids,omitempty"`
	WalId                             *int64                                                `thrift:"wal_id,41,optional" frugal:"41,optional,i64" json:"wal_id,omitempty"`
	ContentLength                     *int64                                                `thrift:"content_length,42,optional" frugal:"42,optional,i64" json:"content_length,omitempty"`
	CurrentConnectFe                  *types.TNetworkAddress                                `thrift:"current_connect_fe,43,optional" frugal:"43,optional,types.TNetworkAddress" json:"current_connect_fe,omitempty"`
	IsMowTable                        *bool                                                 `thrift:"is_mow_table,1000,optional" frugal:"1000,optional,bool" json:"is_mow_table,omitempty"`
}

func NewTPipelineFragmentParams() *TPipelineFragmentParams {
	return &TPipelineFragmentParams{

		NeedWaitExecutionTrigger: false,
		IsSimplifiedParam:        false,
		GroupCommit:              false,
		IsNereids:                true,
	}
}

func (p *TPipelineFragmentParams) InitDefault() {
	p.NeedWaitExecutionTrigger = false
	p.IsSimplifiedParam = false
	p.GroupCommit = false
	p.IsNereids = true
}

func (p *TPipelineFragmentParams) GetProtocolVersion() (v PaloInternalServiceVersion) {
	return p.ProtocolVersion
}

var TPipelineFragmentParams_QueryId_DEFAULT *types.TUniqueId

func (p *TPipelineFragmentParams) GetQueryId() (v *types.TUniqueId) {
	if !p.IsSetQueryId() {
		return TPipelineFragmentParams_QueryId_DEFAULT
	}
	return p.QueryId
}

var TPipelineFragmentParams_FragmentId_DEFAULT int32

func (p *TPipelineFragmentParams) GetFragmentId() (v int32) {
	if !p.IsSetFragmentId() {
		return TPipelineFragmentParams_FragmentId_DEFAULT
	}
	return *p.FragmentId
}

func (p *TPipelineFragmentParams) GetPerExchNumSenders() (v map[types.TPlanNodeId]int32) {
	return p.PerExchNumSenders
}

var TPipelineFragmentParams_DescTbl_DEFAULT *descriptors.TDescriptorTable

func (p *TPipelineFragmentParams) GetDescTbl() (v *descriptors.TDescriptorTable) {
	if !p.IsSetDescTbl() {
		return TPipelineFragmentParams_DescTbl_DEFAULT
	}
	return p.DescTbl
}

var TPipelineFragmentParams_ResourceInfo_DEFAULT *types.TResourceInfo

func (p *TPipelineFragmentParams) GetResourceInfo() (v *types.TResourceInfo) {
	if !p.IsSetResourceInfo() {
		return TPipelineFragmentParams_ResourceInfo_DEFAULT
	}
	return p.ResourceInfo
}

func (p *TPipelineFragmentParams) GetDestinations() (v []*datasinks.TPlanFragmentDestination) {
	return p.Destinations
}

var TPipelineFragmentParams_NumSenders_DEFAULT int32

func (p *TPipelineFragmentParams) GetNumSenders() (v int32) {
	if !p.IsSetNumSenders() {
		return TPipelineFragmentParams_NumSenders_DEFAULT
	}
	return *p.NumSenders
}

var TPipelineFragmentParams_SendQueryStatisticsWithEveryBatch_DEFAULT bool

func (p *TPipelineFragmentParams) GetSendQueryStatisticsWithEveryBatch() (v bool) {
	if !p.IsSetSendQueryStatisticsWithEveryBatch() {
		return TPipelineFragmentParams_SendQueryStatisticsWithEveryBatch_DEFAULT
	}
	return *p.SendQueryStatisticsWithEveryBatch
}

var TPipelineFragmentParams_Coord_DEFAULT *types.TNetworkAddress

func (p *TPipelineFragmentParams) GetCoord() (v *types.TNetworkAddress) {
	if !p.IsSetCoord() {
		return TPipelineFragmentParams_Coord_DEFAULT
	}
	return p.Coord
}

var TPipelineFragmentParams_QueryGlobals_DEFAULT *TQueryGlobals

func (p *TPipelineFragmentParams) GetQueryGlobals() (v *TQueryGlobals) {
	if !p.IsSetQueryGlobals() {
		return TPipelineFragmentParams_QueryGlobals_DEFAULT
	}
	return p.QueryGlobals
}

var TPipelineFragmentParams_QueryOptions_DEFAULT *TQueryOptions

func (p *TPipelineFragmentParams) GetQueryOptions() (v *TQueryOptions) {
	if !p.IsSetQueryOptions() {
		return TPipelineFragmentParams_QueryOptions_DEFAULT
	}
	return p.QueryOptions
}

var TPipelineFragmentParams_ImportLabel_DEFAULT string

func (p *TPipelineFragmentParams) GetImportLabel() (v string) {
	if !p.IsSetImportLabel() {
		return TPipelineFragmentParams_ImportLabel_DEFAULT
	}
	return *p.ImportLabel
}

var TPipelineFragmentParams_DbName_DEFAULT string

func (p *TPipelineFragmentParams) GetDbName() (v string) {
	if !p.IsSetDbName() {
		return TPipelineFragmentParams_DbName_DEFAULT
	}
	return *p.DbName
}

var TPipelineFragmentParams_LoadJobId_DEFAULT int64

func (p *TPipelineFragmentParams) GetLoadJobId() (v int64) {
	if !p.IsSetLoadJobId() {
		return TPipelineFragmentParams_LoadJobId_DEFAULT
	}
	return *p.LoadJobId
}

var TPipelineFragmentParams_LoadErrorHubInfo_DEFAULT *TLoadErrorHubInfo

func (p *TPipelineFragmentParams) GetLoadErrorHubInfo() (v *TLoadErrorHubInfo) {
	if !p.IsSetLoadErrorHubInfo() {
		return TPipelineFragmentParams_LoadErrorHubInfo_DEFAULT
	}
	return p.LoadErrorHubInfo
}

var TPipelineFragmentParams_FragmentNumOnHost_DEFAULT int32

func (p *TPipelineFragmentParams) GetFragmentNumOnHost() (v int32) {
	if !p.IsSetFragmentNumOnHost() {
		return TPipelineFragmentParams_FragmentNumOnHost_DEFAULT
	}
	return *p.FragmentNumOnHost
}

var TPipelineFragmentParams_BackendId_DEFAULT int64

func (p *TPipelineFragmentParams) GetBackendId() (v int64) {
	if !p.IsSetBackendId() {
		return TPipelineFragmentParams_BackendId_DEFAULT
	}
	return *p.BackendId
}

var TPipelineFragmentParams_NeedWaitExecutionTrigger_DEFAULT bool = false

func (p *TPipelineFragmentParams) GetNeedWaitExecutionTrigger() (v bool) {
	if !p.IsSetNeedWaitExecutionTrigger() {
		return TPipelineFragmentParams_NeedWaitExecutionTrigger_DEFAULT
	}
	return p.NeedWaitExecutionTrigger
}

var TPipelineFragmentParams_InstancesSharingHashTable_DEFAULT []*types.TUniqueId

func (p *TPipelineFragmentParams) GetInstancesSharingHashTable() (v []*types.TUniqueId) {
	if !p.IsSetInstancesSharingHashTable() {
		return TPipelineFragmentParams_InstancesSharingHashTable_DEFAULT
	}
	return p.InstancesSharingHashTable
}

var TPipelineFragmentParams_IsSimplifiedParam_DEFAULT bool = false

func (p *TPipelineFragmentParams) GetIsSimplifiedParam() (v bool) {
	if !p.IsSetIsSimplifiedParam() {
		return TPipelineFragmentParams_IsSimplifiedParam_DEFAULT
	}
	return p.IsSimplifiedParam
}

var TPipelineFragmentParams_GlobalDict_DEFAULT *TGlobalDict

func (p *TPipelineFragmentParams) GetGlobalDict() (v *TGlobalDict) {
	if !p.IsSetGlobalDict() {
		return TPipelineFragmentParams_GlobalDict_DEFAULT
	}
	return p.GlobalDict
}

var TPipelineFragmentParams_Fragment_DEFAULT *planner.TPlanFragment

func (p *TPipelineFragmentParams) GetFragment() (v *planner.TPlanFragment) {
	if !p.IsSetFragment() {
		return TPipelineFragmentParams_Fragment_DEFAULT
	}
	return p.Fragment
}

func (p *TPipelineFragmentParams) GetLocalParams() (v []*TPipelineInstanceParams) {
	return p.LocalParams
}

var TPipelineFragmentParams_WorkloadGroups_DEFAULT []*TPipelineWorkloadGroup

func (p *TPipelineFragmentParams) GetWorkloadGroups() (v []*TPipelineWorkloadGroup) {
	if !p.IsSetWorkloadGroups() {
		return TPipelineFragmentParams_WorkloadGroups_DEFAULT
	}
	return p.WorkloadGroups
}

var TPipelineFragmentParams_TxnConf_DEFAULT *TTxnParams

func (p *TPipelineFragmentParams) GetTxnConf() (v *TTxnParams) {
	if !p.IsSetTxnConf() {
		return TPipelineFragmentParams_TxnConf_DEFAULT
	}
	return p.TxnConf
}

var TPipelineFragmentParams_TableName_DEFAULT string

func (p *TPipelineFragmentParams) GetTableName() (v string) {
	if !p.IsSetTableName() {
		return TPipelineFragmentParams_TableName_DEFAULT
	}
	return *p.TableName
}

var TPipelineFragmentParams_FileScanParams_DEFAULT map[types.TPlanNodeId]*plannodes.TFileScanRangeParams

func (p *TPipelineFragmentParams) GetFileScanParams() (v map[types.TPlanNodeId]*plannodes.TFileScanRangeParams) {
	if !p.IsSetFileScanParams() {
		return TPipelineFragmentParams_FileScanParams_DEFAULT
	}
	return p.FileScanParams
}

var TPipelineFragmentParams_GroupCommit_DEFAULT bool = false

func (p *TPipelineFragmentParams) GetGroupCommit() (v bool) {
	if !p.IsSetGroupCommit() {
		return TPipelineFragmentParams_GroupCommit_DEFAULT
	}
	return p.GroupCommit
}

var TPipelineFragmentParams_LoadStreamPerNode_DEFAULT int32

func (p *TPipelineFragmentParams) GetLoadStreamPerNode() (v int32) {
	if !p.IsSetLoadStreamPerNode() {
		return TPipelineFragmentParams_LoadStreamPerNode_DEFAULT
	}
	return *p.LoadStreamPerNode
}

var TPipelineFragmentParams_TotalLoadStreams_DEFAULT int32

func (p *TPipelineFragmentParams) GetTotalLoadStreams() (v int32) {
	if !p.IsSetTotalLoadStreams() {
		return TPipelineFragmentParams_TotalLoadStreams_DEFAULT
	}
	return *p.TotalLoadStreams
}

var TPipelineFragmentParams_NumLocalSink_DEFAULT int32

func (p *TPipelineFragmentParams) GetNumLocalSink() (v int32) {
	if !p.IsSetNumLocalSink() {
		return TPipelineFragmentParams_NumLocalSink_DEFAULT
	}
	return *p.NumLocalSink
}

var TPipelineFragmentParams_NumBuckets_DEFAULT int32

func (p *TPipelineFragmentParams) GetNumBuckets() (v int32) {
	if !p.IsSetNumBuckets() {
		return TPipelineFragmentParams_NumBuckets_DEFAULT
	}
	return *p.NumBuckets
}

var TPipelineFragmentParams_BucketSeqToInstanceIdx_DEFAULT map[int32]int32

func (p *TPipelineFragmentParams) GetBucketSeqToInstanceIdx() (v map[int32]int32) {
	if !p.IsSetBucketSeqToInstanceIdx() {
		return TPipelineFragmentParams_BucketSeqToInstanceIdx_DEFAULT
	}
	return p.BucketSeqToInstanceIdx
}

var TPipelineFragmentParams_PerNodeSharedScans_DEFAULT map[types.TPlanNodeId]bool

func (p *TPipelineFragmentParams) GetPerNodeSharedScans() (v map[types.TPlanNodeId]bool) {
	if !p.IsSetPerNodeSharedScans() {
		return TPipelineFragmentParams_PerNodeSharedScans_DEFAULT
	}
	return p.PerNodeSharedScans
}

var TPipelineFragmentParams_ParallelInstances_DEFAULT int32

func (p *TPipelineFragmentParams) GetParallelInstances() (v int32) {
	if !p.IsSetParallelInstances() {
		return TPipelineFragmentParams_ParallelInstances_DEFAULT
	}
	return *p.ParallelInstances
}

var TPipelineFragmentParams_TotalInstances_DEFAULT int32

func (p *TPipelineFragmentParams) GetTotalInstances() (v int32) {
	if !p.IsSetTotalInstances() {
		return TPipelineFragmentParams_TotalInstances_DEFAULT
	}
	return *p.TotalInstances
}

var TPipelineFragmentParams_ShuffleIdxToInstanceIdx_DEFAULT map[int32]int32

func (p *TPipelineFragmentParams) GetShuffleIdxToInstanceIdx() (v map[int32]int32) {
	if !p.IsSetShuffleIdxToInstanceIdx() {
		return TPipelineFragmentParams_ShuffleIdxToInstanceIdx_DEFAULT
	}
	return p.ShuffleIdxToInstanceIdx
}

var TPipelineFragmentParams_IsNereids_DEFAULT bool = true

func (p *TPipelineFragmentParams) GetIsNereids() (v bool) {
	if !p.IsSetIsNereids() {
		return TPipelineFragmentParams_IsNereids_DEFAULT
	}
	return p.IsNereids
}

var TPipelineFragmentParams_WalId_DEFAULT int64

func (p *TPipelineFragmentParams) GetWalId() (v int64) {
	if !p.IsSetWalId() {
		return TPipelineFragmentParams_WalId_DEFAULT
	}
	return *p.WalId
}

var TPipelineFragmentParams_ContentLength_DEFAULT int64

func (p *TPipelineFragmentParams) GetContentLength() (v int64) {
	if !p.IsSetContentLength() {
		return TPipelineFragmentParams_ContentLength_DEFAULT
	}
	return *p.ContentLength
}

var TPipelineFragmentParams_CurrentConnectFe_DEFAULT *types.TNetworkAddress

func (p *TPipelineFragmentParams) GetCurrentConnectFe() (v *types.TNetworkAddress) {
	if !p.IsSetCurrentConnectFe() {
		return TPipelineFragmentParams_CurrentConnectFe_DEFAULT
	}
	return p.CurrentConnectFe
}

var TPipelineFragmentParams_IsMowTable_DEFAULT bool

func (p *TPipelineFragmentParams) GetIsMowTable() (v bool) {
	if !p.IsSetIsMowTable() {
		return TPipelineFragmentParams_IsMowTable_DEFAULT
	}
	return *p.IsMowTable
}
func (p *TPipelineFragmentParams) SetProtocolVersion(val PaloInternalServiceVersion) {
	p.ProtocolVersion = val
}
func (p *TPipelineFragmentParams) SetQueryId(val *types.TUniqueId) {
	p.QueryId = val
}
func (p *TPipelineFragmentParams) SetFragmentId(val *int32) {
	p.FragmentId = val
}
func (p *TPipelineFragmentParams) SetPerExchNumSenders(val map[types.TPlanNodeId]int32) {
	p.PerExchNumSenders = val
}
func (p *TPipelineFragmentParams) SetDescTbl(val *descriptors.TDescriptorTable) {
	p.DescTbl = val
}
func (p *TPipelineFragmentParams) SetResourceInfo(val *types.TResourceInfo) {
	p.ResourceInfo = val
}
func (p *TPipelineFragmentParams) SetDestinations(val []*datasinks.TPlanFragmentDestination) {
	p.Destinations = val
}
func (p *TPipelineFragmentParams) SetNumSenders(val *int32) {
	p.NumSenders = val
}
func (p *TPipelineFragmentParams) SetSendQueryStatisticsWithEveryBatch(val *bool) {
	p.SendQueryStatisticsWithEveryBatch = val
}
func (p *TPipelineFragmentParams) SetCoord(val *types.TNetworkAddress) {
	p.Coord = val
}
func (p *TPipelineFragmentParams) SetQueryGlobals(val *TQueryGlobals) {
	p.QueryGlobals = val
}
func (p *TPipelineFragmentParams) SetQueryOptions(val *TQueryOptions) {
	p.QueryOptions = val
}
func (p *TPipelineFragmentParams) SetImportLabel(val *string) {
	p.ImportLabel = val
}
func (p *TPipelineFragmentParams) SetDbName(val *string) {
	p.DbName = val
}
func (p *TPipelineFragmentParams) SetLoadJobId(val *int64) {
	p.LoadJobId = val
}
func (p *TPipelineFragmentParams) SetLoadErrorHubInfo(val *TLoadErrorHubInfo) {
	p.LoadErrorHubInfo = val
}
func (p *TPipelineFragmentParams) SetFragmentNumOnHost(val *int32) {
	p.FragmentNumOnHost = val
}
func (p *TPipelineFragmentParams) SetBackendId(val *int64) {
	p.BackendId = val
}
func (p *TPipelineFragmentParams) SetNeedWaitExecutionTrigger(val bool) {
	p.NeedWaitExecutionTrigger = val
}
func (p *TPipelineFragmentParams) SetInstancesSharingHashTable(val []*types.TUniqueId) {
	p.InstancesSharingHashTable = val
}
func (p *TPipelineFragmentParams) SetIsSimplifiedParam(val bool) {
	p.IsSimplifiedParam = val
}
func (p *TPipelineFragmentParams) SetGlobalDict(val *TGlobalDict) {
	p.GlobalDict = val
}
func (p *TPipelineFragmentParams) SetFragment(val *planner.TPlanFragment) {
	p.Fragment = val
}
func (p *TPipelineFragmentParams) SetLocalParams(val []*TPipelineInstanceParams) {
	p.LocalParams = val
}
func (p *TPipelineFragmentParams) SetWorkloadGroups(val []*TPipelineWorkloadGroup) {
	p.WorkloadGroups = val
}
func (p *TPipelineFragmentParams) SetTxnConf(val *TTxnParams) {
	p.TxnConf = val
}
func (p *TPipelineFragmentParams) SetTableName(val *string) {
	p.TableName = val
}
func (p *TPipelineFragmentParams) SetFileScanParams(val map[types.TPlanNodeId]*plannodes.TFileScanRangeParams) {
	p.FileScanParams = val
}
func (p *TPipelineFragmentParams) SetGroupCommit(val bool) {
	p.GroupCommit = val
}
func (p *TPipelineFragmentParams) SetLoadStreamPerNode(val *int32) {
	p.LoadStreamPerNode = val
}
func (p *TPipelineFragmentParams) SetTotalLoadStreams(val *int32) {
	p.TotalLoadStreams = val
}
func (p *TPipelineFragmentParams) SetNumLocalSink(val *int32) {
	p.NumLocalSink = val
}
func (p *TPipelineFragmentParams) SetNumBuckets(val *int32) {
	p.NumBuckets = val
}
func (p *TPipelineFragmentParams) SetBucketSeqToInstanceIdx(val map[int32]int32) {
	p.BucketSeqToInstanceIdx = val
}
func (p *TPipelineFragmentParams) SetPerNodeSharedScans(val map[types.TPlanNodeId]bool) {
	p.PerNodeSharedScans = val
}
func (p *TPipelineFragmentParams) SetParallelInstances(val *int32) {
	p.ParallelInstances = val
}
func (p *TPipelineFragmentParams) SetTotalInstances(val *int32) {
	p.TotalInstances = val
}
func (p *TPipelineFragmentParams) SetShuffleIdxToInstanceIdx(val map[int32]int32) {
	p.ShuffleIdxToInstanceIdx = val
}
func (p *TPipelineFragmentParams) SetIsNereids(val bool) {
	p.IsNereids = val
}
func (p *TPipelineFragmentParams) SetWalId(val *int64) {
	p.WalId = val
}
func (p *TPipelineFragmentParams) SetContentLength(val *int64) {
	p.ContentLength = val
}
func (p *TPipelineFragmentParams) SetCurrentConnectFe(val *types.TNetworkAddress) {
	p.CurrentConnectFe = val
}
func (p *TPipelineFragmentParams) SetIsMowTable(val *bool) {
	p.IsMowTable = val
}

var fieldIDToName_TPipelineFragmentParams = map[int16]string{
	1:    "protocol_version",
	2:    "query_id",
	3:    "fragment_id",
	4:    "per_exch_num_senders",
	5:    "desc_tbl",
	6:    "resource_info",
	7:    "destinations",
	8:    "num_senders",
	9:    "send_query_statistics_with_every_batch",
	10:   "coord",
	11:   "query_globals",
	12:   "query_options",
	13:   "import_label",
	14:   "db_name",
	15:   "load_job_id",
	16:   "load_error_hub_info",
	17:   "fragment_num_on_host",
	18:   "backend_id",
	19:   "need_wait_execution_trigger",
	20:   "instances_sharing_hash_table",
	21:   "is_simplified_param",
	22:   "global_dict",
	23:   "fragment",
	24:   "local_params",
	26:   "workload_groups",
	27:   "txn_conf",
	28:   "table_name",
	29:   "file_scan_params",
	30:   "group_commit",
	31:   "load_stream_per_node",
	32:   "total_load_streams",
	33:   "num_local_sink",
	34:   "num_buckets",
	35:   "bucket_seq_to_instance_idx",
	36:   "per_node_shared_scans",
	37:   "parallel_instances",
	38:   "total_instances",
	39:   "shuffle_idx_to_instance_idx",
	40:   "is_nereids",
	41:   "wal_id",
	42:   "content_length",
	43:   "current_connect_fe",
	1000: "is_mow_table",
}

func (p *TPipelineFragmentParams) IsSetQueryId() bool {
	return p.QueryId != nil
}

func (p *TPipelineFragmentParams) IsSetFragmentId() bool {
	return p.FragmentId != nil
}

func (p *TPipelineFragmentParams) IsSetDescTbl() bool {
	return p.DescTbl != nil
}

func (p *TPipelineFragmentParams) IsSetResourceInfo() bool {
	return p.ResourceInfo != nil
}

func (p *TPipelineFragmentParams) IsSetNumSenders() bool {
	return p.NumSenders != nil
}

func (p *TPipelineFragmentParams) IsSetSendQueryStatisticsWithEveryBatch() bool {
	return p.SendQueryStatisticsWithEveryBatch != nil
}

func (p *TPipelineFragmentParams) IsSetCoord() bool {
	return p.Coord != nil
}

func (p *TPipelineFragmentParams) IsSetQueryGlobals() bool {
	return p.QueryGlobals != nil
}

func (p *TPipelineFragmentParams) IsSetQueryOptions() bool {
	return p.QueryOptions != nil
}

func (p *TPipelineFragmentParams) IsSetImportLabel() bool {
	return p.ImportLabel != nil
}

func (p *TPipelineFragmentParams) IsSetDbName() bool {
	return p.DbName != nil
}

func (p *TPipelineFragmentParams) IsSetLoadJobId() bool {
	return p.LoadJobId != nil
}

func (p *TPipelineFragmentParams) IsSetLoadErrorHubInfo() bool {
	return p.LoadErrorHubInfo != nil
}

func (p *TPipelineFragmentParams) IsSetFragmentNumOnHost() bool {
	return p.FragmentNumOnHost != nil
}

func (p *TPipelineFragmentParams) IsSetBackendId() bool {
	return p.BackendId != nil
}

func (p *TPipelineFragmentParams) IsSetNeedWaitExecutionTrigger() bool {
	return p.NeedWaitExecutionTrigger != TPipelineFragmentParams_NeedWaitExecutionTrigger_DEFAULT
}

func (p *TPipelineFragmentParams) IsSetInstancesSharingHashTable() bool {
	return p.InstancesSharingHashTable != nil
}

func (p *TPipelineFragmentParams) IsSetIsSimplifiedParam() bool {
	return p.IsSimplifiedParam != TPipelineFragmentParams_IsSimplifiedParam_DEFAULT
}

func (p *TPipelineFragmentParams) IsSetGlobalDict() bool {
	return p.GlobalDict != nil
}

func (p *TPipelineFragmentParams) IsSetFragment() bool {
	return p.Fragment != nil
}

func (p *TPipelineFragmentParams) IsSetWorkloadGroups() bool {
	return p.WorkloadGroups != nil
}

func (p *TPipelineFragmentParams) IsSetTxnConf() bool {
	return p.TxnConf != nil
}

func (p *TPipelineFragmentParams) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *TPipelineFragmentParams) IsSetFileScanParams() bool {
	return p.FileScanParams != nil
}

func (p *TPipelineFragmentParams) IsSetGroupCommit() bool {
	return p.GroupCommit != TPipelineFragmentParams_GroupCommit_DEFAULT
}

func (p *TPipelineFragmentParams) IsSetLoadStreamPerNode() bool {
	return p.LoadStreamPerNode != nil
}

func (p *TPipelineFragmentParams) IsSetTotalLoadStreams() bool {
	return p.TotalLoadStreams != nil
}

func (p *TPipelineFragmentParams) IsSetNumLocalSink() bool {
	return p.NumLocalSink != nil
}

func (p *TPipelineFragmentParams) IsSetNumBuckets() bool {
	return p.NumBuckets != nil
}

func (p *TPipelineFragmentParams) IsSetBucketSeqToInstanceIdx() bool {
	return p.BucketSeqToInstanceIdx != nil
}

func (p *TPipelineFragmentParams) IsSetPerNodeSharedScans() bool {
	return p.PerNodeSharedScans != nil
}

func (p *TPipelineFragmentParams) IsSetParallelInstances() bool {
	return p.ParallelInstances != nil
}

func (p *TPipelineFragmentParams) IsSetTotalInstances() bool {
	return p.TotalInstances != nil
}

func (p *TPipelineFragmentParams) IsSetShuffleIdxToInstanceIdx() bool {
	return p.ShuffleIdxToInstanceIdx != nil
}

func (p *TPipelineFragmentParams) IsSetIsNereids() bool {
	return p.IsNereids != TPipelineFragmentParams_IsNereids_DEFAULT
}

func (p *TPipelineFragmentParams) IsSetWalId() bool {
	return p.WalId != nil
}

func (p *TPipelineFragmentParams) IsSetContentLength() bool {
	return p.ContentLength != nil
}

func (p *TPipelineFragmentParams) IsSetCurrentConnectFe() bool {
	return p.CurrentConnectFe != nil
}

func (p *TPipelineFragmentParams) IsSetIsMowTable() bool {
	return p.IsMowTable != nil
}

func (p *TPipelineFragmentParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocolVersion bool = false
	var issetQueryId bool = false
	var issetPerExchNumSenders bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetProtocolVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetQueryId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPerExchNumSenders = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 29:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 30:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 32:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 33:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField33(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 34:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField34(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 35:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField35(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 36:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField36(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 37:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField37(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 38:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField38(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 39:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField39(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 40:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField40(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 41:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField41(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 42:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField42(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 43:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField43(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1000:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1000(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetProtocolVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetQueryId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPerExchNumSenders {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPipelineFragmentParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPipelineFragmentParams[fieldId]))
}

func (p *TPipelineFragmentParams) ReadField1(iprot thrift.TProtocol) error {

	var _field PaloInternalServiceVersion
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = PaloInternalServiceVersion(v)
	}
	p.ProtocolVersion = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField2(iprot thrift.TProtocol) error {
	_field := types.NewTUniqueId()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryId = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField3(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FragmentId = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TPlanNodeId]int32, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.PerExchNumSenders = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField5(iprot thrift.TProtocol) error {
	_field := descriptors.NewTDescriptorTable()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DescTbl = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField6(iprot thrift.TProtocol) error {
	_field := types.NewTResourceInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ResourceInfo = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*datasinks.TPlanFragmentDestination, 0, size)
	values := make([]datasinks.TPlanFragmentDestination, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Destinations = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField8(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NumSenders = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField9(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SendQueryStatisticsWithEveryBatch = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField10(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Coord = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField11(iprot thrift.TProtocol) error {
	_field := NewTQueryGlobals()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryGlobals = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField12(iprot thrift.TProtocol) error {
	_field := NewTQueryOptions()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.QueryOptions = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField13(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ImportLabel = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField14(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DbName = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField15(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LoadJobId = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField16(iprot thrift.TProtocol) error {
	_field := NewTLoadErrorHubInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.LoadErrorHubInfo = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField17(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FragmentNumOnHost = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField18(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BackendId = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField19(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NeedWaitExecutionTrigger = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField20(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*types.TUniqueId, 0, size)
	values := make([]types.TUniqueId, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.InstancesSharingHashTable = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField21(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsSimplifiedParam = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField22(iprot thrift.TProtocol) error {
	_field := NewTGlobalDict()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.GlobalDict = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField23(iprot thrift.TProtocol) error {
	_field := planner.NewTPlanFragment()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Fragment = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField24(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TPipelineInstanceParams, 0, size)
	values := make([]TPipelineInstanceParams, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.LocalParams = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField26(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TPipelineWorkloadGroup, 0, size)
	values := make([]TPipelineWorkloadGroup, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.WorkloadGroups = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField27(iprot thrift.TProtocol) error {
	_field := NewTTxnParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TxnConf = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField28(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TableName = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField29(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TPlanNodeId]*plannodes.TFileScanRangeParams, size)
	values := make([]plannodes.TFileScanRangeParams, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.FileScanParams = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField30(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GroupCommit = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField31(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LoadStreamPerNode = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField32(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TotalLoadStreams = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField33(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NumLocalSink = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField34(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NumBuckets = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField35(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int32]int32, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.BucketSeqToInstanceIdx = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField36(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[types.TPlanNodeId]bool, size)
	for i := 0; i < size; i++ {
		var _key types.TPlanNodeId
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val bool
		if v, err := iprot.ReadBool(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.PerNodeSharedScans = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField37(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ParallelInstances = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField38(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TotalInstances = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField39(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int32]int32, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.ShuffleIdxToInstanceIdx = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField40(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsNereids = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField41(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WalId = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField42(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ContentLength = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField43(iprot thrift.TProtocol) error {
	_field := types.NewTNetworkAddress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CurrentConnectFe = _field
	return nil
}
func (p *TPipelineFragmentParams) ReadField1000(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsMowTable = _field
	return nil
}

func (p *TPipelineFragmentParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPipelineFragmentParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField33(oprot); err != nil {
			fieldId = 33
			goto WriteFieldError
		}
		if err = p.writeField34(oprot); err != nil {
			fieldId = 34
			goto WriteFieldError
		}
		if err = p.writeField35(oprot); err != nil {
			fieldId = 35
			goto WriteFieldError
		}
		if err = p.writeField36(oprot); err != nil {
			fieldId = 36
			goto WriteFieldError
		}
		if err = p.writeField37(oprot); err != nil {
			fieldId = 37
			goto WriteFieldError
		}
		if err = p.writeField38(oprot); err != nil {
			fieldId = 38
			goto WriteFieldError
		}
		if err = p.writeField39(oprot); err != nil {
			fieldId = 39
			goto WriteFieldError
		}
		if err = p.writeField40(oprot); err != nil {
			fieldId = 40
			goto WriteFieldError
		}
		if err = p.writeField41(oprot); err != nil {
			fieldId = 41
			goto WriteFieldError
		}
		if err = p.writeField42(oprot); err != nil {
			fieldId = 42
			goto WriteFieldError
		}
		if err = p.writeField43(oprot); err != nil {
			fieldId = 43
			goto WriteFieldError
		}
		if err = p.writeField1000(oprot); err != nil {
			fieldId = 1000
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("protocol_version", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ProtocolVersion)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("query_id", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.QueryId.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFragmentId() {
		if err = oprot.WriteFieldBegin("fragment_id", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.FragmentId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("per_exch_num_senders", thrift.MAP, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.PerExchNumSenders)); err != nil {
		return err
	}
	for k, v := range p.PerExchNumSenders {
		if err := oprot.WriteI32(k); err != nil {
			return err
		}
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescTbl() {
		if err = oprot.WriteFieldBegin("desc_tbl", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DescTbl.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetResourceInfo() {
		if err = oprot.WriteFieldBegin("resource_info", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ResourceInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("destinations", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Destinations)); err != nil {
		return err
	}
	for _, v := range p.Destinations {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumSenders() {
		if err = oprot.WriteFieldBegin("num_senders", thrift.I32, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.NumSenders); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSendQueryStatisticsWithEveryBatch() {
		if err = oprot.WriteFieldBegin("send_query_statistics_with_every_batch", thrift.BOOL, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.SendQueryStatisticsWithEveryBatch); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCoord() {
		if err = oprot.WriteFieldBegin("coord", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Coord.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryGlobals() {
		if err = oprot.WriteFieldBegin("query_globals", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.QueryGlobals.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryOptions() {
		if err = oprot.WriteFieldBegin("query_options", thrift.STRUCT, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.QueryOptions.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetImportLabel() {
		if err = oprot.WriteFieldBegin("import_label", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ImportLabel); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetDbName() {
		if err = oprot.WriteFieldBegin("db_name", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DbName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadJobId() {
		if err = oprot.WriteFieldBegin("load_job_id", thrift.I64, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LoadJobId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadErrorHubInfo() {
		if err = oprot.WriteFieldBegin("load_error_hub_info", thrift.STRUCT, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.LoadErrorHubInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetFragmentNumOnHost() {
		if err = oprot.WriteFieldBegin("fragment_num_on_host", thrift.I32, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.FragmentNumOnHost); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackendId() {
		if err = oprot.WriteFieldBegin("backend_id", thrift.I64, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BackendId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetNeedWaitExecutionTrigger() {
		if err = oprot.WriteFieldBegin("need_wait_execution_trigger", thrift.BOOL, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.NeedWaitExecutionTrigger); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetInstancesSharingHashTable() {
		if err = oprot.WriteFieldBegin("instances_sharing_hash_table", thrift.LIST, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InstancesSharingHashTable)); err != nil {
			return err
		}
		for _, v := range p.InstancesSharingHashTable {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsSimplifiedParam() {
		if err = oprot.WriteFieldBegin("is_simplified_param", thrift.BOOL, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsSimplifiedParam); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetGlobalDict() {
		if err = oprot.WriteFieldBegin("global_dict", thrift.STRUCT, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.GlobalDict.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetFragment() {
		if err = oprot.WriteFieldBegin("fragment", thrift.STRUCT, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Fragment.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("local_params", thrift.LIST, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LocalParams)); err != nil {
		return err
	}
	for _, v := range p.LocalParams {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkloadGroups() {
		if err = oprot.WriteFieldBegin("workload_groups", thrift.LIST, 26); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.WorkloadGroups)); err != nil {
			return err
		}
		for _, v := range p.WorkloadGroups {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnConf() {
		if err = oprot.WriteFieldBegin("txn_conf", thrift.STRUCT, 27); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TxnConf.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err = oprot.WriteFieldBegin("table_name", thrift.STRING, 28); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TableName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileScanParams() {
		if err = oprot.WriteFieldBegin("file_scan_params", thrift.MAP, 29); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.FileScanParams)); err != nil {
			return err
		}
		for k, v := range p.FileScanParams {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupCommit() {
		if err = oprot.WriteFieldBegin("group_commit", thrift.BOOL, 30); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.GroupCommit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadStreamPerNode() {
		if err = oprot.WriteFieldBegin("load_stream_per_node", thrift.I32, 31); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.LoadStreamPerNode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalLoadStreams() {
		if err = oprot.WriteFieldBegin("total_load_streams", thrift.I32, 32); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TotalLoadStreams); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField33(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumLocalSink() {
		if err = oprot.WriteFieldBegin("num_local_sink", thrift.I32, 33); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.NumLocalSink); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField34(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumBuckets() {
		if err = oprot.WriteFieldBegin("num_buckets", thrift.I32, 34); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.NumBuckets); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField35(oprot thrift.TProtocol) (err error) {
	if p.IsSetBucketSeqToInstanceIdx() {
		if err = oprot.WriteFieldBegin("bucket_seq_to_instance_idx", thrift.MAP, 35); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.BucketSeqToInstanceIdx)); err != nil {
			return err
		}
		for k, v := range p.BucketSeqToInstanceIdx {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField36(oprot thrift.TProtocol) (err error) {
	if p.IsSetPerNodeSharedScans() {
		if err = oprot.WriteFieldBegin("per_node_shared_scans", thrift.MAP, 36); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.BOOL, len(p.PerNodeSharedScans)); err != nil {
			return err
		}
		for k, v := range p.PerNodeSharedScans {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := oprot.WriteBool(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField37(oprot thrift.TProtocol) (err error) {
	if p.IsSetParallelInstances() {
		if err = oprot.WriteFieldBegin("parallel_instances", thrift.I32, 37); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ParallelInstances); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField38(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalInstances() {
		if err = oprot.WriteFieldBegin("total_instances", thrift.I32, 38); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TotalInstances); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 38 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 38 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField39(oprot thrift.TProtocol) (err error) {
	if p.IsSetShuffleIdxToInstanceIdx() {
		if err = oprot.WriteFieldBegin("shuffle_idx_to_instance_idx", thrift.MAP, 39); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.ShuffleIdxToInstanceIdx)); err != nil {
			return err
		}
		for k, v := range p.ShuffleIdxToInstanceIdx {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 39 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 39 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField40(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsNereids() {
		if err = oprot.WriteFieldBegin("is_nereids", thrift.BOOL, 40); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsNereids); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 40 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 40 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField41(oprot thrift.TProtocol) (err error) {
	if p.IsSetWalId() {
		if err = oprot.WriteFieldBegin("wal_id", thrift.I64, 41); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WalId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 41 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 41 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField42(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentLength() {
		if err = oprot.WriteFieldBegin("content_length", thrift.I64, 42); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ContentLength); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 42 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 42 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField43(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentConnectFe() {
		if err = oprot.WriteFieldBegin("current_connect_fe", thrift.STRUCT, 43); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CurrentConnectFe.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 43 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 43 end error: ", p), err)
}

func (p *TPipelineFragmentParams) writeField1000(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsMowTable() {
		if err = oprot.WriteFieldBegin("is_mow_table", thrift.BOOL, 1000); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsMowTable); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1000 end error: ", p), err)
}

func (p *TPipelineFragmentParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPipelineFragmentParams(%+v)", *p)

}

func (p *TPipelineFragmentParams) DeepEqual(ano *TPipelineFragmentParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ProtocolVersion) {
		return false
	}
	if !p.Field2DeepEqual(ano.QueryId) {
		return false
	}
	if !p.Field3DeepEqual(ano.FragmentId) {
		return false
	}
	if !p.Field4DeepEqual(ano.PerExchNumSenders) {
		return false
	}
	if !p.Field5DeepEqual(ano.DescTbl) {
		return false
	}
	if !p.Field6DeepEqual(ano.ResourceInfo) {
		return false
	}
	if !p.Field7DeepEqual(ano.Destinations) {
		return false
	}
	if !p.Field8DeepEqual(ano.NumSenders) {
		return false
	}
	if !p.Field9DeepEqual(ano.SendQueryStatisticsWithEveryBatch) {
		return false
	}
	if !p.Field10DeepEqual(ano.Coord) {
		return false
	}
	if !p.Field11DeepEqual(ano.QueryGlobals) {
		return false
	}
	if !p.Field12DeepEqual(ano.QueryOptions) {
		return false
	}
	if !p.Field13DeepEqual(ano.ImportLabel) {
		return false
	}
	if !p.Field14DeepEqual(ano.DbName) {
		return false
	}
	if !p.Field15DeepEqual(ano.LoadJobId) {
		return false
	}
	if !p.Field16DeepEqual(ano.LoadErrorHubInfo) {
		return false
	}
	if !p.Field17DeepEqual(ano.FragmentNumOnHost) {
		return false
	}
	if !p.Field18DeepEqual(ano.BackendId) {
		return false
	}
	if !p.Field19DeepEqual(ano.NeedWaitExecutionTrigger) {
		return false
	}
	if !p.Field20DeepEqual(ano.InstancesSharingHashTable) {
		return false
	}
	if !p.Field21DeepEqual(ano.IsSimplifiedParam) {
		return false
	}
	if !p.Field22DeepEqual(ano.GlobalDict) {
		return false
	}
	if !p.Field23DeepEqual(ano.Fragment) {
		return false
	}
	if !p.Field24DeepEqual(ano.LocalParams) {
		return false
	}
	if !p.Field26DeepEqual(ano.WorkloadGroups) {
		return false
	}
	if !p.Field27DeepEqual(ano.TxnConf) {
		return false
	}
	if !p.Field28DeepEqual(ano.TableName) {
		return false
	}
	if !p.Field29DeepEqual(ano.FileScanParams) {
		return false
	}
	if !p.Field30DeepEqual(ano.GroupCommit) {
		return false
	}
	if !p.Field31DeepEqual(ano.LoadStreamPerNode) {
		return false
	}
	if !p.Field32DeepEqual(ano.TotalLoadStreams) {
		return false
	}
	if !p.Field33DeepEqual(ano.NumLocalSink) {
		return false
	}
	if !p.Field34DeepEqual(ano.NumBuckets) {
		return false
	}
	if !p.Field35DeepEqual(ano.BucketSeqToInstanceIdx) {
		return false
	}
	if !p.Field36DeepEqual(ano.PerNodeSharedScans) {
		return false
	}
	if !p.Field37DeepEqual(ano.ParallelInstances) {
		return false
	}
	if !p.Field38DeepEqual(ano.TotalInstances) {
		return false
	}
	if !p.Field39DeepEqual(ano.ShuffleIdxToInstanceIdx) {
		return false
	}
	if !p.Field40DeepEqual(ano.IsNereids) {
		return false
	}
	if !p.Field41DeepEqual(ano.WalId) {
		return false
	}
	if !p.Field42DeepEqual(ano.ContentLength) {
		return false
	}
	if !p.Field43DeepEqual(ano.CurrentConnectFe) {
		return false
	}
	if !p.Field1000DeepEqual(ano.IsMowTable) {
		return false
	}
	return true
}

func (p *TPipelineFragmentParams) Field1DeepEqual(src PaloInternalServiceVersion) bool {

	if p.ProtocolVersion != src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field2DeepEqual(src *types.TUniqueId) bool {

	if !p.QueryId.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field3DeepEqual(src *int32) bool {

	if p.FragmentId == src {
		return true
	} else if p.FragmentId == nil || src == nil {
		return false
	}
	if *p.FragmentId != *src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field4DeepEqual(src map[types.TPlanNodeId]int32) bool {

	if len(p.PerExchNumSenders) != len(src) {
		return false
	}
	for k, v := range p.PerExchNumSenders {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TPipelineFragmentParams) Field5DeepEqual(src *descriptors.TDescriptorTable) bool {

	if !p.DescTbl.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field6DeepEqual(src *types.TResourceInfo) bool {

	if !p.ResourceInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field7DeepEqual(src []*datasinks.TPlanFragmentDestination) bool {

	if len(p.Destinations) != len(src) {
		return false
	}
	for i, v := range p.Destinations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPipelineFragmentParams) Field8DeepEqual(src *int32) bool {

	if p.NumSenders == src {
		return true
	} else if p.NumSenders == nil || src == nil {
		return false
	}
	if *p.NumSenders != *src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field9DeepEqual(src *bool) bool {

	if p.SendQueryStatisticsWithEveryBatch == src {
		return true
	} else if p.SendQueryStatisticsWithEveryBatch == nil || src == nil {
		return false
	}
	if *p.SendQueryStatisticsWithEveryBatch != *src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field10DeepEqual(src *types.TNetworkAddress) bool {

	if !p.Coord.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field11DeepEqual(src *TQueryGlobals) bool {

	if !p.QueryGlobals.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field12DeepEqual(src *TQueryOptions) bool {

	if !p.QueryOptions.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field13DeepEqual(src *string) bool {

	if p.ImportLabel == src {
		return true
	} else if p.ImportLabel == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ImportLabel, *src) != 0 {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field14DeepEqual(src *string) bool {

	if p.DbName == src {
		return true
	} else if p.DbName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DbName, *src) != 0 {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field15DeepEqual(src *int64) bool {

	if p.LoadJobId == src {
		return true
	} else if p.LoadJobId == nil || src == nil {
		return false
	}
	if *p.LoadJobId != *src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field16DeepEqual(src *TLoadErrorHubInfo) bool {

	if !p.LoadErrorHubInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field17DeepEqual(src *int32) bool {

	if p.FragmentNumOnHost == src {
		return true
	} else if p.FragmentNumOnHost == nil || src == nil {
		return false
	}
	if *p.FragmentNumOnHost != *src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field18DeepEqual(src *int64) bool {

	if p.BackendId == src {
		return true
	} else if p.BackendId == nil || src == nil {
		return false
	}
	if *p.BackendId != *src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field19DeepEqual(src bool) bool {

	if p.NeedWaitExecutionTrigger != src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field20DeepEqual(src []*types.TUniqueId) bool {

	if len(p.InstancesSharingHashTable) != len(src) {
		return false
	}
	for i, v := range p.InstancesSharingHashTable {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPipelineFragmentParams) Field21DeepEqual(src bool) bool {

	if p.IsSimplifiedParam != src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field22DeepEqual(src *TGlobalDict) bool {

	if !p.GlobalDict.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field23DeepEqual(src *planner.TPlanFragment) bool {

	if !p.Fragment.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field24DeepEqual(src []*TPipelineInstanceParams) bool {

	if len(p.LocalParams) != len(src) {
		return false
	}
	for i, v := range p.LocalParams {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPipelineFragmentParams) Field26DeepEqual(src []*TPipelineWorkloadGroup) bool {

	if len(p.WorkloadGroups) != len(src) {
		return false
	}
	for i, v := range p.WorkloadGroups {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPipelineFragmentParams) Field27DeepEqual(src *TTxnParams) bool {

	if !p.TxnConf.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field28DeepEqual(src *string) bool {

	if p.TableName == src {
		return true
	} else if p.TableName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TableName, *src) != 0 {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field29DeepEqual(src map[types.TPlanNodeId]*plannodes.TFileScanRangeParams) bool {

	if len(p.FileScanParams) != len(src) {
		return false
	}
	for k, v := range p.FileScanParams {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TPipelineFragmentParams) Field30DeepEqual(src bool) bool {

	if p.GroupCommit != src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field31DeepEqual(src *int32) bool {

	if p.LoadStreamPerNode == src {
		return true
	} else if p.LoadStreamPerNode == nil || src == nil {
		return false
	}
	if *p.LoadStreamPerNode != *src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field32DeepEqual(src *int32) bool {

	if p.TotalLoadStreams == src {
		return true
	} else if p.TotalLoadStreams == nil || src == nil {
		return false
	}
	if *p.TotalLoadStreams != *src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field33DeepEqual(src *int32) bool {

	if p.NumLocalSink == src {
		return true
	} else if p.NumLocalSink == nil || src == nil {
		return false
	}
	if *p.NumLocalSink != *src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field34DeepEqual(src *int32) bool {

	if p.NumBuckets == src {
		return true
	} else if p.NumBuckets == nil || src == nil {
		return false
	}
	if *p.NumBuckets != *src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field35DeepEqual(src map[int32]int32) bool {

	if len(p.BucketSeqToInstanceIdx) != len(src) {
		return false
	}
	for k, v := range p.BucketSeqToInstanceIdx {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TPipelineFragmentParams) Field36DeepEqual(src map[types.TPlanNodeId]bool) bool {

	if len(p.PerNodeSharedScans) != len(src) {
		return false
	}
	for k, v := range p.PerNodeSharedScans {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TPipelineFragmentParams) Field37DeepEqual(src *int32) bool {

	if p.ParallelInstances == src {
		return true
	} else if p.ParallelInstances == nil || src == nil {
		return false
	}
	if *p.ParallelInstances != *src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field38DeepEqual(src *int32) bool {

	if p.TotalInstances == src {
		return true
	} else if p.TotalInstances == nil || src == nil {
		return false
	}
	if *p.TotalInstances != *src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field39DeepEqual(src map[int32]int32) bool {

	if len(p.ShuffleIdxToInstanceIdx) != len(src) {
		return false
	}
	for k, v := range p.ShuffleIdxToInstanceIdx {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TPipelineFragmentParams) Field40DeepEqual(src bool) bool {

	if p.IsNereids != src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field41DeepEqual(src *int64) bool {

	if p.WalId == src {
		return true
	} else if p.WalId == nil || src == nil {
		return false
	}
	if *p.WalId != *src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field42DeepEqual(src *int64) bool {

	if p.ContentLength == src {
		return true
	} else if p.ContentLength == nil || src == nil {
		return false
	}
	if *p.ContentLength != *src {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field43DeepEqual(src *types.TNetworkAddress) bool {

	if !p.CurrentConnectFe.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPipelineFragmentParams) Field1000DeepEqual(src *bool) bool {

	if p.IsMowTable == src {
		return true
	} else if p.IsMowTable == nil || src == nil {
		return false
	}
	if *p.IsMowTable != *src {
		return false
	}
	return true
}

type TPipelineFragmentParamsList struct {
	ParamsList []*TPipelineFragmentParams `thrift:"params_list,1,optional" frugal:"1,optional,list<TPipelineFragmentParams>" json:"params_list,omitempty"`
}

func NewTPipelineFragmentParamsList() *TPipelineFragmentParamsList {
	return &TPipelineFragmentParamsList{}
}

func (p *TPipelineFragmentParamsList) InitDefault() {
}

var TPipelineFragmentParamsList_ParamsList_DEFAULT []*TPipelineFragmentParams

func (p *TPipelineFragmentParamsList) GetParamsList() (v []*TPipelineFragmentParams) {
	if !p.IsSetParamsList() {
		return TPipelineFragmentParamsList_ParamsList_DEFAULT
	}
	return p.ParamsList
}
func (p *TPipelineFragmentParamsList) SetParamsList(val []*TPipelineFragmentParams) {
	p.ParamsList = val
}

var fieldIDToName_TPipelineFragmentParamsList = map[int16]string{
	1: "params_list",
}

func (p *TPipelineFragmentParamsList) IsSetParamsList() bool {
	return p.ParamsList != nil
}

func (p *TPipelineFragmentParamsList) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPipelineFragmentParamsList[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TPipelineFragmentParamsList) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TPipelineFragmentParams, 0, size)
	values := make([]TPipelineFragmentParams, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ParamsList = _field
	return nil
}

func (p *TPipelineFragmentParamsList) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPipelineFragmentParamsList"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPipelineFragmentParamsList) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetParamsList() {
		if err = oprot.WriteFieldBegin("params_list", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ParamsList)); err != nil {
			return err
		}
		for _, v := range p.ParamsList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPipelineFragmentParamsList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPipelineFragmentParamsList(%+v)", *p)

}

func (p *TPipelineFragmentParamsList) DeepEqual(ano *TPipelineFragmentParamsList) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ParamsList) {
		return false
	}
	return true
}

func (p *TPipelineFragmentParamsList) Field1DeepEqual(src []*TPipelineFragmentParams) bool {

	if len(p.ParamsList) != len(src) {
		return false
	}
	for i, v := range p.ParamsList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
