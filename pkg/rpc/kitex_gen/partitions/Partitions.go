// Code generated by thriftgo (0.3.13). DO NOT EDIT.

package partitions

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/exprs"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/types"
	"strings"
)

type TPartitionType int64

const (
	TPartitionType_UNPARTITIONED                   TPartitionType = 0
	TPartitionType_RANDOM                          TPartitionType = 1
	TPartitionType_HASH_PARTITIONED                TPartitionType = 2
	TPartitionType_RANGE_PARTITIONED               TPartitionType = 3
	TPartitionType_LIST_PARTITIONED                TPartitionType = 4
	TPartitionType_BUCKET_SHFFULE_HASH_PARTITIONED TPartitionType = 5
	TPartitionType_TABLET_SINK_SHUFFLE_PARTITIONED TPartitionType = 6
	TPartitionType_TABLE_SINK_HASH_PARTITIONED     TPartitionType = 7
	TPartitionType_TABLE_SINK_RANDOM_PARTITIONED   TPartitionType = 8
)

func (p TPartitionType) String() string {
	switch p {
	case TPartitionType_UNPARTITIONED:
		return "UNPARTITIONED"
	case TPartitionType_RANDOM:
		return "RANDOM"
	case TPartitionType_HASH_PARTITIONED:
		return "HASH_PARTITIONED"
	case TPartitionType_RANGE_PARTITIONED:
		return "RANGE_PARTITIONED"
	case TPartitionType_LIST_PARTITIONED:
		return "LIST_PARTITIONED"
	case TPartitionType_BUCKET_SHFFULE_HASH_PARTITIONED:
		return "BUCKET_SHFFULE_HASH_PARTITIONED"
	case TPartitionType_TABLET_SINK_SHUFFLE_PARTITIONED:
		return "TABLET_SINK_SHUFFLE_PARTITIONED"
	case TPartitionType_TABLE_SINK_HASH_PARTITIONED:
		return "TABLE_SINK_HASH_PARTITIONED"
	case TPartitionType_TABLE_SINK_RANDOM_PARTITIONED:
		return "TABLE_SINK_RANDOM_PARTITIONED"
	}
	return "<UNSET>"
}

func TPartitionTypeFromString(s string) (TPartitionType, error) {
	switch s {
	case "UNPARTITIONED":
		return TPartitionType_UNPARTITIONED, nil
	case "RANDOM":
		return TPartitionType_RANDOM, nil
	case "HASH_PARTITIONED":
		return TPartitionType_HASH_PARTITIONED, nil
	case "RANGE_PARTITIONED":
		return TPartitionType_RANGE_PARTITIONED, nil
	case "LIST_PARTITIONED":
		return TPartitionType_LIST_PARTITIONED, nil
	case "BUCKET_SHFFULE_HASH_PARTITIONED":
		return TPartitionType_BUCKET_SHFFULE_HASH_PARTITIONED, nil
	case "TABLET_SINK_SHUFFLE_PARTITIONED":
		return TPartitionType_TABLET_SINK_SHUFFLE_PARTITIONED, nil
	case "TABLE_SINK_HASH_PARTITIONED":
		return TPartitionType_TABLE_SINK_HASH_PARTITIONED, nil
	case "TABLE_SINK_RANDOM_PARTITIONED":
		return TPartitionType_TABLE_SINK_RANDOM_PARTITIONED, nil
	}
	return TPartitionType(0), fmt.Errorf("not a valid TPartitionType string")
}

func TPartitionTypePtr(v TPartitionType) *TPartitionType { return &v }
func (p *TPartitionType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TPartitionType(result.Int64)
	return
}

func (p *TPartitionType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TDistributionType int64

const (
	TDistributionType_UNPARTITIONED    TDistributionType = 0
	TDistributionType_RANDOM           TDistributionType = 1
	TDistributionType_HASH_PARTITIONED TDistributionType = 2
)

func (p TDistributionType) String() string {
	switch p {
	case TDistributionType_UNPARTITIONED:
		return "UNPARTITIONED"
	case TDistributionType_RANDOM:
		return "RANDOM"
	case TDistributionType_HASH_PARTITIONED:
		return "HASH_PARTITIONED"
	}
	return "<UNSET>"
}

func TDistributionTypeFromString(s string) (TDistributionType, error) {
	switch s {
	case "UNPARTITIONED":
		return TDistributionType_UNPARTITIONED, nil
	case "RANDOM":
		return TDistributionType_RANDOM, nil
	case "HASH_PARTITIONED":
		return TDistributionType_HASH_PARTITIONED, nil
	}
	return TDistributionType(0), fmt.Errorf("not a valid TDistributionType string")
}

func TDistributionTypePtr(v TDistributionType) *TDistributionType { return &v }
func (p *TDistributionType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TDistributionType(result.Int64)
	return
}

func (p *TDistributionType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TPartitionKey struct {
	Sign int16                 `thrift:"sign,1,required" frugal:"1,required,i16" json:"sign"`
	Type *types.TPrimitiveType `thrift:"type,2,optional" frugal:"2,optional,TPrimitiveType" json:"type,omitempty"`
	Key  *string               `thrift:"key,3,optional" frugal:"3,optional,string" json:"key,omitempty"`
}

func NewTPartitionKey() *TPartitionKey {
	return &TPartitionKey{}
}

func (p *TPartitionKey) InitDefault() {
}

func (p *TPartitionKey) GetSign() (v int16) {
	return p.Sign
}

var TPartitionKey_Type_DEFAULT types.TPrimitiveType

func (p *TPartitionKey) GetType() (v types.TPrimitiveType) {
	if !p.IsSetType() {
		return TPartitionKey_Type_DEFAULT
	}
	return *p.Type
}

var TPartitionKey_Key_DEFAULT string

func (p *TPartitionKey) GetKey() (v string) {
	if !p.IsSetKey() {
		return TPartitionKey_Key_DEFAULT
	}
	return *p.Key
}
func (p *TPartitionKey) SetSign(val int16) {
	p.Sign = val
}
func (p *TPartitionKey) SetType(val *types.TPrimitiveType) {
	p.Type = val
}
func (p *TPartitionKey) SetKey(val *string) {
	p.Key = val
}

var fieldIDToName_TPartitionKey = map[int16]string{
	1: "sign",
	2: "type",
	3: "key",
}

func (p *TPartitionKey) IsSetType() bool {
	return p.Type != nil
}

func (p *TPartitionKey) IsSetKey() bool {
	return p.Key != nil
}

func (p *TPartitionKey) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSign bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetSign = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSign {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPartitionKey[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPartitionKey[fieldId]))
}

func (p *TPartitionKey) ReadField1(iprot thrift.TProtocol) error {

	var _field int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Sign = _field
	return nil
}
func (p *TPartitionKey) ReadField2(iprot thrift.TProtocol) error {

	var _field *types.TPrimitiveType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := types.TPrimitiveType(v)
		_field = &tmp
	}
	p.Type = _field
	return nil
}
func (p *TPartitionKey) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}

func (p *TPartitionKey) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPartitionKey"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPartitionKey) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sign", thrift.I16, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI16(p.Sign); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPartitionKey) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPartitionKey) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPartitionKey) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPartitionKey(%+v)", *p)

}

func (p *TPartitionKey) DeepEqual(ano *TPartitionKey) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Sign) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	if !p.Field3DeepEqual(ano.Key) {
		return false
	}
	return true
}

func (p *TPartitionKey) Field1DeepEqual(src int16) bool {

	if p.Sign != src {
		return false
	}
	return true
}
func (p *TPartitionKey) Field2DeepEqual(src *types.TPrimitiveType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if *p.Type != *src {
		return false
	}
	return true
}
func (p *TPartitionKey) Field3DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}

type TPartitionRange struct {
	StartKey        *TPartitionKey `thrift:"start_key,1,required" frugal:"1,required,TPartitionKey" json:"start_key"`
	EndKey          *TPartitionKey `thrift:"end_key,2,required" frugal:"2,required,TPartitionKey" json:"end_key"`
	IncludeStartKey bool           `thrift:"include_start_key,3,required" frugal:"3,required,bool" json:"include_start_key"`
	IncludeEndKey   bool           `thrift:"include_end_key,4,required" frugal:"4,required,bool" json:"include_end_key"`
}

func NewTPartitionRange() *TPartitionRange {
	return &TPartitionRange{}
}

func (p *TPartitionRange) InitDefault() {
}

var TPartitionRange_StartKey_DEFAULT *TPartitionKey

func (p *TPartitionRange) GetStartKey() (v *TPartitionKey) {
	if !p.IsSetStartKey() {
		return TPartitionRange_StartKey_DEFAULT
	}
	return p.StartKey
}

var TPartitionRange_EndKey_DEFAULT *TPartitionKey

func (p *TPartitionRange) GetEndKey() (v *TPartitionKey) {
	if !p.IsSetEndKey() {
		return TPartitionRange_EndKey_DEFAULT
	}
	return p.EndKey
}

func (p *TPartitionRange) GetIncludeStartKey() (v bool) {
	return p.IncludeStartKey
}

func (p *TPartitionRange) GetIncludeEndKey() (v bool) {
	return p.IncludeEndKey
}
func (p *TPartitionRange) SetStartKey(val *TPartitionKey) {
	p.StartKey = val
}
func (p *TPartitionRange) SetEndKey(val *TPartitionKey) {
	p.EndKey = val
}
func (p *TPartitionRange) SetIncludeStartKey(val bool) {
	p.IncludeStartKey = val
}
func (p *TPartitionRange) SetIncludeEndKey(val bool) {
	p.IncludeEndKey = val
}

var fieldIDToName_TPartitionRange = map[int16]string{
	1: "start_key",
	2: "end_key",
	3: "include_start_key",
	4: "include_end_key",
}

func (p *TPartitionRange) IsSetStartKey() bool {
	return p.StartKey != nil
}

func (p *TPartitionRange) IsSetEndKey() bool {
	return p.EndKey != nil
}

func (p *TPartitionRange) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStartKey bool = false
	var issetEndKey bool = false
	var issetIncludeStartKey bool = false
	var issetIncludeEndKey bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartKey = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEndKey = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetIncludeStartKey = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetIncludeEndKey = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStartKey {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEndKey {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetIncludeStartKey {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetIncludeEndKey {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPartitionRange[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPartitionRange[fieldId]))
}

func (p *TPartitionRange) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTPartitionKey()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.StartKey = _field
	return nil
}
func (p *TPartitionRange) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTPartitionKey()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EndKey = _field
	return nil
}
func (p *TPartitionRange) ReadField3(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IncludeStartKey = _field
	return nil
}
func (p *TPartitionRange) ReadField4(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IncludeEndKey = _field
	return nil
}

func (p *TPartitionRange) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPartitionRange"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPartitionRange) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_key", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.StartKey.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPartitionRange) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_key", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.EndKey.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TPartitionRange) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("include_start_key", thrift.BOOL, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IncludeStartKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TPartitionRange) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("include_end_key", thrift.BOOL, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IncludeEndKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TPartitionRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPartitionRange(%+v)", *p)

}

func (p *TPartitionRange) DeepEqual(ano *TPartitionRange) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.StartKey) {
		return false
	}
	if !p.Field2DeepEqual(ano.EndKey) {
		return false
	}
	if !p.Field3DeepEqual(ano.IncludeStartKey) {
		return false
	}
	if !p.Field4DeepEqual(ano.IncludeEndKey) {
		return false
	}
	return true
}

func (p *TPartitionRange) Field1DeepEqual(src *TPartitionKey) bool {

	if !p.StartKey.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPartitionRange) Field2DeepEqual(src *TPartitionKey) bool {

	if !p.EndKey.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TPartitionRange) Field3DeepEqual(src bool) bool {

	if p.IncludeStartKey != src {
		return false
	}
	return true
}
func (p *TPartitionRange) Field4DeepEqual(src bool) bool {

	if p.IncludeEndKey != src {
		return false
	}
	return true
}

type TRangePartition struct {
	PartitionId      int64            `thrift:"partition_id,1,required" frugal:"1,required,i64" json:"partition_id"`
	Range            *TPartitionRange `thrift:"range,2,required" frugal:"2,required,TPartitionRange" json:"range"`
	DistributedExprs []*exprs.TExpr   `thrift:"distributed_exprs,3,optional" frugal:"3,optional,list<exprs.TExpr>" json:"distributed_exprs,omitempty"`
	DistributeBucket *int32           `thrift:"distribute_bucket,4,optional" frugal:"4,optional,i32" json:"distribute_bucket,omitempty"`
}

func NewTRangePartition() *TRangePartition {
	return &TRangePartition{}
}

func (p *TRangePartition) InitDefault() {
}

func (p *TRangePartition) GetPartitionId() (v int64) {
	return p.PartitionId
}

var TRangePartition_Range_DEFAULT *TPartitionRange

func (p *TRangePartition) GetRange() (v *TPartitionRange) {
	if !p.IsSetRange() {
		return TRangePartition_Range_DEFAULT
	}
	return p.Range
}

var TRangePartition_DistributedExprs_DEFAULT []*exprs.TExpr

func (p *TRangePartition) GetDistributedExprs() (v []*exprs.TExpr) {
	if !p.IsSetDistributedExprs() {
		return TRangePartition_DistributedExprs_DEFAULT
	}
	return p.DistributedExprs
}

var TRangePartition_DistributeBucket_DEFAULT int32

func (p *TRangePartition) GetDistributeBucket() (v int32) {
	if !p.IsSetDistributeBucket() {
		return TRangePartition_DistributeBucket_DEFAULT
	}
	return *p.DistributeBucket
}
func (p *TRangePartition) SetPartitionId(val int64) {
	p.PartitionId = val
}
func (p *TRangePartition) SetRange(val *TPartitionRange) {
	p.Range = val
}
func (p *TRangePartition) SetDistributedExprs(val []*exprs.TExpr) {
	p.DistributedExprs = val
}
func (p *TRangePartition) SetDistributeBucket(val *int32) {
	p.DistributeBucket = val
}

var fieldIDToName_TRangePartition = map[int16]string{
	1: "partition_id",
	2: "range",
	3: "distributed_exprs",
	4: "distribute_bucket",
}

func (p *TRangePartition) IsSetRange() bool {
	return p.Range != nil
}

func (p *TRangePartition) IsSetDistributedExprs() bool {
	return p.DistributedExprs != nil
}

func (p *TRangePartition) IsSetDistributeBucket() bool {
	return p.DistributeBucket != nil
}

func (p *TRangePartition) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPartitionId bool = false
	var issetRange bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPartitionId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetRange = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPartitionId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetRange {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRangePartition[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TRangePartition[fieldId]))
}

func (p *TRangePartition) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PartitionId = _field
	return nil
}
func (p *TRangePartition) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTPartitionRange()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Range = _field
	return nil
}
func (p *TRangePartition) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DistributedExprs = _field
	return nil
}
func (p *TRangePartition) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DistributeBucket = _field
	return nil
}

func (p *TRangePartition) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TRangePartition"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TRangePartition) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("partition_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PartitionId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TRangePartition) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("range", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Range.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TRangePartition) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDistributedExprs() {
		if err = oprot.WriteFieldBegin("distributed_exprs", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DistributedExprs)); err != nil {
			return err
		}
		for _, v := range p.DistributedExprs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TRangePartition) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDistributeBucket() {
		if err = oprot.WriteFieldBegin("distribute_bucket", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.DistributeBucket); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TRangePartition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRangePartition(%+v)", *p)

}

func (p *TRangePartition) DeepEqual(ano *TRangePartition) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PartitionId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Range) {
		return false
	}
	if !p.Field3DeepEqual(ano.DistributedExprs) {
		return false
	}
	if !p.Field4DeepEqual(ano.DistributeBucket) {
		return false
	}
	return true
}

func (p *TRangePartition) Field1DeepEqual(src int64) bool {

	if p.PartitionId != src {
		return false
	}
	return true
}
func (p *TRangePartition) Field2DeepEqual(src *TPartitionRange) bool {

	if !p.Range.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TRangePartition) Field3DeepEqual(src []*exprs.TExpr) bool {

	if len(p.DistributedExprs) != len(src) {
		return false
	}
	for i, v := range p.DistributedExprs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TRangePartition) Field4DeepEqual(src *int32) bool {

	if p.DistributeBucket == src {
		return true
	} else if p.DistributeBucket == nil || src == nil {
		return false
	}
	if *p.DistributeBucket != *src {
		return false
	}
	return true
}

type TDataPartition struct {
	Type           TPartitionType     `thrift:"type,1,required" frugal:"1,required,TPartitionType" json:"type"`
	PartitionExprs []*exprs.TExpr     `thrift:"partition_exprs,2,optional" frugal:"2,optional,list<exprs.TExpr>" json:"partition_exprs,omitempty"`
	PartitionInfos []*TRangePartition `thrift:"partition_infos,3,optional" frugal:"3,optional,list<TRangePartition>" json:"partition_infos,omitempty"`
}

func NewTDataPartition() *TDataPartition {
	return &TDataPartition{}
}

func (p *TDataPartition) InitDefault() {
}

func (p *TDataPartition) GetType() (v TPartitionType) {
	return p.Type
}

var TDataPartition_PartitionExprs_DEFAULT []*exprs.TExpr

func (p *TDataPartition) GetPartitionExprs() (v []*exprs.TExpr) {
	if !p.IsSetPartitionExprs() {
		return TDataPartition_PartitionExprs_DEFAULT
	}
	return p.PartitionExprs
}

var TDataPartition_PartitionInfos_DEFAULT []*TRangePartition

func (p *TDataPartition) GetPartitionInfos() (v []*TRangePartition) {
	if !p.IsSetPartitionInfos() {
		return TDataPartition_PartitionInfos_DEFAULT
	}
	return p.PartitionInfos
}
func (p *TDataPartition) SetType(val TPartitionType) {
	p.Type = val
}
func (p *TDataPartition) SetPartitionExprs(val []*exprs.TExpr) {
	p.PartitionExprs = val
}
func (p *TDataPartition) SetPartitionInfos(val []*TRangePartition) {
	p.PartitionInfos = val
}

var fieldIDToName_TDataPartition = map[int16]string{
	1: "type",
	2: "partition_exprs",
	3: "partition_infos",
}

func (p *TDataPartition) IsSetPartitionExprs() bool {
	return p.PartitionExprs != nil
}

func (p *TDataPartition) IsSetPartitionInfos() bool {
	return p.PartitionInfos != nil
}

func (p *TDataPartition) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDataPartition[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TDataPartition[fieldId]))
}

func (p *TDataPartition) ReadField1(iprot thrift.TProtocol) error {

	var _field TPartitionType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TPartitionType(v)
	}
	p.Type = _field
	return nil
}
func (p *TDataPartition) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*exprs.TExpr, 0, size)
	values := make([]exprs.TExpr, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PartitionExprs = _field
	return nil
}
func (p *TDataPartition) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TRangePartition, 0, size)
	values := make([]TRangePartition, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PartitionInfos = _field
	return nil
}

func (p *TDataPartition) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDataPartition"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDataPartition) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDataPartition) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionExprs() {
		if err = oprot.WriteFieldBegin("partition_exprs", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PartitionExprs)); err != nil {
			return err
		}
		for _, v := range p.PartitionExprs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TDataPartition) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionInfos() {
		if err = oprot.WriteFieldBegin("partition_infos", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PartitionInfos)); err != nil {
			return err
		}
		for _, v := range p.PartitionInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TDataPartition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDataPartition(%+v)", *p)

}

func (p *TDataPartition) DeepEqual(ano *TDataPartition) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.PartitionExprs) {
		return false
	}
	if !p.Field3DeepEqual(ano.PartitionInfos) {
		return false
	}
	return true
}

func (p *TDataPartition) Field1DeepEqual(src TPartitionType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *TDataPartition) Field2DeepEqual(src []*exprs.TExpr) bool {

	if len(p.PartitionExprs) != len(src) {
		return false
	}
	for i, v := range p.PartitionExprs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TDataPartition) Field3DeepEqual(src []*TRangePartition) bool {

	if len(p.PartitionInfos) != len(src) {
		return false
	}
	for i, v := range p.PartitionInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
