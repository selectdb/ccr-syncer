// Code generated by MockGen. DO NOT EDIT.
// Source: storage/db.go

// Package storage is a generated GoMock package.
package storage

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// AddJob mocks base method.
func (m *MockDB) AddJob(jobName, jobInfo, hostInfo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJob", jobName, jobInfo, hostInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddJob indicates an expected call of AddJob.
func (mr *MockDBMockRecorder) AddJob(jobName, jobInfo, hostInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJob", reflect.TypeOf((*MockDB)(nil).AddJob), jobName, jobInfo, hostInfo)
}

// AddSyncer mocks base method.
func (m *MockDB) AddSyncer(hostInfo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSyncer", hostInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSyncer indicates an expected call of AddSyncer.
func (mr *MockDBMockRecorder) AddSyncer(hostInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSyncer", reflect.TypeOf((*MockDB)(nil).AddSyncer), hostInfo)
}

// GetAllData mocks base method.
func (m *MockDB) GetAllData() (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllData")
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllData indicates an expected call of GetAllData.
func (mr *MockDBMockRecorder) GetAllData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllData", reflect.TypeOf((*MockDB)(nil).GetAllData))
}

// GetDeadSyncers mocks base method.
func (m *MockDB) GetDeadSyncers(expiredTime int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeadSyncers", expiredTime)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeadSyncers indicates an expected call of GetDeadSyncers.
func (mr *MockDBMockRecorder) GetDeadSyncers(expiredTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeadSyncers", reflect.TypeOf((*MockDB)(nil).GetDeadSyncers), expiredTime)
}

// GetJobBelong mocks base method.
func (m *MockDB) GetJobBelong(jobName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobBelong", jobName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobBelong indicates an expected call of GetJobBelong.
func (mr *MockDBMockRecorder) GetJobBelong(jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobBelong", reflect.TypeOf((*MockDB)(nil).GetJobBelong), jobName)
}

// GetJobInfo mocks base method.
func (m *MockDB) GetJobInfo(jobName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobInfo", jobName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobInfo indicates an expected call of GetJobInfo.
func (mr *MockDBMockRecorder) GetJobInfo(jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobInfo", reflect.TypeOf((*MockDB)(nil).GetJobInfo), jobName)
}

// GetProgress mocks base method.
func (m *MockDB) GetProgress(jobName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgress", jobName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgress indicates an expected call of GetProgress.
func (mr *MockDBMockRecorder) GetProgress(jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgress", reflect.TypeOf((*MockDB)(nil).GetProgress), jobName)
}

// GetStampAndJobs mocks base method.
func (m *MockDB) GetStampAndJobs(hostInfo string) (int64, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStampAndJobs", hostInfo)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStampAndJobs indicates an expected call of GetStampAndJobs.
func (mr *MockDBMockRecorder) GetStampAndJobs(hostInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStampAndJobs", reflect.TypeOf((*MockDB)(nil).GetStampAndJobs), hostInfo)
}

// IsJobExist mocks base method.
func (m *MockDB) IsJobExist(jobName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsJobExist", jobName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsJobExist indicates an expected call of IsJobExist.
func (mr *MockDBMockRecorder) IsJobExist(jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsJobExist", reflect.TypeOf((*MockDB)(nil).IsJobExist), jobName)
}

// IsProgressExist mocks base method.
func (m *MockDB) IsProgressExist(jobName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProgressExist", jobName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsProgressExist indicates an expected call of IsProgressExist.
func (mr *MockDBMockRecorder) IsProgressExist(jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProgressExist", reflect.TypeOf((*MockDB)(nil).IsProgressExist), jobName)
}

// RebalanceLoadFromDeadSyncers mocks base method.
func (m *MockDB) RebalanceLoadFromDeadSyncers(syncers []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebalanceLoadFromDeadSyncers", syncers)
	ret0, _ := ret[0].(error)
	return ret0
}

// RebalanceLoadFromDeadSyncers indicates an expected call of RebalanceLoadFromDeadSyncers.
func (mr *MockDBMockRecorder) RebalanceLoadFromDeadSyncers(syncers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebalanceLoadFromDeadSyncers", reflect.TypeOf((*MockDB)(nil).RebalanceLoadFromDeadSyncers), syncers)
}

// RefreshSyncer mocks base method.
func (m *MockDB) RefreshSyncer(hostInfo string, lastStamp int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshSyncer", hostInfo, lastStamp)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshSyncer indicates an expected call of RefreshSyncer.
func (mr *MockDBMockRecorder) RefreshSyncer(hostInfo, lastStamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshSyncer", reflect.TypeOf((*MockDB)(nil).RefreshSyncer), hostInfo, lastStamp)
}

// RemoveJob mocks base method.
func (m *MockDB) RemoveJob(jobName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveJob", jobName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveJob indicates an expected call of RemoveJob.
func (mr *MockDBMockRecorder) RemoveJob(jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveJob", reflect.TypeOf((*MockDB)(nil).RemoveJob), jobName)
}

// UpdateJob mocks base method.
func (m *MockDB) UpdateJob(jobName, jobInfo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJob", jobName, jobInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJob indicates an expected call of UpdateJob.
func (mr *MockDBMockRecorder) UpdateJob(jobName, jobInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJob", reflect.TypeOf((*MockDB)(nil).UpdateJob), jobName, jobInfo)
}

// UpdateProgress mocks base method.
func (m *MockDB) UpdateProgress(jobName, progress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProgress", jobName, progress)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProgress indicates an expected call of UpdateProgress.
func (mr *MockDBMockRecorder) UpdateProgress(jobName, progress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProgress", reflect.TypeOf((*MockDB)(nil).UpdateProgress), jobName, progress)
}
